
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018310  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fac  08018450  08018450  00019450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a3fc  0801a3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a404  0801a404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a408  0801a408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c0  20000008  0801a40c  0001c008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a63c  200002c8  0801a6cc  0001c2c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000a904  0801a6cc  0001c904  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001c2c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030882  00000000  00000000  0001c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054aa  00000000  00000000  0004cb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c18  00000000  00000000  00052028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002266  00000000  00000000  00054c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000287cd  00000000  00000000  00056ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d60b  00000000  00000000  0007f673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fa120  00000000  00000000  000acc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a6d9e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d6a4  00000000  00000000  001a6de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001b4488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801842c 	.word	0x0801842c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	0801842c 	.word	0x0801842c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9d3 	b.w	8001020 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b988 	b.w	8001020 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8001032:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d11a      	bne.n	800107a <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fcf6 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4a2a      	ldr	r2, [pc, #168]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 800105c:	4926      	ldr	r1, [pc, #152]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800105e:	482a      	ldr	r0, [pc, #168]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 8001060:	f010 f86c 	bl	801113c <HAL_SPI_TransmitReceive>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f00d fce4 	bl	800ea40 <HAL_GPIO_WritePin>
 8001078:	e037      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d11a      	bne.n	80010b6 <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 8001086:	8811      	ldrh	r1, [r2, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00d fcd8 	bl	800ea40 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	2264      	movs	r2, #100	@ 0x64
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 8001098:	4917      	ldr	r1, [pc, #92]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800109a:	481b      	ldr	r0, [pc, #108]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 800109c:	f010 f84e 	bl	801113c <HAL_SPI_TransmitReceive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00d fcc6 	bl	800ea40 <HAL_GPIO_WritePin>
 80010b4:	e019      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010bc:	8811      	ldrh	r1, [r2, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00d fcbd 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2264      	movs	r2, #100	@ 0x64
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 80010ce:	490a      	ldr	r1, [pc, #40]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 80010d2:	f010 f833 	bl	801113c <HAL_SPI_TransmitReceive>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010e0:	8811      	ldrh	r1, [r2, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00d fcab 	bl	800ea40 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002e4 	.word	0x200002e4
 80010fc:	20000cb0 	.word	0x20000cb0
 8001100:	20000cae 	.word	0x20000cae
 8001104:	20000344 	.word	0x20000344
 8001108:	20000508 	.word	0x20000508
 800110c:	20000c90 	.word	0x20000c90
 8001110:	20000c8e 	.word	0x20000c8e
 8001114:	20000c70 	.word	0x20000c70
 8001118:	20000c6e 	.word	0x20000c6e

0800111c <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	603a      	str	r2, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	460b      	mov	r3, r1
 800112a:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3330      	adds	r3, #48	@ 0x30
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001144:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 800114c:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001150:	2200      	movs	r2, #0
 8001152:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d11a      	bne.n	8001190 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00d fc6b 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001172:	4928      	ldr	r1, [pc, #160]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001174:	482b      	ldr	r0, [pc, #172]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 8001176:	f00f ffe1 	bl	801113c <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f00d fc59 	bl	800ea40 <HAL_GPIO_WritePin>
 800118e:	e037      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d11a      	bne.n	80011cc <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 800119c:	8811      	ldrh	r1, [r2, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00d fc4d 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a6:	89bb      	ldrh	r3, [r7, #12]
 80011a8:	2264      	movs	r2, #100	@ 0x64
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011ae:	4919      	ldr	r1, [pc, #100]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011b2:	f00f ffc3 	bl	801113c <HAL_SPI_TransmitReceive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 80011c0:	8811      	ldrh	r1, [r2, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00d fc3b 	bl	800ea40 <HAL_GPIO_WritePin>
 80011ca:	e019      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00d fc32 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011dc:	89bb      	ldrh	r3, [r7, #12]
 80011de:	2264      	movs	r2, #100	@ 0x64
 80011e0:	9200      	str	r2, [sp, #0]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011e4:	490b      	ldr	r1, [pc, #44]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011e8:	f00f ffa8 	bl	801113c <HAL_SPI_TransmitReceive>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011f6:	8811      	ldrh	r1, [r2, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00d fc20 	bl	800ea40 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001202:	789a      	ldrb	r2, [r3, #2]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002e4 	.word	0x200002e4
 8001218:	20000cb0 	.word	0x20000cb0
 800121c:	20000cae 	.word	0x20000cae
 8001220:	20000344 	.word	0x20000344
 8001224:	20000508 	.word	0x20000508
 8001228:	20000c90 	.word	0x20000c90
 800122c:	20000c8e 	.word	0x20000c8e
 8001230:	20000c70 	.word	0x20000c70
 8001234:	20000c6e 	.word	0x20000c6e

08001238 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800124a:	2303      	movs	r3, #3
 800124c:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3320      	adds	r3, #32
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001262:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126a:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 800126c:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d11a      	bne.n	80012ae <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d fbdc 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001290:	4926      	ldr	r1, [pc, #152]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001292:	482a      	ldr	r0, [pc, #168]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001294:	f00f ff52 	bl	801113c <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00d fbca 	bl	800ea40 <HAL_GPIO_WritePin>
 80012ac:	e037      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11a      	bne.n	80012ea <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012ba:	8811      	ldrh	r1, [r2, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00d fbbe 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012c4:	89bb      	ldrh	r3, [r7, #12]
 80012c6:	2264      	movs	r2, #100	@ 0x64
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 80012cc:	4917      	ldr	r1, [pc, #92]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 80012d0:	f00f ff34 	bl	801113c <HAL_SPI_TransmitReceive>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012de:	8811      	ldrh	r1, [r2, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00d fbac 	bl	800ea40 <HAL_GPIO_WritePin>
 80012e8:	e019      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 80012f0:	8811      	ldrh	r1, [r2, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00d fba3 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001304:	480d      	ldr	r0, [pc, #52]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001306:	f00f ff19 	bl	801113c <HAL_SPI_TransmitReceive>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 8001314:	8811      	ldrh	r1, [r2, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f00d fb91 	bl	800ea40 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002e4 	.word	0x200002e4
 8001330:	20000cb0 	.word	0x20000cb0
 8001334:	20000cae 	.word	0x20000cae
 8001338:	20000344 	.word	0x20000344
 800133c:	20000508 	.word	0x20000508
 8001340:	20000c90 	.word	0x20000c90
 8001344:	20000c8e 	.word	0x20000c8e
 8001348:	20000c70 	.word	0x20000c70
 800134c:	20000c6e 	.word	0x20000c6e

08001350 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	603a      	str	r2, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	460b      	mov	r3, r1
 800135e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001360:	2306      	movs	r3, #6
 8001362:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001378:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001380:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d11a      	bne.n	80013be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a3d      	ldr	r2, [pc, #244]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 800138e:	8811      	ldrh	r1, [r2, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00d fb54 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001398:	89bb      	ldrh	r3, [r7, #12]
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	4a3a      	ldr	r2, [pc, #232]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013a0:	4936      	ldr	r1, [pc, #216]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013a2:	483a      	ldr	r0, [pc, #232]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013a4:	f00f feca 	bl	801113c <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00d fb42 	bl	800ea40 <HAL_GPIO_WritePin>
 80013bc:	e037      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d11a      	bne.n	80013fa <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ca:	8811      	ldrh	r1, [r2, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d fb36 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013dc:	4927      	ldr	r1, [pc, #156]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013de:	482b      	ldr	r0, [pc, #172]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013e0:	f00f feac 	bl	801113c <HAL_SPI_TransmitReceive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00d fb24 	bl	800ea40 <HAL_GPIO_WritePin>
 80013f8:	e019      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a27      	ldr	r2, [pc, #156]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001400:	8811      	ldrh	r1, [r2, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00d fb1b 	bl	800ea40 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	2264      	movs	r2, #100	@ 0x64
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 8001412:	491a      	ldr	r1, [pc, #104]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001414:	481d      	ldr	r0, [pc, #116]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 8001416:	f00f fe91 	bl	801113c <HAL_SPI_TransmitReceive>
 800141a:	4603      	mov	r3, r0
 800141c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001424:	8811      	ldrh	r1, [r2, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f00d fb09 	bl	800ea40 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001438:	e01c      	b.n	8001474 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001440:	2302      	movs	r3, #2
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e011      	b.n	800146a <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b02      	subs	r3, #2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	441a      	add	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d9ea      	bls.n	8001446 <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 8001470:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002e4 	.word	0x200002e4
 8001480:	20000cb0 	.word	0x20000cb0
 8001484:	20000cae 	.word	0x20000cae
 8001488:	20000344 	.word	0x20000344
 800148c:	20000508 	.word	0x20000508
 8001490:	20000c90 	.word	0x20000c90
 8001494:	20000c8e 	.word	0x20000c8e
 8001498:	20000c70 	.word	0x20000c70
 800149c:	20000c6e 	.word	0x20000c6e

080014a0 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80014b0:	2306      	movs	r3, #6
 80014b2:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3320      	adds	r3, #32
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014c8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014d0:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e00b      	b.n	80014f0 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	40da      	lsrs	r2, r3
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3302      	adds	r3, #2
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014e8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9f0      	bls.n	80014d8 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d11a      	bne.n	8001532 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00d fa9a 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	2264      	movs	r2, #100	@ 0x64
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001514:	4926      	ldr	r1, [pc, #152]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001516:	482a      	ldr	r0, [pc, #168]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001518:	f00f fe10 	bl	801113c <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a24      	ldr	r2, [pc, #144]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f00d fa88 	bl	800ea40 <HAL_GPIO_WritePin>
 8001530:	e037      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11a      	bne.n	800156e <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f00d fa7c 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	2264      	movs	r2, #100	@ 0x64
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001554:	f00f fdf2 	bl	801113c <HAL_SPI_TransmitReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 8001562:	8811      	ldrh	r1, [r2, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f00d fa6a 	bl	800ea40 <HAL_GPIO_WritePin>
 800156c:	e019      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001574:	8811      	ldrh	r1, [r2, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00d fa61 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800157e:	89bb      	ldrh	r3, [r7, #12]
 8001580:	2264      	movs	r2, #100	@ 0x64
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001586:	490a      	ldr	r1, [pc, #40]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 800158a:	f00f fdd7 	bl	801113c <HAL_SPI_TransmitReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001598:	8811      	ldrh	r1, [r2, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f00d fa4f 	bl	800ea40 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 80015a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	20000cb0 	.word	0x20000cb0
 80015b8:	20000cae 	.word	0x20000cae
 80015bc:	20000344 	.word	0x20000344
 80015c0:	20000508 	.word	0x20000508
 80015c4:	20000c90 	.word	0x20000c90
 80015c8:	20000c8e 	.word	0x20000c8e
 80015cc:	20000c70 	.word	0x20000c70
 80015d0:	20000c6e 	.word	0x20000c6e

080015d4 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	603a      	str	r2, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	460b      	mov	r3, r1
 80015e2:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3330      	adds	r3, #48	@ 0x30
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b40      	ldr	r3, [pc, #256]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001604:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d11a      	bne.n	8001642 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800160c:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3e      	ldr	r2, [pc, #248]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fa12 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	4a3b      	ldr	r2, [pc, #236]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001624:	4937      	ldr	r1, [pc, #220]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001626:	483b      	ldr	r0, [pc, #236]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001628:	f00f fd88 	bl	801113c <HAL_SPI_TransmitReceive>
 800162c:	4603      	mov	r3, r0
 800162e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001630:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f00d fa00 	bl	800ea40 <HAL_GPIO_WritePin>
 8001640:	e037      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11a      	bne.n	800167e <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a33      	ldr	r2, [pc, #204]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 800164e:	8811      	ldrh	r1, [r2, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00d f9f4 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	2264      	movs	r2, #100	@ 0x64
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001660:	4928      	ldr	r1, [pc, #160]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001662:	482c      	ldr	r0, [pc, #176]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001664:	f00f fd6a 	bl	801113c <HAL_SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001672:	8811      	ldrh	r1, [r2, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f00d f9e2 	bl	800ea40 <HAL_GPIO_WritePin>
 800167c:	e019      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001684:	8811      	ldrh	r1, [r2, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00d f9d9 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	2264      	movs	r2, #100	@ 0x64
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001696:	491b      	ldr	r1, [pc, #108]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001698:	481e      	ldr	r0, [pc, #120]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 800169a:	f00f fd4f 	bl	801113c <HAL_SPI_TransmitReceive>
 800169e:	4603      	mov	r3, r0
 80016a0:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 80016a8:	8811      	ldrh	r1, [r2, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00d f9c7 	bl	800ea40 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 80016b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016bc:	e01e      	b.n	80016fc <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016c4:	2302      	movs	r3, #2
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e013      	b.n	80016f2 <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3b02      	subs	r3, #2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d9e8      	bls.n	80016ca <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002e4 	.word	0x200002e4
 8001708:	20000cb0 	.word	0x20000cb0
 800170c:	20000cae 	.word	0x20000cae
 8001710:	20000344 	.word	0x20000344
 8001714:	20000508 	.word	0x20000508
 8001718:	20000c90 	.word	0x20000c90
 800171c:	20000c8e 	.word	0x20000c8e
 8001720:	20000c70 	.word	0x20000c70
 8001724:	20000c6e 	.word	0x20000c6e

08001728 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	460b      	mov	r3, r1
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3320      	adds	r3, #32
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001752:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800175a:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e00b      	b.n	800177a <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	411a      	asrs	r2, r3
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3302      	adds	r3, #2
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001772:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d9f0      	bls.n	8001762 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d11a      	bne.n	80017bc <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00d f955 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a29      	ldr	r2, [pc, #164]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800179e:	4926      	ldr	r1, [pc, #152]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a0:	4829      	ldr	r0, [pc, #164]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017a2:	f00f fccb 	bl	801113c <HAL_SPI_TransmitReceive>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00d f943 	bl	800ea40 <HAL_GPIO_WritePin>
 80017ba:	e037      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d11a      	bne.n	80017f8 <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017c8:	8811      	ldrh	r1, [r2, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00d f937 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017da:	4917      	ldr	r1, [pc, #92]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017dc:	481a      	ldr	r0, [pc, #104]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017de:	f00f fcad 	bl	801113c <HAL_SPI_TransmitReceive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017ec:	8811      	ldrh	r1, [r2, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d f925 	bl	800ea40 <HAL_GPIO_WritePin>
 80017f6:	e019      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017fe:	8811      	ldrh	r1, [r2, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00d f91c 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	2264      	movs	r2, #100	@ 0x64
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 8001810:	4909      	ldr	r1, [pc, #36]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 8001814:	f00f fc92 	bl	801113c <HAL_SPI_TransmitReceive>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 8001822:	8811      	ldrh	r1, [r2, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f00d f90a 	bl	800ea40 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 800182c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002e4 	.word	0x200002e4
 800183c:	20000cb0 	.word	0x20000cb0
 8001840:	20000cae 	.word	0x20000cae
 8001844:	20000344 	.word	0x20000344
 8001848:	20000508 	.word	0x20000508
 800184c:	20000c90 	.word	0x20000c90
 8001850:	20000c8e 	.word	0x20000c8e
 8001854:	20000c70 	.word	0x20000c70
 8001858:	20000c6e 	.word	0x20000c6e

0800185c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	461a      	mov	r2, r3
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	460b      	mov	r3, r1
 800186c:	81bb      	strh	r3, [r7, #12]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3302      	adds	r3, #2
 8001876:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	2b60      	cmp	r3, #96	@ 0x60
 800187c:	d902      	bls.n	8001884 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e086      	b.n	8001992 <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001898:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018a0:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018a2:	2302      	movs	r3, #2
 80018a4:	82fb      	strh	r3, [r7, #22]
 80018a6:	e006      	b.n	80018b6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	3301      	adds	r3, #1
 80018b4:	82fb      	strh	r3, [r7, #22]
 80018b6:	8afa      	ldrh	r2, [r7, #22]
 80018b8:	8a7b      	ldrh	r3, [r7, #18]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3f4      	bcc.n	80018a8 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d11a      	bne.n	80018fa <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80018c4:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a36      	ldr	r2, [pc, #216]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ca:	8811      	ldrh	r1, [r2, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00d f8b6 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018de:	4833      	ldr	r0, [pc, #204]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e0:	f00f fc2c 	bl	801113c <HAL_SPI_TransmitReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d f8a4 	bl	800ea40 <HAL_GPIO_WritePin>
 80018f8:	e037      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11a      	bne.n	8001936 <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001900:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00d f898 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001910:	8a7b      	ldrh	r3, [r7, #18]
 8001912:	2264      	movs	r2, #100	@ 0x64
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001918:	4920      	ldr	r1, [pc, #128]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 800191a:	4824      	ldr	r0, [pc, #144]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 800191c:	f00f fc0e 	bl	801113c <HAL_SPI_TransmitReceive>
 8001920:	4603      	mov	r3, r0
 8001922:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 800192a:	8811      	ldrh	r1, [r2, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f00d f886 	bl	800ea40 <HAL_GPIO_WritePin>
 8001934:	e019      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f00d f87d 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	2264      	movs	r2, #100	@ 0x64
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800194e:	4913      	ldr	r1, [pc, #76]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001950:	4816      	ldr	r0, [pc, #88]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 8001952:	f00f fbf3 	bl	801113c <HAL_SPI_TransmitReceive>
 8001956:	4603      	mov	r3, r0
 8001958:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001960:	8811      	ldrh	r1, [r2, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f00d f86b 	bl	800ea40 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	82fb      	strh	r3, [r7, #22]
 800196e:	e00a      	b.n	8001986 <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	1c9a      	adds	r2, r3, #2
 8001974:	8afb      	ldrh	r3, [r7, #22]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	440b      	add	r3, r1
 800197a:	490b      	ldr	r1, [pc, #44]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800197c:	5c8a      	ldrb	r2, [r1, r2]
 800197e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001980:	8afb      	ldrh	r3, [r7, #22]
 8001982:	3301      	adds	r3, #1
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	8afa      	ldrh	r2, [r7, #22]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3f0      	bcc.n	8001970 <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 800198e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	20000cb0 	.word	0x20000cb0
 80019a4:	20000cae 	.word	0x20000cae
 80019a8:	20000344 	.word	0x20000344
 80019ac:	20000508 	.word	0x20000508
 80019b0:	20000c90 	.word	0x20000c90
 80019b4:	20000c8e 	.word	0x20000c8e
 80019b8:	20000c70 	.word	0x20000c70
 80019bc:	20000c6e 	.word	0x20000c6e

080019c0 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	460b      	mov	r3, r1
 80019d0:	81bb      	strh	r3, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	3302      	adds	r3, #2
 80019da:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019dc:	8a7b      	ldrh	r3, [r7, #18]
 80019de:	2b60      	cmp	r3, #96	@ 0x60
 80019e0:	d902      	bls.n	80019e8 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e078      	b.n	8001ada <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3320      	adds	r3, #32
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019fe:	89bb      	ldrh	r3, [r7, #12]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a04:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	82fb      	strh	r3, [r7, #22]
 8001a0a:	e00a      	b.n	8001a22 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	441a      	add	r2, r3
 8001a12:	8afb      	ldrh	r3, [r7, #22]
 8001a14:	3302      	adds	r3, #2
 8001a16:	7811      	ldrb	r1, [r2, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a1a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	82fb      	strh	r3, [r7, #22]
 8001a22:	8afa      	ldrh	r2, [r7, #22]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3f0      	bcc.n	8001a0c <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d11a      	bne.n	8001a66 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2d      	ldr	r2, [pc, #180]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a36:	8811      	ldrh	r1, [r2, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00d f800 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a48:	4926      	ldr	r1, [pc, #152]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a4a:	482a      	ldr	r0, [pc, #168]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a4c:	f00f fb76 	bl	801113c <HAL_SPI_TransmitReceive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a5a:	8811      	ldrh	r1, [r2, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00c ffee 	bl	800ea40 <HAL_GPIO_WritePin>
 8001a64:	e037      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11a      	bne.n	8001aa2 <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a72:	8811      	ldrh	r1, [r2, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00c ffe2 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	2264      	movs	r2, #100	@ 0x64
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a84:	4917      	ldr	r1, [pc, #92]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a86:	481b      	ldr	r0, [pc, #108]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a88:	f00f fb58 	bl	801113c <HAL_SPI_TransmitReceive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a96:	8811      	ldrh	r1, [r2, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00c ffd0 	bl	800ea40 <HAL_GPIO_WritePin>
 8001aa0:	e019      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001aa8:	8811      	ldrh	r1, [r2, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c ffc7 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001ab2:	8a7b      	ldrh	r3, [r7, #18]
 8001ab4:	2264      	movs	r2, #100	@ 0x64
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001abe:	f00f fb3d 	bl	801113c <HAL_SPI_TransmitReceive>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001acc:	8811      	ldrh	r1, [r2, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00c ffb5 	bl	800ea40 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001ad6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	20000cb0 	.word	0x20000cb0
 8001aec:	20000cae 	.word	0x20000cae
 8001af0:	20000344 	.word	0x20000344
 8001af4:	20000508 	.word	0x20000508
 8001af8:	20000c90 	.word	0x20000c90
 8001afc:	20000c8e 	.word	0x20000c8e
 8001b00:	20000c70 	.word	0x20000c70
 8001b04:	20000c6e 	.word	0x20000c6e

08001b08 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	460b      	mov	r3, r1
 8001b18:	81bb      	strh	r3, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3302      	adds	r3, #2
 8001b26:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	2b60      	cmp	r3, #96	@ 0x60
 8001b2c:	d902      	bls.n	8001b34 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e0a2      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3330      	adds	r3, #48	@ 0x30
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b48:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b4a:	89bb      	ldrh	r3, [r7, #12]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b50:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b52:	2302      	movs	r3, #2
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	e006      	b.n	8001b66 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b60:	8bfb      	ldrh	r3, [r7, #30]
 8001b62:	3301      	adds	r3, #1
 8001b64:	83fb      	strh	r3, [r7, #30]
 8001b66:	8bfa      	ldrh	r2, [r7, #30]
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3f4      	bcc.n	8001b58 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d11a      	bne.n	8001baa <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b7a:	8811      	ldrh	r1, [r2, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00c ff5e 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2264      	movs	r2, #100	@ 0x64
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	4a41      	ldr	r2, [pc, #260]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b8c:	493d      	ldr	r1, [pc, #244]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b8e:	4841      	ldr	r0, [pc, #260]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b90:	f00f fad4 	bl	801113c <HAL_SPI_TransmitReceive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b9e:	8811      	ldrh	r1, [r2, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00c ff4c 	bl	800ea40 <HAL_GPIO_WritePin>
 8001ba8:	e037      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11a      	bne.n	8001be6 <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bb6:	8811      	ldrh	r1, [r2, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00c ff40 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bc0:	8afb      	ldrh	r3, [r7, #22]
 8001bc2:	2264      	movs	r2, #100	@ 0x64
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bc8:	492e      	ldr	r1, [pc, #184]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bca:	4832      	ldr	r0, [pc, #200]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bcc:	f00f fab6 	bl	801113c <HAL_SPI_TransmitReceive>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001bd4:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bda:	8811      	ldrh	r1, [r2, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00c ff2e 	bl	800ea40 <HAL_GPIO_WritePin>
 8001be4:	e019      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bec:	8811      	ldrh	r1, [r2, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00c ff25 	bl	800ea40 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bf6:	8afb      	ldrh	r3, [r7, #22]
 8001bf8:	2264      	movs	r2, #100	@ 0x64
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bfe:	4921      	ldr	r1, [pc, #132]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001c00:	4824      	ldr	r0, [pc, #144]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001c02:	f00f fa9b 	bl	801113c <HAL_SPI_TransmitReceive>
 8001c06:	4603      	mov	r3, r0
 8001c08:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001c0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001c10:	8811      	ldrh	r1, [r2, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00c ff13 	bl	800ea40 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001c1a:	7e7b      	ldrb	r3, [r7, #25]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001c20:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001c24:	e029      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83fb      	strh	r3, [r7, #30]
 8001c2e:	e01e      	b.n	8001c6e <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	83bb      	strh	r3, [r7, #28]
 8001c38:	e00d      	b.n	8001c56 <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001c3a:	8b7a      	ldrh	r2, [r7, #26]
 8001c3c:	8bbb      	ldrh	r3, [r7, #28]
 8001c3e:	4914      	ldr	r1, [pc, #80]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c40:	5c8a      	ldrb	r2, [r1, r2]
 8001c42:	3320      	adds	r3, #32
 8001c44:	443b      	add	r3, r7
 8001c46:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c4a:	8bbb      	ldrh	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	83bb      	strh	r3, [r7, #28]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	3301      	adds	r3, #1
 8001c54:	837b      	strh	r3, [r7, #26]
 8001c56:	8bbb      	ldrh	r3, [r7, #28]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d9ee      	bls.n	8001c3a <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c5c:	8bfb      	ldrh	r3, [r7, #30]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c68:	8bfb      	ldrh	r3, [r7, #30]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	83fb      	strh	r3, [r7, #30]
 8001c6e:	8bfa      	ldrh	r2, [r7, #30]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3dc      	bcc.n	8001c30 <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c76:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002e4 	.word	0x200002e4
 8001c88:	20000cb0 	.word	0x20000cb0
 8001c8c:	20000cae 	.word	0x20000cae
 8001c90:	20000344 	.word	0x20000344
 8001c94:	20000508 	.word	0x20000508
 8001c98:	20000c90 	.word	0x20000c90
 8001c9c:	20000c8e 	.word	0x20000c8e
 8001ca0:	20000c70 	.word	0x20000c70
 8001ca4:	20000c6e 	.word	0x20000c6e

08001ca8 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001cb8:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <DRV_CANFDSPI_Configure+0x118>)
 8001cba:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	7a3b      	ldrb	r3, [r7, #8]
 8001cc8:	f362 0304 	bfi	r3, r2, #0, #5
 8001ccc:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	f362 1345 	bfi	r3, r2, #5, #1
 8001cde:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	7a3b      	ldrb	r3, [r7, #8]
 8001cec:	f362 1386 	bfi	r3, r2, #6, #1
 8001cf0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	7a7b      	ldrb	r3, [r7, #9]
 8001cfe:	f362 0300 	bfi	r3, r2, #0, #1
 8001d02:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	7a7b      	ldrb	r3, [r7, #9]
 8001d10:	f362 0342 	bfi	r3, r2, #1, #2
 8001d14:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	7a7b      	ldrb	r3, [r7, #9]
 8001d22:	f362 1304 	bfi	r3, r2, #4, #1
 8001d26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	7abb      	ldrb	r3, [r7, #10]
 8001d34:	f362 0300 	bfi	r3, r2, #0, #1
 8001d38:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	7abb      	ldrb	r3, [r7, #10]
 8001d46:	f362 0341 	bfi	r3, r2, #1, #1
 8001d4a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	7abb      	ldrb	r3, [r7, #10]
 8001d58:	f362 0382 	bfi	r3, r2, #2, #1
 8001d5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	7abb      	ldrb	r3, [r7, #10]
 8001d7c:	f362 1304 	bfi	r3, r2, #4, #1
 8001d80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f362 1307 	bfi	r3, r2, #4, #4
 8001d92:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb80 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e001      	b.n	8001db6 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	04980760 	.word	0x04980760

08001dc4 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001dce:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f361 0304 	bfi	r3, r1, #0, #5
 8001de0:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001de2:	7b3b      	ldrb	r3, [r7, #12]
 8001de4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	7813      	ldrb	r3, [r2, #0]
 8001dee:	f361 1345 	bfi	r3, r1, #5, #1
 8001df2:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	7813      	ldrb	r3, [r2, #0]
 8001e00:	f361 1386 	bfi	r3, r1, #6, #1
 8001e04:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001e06:	7b7b      	ldrb	r3, [r7, #13]
 8001e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e16:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	7853      	ldrb	r3, [r2, #1]
 8001e24:	f361 0301 	bfi	r3, r1, #0, #2
 8001e28:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	7853      	ldrb	r3, [r2, #1]
 8001e36:	f361 0382 	bfi	r3, r1, #2, #1
 8001e3a:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e42:	b2d9      	uxtb	r1, r3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7853      	ldrb	r3, [r2, #1]
 8001e48:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e4c:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	7853      	ldrb	r3, [r2, #1]
 8001e5a:	f361 1304 	bfi	r3, r1, #4, #1
 8001e5e:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	7853      	ldrb	r3, [r2, #1]
 8001e6c:	f361 1345 	bfi	r3, r1, #5, #1
 8001e70:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	7853      	ldrb	r3, [r2, #1]
 8001e7e:	f361 1386 	bfi	r3, r1, #6, #1
 8001e82:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e8a:	b2d9      	uxtb	r1, r3
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	7853      	ldrb	r3, [r2, #1]
 8001e90:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e94:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7893      	ldrb	r3, [r2, #2]
 8001ea2:	f361 0303 	bfi	r3, r1, #0, #4
 8001ea6:	7093      	strb	r3, [r2, #2]

    return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	04980760 	.word	0x04980760

08001ebc <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001ed4:	f107 020e 	add.w	r2, r7, #14
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f91d 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e01a      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001f08:	7bba      	ldrb	r2, [r7, #14]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f992 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	e001      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	603a      	str	r2, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	460b      	mov	r3, r1
 8001f42:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f4e:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f50:	7a3b      	ldrb	r3, [r7, #8]
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f362 0304 	bfi	r3, r2, #0, #5
 8001f68:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	f362 1347 	bfi	r3, r2, #5, #3
 8001f7a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7abb      	ldrb	r3, [r7, #10]
 8001f88:	f362 1346 	bfi	r3, r2, #5, #2
 8001f8c:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	f362 0304 	bfi	r3, r2, #0, #5
 8001f9e:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	7a3b      	ldrb	r3, [r7, #8]
 8001fac:	f362 1386 	bfi	r3, r2, #6, #1
 8001fb0:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3350      	adds	r3, #80	@ 0x50
 8001fc2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	89b9      	ldrh	r1, [r7, #12]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fa68 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	00600400 	.word	0x00600400

08001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fee:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001ff0:	7b3b      	ldrb	r3, [r7, #12]
 8001ff2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	f361 0300 	bfi	r3, r1, #0, #1
 8002000:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7813      	ldrb	r3, [r2, #0]
 800200e:	f361 0345 	bfi	r3, r1, #1, #5
 8002012:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800201a:	b2d9      	uxtb	r1, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	7813      	ldrb	r3, [r2, #0]
 8002020:	f361 1387 	bfi	r3, r1, #6, #2
 8002024:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	7853      	ldrb	r3, [r2, #1]
 8002032:	f361 0304 	bfi	r3, r1, #0, #5
 8002036:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800203e:	b2d9      	uxtb	r1, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	7853      	ldrb	r3, [r2, #1]
 8002044:	f361 1347 	bfi	r3, r1, #5, #3
 8002048:	7053      	strb	r3, [r2, #1]

    return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	00600400 	.word	0x00600400

0800205c <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0a0      	sub	sp, #128	@ 0x80
 8002060:	af00      	add	r7, sp, #0
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	460b      	mov	r3, r1
 800206c:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	0052      	lsls	r2, r2, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	b29b      	uxth	r3, r3
 8002082:	3350      	adds	r3, #80	@ 0x50
 8002084:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002088:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800208c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8002090:	7bf8      	ldrb	r0, [r7, #15]
 8002092:	2303      	movs	r3, #3
 8002094:	f7ff fd38 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 800209e:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e0c5      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 80020b0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80020b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 80020be:	f06f 0301 	mvn.w	r3, #1
 80020c2:	e0b9      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fc3a 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 80020d4:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 80020d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80020d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020dc:	429a      	cmp	r2, r3
 80020de:	d202      	bcs.n	80020e6 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020e0:	f06f 0302 	mvn.w	r3, #2
 80020e4:	e0a8      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 80020fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002104:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	78db      	ldrb	r3, [r3, #3]
 800211e:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	795b      	ldrb	r3, [r3, #5]
 800212a:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	799b      	ldrb	r3, [r3, #6]
 8002130:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	79db      	ldrb	r3, [r3, #7]
 8002136:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800213e:	e010      	b.n	8002162 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002140:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	441a      	add	r2, r3
 8002148:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800214c:	3308      	adds	r3, #8
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	3380      	adds	r3, #128	@ 0x80
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002158:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800215c:	3301      	adds	r3, #1
 800215e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002162:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002166:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800216a:	429a      	cmp	r2, r3
 800216c:	d8e8      	bhi.n	8002140 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 800217a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d02b      	beq.n	80021de <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800218a:	b29b      	uxth	r3, r3
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	b29b      	uxth	r3, r3
 8002192:	f1c3 0304 	rsb	r3, r3, #4
 8002196:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3308      	adds	r3, #8
 80021a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021ac:	e010      	b.n	80021d0 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 80021ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ba:	4413      	add	r3, r2
 80021bc:	3380      	adds	r3, #128	@ 0x80
 80021be:	443b      	add	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 80021c6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ca:	3301      	adds	r3, #1
 80021cc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021d0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d8e7      	bhi.n	80021ae <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3308      	adds	r3, #8
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 80021f8:	7bf8      	ldrb	r0, [r7, #15]
 80021fa:	f7ff fbe1 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002204:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 800220c:	f06f 0303 	mvn.w	r3, #3
 8002210:	e012      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8002212:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8002216:	7bb9      	ldrb	r1, [r7, #14]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f83a 	bl	8002294 <DRV_CANFDSPI_TransmitChannelUpdate>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002226:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800222e:	f06f 0304 	mvn.w	r3, #4
 8002232:	e001      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8002234:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 8002238:	4618      	mov	r0, r3
 800223a:	3780      	adds	r7, #128	@ 0x80
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	0052      	lsls	r2, r2, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	b29b      	uxth	r3, r3
 800226a:	3350      	adds	r3, #80	@ 0x50
 800226c:	81bb      	strh	r3, [r7, #12]
    a += 1;
 800226e:	89bb      	ldrh	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002274:	2302      	movs	r3, #2
 8002276:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	89b9      	ldrh	r1, [r7, #12]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ffda 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002284:	4603      	mov	r3, r0
 8002286:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8002288:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	460b      	mov	r3, r1
 80022a0:	71bb      	strb	r3, [r7, #6]
 80022a2:	4613      	mov	r3, r2
 80022a4:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3351      	adds	r3, #81	@ 0x51
 80022ba:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80022c0:	7a7b      	ldrb	r3, [r7, #9]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80022c8:	797b      	ldrb	r3, [r7, #5]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80022ce:	7a7b      	ldrb	r3, [r7, #9]
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80022d6:	7a7a      	ldrb	r2, [r7, #9]
 80022d8:	89b9      	ldrh	r1, [r7, #12]
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ffab 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e001      	b.n	80022f8 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	603a      	str	r2, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	460b      	mov	r3, r1
 800230e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	333e      	adds	r3, #62	@ 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	89b9      	ldrh	r1, [r7, #12]
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f8b6 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	603a      	str	r2, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	460b      	mov	r3, r1
 8002352:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	b29b      	uxth	r3, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	b29b      	uxth	r3, r3
 800236a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800236e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	89b9      	ldrh	r1, [r7, #12]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f892 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	4603      	mov	r3, r0
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	460b      	mov	r3, r1
 80023a4:	717b      	strb	r3, [r7, #5]
 80023a6:	4613      	mov	r3, r2
 80023a8:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80023b4:	7a3b      	ldrb	r3, [r7, #8]
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	723b      	strb	r3, [r7, #8]
 80023bc:	e003      	b.n	80023c6 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80023be:	7a3b      	ldrb	r3, [r7, #8]
 80023c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c4:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80023c6:	797b      	ldrb	r3, [r7, #5]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	f362 0304 	bfi	r3, r2, #0, #5
 80023d4:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80023de:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023e0:	7a3a      	ldrb	r2, [r7, #8]
 80023e2:	89b9      	ldrh	r1, [r7, #12]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ff26 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	603a      	str	r2, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	460b      	mov	r3, r1
 800240a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800241a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800241e:	e033      	b.n	8002488 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002422:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002424:	7a3b      	ldrb	r3, [r7, #8]
 8002426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002434:	b2da      	uxtb	r2, r3
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f362 0304 	bfi	r3, r2, #0, #5
 800243c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002446:	b2da      	uxtb	r2, r3
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f362 1347 	bfi	r3, r2, #5, #3
 800244e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	7a3b      	ldrb	r3, [r7, #8]
 800245c:	f362 1345 	bfi	r3, r2, #5, #1
 8002460:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	0052      	lsls	r2, r2, #1
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	b29b      	uxth	r3, r3
 8002470:	3350      	adds	r3, #80	@ 0x50
 8002472:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	89b9      	ldrh	r1, [r7, #12]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f810 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00600400 	.word	0x00600400

08002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 800249e:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	7813      	ldrb	r3, [r2, #0]
 80024ac:	f361 0345 	bfi	r3, r1, #1, #5
 80024b0:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	8813      	ldrh	r3, [r2, #0]
 80024be:	f361 1388 	bfi	r3, r1, #6, #3
 80024c2:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024ca:	b2d9      	uxtb	r1, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	7813      	ldrb	r3, [r2, #0]
 80024d0:	f361 0300 	bfi	r3, r1, #0, #1
 80024d4:	7013      	strb	r3, [r2, #0]

    return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	00600400 	.word	0x00600400

080024e8 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0a0      	sub	sp, #128	@ 0x80
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	460b      	mov	r3, r1
 80024f8:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	0052      	lsls	r2, r2, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	b29b      	uxth	r3, r3
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002520:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002524:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 8002528:	7bf8      	ldrb	r0, [r7, #15]
 800252a:	2303      	movs	r3, #3
 800252c:	f7ff faec 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002536:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e0cd      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002546:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8002548:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800254c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8002556:	f06f 0301 	mvn.w	r3, #1
 800255a:	e0c1      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 800255c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255e:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002562:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002564:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	b29b      	uxth	r3, r3
 800256e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 8002572:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800257a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 800257e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002582:	3308      	adds	r3, #8
 8002584:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002588:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 8002596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800259a:	3304      	adds	r3, #4
 800259c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80025a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80025ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3304      	adds	r3, #4
 80025ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80025be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025c2:	2b4c      	cmp	r3, #76	@ 0x4c
 80025c4:	d902      	bls.n	80025cc <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80025c6:	234c      	movs	r3, #76	@ 0x4c
 80025c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80025cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f107 0214 	add.w	r2, r7, #20
 80025d6:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80025da:	7bf8      	ldrb	r0, [r7, #15]
 80025dc:	f7ff f93e 	bl	800185c <DRV_CANFDSPI_ReadByteArray>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80025e6:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025ee:	f06f 0302 	mvn.w	r3, #2
 80025f2:	e075      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025f4:	7d3b      	ldrb	r3, [r7, #20]
 80025f6:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800260a:	7e3b      	ldrb	r3, [r7, #24]
 800260c:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 800260e:	7e7b      	ldrb	r3, [r7, #25]
 8002610:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002612:	7ebb      	ldrb	r3, [r7, #26]
 8002614:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8002616:	7efb      	ldrb	r3, [r7, #27]
 8002618:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002620:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d027      	beq.n	800267e <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 800262e:	7f3b      	ldrb	r3, [r7, #28]
 8002630:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002632:	7f7b      	ldrb	r3, [r7, #29]
 8002634:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8002636:	7fbb      	ldrb	r3, [r7, #30]
 8002638:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800264a:	e011      	b.n	8002670 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 800264c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002650:	f103 020c 	add.w	r2, r3, #12
 8002654:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	440b      	add	r3, r1
 800265c:	3280      	adds	r2, #128	@ 0x80
 800265e:	443a      	add	r2, r7
 8002660:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002664:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002666:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800266a:	3301      	adds	r3, #1
 800266c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002670:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002674:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002678:	429a      	cmp	r2, r3
 800267a:	d3e7      	bcc.n	800264c <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 800267c:	e01e      	b.n	80026bc <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800268a:	e011      	b.n	80026b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 800268c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002690:	f103 0208 	add.w	r2, r3, #8
 8002694:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	440b      	add	r3, r1
 800269c:	3280      	adds	r2, #128	@ 0x80
 800269e:	443a      	add	r2, r7
 80026a0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80026a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80026a6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80026b0:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80026b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3e7      	bcc.n	800268c <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80026bc:	7bba      	ldrb	r2, [r7, #14]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f810 	bl	80026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80026ce:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80026d6:	f06f 0303 	mvn.w	r3, #3
 80026da:	e001      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026dc:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3780      	adds	r7, #128	@ 0x80
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	b29b      	uxth	r3, r3
 8002712:	3351      	adds	r3, #81	@ 0x51
 8002714:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 8002716:	7a7b      	ldrb	r3, [r7, #9]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800271e:	7a7a      	ldrb	r2, [r7, #9]
 8002720:	89f9      	ldrh	r1, [r7, #14]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fd87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800272a:	4603      	mov	r3, r0
 800272c:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800272e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	460a      	mov	r2, r1
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	4613      	mov	r3, r2
 8002748:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002752:	231e      	movs	r3, #30
 8002754:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800275a:	f107 0208 	add.w	r2, r7, #8
 800275e:	89b9      	ldrh	r1, [r7, #12]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ff36 	bl	80015d4 <DRV_CANFDSPI_ReadHalfWord>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	e01b      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b21a      	sxth	r2, r3
 800277e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002782:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	89b9      	ldrh	r1, [r7, #12]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ffc6 	bl	8001728 <DRV_CANFDSPI_WriteHalfWord>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80027a8:	f06f 0301 	mvn.w	r3, #1
 80027ac:	e001      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	603a      	str	r2, [r7, #0]
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	460b      	mov	r3, r1
 80027c8:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3354      	adds	r3, #84	@ 0x54
 80027e6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027e8:	f107 0208 	add.w	r2, r7, #8
 80027ec:	89b9      	ldrh	r1, [r7, #12]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc93 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e007      	b.n	8002818 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002808:	7a3b      	ldrb	r3, [r7, #8]
 800280a:	f003 0317 	and.w	r3, r3, #23
 800280e:	b2da      	uxtb	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	603a      	str	r2, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	460b      	mov	r3, r1
 800282e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800283e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002842:	e022      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	b29b      	uxth	r3, r3
 8002856:	3354      	adds	r3, #84	@ 0x54
 8002858:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800285a:	f107 0208 	add.w	r2, r7, #8
 800285e:	89b9      	ldrh	r1, [r7, #12]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc5a 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e007      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800287a:	7a3b      	ldrb	r3, [r7, #8]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	460b      	mov	r3, r1
 800289e:	71bb      	strb	r3, [r7, #6]
 80028a0:	4613      	mov	r3, r2
 80028a2:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80028b2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80028b6:	e036      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	0052      	lsls	r2, r2, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3350      	adds	r3, #80	@ 0x50
 80028c8:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80028ce:	f107 0208 	add.w	r2, r7, #8
 80028d2:	89b9      	ldrh	r1, [r7, #12]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc20 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	e01b      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028ee:	7a3b      	ldrb	r3, [r7, #8]
 80028f0:	b25a      	sxtb	r2, r3
 80028f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002904:	7a3a      	ldrb	r2, [r7, #8]
 8002906:	89b9      	ldrh	r1, [r7, #12]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fc94 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 800291c:	f06f 0301 	mvn.w	r3, #1
 8002920:	e001      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002946:	2334      	movs	r3, #52	@ 0x34
 8002948:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800294e:	f107 0210 	add.w	r2, r7, #16
 8002952:	8ab9      	ldrh	r1, [r7, #20]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fcfa 	bl	8001350 <DRV_CANFDSPI_ReadWord>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	e00d      	b.n	800298a <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800296e:	7c7a      	ldrb	r2, [r7, #17]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002974:	7c3a      	ldrb	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800297a:	7cbb      	ldrb	r3, [r7, #18]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	b2da      	uxtb	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80029a4:	f107 020e 	add.w	r2, r7, #14
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fbb4 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	e015      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80029d0:	7bba      	ldrb	r2, [r7, #14]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fc2d 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029ea:	f06f 0301 	mvn.w	r3, #1
 80029ee:	e000      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b090      	sub	sp, #64	@ 0x40
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	460a      	mov	r2, r1
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a14:	e008      	b.n	8002a28 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002a16:	f107 0208 	add.w	r2, r7, #8
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	79ba      	ldrb	r2, [r7, #6]
 8002a20:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a24:	3301      	adds	r3, #1
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a2c:	d9f3      	bls.n	8002a16 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a32:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a38:	e016      	b.n	8002a68 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002a3a:	f107 0208 	add.w	r2, r7, #8
 8002a3e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a40:	79f8      	ldrb	r0, [r7, #7]
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	f7fe ffbc 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 8002a4e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e00a      	b.n	8002a72 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a5e:	3330      	adds	r3, #48	@ 0x30
 8002a60:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a64:	3301      	adds	r3, #1
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	2b29      	cmp	r3, #41	@ 0x29
 8002a6c:	d9e5      	bls.n	8002a3a <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a6e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3740      	adds	r7, #64	@ 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4604      	mov	r4, r0
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71bb      	strb	r3, [r7, #6]
 8002a90:	460b      	mov	r3, r1
 8002a92:	717b      	strb	r3, [r7, #5]
 8002a94:	4613      	mov	r3, r2
 8002a96:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a9c:	793b      	ldrb	r3, [r7, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d036      	beq.n	8002b10 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	dc4c      	bgt.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d018      	beq.n	8002ae0 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002aae:	e047      	b.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f84c 	bl	8002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002acc:	e03d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002ace:	797a      	ldrb	r2, [r7, #5]
 8002ad0:	79b9      	ldrb	r1, [r7, #6]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f8c3 	bl	8002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]
            break;
 8002ade:	e032      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 faf2 	bl	80030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	e025      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002afe:	797a      	ldrb	r2, [r7, #5]
 8002b00:	79b9      	ldrb	r1, [r7, #6]
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb6f 	bl	80031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b0e:	e01a      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002b10:	79ba      	ldrb	r2, [r7, #6]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd10 	bl	800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	e00d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002b2e:	797a      	ldrb	r2, [r7, #5]
 8002b30:	79b9      	ldrb	r1, [r7, #6]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fd8d 	bl	8003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b3e:	e002      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b40:	23ff      	movs	r3, #255	@ 0xff
 8002b42:	73fb      	strb	r3, [r7, #15]
            break;
 8002b44:	bf00      	nop
    }

    return spiTransferError;
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
	...

08002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b68:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b6a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d862      	bhi.n	8002c38 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bc1 	.word	0x08002bc1
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bc1 	.word	0x08002bc1
 8002b94:	08002bc1 	.word	0x08002bc1
 8002b98:	08002bdf 	.word	0x08002bdf
 8002b9c:	08002bdf 	.word	0x08002bdf
 8002ba0:	08002bdf 	.word	0x08002bdf
 8002ba4:	08002bdf 	.word	0x08002bdf
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002bdf 	.word	0x08002bdf
 8002bb0:	08002bdf 	.word	0x08002bdf
 8002bb4:	08002bfd 	.word	0x08002bfd
 8002bb8:	08002bfd 	.word	0x08002bfd
 8002bbc:	08002c1b 	.word	0x08002c1b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002bc4:	233e      	movs	r3, #62	@ 0x3e
 8002bc6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	220f      	movs	r2, #15
 8002bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002bd2:	7a3b      	ldrb	r3, [r7, #8]
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e02f      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002be2:	237e      	movs	r3, #126	@ 0x7e
 8002be4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002be6:	7a7b      	ldrb	r3, [r7, #9]
 8002be8:	221f      	movs	r2, #31
 8002bea:	f362 0306 	bfi	r3, r2, #0, #7
 8002bee:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf8:	723b      	strb	r3, [r7, #8]
            break;
 8002bfa:	e020      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002c00:	231e      	movs	r3, #30
 8002c02:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	2207      	movs	r2, #7
 8002c08:	f362 0306 	bfi	r3, r2, #0, #7
 8002c0c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002c0e:	7a3b      	ldrb	r3, [r7, #8]
 8002c10:	2207      	movs	r2, #7
 8002c12:	f362 0306 	bfi	r3, r2, #0, #7
 8002c16:	723b      	strb	r3, [r7, #8]
            break;
 8002c18:	e011      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002c1e:	23fe      	movs	r3, #254	@ 0xfe
 8002c20:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002c22:	7a7b      	ldrb	r3, [r7, #9]
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	f362 0306 	bfi	r3, r2, #0, #7
 8002c2a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002c2c:	7a3b      	ldrb	r3, [r7, #8]
 8002c2e:	223f      	movs	r2, #63	@ 0x3f
 8002c30:	f362 0306 	bfi	r3, r2, #0, #7
 8002c34:	723b      	strb	r3, [r7, #8]
            break;
 8002c36:	e002      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	e009      	b.n	8002c52 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2104      	movs	r1, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fc2b 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	003e0f0f 	.word	0x003e0f0f

08002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c76:	4be2      	ldr	r3, [pc, #904]	@ (8003000 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c78:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f362 0301 	bfi	r3, r2, #0, #2
 8002c86:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c8c:	79bb      	ldrb	r3, [r7, #6]
 8002c8e:	2b11      	cmp	r3, #17
 8002c90:	f200 81f6 	bhi.w	8003080 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002ce5 	.word	0x08002ce5
 8002ca0:	08002d23 	.word	0x08002d23
 8002ca4:	08002d61 	.word	0x08002d61
 8002ca8:	08002d9f 	.word	0x08002d9f
 8002cac:	08002ddd 	.word	0x08002ddd
 8002cb0:	08002e1b 	.word	0x08002e1b
 8002cb4:	08002e55 	.word	0x08002e55
 8002cb8:	08002e89 	.word	0x08002e89
 8002cbc:	08002ebb 	.word	0x08002ebb
 8002cc0:	08002f01 	.word	0x08002f01
 8002cc4:	08002f47 	.word	0x08002f47
 8002cc8:	08002f85 	.word	0x08002f85
 8002ccc:	08002fc3 	.word	0x08002fc3
 8002cd0:	08003005 	.word	0x08003005
 8002cd4:	08003043 	.word	0x08003043
 8002cd8:	08002d9f 	.word	0x08002d9f
 8002cdc:	08002e55 	.word	0x08002e55
 8002ce0:	08002ebb 	.word	0x08002ebb
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	221e      	movs	r2, #30
 8002cec:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cf2:	7b7b      	ldrb	r3, [r7, #13]
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cfc:	7b3b      	ldrb	r3, [r7, #12]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	f362 0303 	bfi	r3, r2, #0, #4
 8002d04:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002d06:	7a7b      	ldrb	r3, [r7, #9]
 8002d08:	221f      	movs	r2, #31
 8002d0a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d0e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	7a3b      	ldrb	r3, [r7, #8]
 8002d1a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d1e:	723b      	strb	r3, [r7, #8]
            break;
 8002d20:	e1b1      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	220e      	movs	r2, #14
 8002d2a:	f362 0304 	bfi	r3, r2, #0, #5
 8002d2e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f362 0303 	bfi	r3, r2, #0, #4
 8002d38:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002d3a:	7b3b      	ldrb	r3, [r7, #12]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d42:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d44:	7a7b      	ldrb	r3, [r7, #9]
 8002d46:	220f      	movs	r2, #15
 8002d48:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	7a3b      	ldrb	r3, [r7, #8]
 8002d58:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5c:	723b      	strb	r3, [r7, #8]
            break;
 8002d5e:	e192      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2208      	movs	r2, #8
 8002d68:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f362 0303 	bfi	r3, r2, #0, #4
 8002d76:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d78:	7b3b      	ldrb	r3, [r7, #12]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d80:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d82:	7a7b      	ldrb	r3, [r7, #9]
 8002d84:	2209      	movs	r2, #9
 8002d86:	f362 0306 	bfi	r3, r2, #0, #7
 8002d8a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	7a3b      	ldrb	r3, [r7, #8]
 8002d96:	f362 0305 	bfi	r3, r2, #0, #6
 8002d9a:	723b      	strb	r3, [r7, #8]
            break;
 8002d9c:	e173      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	2206      	movs	r2, #6
 8002da6:	f362 0304 	bfi	r3, r2, #0, #5
 8002daa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dac:	7b7b      	ldrb	r3, [r7, #13]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f362 0303 	bfi	r3, r2, #0, #4
 8002db4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002db6:	7b3b      	ldrb	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	f362 0306 	bfi	r3, r2, #0, #7
 8002dc8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	7a3b      	ldrb	r3, [r7, #8]
 8002dd4:	f362 0305 	bfi	r3, r2, #0, #6
 8002dd8:	723b      	strb	r3, [r7, #8]
            break;
 8002dda:	e154      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	2204      	movs	r2, #4
 8002de4:	f362 0304 	bfi	r3, r2, #0, #5
 8002de8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f362 0303 	bfi	r3, r2, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dfe:	7a7b      	ldrb	r3, [r7, #9]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f362 0306 	bfi	r3, r2, #0, #7
 8002e06:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7a3b      	ldrb	r3, [r7, #8]
 8002e12:	f362 0305 	bfi	r3, r2, #0, #6
 8002e16:	723b      	strb	r3, [r7, #8]
            break;
 8002e18:	e135      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f362 0304 	bfi	r3, r2, #0, #5
 8002e26:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	f023 030f 	bic.w	r3, r3, #15
 8002e2e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e30:	7b3b      	ldrb	r3, [r7, #12]
 8002e32:	f023 030f 	bic.w	r3, r3, #15
 8002e36:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002e38:	7a7b      	ldrb	r3, [r7, #9]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e40:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	7a3b      	ldrb	r3, [r7, #8]
 8002e4c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e50:	723b      	strb	r3, [r7, #8]
            break;
 8002e52:	e118      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f362 0304 	bfi	r3, r2, #0, #5
 8002e60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e72:	7a7b      	ldrb	r3, [r7, #9]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e7c:	7a3b      	ldrb	r3, [r7, #8]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f362 0305 	bfi	r3, r2, #0, #6
 8002e84:	723b      	strb	r3, [r7, #8]
            break;
 8002e86:	e0fe      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f362 0304 	bfi	r3, r2, #0, #5
 8002e94:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e96:	7b7b      	ldrb	r3, [r7, #13]
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	f023 030f 	bic.w	r3, r3, #15
 8002ea4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002ea6:	7a7b      	ldrb	r3, [r7, #9]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002eae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002eb0:	7a3b      	ldrb	r3, [r7, #8]
 8002eb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e0e5      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	221e      	movs	r2, #30
 8002ec2:	f362 0304 	bfi	r3, r2, #0, #5
 8002ec6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002ec8:	7b7b      	ldrb	r3, [r7, #13]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	f362 0303 	bfi	r3, r2, #0, #4
 8002ed0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	f362 0303 	bfi	r3, r2, #0, #4
 8002eda:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002edc:	7a7b      	ldrb	r3, [r7, #9]
 8002ede:	221f      	movs	r2, #31
 8002ee0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ee4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ef4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ef6:	7abb      	ldrb	r3, [r7, #10]
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	72bb      	strb	r3, [r7, #10]
            break;
 8002efe:	e0c2      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	2211      	movs	r2, #17
 8002f08:	f362 0304 	bfi	r3, r2, #0, #5
 8002f0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	2204      	movs	r2, #4
 8002f12:	f362 0303 	bfi	r3, r2, #0, #4
 8002f16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002f18:	7b3b      	ldrb	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002f22:	7a7b      	ldrb	r3, [r7, #9]
 8002f24:	2212      	movs	r2, #18
 8002f26:	f362 0306 	bfi	r3, r2, #0, #7
 8002f2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7a3b      	ldrb	r3, [r7, #8]
 8002f36:	f362 0305 	bfi	r3, r2, #0, #6
 8002f3a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f3c:	7abb      	ldrb	r3, [r7, #10]
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	72bb      	strb	r3, [r7, #10]
            break;
 8002f44:	e09f      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	221e      	movs	r2, #30
 8002f4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002f52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	2207      	movs	r2, #7
 8002f58:	f362 0303 	bfi	r3, r2, #0, #4
 8002f5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f5e:	7b3b      	ldrb	r3, [r7, #12]
 8002f60:	2207      	movs	r2, #7
 8002f62:	f362 0303 	bfi	r3, r2, #0, #4
 8002f66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	7a3b      	ldrb	r3, [r7, #8]
 8002f7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002f80:	723b      	strb	r3, [r7, #8]
            break;
 8002f82:	e080      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002f90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	2205      	movs	r2, #5
 8002f96:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002fa6:	7a7b      	ldrb	r3, [r7, #9]
 8002fa8:	2213      	movs	r2, #19
 8002faa:	f362 0306 	bfi	r3, r2, #0, #7
 8002fae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	7a3b      	ldrb	r3, [r7, #8]
 8002fba:	f362 0305 	bfi	r3, r2, #0, #6
 8002fbe:	723b      	strb	r3, [r7, #8]
            break;
 8002fc0:	e061      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	220e      	movs	r2, #14
 8002fca:	f362 0304 	bfi	r3, r2, #0, #5
 8002fce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002fd0:	7b7b      	ldrb	r3, [r7, #13]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fd8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	f362 0306 	bfi	r3, r2, #0, #7
 8002fec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	7a3b      	ldrb	r3, [r7, #8]
 8002ff8:	f362 0305 	bfi	r3, r2, #0, #6
 8002ffc:	723b      	strb	r3, [r7, #8]
            break;
 8002ffe:	e042      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8003000:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2208      	movs	r2, #8
 800300c:	f362 0304 	bfi	r3, r2, #0, #5
 8003010:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	2202      	movs	r2, #2
 8003016:	f362 0303 	bfi	r3, r2, #0, #4
 800301a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 800301c:	7b3b      	ldrb	r3, [r7, #12]
 800301e:	2202      	movs	r2, #2
 8003020:	f362 0303 	bfi	r3, r2, #0, #4
 8003024:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003026:	7a7b      	ldrb	r3, [r7, #9]
 8003028:	2209      	movs	r2, #9
 800302a:	f362 0306 	bfi	r3, r2, #0, #7
 800302e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	7a3b      	ldrb	r3, [r7, #8]
 800303a:	f362 0305 	bfi	r3, r2, #0, #6
 800303e:	723b      	strb	r3, [r7, #8]
            break;
 8003040:	e021      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	2206      	movs	r2, #6
 800304a:	f362 0304 	bfi	r3, r2, #0, #5
 800304e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003050:	7b7b      	ldrb	r3, [r7, #13]
 8003052:	2201      	movs	r2, #1
 8003054:	f362 0303 	bfi	r3, r2, #0, #4
 8003058:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800305a:	7b3b      	ldrb	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f362 0303 	bfi	r3, r2, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2207      	movs	r2, #7
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e002      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e01f      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2108      	movs	r1, #8
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fa07 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800309e:	f06f 0301 	mvn.w	r3, #1
 80030a2:	e010      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	210c      	movs	r1, #12
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f9f8 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80030b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 80030bc:	f06f 0302 	mvn.w	r3, #2
 80030c0:	e001      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 80030c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	460a      	mov	r2, r1
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	4613      	mov	r3, r2
 80030de:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030e6:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b11      	cmp	r3, #17
 80030ec:	d862      	bhi.n	80031b4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	080031b5 	.word	0x080031b5
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800313d 	.word	0x0800313d
 8003114:	0800315b 	.word	0x0800315b
 8003118:	0800315b 	.word	0x0800315b
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800315b 	.word	0x0800315b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003197 	.word	0x08003197
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003140:	231e      	movs	r3, #30
 8003142:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	2207      	movs	r2, #7
 8003148:	f362 0306 	bfi	r3, r2, #0, #7
 800314c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	2207      	movs	r2, #7
 8003152:	f362 0306 	bfi	r3, r2, #0, #7
 8003156:	723b      	strb	r3, [r7, #8]
            break;
 8003158:	e02f      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800315e:	233e      	movs	r3, #62	@ 0x3e
 8003160:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003162:	7a7b      	ldrb	r3, [r7, #9]
 8003164:	220f      	movs	r2, #15
 8003166:	f362 0306 	bfi	r3, r2, #0, #7
 800316a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800316c:	7a3b      	ldrb	r3, [r7, #8]
 800316e:	220f      	movs	r2, #15
 8003170:	f362 0306 	bfi	r3, r2, #0, #7
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e020      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800317c:	230e      	movs	r3, #14
 800317e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	2203      	movs	r2, #3
 8003184:	f362 0306 	bfi	r3, r2, #0, #7
 8003188:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800318a:	7a3b      	ldrb	r3, [r7, #8]
 800318c:	2203      	movs	r2, #3
 800318e:	f362 0306 	bfi	r3, r2, #0, #7
 8003192:	723b      	strb	r3, [r7, #8]
            break;
 8003194:	e011      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800319a:	237e      	movs	r3, #126	@ 0x7e
 800319c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800319e:	7a7b      	ldrb	r3, [r7, #9]
 80031a0:	221f      	movs	r2, #31
 80031a2:	f362 0306 	bfi	r3, r2, #0, #7
 80031a6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80031a8:	7a3b      	ldrb	r3, [r7, #8]
 80031aa:	221f      	movs	r2, #31
 80031ac:	f362 0306 	bfi	r3, r2, #0, #7
 80031b0:	723b      	strb	r3, [r7, #8]
            break;
 80031b2:	e002      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e010      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2104      	movs	r1, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe f96d 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	e001      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	003e0f0f 	.word	0x003e0f0f

080031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
 80031f2:	460b      	mov	r3, r1
 80031f4:	71bb      	strb	r3, [r7, #6]
 80031f6:	4613      	mov	r3, r2
 80031f8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031fe:	4bce      	ldr	r3, [pc, #824]	@ (8003538 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003200:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003206:	7abb      	ldrb	r3, [r7, #10]
 8003208:	2202      	movs	r2, #2
 800320a:	f362 0301 	bfi	r3, r2, #0, #2
 800320e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003214:	79bb      	ldrb	r3, [r7, #6]
 8003216:	2b11      	cmp	r3, #17
 8003218:	f200 8166 	bhi.w	80034e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	0800326d 	.word	0x0800326d
 8003228:	080032ab 	.word	0x080032ab
 800322c:	080034e9 	.word	0x080034e9
 8003230:	080032e9 	.word	0x080032e9
 8003234:	08003323 	.word	0x08003323
 8003238:	0800335d 	.word	0x0800335d
 800323c:	0800335d 	.word	0x0800335d
 8003240:	0800335d 	.word	0x0800335d
 8003244:	08003363 	.word	0x08003363
 8003248:	080033a9 	.word	0x080033a9
 800324c:	080033ef 	.word	0x080033ef
 8003250:	0800342d 	.word	0x0800342d
 8003254:	0800346b 	.word	0x0800346b
 8003258:	080034a9 	.word	0x080034a9
 800325c:	080034af 	.word	0x080034af
 8003260:	080032e9 	.word	0x080032e9
 8003264:	0800335d 	.word	0x0800335d
 8003268:	08003363 	.word	0x08003363
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	220e      	movs	r2, #14
 8003274:	f362 0304 	bfi	r3, r2, #0, #5
 8003278:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800327a:	7b7b      	ldrb	r3, [r7, #13]
 800327c:	2203      	movs	r2, #3
 800327e:	f362 0303 	bfi	r3, r2, #0, #4
 8003282:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003284:	7b3b      	ldrb	r3, [r7, #12]
 8003286:	2203      	movs	r2, #3
 8003288:	f362 0303 	bfi	r3, r2, #0, #4
 800328c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800328e:	7a7b      	ldrb	r3, [r7, #9]
 8003290:	220f      	movs	r2, #15
 8003292:	f362 0306 	bfi	r3, r2, #0, #7
 8003296:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	7a3b      	ldrb	r3, [r7, #8]
 80032a2:	f362 0305 	bfi	r3, r2, #0, #6
 80032a6:	723b      	strb	r3, [r7, #8]
            break;
 80032a8:	e121      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2206      	movs	r2, #6
 80032b2:	f362 0304 	bfi	r3, r2, #0, #5
 80032b6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f362 0303 	bfi	r3, r2, #0, #4
 80032c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f362 0303 	bfi	r3, r2, #0, #4
 80032ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80032cc:	7a7b      	ldrb	r3, [r7, #9]
 80032ce:	2207      	movs	r2, #7
 80032d0:	f362 0306 	bfi	r3, r2, #0, #7
 80032d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	f362 0305 	bfi	r3, r2, #0, #6
 80032e4:	723b      	strb	r3, [r7, #8]
            break;
 80032e6:	e102      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f362 0304 	bfi	r3, r2, #0, #5
 80032f4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003306:	7a7b      	ldrb	r3, [r7, #9]
 8003308:	2203      	movs	r2, #3
 800330a:	f362 0306 	bfi	r3, r2, #0, #7
 800330e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003316:	b2da      	uxtb	r2, r3
 8003318:	7a3b      	ldrb	r3, [r7, #8]
 800331a:	f362 0305 	bfi	r3, r2, #0, #6
 800331e:	723b      	strb	r3, [r7, #8]
            break;
 8003320:	e0e5      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2201      	movs	r2, #1
 800332a:	f362 0304 	bfi	r3, r2, #0, #5
 800332e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003330:	7b7b      	ldrb	r3, [r7, #13]
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003338:	7b3b      	ldrb	r3, [r7, #12]
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	2202      	movs	r2, #2
 8003344:	f362 0306 	bfi	r3, r2, #0, #7
 8003348:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003350:	b2da      	uxtb	r2, r3
 8003352:	7a3b      	ldrb	r3, [r7, #8]
 8003354:	f362 0305 	bfi	r3, r2, #0, #6
 8003358:	723b      	strb	r3, [r7, #8]
            break;
 800335a:	e0c8      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	e0e5      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	221e      	movs	r2, #30
 800336a:	f362 0304 	bfi	r3, r2, #0, #5
 800336e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003370:	7b7b      	ldrb	r3, [r7, #13]
 8003372:	2207      	movs	r2, #7
 8003374:	f362 0303 	bfi	r3, r2, #0, #4
 8003378:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	2207      	movs	r2, #7
 800337e:	f362 0303 	bfi	r3, r2, #0, #4
 8003382:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	221f      	movs	r2, #31
 8003388:	f362 0306 	bfi	r3, r2, #0, #7
 800338c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	7a3b      	ldrb	r3, [r7, #8]
 8003398:	f362 0305 	bfi	r3, r2, #0, #6
 800339c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800339e:	7abb      	ldrb	r3, [r7, #10]
 80033a0:	f023 0303 	bic.w	r3, r3, #3
 80033a4:	72bb      	strb	r3, [r7, #10]
            break;
 80033a6:	e0a2      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2211      	movs	r2, #17
 80033b0:	f362 0304 	bfi	r3, r2, #0, #5
 80033b4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80033b6:	7b7b      	ldrb	r3, [r7, #13]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f362 0303 	bfi	r3, r2, #0, #4
 80033be:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80033c0:	7b3b      	ldrb	r3, [r7, #12]
 80033c2:	2204      	movs	r2, #4
 80033c4:	f362 0303 	bfi	r3, r2, #0, #4
 80033c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80033ca:	7a7b      	ldrb	r3, [r7, #9]
 80033cc:	2212      	movs	r2, #18
 80033ce:	f362 0306 	bfi	r3, r2, #0, #7
 80033d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7a3b      	ldrb	r3, [r7, #8]
 80033de:	f362 0305 	bfi	r3, r2, #0, #6
 80033e2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	72bb      	strb	r3, [r7, #10]
            break;
 80033ec:	e07f      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	220e      	movs	r2, #14
 80033f6:	f362 0304 	bfi	r3, r2, #0, #5
 80033fa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	2203      	movs	r2, #3
 8003400:	f362 0303 	bfi	r3, r2, #0, #4
 8003404:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	2203      	movs	r2, #3
 800340a:	f362 0303 	bfi	r3, r2, #0, #4
 800340e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003410:	7a7b      	ldrb	r3, [r7, #9]
 8003412:	220f      	movs	r2, #15
 8003414:	f362 0306 	bfi	r3, r2, #0, #7
 8003418:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	b2da      	uxtb	r2, r3
 8003422:	7a3b      	ldrb	r3, [r7, #8]
 8003424:	f362 0305 	bfi	r3, r2, #0, #6
 8003428:	723b      	strb	r3, [r7, #8]
            break;
 800342a:	e060      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2208      	movs	r2, #8
 8003434:	f362 0304 	bfi	r3, r2, #0, #5
 8003438:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	2202      	movs	r2, #2
 800343e:	f362 0303 	bfi	r3, r2, #0, #4
 8003442:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003444:	7b3b      	ldrb	r3, [r7, #12]
 8003446:	2202      	movs	r2, #2
 8003448:	f362 0303 	bfi	r3, r2, #0, #4
 800344c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800344e:	7a7b      	ldrb	r3, [r7, #9]
 8003450:	2209      	movs	r2, #9
 8003452:	f362 0306 	bfi	r3, r2, #0, #7
 8003456:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345e:	b2da      	uxtb	r2, r3
 8003460:	7a3b      	ldrb	r3, [r7, #8]
 8003462:	f362 0305 	bfi	r3, r2, #0, #6
 8003466:	723b      	strb	r3, [r7, #8]
            break;
 8003468:	e041      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2206      	movs	r2, #6
 8003472:	f362 0304 	bfi	r3, r2, #0, #5
 8003476:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003478:	7b7b      	ldrb	r3, [r7, #13]
 800347a:	2201      	movs	r2, #1
 800347c:	f362 0303 	bfi	r3, r2, #0, #4
 8003480:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003482:	7b3b      	ldrb	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f362 0303 	bfi	r3, r2, #0, #4
 800348a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800348c:	7a7b      	ldrb	r3, [r7, #9]
 800348e:	2207      	movs	r2, #7
 8003490:	f362 0306 	bfi	r3, r2, #0, #7
 8003494:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800349c:	b2da      	uxtb	r2, r3
 800349e:	7a3b      	ldrb	r3, [r7, #8]
 80034a0:	f362 0305 	bfi	r3, r2, #0, #6
 80034a4:	723b      	strb	r3, [r7, #8]
            break;
 80034a6:	e022      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	e03f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f362 0304 	bfi	r3, r2, #0, #5
 80034ba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80034bc:	7b7b      	ldrb	r3, [r7, #13]
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80034c4:	7b3b      	ldrb	r3, [r7, #12]
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f362 0306 	bfi	r3, r2, #0, #7
 80034d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	f362 0305 	bfi	r3, r2, #0, #6
 80034e4:	723b      	strb	r3, [r7, #8]
            break;
 80034e6:	e002      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e01f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2108      	movs	r1, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd ffd3 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003506:	f06f 0301 	mvn.w	r3, #1
 800350a:	e010      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	210c      	movs	r1, #12
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd ffc4 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003524:	f06f 0302 	mvn.w	r3, #2
 8003528:	e001      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800352a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	000e0303 	.word	0x000e0303

0800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	460a      	mov	r2, r1
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	4613      	mov	r3, r2
 800354a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003552:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003554:	79bb      	ldrb	r3, [r7, #6]
 8003556:	2b11      	cmp	r3, #17
 8003558:	d862      	bhi.n	8003620 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	08003621 	.word	0x08003621
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035c7 	.word	0x080035c7
 8003584:	080035c7 	.word	0x080035c7
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035c7 	.word	0x080035c7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035e5 	.word	0x080035e5
 80035a0:	080035e5 	.word	0x080035e5
 80035a4:	08003603 	.word	0x08003603
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80035ac:	230e      	movs	r3, #14
 80035ae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f362 0306 	bfi	r3, r2, #0, #7
 80035b8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	2203      	movs	r2, #3
 80035be:	f362 0306 	bfi	r3, r2, #0, #7
 80035c2:	723b      	strb	r3, [r7, #8]
            break;
 80035c4:	e02f      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80035ca:	231e      	movs	r3, #30
 80035cc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	2207      	movs	r2, #7
 80035d2:	f362 0306 	bfi	r3, r2, #0, #7
 80035d6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	2207      	movs	r2, #7
 80035dc:	f362 0306 	bfi	r3, r2, #0, #7
 80035e0:	723b      	strb	r3, [r7, #8]
            break;
 80035e2:	e020      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035e8:	2307      	movs	r3, #7
 80035ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035ec:	7a7b      	ldrb	r3, [r7, #9]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f362 0306 	bfi	r3, r2, #0, #7
 80035f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035f6:	7a3b      	ldrb	r3, [r7, #8]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f362 0306 	bfi	r3, r2, #0, #7
 80035fe:	723b      	strb	r3, [r7, #8]
            break;
 8003600:	e011      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003606:	233e      	movs	r3, #62	@ 0x3e
 8003608:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800360a:	7a7b      	ldrb	r3, [r7, #9]
 800360c:	220f      	movs	r2, #15
 800360e:	f362 0306 	bfi	r3, r2, #0, #7
 8003612:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	220f      	movs	r2, #15
 8003618:	f362 0306 	bfi	r3, r2, #0, #7
 800361c:	723b      	strb	r3, [r7, #8]
            break;
 800361e:	e002      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e010      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2104      	movs	r1, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd ff37 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 800363e:	f06f 0301 	mvn.w	r3, #1
 8003642:	e001      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	003e0f0f 	.word	0x003e0f0f

08003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
 800365e:	460b      	mov	r3, r1
 8003660:	71bb      	strb	r3, [r7, #6]
 8003662:	4613      	mov	r3, r2
 8003664:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800366a:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 800366c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003672:	7abb      	ldrb	r3, [r7, #10]
 8003674:	2202      	movs	r2, #2
 8003676:	f362 0301 	bfi	r3, r2, #0, #2
 800367a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003680:	79bb      	ldrb	r3, [r7, #6]
 8003682:	2b11      	cmp	r3, #17
 8003684:	f200 80ef 	bhi.w	8003866 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036d9 	.word	0x080036d9
 8003694:	08003717 	.word	0x08003717
 8003698:	08003867 	.word	0x08003867
 800369c:	08003751 	.word	0x08003751
 80036a0:	08003751 	.word	0x08003751
 80036a4:	08003751 	.word	0x08003751
 80036a8:	08003751 	.word	0x08003751
 80036ac:	08003751 	.word	0x08003751
 80036b0:	08003757 	.word	0x08003757
 80036b4:	0800379d 	.word	0x0800379d
 80036b8:	080037e3 	.word	0x080037e3
 80036bc:	08003821 	.word	0x08003821
 80036c0:	08003827 	.word	0x08003827
 80036c4:	08003861 	.word	0x08003861
 80036c8:	08003861 	.word	0x08003861
 80036cc:	08003751 	.word	0x08003751
 80036d0:	08003751 	.word	0x08003751
 80036d4:	08003757 	.word	0x08003757
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036dc:	7bbb      	ldrb	r3, [r7, #14]
 80036de:	2206      	movs	r2, #6
 80036e0:	f362 0304 	bfi	r3, r2, #0, #5
 80036e4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036e6:	7b7b      	ldrb	r3, [r7, #13]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f362 0303 	bfi	r3, r2, #0, #4
 80036ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f362 0303 	bfi	r3, r2, #0, #4
 80036f8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036fa:	7a7b      	ldrb	r3, [r7, #9]
 80036fc:	2207      	movs	r2, #7
 80036fe:	f362 0306 	bfi	r3, r2, #0, #7
 8003702:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370a:	b2da      	uxtb	r2, r3
 800370c:	7a3b      	ldrb	r3, [r7, #8]
 800370e:	f362 0305 	bfi	r3, r2, #0, #6
 8003712:	723b      	strb	r3, [r7, #8]
            break;
 8003714:	e0aa      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2202      	movs	r2, #2
 800371e:	f362 0304 	bfi	r3, r2, #0, #5
 8003722:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003724:	7b7b      	ldrb	r3, [r7, #13]
 8003726:	f023 030f 	bic.w	r3, r3, #15
 800372a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800372c:	7b3b      	ldrb	r3, [r7, #12]
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	2203      	movs	r2, #3
 8003738:	f362 0306 	bfi	r3, r2, #0, #7
 800373c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	f362 0305 	bfi	r3, r2, #0, #6
 800374c:	723b      	strb	r3, [r7, #8]
            break;
 800374e:	e08d      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e0aa      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	220e      	movs	r2, #14
 800375e:	f362 0304 	bfi	r3, r2, #0, #5
 8003762:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003764:	7b7b      	ldrb	r3, [r7, #13]
 8003766:	2203      	movs	r2, #3
 8003768:	f362 0303 	bfi	r3, r2, #0, #4
 800376c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	2203      	movs	r2, #3
 8003772:	f362 0303 	bfi	r3, r2, #0, #4
 8003776:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003778:	7a7b      	ldrb	r3, [r7, #9]
 800377a:	220f      	movs	r2, #15
 800377c:	f362 0306 	bfi	r3, r2, #0, #7
 8003780:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	7a3b      	ldrb	r3, [r7, #8]
 800378c:	f362 0305 	bfi	r3, r2, #0, #6
 8003790:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003792:	7abb      	ldrb	r3, [r7, #10]
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	72bb      	strb	r3, [r7, #10]
            break;
 800379a:	e067      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2207      	movs	r2, #7
 80037a4:	f362 0304 	bfi	r3, r2, #0, #5
 80037a8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f362 0303 	bfi	r3, r2, #0, #4
 80037b2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80037b4:	7b3b      	ldrb	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f362 0303 	bfi	r3, r2, #0, #4
 80037bc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80037be:	7a7b      	ldrb	r3, [r7, #9]
 80037c0:	2208      	movs	r2, #8
 80037c2:	f362 0306 	bfi	r3, r2, #0, #7
 80037c6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	7a3b      	ldrb	r3, [r7, #8]
 80037d2:	f362 0305 	bfi	r3, r2, #0, #6
 80037d6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80037d8:	7abb      	ldrb	r3, [r7, #10]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	72bb      	strb	r3, [r7, #10]
            break;
 80037e0:	e044      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2206      	movs	r2, #6
 80037ea:	f362 0304 	bfi	r3, r2, #0, #5
 80037ee:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037f0:	7b7b      	ldrb	r3, [r7, #13]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f362 0303 	bfi	r3, r2, #0, #4
 80037f8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037fa:	7b3b      	ldrb	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f362 0303 	bfi	r3, r2, #0, #4
 8003802:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003804:	7a7b      	ldrb	r3, [r7, #9]
 8003806:	2207      	movs	r2, #7
 8003808:	f362 0306 	bfi	r3, r2, #0, #7
 800380c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	7a3b      	ldrb	r3, [r7, #8]
 8003818:	f362 0305 	bfi	r3, r2, #0, #6
 800381c:	723b      	strb	r3, [r7, #8]
            break;
 800381e:	e025      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e042      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	2202      	movs	r2, #2
 800382e:	f362 0304 	bfi	r3, r2, #0, #5
 8003832:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	f023 030f 	bic.w	r3, r3, #15
 800383a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800383c:	7b3b      	ldrb	r3, [r7, #12]
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003844:	7a7b      	ldrb	r3, [r7, #9]
 8003846:	2203      	movs	r2, #3
 8003848:	f362 0306 	bfi	r3, r2, #0, #7
 800384c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	b2da      	uxtb	r2, r3
 8003856:	7a3b      	ldrb	r3, [r7, #8]
 8003858:	f362 0305 	bfi	r3, r2, #0, #6
 800385c:	723b      	strb	r3, [r7, #8]
            break;
 800385e:	e005      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e022      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e01f      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2108      	movs	r1, #8
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fe14 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800387c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003884:	f06f 0301 	mvn.w	r3, #1
 8003888:	e010      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	210c      	movs	r1, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fe05 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800389a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80038a2:	f06f 0302 	mvn.w	r3, #2
 80038a6:	e001      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80038a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	000e0303 	.word	0x000e0303

080038b8 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	460b      	mov	r3, r1
 80038c4:	71bb      	strb	r3, [r7, #6]
 80038c6:	4613      	mov	r3, r2
 80038c8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80038d2:	f640 6307 	movw	r3, #3591	@ 0xe07
 80038d6:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	1cda      	adds	r2, r3, #3
 80038e2:	89b9      	ldrh	r1, [r7, #12]
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fc18 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e020      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f362 0300 	bfi	r3, r2, #0, #1
 800390c:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800390e:	797b      	ldrb	r3, [r7, #5]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f362 0341 	bfi	r3, r2, #1, #1
 800391c:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800391e:	7afa      	ldrb	r2, [r7, #11]
 8003920:	89b9      	ldrh	r1, [r7, #12]
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fc87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	e001      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800393c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d802      	bhi.n	8003962 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e02a      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	3b09      	subs	r3, #9
 8003966:	2b06      	cmp	r3, #6
 8003968:	d825      	bhi.n	80039b6 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	0800398d 	.word	0x0800398d
 8003974:	08003993 	.word	0x08003993
 8003978:	08003999 	.word	0x08003999
 800397c:	0800399f 	.word	0x0800399f
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039b1 	.word	0x080039b1
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800398c:	230c      	movs	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
                break;
 8003990:	e012      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003992:	2310      	movs	r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
                break;
 8003996:	e00f      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003998:	2314      	movs	r3, #20
 800399a:	60fb      	str	r3, [r7, #12]
                break;
 800399c:	e00c      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800399e:	2318      	movs	r3, #24
 80039a0:	60fb      	str	r3, [r7, #12]
                break;
 80039a2:	e009      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80039a4:	2320      	movs	r3, #32
 80039a6:	60fb      	str	r3, [r7, #12]
                break;
 80039a8:	e006      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80039aa:	2330      	movs	r3, #48	@ 0x30
 80039ac:	60fb      	str	r3, [r7, #12]
                break;
 80039ae:	e003      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80039b0:	2340      	movs	r3, #64	@ 0x40
 80039b2:	60fb      	str	r3, [r7, #12]
                break;
 80039b4:	e000      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80039b6:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4313      	orrs	r3, r2
 80039de:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 0218 	bic.w	r2, r3, #24
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	615a      	str	r2, [r3, #20]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	801a      	strh	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b090      	sub	sp, #64	@ 0x40
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003abe:	2305      	movs	r3, #5
 8003ac0:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003ace:	2300      	movs	r3, #0
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003afa:	f001 fd67 	bl	80055cc <FI_CheckBankConfig>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003b04:	230e      	movs	r3, #14
 8003b06:	f000 bcb4 	b.w	8004472 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003b0a:	f001 fcbd 	bl	8005488 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003b0e:	4b93      	ldr	r3, [pc, #588]	@ (8003d5c <EE_Init+0x2a8>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b14:	4b92      	ldr	r3, [pc, #584]	@ (8003d60 <EE_Init+0x2ac>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	029a      	lsls	r2, r3, #10
 8003b1a:	4b92      	ldr	r3, [pc, #584]	@ (8003d64 <EE_Init+0x2b0>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b22:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	0b1b      	lsrs	r3, r3, #12
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b30:	e02e      	b.n	8003b90 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003b38:	031a      	lsls	r2, r3, #12
 8003b3a:	4b89      	ldr	r3, [pc, #548]	@ (8003d60 <EE_Init+0x2ac>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	0299      	lsls	r1, r3, #10
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <EE_Init+0x2b0>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003b48:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b4c:	4b84      	ldr	r3, [pc, #528]	@ (8003d60 <EE_Init+0x2ac>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	0298      	lsls	r0, r3, #10
 8003b52:	4b84      	ldr	r3, [pc, #528]	@ (8003d64 <EE_Init+0x2b0>)
 8003b54:	4003      	ands	r3, r0
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e00e      	b.n	8003b82 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d68 <EE_Init+0x2b4>)
 8003b6c:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	4413      	add	r3, r2
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	3308      	adds	r3, #8
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d3ec      	bcc.n	8003b64 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b90:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <EE_Init+0x2ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <EE_Init+0x2b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	3304      	adds	r3, #4
 8003bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3bf      	bcc.n	8003b32 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <EE_Init+0x2a8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003bb8:	4b69      	ldr	r3, [pc, #420]	@ (8003d60 <EE_Init+0x2ac>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	029a      	lsls	r2, r3, #10
 8003bbe:	4b69      	ldr	r3, [pc, #420]	@ (8003d64 <EE_Init+0x2b0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003bc6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	0b1b      	lsrs	r3, r3, #12
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd4:	e034      	b.n	8003c40 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003bdc:	031a      	lsls	r2, r3, #12
 8003bde:	4b60      	ldr	r3, [pc, #384]	@ (8003d60 <EE_Init+0x2ac>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	0299      	lsls	r1, r3, #10
 8003be4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d64 <EE_Init+0x2b0>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003bec:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003d60 <EE_Init+0x2ac>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	0298      	lsls	r0, r3, #10
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d64 <EE_Init+0x2b0>)
 8003bf8:	4003      	ands	r3, r0
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c04:	f001 fbde 	bl	80053c4 <GetPageState>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003c0c:	7ebb      	ldrb	r3, [r7, #26]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d002      	beq.n	8003c18 <EE_Init+0x164>
 8003c12:	7ebb      	ldrb	r3, [r7, #26]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d103      	bne.n	8003c20 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1e:	e00c      	b.n	8003c3a <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003c20:	7ebb      	ldrb	r3, [r7, #26]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d109      	bne.n	8003c3a <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2e:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	3301      	adds	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <EE_Init+0x2ac>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	029a      	lsls	r2, r3, #10
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <EE_Init+0x2b0>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	0b1b      	lsrs	r3, r3, #12
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3b9      	bcc.n	8003bd6 <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d16a      	bne.n	8003d3e <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d062      	beq.n	8003d34 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <EE_Init+0x2ac>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	029a      	lsls	r2, r3, #10
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <EE_Init+0x2b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	0b1b      	lsrs	r3, r3, #12
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	f003 0103 	and.w	r1, r3, #3
 8003c92:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <EE_Init+0x2ac>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	029a      	lsls	r2, r3, #10
 8003c98:	4b32      	ldr	r3, [pc, #200]	@ (8003d64 <EE_Init+0x2b0>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	0b1b      	lsrs	r3, r3, #12
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003cb2:	031a      	lsls	r2, r3, #12
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <EE_Init+0x2ac>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <EE_Init+0x2b0>)
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003cc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8003cc6:	4b26      	ldr	r3, [pc, #152]	@ (8003d60 <EE_Init+0x2ac>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	0298      	lsls	r0, r3, #10
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <EE_Init+0x2b0>)
 8003cce:	4003      	ands	r3, r0
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fb74 	bl	80053c4 <GetPageState>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d12d      	bne.n	8003d3e <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <EE_Init+0x2ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d64 <EE_Init+0x2b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f003 0103 	and.w	r1, r3, #3
 8003d06:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <EE_Init+0x2ac>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	029a      	lsls	r2, r3, #10
 8003d0c:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <EE_Init+0x2b0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d14:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d18:	fb00 f303 	mul.w	r3, r0, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	0b1b      	lsrs	r3, r3, #12
 8003d20:	440b      	add	r3, r1
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fa8b 	bl	8005240 <SetPageState>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e39e      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f000 fba7 	bl	8004488 <EE_Format>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e399      	b.n	8004472 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <EE_Init+0x2ac>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	029a      	lsls	r2, r3, #10
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <EE_Init+0x2b0>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	0b1b      	lsrs	r3, r3, #12
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5a:	e0de      	b.n	8003f1a <EE_Init+0x466>
 8003d5c:	200003ac 	.word	0x200003ac
 8003d60:	1fff75e0 	.word	0x1fff75e0
 8003d64:	001ffc00 	.word	0x001ffc00
 8003d68:	200003a8 	.word	0x200003a8
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d72:	031a      	lsls	r2, r3, #12
 8003d74:	4bba      	ldr	r3, [pc, #744]	@ (8004060 <EE_Init+0x5ac>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	0299      	lsls	r1, r3, #10
 8003d7a:	4bba      	ldr	r3, [pc, #744]	@ (8004064 <EE_Init+0x5b0>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003d82:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d86:	4bb6      	ldr	r3, [pc, #728]	@ (8004060 <EE_Init+0x5ac>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	0298      	lsls	r0, r3, #10
 8003d8c:	4bb5      	ldr	r3, [pc, #724]	@ (8004064 <EE_Init+0x5b0>)
 8003d8e:	4003      	ands	r3, r0
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003d98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d9a:	f001 fb13 	bl	80053c4 <GetPageState>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003da2:	7ebb      	ldrb	r3, [r7, #26]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 80b5 	bne.w	8003f14 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003daa:	4bad      	ldr	r3, [pc, #692]	@ (8004060 <EE_Init+0x5ac>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	029a      	lsls	r2, r3, #10
 8003db0:	4bac      	ldr	r3, [pc, #688]	@ (8004064 <EE_Init+0x5b0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	0b1b      	lsrs	r3, r3, #12
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d050      	beq.n	8003e6c <EE_Init+0x3b8>
 8003dca:	4ba5      	ldr	r3, [pc, #660]	@ (8004060 <EE_Init+0x5ac>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	029a      	lsls	r2, r3, #10
 8003dd0:	4ba4      	ldr	r3, [pc, #656]	@ (8004064 <EE_Init+0x5b0>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	0b1b      	lsrs	r3, r3, #12
 8003de4:	3302      	adds	r3, #2
 8003de6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d03f      	beq.n	8003e6c <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003dec:	4b9c      	ldr	r3, [pc, #624]	@ (8004060 <EE_Init+0x5ac>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	029a      	lsls	r2, r3, #10
 8003df2:	4b9c      	ldr	r3, [pc, #624]	@ (8004064 <EE_Init+0x5b0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dfa:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	0b1b      	lsrs	r3, r3, #12
 8003e06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	f003 0103 	and.w	r1, r3, #3
 8003e10:	4b93      	ldr	r3, [pc, #588]	@ (8004060 <EE_Init+0x5ac>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	029a      	lsls	r2, r3, #10
 8003e16:	4b93      	ldr	r3, [pc, #588]	@ (8004064 <EE_Init+0x5b0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e1e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	0b1b      	lsrs	r3, r3, #12
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003e30:	031a      	lsls	r2, r3, #12
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <EE_Init+0x5ac>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	0299      	lsls	r1, r3, #10
 8003e38:	4b8a      	ldr	r3, [pc, #552]	@ (8004064 <EE_Init+0x5b0>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e40:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e44:	4b86      	ldr	r3, [pc, #536]	@ (8004060 <EE_Init+0x5ac>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0298      	lsls	r0, r3, #10
 8003e4a:	4b86      	ldr	r3, [pc, #536]	@ (8004064 <EE_Init+0x5b0>)
 8003e4c:	4003      	ands	r3, r0
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fab5 	bl	80053c4 <GetPageState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d102      	bne.n	8003e66 <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e64:	e041      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e66:	2301      	movs	r3, #1
 8003e68:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e6a:	e03e      	b.n	8003eea <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <EE_Init+0x5ac>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b7c      	ldr	r3, [pc, #496]	@ (8004064 <EE_Init+0x5b0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 0103 	and.w	r1, r3, #3
 8003e90:	4b73      	ldr	r3, [pc, #460]	@ (8004060 <EE_Init+0x5ac>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	029a      	lsls	r2, r3, #10
 8003e96:	4b73      	ldr	r3, [pc, #460]	@ (8004064 <EE_Init+0x5b0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e9e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	0b1b      	lsrs	r3, r3, #12
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003eb0:	031a      	lsls	r2, r3, #12
 8003eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <EE_Init+0x5ac>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	0299      	lsls	r1, r3, #10
 8003eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004064 <EE_Init+0x5b0>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003ec0:	fbb1 f1f3 	udiv	r1, r1, r3
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <EE_Init+0x5ac>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	0298      	lsls	r0, r3, #10
 8003eca:	4b66      	ldr	r3, [pc, #408]	@ (8004064 <EE_Init+0x5b0>)
 8003ecc:	4003      	ands	r3, r0
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fa75 	bl	80053c4 <GetPageState>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e001      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d111      	bne.n	8003f14 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <EE_Init+0x5b4>)
 8003ef6:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2100      	movs	r1, #0
 8003efc:	2000      	movs	r0, #0
 8003efe:	f000 fef3 	bl	8004ce8 <PagesTransfer>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d001      	beq.n	8003f0e <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	e2b1      	b.n	8004472 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003f12:	e014      	b.n	8003f3e <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	3301      	adds	r3, #1
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1a:	4b51      	ldr	r3, [pc, #324]	@ (8004060 <EE_Init+0x5ac>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	029a      	lsls	r2, r3, #10
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <EE_Init+0x5b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	0b1b      	lsrs	r3, r3, #12
 8003f34:	3304      	adds	r3, #4
 8003f36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f4ff af17 	bcc.w	8003d6c <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <EE_Init+0x5ac>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	029a      	lsls	r2, r3, #10
 8003f48:	4b46      	ldr	r3, [pc, #280]	@ (8004064 <EE_Init+0x5b0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	0b1b      	lsrs	r3, r3, #12
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	e0dc      	b.n	800411a <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003f66:	031a      	lsls	r2, r3, #12
 8003f68:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <EE_Init+0x5ac>)
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	0299      	lsls	r1, r3, #10
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <EE_Init+0x5b0>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f76:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f7a:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <EE_Init+0x5ac>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	0298      	lsls	r0, r3, #10
 8003f80:	4b38      	ldr	r3, [pc, #224]	@ (8004064 <EE_Init+0x5b0>)
 8003f82:	4003      	ands	r3, r0
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003f8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f8e:	f001 fa19 	bl	80053c4 <GetPageState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f96:	7ebb      	ldrb	r3, [r7, #26]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f040 80b6 	bne.w	800410a <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <EE_Init+0x5ac>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	029a      	lsls	r2, r3, #10
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004064 <EE_Init+0x5b0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fac:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	0b1b      	lsrs	r3, r3, #12
 8003fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d056      	beq.n	800406c <EE_Init+0x5b8>
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <EE_Init+0x5ac>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	029a      	lsls	r2, r3, #10
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <EE_Init+0x5b0>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	0b1b      	lsrs	r3, r3, #12
 8003fd8:	3302      	adds	r3, #2
 8003fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d045      	beq.n	800406c <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <EE_Init+0x5ac>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	029a      	lsls	r2, r3, #10
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <EE_Init+0x5b0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fee:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	0b1b      	lsrs	r3, r3, #12
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	3303      	adds	r3, #3
 8004000:	f003 0103 	and.w	r1, r3, #3
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <EE_Init+0x5ac>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	029a      	lsls	r2, r3, #10
 800400a:	4b16      	ldr	r3, [pc, #88]	@ (8004064 <EE_Init+0x5b0>)
 800400c:	4013      	ands	r3, r2
 800400e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004012:	fbb2 f0f3 	udiv	r0, r2, r3
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	0b1b      	lsrs	r3, r3, #12
 800401e:	440b      	add	r3, r1
 8004020:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004024:	031a      	lsls	r2, r3, #12
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <EE_Init+0x5ac>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	0299      	lsls	r1, r3, #10
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <EE_Init+0x5b0>)
 800402e:	400b      	ands	r3, r1
 8004030:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004034:	fbb1 f1f3 	udiv	r1, r1, r3
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <EE_Init+0x5ac>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	0298      	lsls	r0, r3, #10
 800403e:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <EE_Init+0x5b0>)
 8004040:	4003      	ands	r3, r0
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9bb 	bl	80053c4 <GetPageState>
 800404e:	4603      	mov	r3, r0
 8004050:	2b03      	cmp	r3, #3
 8004052:	d102      	bne.n	800405a <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004058:	e047      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800405a:	2301      	movs	r3, #1
 800405c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800405e:	e044      	b.n	80040ea <EE_Init+0x636>
 8004060:	1fff75e0 	.word	0x1fff75e0
 8004064:	001ffc00 	.word	0x001ffc00
 8004068:	200003a6 	.word	0x200003a6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800406c:	4b98      	ldr	r3, [pc, #608]	@ (80042d0 <EE_Init+0x81c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	029a      	lsls	r2, r3, #10
 8004072:	4b98      	ldr	r3, [pc, #608]	@ (80042d4 <EE_Init+0x820>)
 8004074:	4013      	ands	r3, r2
 8004076:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800407a:	fbb2 f1f3 	udiv	r1, r2, r3
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	0b1b      	lsrs	r3, r3, #12
 8004086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f003 0103 	and.w	r1, r3, #3
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <EE_Init+0x81c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	029a      	lsls	r2, r3, #10
 8004096:	4b8f      	ldr	r3, [pc, #572]	@ (80042d4 <EE_Init+0x820>)
 8004098:	4013      	ands	r3, r2
 800409a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800409e:	fbb2 f0f3 	udiv	r0, r2, r3
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	0b1b      	lsrs	r3, r3, #12
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80040b0:	031a      	lsls	r2, r3, #12
 80040b2:	4b87      	ldr	r3, [pc, #540]	@ (80042d0 <EE_Init+0x81c>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	0299      	lsls	r1, r3, #10
 80040b8:	4b86      	ldr	r3, [pc, #536]	@ (80042d4 <EE_Init+0x820>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80040c0:	fbb1 f1f3 	udiv	r1, r1, r3
 80040c4:	4b82      	ldr	r3, [pc, #520]	@ (80042d0 <EE_Init+0x81c>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	0298      	lsls	r0, r3, #10
 80040ca:	4b82      	ldr	r3, [pc, #520]	@ (80042d4 <EE_Init+0x820>)
 80040cc:	4003      	ands	r3, r0
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f975 	bl	80053c4 <GetPageState>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e001      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040e6:	2301      	movs	r3, #1
 80040e8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b77      	ldr	r3, [pc, #476]	@ (80042d8 <EE_Init+0x824>)
 80040fc:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	3301      	adds	r3, #1
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
 8004104:	e006      	b.n	8004114 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8004106:	230a      	movs	r3, #10
 8004108:	e1b3      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800410a:	7ebb      	ldrb	r3, [r7, #26]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d101      	bne.n	8004114 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	3301      	adds	r3, #1
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411a:	4b6d      	ldr	r3, [pc, #436]	@ (80042d0 <EE_Init+0x81c>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	4b6c      	ldr	r3, [pc, #432]	@ (80042d4 <EE_Init+0x820>)
 8004122:	4013      	ands	r3, r2
 8004124:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004128:	fbb2 f1f3 	udiv	r1, r2, r3
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	3304      	adds	r3, #4
 8004136:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004138:	429a      	cmp	r2, r3
 800413a:	f4ff af11 	bcc.w	8003f60 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d133      	bne.n	80041ac <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	b2d9      	uxtb	r1, r3
 8004148:	4b61      	ldr	r3, [pc, #388]	@ (80042d0 <EE_Init+0x81c>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	029a      	lsls	r2, r3, #10
 800414e:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <EE_Init+0x820>)
 8004150:	4013      	ands	r3, r2
 8004152:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004156:	fbb2 f0f3 	udiv	r0, r2, r3
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	0b1b      	lsrs	r3, r3, #12
 8004162:	b2db      	uxtb	r3, r3
 8004164:	1acb      	subs	r3, r1, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	b2d9      	uxtb	r1, r3
 8004172:	4b57      	ldr	r3, [pc, #348]	@ (80042d0 <EE_Init+0x81c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	029a      	lsls	r2, r3, #10
 8004178:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <EE_Init+0x820>)
 800417a:	4013      	ands	r3, r2
 800417c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004180:	fbb2 f0f3 	udiv	r0, r2, r3
 8004184:	fb00 f303 	mul.w	r3, r0, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	0b1b      	lsrs	r3, r3, #12
 800418c:	b2db      	uxtb	r3, r3
 800418e:	440b      	add	r3, r1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b51      	ldr	r3, [pc, #324]	@ (80042d8 <EE_Init+0x824>)
 8004194:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004196:	4b50      	ldr	r3, [pc, #320]	@ (80042d8 <EE_Init+0x824>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f84f 	bl	8005240 <SetPageState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 80041a8:	2302      	movs	r3, #2
 80041aa:	e162      	b.n	8004472 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <EE_Init+0x828>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <EE_Init+0x82c>)
 80041b4:	2220      	movs	r2, #32
 80041b6:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041b8:	2320      	movs	r3, #32
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80041bc:	e031      	b.n	8004222 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <EE_Init+0x824>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80041c6:	031a      	lsls	r2, r3, #12
 80041c8:	4b41      	ldr	r3, [pc, #260]	@ (80042d0 <EE_Init+0x81c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	0299      	lsls	r1, r3, #10
 80041ce:	4b41      	ldr	r3, [pc, #260]	@ (80042d4 <EE_Init+0x820>)
 80041d0:	400b      	ands	r3, r1
 80041d2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80041d6:	fbb1 f1f3 	udiv	r1, r1, r3
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <EE_Init+0x81c>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	0298      	lsls	r0, r3, #10
 80041e0:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <EE_Init+0x820>)
 80041e2:	4003      	ands	r3, r0
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	4413      	add	r3, r2
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	bf08      	it	eq
 8004200:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004204:	d012      	beq.n	800422c <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <EE_Init+0x828>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <EE_Init+0x828>)
 8004210:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <EE_Init+0x82c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <EE_Init+0x82c>)
 800421a:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	3308      	adds	r3, #8
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d3c9      	bcc.n	80041be <EE_Init+0x70a>
 800422a:	e000      	b.n	800422e <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 800422c:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <EE_Init+0x824>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <EE_Init+0x824>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800423a:	e053      	b.n	80042e4 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <EE_Init+0x81c>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	029a      	lsls	r2, r3, #10
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <EE_Init+0x820>)
 8004244:	4013      	ands	r3, r2
 8004246:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800424a:	fbb2 f1f3 	udiv	r1, r2, r3
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	0b1b      	lsrs	r3, r3, #12
 8004256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	3303      	adds	r3, #3
 800425c:	f003 0103 	and.w	r1, r3, #3
 8004260:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <EE_Init+0x81c>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	029a      	lsls	r2, r3, #10
 8004266:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <EE_Init+0x820>)
 8004268:	4013      	ands	r3, r2
 800426a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800426e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004272:	fb00 f303 	mul.w	r3, r0, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	0b1b      	lsrs	r3, r3, #12
 800427a:	440b      	add	r3, r1
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800427e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004280:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004284:	031a      	lsls	r2, r3, #12
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <EE_Init+0x81c>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	0299      	lsls	r1, r3, #10
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <EE_Init+0x820>)
 800428e:	400b      	ands	r3, r1
 8004290:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004294:	fbb1 f1f3 	udiv	r1, r1, r3
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <EE_Init+0x81c>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	0298      	lsls	r0, r3, #10
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <EE_Init+0x820>)
 80042a0:	4003      	ands	r3, r0
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f88b 	bl	80053c4 <GetPageState>
 80042ae:	4603      	mov	r3, r0
 80042b0:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 80042b2:	7ebb      	ldrb	r3, [r7, #26]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d109      	bne.n	80042cc <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <EE_Init+0x828>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <EE_Init+0x828>)
 80042c4:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 80042c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	e00b      	b.n	80042e4 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 80042cc:	230a      	movs	r3, #10
 80042ce:	e0d0      	b.n	8004472 <EE_Init+0x9be>
 80042d0:	1fff75e0 	.word	0x1fff75e0
 80042d4:	001ffc00 	.word	0x001ffc00
 80042d8:	200003a6 	.word	0x200003a6
 80042dc:	200003a4 	.word	0x200003a4
 80042e0:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042e4:	4b65      	ldr	r3, [pc, #404]	@ (800447c <EE_Init+0x9c8>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	029a      	lsls	r2, r3, #10
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <EE_Init+0x9cc>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	0b1b      	lsrs	r3, r3, #12
 80042fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004300:	429a      	cmp	r2, r3
 8004302:	d010      	beq.n	8004326 <EE_Init+0x872>
 8004304:	4b5d      	ldr	r3, [pc, #372]	@ (800447c <EE_Init+0x9c8>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	029a      	lsls	r2, r3, #10
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <EE_Init+0x9cc>)
 800430c:	4013      	ands	r3, r2
 800430e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004312:	fbb2 f1f3 	udiv	r1, r2, r3
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	0b1b      	lsrs	r3, r3, #12
 800431e:	3302      	adds	r3, #2
 8004320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004322:	429a      	cmp	r2, r3
 8004324:	d18a      	bne.n	800423c <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <EE_Init+0x9d0>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	4b53      	ldr	r3, [pc, #332]	@ (800447c <EE_Init+0x9c8>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	029a      	lsls	r2, r3, #10
 8004332:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <EE_Init+0x9cc>)
 8004334:	4013      	ands	r3, r2
 8004336:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800433a:	fbb2 f1f3 	udiv	r1, r2, r3
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	0b1b      	lsrs	r3, r3, #12
 8004346:	1ac3      	subs	r3, r0, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f003 0103 	and.w	r1, r3, #3
 800434e:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <EE_Init+0x9c8>)
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	029a      	lsls	r2, r3, #10
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <EE_Init+0x9cc>)
 8004356:	4013      	ands	r3, r2
 8004358:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800435c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004360:	fb00 f303 	mul.w	r3, r0, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	0b1b      	lsrs	r3, r3, #12
 8004368:	440b      	add	r3, r1
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004372:	031a      	lsls	r2, r3, #12
 8004374:	4b41      	ldr	r3, [pc, #260]	@ (800447c <EE_Init+0x9c8>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	0299      	lsls	r1, r3, #10
 800437a:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <EE_Init+0x9cc>)
 800437c:	400b      	ands	r3, r1
 800437e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004382:	fbb1 f1f3 	udiv	r1, r1, r3
 8004386:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <EE_Init+0x9c8>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	0298      	lsls	r0, r3, #10
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <EE_Init+0x9cc>)
 800438e:	4003      	ands	r3, r0
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 8004398:	e053      	b.n	8004442 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80043a0:	2101      	movs	r1, #1
 80043a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043a4:	f001 f8b1 	bl	800550a <FI_PageErase>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e05f      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80043b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043b8:	f000 fb5d 	bl	8004a76 <VerifyPageFullyErased>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d108      	bne.n	80043d4 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80043c2:	2101      	movs	r1, #1
 80043c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043c6:	f001 f8a0 	bl	800550a <FI_PageErase>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04e      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80043d4:	4b29      	ldr	r3, [pc, #164]	@ (800447c <EE_Init+0x9c8>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	029a      	lsls	r2, r3, #10
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <EE_Init+0x9cc>)
 80043dc:	4013      	ands	r3, r2
 80043de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	0b1b      	lsrs	r3, r3, #12
 80043ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f003 0103 	and.w	r1, r3, #3
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <EE_Init+0x9c8>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	029a      	lsls	r2, r3, #10
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <EE_Init+0x9cc>)
 8004400:	4013      	ands	r3, r2
 8004402:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004406:	fbb2 f0f3 	udiv	r0, r2, r3
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	0b1b      	lsrs	r3, r3, #12
 8004412:	440b      	add	r3, r1
 8004414:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800441c:	031a      	lsls	r2, r3, #12
 800441e:	4b17      	ldr	r3, [pc, #92]	@ (800447c <EE_Init+0x9c8>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	0299      	lsls	r1, r3, #10
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <EE_Init+0x9cc>)
 8004426:	400b      	ands	r3, r1
 8004428:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800442c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <EE_Init+0x9c8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	0298      	lsls	r0, r3, #10
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <EE_Init+0x9cc>)
 8004438:	4003      	ands	r3, r0
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8004442:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d1a7      	bne.n	800439a <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800444a:	f001 f89d 	bl	8005588 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004454:	2100      	movs	r1, #0
 8004456:	2000      	movs	r0, #0
 8004458:	f000 fe6c 	bl	8005134 <VerifyPagesFullWriteVariable>
 800445c:	4603      	mov	r3, r0
 800445e:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <EE_Init+0x9bc>
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	2b12      	cmp	r3, #18
 800446a:	d001      	beq.n	8004470 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 800446c:	2302      	movs	r3, #2
 800446e:	e000      	b.n	8004472 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3740      	adds	r7, #64	@ 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	1fff75e0 	.word	0x1fff75e0
 8004480:	001ffc00 	.word	0x001ffc00
 8004484:	200003a6 	.word	0x200003a6

08004488 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8004496:	f001 f899 	bl	80055cc <FI_CheckBankConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80044a0:	230e      	movs	r3, #14
 80044a2:	e083      	b.n	80045ac <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044a4:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <EE_Format+0x12c>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	029a      	lsls	r2, r3, #10
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <EE_Format+0x130>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	0b1b      	lsrs	r3, r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e034      	b.n	800452c <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80044c8:	2101      	movs	r1, #1
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 f81d 	bl	800550a <FI_PageErase>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d027      	beq.n	8004526 <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e068      	b.n	80045ac <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80044e0:	031a      	lsls	r2, r3, #12
 80044e2:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <EE_Format+0x12c>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	0299      	lsls	r1, r3, #10
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <EE_Format+0x130>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80044f0:	fbb1 f1f3 	udiv	r1, r1, r3
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <EE_Format+0x12c>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	0298      	lsls	r0, r3, #10
 80044fa:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <EE_Format+0x130>)
 80044fc:	4003      	ands	r3, r0
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fab4 	bl	8004a76 <VerifyPageFullyErased>
 800450e:	4603      	mov	r3, r0
 8004510:	2b10      	cmp	r3, #16
 8004512:	d108      	bne.n	8004526 <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004514:	2101      	movs	r1, #1
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fff7 	bl	800550a <FI_PageErase>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e042      	b.n	80045ac <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <EE_Format+0x12c>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	029a      	lsls	r2, r3, #10
 8004532:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <EE_Format+0x130>)
 8004534:	4013      	ands	r3, r2
 8004536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800453a:	fbb2 f1f3 	udiv	r1, r2, r3
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	0b1b      	lsrs	r3, r3, #12
 8004546:	3304      	adds	r3, #4
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3b9      	bcc.n	80044c2 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800454e:	f001 f81b 	bl	8005588 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004552:	4b18      	ldr	r3, [pc, #96]	@ (80045b4 <EE_Format+0x12c>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	029a      	lsls	r2, r3, #10
 8004558:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <EE_Format+0x130>)
 800455a:	4013      	ands	r3, r2
 800455c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004560:	fbb2 f1f3 	udiv	r1, r2, r3
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fe66 	bl	8005240 <SetPageState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800457a:	2302      	movs	r3, #2
 800457c:	e016      	b.n	80045ac <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800457e:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <EE_Format+0x134>)
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <EE_Format+0x12c>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	029a      	lsls	r2, r3, #10
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <EE_Format+0x130>)
 800458c:	4013      	ands	r3, r2
 800458e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004592:	fbb2 f1f3 	udiv	r1, r2, r3
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	0b1b      	lsrs	r3, r3, #12
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <EE_Format+0x138>)
 80045a2:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80045a4:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <EE_Format+0x13c>)
 80045a6:	2220      	movs	r2, #32
 80045a8:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	1fff75e0 	.word	0x1fff75e0
 80045b8:	001ffc00 	.word	0x001ffc00
 80045bc:	200003a4 	.word	0x200003a4
 80045c0:	200003a6 	.word	0x200003a6
 80045c4:	20000008 	.word	0x20000008

080045c8 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d011      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f94b 	bl	8004890 <ReadVariable>
 80045fa:	4603      	mov	r3, r0
 80045fc:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]

    return status;
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	e000      	b.n	800460a <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004608:	2308      	movs	r3, #8
  } 
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	6039      	str	r1, [r7, #0]
 800461c:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800462a:	4293      	cmp	r3, r2
 800462c:	d006      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa00 	bl	8004a38 <WriteVariable>
 8004638:	4603      	mov	r3, r0
 800463a:	e000      	b.n	800463e <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800463c:	2308      	movs	r3, #8
  } 
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800465e:	2305      	movs	r3, #5
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	2305      	movs	r3, #5
 8004664:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004666:	4b3f      	ldr	r3, [pc, #252]	@ (8004764 <EE_CleanUp+0x11c>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	029a      	lsls	r2, r3, #10
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <EE_CleanUp+0x120>)
 800466e:	4013      	ands	r3, r2
 8004670:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004674:	fbb2 f1f3 	udiv	r1, r2, r3
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	0b1b      	lsrs	r3, r3, #12
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e059      	b.n	8004738 <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800468a:	031a      	lsls	r2, r3, #12
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <EE_CleanUp+0x11c>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	0299      	lsls	r1, r3, #10
 8004692:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <EE_CleanUp+0x120>)
 8004694:	400b      	ands	r3, r1
 8004696:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800469a:	fbb1 f1f3 	udiv	r1, r1, r3
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <EE_CleanUp+0x11c>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	0298      	lsls	r0, r3, #10
 80046a4:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <EE_CleanUp+0x120>)
 80046a6:	4003      	ands	r3, r0
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fe87 	bl	80053c4 <GetPageState>
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d138      	bne.n	8004732 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e022      	b.n	800470e <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80046ce:	031a      	lsls	r2, r3, #12
 80046d0:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <EE_CleanUp+0x11c>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	0299      	lsls	r1, r3, #10
 80046d6:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <EE_CleanUp+0x120>)
 80046d8:	400b      	ands	r3, r1
 80046da:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80046de:	fbb1 f1f3 	udiv	r1, r1, r3
 80046e2:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <EE_CleanUp+0x11c>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	0298      	lsls	r0, r3, #10
 80046e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <EE_CleanUp+0x120>)
 80046ea:	4003      	ands	r3, r0
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f000 fe65 	bl	80053c4 <GetPageState>
 80046fa:	4603      	mov	r3, r0
 80046fc:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d001      	beq.n	8004708 <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004704:	2305      	movs	r3, #5
 8004706:	e029      	b.n	800475c <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3301      	adds	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3302      	adds	r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3d7      	bcc.n	80046c8 <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004718:	2102      	movs	r1, #2
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f000 fef5 	bl	800550a <FI_PageErase>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e018      	b.n	800475c <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800472a:	f000 ff2d 	bl	8005588 <FI_CacheFlush>
        
        return EE_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e014      	b.n	800475c <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3302      	adds	r3, #2
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <EE_CleanUp+0x11c>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	029a      	lsls	r2, r3, #10
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <EE_CleanUp+0x120>)
 8004740:	4013      	ands	r3, r2
 8004742:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004746:	fbb2 f1f3 	udiv	r1, r2, r3
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	0b1b      	lsrs	r3, r3, #12
 8004752:	3304      	adds	r3, #4
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d394      	bcc.n	8004684 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800475a:	2305      	movs	r3, #5
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	1fff75e0 	.word	0x1fff75e0
 8004768:	001ffc00 	.word	0x001ffc00

0800476c <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004782:	2305      	movs	r3, #5
 8004784:	71fb      	strb	r3, [r7, #7]
 8004786:	2305      	movs	r3, #5
 8004788:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	029a      	lsls	r2, r3, #10
 8004790:	4b3e      	ldr	r3, [pc, #248]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004792:	4013      	ands	r3, r2
 8004794:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004798:	fbb2 f1f3 	udiv	r1, r2, r3
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	0b1b      	lsrs	r3, r3, #12
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e059      	b.n	800485c <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047ae:	031a      	lsls	r2, r3, #12
 80047b0:	4b35      	ldr	r3, [pc, #212]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	0299      	lsls	r1, r3, #10
 80047b6:	4b35      	ldr	r3, [pc, #212]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047b8:	400b      	ands	r3, r1
 80047ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80047be:	fbb1 f1f3 	udiv	r1, r1, r3
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	0298      	lsls	r0, r3, #10
 80047c8:	4b30      	ldr	r3, [pc, #192]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047ca:	4003      	ands	r3, r0
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fdf5 	bl	80053c4 <GetPageState>
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d138      	bne.n	8004856 <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e022      	b.n	8004832 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047f2:	031a      	lsls	r2, r3, #12
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	0299      	lsls	r1, r3, #10
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004802:	fbb1 f1f3 	udiv	r1, r1, r3
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	0298      	lsls	r0, r3, #10
 800480c:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <EE_CleanUp_IT+0x120>)
 800480e:	4003      	ands	r3, r0
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 fdd3 	bl	80053c4 <GetPageState>
 800481e:	4603      	mov	r3, r0
 8004820:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d001      	beq.n	800482c <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004828:	2305      	movs	r3, #5
 800482a:	e029      	b.n	8004880 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3302      	adds	r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3d7      	bcc.n	80047ec <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800483c:	2102      	movs	r1, #2
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f000 fe85 	bl	800554e <FI_PageErase_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e018      	b.n	8004880 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800484e:	f000 fe9b 	bl	8005588 <FI_CacheFlush>
        return EE_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e014      	b.n	8004880 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3302      	adds	r3, #2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	029a      	lsls	r2, r3, #10
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004864:	4013      	ands	r3, r2
 8004866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800486a:	fbb2 f1f3 	udiv	r1, r2, r3
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	0b1b      	lsrs	r3, r3, #12
 8004876:	3304      	adds	r3, #4
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d394      	bcc.n	80047a8 <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800487e:	2305      	movs	r3, #5
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	1fff75e0 	.word	0x1fff75e0
 800488c:	001ffc00 	.word	0x001ffc00

08004890 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ac:	2300      	movs	r3, #0
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80048b8:	2305      	movs	r3, #5
 80048ba:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80048bc:	2000      	movs	r0, #0
 80048be:	f000 f8ff 	bl	8004ac0 <FindPage>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d101      	bne.n	80048d0 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ab      	b.n	8004a28 <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80048d6:	031a      	lsls	r2, r3, #12
 80048d8:	4b55      	ldr	r3, [pc, #340]	@ (8004a30 <ReadVariable+0x1a0>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	0299      	lsls	r1, r3, #10
 80048de:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <ReadVariable+0x1a4>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80048e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <ReadVariable+0x1a0>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	0298      	lsls	r0, r3, #10
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <ReadVariable+0x1a4>)
 80048f2:	4003      	ands	r3, r0
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f000 fd61 	bl	80053c4 <GetPageState>
 8004902:	4603      	mov	r3, r0
 8004904:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004906:	e082      	b.n	8004a0e <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 8004908:	f640 73f8 	movw	r3, #4088	@ 0xff8
 800490c:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800490e:	e03f      	b.n	8004990 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800491e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	bf08      	it	eq
 8004928:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800492c:	d02d      	beq.n	800498a <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800492e:	8a3b      	ldrh	r3, [r7, #16]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	429a      	cmp	r2, r3
 8004934:	d129      	bne.n	800498a <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8004936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	000a      	movs	r2, r1
 8004944:	2300      	movs	r3, #0
 8004946:	8a3b      	ldrh	r3, [r7, #16]
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fdb0 	bl	80054b0 <CalculateCrc>
 8004950:	4603      	mov	r3, r0
 8004952:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004954:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	0c02      	lsrs	r2, r0, #16
 8004962:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004966:	0c0b      	lsrs	r3, r1, #16
 8004968:	b293      	uxth	r3, r2
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4293      	cmp	r3, r2
 8004970:	d10b      	bne.n	800498a <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	000a      	movs	r2, r1
 8004980:	2300      	movs	r3, #0
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e04e      	b.n	8004a28 <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b08      	subs	r3, #8
 800498e:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b1f      	cmp	r3, #31
 8004994:	d8bc      	bhi.n	8004910 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <ReadVariable+0x1a0>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	029a      	lsls	r2, r3, #10
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <ReadVariable+0x1a4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	0b1b      	lsrs	r3, r3, #12
 80049b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	3303      	adds	r3, #3
 80049b6:	f003 0103 	and.w	r1, r3, #3
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <ReadVariable+0x1a0>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	029a      	lsls	r2, r3, #10
 80049c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <ReadVariable+0x1a4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049c8:	fbb2 f0f3 	udiv	r0, r2, r3
 80049cc:	fb00 f303 	mul.w	r3, r0, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	0b1b      	lsrs	r3, r3, #12
 80049d4:	440b      	add	r3, r1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049de:	031a      	lsls	r2, r3, #12
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <ReadVariable+0x1a0>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	0299      	lsls	r1, r3, #10
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <ReadVariable+0x1a4>)
 80049e8:	400b      	ands	r3, r1
 80049ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049ee:	fbb1 f1f3 	udiv	r1, r1, r3
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <ReadVariable+0x1a0>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	0298      	lsls	r0, r3, #10
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <ReadVariable+0x1a4>)
 80049fa:	4003      	ands	r3, r0
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004a04:	6a38      	ldr	r0, [r7, #32]
 8004a06:	f000 fcdd 	bl	80053c4 <GetPageState>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004a0e:	7efb      	ldrb	r3, [r7, #27]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f43f af79 	beq.w	8004908 <ReadVariable+0x78>
 8004a16:	7efb      	ldrb	r3, [r7, #27]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	f43f af75 	beq.w	8004908 <ReadVariable+0x78>
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	f43f af71 	beq.w	8004908 <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 8004a26:	2307      	movs	r3, #7
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	1fff75e0 	.word	0x1fff75e0
 8004a34:	001ffc00 	.word	0x001ffc00

08004a38 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb71 	bl	8005134 <VerifyPagesFullWriteVariable>
 8004a52:	4603      	mov	r3, r0
 8004a54:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a56:	89fb      	ldrh	r3, [r7, #14]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d107      	bne.n	8004a6c <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f940 	bl	8004ce8 <PagesTransfer>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	e000      	b.n	8004a6e <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a80:	2311      	movs	r3, #17
 8004a82:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a88:	e00f      	b.n	8004aaa <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4413      	add	r3, r2
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	bf08      	it	eq
 8004a9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a9e:	d001      	beq.n	8004aa4 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3eb      	bcc.n	8004a8a <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004aca:	2305      	movs	r3, #5
 8004acc:	75fb      	strb	r3, [r7, #23]
 8004ace:	2305      	movs	r3, #5
 8004ad0:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004ade:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd8 <FindPage+0x218>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004aea:	031a      	lsls	r2, r3, #12
 8004aec:	4b7b      	ldr	r3, [pc, #492]	@ (8004cdc <FindPage+0x21c>)
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0299      	lsls	r1, r3, #10
 8004af2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce0 <FindPage+0x220>)
 8004af4:	400b      	ands	r3, r1
 8004af6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004afa:	fbb1 f1f3 	udiv	r1, r1, r3
 8004afe:	4b77      	ldr	r3, [pc, #476]	@ (8004cdc <FindPage+0x21c>)
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	0298      	lsls	r0, r3, #10
 8004b04:	4b76      	ldr	r3, [pc, #472]	@ (8004ce0 <FindPage+0x220>)
 8004b06:	4003      	ands	r3, r0
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fc58 	bl	80053c4 <GetPageState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004b18:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <FindPage+0x21c>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	029a      	lsls	r2, r3, #10
 8004b1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ce0 <FindPage+0x220>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b26:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	0b1b      	lsrs	r3, r3, #12
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f003 0103 	and.w	r1, r3, #3
 8004b3c:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <FindPage+0x21c>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	029a      	lsls	r2, r3, #10
 8004b42:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <FindPage+0x220>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b4a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	0b1b      	lsrs	r3, r3, #12
 8004b56:	440b      	add	r3, r1
 8004b58:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004b60:	031a      	lsls	r2, r3, #12
 8004b62:	4b5e      	ldr	r3, [pc, #376]	@ (8004cdc <FindPage+0x21c>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	0299      	lsls	r1, r3, #10
 8004b68:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce0 <FindPage+0x220>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004b70:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b74:	4b59      	ldr	r3, [pc, #356]	@ (8004cdc <FindPage+0x21c>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	0298      	lsls	r0, r3, #10
 8004b7a:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <FindPage+0x220>)
 8004b7c:	4003      	ands	r3, r0
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc1d 	bl	80053c4 <GetPageState>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <FindPage+0x21c>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	029a      	lsls	r2, r3, #10
 8004b94:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <FindPage+0x220>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	0b1b      	lsrs	r3, r3, #12
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	3303      	adds	r3, #3
 8004bae:	f003 0103 	and.w	r1, r3, #3
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <FindPage+0x21c>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	029a      	lsls	r2, r3, #10
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <FindPage+0x220>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004bc0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	0b1b      	lsrs	r3, r3, #12
 8004bcc:	440b      	add	r3, r1
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d071      	beq.n	8004cba <FindPage+0x1fa>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	dc77      	bgt.n	8004cca <FindPage+0x20a>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d060      	beq.n	8004ca0 <FindPage+0x1e0>
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d173      	bne.n	8004cca <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d12a      	bne.n	8004c3e <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004be8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <FindPage+0x224>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d201      	bcs.n	8004bf6 <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	e06b      	b.n	8004cce <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bf6:	7dbb      	ldrb	r3, [r7, #22]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bfc:	f7ff fd24 	bl	8004648 <EE_CleanUp>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e060      	b.n	8004cce <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f000 fb16 	bl	8005240 <SetPageState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	e056      	b.n	8004cce <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004c20:	2102      	movs	r1, #2
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fb0c 	bl	8005240 <SetPageState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e04c      	b.n	8004cce <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <FindPage+0x224>)
 8004c36:	2220      	movs	r2, #32
 8004c38:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	e047      	b.n	8004cce <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12a      	bne.n	8004c9a <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c44:	4b27      	ldr	r3, [pc, #156]	@ (8004ce4 <FindPage+0x224>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d201      	bcs.n	8004c52 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	e03d      	b.n	8004cce <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c52:	7dbb      	ldrb	r3, [r7, #22]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d107      	bne.n	8004c68 <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c58:	f7ff fcf6 	bl	8004648 <EE_CleanUp>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e032      	b.n	8004cce <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c68:	2103      	movs	r1, #3
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 fae8 	bl	8005240 <SetPageState>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	e028      	b.n	8004cce <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fade 	bl	8005240 <SetPageState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e01e      	b.n	8004cce <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <FindPage+0x224>)
 8004c92:	2220      	movs	r2, #32
 8004c94:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e019      	b.n	8004cce <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e016      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d101      	bne.n	8004caa <FindPage+0x1ea>
      {
        return currentpage;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	e011      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <FindPage+0x1f4>
        {
          return previouspage;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	e00c      	b.n	8004cce <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e009      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004cba:	7dbb      	ldrb	r3, [r7, #22]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <FindPage+0x204>
      {
        return followingpage;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e004      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	e001      	b.n	8004cce <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200003a6 	.word	0x200003a6
 8004cdc:	1fff75e0 	.word	0x1fff75e0
 8004ce0:	001ffc00 	.word	0x001ffc00
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cf8:	2305      	movs	r3, #5
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004d1e:	797b      	ldrb	r3, [r7, #5]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <PagesTransfer+0x40>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e000      	b.n	8004d2a <PagesTransfer+0x42>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fec8 	bl	8004ac0 <FindPage>
 8004d30:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d101      	bne.n	8004d3e <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	e1ed      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004d4a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004d4e:	2220      	movs	r2, #32
 8004d50:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d52:	797b      	ldrb	r3, [r7, #5]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6a38      	ldr	r0, [r7, #32]
 8004d5c:	f000 fa70 	bl	8005240 <SetPageState>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d66:	2302      	movs	r3, #2
 8004d68:	e1d7      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	029a      	lsls	r2, r3, #10
 8004d70:	4b9b      	ldr	r3, [pc, #620]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	0b1b      	lsrs	r3, r3, #12
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	3303      	adds	r3, #3
 8004d8a:	f003 0103 	and.w	r1, r3, #3
 8004d8e:	4b93      	ldr	r3, [pc, #588]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	029a      	lsls	r2, r3, #10
 8004d94:	4b92      	ldr	r3, [pc, #584]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d9c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004da0:	fb00 f303 	mul.w	r3, r0, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	0b1b      	lsrs	r3, r3, #12
 8004da8:	440b      	add	r3, r1
 8004daa:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004db2:	031a      	lsls	r2, r3, #12
 8004db4:	4b89      	ldr	r3, [pc, #548]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	0299      	lsls	r1, r3, #10
 8004dba:	4b89      	ldr	r3, [pc, #548]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004dc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004dc6:	4b85      	ldr	r3, [pc, #532]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	0298      	lsls	r0, r3, #10
 8004dcc:	4b84      	ldr	r3, [pc, #528]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dce:	4003      	ands	r3, r0
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f000 faf3 	bl	80053c4 <GetPageState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d004      	beq.n	8004df6 <PagesTransfer+0x10e>
 8004dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	f040 809e 	bne.w	8004f32 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d108      	bne.n	8004e10 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dfe:	2104      	movs	r1, #4
 8004e00:	6a38      	ldr	r0, [r7, #32]
 8004e02:	f000 fa1d 	bl	8005240 <SetPageState>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e184      	b.n	800511a <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004e10:	4b72      	ldr	r3, [pc, #456]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	029a      	lsls	r2, r3, #10
 8004e16:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	0b1b      	lsrs	r3, r3, #12
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	3303      	adds	r3, #3
 8004e30:	f003 0103 	and.w	r1, r3, #3
 8004e34:	4b69      	ldr	r3, [pc, #420]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	029a      	lsls	r2, r3, #10
 8004e3a:	4b69      	ldr	r3, [pc, #420]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e42:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e46:	fb00 f303 	mul.w	r3, r0, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	0b1b      	lsrs	r3, r3, #12
 8004e4e:	440b      	add	r3, r1
 8004e50:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e58:	031a      	lsls	r2, r3, #12
 8004e5a:	4b60      	ldr	r3, [pc, #384]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	0299      	lsls	r1, r3, #10
 8004e60:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e62:	400b      	ands	r3, r1
 8004e64:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004e68:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	0298      	lsls	r0, r3, #10
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e74:	4003      	ands	r3, r0
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 faa0 	bl	80053c4 <GetPageState>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e8a:	e049      	b.n	8004f20 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d108      	bne.n	8004ea6 <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e94:	2104      	movs	r1, #4
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	f000 f9d2 	bl	8005240 <SetPageState>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e139      	b.n	800511a <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	0b1b      	lsrs	r3, r3, #12
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	f003 0103 	and.w	r1, r3, #3
 8004eca:	4b44      	ldr	r3, [pc, #272]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	029a      	lsls	r2, r3, #10
 8004ed0:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ed8:	fbb2 f0f3 	udiv	r0, r2, r3
 8004edc:	fb00 f303 	mul.w	r3, r0, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	0b1b      	lsrs	r3, r3, #12
 8004ee4:	440b      	add	r3, r1
 8004ee6:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004eee:	031a      	lsls	r2, r3, #12
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	0299      	lsls	r1, r3, #10
 8004ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ef8:	400b      	ands	r3, r1
 8004efa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004efe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f02:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	0298      	lsls	r0, r3, #10
 8004f08:	4b35      	ldr	r3, [pc, #212]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f000 fa55 	bl	80053c4 <GetPageState>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d0b1      	beq.n	8004e8c <PagesTransfer+0x1a4>
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d0ad      	beq.n	8004e8c <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004f30:	e008      	b.n	8004f44 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004f32:	797b      	ldrb	r3, [r7, #5]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d103      	bne.n	8004f40 <PagesTransfer+0x258>
 8004f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d001      	beq.n	8004f44 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f40:	230a      	movs	r3, #10
 8004f42:	e0ea      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f44:	797b      	ldrb	r3, [r7, #5]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	f040 809b 	bne.w	8005082 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e031      	b.n	8004fb6 <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f52:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004f5a:	031a      	lsls	r2, r3, #12
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	0299      	lsls	r1, r3, #10
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f64:	400b      	ands	r3, r1
 8004f66:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f6a:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	0298      	lsls	r0, r3, #10
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f76:	4003      	ands	r3, r0
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	441a      	add	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	bf08      	it	eq
 8004f94:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f98:	d012      	beq.n	8004fc0 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004fa4:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fae:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbc:	d3c9      	bcc.n	8004f52 <PagesTransfer+0x26a>
 8004fbe:	e000      	b.n	8004fc2 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004fc0:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e054      	b.n	8005078 <PagesTransfer+0x390>
 8004fce:	bf00      	nop
 8004fd0:	200003a4 	.word	0x200003a4
 8004fd4:	200003a6 	.word	0x200003a6
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	1fff75e0 	.word	0x1fff75e0
 8004fe0:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8005124 <PagesTransfer+0x43c>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	029a      	lsls	r2, r3, #10
 8004fea:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <PagesTransfer+0x440>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ff2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	0b1b      	lsrs	r3, r3, #12
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	3303      	adds	r3, #3
 8005004:	f003 0103 	and.w	r1, r3, #3
 8005008:	4b46      	ldr	r3, [pc, #280]	@ (8005124 <PagesTransfer+0x43c>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	029a      	lsls	r2, r3, #10
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <PagesTransfer+0x440>)
 8005010:	4013      	ands	r3, r2
 8005012:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005016:	fbb2 f0f3 	udiv	r0, r2, r3
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	0b1b      	lsrs	r3, r3, #12
 8005022:	440b      	add	r3, r1
 8005024:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800502c:	031a      	lsls	r2, r3, #12
 800502e:	4b3d      	ldr	r3, [pc, #244]	@ (8005124 <PagesTransfer+0x43c>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	0299      	lsls	r1, r3, #10
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <PagesTransfer+0x440>)
 8005036:	400b      	ands	r3, r1
 8005038:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800503c:	fbb1 f1f3 	udiv	r1, r1, r3
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <PagesTransfer+0x43c>)
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	0298      	lsls	r0, r3, #10
 8005046:	4b38      	ldr	r3, [pc, #224]	@ (8005128 <PagesTransfer+0x440>)
 8005048:	4003      	ands	r3, r0
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9b7 	bl	80053c4 <GetPageState>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005060:	2b03      	cmp	r3, #3
 8005062:	d10d      	bne.n	8005080 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005064:	4b31      	ldr	r3, [pc, #196]	@ (800512c <PagesTransfer+0x444>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b2f      	ldr	r3, [pc, #188]	@ (800512c <PagesTransfer+0x444>)
 8005070:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d9b2      	bls.n	8004fe4 <PagesTransfer+0x2fc>
 800507e:	e000      	b.n	8005082 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8005080:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f854 	bl	8005134 <VerifyPagesFullWriteVariable>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8005092:	2302      	movs	r3, #2
 8005094:	e041      	b.n	800511a <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8005096:	4b25      	ldr	r3, [pc, #148]	@ (800512c <PagesTransfer+0x444>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d903      	bls.n	80050a6 <PagesTransfer+0x3be>
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <PagesTransfer+0x444>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	3b02      	subs	r3, #2
 80050a4:	e000      	b.n	80050a8 <PagesTransfer+0x3c0>
 80050a6:	2301      	movs	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e026      	b.n	80050fa <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d01f      	beq.n	80050f4 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fbe6 	bl	8004890 <ReadVariable>
 80050c4:	4603      	mov	r3, r0
 80050c6:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f82c 	bl	8005134 <VerifyPagesFullWriteVariable>
 80050dc:	4603      	mov	r3, r0
 80050de:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          return status;
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	e017      	b.n	800511a <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d001      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	e012      	b.n	800511a <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b32      	cmp	r3, #50	@ 0x32
 80050fe:	d9d5      	bls.n	80050ac <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <PagesTransfer+0x448>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f89a 	bl	8005240 <SetPageState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8005112:	2302      	movs	r3, #2
 8005114:	e001      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8005116:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	@ 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	1fff75e0 	.word	0x1fff75e0
 8005128:	001ffc00 	.word	0x001ffc00
 800512c:	200003a4 	.word	0x200003a4
 8005130:	200003a6 	.word	0x200003a6

08005134 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8005134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005138:	b08b      	sub	sp, #44	@ 0x2c
 800513a:	af00      	add	r7, sp, #0
 800513c:	4603      	mov	r3, r0
 800513e:	6139      	str	r1, [r7, #16]
 8005140:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8005146:	4b3a      	ldr	r3, [pc, #232]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 800514e:	d301      	bcc.n	8005154 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8005150:	2312      	movs	r3, #18
 8005152:	e068      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005154:	2001      	movs	r0, #1
 8005156:	f7ff fcb3 	bl	8004ac0 <FindPage>
 800515a:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d101      	bne.n	800516c <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8005168:	2303      	movs	r3, #3
 800516a:	e05c      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005172:	0319      	lsls	r1, r3, #12
 8005174:	4b2f      	ldr	r3, [pc, #188]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	029a      	lsls	r2, r3, #10
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800517c:	4013      	ands	r3, r2
 800517e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005182:	fbb2 f2f3 	udiv	r2, r2, r3
 8005186:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	0298      	lsls	r0, r3, #10
 800518c:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800518e:	4003      	ands	r3, r0
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	440b      	add	r3, r1
 8005196:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a8:	e006      	b.n	80051b8 <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	4619      	mov	r1, r3
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f000 f97e 	bl	80054b0 <CalculateCrc>
 80051b4:	4603      	mov	r3, r0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	18d0      	adds	r0, r2, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	000b      	movs	r3, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d8:	0409      	lsls	r1, r1, #16
 80051da:	2600      	movs	r6, #0
 80051dc:	468a      	mov	sl, r1
 80051de:	46b3      	mov	fp, r6
 80051e0:	ea42 040a 	orr.w	r4, r2, sl
 80051e4:	ea43 050b 	orr.w	r5, r3, fp
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	2200      	movs	r2, #0
 80051ec:	4698      	mov	r8, r3
 80051ee:	4691      	mov	r9, r2
 80051f0:	ea44 0308 	orr.w	r3, r4, r8
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	ea45 0309 	orr.w	r3, r5, r9
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	f000 f972 	bl	80054e8 <FI_WriteDoubleWord>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 800520a:	2302      	movs	r3, #2
 800520c:	e00b      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	4a09      	ldr	r2, [pc, #36]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005216:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005222:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	372c      	adds	r7, #44	@ 0x2c
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	200003a4 	.word	0x200003a4
 8005234:	1fff75e0 	.word	0x1fff75e0
 8005238:	001ffc00 	.word	0x001ffc00
 800523c:	20000008 	.word	0x20000008

08005240 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005262:	031a      	lsls	r2, r3, #12
 8005264:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <SetPageState+0x178>)
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	0299      	lsls	r1, r3, #10
 800526a:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <SetPageState+0x17c>)
 800526c:	400b      	ands	r3, r1
 800526e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005272:	fbb1 f1f3 	udiv	r1, r1, r3
 8005276:	4b50      	ldr	r3, [pc, #320]	@ (80053b8 <SetPageState+0x178>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	0298      	lsls	r0, r3, #10
 800527c:	4b4f      	ldr	r3, [pc, #316]	@ (80053bc <SetPageState+0x17c>)
 800527e:	4003      	ands	r3, r0
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800528e:	031a      	lsls	r2, r3, #12
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <SetPageState+0x178>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	0299      	lsls	r1, r3, #10
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <SetPageState+0x17c>)
 8005298:	400b      	ands	r3, r1
 800529a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800529e:	fbb1 f1f3 	udiv	r1, r1, r3
 80052a2:	4b45      	ldr	r3, [pc, #276]	@ (80053b8 <SetPageState+0x178>)
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	0298      	lsls	r0, r3, #10
 80052a8:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <SetPageState+0x17c>)
 80052aa:	4003      	ands	r3, r0
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	3308      	adds	r3, #8
 80052b4:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052bc:	031a      	lsls	r2, r3, #12
 80052be:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <SetPageState+0x178>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	0299      	lsls	r1, r3, #10
 80052c4:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <SetPageState+0x17c>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052cc:	fbb1 f1f3 	udiv	r1, r1, r3
 80052d0:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <SetPageState+0x178>)
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	0298      	lsls	r0, r3, #10
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <SetPageState+0x17c>)
 80052d8:	4003      	ands	r3, r0
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3310      	adds	r3, #16
 80052e2:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052ea:	031a      	lsls	r2, r3, #12
 80052ec:	4b32      	ldr	r3, [pc, #200]	@ (80053b8 <SetPageState+0x178>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	0299      	lsls	r1, r3, #10
 80052f2:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <SetPageState+0x17c>)
 80052f4:	400b      	ands	r3, r1
 80052f6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052fa:	fbb1 f1f3 	udiv	r1, r1, r3
 80052fe:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <SetPageState+0x178>)
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	0298      	lsls	r0, r3, #10
 8005304:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <SetPageState+0x17c>)
 8005306:	4003      	ands	r3, r0
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3318      	adds	r3, #24
 8005310:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	3b01      	subs	r3, #1
 8005316:	2b03      	cmp	r3, #3
 8005318:	d844      	bhi.n	80053a4 <SetPageState+0x164>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <SetPageState+0xe0>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005353 	.word	0x08005353
 8005328:	08005375 	.word	0x08005375
 800532c:	0800538d 	.word	0x0800538d
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005330:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005334:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f000 f8d5 	bl	80054e8 <FI_WriteDoubleWord>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005344:	2302      	movs	r3, #2
 8005346:	e033      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <SetPageState+0x180>)
 800534e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005350:	e02d      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005352:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005356:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800535a:	6938      	ldr	r0, [r7, #16]
 800535c:	f000 f8c4 	bl	80054e8 <FI_WriteDoubleWord>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 8005366:	2302      	movs	r3, #2
 8005368:	e022      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <SetPageState+0x180>)
 8005370:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005372:	e01c      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005374:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005378:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8b3 	bl	80054e8 <FI_WriteDoubleWord>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 8005388:	2302      	movs	r3, #2
 800538a:	e011      	b.n	80053b0 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800538c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005390:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f000 f8a7 	bl	80054e8 <FI_WriteDoubleWord>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e005      	b.n	80053b0 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053ac:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	1fff75e0 	.word	0x1fff75e0
 80053bc:	001ffc00 	.word	0x001ffc00
 80053c0:	200003a6 	.word	0x200003a6

080053c4 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b08b      	sub	sp, #44	@ 0x2c
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3308      	adds	r3, #8
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3310      	adds	r3, #16
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3318      	adds	r3, #24
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	bf08      	it	eq
 8005434:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005438:	d001      	beq.n	800543e <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800543a:	2304      	movs	r3, #4
 800543c:	e01e      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800543e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	bf08      	it	eq
 8005448:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800544c:	d001      	beq.n	8005452 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800544e:	2303      	movs	r3, #3
 8005450:	e014      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	bf08      	it	eq
 800545c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005460:	d001      	beq.n	8005466 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005462:	2302      	movs	r3, #2
 8005464:	e00a      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 8005466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	bf08      	it	eq
 8005470:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005474:	d001      	beq.n	800547a <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	372c      	adds	r7, #44	@ 0x2c
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800548c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005490:	f7fe fa9a 	bl	80039c8 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005494:	f248 0105 	movw	r1, #32773	@ 0x8005
 8005498:	4804      	ldr	r0, [pc, #16]	@ (80054ac <ConfigureCrc+0x24>)
 800549a:	f7fe fad1 	bl	8003a40 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800549e:	2108      	movs	r1, #8
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <ConfigureCrc+0x24>)
 80054a2:	f7fe faba 	bl	8003a1a <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023000 	.word	0x40023000

080054b0 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80054bc:	4809      	ldr	r0, [pc, #36]	@ (80054e4 <CalculateCrc+0x34>)
 80054be:	f7fe fa9c 	bl	80039fa <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4807      	ldr	r0, [pc, #28]	@ (80054e4 <CalculateCrc+0x34>)
 80054c6:	f7fe fac9 	bl	8003a5c <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4805      	ldr	r0, [pc, #20]	@ (80054e4 <CalculateCrc+0x34>)
 80054d0:	f7fe fad2 	bl	8003a78 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80054d4:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <CalculateCrc+0x34>)
 80054d6:	f7fe fae0 	bl	8003a9a <LL_CRC_ReadData16>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023000 	.word	0x40023000

080054e8 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	2001      	movs	r0, #1
 80054fc:	f008 fefe 	bl	800e2fc <HAL_FLASH_Program>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800551e:	2302      	movs	r3, #2
 8005520:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005522:	887b      	ldrh	r3, [r7, #2]
 8005524:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800552a:	f107 020c 	add.w	r2, r7, #12
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f008 fff5 	bl	800e524 <HAL_FLASHEx_Erase>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005544:	8bfb      	ldrh	r3, [r7, #30]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800555e:	2302      	movs	r3, #2
 8005560:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f009 f828 	bl	800e5c4 <HAL_FLASHEx_Erase_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 800557e:	8afb      	ldrh	r3, [r7, #22]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800558c:	4b0e      	ldr	r3, [pc, #56]	@ (80055c8 <FI_CacheFlush+0x40>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0d      	ldr	r2, [pc, #52]	@ (80055c8 <FI_CacheFlush+0x40>)
 8005592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005596:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ae:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	58004000 	.word	0x58004000

080055cc <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80055d0:	2300      	movs	r3, #0
#endif
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ec:	f023 0218 	bic.w	r2, r3, #24
 80055f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005644:	f000 f834 	bl	80056b0 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <serialOut+0x58>)
 800564c:	4912      	ldr	r1, [pc, #72]	@ (8005698 <serialOut+0x5c>)
 800564e:	4813      	ldr	r0, [pc, #76]	@ (800569c <serialOut+0x60>)
 8005650:	f00f f958 	bl	8014904 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005654:	4811      	ldr	r0, [pc, #68]	@ (800569c <serialOut+0x60>)
 8005656:	f7fa fdf3 	bl	8000240 <strlen>
 800565a:	4603      	mov	r3, r0
 800565c:	b29a      	uxth	r2, r3
 800565e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005662:	490e      	ldr	r1, [pc, #56]	@ (800569c <serialOut+0x60>)
 8005664:	480e      	ldr	r0, [pc, #56]	@ (80056a0 <serialOut+0x64>)
 8005666:	f00d fa45 	bl	8012af4 <HAL_UART_Transmit>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <serialOut+0x68>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <serialOut+0x4e>
 800567c:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <serialOut+0x6c>)
 800567e:	480b      	ldr	r0, [pc, #44]	@ (80056ac <serialOut+0x70>)
 8005680:	f00f f940 	bl	8014904 <siprintf>
 8005684:	4809      	ldr	r0, [pc, #36]	@ (80056ac <serialOut+0x70>)
 8005686:	f7ff ffd9 	bl	800563c <serialOut>
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000a54 	.word	0x20000a54
 8005698:	08018450 	.word	0x08018450
 800569c:	20000a60 	.word	0x20000a60
 80056a0:	20000444 	.word	0x20000444
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	08018458 	.word	0x08018458
 80056ac:	20000b5c 	.word	0x20000b5c

080056b0 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	@ 0x28
 80056b4:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	2201      	movs	r2, #1
 80056d0:	4619      	mov	r1, r3
 80056d2:	480e      	ldr	r0, [pc, #56]	@ (800570c <getTimeBCD+0x5c>)
 80056d4:	f00b fa94 	bl	8010c00 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2201      	movs	r2, #1
 80056dc:	4619      	mov	r1, r3
 80056de:	480b      	ldr	r0, [pc, #44]	@ (800570c <getTimeBCD+0x5c>)
 80056e0:	f00b fb98 	bl	8010e14 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056e4:	7abb      	ldrb	r3, [r7, #10]
 80056e6:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056e8:	7a7b      	ldrb	r3, [r7, #9]
 80056ea:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056ec:	7a3b      	ldrb	r3, [r7, #8]
 80056ee:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056f0:	7f7a      	ldrb	r2, [r7, #29]
 80056f2:	7fb9      	ldrb	r1, [r7, #30]
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	460b      	mov	r3, r1
 80056fa:	4905      	ldr	r1, [pc, #20]	@ (8005710 <getTimeBCD+0x60>)
 80056fc:	4805      	ldr	r0, [pc, #20]	@ (8005714 <getTimeBCD+0x64>)
 80056fe:	f00f f901 	bl	8014904 <siprintf>
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200004e4 	.word	0x200004e4
 8005710:	0801847c 	.word	0x0801847c
 8005714:	20000a54 	.word	0x20000a54

08005718 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b092      	sub	sp, #72	@ 0x48
 800571c:	af00      	add	r7, sp, #0
 800571e:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005722:	463b      	mov	r3, r7
 8005724:	4618      	mov	r0, r3
 8005726:	f00f f95d 	bl	80149e4 <localtime>
 800572a:	4603      	mov	r3, r0
 800572c:	f107 040c 	add.w	r4, r7, #12
 8005730:	461d      	mov	r5, r3
 8005732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005756:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800575a:	2200      	movs	r2, #0
 800575c:	4619      	mov	r1, r3
 800575e:	4826      	ldr	r0, [pc, #152]	@ (80057f8 <writeRTC+0xe0>)
 8005760:	f00b f98a 	bl	8010a78 <HAL_RTC_SetTime>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <writeRTC+0xe4>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <writeRTC+0x6c>
 8005776:	4922      	ldr	r1, [pc, #136]	@ (8005800 <writeRTC+0xe8>)
 8005778:	4822      	ldr	r0, [pc, #136]	@ (8005804 <writeRTC+0xec>)
 800577a:	f00f f8c3 	bl	8014904 <siprintf>
 800577e:	4821      	ldr	r0, [pc, #132]	@ (8005804 <writeRTC+0xec>)
 8005780:	f7ff ff5c 	bl	800563c <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <writeRTC+0x76>
 800578a:	2307      	movs	r3, #7
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	3301      	adds	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3b64      	subs	r3, #100	@ 0x64
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80057b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	480e      	ldr	r0, [pc, #56]	@ (80057f8 <writeRTC+0xe0>)
 80057c0:	f00b fa7a 	bl	8010cb8 <HAL_RTC_SetDate>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80057ca:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <writeRTC+0xe4>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <writeRTC+0xcc>
 80057d6:	490c      	ldr	r1, [pc, #48]	@ (8005808 <writeRTC+0xf0>)
 80057d8:	480a      	ldr	r0, [pc, #40]	@ (8005804 <writeRTC+0xec>)
 80057da:	f00f f893 	bl	8014904 <siprintf>
 80057de:	4809      	ldr	r0, [pc, #36]	@ (8005804 <writeRTC+0xec>)
 80057e0:	f7ff ff2c 	bl	800563c <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057e4:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80057e8:	2100      	movs	r1, #0
 80057ea:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <writeRTC+0xe0>)
 80057ec:	f00b fbeb 	bl	8010fc6 <HAL_RTCEx_BKUPWrite>

}
 80057f0:	bf00      	nop
 80057f2:	3748      	adds	r7, #72	@ 0x48
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bdb0      	pop	{r4, r5, r7, pc}
 80057f8:	200004e4 	.word	0x200004e4
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	0801848c 	.word	0x0801848c
 8005804:	20000b5c 	.word	0x20000b5c
 8005808:	080184b4 	.word	0x080184b4

0800580c <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b094      	sub	sp, #80	@ 0x50
 8005810:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 800581e:	463b      	mov	r3, r7
 8005820:	2224      	movs	r2, #36	@ 0x24
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f00f f8d4 	bl	80149d2 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800582a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	4619      	mov	r1, r3
 8005832:	4822      	ldr	r0, [pc, #136]	@ (80058bc <readRTC+0xb0>)
 8005834:	f00b f9e4 	bl	8010c00 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8005838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	4619      	mov	r1, r3
 8005840:	481e      	ldr	r0, [pc, #120]	@ (80058bc <readRTC+0xb0>)
 8005842:	f00b fae7 	bl	8010e14 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 8005846:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800584a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 800584e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005852:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 8005856:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800585a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 800585e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005862:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 8005866:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 800586e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005872:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 8005876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800587a:	3364      	adds	r3, #100	@ 0x64
 800587c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 800587e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005880:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 8005882:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005886:	3b01      	subs	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 800588a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800588e:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8005890:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005894:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 8005896:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800589a:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 800589c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80058a0:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80058a2:	463b      	mov	r3, r7
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00f fa7f 	bl	8014da8 <mktime>
 80058aa:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 80058ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	3750      	adds	r7, #80	@ 0x50
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200004e4 	.word	0x200004e4

080058c0 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ca:	2301      	movs	r3, #1
 80058cc:	80fb      	strh	r3, [r7, #6]
 80058ce:	e010      	b.n	80058f2 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005904 <LoadAllEEPROM+0x44>)
 80058d6:	441a      	add	r2, r3
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fe73 	bl	80045c8 <EE_ReadVariable32bits>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	88bb      	ldrh	r3, [r7, #4]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	3301      	adds	r3, #1
 80058f0:	80fb      	strh	r3, [r7, #6]
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2b32      	cmp	r3, #50	@ 0x32
 80058f6:	d9eb      	bls.n	80058d0 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058f8:	88bb      	ldrh	r3, [r7, #4]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000984 	.word	0x20000984

08005908 <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005918:	f008 fd34 	bl	800e384 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800591c:	4b1c      	ldr	r3, [pc, #112]	@ (8005990 <StoreEEPROM+0x88>)
 800591e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005922:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005924:	bf00      	nop
 8005926:	4b1a      	ldr	r3, [pc, #104]	@ (8005990 <StoreEEPROM+0x88>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800592e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005932:	d0f8      	beq.n	8005926 <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005934:	bf00      	nop
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <StoreEEPROM+0x8c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d0fb      	beq.n	8005936 <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fe64 	bl	8004612 <EE_WriteVariable32bits>
 800594a:	4603      	mov	r3, r0
 800594c:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 800594e:	463a      	mov	r2, r7
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fe37 	bl	80045c8 <EE_ReadVariable32bits>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	4313      	orrs	r3, r2
 8005962:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <StoreEEPROM+0x7a>
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <StoreEEPROM+0x8c>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f7fe fefa 	bl	800476c <EE_CleanUp_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4313      	orrs	r3, r2
 8005980:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005982:	f008 fd21 	bl	800e3c8 <HAL_FLASH_Lock>

  return eeStatus;
 8005986:	89fb      	ldrh	r3, [r7, #14]

    */



}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	58004000 	.word	0x58004000
 8005994:	20000980 	.word	0x20000980

08005998 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d82f      	bhi.n	8005a08 <switchLedOn+0x70>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <switchLedOn+0x18>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059f7 	.word	0x080059f7
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <switchLedOn+0x7c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <switchLedOn+0x80>)
 80059c6:	8811      	ldrh	r1, [r2, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	4618      	mov	r0, r3
 80059cc:	f009 f838 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 80059d0:	e01b      	b.n	8005a0a <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <switchLedOn+0x84>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <switchLedOn+0x88>)
 80059d8:	8811      	ldrh	r1, [r2, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f009 f82f 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 80059e2:	e012      	b.n	8005a0a <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <switchLedOn+0x8c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <switchLedOn+0x90>)
 80059ea:	8811      	ldrh	r1, [r2, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f009 f826 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 80059f4:	e009      	b.n	8005a0a <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <switchLedOn+0x94>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <switchLedOn+0x98>)
 80059fc:	8811      	ldrh	r1, [r2, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f009 f81d 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 8005a06:	e000      	b.n	8005a0a <switchLedOn+0x72>
      default: break;
 8005a08:	bf00      	nop
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000ce8 	.word	0x20000ce8
 8005a18:	20000ce6 	.word	0x20000ce6
 8005a1c:	20000cf0 	.word	0x20000cf0
 8005a20:	20000cec 	.word	0x20000cec
 8005a24:	20000cf8 	.word	0x20000cf8
 8005a28:	20000cf4 	.word	0x20000cf4
 8005a2c:	20000d00 	.word	0x20000d00
 8005a30:	20000cfc 	.word	0x20000cfc

08005a34 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d82f      	bhi.n	8005aa4 <switchLedOff+0x70>
 8005a44:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <switchLedOff+0x18>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6f 	.word	0x08005a6f
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a93 	.word	0x08005a93
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a5c:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <switchLedOff+0x7c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a14      	ldr	r2, [pc, #80]	@ (8005ab4 <switchLedOff+0x80>)
 8005a62:	8811      	ldrh	r1, [r2, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f008 ffea 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 8005a6c:	e01b      	b.n	8005aa6 <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <switchLedOff+0x84>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a12      	ldr	r2, [pc, #72]	@ (8005abc <switchLedOff+0x88>)
 8005a74:	8811      	ldrh	r1, [r2, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f008 ffe1 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 8005a7e:	e012      	b.n	8005aa6 <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <switchLedOff+0x8c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac4 <switchLedOff+0x90>)
 8005a86:	8811      	ldrh	r1, [r2, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f008 ffd8 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 8005a90:	e009      	b.n	8005aa6 <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <switchLedOff+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0d      	ldr	r2, [pc, #52]	@ (8005acc <switchLedOff+0x98>)
 8005a98:	8811      	ldrh	r1, [r2, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f008 ffcf 	bl	800ea40 <HAL_GPIO_WritePin>
          break;
 8005aa2:	e000      	b.n	8005aa6 <switchLedOff+0x72>
      default: break;
 8005aa4:	bf00      	nop
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000ce8 	.word	0x20000ce8
 8005ab4:	20000ce6 	.word	0x20000ce6
 8005ab8:	20000cf0 	.word	0x20000cf0
 8005abc:	20000cec 	.word	0x20000cec
 8005ac0:	20000cf8 	.word	0x20000cf8
 8005ac4:	20000cf4 	.word	0x20000cf4
 8005ac8:	20000d00 	.word	0x20000d00
 8005acc:	20000cfc 	.word	0x20000cfc

08005ad0 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005ada:	4b39      	ldr	r3, [pc, #228]	@ (8005bc0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d068      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d103      	bne.n	8005af6 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005aee:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005af4:	e05f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005af6:	4b35      	ldr	r3, [pc, #212]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d11c      	bne.n	8005b3a <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005b00:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_GPIO_EXTI_Callback+0x100>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a31      	ldr	r2, [pc, #196]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f008 ff80 	bl	800ea10 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b20:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005b22:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_EXTI_Callback+0x62>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7ff ff34 	bl	8005998 <switchLedOn>
}
 8005b30:	e041      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7ff ff7e 	bl	8005a34 <switchLedOff>
}
 8005b38:	e03d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005b3a:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <HAL_GPIO_EXTI_Callback+0x108>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d038      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d103      	bne.n	8005b56 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b4e:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <HAL_GPIO_EXTI_Callback+0x110>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
}
 8005b54:	e02f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b56:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11c      	bne.n	8005b9a <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b60:	4b21      	ldr	r3, [pc, #132]	@ (8005be8 <HAL_GPIO_EXTI_Callback+0x118>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f008 ff50 	bl	800ea10 <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b80:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b82:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_EXTI_Callback+0xc2>
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7ff ff04 	bl	8005998 <switchLedOn>
}
 8005b90:	e011      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7ff ff4e 	bl	8005a34 <switchLedOff>
}
 8005b98:	e00d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d008      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_GPIO_EXTI_Callback+0x124>)
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	429a      	cmp	r2, r3
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000c56 	.word	0x20000c56
 8005bc4:	20000c5e 	.word	0x20000c5e
 8005bc8:	20000d1f 	.word	0x20000d1f
 8005bcc:	20000c66 	.word	0x20000c66
 8005bd0:	20000c68 	.word	0x20000c68
 8005bd4:	20000d1e 	.word	0x20000d1e
 8005bd8:	20000c74 	.word	0x20000c74
 8005bdc:	20000c7e 	.word	0x20000c7e
 8005be0:	20000d1d 	.word	0x20000d1d
 8005be4:	20000c86 	.word	0x20000c86
 8005be8:	20000c88 	.word	0x20000c88
 8005bec:	20000d1c 	.word	0x20000d1c
 8005bf0:	20000cc4 	.word	0x20000cc4
 8005bf4:	20000cce 	.word	0x20000cce
 8005bf8:	20000cd6 	.word	0x20000cd6

08005bfc <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d140      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005c10:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c18:	6013      	str	r3, [r2, #0]
    decSec++;
 8005c1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c24:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005c26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d117      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005c34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f008 ff12 	bl	800ea70 <HAL_GPIO_TogglePin>
 8005c4c:	e007      	b.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c54:	8812      	ldrh	r2, [r2, #0]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f008 ff09 	bl	800ea70 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	0899      	lsrs	r1, r3, #2
 8005c7e:	460b      	mov	r3, r1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200005d0 	.word	0x200005d0
 8005ca0:	20000d20 	.word	0x20000d20
 8005ca4:	20000d24 	.word	0x20000d24
 8005ca8:	20000a50 	.word	0x20000a50
 8005cac:	20000cf8 	.word	0x20000cf8
 8005cb0:	20000cf4 	.word	0x20000cf4
 8005cb4:	20000d00 	.word	0x20000d00
 8005cb8:	20000cfc 	.word	0x20000cfc
 8005cbc:	20000d25 	.word	0x20000d25
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	20000d26 	.word	0x20000d26

08005cc8 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005cd2:	f008 fb57 	bl	800e384 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005cd6:	492f      	ldr	r1, [pc, #188]	@ (8005d94 <eepromDefaults+0xcc>)
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fe fc9a 	bl	8004612 <EE_WriteVariable32bits>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <eepromDefaults+0x3e>
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <eepromDefaults+0xd0>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f7fe fd38 	bl	800476c <EE_CleanUp_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d06:	bf00      	nop
 8005d08:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1fb      	bne.n	8005d08 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005d10:	4922      	ldr	r1, [pc, #136]	@ (8005d9c <eepromDefaults+0xd4>)
 8005d12:	2002      	movs	r0, #2
 8005d14:	f7fe fc7d 	bl	8004612 <EE_WriteVariable32bits>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <eepromDefaults+0x78>
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f7fe fd1b 	bl	800476c <EE_CleanUp_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d40:	bf00      	nop
 8005d42:	4b15      	ldr	r3, [pc, #84]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1fb      	bne.n	8005d42 <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	f7fe fc60 	bl	8004612 <EE_WriteVariable32bits>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <eepromDefaults+0xb2>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f7fe fcfe 	bl	800476c <EE_CleanUp_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d7a:	bf00      	nop
 8005d7c:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1fb      	bne.n	8005d7c <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d84:	f008 fb20 	bl	800e3c8 <HAL_FLASH_Lock>

  return eeStatus;
 8005d88:	88fb      	ldrh	r3, [r7, #6]

}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	50616c61 	.word	0x50616c61
 8005d98:	20000980 	.word	0x20000980
 8005d9c:	746f7621 	.word	0x746f7621

08005da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005daa:	f008 f82f 	bl	800de0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dae:	f000 f8bb 	bl	8005f28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005db2:	f000 f925 	bl	8006000 <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005db6:	f000 fb67 	bl	8006488 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005dba:	f000 fa13 	bl	80061e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005dbe:	f000 fa4f 	bl	8006260 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005dc2:	f000 f987 	bl	80060d4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005dc6:	f000 fb37 	bl	8006438 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005dca:	f000 f9cf 	bl	800616c <MX_PKA_Init>
  MX_RTC_Init();
 8005dce:	f000 f9e1 	bl	8006194 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005dd2:	f000 f933 	bl	800603c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005dd6:	f000 fa81 	bl	80062dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2004      	movs	r0, #4
 8005de0:	f008 f999 	bl	800e116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005de4:	2004      	movs	r0, #4
 8005de6:	f008 f9b0 	bl	800e14a <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005dea:	f008 facb 	bl	800e384 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005dee:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <main+0x164>)
 8005df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005df4:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005df6:	bf00      	nop
 8005df8:	4b42      	ldr	r3, [pc, #264]	@ (8005f04 <main+0x164>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e04:	d0f8      	beq.n	8005df8 <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005e06:	4b40      	ldr	r3, [pc, #256]	@ (8005f08 <main+0x168>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005e14:	2000      	movs	r0, #0
 8005e16:	f7fd fe4d 	bl	8003ab4 <EE_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <main+0xb8>
 8005e24:	f000 ffbe 	bl	8006da4 <Error_Handler>
 8005e28:	e016      	b.n	8005e58 <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005e2a:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <main+0x168>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005e32:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <main+0x168>)
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e3e:	4b32      	ldr	r3, [pc, #200]	@ (8005f08 <main+0x168>)
 8005e40:	2204      	movs	r2, #4
 8005e42:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7fd fe35 	bl	8003ab4 <EE_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <main+0xb8>
 8005e54:	f000 ffa6 	bl	8006da4 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e58:	f7ff fd32 	bl	80058c0 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <main+0x16c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	@ (8005f10 <main+0x170>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d104      	bne.n	8005e70 <main+0xd0>
 8005e66:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <main+0x16c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f14 <main+0x174>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d005      	beq.n	8005e7c <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e70:	f7ff ff2a 	bl	8005cc8 <eepromDefaults>
 8005e74:	4603      	mov	r3, r0
 8005e76:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e78:	f7ff fd22 	bl	80058c0 <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e7c:	f008 faa4 	bl	800e3c8 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7ff fd89 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e86:	20fa      	movs	r0, #250	@ 0xfa
 8005e88:	f008 f846 	bl	800df18 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7ff fdd1 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f7ff fd80 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e98:	20fa      	movs	r0, #250	@ 0xfa
 8005e9a:	f008 f83d 	bl	800df18 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f7ff fdc8 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f7ff fd77 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005eaa:	20fa      	movs	r0, #250	@ 0xfa
 8005eac:	f008 f834 	bl	800df18 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005eb0:	2002      	movs	r0, #2
 8005eb2:	f7ff fdbf 	bl	8005a34 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	f7ff fd6e 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005ebc:	20fa      	movs	r0, #250	@ 0xfa
 8005ebe:	f008 f82b 	bl	800df18 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005ec2:	2003      	movs	r0, #3
 8005ec4:	f7ff fdb6 	bl	8005a34 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005ec8:	4813      	ldr	r0, [pc, #76]	@ (8005f18 <main+0x178>)
 8005eca:	f00b fd13 	bl	80118f4 <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005ece:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <main+0x17c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <main+0x180>)
 8005ed4:	8811      	ldrh	r1, [r2, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f008 fdb1 	bl	800ea40 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fb f8a0 	bl	8001024 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb f89d 	bl	8001024 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <main+0x184>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7fb f896 	bl	8001024 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ef8:	f001 f880 	bl	8006ffc <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005efc:	f001 fa4a 	bl	8007394 <PCU_Tasks>
 8005f00:	e7fc      	b.n	8005efc <main+0x15c>
 8005f02:	bf00      	nop
 8005f04:	58004000 	.word	0x58004000
 8005f08:	58000400 	.word	0x58000400
 8005f0c:	20000984 	.word	0x20000984
 8005f10:	50616c61 	.word	0x50616c61
 8005f14:	746f7621 	.word	0x746f7621
 8005f18:	200005d0 	.word	0x200005d0
 8005f1c:	20000d10 	.word	0x20000d10
 8005f20:	20000d0c 	.word	0x20000d0c
 8005f24:	20000a50 	.word	0x20000a50

08005f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b09a      	sub	sp, #104	@ 0x68
 8005f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f2e:	f107 0320 	add.w	r3, r7, #32
 8005f32:	2248      	movs	r2, #72	@ 0x48
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f00e fd4b 	bl	80149d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	615a      	str	r2, [r3, #20]
 8005f4c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f4e:	f008 ff17 	bl	800ed80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f52:	2010      	movs	r0, #16
 8005f54:	f7ff fb42 	bl	80055dc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f58:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f74:	2307      	movs	r3, #7
 8005f76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f88:	2340      	movs	r3, #64	@ 0x40
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f90:	2303      	movs	r3, #3
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f94:	2310      	movs	r3, #16
 8005f96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005fa2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005fa6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f009 fa78 	bl	800f4a8 <HAL_RCC_OscConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005fbe:	f000 fef1 	bl	8006da4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005fc2:	236f      	movs	r3, #111	@ 0x6f
 8005fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	2103      	movs	r1, #3
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f009 fdd4 	bl	800fb90 <HAL_RCC_ClockConfig>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fee:	f000 fed9 	bl	8006da4 <Error_Handler>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3768      	adds	r7, #104	@ 0x68
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	58000400 	.word	0x58000400

08006000 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b094      	sub	sp, #80	@ 0x50
 8006004:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006006:	463b      	mov	r3, r7
 8006008:	2250      	movs	r2, #80	@ 0x50
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f00e fce0 	bl	80149d2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8006012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006016:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006018:	2302      	movs	r3, #2
 800601a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800601c:	2310      	movs	r3, #16
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006020:	463b      	mov	r3, r7
 8006022:	4618      	mov	r0, r3
 8006024:	f00a f9f1 	bl	801040a <HAL_RCCEx_PeriphCLKConfig>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800602e:	f000 feb9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006032:	bf00      	nop
 8006034:	3750      	adds	r7, #80	@ 0x50
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006040:	4b22      	ldr	r3, [pc, #136]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <MX_LPUART1_UART_Init+0x94>)
 8006044:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800604c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800604e:	4b1f      	ldr	r3, [pc, #124]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006054:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006056:	2200      	movs	r2, #0
 8006058:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800605a:	4b1c      	ldr	r3, [pc, #112]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006060:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006062:	220c      	movs	r2, #12
 8006064:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006066:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800606e:	2200      	movs	r2, #0
 8006070:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006074:	2200      	movs	r2, #0
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006078:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006080:	2200      	movs	r2, #0
 8006082:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006084:	4811      	ldr	r0, [pc, #68]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006086:	f00c fce5 	bl	8012a54 <HAL_UART_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006090:	f000 fe88 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006094:	2100      	movs	r1, #0
 8006096:	480d      	ldr	r0, [pc, #52]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006098:	f00d fdd7 	bl	8013c4a <HAL_UARTEx_SetTxFifoThreshold>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060a2:	f000 fe7f 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060a6:	2100      	movs	r1, #0
 80060a8:	4808      	ldr	r0, [pc, #32]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060aa:	f00d fe0c 	bl	8013cc6 <HAL_UARTEx_SetRxFifoThreshold>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80060b4:	f000 fe76 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80060b8:	4804      	ldr	r0, [pc, #16]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060ba:	f00d fd8d 	bl	8013bd8 <HAL_UARTEx_DisableFifoMode>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80060c4:	f000 fe6e 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200003b0 	.word	0x200003b0
 80060d0:	40008000 	.word	0x40008000

080060d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060d8:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060da:	4a23      	ldr	r2, [pc, #140]	@ (8006168 <MX_USART1_UART_Init+0x94>)
 80060dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060de:	4b21      	ldr	r3, [pc, #132]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060fa:	220c      	movs	r2, #12
 80060fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060fe:	4b19      	ldr	r3, [pc, #100]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006100:	2200      	movs	r2, #0
 8006102:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006104:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800610a:	4b16      	ldr	r3, [pc, #88]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800610c:	2200      	movs	r2, #0
 800610e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006110:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006112:	2200      	movs	r2, #0
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006118:	2200      	movs	r2, #0
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800611c:	4811      	ldr	r0, [pc, #68]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800611e:	f00c fc99 	bl	8012a54 <HAL_UART_Init>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006128:	f000 fe3c 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800612c:	2100      	movs	r1, #0
 800612e:	480d      	ldr	r0, [pc, #52]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006130:	f00d fd8b 	bl	8013c4a <HAL_UARTEx_SetTxFifoThreshold>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800613a:	f000 fe33 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800613e:	2100      	movs	r1, #0
 8006140:	4808      	ldr	r0, [pc, #32]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006142:	f00d fdc0 	bl	8013cc6 <HAL_UARTEx_SetRxFifoThreshold>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800614c:	f000 fe2a 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006150:	4804      	ldr	r0, [pc, #16]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006152:	f00d fd41 	bl	8013bd8 <HAL_UARTEx_DisableFifoMode>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800615c:	f000 fe22 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000444 	.word	0x20000444
 8006168:	40013800 	.word	0x40013800

0800616c <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8006170:	4b06      	ldr	r3, [pc, #24]	@ (800618c <MX_PKA_Init+0x20>)
 8006172:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <MX_PKA_Init+0x24>)
 8006174:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8006176:	4805      	ldr	r0, [pc, #20]	@ (800618c <MX_PKA_Init+0x20>)
 8006178:	f008 fdd3 	bl	800ed22 <HAL_PKA_Init>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8006182:	f000 fe0f 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200004d8 	.word	0x200004d8
 8006190:	58002000 	.word	0x58002000

08006194 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <MX_RTC_Init+0x48>)
 800619a:	4a11      	ldr	r2, [pc, #68]	@ (80061e0 <MX_RTC_Init+0x4c>)
 800619c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a6:	227f      	movs	r2, #127	@ 0x7f
 80061a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061aa:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ac:	22ff      	movs	r2, #255	@ 0xff
 80061ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061bc:	4b07      	ldr	r3, [pc, #28]	@ (80061dc <MX_RTC_Init+0x48>)
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <MX_RTC_Init+0x48>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061c8:	4804      	ldr	r0, [pc, #16]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ca:	f00a fba5 	bl	8010918 <HAL_RTC_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061d4:	f000 fde6 	bl	8006da4 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 80061d8:	bf00      	nop
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	200004e4 	.word	0x200004e4
 80061e0:	40002800 	.word	0x40002800

080061e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061ea:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <MX_SPI1_Init+0x78>)
 80061ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061fc:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006202:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <MX_SPI1_Init+0x74>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006210:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006216:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_SPI1_Init+0x74>)
 800621a:	2208      	movs	r2, #8
 800621c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006220:	2200      	movs	r2, #0
 8006222:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <MX_SPI1_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006232:	2207      	movs	r2, #7
 8006234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_SPI1_Init+0x74>)
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006244:	f00a fed7 	bl	8010ff6 <HAL_SPI_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800624e:	f000 fda9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000508 	.word	0x20000508
 800625c:	40013000 	.word	0x40013000

08006260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006266:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <MX_SPI2_Init+0x78>)
 8006268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800626a:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800626c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006272:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006278:	4b16      	ldr	r3, [pc, #88]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800627a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800627e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800628c:	4b11      	ldr	r3, [pc, #68]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800628e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006292:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800629a:	4b0e      	ldr	r3, [pc, #56]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ae:	2207      	movs	r2, #7
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ba:	2208      	movs	r2, #8
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062be:	4805      	ldr	r0, [pc, #20]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062c0:	f00a fe99 	bl	8010ff6 <HAL_SPI_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80062ca:	f000 fd6b 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000056c 	.word	0x2000056c
 80062d8:	40003800 	.word	0x40003800

080062dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	@ 0x70
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]
 800630c:	615a      	str	r2, [r3, #20]
 800630e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	2234      	movs	r2, #52	@ 0x34
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f00e fb5b 	bl	80149d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800631c:	4b44      	ldr	r3, [pc, #272]	@ (8006430 <MX_TIM1_Init+0x154>)
 800631e:	4a45      	ldr	r2, [pc, #276]	@ (8006434 <MX_TIM1_Init+0x158>)
 8006320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006324:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006328:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632a:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <MX_TIM1_Init+0x154>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8006330:	4b3f      	ldr	r3, [pc, #252]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006332:	2263      	movs	r2, #99	@ 0x63
 8006334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006336:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800633c:	4b3c      	ldr	r3, [pc, #240]	@ (8006430 <MX_TIM1_Init+0x154>)
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006342:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006348:	4839      	ldr	r0, [pc, #228]	@ (8006430 <MX_TIM1_Init+0x154>)
 800634a:	f00b fa6f 	bl	801182c <HAL_TIM_Base_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006354:	f000 fd26 	bl	8006da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800635c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800635e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006362:	4619      	mov	r1, r3
 8006364:	4832      	ldr	r0, [pc, #200]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006366:	f00b fd3d 	bl	8011de4 <HAL_TIM_ConfigClockSource>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006370:	f000 fd18 	bl	8006da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006374:	482e      	ldr	r0, [pc, #184]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006376:	f00b fb0b 	bl	8011990 <HAL_TIM_OC_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006380:	f000 fd10 	bl	8006da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006384:	2300      	movs	r3, #0
 8006386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006388:	2300      	movs	r3, #0
 800638a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006394:	4619      	mov	r1, r3
 8006396:	4826      	ldr	r0, [pc, #152]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006398:	f00c fa24 	bl	80127e4 <HAL_TIMEx_MasterConfigSynchronization>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80063a2:	f000 fcff 	bl	8006da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063ae:	2300      	movs	r3, #0
 80063b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063b2:	2300      	movs	r3, #0
 80063b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063c6:	2200      	movs	r2, #0
 80063c8:	4619      	mov	r1, r3
 80063ca:	4819      	ldr	r0, [pc, #100]	@ (8006430 <MX_TIM1_Init+0x154>)
 80063cc:	f00b fc90 	bl	8011cf0 <HAL_TIM_OC_ConfigChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80063d6:	f000 fce5 	bl	8006da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063f8:	2300      	movs	r3, #0
 80063fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800640a:	2300      	movs	r3, #0
 800640c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4806      	ldr	r0, [pc, #24]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006418:	f00c fa44 	bl	80128a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8006422:	f000 fcbf 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006426:	bf00      	nop
 8006428:	3770      	adds	r7, #112	@ 0x70
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	200005d0 	.word	0x200005d0
 8006434:	40012c00 	.word	0x40012c00

08006438 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800643e:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <MX_USB_PCD_Init+0x4c>)
 8006440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006444:	2208      	movs	r2, #8
 8006446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800644a:	2202      	movs	r2, #2
 800644c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006450:	2202      	movs	r2, #2
 8006452:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006456:	2200      	movs	r2, #0
 8006458:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800645c:	2200      	movs	r2, #0
 800645e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006468:	2200      	movs	r2, #0
 800646a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800646c:	4804      	ldr	r0, [pc, #16]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800646e:	f008 fb55 	bl	800eb1c <HAL_PCD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006478:	f000 fc94 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	2000068c 	.word	0x2000068c
 8006484:	40006800 	.word	0x40006800

08006488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800649c:	4b9d      	ldr	r3, [pc, #628]	@ (8006714 <MX_GPIO_Init+0x28c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 81c5 	bne.w	8006830 <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 80064a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006718 <MX_GPIO_Init+0x290>)
 80064a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ac:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 80064ae:	4b9b      	ldr	r3, [pc, #620]	@ (800671c <MX_GPIO_Init+0x294>)
 80064b0:	4a9b      	ldr	r2, [pc, #620]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064b2:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80064b4:	4b9b      	ldr	r3, [pc, #620]	@ (8006724 <MX_GPIO_Init+0x29c>)
 80064b6:	2217      	movs	r2, #23
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 80064ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 80064bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c0:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 80064c2:	4b9a      	ldr	r3, [pc, #616]	@ (800672c <MX_GPIO_Init+0x2a4>)
 80064c4:	4a96      	ldr	r2, [pc, #600]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064c6:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80064c8:	4b99      	ldr	r3, [pc, #612]	@ (8006730 <MX_GPIO_Init+0x2a8>)
 80064ca:	2217      	movs	r2, #23
 80064cc:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80064ce:	4b99      	ldr	r3, [pc, #612]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80064d4:	4b98      	ldr	r3, [pc, #608]	@ (8006738 <MX_GPIO_Init+0x2b0>)
 80064d6:	4a99      	ldr	r2, [pc, #612]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064d8:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80064da:	4b99      	ldr	r3, [pc, #612]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80064dc:	2208      	movs	r2, #8
 80064de:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064e0:	4b98      	ldr	r3, [pc, #608]	@ (8006744 <MX_GPIO_Init+0x2bc>)
 80064e2:	4a96      	ldr	r2, [pc, #600]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064e4:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064e6:	4b98      	ldr	r3, [pc, #608]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80064e8:	2220      	movs	r2, #32
 80064ea:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064ec:	4b97      	ldr	r3, [pc, #604]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80064ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80064f2:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064f4:	4b96      	ldr	r3, [pc, #600]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 80064f6:	2210      	movs	r2, #16
 80064f8:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064fa:	4b96      	ldr	r3, [pc, #600]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80064fc:	4a8f      	ldr	r2, [pc, #572]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064fe:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006500:	4b95      	ldr	r3, [pc, #596]	@ (8006758 <MX_GPIO_Init+0x2d0>)
 8006502:	220a      	movs	r2, #10
 8006504:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 8006506:	4b95      	ldr	r3, [pc, #596]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006508:	2220      	movs	r2, #32
 800650a:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 800650c:	4b94      	ldr	r3, [pc, #592]	@ (8006760 <MX_GPIO_Init+0x2d8>)
 800650e:	4a8b      	ldr	r2, [pc, #556]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006510:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 8006512:	4b94      	ldr	r3, [pc, #592]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 8006514:	2201      	movs	r2, #1
 8006516:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006518:	4b93      	ldr	r3, [pc, #588]	@ (8006768 <MX_GPIO_Init+0x2e0>)
 800651a:	4a81      	ldr	r2, [pc, #516]	@ (8006720 <MX_GPIO_Init+0x298>)
 800651c:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 800651e:	4b93      	ldr	r3, [pc, #588]	@ (800676c <MX_GPIO_Init+0x2e4>)
 8006520:	2202      	movs	r2, #2
 8006522:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006524:	4b92      	ldr	r3, [pc, #584]	@ (8006770 <MX_GPIO_Init+0x2e8>)
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006528:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 800652a:	4b92      	ldr	r3, [pc, #584]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800652c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006530:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 8006532:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <MX_GPIO_Init+0x2f0>)
 8006534:	4a7a      	ldr	r2, [pc, #488]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006536:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006538:	4b90      	ldr	r3, [pc, #576]	@ (800677c <MX_GPIO_Init+0x2f4>)
 800653a:	2228      	movs	r2, #40	@ 0x28
 800653c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 800653e:	4b90      	ldr	r3, [pc, #576]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006544:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 8006546:	4b8f      	ldr	r3, [pc, #572]	@ (8006784 <MX_GPIO_Init+0x2fc>)
 8006548:	4a75      	ldr	r2, [pc, #468]	@ (8006720 <MX_GPIO_Init+0x298>)
 800654a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800654c:	4b8e      	ldr	r3, [pc, #568]	@ (8006788 <MX_GPIO_Init+0x300>)
 800654e:	2228      	movs	r2, #40	@ 0x28
 8006550:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 8006552:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <MX_GPIO_Init+0x304>)
 8006554:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006558:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 800655a:	4b8d      	ldr	r3, [pc, #564]	@ (8006790 <MX_GPIO_Init+0x308>)
 800655c:	4a70      	ldr	r2, [pc, #448]	@ (8006720 <MX_GPIO_Init+0x298>)
 800655e:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006560:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <MX_GPIO_Init+0x30c>)
 8006562:	2228      	movs	r2, #40	@ 0x28
 8006564:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 8006566:	4b8c      	ldr	r3, [pc, #560]	@ (8006798 <MX_GPIO_Init+0x310>)
 8006568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800656c:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 800656e:	4b8b      	ldr	r3, [pc, #556]	@ (800679c <MX_GPIO_Init+0x314>)
 8006570:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006574:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006576:	4b8a      	ldr	r3, [pc, #552]	@ (80067a0 <MX_GPIO_Init+0x318>)
 8006578:	2228      	movs	r2, #40	@ 0x28
 800657a:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 800657c:	4b89      	ldr	r3, [pc, #548]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 800657e:	2201      	movs	r2, #1
 8006580:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 8006582:	4b89      	ldr	r3, [pc, #548]	@ (80067a8 <MX_GPIO_Init+0x320>)
 8006584:	4a89      	ldr	r2, [pc, #548]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006586:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006588:	4b89      	ldr	r3, [pc, #548]	@ (80067b0 <MX_GPIO_Init+0x328>)
 800658a:	2206      	movs	r2, #6
 800658c:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 800658e:	4b89      	ldr	r3, [pc, #548]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006590:	2202      	movs	r2, #2
 8006592:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006594:	4b88      	ldr	r3, [pc, #544]	@ (80067b8 <MX_GPIO_Init+0x330>)
 8006596:	4a85      	ldr	r2, [pc, #532]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006598:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <MX_GPIO_Init+0x334>)
 800659c:	2207      	movs	r2, #7
 800659e:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 80065a0:	4b87      	ldr	r3, [pc, #540]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80065a2:	2220      	movs	r2, #32
 80065a4:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 80065a6:	4b87      	ldr	r3, [pc, #540]	@ (80067c4 <MX_GPIO_Init+0x33c>)
 80065a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006720 <MX_GPIO_Init+0x298>)
 80065aa:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ac:	2004      	movs	r0, #4
 80065ae:	f7ff f82b 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b2:	2002      	movs	r0, #2
 80065b4:	f7ff f828 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b8:	2001      	movs	r0, #1
 80065ba:	f7ff f825 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065be:	2008      	movs	r0, #8
 80065c0:	f7ff f822 	bl	8005608 <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80065c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	4b5d      	ldr	r3, [pc, #372]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	4b62      	ldr	r3, [pc, #392]	@ (800675c <MX_GPIO_Init+0x2d4>)
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	4857      	ldr	r0, [pc, #348]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80065de:	f008 fa2f 	bl	800ea40 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065e2:	4b5a      	ldr	r3, [pc, #360]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a58      	ldr	r2, [pc, #352]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80065e8:	8811      	ldrh	r1, [r2, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f008 fa27 	bl	800ea40 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	4b5d      	ldr	r3, [pc, #372]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	4b70      	ldr	r3, [pc, #448]	@ (80067c0 <MX_GPIO_Init+0x338>)
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	2200      	movs	r2, #0
 8006608:	4619      	mov	r1, r3
 800660a:	4845      	ldr	r0, [pc, #276]	@ (8006720 <MX_GPIO_Init+0x298>)
 800660c:	f008 fa18 	bl	800ea40 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 8006610:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <MX_GPIO_Init+0x290>)
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	4b44      	ldr	r3, [pc, #272]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	4b55      	ldr	r3, [pc, #340]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	b29a      	uxth	r2, r3
 8006624:	4b56      	ldr	r3, [pc, #344]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	4b57      	ldr	r3, [pc, #348]	@ (800678c <MX_GPIO_Init+0x304>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 8006634:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006636:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800663a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4836      	ldr	r0, [pc, #216]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006646:	f008 f873 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800664a:	4b3a      	ldr	r3, [pc, #232]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	4b3c      	ldr	r3, [pc, #240]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	b29a      	uxth	r2, r3
 8006656:	4b41      	ldr	r3, [pc, #260]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006660:	2301      	movs	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4832      	ldr	r0, [pc, #200]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006672:	f008 f85d 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006676:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667c:	2301      	movs	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8006688:	4b30      	ldr	r3, [pc, #192]	@ (800674c <MX_GPIO_Init+0x2c4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	1d3a      	adds	r2, r7, #4
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f008 f84d 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 8006696:	4b2e      	ldr	r3, [pc, #184]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800669c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80066a0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066a2:	2301      	movs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80066a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	1d3a      	adds	r2, r7, #4
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f008 f83e 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80066b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	4b2c      	ldr	r3, [pc, #176]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	4b3f      	ldr	r3, [pc, #252]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ca:	2301      	movs	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4811      	ldr	r0, [pc, #68]	@ (8006720 <MX_GPIO_Init+0x298>)
 80066dc:	f008 f828 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <MX_GPIO_Init+0x310>)
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <MX_GPIO_Init+0x314>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	1d3a      	adds	r2, r7, #4
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f008 f819 	bl	800e730 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800670c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006710:	e05a      	b.n	80067c8 <MX_GPIO_Init+0x340>
 8006712:	bf00      	nop
 8006714:	20000a50 	.word	0x20000a50
 8006718:	20000c5e 	.word	0x20000c5e
 800671c:	20000c60 	.word	0x20000c60
 8006720:	48000400 	.word	0x48000400
 8006724:	20000c64 	.word	0x20000c64
 8006728:	20000c66 	.word	0x20000c66
 800672c:	20000c68 	.word	0x20000c68
 8006730:	20000c6c 	.word	0x20000c6c
 8006734:	20000cb4 	.word	0x20000cb4
 8006738:	20000cb8 	.word	0x20000cb8
 800673c:	48000800 	.word	0x48000800
 8006740:	20000cbc 	.word	0x20000cbc
 8006744:	20000cc0 	.word	0x20000cc0
 8006748:	20000c6e 	.word	0x20000c6e
 800674c:	20000c70 	.word	0x20000c70
 8006750:	20000cc4 	.word	0x20000cc4
 8006754:	20000cc8 	.word	0x20000cc8
 8006758:	20000ccc 	.word	0x20000ccc
 800675c:	20000c8e 	.word	0x20000c8e
 8006760:	20000c90 	.word	0x20000c90
 8006764:	20000ce6 	.word	0x20000ce6
 8006768:	20000ce8 	.word	0x20000ce8
 800676c:	20000cec 	.word	0x20000cec
 8006770:	20000cf0 	.word	0x20000cf0
 8006774:	20000c74 	.word	0x20000c74
 8006778:	20000c78 	.word	0x20000c78
 800677c:	20000c7c 	.word	0x20000c7c
 8006780:	20000c7e 	.word	0x20000c7e
 8006784:	20000c80 	.word	0x20000c80
 8006788:	20000c84 	.word	0x20000c84
 800678c:	20000c86 	.word	0x20000c86
 8006790:	20000c88 	.word	0x20000c88
 8006794:	20000c8c 	.word	0x20000c8c
 8006798:	20000c56 	.word	0x20000c56
 800679c:	20000c58 	.word	0x20000c58
 80067a0:	20000c5c 	.word	0x20000c5c
 80067a4:	20000cce 	.word	0x20000cce
 80067a8:	20000cd0 	.word	0x20000cd0
 80067ac:	48000c00 	.word	0x48000c00
 80067b0:	20000cd4 	.word	0x20000cd4
 80067b4:	20000cd6 	.word	0x20000cd6
 80067b8:	20000cd8 	.word	0x20000cd8
 80067bc:	20000cdc 	.word	0x20000cdc
 80067c0:	20000cf4 	.word	0x20000cf4
 80067c4:	20000cf8 	.word	0x20000cf8
 80067c8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4816      	ldr	r0, [pc, #88]	@ (800682c <MX_GPIO_Init+0x3a4>)
 80067d4:	f007 ffac 	bl	800e730 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	2006      	movs	r0, #6
 80067de:	f007 fc9a 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067e2:	2006      	movs	r0, #6
 80067e4:	f007 fcb1 	bl	800e14a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	2007      	movs	r0, #7
 80067ee:	f007 fc92 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067f2:	2007      	movs	r0, #7
 80067f4:	f007 fca9 	bl	800e14a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	2100      	movs	r1, #0
 80067fc:	200a      	movs	r0, #10
 80067fe:	f007 fc8a 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006802:	200a      	movs	r0, #10
 8006804:	f007 fca1 	bl	800e14a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	2017      	movs	r0, #23
 800680e:	f007 fc82 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006812:	2017      	movs	r0, #23
 8006814:	f007 fc99 	bl	800e14a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	2028      	movs	r0, #40	@ 0x28
 800681e:	f007 fc7a 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006822:	2028      	movs	r0, #40	@ 0x28
 8006824:	f007 fc91 	bl	800e14a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 8006828:	e290      	b.n	8006d4c <MX_GPIO_Init+0x8c4>
 800682a:	bf00      	nop
 800682c:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006830:	4b9d      	ldr	r3, [pc, #628]	@ (8006aa8 <MX_GPIO_Init+0x620>)
 8006832:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 8006838:	4b9c      	ldr	r3, [pc, #624]	@ (8006aac <MX_GPIO_Init+0x624>)
 800683a:	4a9d      	ldr	r2, [pc, #628]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800683c:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800683e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ab4 <MX_GPIO_Init+0x62c>)
 8006840:	2228      	movs	r2, #40	@ 0x28
 8006842:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006844:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006846:	2240      	movs	r2, #64	@ 0x40
 8006848:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800684a:	4b9c      	ldr	r3, [pc, #624]	@ (8006abc <MX_GPIO_Init+0x634>)
 800684c:	4a9c      	ldr	r2, [pc, #624]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800684e:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006850:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac4 <MX_GPIO_Init+0x63c>)
 8006852:	2217      	movs	r2, #23
 8006854:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006856:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006858:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800685c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 800685e:	4b9b      	ldr	r3, [pc, #620]	@ (8006acc <MX_GPIO_Init+0x644>)
 8006860:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006864:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006866:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad0 <MX_GPIO_Init+0x648>)
 8006868:	2228      	movs	r2, #40	@ 0x28
 800686a:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800686c:	4b99      	ldr	r3, [pc, #612]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 800686e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006872:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006874:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <MX_GPIO_Init+0x650>)
 8006876:	4a8e      	ldr	r2, [pc, #568]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006878:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800687a:	4b98      	ldr	r3, [pc, #608]	@ (8006adc <MX_GPIO_Init+0x654>)
 800687c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006880:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006882:	4b97      	ldr	r3, [pc, #604]	@ (8006ae0 <MX_GPIO_Init+0x658>)
 8006884:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006886:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006888:	4b96      	ldr	r3, [pc, #600]	@ (8006ae4 <MX_GPIO_Init+0x65c>)
 800688a:	2228      	movs	r2, #40	@ 0x28
 800688c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 800688e:	4b96      	ldr	r3, [pc, #600]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006894:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 8006896:	4b95      	ldr	r3, [pc, #596]	@ (8006aec <MX_GPIO_Init+0x664>)
 8006898:	4a89      	ldr	r2, [pc, #548]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800689a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800689c:	4b94      	ldr	r3, [pc, #592]	@ (8006af0 <MX_GPIO_Init+0x668>)
 800689e:	2228      	movs	r2, #40	@ 0x28
 80068a0:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80068a2:	4b94      	ldr	r3, [pc, #592]	@ (8006af4 <MX_GPIO_Init+0x66c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80068a8:	4b93      	ldr	r3, [pc, #588]	@ (8006af8 <MX_GPIO_Init+0x670>)
 80068aa:	4a94      	ldr	r2, [pc, #592]	@ (8006afc <MX_GPIO_Init+0x674>)
 80068ac:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80068ae:	4b94      	ldr	r3, [pc, #592]	@ (8006b00 <MX_GPIO_Init+0x678>)
 80068b0:	2206      	movs	r2, #6
 80068b2:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80068b4:	4b93      	ldr	r3, [pc, #588]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 80068b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068ba:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80068bc:	4b92      	ldr	r3, [pc, #584]	@ (8006b08 <MX_GPIO_Init+0x680>)
 80068be:	4a80      	ldr	r2, [pc, #512]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80068c0:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <MX_GPIO_Init+0x684>)
 80068c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068c8:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80068ca:	4b91      	ldr	r3, [pc, #580]	@ (8006b10 <MX_GPIO_Init+0x688>)
 80068cc:	4a78      	ldr	r2, [pc, #480]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068ce:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80068d0:	4b90      	ldr	r3, [pc, #576]	@ (8006b14 <MX_GPIO_Init+0x68c>)
 80068d2:	2217      	movs	r2, #23
 80068d4:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80068d6:	4b90      	ldr	r3, [pc, #576]	@ (8006b18 <MX_GPIO_Init+0x690>)
 80068d8:	2210      	movs	r2, #16
 80068da:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068dc:	4b8f      	ldr	r3, [pc, #572]	@ (8006b1c <MX_GPIO_Init+0x694>)
 80068de:	4a74      	ldr	r2, [pc, #464]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068e0:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006b20 <MX_GPIO_Init+0x698>)
 80068e4:	220a      	movs	r2, #10
 80068e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b24 <MX_GPIO_Init+0x69c>)
 80068ea:	2220      	movs	r2, #32
 80068ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006b28 <MX_GPIO_Init+0x6a0>)
 80068f0:	4a6f      	ldr	r2, [pc, #444]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068f2:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068f4:	4b8d      	ldr	r3, [pc, #564]	@ (8006b2c <MX_GPIO_Init+0x6a4>)
 80068f6:	2217      	movs	r2, #23
 80068f8:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 80068fc:	2202      	movs	r2, #2
 80068fe:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006900:	4b8c      	ldr	r3, [pc, #560]	@ (8006b34 <MX_GPIO_Init+0x6ac>)
 8006902:	4a7e      	ldr	r2, [pc, #504]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006904:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006906:	4b8c      	ldr	r3, [pc, #560]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 8006908:	2201      	movs	r2, #1
 800690a:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800690c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b3c <MX_GPIO_Init+0x6b4>)
 800690e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006910:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006912:	4b8b      	ldr	r3, [pc, #556]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 8006914:	2208      	movs	r2, #8
 8006916:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 8006918:	4b8a      	ldr	r3, [pc, #552]	@ (8006b44 <MX_GPIO_Init+0x6bc>)
 800691a:	4a69      	ldr	r2, [pc, #420]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800691c:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 800691e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b48 <MX_GPIO_Init+0x6c0>)
 8006920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006924:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006926:	4b89      	ldr	r3, [pc, #548]	@ (8006b4c <MX_GPIO_Init+0x6c4>)
 8006928:	4a61      	ldr	r2, [pc, #388]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800692a:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800692c:	4b88      	ldr	r3, [pc, #544]	@ (8006b50 <MX_GPIO_Init+0x6c8>)
 800692e:	2228      	movs	r2, #40	@ 0x28
 8006930:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 8006932:	4b88      	ldr	r3, [pc, #544]	@ (8006b54 <MX_GPIO_Init+0x6cc>)
 8006934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006938:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800693a:	4b87      	ldr	r3, [pc, #540]	@ (8006b58 <MX_GPIO_Init+0x6d0>)
 800693c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800693e:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 8006940:	4b86      	ldr	r3, [pc, #536]	@ (8006b5c <MX_GPIO_Init+0x6d4>)
 8006942:	2228      	movs	r2, #40	@ 0x28
 8006944:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 8006946:	4b86      	ldr	r3, [pc, #536]	@ (8006b60 <MX_GPIO_Init+0x6d8>)
 8006948:	2204      	movs	r2, #4
 800694a:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800694c:	4b85      	ldr	r3, [pc, #532]	@ (8006b64 <MX_GPIO_Init+0x6dc>)
 800694e:	4a58      	ldr	r2, [pc, #352]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006950:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006952:	4b85      	ldr	r3, [pc, #532]	@ (8006b68 <MX_GPIO_Init+0x6e0>)
 8006954:	2208      	movs	r2, #8
 8006956:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 8006958:	4b84      	ldr	r3, [pc, #528]	@ (8006b6c <MX_GPIO_Init+0x6e4>)
 800695a:	2220      	movs	r2, #32
 800695c:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 800695e:	4b84      	ldr	r3, [pc, #528]	@ (8006b70 <MX_GPIO_Init+0x6e8>)
 8006960:	4a57      	ldr	r2, [pc, #348]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006962:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006964:	4b83      	ldr	r3, [pc, #524]	@ (8006b74 <MX_GPIO_Init+0x6ec>)
 8006966:	2217      	movs	r2, #23
 8006968:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 800696a:	4b83      	ldr	r3, [pc, #524]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 800696c:	2201      	movs	r2, #1
 800696e:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006970:	4b82      	ldr	r3, [pc, #520]	@ (8006b7c <MX_GPIO_Init+0x6f4>)
 8006972:	4a4f      	ldr	r2, [pc, #316]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006974:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 8006976:	4b82      	ldr	r3, [pc, #520]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006978:	2202      	movs	r2, #2
 800697a:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 800697c:	4b81      	ldr	r3, [pc, #516]	@ (8006b84 <MX_GPIO_Init+0x6fc>)
 800697e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006980:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 8006982:	4b81      	ldr	r3, [pc, #516]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006984:	2210      	movs	r2, #16
 8006986:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 8006988:	4b80      	ldr	r3, [pc, #512]	@ (8006b8c <MX_GPIO_Init+0x704>)
 800698a:	4a81      	ldr	r2, [pc, #516]	@ (8006b90 <MX_GPIO_Init+0x708>)
 800698c:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 800698e:	4b81      	ldr	r3, [pc, #516]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006994:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 8006996:	4b80      	ldr	r3, [pc, #512]	@ (8006b98 <MX_GPIO_Init+0x710>)
 8006998:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800699a:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 800699c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b9c <MX_GPIO_Init+0x714>)
 800699e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a2:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 80069a4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba0 <MX_GPIO_Init+0x718>)
 80069a6:	4a42      	ldr	r2, [pc, #264]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80069a8:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 80069aa:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba4 <MX_GPIO_Init+0x71c>)
 80069ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80069b0:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 80069b2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ba8 <MX_GPIO_Init+0x720>)
 80069b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069b8:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 80069ba:	4b7c      	ldr	r3, [pc, #496]	@ (8006bac <MX_GPIO_Init+0x724>)
 80069bc:	2210      	movs	r2, #16
 80069be:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 80069c0:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <MX_GPIO_Init+0x728>)
 80069c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069c6:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c8:	2001      	movs	r0, #1
 80069ca:	f7fe fe1d 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ce:	2002      	movs	r0, #2
 80069d0:	f7fe fe1a 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069d4:	2004      	movs	r0, #4
 80069d6:	f7fe fe17 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069da:	2008      	movs	r0, #8
 80069dc:	f7fe fe14 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069e0:	2010      	movs	r0, #16
 80069e2:	f7fe fe11 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069e6:	4b54      	ldr	r3, [pc, #336]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	4b55      	ldr	r3, [pc, #340]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2201      	movs	r2, #1
 80069f4:	4619      	mov	r1, r3
 80069f6:	4832      	ldr	r0, [pc, #200]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80069f8:	f008 f822 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069fc:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	482a      	ldr	r0, [pc, #168]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a06:	f008 f81b 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4619      	mov	r1, r3
 8006a12:	482b      	ldr	r0, [pc, #172]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a14:	f008 f814 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 8006a18:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4836      	ldr	r0, [pc, #216]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006a22:	f008 f80d 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 8006a26:	4b54      	ldr	r3, [pc, #336]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	4b55      	ldr	r3, [pc, #340]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b58      	ldr	r3, [pc, #352]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	481c      	ldr	r0, [pc, #112]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a40:	f007 fffe 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a44:	4b50      	ldr	r3, [pc, #320]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4850      	ldr	r0, [pc, #320]	@ (8006b90 <MX_GPIO_Init+0x708>)
 8006a4e:	f007 fff7 	bl	800ea40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a52:	4b56      	ldr	r3, [pc, #344]	@ (8006bac <MX_GPIO_Init+0x724>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a5e:	f007 ffef 	bl	800ea40 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a62:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <MX_GPIO_Init+0x654>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a78:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	480e      	ldr	r0, [pc, #56]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a88:	f007 fe52 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a92:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a96:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	1d3b      	adds	r3, r7, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006aa4:	e086      	b.n	8006bb4 <MX_GPIO_Init+0x72c>
 8006aa6:	bf00      	nop
 8006aa8:	20000c56 	.word	0x20000c56
 8006aac:	20000c58 	.word	0x20000c58
 8006ab0:	48000400 	.word	0x48000400
 8006ab4:	20000c5c 	.word	0x20000c5c
 8006ab8:	20000c5e 	.word	0x20000c5e
 8006abc:	20000c60 	.word	0x20000c60
 8006ac0:	48000800 	.word	0x48000800
 8006ac4:	20000c64 	.word	0x20000c64
 8006ac8:	20000c66 	.word	0x20000c66
 8006acc:	20000c68 	.word	0x20000c68
 8006ad0:	20000c6c 	.word	0x20000c6c
 8006ad4:	20000c6e 	.word	0x20000c6e
 8006ad8:	20000c70 	.word	0x20000c70
 8006adc:	20000c74 	.word	0x20000c74
 8006ae0:	20000c78 	.word	0x20000c78
 8006ae4:	20000c7c 	.word	0x20000c7c
 8006ae8:	20000c7e 	.word	0x20000c7e
 8006aec:	20000c80 	.word	0x20000c80
 8006af0:	20000c84 	.word	0x20000c84
 8006af4:	20000c86 	.word	0x20000c86
 8006af8:	20000c88 	.word	0x20000c88
 8006afc:	48000c00 	.word	0x48000c00
 8006b00:	20000c8c 	.word	0x20000c8c
 8006b04:	20000c8e 	.word	0x20000c8e
 8006b08:	20000c90 	.word	0x20000c90
 8006b0c:	20000c94 	.word	0x20000c94
 8006b10:	20000c98 	.word	0x20000c98
 8006b14:	20000c9c 	.word	0x20000c9c
 8006b18:	20000c9e 	.word	0x20000c9e
 8006b1c:	20000ca0 	.word	0x20000ca0
 8006b20:	20000ca4 	.word	0x20000ca4
 8006b24:	20000ca6 	.word	0x20000ca6
 8006b28:	20000ca8 	.word	0x20000ca8
 8006b2c:	20000cac 	.word	0x20000cac
 8006b30:	20000cae 	.word	0x20000cae
 8006b34:	20000cb0 	.word	0x20000cb0
 8006b38:	20000cb4 	.word	0x20000cb4
 8006b3c:	20000cb8 	.word	0x20000cb8
 8006b40:	20000cbc 	.word	0x20000cbc
 8006b44:	20000cc0 	.word	0x20000cc0
 8006b48:	20000cc4 	.word	0x20000cc4
 8006b4c:	20000cc8 	.word	0x20000cc8
 8006b50:	20000ccc 	.word	0x20000ccc
 8006b54:	20000cce 	.word	0x20000cce
 8006b58:	20000cd0 	.word	0x20000cd0
 8006b5c:	20000cd4 	.word	0x20000cd4
 8006b60:	20000cd6 	.word	0x20000cd6
 8006b64:	20000cd8 	.word	0x20000cd8
 8006b68:	20000cdc 	.word	0x20000cdc
 8006b6c:	20000cde 	.word	0x20000cde
 8006b70:	20000ce0 	.word	0x20000ce0
 8006b74:	20000ce4 	.word	0x20000ce4
 8006b78:	20000ce6 	.word	0x20000ce6
 8006b7c:	20000ce8 	.word	0x20000ce8
 8006b80:	20000cec 	.word	0x20000cec
 8006b84:	20000cf0 	.word	0x20000cf0
 8006b88:	20000cf4 	.word	0x20000cf4
 8006b8c:	20000cf8 	.word	0x20000cf8
 8006b90:	48001000 	.word	0x48001000
 8006b94:	20000cfc 	.word	0x20000cfc
 8006b98:	20000d00 	.word	0x20000d00
 8006b9c:	20000d04 	.word	0x20000d04
 8006ba0:	20000d08 	.word	0x20000d08
 8006ba4:	20000d0c 	.word	0x20000d0c
 8006ba8:	20000d10 	.word	0x20000d10
 8006bac:	20000d14 	.word	0x20000d14
 8006bb0:	20000d18 	.word	0x20000d18
 8006bb4:	f007 fdbc 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006bb8:	4b66      	ldr	r3, [pc, #408]	@ (8006d54 <MX_GPIO_Init+0x8cc>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006bc2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4862      	ldr	r0, [pc, #392]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006bce:	f007 fdaf 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006bd2:	4b62      	ldr	r3, [pc, #392]	@ (8006d5c <MX_GPIO_Init+0x8d4>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006bd8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bde:	2301      	movs	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	485e      	ldr	r0, [pc, #376]	@ (8006d60 <MX_GPIO_Init+0x8d8>)
 8006be8:	f007 fda2 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bec:	4b5d      	ldr	r3, [pc, #372]	@ (8006d64 <MX_GPIO_Init+0x8dc>)
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <MX_GPIO_Init+0x8e0>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d6c <MX_GPIO_Init+0x8e4>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c02:	2301      	movs	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4857      	ldr	r0, [pc, #348]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c14:	f007 fd8c 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006c18:	4b56      	ldr	r3, [pc, #344]	@ (8006d74 <MX_GPIO_Init+0x8ec>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	484a      	ldr	r0, [pc, #296]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c30:	f007 fd7e 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006c34:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <MX_GPIO_Init+0x8f0>)
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <MX_GPIO_Init+0x8f4>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	4b4f      	ldr	r3, [pc, #316]	@ (8006d80 <MX_GPIO_Init+0x8f8>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c50:	2301      	movs	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	483f      	ldr	r0, [pc, #252]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c5a:	f007 fd69 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c5e:	4b49      	ldr	r3, [pc, #292]	@ (8006d84 <MX_GPIO_Init+0x8fc>)
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c68:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c6e:	1d3b      	adds	r3, r7, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	483f      	ldr	r0, [pc, #252]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c74:	f007 fd5c 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c78:	4b43      	ldr	r3, [pc, #268]	@ (8006d88 <MX_GPIO_Init+0x900>)
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <MX_GPIO_Init+0x904>)
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b42      	ldr	r3, [pc, #264]	@ (8006d90 <MX_GPIO_Init+0x908>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	482e      	ldr	r0, [pc, #184]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006ca0:	f007 fd46 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <MX_GPIO_Init+0x90c>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006caa:	2301      	movs	r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4837      	ldr	r0, [pc, #220]	@ (8006d98 <MX_GPIO_Init+0x910>)
 8006cbc:	f007 fd38 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006cc0:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <MX_GPIO_Init+0x914>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cda:	f007 fd29 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006cde:	4b30      	ldr	r3, [pc, #192]	@ (8006da0 <MX_GPIO_Init+0x918>)
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cf8:	f007 fd1a 	bl	800e730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2006      	movs	r0, #6
 8006d02:	f007 fa08 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006d06:	2006      	movs	r0, #6
 8006d08:	f007 fa1f 	bl	800e14a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2008      	movs	r0, #8
 8006d12:	f007 fa00 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d16:	2008      	movs	r0, #8
 8006d18:	f007 fa17 	bl	800e14a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	200a      	movs	r0, #10
 8006d22:	f007 f9f8 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006d26:	200a      	movs	r0, #10
 8006d28:	f007 fa0f 	bl	800e14a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2017      	movs	r0, #23
 8006d32:	f007 f9f0 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d36:	2017      	movs	r0, #23
 8006d38:	f007 fa07 	bl	800e14a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2028      	movs	r0, #40	@ 0x28
 8006d42:	f007 f9e8 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d46:	2028      	movs	r0, #40	@ 0x28
 8006d48:	f007 f9ff 	bl	800e14a <HAL_NVIC_EnableIRQ>
}
 8006d4c:	bf00      	nop
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000c56 	.word	0x20000c56
 8006d58:	48000400 	.word	0x48000400
 8006d5c:	20000c86 	.word	0x20000c86
 8006d60:	48000c00 	.word	0x48000c00
 8006d64:	20000cb4 	.word	0x20000cb4
 8006d68:	20000cbc 	.word	0x20000cbc
 8006d6c:	20000c8e 	.word	0x20000c8e
 8006d70:	48000800 	.word	0x48000800
 8006d74:	20000c6e 	.word	0x20000c6e
 8006d78:	20000cc4 	.word	0x20000cc4
 8006d7c:	20000cce 	.word	0x20000cce
 8006d80:	20000cd6 	.word	0x20000cd6
 8006d84:	20000cde 	.word	0x20000cde
 8006d88:	20000ce6 	.word	0x20000ce6
 8006d8c:	20000cec 	.word	0x20000cec
 8006d90:	20000cfc 	.word	0x20000cfc
 8006d94:	20000cf4 	.word	0x20000cf4
 8006d98:	48001000 	.word	0x48001000
 8006d9c:	20000d0c 	.word	0x20000d0c
 8006da0:	20000d14 	.word	0x20000d14

08006da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006da8:	4904      	ldr	r1, [pc, #16]	@ (8006dbc <Error_Handler+0x18>)
 8006daa:	4805      	ldr	r0, [pc, #20]	@ (8006dc0 <Error_Handler+0x1c>)
 8006dac:	f00d fdaa 	bl	8014904 <siprintf>
 8006db0:	4803      	ldr	r0, [pc, #12]	@ (8006dc0 <Error_Handler+0x1c>)
 8006db2:	f7fe fc43 	bl	800563c <serialOut>
  return;
 8006db6:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	080184dc 	.word	0x080184dc
 8006dc0:	20000b5c 	.word	0x20000b5c

08006dc4 <MCU_ShouldLogMessage>:

/***************************************************************************************************************
*     M C U _ S h o u l d L o g M e s s a g e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
static bool MCU_ShouldLogMessage(uint16_t messageId, bool isTx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460a      	mov	r2, r1
 8006dce:	80fb      	strh	r3, [r7, #6]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	717b      	strb	r3, [r7, #5]
  // Check if general COMMS debug is enabled
  if((debugLevel & DBG_COMMS) == 0) return false;
 8006dd4:	4b87      	ldr	r3, [pc, #540]	@ (8006ff4 <MCU_ShouldLogMessage+0x230>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <MCU_ShouldLogMessage+0x20>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e100      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
  
  // Map message IDs to debug flags
  switch(messageId){
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8006dea:	2b1f      	cmp	r3, #31
 8006dec:	f200 80fa 	bhi.w	8006fe4 <MCU_ShouldLogMessage+0x220>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <MCU_ShouldLogMessage+0x34>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e8d 	.word	0x08006e8d
 8006dfc:	08006f2d 	.word	0x08006f2d
 8006e00:	08006ec9 	.word	0x08006ec9
 8006e04:	08006edd 	.word	0x08006edd
 8006e08:	08006ef1 	.word	0x08006ef1
 8006e0c:	08006f41 	.word	0x08006f41
 8006e10:	08006f7d 	.word	0x08006f7d
 8006e14:	08006f55 	.word	0x08006f55
 8006e18:	08006f69 	.word	0x08006f69
 8006e1c:	08006fe5 	.word	0x08006fe5
 8006e20:	08006fe5 	.word	0x08006fe5
 8006e24:	08006fe5 	.word	0x08006fe5
 8006e28:	08006fe5 	.word	0x08006fe5
 8006e2c:	08006fe5 	.word	0x08006fe5
 8006e30:	08006fe5 	.word	0x08006fe5
 8006e34:	08006fe5 	.word	0x08006fe5
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006f19 	.word	0x08006f19
 8006e40:	08006eb5 	.word	0x08006eb5
 8006e44:	08006fe5 	.word	0x08006fe5
 8006e48:	08006f05 	.word	0x08006f05
 8006e4c:	08006fe5 	.word	0x08006fe5
 8006e50:	08006f91 	.word	0x08006f91
 8006e54:	08006fa5 	.word	0x08006fa5
 8006e58:	08006fa9 	.word	0x08006fa9
 8006e5c:	08006fe5 	.word	0x08006fe5
 8006e60:	08006fe5 	.word	0x08006fe5
 8006e64:	08006fe5 	.word	0x08006fe5
 8006e68:	08006fe5 	.word	0x08006fe5
 8006e6c:	08006e79 	.word	0x08006e79
 8006e70:	08006fd1 	.word	0x08006fd1
 8006e74:	08006fbd 	.word	0x08006fbd
    case ID_MODULE_ANNOUNCE_REQUEST:  return (debugMessages & DBG_MSG_ANNOUNCE_REQ) != 0;
 8006e78:	4b5f      	ldr	r3, [pc, #380]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e0ac      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ANNOUNCEMENT:      return (debugMessages & DBG_MSG_ANNOUNCE) != 0;
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e0a2      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_REGISTRATION:      return (debugMessages & DBG_MSG_REGISTRATION) != 0;
 8006ea0:	4b55      	ldr	r3, [pc, #340]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e098      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_REQUEST:    return (debugMessages & DBG_MSG_STATUS_REQ) != 0;
 8006eb4:	4b50      	ldr	r3, [pc, #320]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e08e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_1:          return (debugMessages & DBG_MSG_STATUS1) != 0;
 8006ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	e084      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_2:          return (debugMessages & DBG_MSG_STATUS2) != 0;
 8006edc:	4b46      	ldr	r3, [pc, #280]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e07a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_3:          return (debugMessages & DBG_MSG_STATUS3) != 0;
 8006ef0:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e070      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATE_CHANGE:      return (debugMessages & DBG_MSG_STATE_CHANGE) != 0;
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e066      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE_REQUEST:  return (debugMessages & DBG_MSG_HARDWARE_REQ) != 0;
 8006f18:	4b37      	ldr	r3, [pc, #220]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e05c      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE:          return (debugMessages & DBG_MSG_HARDWARE) != 0;
 8006f2c:	4b32      	ldr	r3, [pc, #200]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e052      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DETAIL:            return (debugMessages & DBG_MSG_CELL_DETAIL) != 0;
 8006f40:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e048      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS1: return (debugMessages & DBG_MSG_CELL_STATUS1) != 0;
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e03e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS2: return (debugMessages & DBG_MSG_CELL_STATUS2) != 0;
 8006f68:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e034      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_TIME_REQUEST:      return (debugMessages & DBG_MSG_TIME_REQ) != 0;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	e02a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_SET_TIME:          return (debugMessages & DBG_MSG_SET_TIME) != 0;
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e020      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_MAX_STATE:         return false; // Never log 0x517 to prevent flooding
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e01e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DEREGISTER:        return (debugMessages & DBG_MSG_DEREGISTER) != 0;
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e014      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_ISOLATE:       return (debugMessages & DBG_MSG_ISOLATE_ALL) != 0;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e00a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_DEREGISTER:    return (debugMessages & DBG_MSG_DEREGISTER_ALL) != 0;
 8006fd0:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e000      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    default:                          return false; // Unknown messages not logged unless DBG_MSG_ALL
 8006fe4:	2300      	movs	r3, #0
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
 8006ff8:	20000010 	.word	0x20000010

08006ffc <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8007002:	f7fe fc5d 	bl	80058c0 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8007006:	2254      	movs	r2, #84	@ 0x54
 8007008:	2100      	movs	r1, #0
 800700a:	48ac      	ldr	r0, [pc, #688]	@ (80072bc <PCU_Initialize+0x2c0>)
 800700c:	f00d fce1 	bl	80149d2 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8007010:	4bab      	ldr	r3, [pc, #684]	@ (80072c0 <PCU_Initialize+0x2c4>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4ba9      	ldr	r3, [pc, #676]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007018:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 800701a:	4ba8      	ldr	r3, [pc, #672]	@ (80072bc <PCU_Initialize+0x2c0>)
 800701c:	2200      	movs	r2, #0
 800701e:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8007020:	4ba6      	ldr	r3, [pc, #664]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007022:	2200      	movs	r2, #0
 8007024:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8007026:	4ba5      	ldr	r3, [pc, #660]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 800702c:	4ba3      	ldr	r3, [pc, #652]	@ (80072bc <PCU_Initialize+0x2c0>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8007034:	4ba1      	ldr	r3, [pc, #644]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007036:	2200      	movs	r2, #0
 8007038:	815a      	strh	r2, [r3, #10]
 800703a:	e007      	b.n	800704c <PCU_Initialize+0x50>
  else if (pack.id == 1)
 800703c:	4b9f      	ldr	r3, [pc, #636]	@ (80072bc <PCU_Initialize+0x2c0>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8007044:	4b9d      	ldr	r3, [pc, #628]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800704a:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 800704c:	4b9b      	ldr	r3, [pc, #620]	@ (80072bc <PCU_Initialize+0x2c0>)
 800704e:	2200      	movs	r2, #0
 8007050:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8007052:	4b9a      	ldr	r3, [pc, #616]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007054:	2200      	movs	r2, #0
 8007056:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8007058:	4b98      	ldr	r3, [pc, #608]	@ (80072bc <PCU_Initialize+0x2c0>)
 800705a:	2200      	movs	r2, #0
 800705c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800705e:	4b97      	ldr	r3, [pc, #604]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007060:	2200      	movs	r2, #0
 8007062:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8007064:	4b95      	ldr	r3, [pc, #596]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007066:	2200      	movs	r2, #0
 8007068:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800706a:	4b94      	ldr	r3, [pc, #592]	@ (80072bc <PCU_Initialize+0x2c0>)
 800706c:	2200      	movs	r2, #0
 800706e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8007070:	4b92      	ldr	r3, [pc, #584]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007072:	2200      	movs	r2, #0
 8007074:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8007076:	4b91      	ldr	r3, [pc, #580]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007078:	2200      	movs	r2, #0
 800707a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800707c:	4b8f      	ldr	r3, [pc, #572]	@ (80072bc <PCU_Initialize+0x2c0>)
 800707e:	2200      	movs	r2, #0
 8007080:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 8007082:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007084:	2200      	movs	r2, #0
 8007086:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 8007088:	4b8c      	ldr	r3, [pc, #560]	@ (80072bc <PCU_Initialize+0x2c0>)
 800708a:	2200      	movs	r2, #0
 800708c:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 800708e:	4b8b      	ldr	r3, [pc, #556]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007090:	2200      	movs	r2, #0
 8007092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 8007094:	4b89      	ldr	r3, [pc, #548]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007096:	2200      	movs	r2, #0
 8007098:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 800709a:	4b88      	ldr	r3, [pc, #544]	@ (80072bc <PCU_Initialize+0x2c0>)
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 80070a2:	4b86      	ldr	r3, [pc, #536]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 80070aa:	4b84      	ldr	r3, [pc, #528]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 80070b2:	4b82      	ldr	r3, [pc, #520]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 80070ba:	4b80      	ldr	r3, [pc, #512]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 80070c2:	4b7e      	ldr	r3, [pc, #504]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 80070ca:	4b7c      	ldr	r3, [pc, #496]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 80070d0:	4b7a      	ldr	r3, [pc, #488]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 80070d6:	4b79      	ldr	r3, [pc, #484]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 80070dc:	4b77      	ldr	r3, [pc, #476]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 80070e2:	4b76      	ldr	r3, [pc, #472]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 80070e8:	4b74      	ldr	r3, [pc, #464]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80070f0:	2300      	movs	r3, #0
 80070f2:	71fb      	strb	r3, [r7, #7]
 80070f4:	e00f      	b.n	8007116 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	4a70      	ldr	r2, [pc, #448]	@ (80072c4 <PCU_Initialize+0x2c8>)
 8007102:	4413      	add	r3, r2
 8007104:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f00d fc61 	bl	80149d2 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	3301      	adds	r3, #1
 8007114:	71fb      	strb	r3, [r7, #7]
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	2b1f      	cmp	r3, #31
 800711a:	d9ec      	bls.n	80070f6 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 800711c:	486a      	ldr	r0, [pc, #424]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800711e:	f7fe fa8d 	bl	800563c <serialOut>
  serialOut("");
 8007122:	4869      	ldr	r0, [pc, #420]	@ (80072c8 <PCU_Initialize+0x2cc>)
 8007124:	f7fe fa8a 	bl	800563c <serialOut>
  serialOut("        ██    ██");
 8007128:	4868      	ldr	r0, [pc, #416]	@ (80072cc <PCU_Initialize+0x2d0>)
 800712a:	f7fe fa87 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 800712e:	4868      	ldr	r0, [pc, #416]	@ (80072d0 <PCU_Initialize+0x2d4>)
 8007130:	f7fe fa84 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8007134:	4867      	ldr	r0, [pc, #412]	@ (80072d4 <PCU_Initialize+0x2d8>)
 8007136:	f7fe fa81 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800713a:	4867      	ldr	r0, [pc, #412]	@ (80072d8 <PCU_Initialize+0x2dc>)
 800713c:	f7fe fa7e 	bl	800563c <serialOut>
  serialOut("     ██    ██    ██");
 8007140:	4866      	ldr	r0, [pc, #408]	@ (80072dc <PCU_Initialize+0x2e0>)
 8007142:	f7fe fa7b 	bl	800563c <serialOut>
  serialOut("     m o d b a t t");
 8007146:	4866      	ldr	r0, [pc, #408]	@ (80072e0 <PCU_Initialize+0x2e4>)
 8007148:	f7fe fa78 	bl	800563c <serialOut>
  serialOut("");
 800714c:	485e      	ldr	r0, [pc, #376]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800714e:	f7fe fa75 	bl	800563c <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8007152:	2000      	movs	r0, #0
 8007154:	f004 f982 	bl	800b45c <CAN_TestRamAccess>
 8007158:	4603      	mov	r3, r0
 800715a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <PCU_Initialize+0x176>
 8007162:	4960      	ldr	r1, [pc, #384]	@ (80072e4 <PCU_Initialize+0x2e8>)
 8007164:	4860      	ldr	r0, [pc, #384]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007166:	f00d fbcd 	bl	8014904 <siprintf>
 800716a:	485f      	ldr	r0, [pc, #380]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800716c:	f7fe fa66 	bl	800563c <serialOut>
 8007170:	e006      	b.n	8007180 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8007172:	495e      	ldr	r1, [pc, #376]	@ (80072ec <PCU_Initialize+0x2f0>)
 8007174:	485c      	ldr	r0, [pc, #368]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007176:	f00d fbc5 	bl	8014904 <siprintf>
 800717a:	485b      	ldr	r0, [pc, #364]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800717c:	f7fe fa5e 	bl	800563c <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8007180:	2000      	movs	r0, #0
 8007182:	f004 f8f1 	bl	800b368 <CAN_TestRegisterAccess>
 8007186:	4603      	mov	r3, r0
 8007188:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800718a:	79bb      	ldrb	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <PCU_Initialize+0x1a4>
 8007190:	4957      	ldr	r1, [pc, #348]	@ (80072f0 <PCU_Initialize+0x2f4>)
 8007192:	4855      	ldr	r0, [pc, #340]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007194:	f00d fbb6 	bl	8014904 <siprintf>
 8007198:	4853      	ldr	r0, [pc, #332]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800719a:	f7fe fa4f 	bl	800563c <serialOut>
 800719e:	e006      	b.n	80071ae <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 80071a0:	4954      	ldr	r1, [pc, #336]	@ (80072f4 <PCU_Initialize+0x2f8>)
 80071a2:	4851      	ldr	r0, [pc, #324]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071a4:	f00d fbae 	bl	8014904 <siprintf>
 80071a8:	484f      	ldr	r0, [pc, #316]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071aa:	f7fe fa47 	bl	800563c <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80071ae:	4952      	ldr	r1, [pc, #328]	@ (80072f8 <PCU_Initialize+0x2fc>)
 80071b0:	484d      	ldr	r0, [pc, #308]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b2:	f00d fba7 	bl	8014904 <siprintf>
 80071b6:	484c      	ldr	r0, [pc, #304]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b8:	f7fe fa40 	bl	800563c <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 80071bc:	4b4f      	ldr	r3, [pc, #316]	@ (80072fc <PCU_Initialize+0x300>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d135      	bne.n	8007230 <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f004 f949 	bl	800b45c <CAN_TestRamAccess>
 80071ca:	4603      	mov	r3, r0
 80071cc:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <PCU_Initialize+0x1e8>
 80071d4:	494a      	ldr	r1, [pc, #296]	@ (8007300 <PCU_Initialize+0x304>)
 80071d6:	4844      	ldr	r0, [pc, #272]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071d8:	f00d fb94 	bl	8014904 <siprintf>
 80071dc:	4842      	ldr	r0, [pc, #264]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071de:	f7fe fa2d 	bl	800563c <serialOut>
 80071e2:	e006      	b.n	80071f2 <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 80071e4:	4947      	ldr	r1, [pc, #284]	@ (8007304 <PCU_Initialize+0x308>)
 80071e6:	4840      	ldr	r0, [pc, #256]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071e8:	f00d fb8c 	bl	8014904 <siprintf>
 80071ec:	483e      	ldr	r0, [pc, #248]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071ee:	f7fe fa25 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 80071f2:	2001      	movs	r0, #1
 80071f4:	f004 f8b8 	bl	800b368 <CAN_TestRegisterAccess>
 80071f8:	4603      	mov	r3, r0
 80071fa:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <PCU_Initialize+0x216>
 8007202:	4941      	ldr	r1, [pc, #260]	@ (8007308 <PCU_Initialize+0x30c>)
 8007204:	4838      	ldr	r0, [pc, #224]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007206:	f00d fb7d 	bl	8014904 <siprintf>
 800720a:	4837      	ldr	r0, [pc, #220]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800720c:	f7fe fa16 	bl	800563c <serialOut>
 8007210:	e006      	b.n	8007220 <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007212:	493e      	ldr	r1, [pc, #248]	@ (800730c <PCU_Initialize+0x310>)
 8007214:	4834      	ldr	r0, [pc, #208]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007216:	f00d fb75 	bl	8014904 <siprintf>
 800721a:	4833      	ldr	r0, [pc, #204]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800721c:	f7fe fa0e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007220:	4935      	ldr	r1, [pc, #212]	@ (80072f8 <PCU_Initialize+0x2fc>)
 8007222:	4831      	ldr	r0, [pc, #196]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007224:	f00d fb6e 	bl	8014904 <siprintf>
 8007228:	482f      	ldr	r0, [pc, #188]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800722a:	f7fe fa07 	bl	800563c <serialOut>
 800722e:	e09e      	b.n	800736e <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8007230:	2001      	movs	r0, #1
 8007232:	f004 f913 	bl	800b45c <CAN_TestRamAccess>
 8007236:	4603      	mov	r3, r0
 8007238:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 800723a:	79bb      	ldrb	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <PCU_Initialize+0x254>
 8007240:	4933      	ldr	r1, [pc, #204]	@ (8007310 <PCU_Initialize+0x314>)
 8007242:	4829      	ldr	r0, [pc, #164]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007244:	f00d fb5e 	bl	8014904 <siprintf>
 8007248:	4827      	ldr	r0, [pc, #156]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800724a:	f7fe f9f7 	bl	800563c <serialOut>
 800724e:	e006      	b.n	800725e <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007250:	4930      	ldr	r1, [pc, #192]	@ (8007314 <PCU_Initialize+0x318>)
 8007252:	4825      	ldr	r0, [pc, #148]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007254:	f00d fb56 	bl	8014904 <siprintf>
 8007258:	4823      	ldr	r0, [pc, #140]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800725a:	f7fe f9ef 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 800725e:	2001      	movs	r0, #1
 8007260:	f004 f882 	bl	800b368 <CAN_TestRegisterAccess>
 8007264:	4603      	mov	r3, r0
 8007266:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8007268:	79bb      	ldrb	r3, [r7, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <PCU_Initialize+0x282>
 800726e:	492a      	ldr	r1, [pc, #168]	@ (8007318 <PCU_Initialize+0x31c>)
 8007270:	481d      	ldr	r0, [pc, #116]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007272:	f00d fb47 	bl	8014904 <siprintf>
 8007276:	481c      	ldr	r0, [pc, #112]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007278:	f7fe f9e0 	bl	800563c <serialOut>
 800727c:	e006      	b.n	800728c <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 800727e:	4927      	ldr	r1, [pc, #156]	@ (800731c <PCU_Initialize+0x320>)
 8007280:	4819      	ldr	r0, [pc, #100]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007282:	f00d fb3f 	bl	8014904 <siprintf>
 8007286:	4818      	ldr	r0, [pc, #96]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007288:	f7fe f9d8 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 800728c:	491a      	ldr	r1, [pc, #104]	@ (80072f8 <PCU_Initialize+0x2fc>)
 800728e:	4816      	ldr	r0, [pc, #88]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007290:	f00d fb38 	bl	8014904 <siprintf>
 8007294:	4814      	ldr	r0, [pc, #80]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007296:	f7fe f9d1 	bl	800563c <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 800729a:	2002      	movs	r0, #2
 800729c:	f004 f8de 	bl	800b45c <CAN_TestRamAccess>
 80072a0:	4603      	mov	r3, r0
 80072a2:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 80072a4:	79bb      	ldrb	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03c      	beq.n	8007324 <PCU_Initialize+0x328>
 80072aa:	491d      	ldr	r1, [pc, #116]	@ (8007320 <PCU_Initialize+0x324>)
 80072ac:	480e      	ldr	r0, [pc, #56]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072ae:	f00d fb29 	bl	8014904 <siprintf>
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072b4:	f7fe f9c2 	bl	800563c <serialOut>
 80072b8:	e03b      	b.n	8007332 <PCU_Initialize+0x336>
 80072ba:	bf00      	nop
 80072bc:	2000a66c 	.word	0x2000a66c
 80072c0:	20000984 	.word	0x20000984
 80072c4:	20000dec 	.word	0x20000dec
 80072c8:	080184ec 	.word	0x080184ec
 80072cc:	080184f0 	.word	0x080184f0
 80072d0:	0801850c 	.word	0x0801850c
 80072d4:	08018534 	.word	0x08018534
 80072d8:	08018584 	.word	0x08018584
 80072dc:	080185d4 	.word	0x080185d4
 80072e0:	080185f4 	.word	0x080185f4
 80072e4:	08018608 	.word	0x08018608
 80072e8:	20000b5c 	.word	0x20000b5c
 80072ec:	08018638 	.word	0x08018638
 80072f0:	08018670 	.word	0x08018670
 80072f4:	080186a0 	.word	0x080186a0
 80072f8:	080186d8 	.word	0x080186d8
 80072fc:	20000a50 	.word	0x20000a50
 8007300:	080186dc 	.word	0x080186dc
 8007304:	0801870c 	.word	0x0801870c
 8007308:	08018744 	.word	0x08018744
 800730c:	08018774 	.word	0x08018774
 8007310:	080187ac 	.word	0x080187ac
 8007314:	080187dc 	.word	0x080187dc
 8007318:	08018814 	.word	0x08018814
 800731c:	08018844 	.word	0x08018844
 8007320:	0801887c 	.word	0x0801887c
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007324:	4915      	ldr	r1, [pc, #84]	@ (800737c <PCU_Initialize+0x380>)
 8007326:	4816      	ldr	r0, [pc, #88]	@ (8007380 <PCU_Initialize+0x384>)
 8007328:	f00d faec 	bl	8014904 <siprintf>
 800732c:	4814      	ldr	r0, [pc, #80]	@ (8007380 <PCU_Initialize+0x384>)
 800732e:	f7fe f985 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 8007332:	2002      	movs	r0, #2
 8007334:	f004 f818 	bl	800b368 <CAN_TestRegisterAccess>
 8007338:	4603      	mov	r3, r0
 800733a:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 800733c:	79bb      	ldrb	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <PCU_Initialize+0x356>
 8007342:	4910      	ldr	r1, [pc, #64]	@ (8007384 <PCU_Initialize+0x388>)
 8007344:	480e      	ldr	r0, [pc, #56]	@ (8007380 <PCU_Initialize+0x384>)
 8007346:	f00d fadd 	bl	8014904 <siprintf>
 800734a:	480d      	ldr	r0, [pc, #52]	@ (8007380 <PCU_Initialize+0x384>)
 800734c:	f7fe f976 	bl	800563c <serialOut>
 8007350:	e006      	b.n	8007360 <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007352:	490d      	ldr	r1, [pc, #52]	@ (8007388 <PCU_Initialize+0x38c>)
 8007354:	480a      	ldr	r0, [pc, #40]	@ (8007380 <PCU_Initialize+0x384>)
 8007356:	f00d fad5 	bl	8014904 <siprintf>
 800735a:	4809      	ldr	r0, [pc, #36]	@ (8007380 <PCU_Initialize+0x384>)
 800735c:	f7fe f96e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007360:	490a      	ldr	r1, [pc, #40]	@ (800738c <PCU_Initialize+0x390>)
 8007362:	4807      	ldr	r0, [pc, #28]	@ (8007380 <PCU_Initialize+0x384>)
 8007364:	f00d face 	bl	8014904 <siprintf>
 8007368:	4805      	ldr	r0, [pc, #20]	@ (8007380 <PCU_Initialize+0x384>)
 800736a:	f7fe f967 	bl	800563c <serialOut>

  }
  appData.state = PC_STATE_INIT;
 800736e:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <PCU_Initialize+0x394>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	080188ac 	.word	0x080188ac
 8007380:	20000b5c 	.word	0x20000b5c
 8007384:	080188e4 	.word	0x080188e4
 8007388:	08018914 	.word	0x08018914
 800738c:	080186d8 	.word	0x080186d8
 8007390:	20000d28 	.word	0x20000d28

08007394 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b08d      	sub	sp, #52	@ 0x34
 8007398:	af04      	add	r7, sp, #16
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;
  static uint8_t nextModuleToPoll = 0;
  static lastContact lastStatusPoll = {0, 0};

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800739a:	4b97      	ldr	r3, [pc, #604]	@ (80075f8 <PCU_Tasks+0x264>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d12f      	bne.n	8007402 <PCU_Tasks+0x6e>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 80073a2:	2000      	movs	r0, #0
 80073a4:	f000 ff08 	bl	80081b8 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 80073a8:	2001      	movs	r0, #1
 80073aa:	f000 ff05 	bl	80081b8 <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 80073ae:	f002 f8d1 	bl	8009554 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 80073b2:	f002 f87b 	bl	80094ac <MCU_DeRegisterAllModules>
    
    // Always show startup message
    sprintf(tempBuffer,"MCU STARTUP - Pack controller initialized, module count=%d", pack.moduleCount); 
 80073b6:	4b91      	ldr	r3, [pc, #580]	@ (80075fc <PCU_Tasks+0x268>)
 80073b8:	7d1b      	ldrb	r3, [r3, #20]
 80073ba:	461a      	mov	r2, r3
 80073bc:	4990      	ldr	r1, [pc, #576]	@ (8007600 <PCU_Tasks+0x26c>)
 80073be:	4891      	ldr	r0, [pc, #580]	@ (8007604 <PCU_Tasks+0x270>)
 80073c0:	f00d faa0 	bl	8014904 <siprintf>
    serialOut(tempBuffer);
 80073c4:	488f      	ldr	r0, [pc, #572]	@ (8007604 <PCU_Tasks+0x270>)
 80073c6:	f7fe f939 	bl	800563c <serialOut>
    
    // Request module announcements on startup
    MCU_RequestModuleAnnouncement();
 80073ca:	f002 f91d 	bl	8009608 <MCU_RequestModuleAnnouncement>
    lastAnnounceRequest.ticks = htim1.Instance->CNT;
 80073ce:	4b8e      	ldr	r3, [pc, #568]	@ (8007608 <PCU_Tasks+0x274>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	4a8d      	ldr	r2, [pc, #564]	@ (800760c <PCU_Tasks+0x278>)
 80073d6:	6013      	str	r3, [r2, #0]
    lastAnnounceRequest.overflows = etTimerOverflows;
 80073d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007610 <PCU_Tasks+0x27c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a8b      	ldr	r2, [pc, #556]	@ (800760c <PCU_Tasks+0x278>)
 80073de:	6053      	str	r3, [r2, #4]

    pack.vcuRequestedState = packOff;
 80073e0:	4b86      	ldr	r3, [pc, #536]	@ (80075fc <PCU_Tasks+0x268>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 80073e8:	4b89      	ldr	r3, [pc, #548]	@ (8007610 <PCU_Tasks+0x27c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a83      	ldr	r2, [pc, #524]	@ (80075fc <PCU_Tasks+0x268>)
 80073ee:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 80073f0:	4b85      	ldr	r3, [pc, #532]	@ (8007608 <PCU_Tasks+0x274>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	4a81      	ldr	r2, [pc, #516]	@ (80075fc <PCU_Tasks+0x268>)
 80073f8:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 80073fa:	4b7f      	ldr	r3, [pc, #508]	@ (80075f8 <PCU_Tasks+0x264>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e2e7      	b.n	80079d2 <PCU_Tasks+0x63e>

  }else if (appData.state == PC_STATE_RUN){
 8007402:	4b7d      	ldr	r3, [pc, #500]	@ (80075f8 <PCU_Tasks+0x264>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	f040 82e3 	bne.w	80079d2 <PCU_Tasks+0x63e>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800740c:	4b81      	ldr	r3, [pc, #516]	@ (8007614 <PCU_Tasks+0x280>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <PCU_Tasks+0x84>
      VCU_ReceiveMessages();
 8007414:	f004 fd12 	bl	800be3c <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 8007418:	4b7f      	ldr	r3, [pc, #508]	@ (8007618 <PCU_Tasks+0x284>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <PCU_Tasks+0x90>
      MCU_ReceiveMessages();
 8007420:	f001 fc6a 	bl	8008cf8 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 8007424:	f005 fa02 	bl	800c82c <VCU_TicksSinceLastMessage>
 8007428:	60f8      	str	r0, [r7, #12]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007430:	d920      	bls.n	8007474 <PCU_Tasks+0xe0>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 8007432:	4b72      	ldr	r3, [pc, #456]	@ (80075fc <PCU_Tasks+0x268>)
 8007434:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007438:	2b03      	cmp	r3, #3
 800743a:	d009      	beq.n	8007450 <PCU_Tasks+0xbc>
 800743c:	4b6f      	ldr	r3, [pc, #444]	@ (80075fc <PCU_Tasks+0x268>)
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d004      	beq.n	8007450 <PCU_Tasks+0xbc>
 8007446:	4b6d      	ldr	r3, [pc, #436]	@ (80075fc <PCU_Tasks+0x268>)
 8007448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744c:	2b02      	cmp	r3, #2
 800744e:	d130      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 8007450:	4b72      	ldr	r3, [pc, #456]	@ (800761c <PCU_Tasks+0x288>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0311 	and.w	r3, r3, #17
 8007458:	2b11      	cmp	r3, #17
 800745a:	d106      	bne.n	800746a <PCU_Tasks+0xd6>
 800745c:	4970      	ldr	r1, [pc, #448]	@ (8007620 <PCU_Tasks+0x28c>)
 800745e:	4869      	ldr	r0, [pc, #420]	@ (8007604 <PCU_Tasks+0x270>)
 8007460:	f00d fa50 	bl	8014904 <siprintf>
 8007464:	4867      	ldr	r0, [pc, #412]	@ (8007604 <PCU_Tasks+0x270>)
 8007466:	f7fe f8e9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packOff;
 800746a:	4b64      	ldr	r3, [pc, #400]	@ (80075fc <PCU_Tasks+0x268>)
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007472:	e01e      	b.n	80074b2 <PCU_Tasks+0x11e>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800747a:	d91a      	bls.n	80074b2 <PCU_Tasks+0x11e>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 800747c:	4b5f      	ldr	r3, [pc, #380]	@ (80075fc <PCU_Tasks+0x268>)
 800747e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007482:	2b03      	cmp	r3, #3
 8007484:	d004      	beq.n	8007490 <PCU_Tasks+0xfc>
 8007486:	4b5d      	ldr	r3, [pc, #372]	@ (80075fc <PCU_Tasks+0x268>)
 8007488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800748c:	2b02      	cmp	r3, #2
 800748e:	d110      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8007490:	4b62      	ldr	r3, [pc, #392]	@ (800761c <PCU_Tasks+0x288>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 0311 	and.w	r3, r3, #17
 8007498:	2b11      	cmp	r3, #17
 800749a:	d106      	bne.n	80074aa <PCU_Tasks+0x116>
 800749c:	4961      	ldr	r1, [pc, #388]	@ (8007624 <PCU_Tasks+0x290>)
 800749e:	4859      	ldr	r0, [pc, #356]	@ (8007604 <PCU_Tasks+0x270>)
 80074a0:	f00d fa30 	bl	8014904 <siprintf>
 80074a4:	4857      	ldr	r0, [pc, #348]	@ (8007604 <PCU_Tasks+0x270>)
 80074a6:	f7fe f8c9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packStandby;
 80074aa:	4b54      	ldr	r3, [pc, #336]	@ (80075fc <PCU_Tasks+0x268>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }
    
    // Send periodic announcement requests
    uint32_t timeSinceLastAnnounce = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61bb      	str	r3, [r7, #24]
    if ((etTimerOverflows - lastAnnounceRequest.overflows) == 0){
 80074b6:	4b55      	ldr	r3, [pc, #340]	@ (800760c <PCU_Tasks+0x278>)
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	4b55      	ldr	r3, [pc, #340]	@ (8007610 <PCU_Tasks+0x27c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d107      	bne.n	80074d2 <PCU_Tasks+0x13e>
      timeSinceLastAnnounce = htim1.Instance->CNT - lastAnnounceRequest.ticks;
 80074c2:	4b51      	ldr	r3, [pc, #324]	@ (8007608 <PCU_Tasks+0x274>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c8:	4b50      	ldr	r3, [pc, #320]	@ (800760c <PCU_Tasks+0x278>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	e016      	b.n	8007500 <PCU_Tasks+0x16c>
    } else {
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074d2:	4b4d      	ldr	r3, [pc, #308]	@ (8007608 <PCU_Tasks+0x274>)
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b4d      	ldr	r3, [pc, #308]	@ (800760c <PCU_Tasks+0x278>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1ad2      	subs	r2, r2, r3
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007608 <PCU_Tasks+0x274>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	494b      	ldr	r1, [pc, #300]	@ (8007610 <PCU_Tasks+0x27c>)
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	4949      	ldr	r1, [pc, #292]	@ (800760c <PCU_Tasks+0x278>)
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	1a41      	subs	r1, r0, r1
 80074ec:	3901      	subs	r1, #1
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074f2:	441a      	add	r2, r3
                              (htim1.Instance->CNT);
 80074f4:	4b44      	ldr	r3, [pc, #272]	@ (8007608 <PCU_Tasks+0x274>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074fa:	4413      	add	r3, r2
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074fc:	3301      	adds	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
    }
    
    if(timeSinceLastAnnounce > MCU_ANNOUNCE_REQUEST_INTERVAL){
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007506:	4293      	cmp	r3, r2
 8007508:	d90a      	bls.n	8007520 <PCU_Tasks+0x18c>
      MCU_RequestModuleAnnouncement();
 800750a:	f002 f87d 	bl	8009608 <MCU_RequestModuleAnnouncement>
      lastAnnounceRequest.ticks = htim1.Instance->CNT;
 800750e:	4b3e      	ldr	r3, [pc, #248]	@ (8007608 <PCU_Tasks+0x274>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	4a3d      	ldr	r2, [pc, #244]	@ (800760c <PCU_Tasks+0x278>)
 8007516:	6013      	str	r3, [r2, #0]
      lastAnnounceRequest.overflows = etTimerOverflows;
 8007518:	4b3d      	ldr	r3, [pc, #244]	@ (8007610 <PCU_Tasks+0x27c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3b      	ldr	r2, [pc, #236]	@ (800760c <PCU_Tasks+0x278>)
 800751e:	6053      	str	r3, [r2, #4]
    //Check for expired last contact from module
    /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
      sprintf(tempBuffer,"MCU DEBUG - Checking %d modules", pack.moduleCount); 
      serialOut(tempBuffer);
    }*/
    for (index =0;index < pack.moduleCount;index++){
 8007520:	2300      	movs	r3, #0
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e1bc      	b.n	80078a0 <PCU_Tasks+0x50c>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	4a3f      	ldr	r2, [pc, #252]	@ (8007628 <PCU_Tasks+0x294>)
 800752a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	3308      	adds	r3, #8
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f003 fdef 	bl	800b11c <MCU_TicksSinceLastMessage>
 800753e:	60f8      	str	r0, [r7, #12]
      /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
                index, module[index].moduleId, elapsedTicks, module[index].statusPending); 
        serialOut(tempBuffer);
      }*/
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007546:	f240 80fc 	bls.w	8007742 <PCU_Tasks+0x3ae>
 800754a:	7ffb      	ldrb	r3, [r7, #31]
 800754c:	4a36      	ldr	r2, [pc, #216]	@ (8007628 <PCU_Tasks+0x294>)
 800754e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	4413      	add	r3, r2
 8007558:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80ef 	beq.w	8007742 <PCU_Tasks+0x3ae>
        // Increment consecutive timeout counter
        module[index].consecutiveTimeouts++;
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	4930      	ldr	r1, [pc, #192]	@ (8007628 <PCU_Tasks+0x294>)
 8007568:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800756c:	fb03 f202 	mul.w	r2, r3, r2
 8007570:	440a      	add	r2, r1
 8007572:	f202 42c3 	addw	r2, r2, #1219	@ 0x4c3
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	3201      	adds	r2, #1
 800757a:	b2d0      	uxtb	r0, r2
 800757c:	4a2a      	ldr	r2, [pc, #168]	@ (8007628 <PCU_Tasks+0x294>)
 800757e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800758c:	4602      	mov	r2, r0
 800758e:	701a      	strb	r2, [r3, #0]
        
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007590:	7ffb      	ldrb	r3, [r7, #31]
 8007592:	4a25      	ldr	r2, [pc, #148]	@ (8007628 <PCU_Tasks+0x294>)
 8007594:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d96b      	bls.n	8007680 <PCU_Tasks+0x2ec>
          // Max timeouts reached - deregister the module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 80075a8:	4b1c      	ldr	r3, [pc, #112]	@ (800761c <PCU_Tasks+0x288>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0309 	and.w	r3, r3, #9
 80075b0:	2b09      	cmp	r3, #9
 80075b2:	d111      	bne.n	80075d8 <PCU_Tasks+0x244>
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
                    module[index].moduleId, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 80075b4:	7ffb      	ldrb	r3, [r7, #31]
 80075b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <PCU_Tasks+0x294>)
 80075b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	3308      	adds	r3, #8
 80075c4:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
 80075c6:	461a      	mov	r2, r3
 80075c8:	2303      	movs	r3, #3
 80075ca:	4918      	ldr	r1, [pc, #96]	@ (800762c <PCU_Tasks+0x298>)
 80075cc:	480d      	ldr	r0, [pc, #52]	@ (8007604 <PCU_Tasks+0x270>)
 80075ce:	f00d f999 	bl	8014904 <siprintf>
            serialOut(tempBuffer);
 80075d2:	480c      	ldr	r0, [pc, #48]	@ (8007604 <PCU_Tasks+0x270>)
 80075d4:	f7fe f832 	bl	800563c <serialOut>
          }
          
          // Send deregister message to the module
          MCU_DeRegisterModule(module[index].moduleId);
 80075d8:	7ffb      	ldrb	r3, [r7, #31]
 80075da:	4a13      	ldr	r2, [pc, #76]	@ (8007628 <PCU_Tasks+0x294>)
 80075dc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3308      	adds	r3, #8
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 ff04 	bl	80093f8 <MCU_DeRegisterModule>
          
          // Remove module from pack
          // Shift remaining modules down
          for(int j = index; j < pack.moduleCount - 1; j++){
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e034      	b.n	8007660 <PCU_Tasks+0x2cc>
 80075f6:	bf00      	nop
 80075f8:	20000d28 	.word	0x20000d28
 80075fc:	2000a66c 	.word	0x2000a66c
 8007600:	0801894c 	.word	0x0801894c
 8007604:	20000b5c 	.word	0x20000b5c
 8007608:	200005d0 	.word	0x200005d0
 800760c:	20000d2c 	.word	0x20000d2c
 8007610:	20000d20 	.word	0x20000d20
 8007614:	20000d1e 	.word	0x20000d1e
 8007618:	20000d1c 	.word	0x20000d1c
 800761c:	2000000c 	.word	0x2000000c
 8007620:	08018988 	.word	0x08018988
 8007624:	080189ac 	.word	0x080189ac
 8007628:	20000dec 	.word	0x20000dec
 800762c:	080189d0 	.word	0x080189d0
            module[j] = module[j + 1];
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3301      	adds	r3, #1
 8007634:	49a6      	ldr	r1, [pc, #664]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800763c:	fb00 f202 	mul.w	r2, r0, r2
 8007640:	1888      	adds	r0, r1, r2
 8007642:	4aa3      	ldr	r2, [pc, #652]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007644:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	4413      	add	r3, r2
 800764e:	4619      	mov	r1, r3
 8007650:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007654:	461a      	mov	r2, r3
 8007656:	f00e f8c8 	bl	80157ea <memcpy>
          for(int j = index; j < pack.moduleCount - 1; j++){
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	3301      	adds	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	4b9c      	ldr	r3, [pc, #624]	@ (80078d4 <PCU_Tasks+0x540>)
 8007662:	7d1b      	ldrb	r3, [r3, #20]
 8007664:	3b01      	subs	r3, #1
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	dbe1      	blt.n	8007630 <PCU_Tasks+0x29c>
          }
          pack.moduleCount--;
 800766c:	4b99      	ldr	r3, [pc, #612]	@ (80078d4 <PCU_Tasks+0x540>)
 800766e:	7d1b      	ldrb	r3, [r3, #20]
 8007670:	3b01      	subs	r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	4b97      	ldr	r3, [pc, #604]	@ (80078d4 <PCU_Tasks+0x540>)
 8007676:	751a      	strb	r2, [r3, #20]
          
          // Adjust index since we removed a module
          index--;  // Always decrement to recheck this index
 8007678:	7ffb      	ldrb	r3, [r7, #31]
 800767a:	3b01      	subs	r3, #1
 800767c:	77fb      	strb	r3, [r7, #31]
          continue;  // Skip to next iteration
 800767e:	e10c      	b.n	800789a <PCU_Tasks+0x506>
        }
        else if( module[index].faultCode.commsError == false){
 8007680:	7ffb      	ldrb	r3, [r7, #31]
 8007682:	4a93      	ldr	r2, [pc, #588]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007684:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	4413      	add	r3, r2
 800768e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007692:	789b      	ldrb	r3, [r3, #2]
 8007694:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 80fc 	bne.w	8007898 <PCU_Tasks+0x504>
          // First timeout or still under limit - isolate module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 80076a0:	4b8d      	ldr	r3, [pc, #564]	@ (80078d8 <PCU_Tasks+0x544>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f003 0309 	and.w	r3, r3, #9
 80076a8:	2b09      	cmp	r3, #9
 80076aa:	d11f      	bne.n	80076ec <PCU_Tasks+0x358>
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 80076ac:	7ffb      	ldrb	r3, [r7, #31]
 80076ae:	4a88      	ldr	r2, [pc, #544]	@ (80078d0 <PCU_Tasks+0x53c>)
 80076b0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	4413      	add	r3, r2
 80076ba:	3308      	adds	r3, #8
 80076bc:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 80076be:	4618      	mov	r0, r3
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 80076c0:	7ffb      	ldrb	r3, [r7, #31]
 80076c2:	4a83      	ldr	r2, [pc, #524]	@ (80078d0 <PCU_Tasks+0x53c>)
 80076c4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80076d2:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 80076d4:	461a      	mov	r2, r3
 80076d6:	2303      	movs	r3, #3
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4613      	mov	r3, r2
 80076dc:	4602      	mov	r2, r0
 80076de:	497f      	ldr	r1, [pc, #508]	@ (80078dc <PCU_Tasks+0x548>)
 80076e0:	487f      	ldr	r0, [pc, #508]	@ (80078e0 <PCU_Tasks+0x54c>)
 80076e2:	f00d f90f 	bl	8014904 <siprintf>
            serialOut(tempBuffer);
 80076e6:	487e      	ldr	r0, [pc, #504]	@ (80078e0 <PCU_Tasks+0x54c>)
 80076e8:	f7fd ffa8 	bl	800563c <serialOut>
          }
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 80076ec:	4b79      	ldr	r3, [pc, #484]	@ (80078d4 <PCU_Tasks+0x540>)
 80076ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d10d      	bne.n	8007712 <PCU_Tasks+0x37e>
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	4a75      	ldr	r2, [pc, #468]	@ (80078d0 <PCU_Tasks+0x53c>)
 80076fa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	3327      	adds	r3, #39	@ 0x27
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d102      	bne.n	8007712 <PCU_Tasks+0x37e>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 800770c:	4b71      	ldr	r3, [pc, #452]	@ (80078d4 <PCU_Tasks+0x540>)
 800770e:	2200      	movs	r2, #0
 8007710:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	4a6e      	ldr	r2, [pc, #440]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007716:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	4413      	add	r3, r2
 8007720:	3328      	adds	r3, #40	@ 0x28
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 8007726:	7ffb      	ldrb	r3, [r7, #31]
 8007728:	4a69      	ldr	r2, [pc, #420]	@ (80078d0 <PCU_Tasks+0x53c>)
 800772a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007738:	7893      	ldrb	r3, [r2, #2]
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	7093      	strb	r3, [r2, #2]
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007740:	e0aa      	b.n	8007898 <PCU_Tasks+0x504>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007748:	d94f      	bls.n	80077ea <PCU_Tasks+0x456>
 800774a:	7ffb      	ldrb	r3, [r7, #31]
 800774c:	4a60      	ldr	r2, [pc, #384]	@ (80078d0 <PCU_Tasks+0x53c>)
 800774e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f083 0301 	eor.w	r3, r3, #1
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d040      	beq.n	80077ea <PCU_Tasks+0x456>
        // Send State
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007768:	4b5b      	ldr	r3, [pc, #364]	@ (80078d8 <PCU_Tasks+0x544>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d015      	beq.n	80077a0 <PCU_Tasks+0x40c>
 8007774:	4b57      	ldr	r3, [pc, #348]	@ (80078d4 <PCU_Tasks+0x540>)
 8007776:	7d1b      	ldrb	r3, [r3, #20]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d911      	bls.n	80077a0 <PCU_Tasks+0x40c>
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
                  module[index].moduleId, index); 
 800777c:	7ffb      	ldrb	r3, [r7, #31]
 800777e:	4a54      	ldr	r2, [pc, #336]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007780:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	4413      	add	r3, r2
 800778a:	3308      	adds	r3, #8
 800778c:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
 800778e:	461a      	mov	r2, r3
 8007790:	7ffb      	ldrb	r3, [r7, #31]
 8007792:	4954      	ldr	r1, [pc, #336]	@ (80078e4 <PCU_Tasks+0x550>)
 8007794:	4852      	ldr	r0, [pc, #328]	@ (80078e0 <PCU_Tasks+0x54c>)
 8007796:	f00d f8b5 	bl	8014904 <siprintf>
          serialOut(tempBuffer);
 800779a:	4851      	ldr	r0, [pc, #324]	@ (80078e0 <PCU_Tasks+0x54c>)
 800779c:	f7fd ff4e 	bl	800563c <serialOut>
        }
        MCU_RequestModuleStatus(module[index].moduleId);
 80077a0:	7ffb      	ldrb	r3, [r7, #31]
 80077a2:	4a4b      	ldr	r2, [pc, #300]	@ (80078d0 <PCU_Tasks+0x53c>)
 80077a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	3308      	adds	r3, #8
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f002 fb52 	bl	8009e5c <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 80077b8:	7ffb      	ldrb	r3, [r7, #31]
 80077ba:	4a45      	ldr	r2, [pc, #276]	@ (80078d0 <PCU_Tasks+0x53c>)
 80077bc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d064      	beq.n	800789a <PCU_Tasks+0x506>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 80077d0:	7ffb      	ldrb	r3, [r7, #31]
 80077d2:	4a3f      	ldr	r2, [pc, #252]	@ (80078d0 <PCU_Tasks+0x53c>)
 80077d4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	3308      	adds	r3, #8
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 ffde 	bl	80097a4 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 80077e8:	e057      	b.n	800789a <PCU_Tasks+0x506>
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 80077ea:	7ffb      	ldrb	r3, [r7, #31]
 80077ec:	4a38      	ldr	r2, [pc, #224]	@ (80078d0 <PCU_Tasks+0x53c>)
 80077ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80077f2:	fb01 f303 	mul.w	r3, r1, r3
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80077fc:	789b      	ldrb	r3, [r3, #2]
 80077fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10c      	bne.n	8007822 <PCU_Tasks+0x48e>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8007808:	7ffb      	ldrb	r3, [r7, #31]
 800780a:	4a31      	ldr	r2, [pc, #196]	@ (80078d0 <PCU_Tasks+0x53c>)
 800780c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007810:	fb01 f303 	mul.w	r3, r1, r3
 8007814:	4413      	add	r3, r2
 8007816:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800781a:	7893      	ldrb	r3, [r2, #2]
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	7093      	strb	r3, [r2, #2]
        }
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1 && index == 0){ 
 8007822:	4b2d      	ldr	r3, [pc, #180]	@ (80078d8 <PCU_Tasks+0x544>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d035      	beq.n	800789a <PCU_Tasks+0x506>
 800782e:	4b29      	ldr	r3, [pc, #164]	@ (80078d4 <PCU_Tasks+0x540>)
 8007830:	7d1b      	ldrb	r3, [r3, #20]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d931      	bls.n	800789a <PCU_Tasks+0x506>
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d12e      	bne.n	800789a <PCU_Tasks+0x506>
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 800783c:	7ffb      	ldrb	r3, [r7, #31]
 800783e:	4a24      	ldr	r2, [pc, #144]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007840:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	4413      	add	r3, r2
 800784a:	3308      	adds	r3, #8
 800784c:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 800784e:	461c      	mov	r4, r3
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 8007850:	7ffb      	ldrb	r3, [r7, #31]
 8007852:	4a1f      	ldr	r2, [pc, #124]	@ (80078d0 <PCU_Tasks+0x53c>)
 8007854:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	4413      	add	r3, r2
 800785e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8007862:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 8007864:	4618      	mov	r0, r3
                  module[index].faultCode.commsError); 
 8007866:	7ffb      	ldrb	r3, [r7, #31]
 8007868:	4a19      	ldr	r2, [pc, #100]	@ (80078d0 <PCU_Tasks+0x53c>)
 800786a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800786e:	fb01 f303 	mul.w	r3, r1, r3
 8007872:	4413      	add	r3, r2
 8007874:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007878:	789b      	ldrb	r3, [r3, #2]
 800787a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800787e:	b2db      	uxtb	r3, r3
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	9000      	str	r0, [sp, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4622      	mov	r2, r4
 8007888:	4917      	ldr	r1, [pc, #92]	@ (80078e8 <PCU_Tasks+0x554>)
 800788a:	4815      	ldr	r0, [pc, #84]	@ (80078e0 <PCU_Tasks+0x54c>)
 800788c:	f00d f83a 	bl	8014904 <siprintf>
          serialOut(tempBuffer);
 8007890:	4813      	ldr	r0, [pc, #76]	@ (80078e0 <PCU_Tasks+0x54c>)
 8007892:	f7fd fed3 	bl	800563c <serialOut>
 8007896:	e000      	b.n	800789a <PCU_Tasks+0x506>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007898:	bf00      	nop
    for (index =0;index < pack.moduleCount;index++){
 800789a:	7ffb      	ldrb	r3, [r7, #31]
 800789c:	3301      	adds	r3, #1
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <PCU_Tasks+0x540>)
 80078a2:	7d1b      	ldrb	r3, [r3, #20]
 80078a4:	7ffa      	ldrb	r2, [r7, #31]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	f4ff ae3d 	bcc.w	8007526 <PCU_Tasks+0x192>
        }
      }
    }
    
    // Round-robin polling of modules
    if(pack.moduleCount > 0){
 80078ac:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <PCU_Tasks+0x540>)
 80078ae:	7d1b      	ldrb	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 808e 	beq.w	80079d2 <PCU_Tasks+0x63e>
      uint32_t timeSinceLastPoll = MCU_ElapsedTicks(&lastStatusPoll);
 80078b6:	480d      	ldr	r0, [pc, #52]	@ (80078ec <PCU_Tasks+0x558>)
 80078b8:	f003 fd20 	bl	800b2fc <MCU_ElapsedTicks>
 80078bc:	60b8      	str	r0, [r7, #8]
      
      // Poll one module every 100ms to distribute the load
      if(timeSinceLastPoll > 100){
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b64      	cmp	r3, #100	@ 0x64
 80078c2:	f240 8086 	bls.w	80079d2 <PCU_Tasks+0x63e>
        // Find the next valid module to poll
        uint8_t modulesToCheck = pack.moduleCount;
 80078c6:	4b03      	ldr	r3, [pc, #12]	@ (80078d4 <PCU_Tasks+0x540>)
 80078c8:	7d1b      	ldrb	r3, [r3, #20]
 80078ca:	74fb      	strb	r3, [r7, #19]
        while(modulesToCheck > 0){
 80078cc:	e07e      	b.n	80079cc <PCU_Tasks+0x638>
 80078ce:	bf00      	nop
 80078d0:	20000dec 	.word	0x20000dec
 80078d4:	2000a66c 	.word	0x2000a66c
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	08018a1c 	.word	0x08018a1c
 80078e0:	20000b5c 	.word	0x20000b5c
 80078e4:	08018a54 	.word	0x08018a54
 80078e8:	08018a94 	.word	0x08018a94
 80078ec:	2000a6c0 	.word	0x2000a6c0
          if(nextModuleToPoll >= pack.moduleCount){
 80078f0:	4b89      	ldr	r3, [pc, #548]	@ (8007b18 <PCU_Tasks+0x784>)
 80078f2:	7d1a      	ldrb	r2, [r3, #20]
 80078f4:	4b89      	ldr	r3, [pc, #548]	@ (8007b1c <PCU_Tasks+0x788>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d802      	bhi.n	8007902 <PCU_Tasks+0x56e>
            nextModuleToPoll = 0;
 80078fc:	4b87      	ldr	r3, [pc, #540]	@ (8007b1c <PCU_Tasks+0x788>)
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
          }
          
          // Only poll modules that are not in timeout/error state
          if(module[nextModuleToPoll].statusPending == false && 
 8007902:	4b86      	ldr	r3, [pc, #536]	@ (8007b1c <PCU_Tasks+0x788>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4619      	mov	r1, r3
 8007908:	4a85      	ldr	r2, [pc, #532]	@ (8007b20 <PCU_Tasks+0x78c>)
 800790a:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	f083 0301 	eor.w	r3, r3, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d04a      	beq.n	80079ba <PCU_Tasks+0x626>
             module[nextModuleToPoll].faultCode.commsError == false){
 8007924:	4b7d      	ldr	r3, [pc, #500]	@ (8007b1c <PCU_Tasks+0x788>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	4a7d      	ldr	r2, [pc, #500]	@ (8007b20 <PCU_Tasks+0x78c>)
 800792c:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	4413      	add	r3, r2
 8007936:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800793a:	789b      	ldrb	r3, [r3, #2]
 800793c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007940:	b2db      	uxtb	r3, r3
          if(module[nextModuleToPoll].statusPending == false && 
 8007942:	2b00      	cmp	r3, #0
 8007944:	d139      	bne.n	80079ba <PCU_Tasks+0x626>
            /*if(((debugLevel & DBG_MCU) == DBG_MCU)){ 
              sprintf(tempBuffer,"MCU DEBUG - Round-robin polling module ID=%02x (index=%d)", 
                      module[nextModuleToPoll].moduleId, nextModuleToPoll); 
              serialOut(tempBuffer);
            }*/
            MCU_RequestModuleStatus(module[nextModuleToPoll].moduleId);
 8007946:	4b75      	ldr	r3, [pc, #468]	@ (8007b1c <PCU_Tasks+0x788>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	4a74      	ldr	r2, [pc, #464]	@ (8007b20 <PCU_Tasks+0x78c>)
 800794e:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	3308      	adds	r3, #8
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f002 fa7d 	bl	8009e5c <MCU_RequestModuleStatus>
            
            // Have we received the hardware info?
            if(module[nextModuleToPoll].hardwarePending){
 8007962:	4b6e      	ldr	r3, [pc, #440]	@ (8007b1c <PCU_Tasks+0x788>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	4a6d      	ldr	r2, [pc, #436]	@ (8007b20 <PCU_Tasks+0x78c>)
 800796a:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00d      	beq.n	800799a <PCU_Tasks+0x606>
              MCU_RequestHardware(module[nextModuleToPoll].moduleId);
 800797e:	4b67      	ldr	r3, [pc, #412]	@ (8007b1c <PCU_Tasks+0x788>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	4a66      	ldr	r2, [pc, #408]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007986:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3308      	adds	r3, #8
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 ff05 	bl	80097a4 <MCU_RequestHardware>
            }
            
            // Move to next module for next poll
            nextModuleToPoll++;
 800799a:	4b60      	ldr	r3, [pc, #384]	@ (8007b1c <PCU_Tasks+0x788>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b5e      	ldr	r3, [pc, #376]	@ (8007b1c <PCU_Tasks+0x788>)
 80079a4:	701a      	strb	r2, [r3, #0]
            
            // Update last poll time
            lastStatusPoll.ticks = htim1.Instance->CNT;
 80079a6:	4b5f      	ldr	r3, [pc, #380]	@ (8007b24 <PCU_Tasks+0x790>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007b28 <PCU_Tasks+0x794>)
 80079ae:	6013      	str	r3, [r2, #0]
            lastStatusPoll.overflows = etTimerOverflows;
 80079b0:	4b5e      	ldr	r3, [pc, #376]	@ (8007b2c <PCU_Tasks+0x798>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a5c      	ldr	r2, [pc, #368]	@ (8007b28 <PCU_Tasks+0x794>)
 80079b6:	6053      	str	r3, [r2, #4]
            break;
 80079b8:	e00b      	b.n	80079d2 <PCU_Tasks+0x63e>
          }
          
          nextModuleToPoll++;
 80079ba:	4b58      	ldr	r3, [pc, #352]	@ (8007b1c <PCU_Tasks+0x788>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4b56      	ldr	r3, [pc, #344]	@ (8007b1c <PCU_Tasks+0x788>)
 80079c4:	701a      	strb	r2, [r3, #0]
          modulesToCheck--;
 80079c6:	7cfb      	ldrb	r3, [r7, #19]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	74fb      	strb	r3, [r7, #19]
        while(modulesToCheck > 0){
 80079cc:	7cfb      	ldrb	r3, [r7, #19]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d18e      	bne.n	80078f0 <PCU_Tasks+0x55c>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 80079d2:	4b51      	ldr	r3, [pc, #324]	@ (8007b18 <PCU_Tasks+0x784>)
 80079d4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80079d8:	2b01      	cmp	r3, #1
 80079da:	f040 8122 	bne.w	8007c22 <PCU_Tasks+0x88e>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 80079de:	2300      	movs	r3, #0
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e105      	b.n	8007bf0 <PCU_Tasks+0x85c>
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 80079e4:	7ffb      	ldrb	r3, [r7, #31]
 80079e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b20 <PCU_Tasks+0x78c>)
 80079e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80079f6:	789b      	ldrb	r3, [r3, #2]
 80079f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d123      	bne.n	8007a4a <PCU_Tasks+0x6b6>
        if (module[index].currentState != moduleOff){
 8007a02:	7ffb      	ldrb	r3, [r7, #31]
 8007a04:	4a46      	ldr	r2, [pc, #280]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a06:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a0a:	fb01 f303 	mul.w	r3, r1, r3
 8007a0e:	4413      	add	r3, r2
 8007a10:	3327      	adds	r3, #39	@ 0x27
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80e8 	beq.w	8007bea <PCU_Tasks+0x856>
          // Turn off the module
          module[index].nextState = moduleOff;
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
 8007a1c:	4a40      	ldr	r2, [pc, #256]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a1e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	3328      	adds	r3, #40	@ 0x28
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8007a2e:	7ffb      	ldrb	r3, [r7, #31]
 8007a30:	4a3b      	ldr	r2, [pc, #236]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a32:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007a40:	7893      	ldrb	r3, [r2, #2]
 8007a42:	f023 0304 	bic.w	r3, r3, #4
 8007a46:	7093      	strb	r3, [r2, #2]
 8007a48:	e0cf      	b.n	8007bea <PCU_Tasks+0x856>
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007a4a:	7ffb      	ldrb	r3, [r7, #31]
 8007a4c:	4a34      	ldr	r2, [pc, #208]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a4e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a52:	fb01 f303 	mul.w	r3, r1, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007a5c:	789b      	ldrb	r3, [r3, #2]
 8007a5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 80c0 	bne.w	8007bea <PCU_Tasks+0x856>
 8007a6a:	7ffb      	ldrb	r3, [r7, #31]
 8007a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a6e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007a7c:	789b      	ldrb	r3, [r3, #2]
 8007a7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 80b0 	bne.w	8007bea <PCU_Tasks+0x856>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
 8007a8c:	4a24      	ldr	r2, [pc, #144]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007a8e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	332a      	adds	r3, #42	@ 0x2a
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d147      	bne.n	8007b30 <PCU_Tasks+0x79c>
 8007aa0:	7ffb      	ldrb	r3, [r7, #31]
 8007aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007aa4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	4413      	add	r3, r2
 8007aae:	3329      	adds	r3, #41	@ 0x29
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	7ffb      	ldrb	r3, [r7, #31]
 8007ab4:	491a      	ldr	r1, [pc, #104]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007ab6:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007aba:	fb00 f303 	mul.w	r3, r0, r3
 8007abe:	440b      	add	r3, r1
 8007ac0:	3328      	adds	r3, #40	@ 0x28
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d133      	bne.n	8007b30 <PCU_Tasks+0x79c>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007ac8:	7ffb      	ldrb	r3, [r7, #31]
 8007aca:	4a15      	ldr	r2, [pc, #84]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007acc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f003 fb96 	bl	800b20c <MCU_TicksSinceLastStateTx>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ae6:	f240 8080 	bls.w	8007bea <PCU_Tasks+0x856>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007aea:	7ffb      	ldrb	r3, [r7, #31]
 8007aec:	4a0c      	ldr	r2, [pc, #48]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007aee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	4413      	add	r3, r2
 8007af8:	3308      	adds	r3, #8
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	7ffb      	ldrb	r3, [r7, #31]
 8007afe:	4908      	ldr	r1, [pc, #32]	@ (8007b20 <PCU_Tasks+0x78c>)
 8007b00:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007b04:	fb00 f303 	mul.w	r3, r0, r3
 8007b08:	440b      	add	r3, r1
 8007b0a:	3328      	adds	r3, #40	@ 0x28
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f003 f895 	bl	800ac40 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007b16:	e068      	b.n	8007bea <PCU_Tasks+0x856>
 8007b18:	2000a66c 	.word	0x2000a66c
 8007b1c:	2000a6c8 	.word	0x2000a6c8
 8007b20:	20000dec 	.word	0x20000dec
 8007b24:	200005d0 	.word	0x200005d0
 8007b28:	2000a6c0 	.word	0x2000a6c0
 8007b2c:	20000d20 	.word	0x20000d20
          }
        }else {
          if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007b30:	4bb0      	ldr	r3, [pc, #704]	@ (8007df4 <PCU_Tasks+0xa60>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d040      	beq.n	8007bbe <PCU_Tasks+0x82a>
 8007b3c:	4bae      	ldr	r3, [pc, #696]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007b3e:	7d1b      	ldrb	r3, [r3, #20]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d93c      	bls.n	8007bbe <PCU_Tasks+0x82a>
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007b44:	7ffb      	ldrb	r3, [r7, #31]
 8007b46:	4aad      	ldr	r2, [pc, #692]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007b48:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b4c:	fb01 f303 	mul.w	r3, r1, r3
 8007b50:	4413      	add	r3, r2
 8007b52:	3308      	adds	r3, #8
 8007b54:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007b56:	461d      	mov	r5, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007b58:	7ffb      	ldrb	r3, [r7, #31]
 8007b5a:	4aa8      	ldr	r2, [pc, #672]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007b5c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	4413      	add	r3, r2
 8007b66:	3327      	adds	r3, #39	@ 0x27
 8007b68:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007b6a:	461e      	mov	r6, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007b6c:	7ffb      	ldrb	r3, [r7, #31]
 8007b6e:	4aa3      	ldr	r2, [pc, #652]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007b70:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	4413      	add	r3, r2
 8007b7a:	3328      	adds	r3, #40	@ 0x28
 8007b7c:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007b7e:	4618      	mov	r0, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007b80:	7ffb      	ldrb	r3, [r7, #31]
 8007b82:	4a9e      	ldr	r2, [pc, #632]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007b84:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3329      	adds	r3, #41	@ 0x29
 8007b90:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007b92:	461c      	mov	r4, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007b94:	7ffb      	ldrb	r3, [r7, #31]
 8007b96:	4a99      	ldr	r2, [pc, #612]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007b98:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	332a      	adds	r3, #42	@ 0x2a
 8007ba4:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	9401      	str	r4, [sp, #4]
 8007baa:	9000      	str	r0, [sp, #0]
 8007bac:	4633      	mov	r3, r6
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4993      	ldr	r1, [pc, #588]	@ (8007e00 <PCU_Tasks+0xa6c>)
 8007bb2:	4894      	ldr	r0, [pc, #592]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007bb4:	f00c fea6 	bl	8014904 <siprintf>
            serialOut(tempBuffer);
 8007bb8:	4892      	ldr	r0, [pc, #584]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007bba:	f7fd fd3f 	bl	800563c <serialOut>
          }
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007bbe:	7ffb      	ldrb	r3, [r7, #31]
 8007bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007bc2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007bc6:	fb01 f303 	mul.w	r3, r1, r3
 8007bca:	4413      	add	r3, r2
 8007bcc:	3308      	adds	r3, #8
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	7ffb      	ldrb	r3, [r7, #31]
 8007bd2:	498a      	ldr	r1, [pc, #552]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007bd4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007bd8:	fb00 f303 	mul.w	r3, r0, r3
 8007bdc:	440b      	add	r3, r1
 8007bde:	3328      	adds	r3, #40	@ 0x28
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f003 f82b 	bl	800ac40 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007bea:	7ffb      	ldrb	r3, [r7, #31]
 8007bec:	3301      	adds	r3, #1
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	4b81      	ldr	r3, [pc, #516]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007bf2:	7d1b      	ldrb	r3, [r3, #20]
 8007bf4:	7ffa      	ldrb	r2, [r7, #31]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	f4ff aef4 	bcc.w	80079e4 <PCU_Tasks+0x650>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007bfc:	4b82      	ldr	r3, [pc, #520]	@ (8007e08 <PCU_Tasks+0xa74>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 82cd 	beq.w	80081a0 <PCU_Tasks+0xe0c>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8007c06:	f005 fce5 	bl	800d5d4 <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8007c0a:	f005 fe15 	bl	800d838 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8007c0e:	f005 feb3 	bl	800d978 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8007c12:	f005 ff45 	bl	800daa0 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8007c16:	f005 ffd7 	bl	800dbc8 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8007c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e08 <PCU_Tasks+0xa74>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8007c20:	e2be      	b.n	80081a0 <PCU_Tasks+0xe0c>
  } else if(pack.controlMode == packMode){
 8007c22:	4b75      	ldr	r3, [pc, #468]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007c24:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 82b9 	bne.w	80081a0 <PCU_Tasks+0xe0c>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8007c2e:	4b72      	ldr	r3, [pc, #456]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d005      	beq.n	8007c44 <PCU_Tasks+0x8b0>
 8007c38:	4b6f      	ldr	r3, [pc, #444]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	f040 8141 	bne.w	8007ec6 <PCU_Tasks+0xb32>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8007c44:	4b6c      	ldr	r3, [pc, #432]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007c46:	7e9b      	ldrb	r3, [r3, #26]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 808f 	bne.w	8007d6c <PCU_Tasks+0x9d8>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8007c4e:	4b69      	ldr	r3, [pc, #420]	@ (8007df4 <PCU_Tasks+0xa60>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8007c56:	2b88      	cmp	r3, #136	@ 0x88
 8007c58:	d115      	bne.n	8007c86 <PCU_Tasks+0x8f2>
 8007c5a:	4b67      	ldr	r3, [pc, #412]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007c5c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007c60:	4a6a      	ldr	r2, [pc, #424]	@ (8007e0c <PCU_Tasks+0xa78>)
 8007c62:	fba2 1203 	umull	r1, r2, r2, r3
 8007c66:	0b12      	lsrs	r2, r2, #12
 8007c68:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007c6c:	fb01 f202 	mul.w	r2, r1, r2
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <PCU_Tasks+0x8f2>
 8007c78:	4965      	ldr	r1, [pc, #404]	@ (8007e10 <PCU_Tasks+0xa7c>)
 8007c7a:	4862      	ldr	r0, [pc, #392]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007c7c:	f00c fe42 	bl	8014904 <siprintf>
 8007c80:	4860      	ldr	r0, [pc, #384]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007c82:	f7fd fcdb 	bl	800563c <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8007c86:	f002 f981 	bl	8009f8c <MCU_FindMaxVoltageModule>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d12f      	bne.n	8007cf4 <PCU_Tasks+0x960>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8007c94:	4b57      	ldr	r3, [pc, #348]	@ (8007df4 <PCU_Tasks+0xa60>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 0309 	and.w	r3, r3, #9
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d115      	bne.n	8007ccc <PCU_Tasks+0x938>
 8007ca0:	4b55      	ldr	r3, [pc, #340]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007ca2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007ca6:	4a59      	ldr	r2, [pc, #356]	@ (8007e0c <PCU_Tasks+0xa78>)
 8007ca8:	fba2 1203 	umull	r1, r2, r2, r3
 8007cac:	0b12      	lsrs	r2, r2, #12
 8007cae:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007cb2:	fb01 f202 	mul.w	r2, r1, r2
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <PCU_Tasks+0x938>
 8007cbe:	4955      	ldr	r1, [pc, #340]	@ (8007e14 <PCU_Tasks+0xa80>)
 8007cc0:	4850      	ldr	r0, [pc, #320]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007cc2:	f00c fe1f 	bl	8014904 <siprintf>
 8007cc6:	484f      	ldr	r0, [pc, #316]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007cc8:	f7fd fcb8 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007cce:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	4b48      	ldr	r3, [pc, #288]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007cd8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007cdc:	4b46      	ldr	r3, [pc, #280]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007cde:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007ce2:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d940      	bls.n	8007d6c <PCU_Tasks+0x9d8>
 8007cea:	4b43      	ldr	r3, [pc, #268]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007cf2:	e03b      	b.n	8007d6c <PCU_Tasks+0x9d8>
        }else if (moduleId == pack.moduleCount +1 ){
 8007cf4:	79fa      	ldrb	r2, [r7, #7]
 8007cf6:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007cf8:	7d1b      	ldrb	r3, [r3, #20]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d12f      	bne.n	8007d60 <PCU_Tasks+0x9cc>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8007d00:	4b3c      	ldr	r3, [pc, #240]	@ (8007df4 <PCU_Tasks+0xa60>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 0309 	and.w	r3, r3, #9
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d115      	bne.n	8007d38 <PCU_Tasks+0x9a4>
 8007d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d0e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d12:	4a3e      	ldr	r2, [pc, #248]	@ (8007e0c <PCU_Tasks+0xa78>)
 8007d14:	fba2 1203 	umull	r1, r2, r2, r3
 8007d18:	0b12      	lsrs	r2, r2, #12
 8007d1a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d1e:	fb01 f202 	mul.w	r2, r1, r2
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <PCU_Tasks+0x9a4>
 8007d2a:	493b      	ldr	r1, [pc, #236]	@ (8007e18 <PCU_Tasks+0xa84>)
 8007d2c:	4835      	ldr	r0, [pc, #212]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007d2e:	f00c fde9 	bl	8014904 <siprintf>
 8007d32:	4834      	ldr	r0, [pc, #208]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007d34:	f7fd fc82 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007d38:	4b2f      	ldr	r3, [pc, #188]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d3a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d3e:	3301      	adds	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	4b2d      	ldr	r3, [pc, #180]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d44:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007d48:	4b2b      	ldr	r3, [pc, #172]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d4a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d4e:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d90a      	bls.n	8007d6c <PCU_Tasks+0x9d8>
 8007d56:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007d5e:	e005      	b.n	8007d6c <PCU_Tasks+0x9d8>
          pack.powerStatus.firstModuleId = moduleId;
 8007d60:	4a25      	ldr	r2, [pc, #148]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8007d66:	4b24      	ldr	r3, [pc, #144]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8007d6c:	4b22      	ldr	r3, [pc, #136]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d6e:	7e9b      	ldrb	r3, [r3, #26]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	f040 80a8 	bne.w	8007ec6 <PCU_Tasks+0xb32>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8007d76:	4b20      	ldr	r3, [pc, #128]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d78:	7e5b      	ldrb	r3, [r3, #25]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f003 f99a 	bl	800b0b4 <MCU_ModuleIndexFromId>
 8007d80:	4603      	mov	r3, r0
 8007d82:	77bb      	strb	r3, [r7, #30]
        if (firstModuleIndex != pack.moduleCount){
 8007d84:	4b1c      	ldr	r3, [pc, #112]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007d86:	7d1b      	ldrb	r3, [r3, #20]
 8007d88:	7fba      	ldrb	r2, [r7, #30]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	f000 808e 	beq.w	8007eac <PCU_Tasks+0xb18>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8007d90:	7fbb      	ldrb	r3, [r7, #30]
 8007d92:	4a1a      	ldr	r2, [pc, #104]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007d94:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007da2:	789b      	ldrb	r3, [r3, #2]
 8007da4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d00e      	beq.n	8007dcc <PCU_Tasks+0xa38>
 8007dae:	7fbb      	ldrb	r3, [r7, #30]
 8007db0:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <PCU_Tasks+0xa68>)
 8007db2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007dc0:	789b      	ldrb	r3, [r3, #2]
 8007dc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d129      	bne.n	8007e20 <PCU_Tasks+0xa8c>
             pack.powerStatus.powerStage = stageSelectModule;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007dd2:	4b08      	ldr	r3, [pc, #32]	@ (8007df4 <PCU_Tasks+0xa60>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 0309 	and.w	r3, r3, #9
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d173      	bne.n	8007ec6 <PCU_Tasks+0xb32>
 8007dde:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <PCU_Tasks+0xa64>)
 8007de0:	7e5b      	ldrb	r3, [r3, #25]
 8007de2:	461a      	mov	r2, r3
 8007de4:	490d      	ldr	r1, [pc, #52]	@ (8007e1c <PCU_Tasks+0xa88>)
 8007de6:	4807      	ldr	r0, [pc, #28]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007de8:	f00c fd8c 	bl	8014904 <siprintf>
 8007dec:	4805      	ldr	r0, [pc, #20]	@ (8007e04 <PCU_Tasks+0xa70>)
 8007dee:	f7fd fc25 	bl	800563c <serialOut>
 8007df2:	e068      	b.n	8007ec6 <PCU_Tasks+0xb32>
 8007df4:	2000000c 	.word	0x2000000c
 8007df8:	2000a66c 	.word	0x2000a66c
 8007dfc:	20000dec 	.word	0x20000dec
 8007e00:	08018ad4 	.word	0x08018ad4
 8007e04:	20000b5c 	.word	0x20000b5c
 8007e08:	20000d26 	.word	0x20000d26
 8007e0c:	d1b71759 	.word	0xd1b71759
 8007e10:	08018b18 	.word	0x08018b18
 8007e14:	08018b4c 	.word	0x08018b4c
 8007e18:	08018b70 	.word	0x08018b70
 8007e1c:	08018b94 	.word	0x08018b94
          } else if (pack.vcuRequestedState == packOn){
 8007e20:	4bb4      	ldr	r3, [pc, #720]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d11d      	bne.n	8007e66 <PCU_Tasks+0xad2>
            if (module[firstModuleIndex].currentState == moduleOn){
 8007e2a:	7fbb      	ldrb	r3, [r7, #30]
 8007e2c:	4ab2      	ldr	r2, [pc, #712]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007e2e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e32:	fb01 f303 	mul.w	r3, r1, r3
 8007e36:	4413      	add	r3, r2
 8007e38:	3327      	adds	r3, #39	@ 0x27
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d107      	bne.n	8007e50 <PCU_Tasks+0xabc>
              pack.state = packOn;
 8007e40:	4bac      	ldr	r3, [pc, #688]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e42:	2203      	movs	r2, #3
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007e48:	4baa      	ldr	r3, [pc, #680]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	769a      	strb	r2, [r3, #26]
 8007e4e:	e03a      	b.n	8007ec6 <PCU_Tasks+0xb32>
                module[firstModuleIndex].nextState = moduleOn;
 8007e50:	7fbb      	ldrb	r3, [r7, #30]
 8007e52:	4aa9      	ldr	r2, [pc, #676]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007e54:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3328      	adds	r3, #40	@ 0x28
 8007e60:	2203      	movs	r2, #3
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e02f      	b.n	8007ec6 <PCU_Tasks+0xb32>
          } else if (pack.vcuRequestedState == packPrecharge){
 8007e66:	4ba3      	ldr	r3, [pc, #652]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d12a      	bne.n	8007ec6 <PCU_Tasks+0xb32>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8007e70:	7fbb      	ldrb	r3, [r7, #30]
 8007e72:	4aa1      	ldr	r2, [pc, #644]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007e74:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3327      	adds	r3, #39	@ 0x27
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d107      	bne.n	8007e96 <PCU_Tasks+0xb02>
              pack.state = packPrecharge;
 8007e86:	4b9b      	ldr	r3, [pc, #620]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e88:	2202      	movs	r2, #2
 8007e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007e8e:	4b99      	ldr	r3, [pc, #612]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007e90:	2202      	movs	r2, #2
 8007e92:	769a      	strb	r2, [r3, #26]
 8007e94:	e017      	b.n	8007ec6 <PCU_Tasks+0xb32>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007e96:	7fbb      	ldrb	r3, [r7, #30]
 8007e98:	4a97      	ldr	r2, [pc, #604]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007e9a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3328      	adds	r3, #40	@ 0x28
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e00c      	b.n	8007ec6 <PCU_Tasks+0xb32>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007eac:	4b93      	ldr	r3, [pc, #588]	@ (80080fc <PCU_Tasks+0xd68>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 0309 	and.w	r3, r3, #9
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d106      	bne.n	8007ec6 <PCU_Tasks+0xb32>
 8007eb8:	4991      	ldr	r1, [pc, #580]	@ (8008100 <PCU_Tasks+0xd6c>)
 8007eba:	4892      	ldr	r0, [pc, #584]	@ (8008104 <PCU_Tasks+0xd70>)
 8007ebc:	f00c fd22 	bl	8014904 <siprintf>
 8007ec0:	4890      	ldr	r0, [pc, #576]	@ (8008104 <PCU_Tasks+0xd70>)
 8007ec2:	f7fd fbbb 	bl	800563c <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e136      	b.n	800813a <PCU_Tasks+0xda6>
      if(module[index].faultCode.overCurrent == true){
 8007ecc:	7ffb      	ldrb	r3, [r7, #31]
 8007ece:	4a8a      	ldr	r2, [pc, #552]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007ed0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007ede:	789b      	ldrb	r3, [r3, #2]
 8007ee0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d127      	bne.n	8007f3a <PCU_Tasks+0xba6>
        if (pack.vcuRequestedState != packOff){
 8007eea:	4b82      	ldr	r3, [pc, #520]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <PCU_Tasks+0xb76>
          module[index].nextState = moduleStandby;
 8007ef4:	7ffb      	ldrb	r3, [r7, #31]
 8007ef6:	4a80      	ldr	r2, [pc, #512]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007ef8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007efc:	fb01 f303 	mul.w	r3, r1, r3
 8007f00:	4413      	add	r3, r2
 8007f02:	3328      	adds	r3, #40	@ 0x28
 8007f04:	2201      	movs	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e0ad      	b.n	8008066 <PCU_Tasks+0xcd2>
          module[index].nextState = moduleOff;
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	4a7a      	ldr	r2, [pc, #488]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007f0e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	3328      	adds	r3, #40	@ 0x28
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007f1e:	7ffb      	ldrb	r3, [r7, #31]
 8007f20:	4a75      	ldr	r2, [pc, #468]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007f22:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007f30:	7893      	ldrb	r3, [r2, #2]
 8007f32:	f023 0304 	bic.w	r3, r3, #4
 8007f36:	7093      	strb	r3, [r2, #2]
 8007f38:	e095      	b.n	8008066 <PCU_Tasks+0xcd2>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007f3e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007f4c:	789b      	ldrb	r3, [r3, #2]
 8007f4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8086 	bne.w	8008066 <PCU_Tasks+0xcd2>
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	4a66      	ldr	r2, [pc, #408]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007f5e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f62:	fb01 f303 	mul.w	r3, r1, r3
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007f6c:	789b      	ldrb	r3, [r3, #2]
 8007f6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d176      	bne.n	8008066 <PCU_Tasks+0xcd2>
        switch (pack.vcuRequestedState){
 8007f78:	4b5e      	ldr	r3, [pc, #376]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d870      	bhi.n	8008064 <PCU_Tasks+0xcd0>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <PCU_Tasks+0xbf4>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	0800803f 	.word	0x0800803f
 8007f8c:	08008019 	.word	0x08008019
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007f99 	.word	0x08007f99
            if(pack.state == packOn){
 8007f98:	4b56      	ldr	r3, [pc, #344]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d109      	bne.n	8007fb6 <PCU_Tasks+0xc22>
              module[index].nextState = moduleOn;
 8007fa2:	7ffb      	ldrb	r3, [r7, #31]
 8007fa4:	4a54      	ldr	r2, [pc, #336]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007fa6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007faa:	fb01 f303 	mul.w	r3, r1, r3
 8007fae:	4413      	add	r3, r2
 8007fb0:	3328      	adds	r3, #40	@ 0x28
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8007fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	d804      	bhi.n	8007fca <PCU_Tasks+0xc36>
 8007fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007fc8:	e04d      	b.n	8008066 <PCU_Tasks+0xcd2>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8007fca:	4b4a      	ldr	r3, [pc, #296]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fd0:	2bbe      	cmp	r3, #190	@ 0xbe
 8007fd2:	d904      	bls.n	8007fde <PCU_Tasks+0xc4a>
 8007fd4:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007fdc:	e043      	b.n	8008066 <PCU_Tasks+0xcd2>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 8007fde:	4b45      	ldr	r3, [pc, #276]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007fe6:	e03e      	b.n	8008066 <PCU_Tasks+0xcd2>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8007fe8:	4b42      	ldr	r3, [pc, #264]	@ (80080f4 <PCU_Tasks+0xd60>)
 8007fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d10d      	bne.n	800800e <PCU_Tasks+0xc7a>
 8007ff2:	7ffa      	ldrb	r2, [r7, #31]
 8007ff4:	7fbb      	ldrb	r3, [r7, #30]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d009      	beq.n	800800e <PCU_Tasks+0xc7a>
              module[index].nextState = moduleStandby;
 8007ffa:	7ffb      	ldrb	r3, [r7, #31]
 8007ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80080f8 <PCU_Tasks+0xd64>)
 8007ffe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	4413      	add	r3, r2
 8008008:	3328      	adds	r3, #40	@ 0x28
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 800800e:	4b39      	ldr	r3, [pc, #228]	@ (80080f4 <PCU_Tasks+0xd60>)
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008016:	e026      	b.n	8008066 <PCU_Tasks+0xcd2>
            module[index].nextState = moduleStandby;
 8008018:	7ffb      	ldrb	r3, [r7, #31]
 800801a:	4a37      	ldr	r2, [pc, #220]	@ (80080f8 <PCU_Tasks+0xd64>)
 800801c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	3328      	adds	r3, #40	@ 0x28
 8008028:	2201      	movs	r2, #1
 800802a:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 800802c:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <PCU_Tasks+0xd60>)
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8008034:	4b2f      	ldr	r3, [pc, #188]	@ (80080f4 <PCU_Tasks+0xd60>)
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 800803c:	e013      	b.n	8008066 <PCU_Tasks+0xcd2>
            module[index].nextState = moduleOff;
 800803e:	7ffb      	ldrb	r3, [r7, #31]
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <PCU_Tasks+0xd64>)
 8008042:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008046:	fb01 f303 	mul.w	r3, r1, r3
 800804a:	4413      	add	r3, r2
 800804c:	3328      	adds	r3, #40	@ 0x28
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 8008052:	4b28      	ldr	r3, [pc, #160]	@ (80080f4 <PCU_Tasks+0xd60>)
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 800805a:	4b26      	ldr	r3, [pc, #152]	@ (80080f4 <PCU_Tasks+0xd60>)
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008062:	e000      	b.n	8008066 <PCU_Tasks+0xcd2>
            break;
 8008064:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8008066:	7ffb      	ldrb	r3, [r7, #31]
 8008068:	4a23      	ldr	r2, [pc, #140]	@ (80080f8 <PCU_Tasks+0xd64>)
 800806a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	4413      	add	r3, r2
 8008074:	332a      	adds	r3, #42	@ 0x2a
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d145      	bne.n	8008108 <PCU_Tasks+0xd74>
 800807c:	7ffb      	ldrb	r3, [r7, #31]
 800807e:	4a1e      	ldr	r2, [pc, #120]	@ (80080f8 <PCU_Tasks+0xd64>)
 8008080:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	4413      	add	r3, r2
 800808a:	3329      	adds	r3, #41	@ 0x29
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	7ffb      	ldrb	r3, [r7, #31]
 8008090:	4919      	ldr	r1, [pc, #100]	@ (80080f8 <PCU_Tasks+0xd64>)
 8008092:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008096:	fb00 f303 	mul.w	r3, r0, r3
 800809a:	440b      	add	r3, r1
 800809c:	3328      	adds	r3, #40	@ 0x28
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d131      	bne.n	8008108 <PCU_Tasks+0xd74>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80080a4:	7ffb      	ldrb	r3, [r7, #31]
 80080a6:	4a14      	ldr	r2, [pc, #80]	@ (80080f8 <PCU_Tasks+0xd64>)
 80080a8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	3308      	adds	r3, #8
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f003 f8a8 	bl	800b20c <MCU_TicksSinceLastStateTx>
 80080bc:	4603      	mov	r3, r0
 80080be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080c2:	d937      	bls.n	8008134 <PCU_Tasks+0xda0>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80080c4:	7ffb      	ldrb	r3, [r7, #31]
 80080c6:	4a0c      	ldr	r2, [pc, #48]	@ (80080f8 <PCU_Tasks+0xd64>)
 80080c8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	3308      	adds	r3, #8
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
 80080d8:	4907      	ldr	r1, [pc, #28]	@ (80080f8 <PCU_Tasks+0xd64>)
 80080da:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80080de:	fb00 f303 	mul.w	r3, r0, r3
 80080e2:	440b      	add	r3, r1
 80080e4:	3328      	adds	r3, #40	@ 0x28
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f002 fda8 	bl	800ac40 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80080f0:	e020      	b.n	8008134 <PCU_Tasks+0xda0>
 80080f2:	bf00      	nop
 80080f4:	2000a66c 	.word	0x2000a66c
 80080f8:	20000dec 	.word	0x20000dec
 80080fc:	2000000c 	.word	0x2000000c
 8008100:	08018bd4 	.word	0x08018bd4
 8008104:	20000b5c 	.word	0x20000b5c
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8008108:	7ffb      	ldrb	r3, [r7, #31]
 800810a:	4a27      	ldr	r2, [pc, #156]	@ (80081a8 <PCU_Tasks+0xe14>)
 800810c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008110:	fb01 f303 	mul.w	r3, r1, r3
 8008114:	4413      	add	r3, r2
 8008116:	3308      	adds	r3, #8
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	7ffb      	ldrb	r3, [r7, #31]
 800811c:	4922      	ldr	r1, [pc, #136]	@ (80081a8 <PCU_Tasks+0xe14>)
 800811e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008122:	fb00 f303 	mul.w	r3, r0, r3
 8008126:	440b      	add	r3, r1
 8008128:	3328      	adds	r3, #40	@ 0x28
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f002 fd86 	bl	800ac40 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8008134:	7ffb      	ldrb	r3, [r7, #31]
 8008136:	3301      	adds	r3, #1
 8008138:	77fb      	strb	r3, [r7, #31]
 800813a:	4b1c      	ldr	r3, [pc, #112]	@ (80081ac <PCU_Tasks+0xe18>)
 800813c:	7d1b      	ldrb	r3, [r3, #20]
 800813e:	7ffa      	ldrb	r2, [r7, #31]
 8008140:	429a      	cmp	r2, r3
 8008142:	f4ff aec3 	bcc.w	8007ecc <PCU_Tasks+0xb38>
    MCU_UpdateStats();
 8008146:	f000 f8eb 	bl	8008320 <MCU_UpdateStats>
    if(sendMaxState >0){
 800814a:	4b19      	ldr	r3, [pc, #100]	@ (80081b0 <PCU_Tasks+0xe1c>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <PCU_Tasks+0xdca>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8008152:	4b16      	ldr	r3, [pc, #88]	@ (80081ac <PCU_Tasks+0xe18>)
 8008154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008158:	4618      	mov	r0, r3
 800815a:	f002 fe33 	bl	800adc4 <MCU_TransmitMaxState>
    if(sendState > 0){
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <PCU_Tasks+0xe20>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01c      	beq.n	80081a0 <PCU_Tasks+0xe0c>
      if (pack.rtcValid == false) VCU_RequestTime();
 8008166:	4b11      	ldr	r3, [pc, #68]	@ (80081ac <PCU_Tasks+0xe18>)
 8008168:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800816c:	f083 0301 	eor.w	r3, r3, #1
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <PCU_Tasks+0xde6>
 8008176:	f005 fdbb 	bl	800dcf0 <VCU_RequestTime>
      VCU_TransmitBmsState();
 800817a:	f004 fb8d 	bl	800c898 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 800817e:	f004 fc73 	bl	800ca68 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8008182:	f004 fd55 	bl	800cc30 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8008186:	f004 fe97 	bl	800ceb8 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 800818a:	f004 ffc1 	bl	800d110 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 800818e:	f005 f8df 	bl	800d350 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8008192:	f005 f94b 	bl	800d42c <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8008196:	f005 f9b7 	bl	800d508 <VCU_TransmitBmsData10>
      sendState=0;
 800819a:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <PCU_Tasks+0xe20>)
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
}
 80081a0:	bf00      	nop
 80081a2:	3724      	adds	r7, #36	@ 0x24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a8:	20000dec 	.word	0x20000dec
 80081ac:	2000a66c 	.word	0x2000a66c
 80081b0:	20000d25 	.word	0x20000d25
 80081b4:	20000d26 	.word	0x20000d26

080081b8 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 ff2d 	bl	8001024 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa fbe0 	bl	8002992 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	21ff      	movs	r1, #255	@ 0xff
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fa fc0f 	bl	80029fa <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 80081dc:	484a      	ldr	r0, [pc, #296]	@ (8008308 <DRV_CANFDSPI_Init+0x150>)
 80081de:	f7f9 fdf1 	bl	8001dc4 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 80081e2:	4a49      	ldr	r2, [pc, #292]	@ (8008308 <DRV_CANFDSPI_Init+0x150>)
 80081e4:	7813      	ldrb	r3, [r2, #0]
 80081e6:	f043 0320 	orr.w	r3, r3, #32
 80081ea:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 80081ec:	4a46      	ldr	r2, [pc, #280]	@ (8008308 <DRV_CANFDSPI_Init+0x150>)
 80081ee:	7853      	ldrb	r3, [r2, #1]
 80081f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f4:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	4943      	ldr	r1, [pc, #268]	@ (8008308 <DRV_CANFDSPI_Init+0x150>)
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f9 fd54 	bl	8001ca8 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8008200:	4842      	ldr	r0, [pc, #264]	@ (800830c <DRV_CANFDSPI_Init+0x154>)
 8008202:	f7f9 feef 	bl	8001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8008206:	4a41      	ldr	r2, [pc, #260]	@ (800830c <DRV_CANFDSPI_Init+0x154>)
 8008208:	7853      	ldrb	r3, [r2, #1]
 800820a:	2107      	movs	r1, #7
 800820c:	f361 0304 	bfi	r3, r1, #0, #5
 8008210:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 8008212:	4a3e      	ldr	r2, [pc, #248]	@ (800830c <DRV_CANFDSPI_Init+0x154>)
 8008214:	7853      	ldrb	r3, [r2, #1]
 8008216:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800821a:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 800821c:	4a3b      	ldr	r2, [pc, #236]	@ (800830c <DRV_CANFDSPI_Init+0x154>)
 800821e:	7813      	ldrb	r3, [r2, #0]
 8008220:	2101      	movs	r1, #1
 8008222:	f361 0345 	bfi	r3, r1, #1, #5
 8008226:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	4a38      	ldr	r2, [pc, #224]	@ (800830c <DRV_CANFDSPI_Init+0x154>)
 800822c:	2102      	movs	r1, #2
 800822e:	4618      	mov	r0, r3
 8008230:	f7f9 fe80 	bl	8001f34 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8008234:	4836      	ldr	r0, [pc, #216]	@ (8008310 <DRV_CANFDSPI_Init+0x158>)
 8008236:	f7fa f92d 	bl	8002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 800823a:	4a35      	ldr	r2, [pc, #212]	@ (8008310 <DRV_CANFDSPI_Init+0x158>)
 800823c:	7813      	ldrb	r3, [r2, #0]
 800823e:	210f      	movs	r1, #15
 8008240:	f361 0345 	bfi	r3, r1, #1, #5
 8008244:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8008246:	4a32      	ldr	r2, [pc, #200]	@ (8008310 <DRV_CANFDSPI_Init+0x158>)
 8008248:	8813      	ldrh	r3, [r2, #0]
 800824a:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 800824e:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	4a2f      	ldr	r2, [pc, #188]	@ (8008310 <DRV_CANFDSPI_Init+0x158>)
 8008254:	2101      	movs	r1, #1
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa f8d0 	bl	80023fc <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 800825c:	4b2d      	ldr	r3, [pc, #180]	@ (8008314 <DRV_CANFDSPI_Init+0x15c>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8008262:	4a2c      	ldr	r2, [pc, #176]	@ (8008314 <DRV_CANFDSPI_Init+0x15c>)
 8008264:	8813      	ldrh	r3, [r2, #0]
 8008266:	f36f 030a 	bfc	r3, #0, #11
 800826a:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 800826c:	4a29      	ldr	r2, [pc, #164]	@ (8008314 <DRV_CANFDSPI_Init+0x15c>)
 800826e:	78d3      	ldrb	r3, [r2, #3]
 8008270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008274:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8008276:	4a27      	ldr	r2, [pc, #156]	@ (8008314 <DRV_CANFDSPI_Init+0x15c>)
 8008278:	6813      	ldr	r3, [r2, #0]
 800827a:	f36f 23dc 	bfc	r3, #11, #18
 800827e:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	4a24      	ldr	r2, [pc, #144]	@ (8008314 <DRV_CANFDSPI_Init+0x15c>)
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f7fa f83a 	bl	8002300 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 800828c:	4b22      	ldr	r3, [pc, #136]	@ (8008318 <DRV_CANFDSPI_Init+0x160>)
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8008292:	4a21      	ldr	r2, [pc, #132]	@ (8008318 <DRV_CANFDSPI_Init+0x160>)
 8008294:	8813      	ldrh	r3, [r2, #0]
 8008296:	f36f 030a 	bfc	r3, #0, #11
 800829a:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 800829c:	4a1e      	ldr	r2, [pc, #120]	@ (8008318 <DRV_CANFDSPI_Init+0x160>)
 800829e:	78d3      	ldrb	r3, [r2, #3]
 80082a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082a4:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 80082a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <DRV_CANFDSPI_Init+0x160>)
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	f36f 23dc 	bfc	r3, #11, #18
 80082ae:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <DRV_CANFDSPI_Init+0x160>)
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fa f844 	bl	8002344 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 80082bc:	79f8      	ldrb	r0, [r7, #7]
 80082be:	2301      	movs	r3, #1
 80082c0:	2201      	movs	r2, #1
 80082c2:	2100      	movs	r1, #0
 80082c4:	f7fa f862 	bl	800238c <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 80082c8:	79f8      	ldrb	r0, [r7, #7]
 80082ca:	2300      	movs	r3, #0
 80082cc:	2202      	movs	r2, #2
 80082ce:	2101      	movs	r1, #1
 80082d0:	f7fa fbd3 	bl	8002a7a <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb faec 	bl	80038b8 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	2201      	movs	r2, #1
 80082e4:	2101      	movs	r1, #1
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fa fad3 	bl	8002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2103      	movs	r1, #3
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fa fa22 	bl	800273a <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7f9 fdde 	bl	8001ebc <DRV_CANFDSPI_OperationModeSelect>
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000d34 	.word	0x20000d34
 800830c:	20000d38 	.word	0x20000d38
 8008310:	20000d8c 	.word	0x20000d8c
 8008314:	20000d90 	.word	0x20000d90
 8008318:	20000d94 	.word	0x20000d94
 800831c:	00000000 	.word	0x00000000

08008320 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8008320:	b5b0      	push	{r4, r5, r7, lr}
 8008322:	b094      	sub	sp, #80	@ 0x50
 8008324:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8008348:	23ff      	movs	r3, #255	@ 0xff
 800834a:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 800834c:	23ff      	movs	r3, #255	@ 0xff
 800834e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8008358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800835c:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 8008366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800836a:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 8008372:	f04f 0300 	mov.w	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 8008396:	2300      	movs	r3, #0
 8008398:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800839c:	e275      	b.n	800888a <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 800839e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80083a2:	4a85      	ldr	r2, [pc, #532]	@ (80085b8 <MCU_UpdateStats+0x298>)
 80083a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80083a8:	fb01 f303 	mul.w	r3, r1, r3
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80083b2:	789b      	ldrb	r3, [r3, #2]
 80083b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8260 	bne.w	8008880 <MCU_UpdateStats+0x560>
 80083c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80083c4:	4a7c      	ldr	r2, [pc, #496]	@ (80085b8 <MCU_UpdateStats+0x298>)
 80083c6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80083ca:	fb01 f303 	mul.w	r3, r1, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80083d4:	789b      	ldrb	r3, [r3, #2]
 80083d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 824f 	bne.w	8008880 <MCU_UpdateStats+0x560>
 80083e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80083e6:	4a74      	ldr	r2, [pc, #464]	@ (80085b8 <MCU_UpdateStats+0x298>)
 80083e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80083f6:	789b      	ldrb	r3, [r3, #2]
 80083f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 823e 	bne.w	8008880 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8008404:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008408:	4a6b      	ldr	r2, [pc, #428]	@ (80085b8 <MCU_UpdateStats+0x298>)
 800840a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	4413      	add	r3, r2
 8008414:	3327      	adds	r3, #39	@ 0x27
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b03      	cmp	r3, #3
 800841a:	f040 8146 	bne.w	80086aa <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 800841e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008422:	4a65      	ldr	r2, [pc, #404]	@ (80085b8 <MCU_UpdateStats+0x298>)
 8008424:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	4413      	add	r3, r2
 800842e:	330e      	adds	r3, #14
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f7f8 f85e 	bl	80004f4 <__aeabi_i2d>
 8008438:	a359      	add	r3, pc, #356	@ (adr r3, 80085a0 <MCU_UpdateStats+0x280>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f8 f8c3 	bl	80005c8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4610      	mov	r0, r2
 8008448:	4619      	mov	r1, r3
 800844a:	a357      	add	r3, pc, #348	@ (adr r3, 80085a8 <MCU_UpdateStats+0x288>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f7 ff02 	bl	8000258 <__aeabi_dsub>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4610      	mov	r0, r2
 800845a:	4619      	mov	r1, r3
 800845c:	f7f8 fbac 	bl	8000bb8 <__aeabi_d2f>
 8008460:	4603      	mov	r3, r0
 8008462:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008468:	4a53      	ldr	r2, [pc, #332]	@ (80085b8 <MCU_UpdateStats+0x298>)
 800846a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800846e:	fb01 f303 	mul.w	r3, r1, r3
 8008472:	4413      	add	r3, r2
 8008474:	3310      	adds	r3, #16
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f7f8 f83b 	bl	80004f4 <__aeabi_i2d>
 800847e:	a348      	add	r3, pc, #288	@ (adr r3, 80085a0 <MCU_UpdateStats+0x280>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f8 f8a0 	bl	80005c8 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	a345      	add	r3, pc, #276	@ (adr r3, 80085a8 <MCU_UpdateStats+0x288>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f7 fedf 	bl	8000258 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	f7f8 fb89 	bl	8000bb8 <__aeabi_d2f>
 80084a6:	4603      	mov	r3, r0
 80084a8:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 80084aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084ae:	4a42      	ldr	r2, [pc, #264]	@ (80085b8 <MCU_UpdateStats+0x298>)
 80084b0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	3314      	adds	r3, #20
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084c2:	4413      	add	r3, r2
 80084c4:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 80084c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084ca:	3301      	adds	r3, #1
 80084cc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 80084d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084d4:	4a38      	ldr	r2, [pc, #224]	@ (80085b8 <MCU_UpdateStats+0x298>)
 80084d6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80084da:	fb01 f303 	mul.w	r3, r1, r3
 80084de:	4413      	add	r3, r2
 80084e0:	3316      	adds	r3, #22
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f8 f805 	bl	80004f4 <__aeabi_i2d>
 80084ea:	a32d      	add	r3, pc, #180	@ (adr r3, 80085a0 <MCU_UpdateStats+0x280>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f8 f86a 	bl	80005c8 <__aeabi_dmul>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	a32a      	add	r3, pc, #168	@ (adr r3, 80085a8 <MCU_UpdateStats+0x288>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fea9 	bl	8000258 <__aeabi_dsub>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f7f8 fb53 	bl	8000bb8 <__aeabi_d2f>
 8008512:	4603      	mov	r3, r0
 8008514:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8008516:	6938      	ldr	r0, [r7, #16]
 8008518:	f7f7 fffe 	bl	8000518 <__aeabi_f2d>
 800851c:	a324      	add	r3, pc, #144	@ (adr r3, 80085b0 <MCU_UpdateStats+0x290>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f7 fe99 	bl	8000258 <__aeabi_dsub>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4614      	mov	r4, r2
 800852c:	461d      	mov	r5, r3
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f7 fff2 	bl	8000518 <__aeabi_f2d>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4620      	mov	r0, r4
 800853a:	4629      	mov	r1, r5
 800853c:	f7f8 fad4 	bl	8000ae8 <__aeabi_dcmpgt>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d040      	beq.n	80085c8 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 8008546:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800854a:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <MCU_UpdateStats+0x298>)
 800854c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800855a:	7893      	ldrb	r3, [r2, #2]
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 8008562:	4b16      	ldr	r3, [pc, #88]	@ (80085bc <MCU_UpdateStats+0x29c>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0309 	and.w	r3, r3, #9
 800856a:	2b09      	cmp	r3, #9
 800856c:	d16d      	bne.n	800864a <MCU_UpdateStats+0x32a>
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f7f7 ffd2 	bl	8000518 <__aeabi_f2d>
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7f7 ffcd 	bl	8000518 <__aeabi_f2d>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	e9cd 2300 	strd	r2, r3, [sp]
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	490d      	ldr	r1, [pc, #52]	@ (80085c0 <MCU_UpdateStats+0x2a0>)
 800858c:	480d      	ldr	r0, [pc, #52]	@ (80085c4 <MCU_UpdateStats+0x2a4>)
 800858e:	f00c f9b9 	bl	8014904 <siprintf>
 8008592:	480c      	ldr	r0, [pc, #48]	@ (80085c4 <MCU_UpdateStats+0x2a4>)
 8008594:	f7fd f852 	bl	800563c <serialOut>
 8008598:	e057      	b.n	800864a <MCU_UpdateStats+0x32a>
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w
 80085a0:	47ae147b 	.word	0x47ae147b
 80085a4:	3f947ae1 	.word	0x3f947ae1
 80085a8:	47ae147b 	.word	0x47ae147b
 80085ac:	40847ae1 	.word	0x40847ae1
 80085b0:	33333333 	.word	0x33333333
 80085b4:	3fd33333 	.word	0x3fd33333
 80085b8:	20000dec 	.word	0x20000dec
 80085bc:	2000000c 	.word	0x2000000c
 80085c0:	08018bf8 	.word	0x08018bf8
 80085c4:	20000b5c 	.word	0x20000b5c
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 80085c8:	6938      	ldr	r0, [r7, #16]
 80085ca:	f7f7 ffa5 	bl	8000518 <__aeabi_f2d>
 80085ce:	a3d7      	add	r3, pc, #860	@ (adr r3, 800892c <MCU_UpdateStats+0x60c>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f7 fe42 	bl	800025c <__adddf3>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f7f7 ff99 	bl	8000518 <__aeabi_f2d>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f8 fa5d 	bl	8000aac <__aeabi_dcmplt>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d028      	beq.n	800864a <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 80085f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085fc:	4ac4      	ldr	r2, [pc, #784]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80085fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008602:	fb01 f303 	mul.w	r3, r1, r3
 8008606:	4413      	add	r3, r2
 8008608:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800860c:	7893      	ldrb	r3, [r2, #2]
 800860e:	f043 0304 	orr.w	r3, r3, #4
 8008612:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 8008614:	4bbf      	ldr	r3, [pc, #764]	@ (8008914 <MCU_UpdateStats+0x5f4>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0309 	and.w	r3, r3, #9
 800861c:	2b09      	cmp	r3, #9
 800861e:	d114      	bne.n	800864a <MCU_UpdateStats+0x32a>
 8008620:	6938      	ldr	r0, [r7, #16]
 8008622:	f7f7 ff79 	bl	8000518 <__aeabi_f2d>
 8008626:	4604      	mov	r4, r0
 8008628:	460d      	mov	r5, r1
 800862a:	68b8      	ldr	r0, [r7, #8]
 800862c:	f7f7 ff74 	bl	8000518 <__aeabi_f2d>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	e9cd 2300 	strd	r2, r3, [sp]
 8008638:	4622      	mov	r2, r4
 800863a:	462b      	mov	r3, r5
 800863c:	49b6      	ldr	r1, [pc, #728]	@ (8008918 <MCU_UpdateStats+0x5f8>)
 800863e:	48b7      	ldr	r0, [pc, #732]	@ (800891c <MCU_UpdateStats+0x5fc>)
 8008640:	f00c f960 	bl	8014904 <siprintf>
 8008644:	48b5      	ldr	r0, [pc, #724]	@ (800891c <MCU_UpdateStats+0x5fc>)
 8008646:	f7fc fff9 	bl	800563c <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 800864a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800864e:	4ab0      	ldr	r2, [pc, #704]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008650:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800865e:	789b      	ldrb	r3, [r3, #2]
 8008660:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b01      	cmp	r3, #1
 8008668:	d107      	bne.n	800867a <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 800866a:	4bad      	ldr	r3, [pc, #692]	@ (8008920 <MCU_UpdateStats+0x600>)
 800866c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008670:	2b02      	cmp	r3, #2
 8008672:	d102      	bne.n	800867a <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 8008674:	4baa      	ldr	r3, [pc, #680]	@ (8008920 <MCU_UpdateStats+0x600>)
 8008676:	2200      	movs	r2, #0
 8008678:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 800867a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800867e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008686:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 800868a:	ed97 7a08 	vldr	s14, [r7, #32]
 800868e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008696:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 800869a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800869e:	edd7 7a03 	vldr	s15, [r7, #12]
 80086a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 80086aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086ae:	4a98      	ldr	r2, [pc, #608]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80086b0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	4413      	add	r3, r2
 80086ba:	3312      	adds	r3, #18
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 80086c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086ca:	4a91      	ldr	r2, [pc, #580]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80086cc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80086d0:	fb01 f303 	mul.w	r3, r1, r3
 80086d4:	4413      	add	r3, r2
 80086d6:	3322      	adds	r3, #34	@ 0x22
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086de:	4413      	add	r3, r2
 80086e0:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 80086e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086e6:	4a8a      	ldr	r2, [pc, #552]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80086e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80086ec:	fb01 f303 	mul.w	r3, r1, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	331c      	adds	r3, #28
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	4413      	add	r3, r2
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 80086fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008702:	4a83      	ldr	r2, [pc, #524]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008704:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	332b      	adds	r3, #43	@ 0x2b
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008716:	4293      	cmp	r3, r2
 8008718:	d90a      	bls.n	8008730 <MCU_UpdateStats+0x410>
 800871a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800871e:	4a7c      	ldr	r2, [pc, #496]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008720:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	4413      	add	r3, r2
 800872a:	332b      	adds	r3, #43	@ 0x2b
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008730:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008734:	4a76      	ldr	r2, [pc, #472]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008736:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	332c      	adds	r3, #44	@ 0x2c
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008748:	4293      	cmp	r3, r2
 800874a:	d90a      	bls.n	8008762 <MCU_UpdateStats+0x442>
 800874c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008750:	4a6f      	ldr	r2, [pc, #444]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008752:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008756:	fb01 f303 	mul.w	r3, r1, r3
 800875a:	4413      	add	r3, r2
 800875c:	332c      	adds	r3, #44	@ 0x2c
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 8008762:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008766:	4a6a      	ldr	r2, [pc, #424]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008768:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800876c:	fb01 f303 	mul.w	r3, r1, r3
 8008770:	4413      	add	r3, r2
 8008772:	3320      	adds	r3, #32
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008778:	429a      	cmp	r2, r3
 800877a:	d915      	bls.n	80087a8 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 800877c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008780:	4a63      	ldr	r2, [pc, #396]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008782:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008786:	fb01 f303 	mul.w	r3, r1, r3
 800878a:	4413      	add	r3, r2
 800878c:	3320      	adds	r3, #32
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 8008792:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008796:	4a5e      	ldr	r2, [pc, #376]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008798:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	4413      	add	r3, r2
 80087a2:	3308      	adds	r3, #8
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 80087a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087ac:	4a58      	ldr	r2, [pc, #352]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80087ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	4413      	add	r3, r2
 80087b8:	331e      	adds	r3, #30
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80087be:	429a      	cmp	r2, r3
 80087c0:	d215      	bcs.n	80087ee <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 80087c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087c6:	4a52      	ldr	r2, [pc, #328]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80087c8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	331e      	adds	r3, #30
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 80087d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087dc:	4a4c      	ldr	r2, [pc, #304]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80087de:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	3308      	adds	r3, #8
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 80087ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087f2:	4a47      	ldr	r2, [pc, #284]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 80087f4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	4413      	add	r3, r2
 80087fe:	3318      	adds	r3, #24
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008804:	429a      	cmp	r2, r3
 8008806:	d215      	bcs.n	8008834 <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8008808:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800880c:	4a40      	ldr	r2, [pc, #256]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 800880e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3318      	adds	r3, #24
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 800881e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008822:	4a3b      	ldr	r2, [pc, #236]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008824:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	3308      	adds	r3, #8
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 8008834:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008838:	4a35      	ldr	r2, [pc, #212]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 800883a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	4413      	add	r3, r2
 8008844:	331a      	adds	r3, #26
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800884a:	429a      	cmp	r2, r3
 800884c:	d915      	bls.n	800887a <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 800884e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008852:	4a2f      	ldr	r2, [pc, #188]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 8008854:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	4413      	add	r3, r2
 800885e:	331a      	adds	r3, #26
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 8008864:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008868:	4a29      	ldr	r2, [pc, #164]	@ (8008910 <MCU_UpdateStats+0x5f0>)
 800886a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800886e:	fb01 f303 	mul.w	r3, r1, r3
 8008872:	4413      	add	r3, r2
 8008874:	3308      	adds	r3, #8
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 800887a:	7efb      	ldrb	r3, [r7, #27]
 800887c:	3301      	adds	r3, #1
 800887e:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 8008880:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008884:	3301      	adds	r3, #1
 8008886:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800888a:	4b25      	ldr	r3, [pc, #148]	@ (8008920 <MCU_UpdateStats+0x600>)
 800888c:	7d1b      	ldrb	r3, [r3, #20]
 800888e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008892:	429a      	cmp	r2, r3
 8008894:	f4ff ad83 	bcc.w	800839e <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 8008898:	4a21      	ldr	r2, [pc, #132]	@ (8008920 <MCU_UpdateStats+0x600>)
 800889a:	7efb      	ldrb	r3, [r7, #27]
 800889c:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 800889e:	4b20      	ldr	r3, [pc, #128]	@ (8008920 <MCU_UpdateStats+0x600>)
 80088a0:	7d1a      	ldrb	r2, [r3, #20]
 80088a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008920 <MCU_UpdateStats+0x600>)
 80088a4:	7ddb      	ldrb	r3, [r3, #23]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008920 <MCU_UpdateStats+0x600>)
 80088ac:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 80088ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8087 	beq.w	80089c6 <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 80088b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088be:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <MCU_UpdateStats+0x600>)
 80088c6:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80088c8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80088cc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008924 <MCU_UpdateStats+0x604>
 80088d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	dd32      	ble.n	8008940 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 80088da:	4b0e      	ldr	r3, [pc, #56]	@ (8008914 <MCU_UpdateStats+0x5f4>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 0309 	and.w	r3, r3, #9
 80088e2:	2b09      	cmp	r3, #9
 80088e4:	d129      	bne.n	800893a <MCU_UpdateStats+0x61a>
 80088e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80088e8:	f7f7 fe16 	bl	8000518 <__aeabi_f2d>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	a105      	add	r1, pc, #20	@ (adr r1, 8008908 <MCU_UpdateStats+0x5e8>)
 80088f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f6:	e9cd 0100 	strd	r0, r1, [sp]
 80088fa:	490b      	ldr	r1, [pc, #44]	@ (8008928 <MCU_UpdateStats+0x608>)
 80088fc:	4807      	ldr	r0, [pc, #28]	@ (800891c <MCU_UpdateStats+0x5fc>)
 80088fe:	f00c f801 	bl	8014904 <siprintf>
 8008902:	e017      	b.n	8008934 <MCU_UpdateStats+0x614>
 8008904:	f3af 8000 	nop.w
 8008908:	00000000 	.word	0x00000000
 800890c:	409a3300 	.word	0x409a3300
 8008910:	20000dec 	.word	0x20000dec
 8008914:	2000000c 	.word	0x2000000c
 8008918:	08018c44 	.word	0x08018c44
 800891c:	20000b5c 	.word	0x20000b5c
 8008920:	2000a66c 	.word	0x2000a66c
 8008924:	44d19800 	.word	0x44d19800
 8008928:	08018c94 	.word	0x08018c94
 800892c:	33333333 	.word	0x33333333
 8008930:	3fd33333 	.word	0x3fd33333
 8008934:	48b0      	ldr	r0, [pc, #704]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008936:	f7fc fe81 	bl	800563c <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 800893a:	4bb0      	ldr	r3, [pc, #704]	@ (8008bfc <MCU_UpdateStats+0x8dc>)
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800893e:	e01e      	b.n	800897e <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8008940:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8008944:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8008c00 <MCU_UpdateStats+0x8e0>
 8008948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	d515      	bpl.n	800897e <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008952:	4bac      	ldr	r3, [pc, #688]	@ (8008c04 <MCU_UpdateStats+0x8e4>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 0309 	and.w	r3, r3, #9
 800895a:	2b09      	cmp	r3, #9
 800895c:	d10d      	bne.n	800897a <MCU_UpdateStats+0x65a>
 800895e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008960:	f7f7 fdda 	bl	8000518 <__aeabi_f2d>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	49a7      	ldr	r1, [pc, #668]	@ (8008c08 <MCU_UpdateStats+0x8e8>)
 800896a:	9100      	str	r1, [sp, #0]
 800896c:	49a7      	ldr	r1, [pc, #668]	@ (8008c0c <MCU_UpdateStats+0x8ec>)
 800896e:	48a2      	ldr	r0, [pc, #648]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008970:	f00b ffc8 	bl	8014904 <siprintf>
 8008974:	48a0      	ldr	r0, [pc, #640]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008976:	f7fc fe61 	bl	800563c <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 800897a:	4ba5      	ldr	r3, [pc, #660]	@ (8008c10 <MCU_UpdateStats+0x8f0>)
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 800897e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008980:	f7f7 fdca 	bl	8000518 <__aeabi_f2d>
 8008984:	a398      	add	r3, pc, #608	@ (adr r3, 8008be8 <MCU_UpdateStats+0x8c8>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 ff47 	bl	800081c <__aeabi_ddiv>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	4b9e      	ldr	r3, [pc, #632]	@ (8008c14 <MCU_UpdateStats+0x8f4>)
 800899c:	f7f7 fc5e 	bl	800025c <__adddf3>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4610      	mov	r0, r2
 80089a6:	4619      	mov	r1, r3
 80089a8:	f7f8 f906 	bl	8000bb8 <__aeabi_d2f>
 80089ac:	4603      	mov	r3, r0
 80089ae:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 80089b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b8:	ee17 3a90 	vmov	r3, s15
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	4b95      	ldr	r3, [pc, #596]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 80089c2:	611a      	str	r2, [r3, #16]
 80089c4:	e00e      	b.n	80089e4 <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 80089c6:	4b94      	ldr	r3, [pc, #592]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 80089cc:	4b93      	ldr	r3, [pc, #588]	@ (8008c1c <MCU_UpdateStats+0x8fc>)
 80089ce:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 80089d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d8:	ee17 3a90 	vmov	r3, s15
 80089dc:	b29b      	uxth	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	4b8d      	ldr	r3, [pc, #564]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 80089e2:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80089e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80089e8:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8008c20 <MCU_UpdateStats+0x900>
 80089ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	dd19      	ble.n	8008a2a <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 80089f6:	4b83      	ldr	r3, [pc, #524]	@ (8008c04 <MCU_UpdateStats+0x8e4>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	f003 0309 	and.w	r3, r3, #9
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d110      	bne.n	8008a24 <MCU_UpdateStats+0x704>
 8008a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a04:	f7f7 fd88 	bl	8000518 <__aeabi_f2d>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	a178      	add	r1, pc, #480	@ (adr r1, 8008bf0 <MCU_UpdateStats+0x8d0>)
 8008a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a12:	e9cd 0100 	strd	r0, r1, [sp]
 8008a16:	4983      	ldr	r1, [pc, #524]	@ (8008c24 <MCU_UpdateStats+0x904>)
 8008a18:	4877      	ldr	r0, [pc, #476]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008a1a:	f00b ff73 	bl	8014904 <siprintf>
 8008a1e:	4876      	ldr	r0, [pc, #472]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008a20:	f7fc fe0c 	bl	800563c <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008a24:	4b75      	ldr	r3, [pc, #468]	@ (8008bfc <MCU_UpdateStats+0x8dc>)
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a28:	e01e      	b.n	8008a68 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8008a2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008a2e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008c00 <MCU_UpdateStats+0x8e0>
 8008a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3a:	d515      	bpl.n	8008a68 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008a3c:	4b71      	ldr	r3, [pc, #452]	@ (8008c04 <MCU_UpdateStats+0x8e4>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 0309 	and.w	r3, r3, #9
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d10d      	bne.n	8008a64 <MCU_UpdateStats+0x744>
 8008a48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a4a:	f7f7 fd65 	bl	8000518 <__aeabi_f2d>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	496d      	ldr	r1, [pc, #436]	@ (8008c08 <MCU_UpdateStats+0x8e8>)
 8008a54:	9100      	str	r1, [sp, #0]
 8008a56:	4974      	ldr	r1, [pc, #464]	@ (8008c28 <MCU_UpdateStats+0x908>)
 8008a58:	4867      	ldr	r0, [pc, #412]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008a5a:	f00b ff53 	bl	8014904 <siprintf>
 8008a5e:	4866      	ldr	r0, [pc, #408]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008a60:	f7fc fdec 	bl	800563c <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8008a64:	4b6a      	ldr	r3, [pc, #424]	@ (8008c10 <MCU_UpdateStats+0x8f0>)
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a6a:	f7f7 fd55 	bl	8000518 <__aeabi_f2d>
 8008a6e:	a35e      	add	r3, pc, #376	@ (adr r3, 8008be8 <MCU_UpdateStats+0x8c8>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fed2 	bl	800081c <__aeabi_ddiv>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	4b63      	ldr	r3, [pc, #396]	@ (8008c14 <MCU_UpdateStats+0x8f4>)
 8008a86:	f7f7 fbe9 	bl	800025c <__adddf3>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7f8 f871 	bl	8000b78 <__aeabi_d2uiz>
 8008a96:	4603      	mov	r3, r0
 8008a98:	4a5f      	ldr	r2, [pc, #380]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008a9a:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008a9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008aa0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8008c20 <MCU_UpdateStats+0x900>
 8008aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aac:	dd19      	ble.n	8008ae2 <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008aae:	4b55      	ldr	r3, [pc, #340]	@ (8008c04 <MCU_UpdateStats+0x8e4>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	f003 0309 	and.w	r3, r3, #9
 8008ab6:	2b09      	cmp	r3, #9
 8008ab8:	d110      	bne.n	8008adc <MCU_UpdateStats+0x7bc>
 8008aba:	6a38      	ldr	r0, [r7, #32]
 8008abc:	f7f7 fd2c 	bl	8000518 <__aeabi_f2d>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	a14a      	add	r1, pc, #296	@ (adr r1, 8008bf0 <MCU_UpdateStats+0x8d0>)
 8008ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aca:	e9cd 0100 	strd	r0, r1, [sp]
 8008ace:	4957      	ldr	r1, [pc, #348]	@ (8008c2c <MCU_UpdateStats+0x90c>)
 8008ad0:	4849      	ldr	r0, [pc, #292]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008ad2:	f00b ff17 	bl	8014904 <siprintf>
 8008ad6:	4848      	ldr	r0, [pc, #288]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008ad8:	f7fc fdb0 	bl	800563c <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008adc:	4b47      	ldr	r3, [pc, #284]	@ (8008bfc <MCU_UpdateStats+0x8dc>)
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	e01e      	b.n	8008b20 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8008ae2:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ae6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8008c00 <MCU_UpdateStats+0x8e0>
 8008aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af2:	d515      	bpl.n	8008b20 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008af4:	4b43      	ldr	r3, [pc, #268]	@ (8008c04 <MCU_UpdateStats+0x8e4>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f003 0309 	and.w	r3, r3, #9
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d10d      	bne.n	8008b1c <MCU_UpdateStats+0x7fc>
 8008b00:	6a38      	ldr	r0, [r7, #32]
 8008b02:	f7f7 fd09 	bl	8000518 <__aeabi_f2d>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	493f      	ldr	r1, [pc, #252]	@ (8008c08 <MCU_UpdateStats+0x8e8>)
 8008b0c:	9100      	str	r1, [sp, #0]
 8008b0e:	4948      	ldr	r1, [pc, #288]	@ (8008c30 <MCU_UpdateStats+0x910>)
 8008b10:	4839      	ldr	r0, [pc, #228]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008b12:	f00b fef7 	bl	8014904 <siprintf>
 8008b16:	4838      	ldr	r0, [pc, #224]	@ (8008bf8 <MCU_UpdateStats+0x8d8>)
 8008b18:	f7fc fd90 	bl	800563c <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8008b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c10 <MCU_UpdateStats+0x8f0>)
 8008b1e:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008b20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b22:	f7f7 fcf9 	bl	8000518 <__aeabi_f2d>
 8008b26:	a330      	add	r3, pc, #192	@ (adr r3, 8008be8 <MCU_UpdateStats+0x8c8>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f7f7 fe76 	bl	800081c <__aeabi_ddiv>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4610      	mov	r0, r2
 8008b36:	4619      	mov	r1, r3
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	4b35      	ldr	r3, [pc, #212]	@ (8008c14 <MCU_UpdateStats+0x8f4>)
 8008b3e:	f7f7 fb8d 	bl	800025c <__adddf3>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4610      	mov	r0, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7f8 f815 	bl	8000b78 <__aeabi_d2uiz>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4a31      	ldr	r2, [pc, #196]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008b52:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008b54:	6a38      	ldr	r0, [r7, #32]
 8008b56:	f7f7 fcdf 	bl	8000518 <__aeabi_f2d>
 8008b5a:	a323      	add	r3, pc, #140	@ (adr r3, 8008be8 <MCU_UpdateStats+0x8c8>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fe5c 	bl	800081c <__aeabi_ddiv>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	4b28      	ldr	r3, [pc, #160]	@ (8008c14 <MCU_UpdateStats+0x8f4>)
 8008b72:	f7f7 fb73 	bl	800025c <__adddf3>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f7f7 fffb 	bl	8000b78 <__aeabi_d2uiz>
 8008b82:	4603      	mov	r3, r0
 8008b84:	4a24      	ldr	r2, [pc, #144]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008b86:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8008b88:	4b23      	ldr	r3, [pc, #140]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008b8a:	7ddb      	ldrb	r3, [r3, #23]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <MCU_UpdateStats+0x884>
 8008b90:	4b21      	ldr	r3, [pc, #132]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008b92:	7ddb      	ldrb	r3, [r3, #23]
 8008b94:	461a      	mov	r2, r3
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008ba0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8008ba2:	e002      	b.n	8008baa <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8008ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8008baa:	4b1b      	ldr	r3, [pc, #108]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008bac:	7ddb      	ldrb	r3, [r3, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <MCU_UpdateStats+0x8a4>
 8008bb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bb4:	2bfe      	cmp	r3, #254	@ 0xfe
 8008bb6:	d805      	bhi.n	8008bc4 <MCU_UpdateStats+0x8a4>
 8008bb8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b16      	ldr	r3, [pc, #88]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bc2:	e003      	b.n	8008bcc <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8008bc4:	4b14      	ldr	r3, [pc, #80]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8008bcc:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008bce:	7ddb      	ldrb	r3, [r3, #23]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d02f      	beq.n	8008c34 <MCU_UpdateStats+0x914>
 8008bd4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008bd6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008bd8:	d82c      	bhi.n	8008c34 <MCU_UpdateStats+0x914>
 8008bda:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <MCU_UpdateStats+0x8f8>)
 8008be0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008be4:	e02a      	b.n	8008c3c <MCU_UpdateStats+0x91c>
 8008be6:	bf00      	nop
 8008be8:	9999999a 	.word	0x9999999a
 8008bec:	3fa99999 	.word	0x3fa99999
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	409a3300 	.word	0x409a3300
 8008bf8:	20000b5c 	.word	0x20000b5c
 8008bfc:	44d19800 	.word	0x44d19800
 8008c00:	c4c80000 	.word	0xc4c80000
 8008c04:	2000000c 	.word	0x2000000c
 8008c08:	fffff9c0 	.word	0xfffff9c0
 8008c0c:	08018cd8 	.word	0x08018cd8
 8008c10:	c4c80000 	.word	0xc4c80000
 8008c14:	40df4000 	.word	0x40df4000
 8008c18:	2000a66c 	.word	0x2000a66c
 8008c1c:	46fa0000 	.word	0x46fa0000
 8008c20:	44d19800 	.word	0x44d19800
 8008c24:	08018d1c 	.word	0x08018d1c
 8008c28:	08018d64 	.word	0x08018d64
 8008c2c:	08018dac 	.word	0x08018dac
 8008c30:	08018df8 	.word	0x08018df8
  else pack.soh = 0;
 8008c34:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8008c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c3e:	7ddb      	ldrb	r3, [r3, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <MCU_UpdateStats+0x938>
 8008c44:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c46:	7ddb      	ldrb	r3, [r3, #23]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	4b28      	ldr	r3, [pc, #160]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c54:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008c56:	e002      	b.n	8008c5e <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8008c58:	4b26      	ldr	r3, [pc, #152]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8008c5e:	4a25      	ldr	r2, [pc, #148]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c60:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008c62:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8008c64:	4a23      	ldr	r2, [pc, #140]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c66:	7e7b      	ldrb	r3, [r7, #25]
 8008c68:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 8008c6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8008c76:	4a1f      	ldr	r2, [pc, #124]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008c7a:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8008c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c7e:	7ebb      	ldrb	r3, [r7, #26]
 8008c80:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8008c84:	e006      	b.n	8008c94 <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8008c86:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 8008c8c:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8008c94:	4b17      	ldr	r3, [pc, #92]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c96:	7ddb      	ldrb	r3, [r3, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <MCU_UpdateStats+0x990>
 8008c9c:	4b15      	ldr	r3, [pc, #84]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008c9e:	7ddb      	ldrb	r3, [r3, #23]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	4b12      	ldr	r3, [pc, #72]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cac:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008cae:	e002      	b.n	8008cb6 <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008cb0:	4b10      	ldr	r3, [pc, #64]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8008cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008cba:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8008cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8008cc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d007      	beq.n	8008cde <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8008cce:	4a09      	ldr	r2, [pc, #36]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008cd2:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8008cd4:	4a07      	ldr	r2, [pc, #28]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008cd6:	7e3b      	ldrb	r3, [r7, #24]
 8008cd8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8008cdc:	e006      	b.n	8008cec <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8008cde:	4b05      	ldr	r3, [pc, #20]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8008ce4:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <MCU_UpdateStats+0x9d4>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8008cec:	bf00      	nop
 8008cee:	3748      	adds	r7, #72	@ 0x48
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8008cf4:	2000a66c 	.word	0x2000a66c

08008cf8 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfa:	b08b      	sub	sp, #44	@ 0x2c
 8008cfc:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008cfe:	4a67      	ldr	r2, [pc, #412]	@ (8008e9c <MCU_ReceiveMessages+0x1a4>)
 8008d00:	2101      	movs	r1, #1
 8008d02:	2001      	movs	r0, #1
 8008d04:	f7f9 fd8c 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008d08:	e0bc      	b.n	8008e84 <MCU_ReceiveMessages+0x18c>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8008d0a:	2340      	movs	r3, #64	@ 0x40
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	4b64      	ldr	r3, [pc, #400]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d10:	4a64      	ldr	r2, [pc, #400]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008d12:	2101      	movs	r1, #1
 8008d14:	2001      	movs	r0, #1
 8008d16:	f7f9 fbe7 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    // Log RX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(rxObj.bF.id.SID, false)){
 8008d1a:	4b62      	ldr	r3, [pc, #392]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe f84c 	bl	8006dc4 <MCU_ShouldLogMessage>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d033      	beq.n	8008d9a <MCU_ReceiveMessages+0xa2>
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d32:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d3a:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d3c:	469c      	mov	ip, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d3e:	4b59      	ldr	r3, [pc, #356]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d46:	469e      	mov	lr, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d48:	4b55      	ldr	r3, [pc, #340]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d4c:	461a      	mov	r2, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d4e:	4b54      	ldr	r3, [pc, #336]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d50:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d52:	4619      	mov	r1, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d54:	4b52      	ldr	r3, [pc, #328]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d56:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d58:	4618      	mov	r0, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d5a:	4b51      	ldr	r3, [pc, #324]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d5c:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d5e:	461c      	mov	r4, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d60:	4b4f      	ldr	r3, [pc, #316]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d62:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d64:	461d      	mov	r5, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d66:	4b4e      	ldr	r3, [pc, #312]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d68:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d6a:	461e      	mov	r6, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d6e:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d70:	607b      	str	r3, [r7, #4]
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008d72:	4b4b      	ldr	r3, [pc, #300]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008d74:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	9306      	str	r3, [sp, #24]
 8008d7c:	9605      	str	r6, [sp, #20]
 8008d7e:	9504      	str	r5, [sp, #16]
 8008d80:	9403      	str	r4, [sp, #12]
 8008d82:	9002      	str	r0, [sp, #8]
 8008d84:	9101      	str	r1, [sp, #4]
 8008d86:	9200      	str	r2, [sp, #0]
 8008d88:	4673      	mov	r3, lr
 8008d8a:	4662      	mov	r2, ip
 8008d8c:	4946      	ldr	r1, [pc, #280]	@ (8008ea8 <MCU_ReceiveMessages+0x1b0>)
 8008d8e:	4847      	ldr	r0, [pc, #284]	@ (8008eac <MCU_ReceiveMessages+0x1b4>)
 8008d90:	f00b fdb8 	bl	8014904 <siprintf>
        serialOut(tempBuffer);
 8008d94:	4845      	ldr	r0, [pc, #276]	@ (8008eac <MCU_ReceiveMessages+0x1b4>)
 8008d96:	f7fc fc51 	bl	800563c <serialOut>
    }

    switch (rxObj.bF.id.SID) {
 8008d9a:	4b42      	ldr	r3, [pc, #264]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	d82b      	bhi.n	8008e04 <MCU_ReceiveMessages+0x10c>
 8008dac:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <MCU_ReceiveMessages+0xbc>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008dd5 	.word	0x08008dd5
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de7 	.word	0x08008de7
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	08008df3 	.word	0x08008df3
 8008dc8:	08008ddb 	.word	0x08008ddb
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	08008dff 	.word	0x08008dff
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008dd4:	f000 f910 	bl	8008ff8 <MCU_RegisterModule>
        break;
 8008dd8:	e04f      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8008dda:	f002 f843 	bl	800ae64 <MCU_ProcessCellDetail>
        break;
 8008dde:	e04c      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8008de0:	f000 fd7a 	bl	80098d8 <MCU_ProcessModuleHardware>
        break;
 8008de4:	e049      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8008de6:	f001 f94b 	bl	800a080 <MCU_ProcessModuleStatus1>
        break;
 8008dea:	e046      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008dec:	f001 fbdc 	bl	800a5a8 <MCU_ProcessModuleStatus2>
        break;
 8008df0:	e043      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8008df2:	f001 fd59 	bl	800a8a8 <MCU_ProcessModuleStatus3>
        break;
 8008df6:	e040      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8008df8:	f000 fc5a 	bl	80096b0 <MCU_ProcessModuleTime>
        break;
 8008dfc:	e03d      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8008dfe:	f001 fe9b 	bl	800ab38 <MCU_ProcessCellCommStatus1>
        break;
 8008e02:	e03a      	b.n	8008e7a <MCU_ReceiveMessages+0x182>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008e04:	4b2a      	ldr	r3, [pc, #168]	@ (8008eb0 <MCU_ReceiveMessages+0x1b8>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 0309 	and.w	r3, r3, #9
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d133      	bne.n	8008e78 <MCU_ReceiveMessages+0x180>
 8008e10:	4b24      	ldr	r3, [pc, #144]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	469c      	mov	ip, r3
 8008e1c:	4b21      	ldr	r3, [pc, #132]	@ (8008ea4 <MCU_ReceiveMessages+0x1ac>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008e24:	469e      	mov	lr, r3
 8008e26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	4619      	mov	r1, r3
 8008e32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e34:	789b      	ldrb	r3, [r3, #2]
 8008e36:	4618      	mov	r0, r3
 8008e38:	4b19      	ldr	r3, [pc, #100]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	461c      	mov	r4, r3
 8008e3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e40:	791b      	ldrb	r3, [r3, #4]
 8008e42:	461d      	mov	r5, r3
 8008e44:	4b16      	ldr	r3, [pc, #88]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e46:	795b      	ldrb	r3, [r3, #5]
 8008e48:	461e      	mov	r6, r3
 8008e4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e4c:	799b      	ldrb	r3, [r3, #6]
 8008e4e:	607b      	str	r3, [r7, #4]
 8008e50:	4b13      	ldr	r3, [pc, #76]	@ (8008ea0 <MCU_ReceiveMessages+0x1a8>)
 8008e52:	79db      	ldrb	r3, [r3, #7]
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	9605      	str	r6, [sp, #20]
 8008e5c:	9504      	str	r5, [sp, #16]
 8008e5e:	9403      	str	r4, [sp, #12]
 8008e60:	9002      	str	r0, [sp, #8]
 8008e62:	9101      	str	r1, [sp, #4]
 8008e64:	9200      	str	r2, [sp, #0]
 8008e66:	4673      	mov	r3, lr
 8008e68:	4662      	mov	r2, ip
 8008e6a:	4912      	ldr	r1, [pc, #72]	@ (8008eb4 <MCU_ReceiveMessages+0x1bc>)
 8008e6c:	480f      	ldr	r0, [pc, #60]	@ (8008eac <MCU_ReceiveMessages+0x1b4>)
 8008e6e:	f00b fd49 	bl	8014904 <siprintf>
 8008e72:	480e      	ldr	r0, [pc, #56]	@ (8008eac <MCU_ReceiveMessages+0x1b4>)
 8008e74:	f7fc fbe2 	bl	800563c <serialOut>
        break;
 8008e78:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008e7a:	4a08      	ldr	r2, [pc, #32]	@ (8008e9c <MCU_ReceiveMessages+0x1a4>)
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	2001      	movs	r0, #1
 8008e80:	f7f9 fcce 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008e84:	4b05      	ldr	r3, [pc, #20]	@ (8008e9c <MCU_ReceiveMessages+0x1a4>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f af3c 	bne.w	8008d0a <MCU_ReceiveMessages+0x12>
  }
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	20000d98 	.word	0x20000d98
 8008ea0:	20000da8 	.word	0x20000da8
 8008ea4:	20000d9c 	.word	0x20000d9c
 8008ea8:	08018e40 	.word	0x08018e40
 8008eac:	20000b5c 	.word	0x20000b5c
 8008eb0:	2000000c 	.word	0x2000000c
 8008eb4:	08018ea4 	.word	0x08018ea4

08008eb8 <MCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	b08d      	sub	sp, #52	@ 0x34
 8008ebc:	af08      	add	r7, sp, #32
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008ec2:	2332      	movs	r3, #50	@ 0x32
 8008ec4:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	4a41      	ldr	r2, [pc, #260]	@ (8008fd0 <MCU_TransmitMessageQueue+0x118>)
 8008eca:	2102      	movs	r1, #2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f9 fc74 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008ed8:	bf00      	nop
        Nop();
 8008eda:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008edc:	79f8      	ldrb	r0, [r7, #7]
 8008ede:	4b3d      	ldr	r3, [pc, #244]	@ (8008fd4 <MCU_TransmitMessageQueue+0x11c>)
 8008ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8008fd8 <MCU_TransmitMessageQueue+0x120>)
 8008ee2:	493e      	ldr	r1, [pc, #248]	@ (8008fdc <MCU_TransmitMessageQueue+0x124>)
 8008ee4:	f7f9 fd23 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8008fe0 <MCU_TransmitMessageQueue+0x128>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 0309 	and.w	r3, r3, #9
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d106      	bne.n	8008f02 <MCU_TransmitMessageQueue+0x4a>
 8008ef4:	493b      	ldr	r1, [pc, #236]	@ (8008fe4 <MCU_TransmitMessageQueue+0x12c>)
 8008ef6:	483c      	ldr	r0, [pc, #240]	@ (8008fe8 <MCU_TransmitMessageQueue+0x130>)
 8008ef8:	f00b fd04 	bl	8014904 <siprintf>
 8008efc:	483a      	ldr	r0, [pc, #232]	@ (8008fe8 <MCU_TransmitMessageQueue+0x130>)
 8008efe:	f7fc fb9d 	bl	800563c <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	2102      	movs	r1, #2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f9 f99a 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008f0c:	e05c      	b.n	8008fc8 <MCU_TransmitMessageQueue+0x110>
      }
      attempts--;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008f14:	4b2e      	ldr	r3, [pc, #184]	@ (8008fd0 <MCU_TransmitMessageQueue+0x118>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0d2      	beq.n	8008ec6 <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8008f20:	4b32      	ldr	r3, [pc, #200]	@ (8008fec <MCU_TransmitMessageQueue+0x134>)
 8008f22:	791b      	ldrb	r3, [r3, #4]
 8008f24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fa fd0c 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]
    
    // Log TX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(txObj.bF.id.SID, true)){
 8008f34:	4b2d      	ldr	r3, [pc, #180]	@ (8008fec <MCU_TransmitMessageQueue+0x134>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fd ff3f 	bl	8006dc4 <MCU_ShouldLogMessage>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d033      	beq.n	8008fb4 <MCU_TransmitMessageQueue+0xfc>
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f4c:	4b27      	ldr	r3, [pc, #156]	@ (8008fec <MCU_TransmitMessageQueue+0x134>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f54:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f56:	469c      	mov	ip, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f58:	4b24      	ldr	r3, [pc, #144]	@ (8008fec <MCU_TransmitMessageQueue+0x134>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f60:	469e      	mov	lr, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f62:	4b23      	ldr	r3, [pc, #140]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f66:	461a      	mov	r2, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f68:	4b21      	ldr	r3, [pc, #132]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f6a:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f6c:	4619      	mov	r1, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f6e:	4b20      	ldr	r3, [pc, #128]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f70:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f72:	4618      	mov	r0, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f74:	4b1e      	ldr	r3, [pc, #120]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f76:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f78:	461c      	mov	r4, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f7c:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f7e:	461d      	mov	r5, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f80:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f82:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f84:	461e      	mov	r6, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f86:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f88:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f8a:	603b      	str	r3, [r7, #0]
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008f8c:	4b18      	ldr	r3, [pc, #96]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008f8e:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	9306      	str	r3, [sp, #24]
 8008f96:	9605      	str	r6, [sp, #20]
 8008f98:	9504      	str	r5, [sp, #16]
 8008f9a:	9403      	str	r4, [sp, #12]
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9101      	str	r1, [sp, #4]
 8008fa0:	9200      	str	r2, [sp, #0]
 8008fa2:	4673      	mov	r3, lr
 8008fa4:	4662      	mov	r2, ip
 8008fa6:	4913      	ldr	r1, [pc, #76]	@ (8008ff4 <MCU_TransmitMessageQueue+0x13c>)
 8008fa8:	480f      	ldr	r0, [pc, #60]	@ (8008fe8 <MCU_TransmitMessageQueue+0x130>)
 8008faa:	f00b fcab 	bl	8014904 <siprintf>
        serialOut(tempBuffer);
 8008fae:	480e      	ldr	r0, [pc, #56]	@ (8008fe8 <MCU_TransmitMessageQueue+0x130>)
 8008fb0:	f7fc fb44 	bl	800563c <serialOut>
    }

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	79f8      	ldrb	r0, [r7, #7]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	9201      	str	r2, [sp, #4]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <MCU_TransmitMessageQueue+0x138>)
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <MCU_TransmitMessageQueue+0x134>)
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	f7f9 f84a 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000d3c 	.word	0x20000d3c
 8008fd4:	20000deb 	.word	0x20000deb
 8008fd8:	20000dea 	.word	0x20000dea
 8008fdc:	20000de9 	.word	0x20000de9
 8008fe0:	2000000c 	.word	0x2000000c
 8008fe4:	08018f10 	.word	0x08018f10
 8008fe8:	20000b5c 	.word	0x20000b5c
 8008fec:	20000d40 	.word	0x20000d40
 8008ff0:	20000d4c 	.word	0x20000d4c
 8008ff4:	08018f40 	.word	0x08018f40

08008ff8 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b08b      	sub	sp, #44	@ 0x2c
 8008ffc:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8009002:	4a12      	ldr	r2, [pc, #72]	@ (800904c <MCU_RegisterModule+0x54>)
 8009004:	f107 030c 	add.w	r3, r7, #12
 8009008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800900c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugMessages & DBG_MSG_ANNOUNCE){
 8009010:	4b0f      	ldr	r3, [pc, #60]	@ (8009050 <MCU_RegisterModule+0x58>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <MCU_RegisterModule+0x46>
    sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); 
 800901c:	89bb      	ldrh	r3, [r7, #12]
 800901e:	4619      	mov	r1, r3
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	4618      	mov	r0, r3
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4603      	mov	r3, r0
 800902e:	460a      	mov	r2, r1
 8009030:	4908      	ldr	r1, [pc, #32]	@ (8009054 <MCU_RegisterModule+0x5c>)
 8009032:	4809      	ldr	r0, [pc, #36]	@ (8009058 <MCU_RegisterModule+0x60>)
 8009034:	f00b fc66 	bl	8014904 <siprintf>
    serialOut(tempBuffer);
 8009038:	4807      	ldr	r0, [pc, #28]	@ (8009058 <MCU_RegisterModule+0x60>)
 800903a:	f7fc faff 	bl	800563c <serialOut>
  }

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800903e:	4b07      	ldr	r3, [pc, #28]	@ (800905c <MCU_RegisterModule+0x64>)
 8009040:	7d1b      	ldrb	r3, [r3, #20]
 8009042:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009044:	2300      	movs	r3, #0
 8009046:	75bb      	strb	r3, [r7, #22]
 8009048:	e07a      	b.n	8009140 <MCU_RegisterModule+0x148>
 800904a:	bf00      	nop
 800904c:	20000da8 	.word	0x20000da8
 8009050:	20000010 	.word	0x20000010
 8009054:	08018fa4 	.word	0x08018fa4
 8009058:	20000b5c 	.word	0x20000b5c
 800905c:	2000a66c 	.word	0x2000a66c
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8009060:	7bba      	ldrb	r2, [r7, #14]
 8009062:	7dbb      	ldrb	r3, [r7, #22]
 8009064:	49b8      	ldr	r1, [pc, #736]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009066:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800906a:	fb00 f303 	mul.w	r3, r0, r3
 800906e:	440b      	add	r3, r1
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d161      	bne.n	800913a <MCU_RegisterModule+0x142>
 8009076:	7bfa      	ldrb	r2, [r7, #15]
 8009078:	7dbb      	ldrb	r3, [r7, #22]
 800907a:	49b3      	ldr	r1, [pc, #716]	@ (8009348 <MCU_RegisterModule+0x350>)
 800907c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009080:	fb00 f303 	mul.w	r3, r0, r3
 8009084:	440b      	add	r3, r1
 8009086:	3301      	adds	r3, #1
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d155      	bne.n	800913a <MCU_RegisterModule+0x142>
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	7dbb      	ldrb	r3, [r7, #22]
 8009092:	49ad      	ldr	r1, [pc, #692]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009094:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009098:	fb00 f303 	mul.w	r3, r0, r3
 800909c:	440b      	add	r3, r1
 800909e:	3304      	adds	r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d149      	bne.n	800913a <MCU_RegisterModule+0x142>
      moduleIndex = index; // module is already registered, save the index
 80090a6:	7dbb      	ldrb	r3, [r7, #22]
 80090a8:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
 80090ac:	4aa6      	ldr	r2, [pc, #664]	@ (8009348 <MCU_RegisterModule+0x350>)
 80090ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80090bc:	7893      	ldrb	r3, [r2, #2]
 80090be:	f023 0301 	bic.w	r3, r3, #1
 80090c2:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80090c4:	4ba1      	ldr	r3, [pc, #644]	@ (800934c <MCU_RegisterModule+0x354>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80090cc:	499e      	ldr	r1, [pc, #632]	@ (8009348 <MCU_RegisterModule+0x350>)
 80090ce:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80090d2:	fb00 f303 	mul.w	r3, r0, r3
 80090d6:	440b      	add	r3, r1
 80090d8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80090dc:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	4a9b      	ldr	r2, [pc, #620]	@ (8009350 <MCU_RegisterModule+0x358>)
 80090e2:	6812      	ldr	r2, [r2, #0]
 80090e4:	4998      	ldr	r1, [pc, #608]	@ (8009348 <MCU_RegisterModule+0x350>)
 80090e6:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80090ea:	fb00 f303 	mul.w	r3, r0, r3
 80090ee:	440b      	add	r3, r1
 80090f0:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80090f4:	601a      	str	r2, [r3, #0]
      module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on re-registration
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	4a93      	ldr	r2, [pc, #588]	@ (8009348 <MCU_RegisterModule+0x350>)
 80090fa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	4413      	add	r3, r2
 8009104:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
      if(debugMessages & DBG_MSG_ANNOUNCE){
 800910c:	4b91      	ldr	r3, [pc, #580]	@ (8009354 <MCU_RegisterModule+0x35c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d010      	beq.n	800913a <MCU_RegisterModule+0x142>
        sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); 
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	4a8b      	ldr	r2, [pc, #556]	@ (8009348 <MCU_RegisterModule+0x350>)
 800911c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	3308      	adds	r3, #8
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	498a      	ldr	r1, [pc, #552]	@ (8009358 <MCU_RegisterModule+0x360>)
 800912e:	488b      	ldr	r0, [pc, #556]	@ (800935c <MCU_RegisterModule+0x364>)
 8009130:	f00b fbe8 	bl	8014904 <siprintf>
        serialOut(tempBuffer);
 8009134:	4889      	ldr	r0, [pc, #548]	@ (800935c <MCU_RegisterModule+0x364>)
 8009136:	f7fc fa81 	bl	800563c <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 800913a:	7dbb      	ldrb	r3, [r7, #22]
 800913c:	3301      	adds	r3, #1
 800913e:	75bb      	strb	r3, [r7, #22]
 8009140:	4b87      	ldr	r3, [pc, #540]	@ (8009360 <MCU_RegisterModule+0x368>)
 8009142:	7d1b      	ldrb	r3, [r3, #20]
 8009144:	7dba      	ldrb	r2, [r7, #22]
 8009146:	429a      	cmp	r2, r3
 8009148:	d38a      	bcc.n	8009060 <MCU_RegisterModule+0x68>
      }
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 800914a:	4b85      	ldr	r3, [pc, #532]	@ (8009360 <MCU_RegisterModule+0x368>)
 800914c:	7d1b      	ldrb	r3, [r3, #20]
 800914e:	7dfa      	ldrb	r2, [r7, #23]
 8009150:	429a      	cmp	r2, r3
 8009152:	f040 8087 	bne.w	8009264 <MCU_RegisterModule+0x26c>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	89b8      	ldrh	r0, [r7, #12]
 800915a:	4a7b      	ldr	r2, [pc, #492]	@ (8009348 <MCU_RegisterModule+0x350>)
 800915c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	4413      	add	r3, r2
 8009166:	330a      	adds	r3, #10
 8009168:	4602      	mov	r2, r0
 800916a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	7bf8      	ldrb	r0, [r7, #15]
 8009170:	4a75      	ldr	r2, [pc, #468]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009172:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	4413      	add	r3, r2
 800917c:	3301      	adds	r3, #1
 800917e:	4602      	mov	r2, r0
 8009180:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	7bb8      	ldrb	r0, [r7, #14]
 8009186:	4a70      	ldr	r2, [pc, #448]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009188:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	4413      	add	r3, r2
 8009192:	4602      	mov	r2, r0
 8009194:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	496b      	ldr	r1, [pc, #428]	@ (8009348 <MCU_RegisterModule+0x350>)
 800919c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80091a0:	fb00 f303 	mul.w	r3, r0, r3
 80091a4:	440b      	add	r3, r1
 80091a6:	3304      	adds	r3, #4
 80091a8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80091aa:	4b68      	ldr	r3, [pc, #416]	@ (800934c <MCU_RegisterModule+0x354>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80091b2:	4965      	ldr	r1, [pc, #404]	@ (8009348 <MCU_RegisterModule+0x350>)
 80091b4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80091b8:	fb00 f303 	mul.w	r3, r0, r3
 80091bc:	440b      	add	r3, r1
 80091be:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80091c2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	4a62      	ldr	r2, [pc, #392]	@ (8009350 <MCU_RegisterModule+0x358>)
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	495f      	ldr	r1, [pc, #380]	@ (8009348 <MCU_RegisterModule+0x350>)
 80091cc:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80091d0:	fb00 f303 	mul.w	r3, r0, r3
 80091d4:	440b      	add	r3, r1
 80091d6:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80091da:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	4a5a      	ldr	r2, [pc, #360]	@ (8009348 <MCU_RegisterModule+0x350>)
 80091e0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Initialize timeout counter for new module
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	4a54      	ldr	r2, [pc, #336]	@ (8009348 <MCU_RegisterModule+0x350>)
 80091f6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 8009208:	4b55      	ldr	r3, [pc, #340]	@ (8009360 <MCU_RegisterModule+0x368>)
 800920a:	7d1b      	ldrb	r3, [r3, #20]
 800920c:	3301      	adds	r3, #1
 800920e:	b2da      	uxtb	r2, r3
 8009210:	4b53      	ldr	r3, [pc, #332]	@ (8009360 <MCU_RegisterModule+0x368>)
 8009212:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	4a52      	ldr	r2, [pc, #328]	@ (8009360 <MCU_RegisterModule+0x368>)
 8009218:	7d10      	ldrb	r0, [r2, #20]
 800921a:	4a4b      	ldr	r2, [pc, #300]	@ (8009348 <MCU_RegisterModule+0x350>)
 800921c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	3308      	adds	r3, #8
 8009228:	4602      	mov	r2, r0
 800922a:	701a      	strb	r2, [r3, #0]
    if(debugMessages & DBG_MSG_ANNOUNCE){
 800922c:	4b49      	ldr	r3, [pc, #292]	@ (8009354 <MCU_RegisterModule+0x35c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d015      	beq.n	8009264 <MCU_RegisterModule+0x26c>
      sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total modules=%d", moduleIndex, module[moduleIndex].moduleId, pack.moduleCount); 
 8009238:	7dfa      	ldrb	r2, [r7, #23]
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	4942      	ldr	r1, [pc, #264]	@ (8009348 <MCU_RegisterModule+0x350>)
 800923e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009242:	fb00 f303 	mul.w	r3, r0, r3
 8009246:	440b      	add	r3, r1
 8009248:	3308      	adds	r3, #8
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4619      	mov	r1, r3
 800924e:	4b44      	ldr	r3, [pc, #272]	@ (8009360 <MCU_RegisterModule+0x368>)
 8009250:	7d1b      	ldrb	r3, [r3, #20]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	460b      	mov	r3, r1
 8009256:	4943      	ldr	r1, [pc, #268]	@ (8009364 <MCU_RegisterModule+0x36c>)
 8009258:	4840      	ldr	r0, [pc, #256]	@ (800935c <MCU_RegisterModule+0x364>)
 800925a:	f00b fb53 	bl	8014904 <siprintf>
      serialOut(tempBuffer);
 800925e:	483f      	ldr	r0, [pc, #252]	@ (800935c <MCU_RegisterModule+0x364>)
 8009260:	f7fc f9ec 	bl	800563c <serialOut>
    }
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	4a38      	ldr	r2, [pc, #224]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009268:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	4413      	add	r3, r2
 8009272:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009276:	2201      	movs	r2, #1
 8009278:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	4a32      	ldr	r2, [pc, #200]	@ (8009348 <MCU_RegisterModule+0x350>)
 800927e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	4a2d      	ldr	r2, [pc, #180]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009294:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	3308      	adds	r3, #8
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 80092a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009360 <MCU_RegisterModule+0x368>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	4a26      	ldr	r2, [pc, #152]	@ (8009348 <MCU_RegisterModule+0x350>)
 80092ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	3301      	adds	r3, #1
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	4a21      	ldr	r2, [pc, #132]	@ (8009348 <MCU_RegisterModule+0x350>)
 80092c2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80092c6:	fb01 f303 	mul.w	r3, r1, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009348 <MCU_RegisterModule+0x350>)
 80092d4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	4413      	add	r3, r2
 80092de:	3304      	adds	r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80092e4:	4b20      	ldr	r3, [pc, #128]	@ (8009368 <MCU_RegisterModule+0x370>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80092ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009368 <MCU_RegisterModule+0x370>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80092f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <MCU_RegisterModule+0x370>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 80092f6:	4b1d      	ldr	r3, [pc, #116]	@ (800936c <MCU_RegisterModule+0x374>)
 80092f8:	461a      	mov	r2, r3
 80092fa:	1d3b      	adds	r3, r7, #4
 80092fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009300:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8009304:	4a18      	ldr	r2, [pc, #96]	@ (8009368 <MCU_RegisterModule+0x370>)
 8009306:	8813      	ldrh	r3, [r2, #0]
 8009308:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 800930c:	f361 030a 	bfi	r3, r1, #0, #11
 8009310:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	4a0c      	ldr	r2, [pc, #48]	@ (8009348 <MCU_RegisterModule+0x350>)
 8009316:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	3308      	adds	r3, #8
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800932a:	490f      	ldr	r1, [pc, #60]	@ (8009368 <MCU_RegisterModule+0x370>)
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	f362 23dc 	bfi	r3, r2, #11, #18
 8009332:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009334:	4a0c      	ldr	r2, [pc, #48]	@ (8009368 <MCU_RegisterModule+0x370>)
 8009336:	7913      	ldrb	r3, [r2, #4]
 8009338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800933c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800933e:	4a0a      	ldr	r2, [pc, #40]	@ (8009368 <MCU_RegisterModule+0x370>)
 8009340:	7913      	ldrb	r3, [r2, #4]
 8009342:	2108      	movs	r1, #8
 8009344:	e014      	b.n	8009370 <MCU_RegisterModule+0x378>
 8009346:	bf00      	nop
 8009348:	20000dec 	.word	0x20000dec
 800934c:	200005d0 	.word	0x200005d0
 8009350:	20000d20 	.word	0x20000d20
 8009354:	20000010 	.word	0x20000010
 8009358:	08018fe4 	.word	0x08018fe4
 800935c:	20000b5c 	.word	0x20000b5c
 8009360:	2000a66c 	.word	0x2000a66c
 8009364:	08019018 	.word	0x08019018
 8009368:	20000d40 	.word	0x20000d40
 800936c:	20000d4c 	.word	0x20000d4c
 8009370:	f361 0303 	bfi	r3, r1, #0, #4
 8009374:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009376:	4a1b      	ldr	r2, [pc, #108]	@ (80093e4 <MCU_RegisterModule+0x3ec>)
 8009378:	7913      	ldrb	r3, [r2, #4]
 800937a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800937e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009380:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <MCU_RegisterModule+0x3ec>)
 8009382:	7913      	ldrb	r3, [r2, #4]
 8009384:	f043 0310 	orr.w	r3, r3, #16
 8009388:	7113      	strb	r3, [r2, #4]

  if(debugMessages & DBG_MSG_REGISTRATION){
 800938a:	4b17      	ldr	r3, [pc, #92]	@ (80093e8 <MCU_RegisterModule+0x3f0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d012      	beq.n	80093bc <MCU_RegisterModule+0x3c4>
    sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); 
 8009396:	793b      	ldrb	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	797b      	ldrb	r3, [r7, #5]
 800939c:	461c      	mov	r4, r3
 800939e:	79bb      	ldrb	r3, [r7, #6]
 80093a0:	79fa      	ldrb	r2, [r7, #7]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	9102      	str	r1, [sp, #8]
 80093a6:	9201      	str	r2, [sp, #4]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4623      	mov	r3, r4
 80093ac:	4602      	mov	r2, r0
 80093ae:	490f      	ldr	r1, [pc, #60]	@ (80093ec <MCU_RegisterModule+0x3f4>)
 80093b0:	480f      	ldr	r0, [pc, #60]	@ (80093f0 <MCU_RegisterModule+0x3f8>)
 80093b2:	f00b faa7 	bl	8014904 <siprintf>
    serialOut(tempBuffer);
 80093b6:	480e      	ldr	r0, [pc, #56]	@ (80093f0 <MCU_RegisterModule+0x3f8>)
 80093b8:	f7fc f940 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80093bc:	2001      	movs	r0, #1
 80093be:	f7ff fd7b 	bl	8008eb8 <MCU_TransmitMessageQueue>
  
  // Request initial status from newly registered module
  MCU_RequestModuleStatus(module[moduleIndex].moduleId);
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	4a0b      	ldr	r2, [pc, #44]	@ (80093f4 <MCU_RegisterModule+0x3fc>)
 80093c6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	3308      	adds	r3, #8
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fd41 	bl	8009e5c <MCU_RequestModuleStatus>
}
 80093da:	bf00      	nop
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd90      	pop	{r4, r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000d40 	.word	0x20000d40
 80093e8:	20000010 	.word	0x20000010
 80093ec:	08019060 	.word	0x08019060
 80093f0:	20000b5c 	.word	0x20000b5c
 80093f4:	20000dec 	.word	0x20000dec

080093f8 <MCU_DeRegisterModule>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r M o d u l e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterModule(uint8_t moduleId){
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	71fb      	strb	r3, [r7, #7]
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 8009402:	4b24      	ldr	r3, [pc, #144]	@ (8009494 <MCU_DeRegisterModule+0x9c>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	733b      	strb	r3, [r7, #12]

    // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8009408:	4b23      	ldr	r3, [pc, #140]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800940e:	4b22      	ldr	r3, [pc, #136]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009410:	2200      	movs	r2, #0
 8009412:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009414:	4b20      	ldr	r3, [pc, #128]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009416:	2200      	movs	r2, #0
 8009418:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 800941a:	7b3a      	ldrb	r2, [r7, #12]
 800941c:	4b1f      	ldr	r3, [pc, #124]	@ (800949c <MCU_DeRegisterModule+0xa4>)
 800941e:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8009420:	4a1d      	ldr	r2, [pc, #116]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009422:	8813      	ldrh	r3, [r2, #0]
 8009424:	f240 511e 	movw	r1, #1310	@ 0x51e
 8009428:	f361 030a 	bfi	r3, r1, #0, #11
 800942c:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                     // Extended ID - specific module
 800942e:	79fa      	ldrb	r2, [r7, #7]
 8009430:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009434:	4918      	ldr	r1, [pc, #96]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009436:	680b      	ldr	r3, [r1, #0]
 8009438:	f362 23dc 	bfi	r3, r2, #11, #18
 800943c:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800943e:	4a16      	ldr	r2, [pc, #88]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009440:	7913      	ldrb	r3, [r2, #4]
 8009442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009446:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 bytes to transmit
 8009448:	4a13      	ldr	r2, [pc, #76]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 800944a:	7913      	ldrb	r3, [r2, #4]
 800944c:	2101      	movs	r1, #1
 800944e:	f361 0303 	bfi	r3, r1, #0, #4
 8009452:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009454:	4a10      	ldr	r2, [pc, #64]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009456:	7913      	ldrb	r3, [r2, #4]
 8009458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800945c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800945e:	4a0e      	ldr	r2, [pc, #56]	@ (8009498 <MCU_DeRegisterModule+0xa0>)
 8009460:	7913      	ldrb	r3, [r2, #4]
 8009462:	f043 0310 	orr.w	r3, r3, #16
 8009466:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register module ID=%02x", moduleId); serialOut(tempBuffer);}
 8009468:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <MCU_DeRegisterModule+0xa8>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <MCU_DeRegisterModule+0x8e>
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	461a      	mov	r2, r3
 8009478:	490a      	ldr	r1, [pc, #40]	@ (80094a4 <MCU_DeRegisterModule+0xac>)
 800947a:	480b      	ldr	r0, [pc, #44]	@ (80094a8 <MCU_DeRegisterModule+0xb0>)
 800947c:	f00b fa42 	bl	8014904 <siprintf>
 8009480:	4809      	ldr	r0, [pc, #36]	@ (80094a8 <MCU_DeRegisterModule+0xb0>)
 8009482:	f7fc f8db 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                  // Send it
 8009486:	2001      	movs	r0, #1
 8009488:	f7ff fd16 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2000a66c 	.word	0x2000a66c
 8009498:	20000d40 	.word	0x20000d40
 800949c:	20000d4c 	.word	0x20000d4c
 80094a0:	2000000c 	.word	0x2000000c
 80094a4:	080190ac 	.word	0x080190ac
 80094a8:	20000b5c 	.word	0x20000b5c

080094ac <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 80094b2:	4b22      	ldr	r3, [pc, #136]	@ (800953c <MCU_DeRegisterAllModules+0x90>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 80094b8:	4b21      	ldr	r3, [pc, #132]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80094be:	4b20      	ldr	r3, [pc, #128]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80094c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80094ca:	793a      	ldrb	r2, [r7, #4]
 80094cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009544 <MCU_DeRegisterAllModules+0x98>)
 80094ce:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 80094d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094d2:	8813      	ldrh	r3, [r2, #0]
 80094d4:	f240 511e 	movw	r1, #1310	@ 0x51e
 80094d8:	f361 030a 	bfi	r3, r1, #0, #11
 80094dc:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 80094de:	4a18      	ldr	r2, [pc, #96]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094e0:	6813      	ldr	r3, [r2, #0]
 80094e2:	f36f 23dc 	bfc	r3, #11, #18
 80094e6:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80094e8:	4a15      	ldr	r2, [pc, #84]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094ea:	7913      	ldrb	r3, [r2, #4]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80094f2:	4a13      	ldr	r2, [pc, #76]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 80094f4:	7913      	ldrb	r3, [r2, #4]
 80094f6:	2101      	movs	r1, #1
 80094f8:	f361 0303 	bfi	r3, r1, #0, #4
 80094fc:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80094fe:	4a10      	ldr	r2, [pc, #64]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 8009500:	7913      	ldrb	r3, [r2, #4]
 8009502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009506:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009508:	4a0d      	ldr	r2, [pc, #52]	@ (8009540 <MCU_DeRegisterAllModules+0x94>)
 800950a:	7913      	ldrb	r3, [r2, #4]
 800950c:	f043 0310 	orr.w	r3, r3, #16
 8009510:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <MCU_DeRegisterAllModules+0x9c>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	f003 0308 	and.w	r3, r3, #8
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <MCU_DeRegisterAllModules+0x80>
 800951e:	490b      	ldr	r1, [pc, #44]	@ (800954c <MCU_DeRegisterAllModules+0xa0>)
 8009520:	480b      	ldr	r0, [pc, #44]	@ (8009550 <MCU_DeRegisterAllModules+0xa4>)
 8009522:	f00b f9ef 	bl	8014904 <siprintf>
 8009526:	480a      	ldr	r0, [pc, #40]	@ (8009550 <MCU_DeRegisterAllModules+0xa4>)
 8009528:	f7fc f888 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800952c:	2001      	movs	r0, #1
 800952e:	f7ff fcc3 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000a66c 	.word	0x2000a66c
 8009540:	20000d40 	.word	0x20000d40
 8009544:	20000d4c 	.word	0x20000d4c
 8009548:	2000000c 	.word	0x2000000c
 800954c:	080190d4 	.word	0x080190d4
 8009550:	20000b5c 	.word	0x20000b5c

08009554 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 800955a:	1d3b      	adds	r3, r7, #4
 800955c:	2201      	movs	r2, #1
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f00b fa36 	bl	80149d2 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8009566:	4b22      	ldr	r3, [pc, #136]	@ (80095f0 <MCU_IsolateAllModules+0x9c>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 800956c:	4b21      	ldr	r3, [pc, #132]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8009572:	4b20      	ldr	r3, [pc, #128]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009578:	4b1e      	ldr	r3, [pc, #120]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 800957a:	2200      	movs	r2, #0
 800957c:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 800957e:	793a      	ldrb	r2, [r7, #4]
 8009580:	4b1d      	ldr	r3, [pc, #116]	@ (80095f8 <MCU_IsolateAllModules+0xa4>)
 8009582:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8009584:	4a1b      	ldr	r2, [pc, #108]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 8009586:	8813      	ldrh	r3, [r2, #0]
 8009588:	f240 511f 	movw	r1, #1311	@ 0x51f
 800958c:	f361 030a 	bfi	r3, r1, #0, #11
 8009590:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8009592:	4a18      	ldr	r2, [pc, #96]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 8009594:	6813      	ldr	r3, [r2, #0]
 8009596:	f36f 23dc 	bfc	r3, #11, #18
 800959a:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800959c:	4a15      	ldr	r2, [pc, #84]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 800959e:	7913      	ldrb	r3, [r2, #4]
 80095a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80095a6:	4a13      	ldr	r2, [pc, #76]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 80095a8:	7913      	ldrb	r3, [r2, #4]
 80095aa:	2101      	movs	r1, #1
 80095ac:	f361 0303 	bfi	r3, r1, #0, #4
 80095b0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80095b2:	4a10      	ldr	r2, [pc, #64]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 80095b4:	7913      	ldrb	r3, [r2, #4]
 80095b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095ba:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80095bc:	4a0d      	ldr	r2, [pc, #52]	@ (80095f4 <MCU_IsolateAllModules+0xa0>)
 80095be:	7913      	ldrb	r3, [r2, #4]
 80095c0:	f043 0310 	orr.w	r3, r3, #16
 80095c4:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 80095c6:	4b0d      	ldr	r3, [pc, #52]	@ (80095fc <MCU_IsolateAllModules+0xa8>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	f003 0308 	and.w	r3, r3, #8
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d006      	beq.n	80095e0 <MCU_IsolateAllModules+0x8c>
 80095d2:	490b      	ldr	r1, [pc, #44]	@ (8009600 <MCU_IsolateAllModules+0xac>)
 80095d4:	480b      	ldr	r0, [pc, #44]	@ (8009604 <MCU_IsolateAllModules+0xb0>)
 80095d6:	f00b f995 	bl	8014904 <siprintf>
 80095da:	480a      	ldr	r0, [pc, #40]	@ (8009604 <MCU_IsolateAllModules+0xb0>)
 80095dc:	f7fc f82e 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80095e0:	2001      	movs	r0, #1
 80095e2:	f7ff fc69 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	2000a66c 	.word	0x2000a66c
 80095f4:	20000d40 	.word	0x20000d40
 80095f8:	20000d4c 	.word	0x20000d4c
 80095fc:	2000000c 	.word	0x2000000c
 8009600:	080190fc 	.word	0x080190fc
 8009604:	20000b5c 	.word	0x20000b5c

08009608 <MCU_RequestModuleAnnouncement>:

/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e A n n o u n c e m e n t                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleAnnouncement(void){
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ANNOUNCE_REQUEST announceRequest;
  
  // configure the packet
  announceRequest.controllerId = pack.id;
 800960e:	4b22      	ldr	r3, [pc, #136]	@ (8009698 <MCU_RequestModuleAnnouncement+0x90>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	713b      	strb	r3, [r7, #4]
  
  // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8009614:	4b21      	ldr	r3, [pc, #132]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800961a:	4b20      	ldr	r3, [pc, #128]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 800961c:	2200      	movs	r2, #0
 800961e:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009620:	4b1e      	ldr	r3, [pc, #120]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 8009622:	2200      	movs	r2, #0
 8009624:	609a      	str	r2, [r3, #8]
  
  // copy announcement request packet to txd structure
  memcpy(txd, &announceRequest, sizeof(announceRequest));
 8009626:	793a      	ldrb	r2, [r7, #4]
 8009628:	4b1d      	ldr	r3, [pc, #116]	@ (80096a0 <MCU_RequestModuleAnnouncement+0x98>)
 800962a:	701a      	strb	r2, [r3, #0]
  
  txObj.bF.id.SID = ID_MODULE_ANNOUNCE_REQUEST;   // Standard ID
 800962c:	4a1b      	ldr	r2, [pc, #108]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 800962e:	8813      	ldrh	r3, [r2, #0]
 8009630:	f240 511d 	movw	r1, #1309	@ 0x51d
 8009634:	f361 030a 	bfi	r3, r1, #0, #11
 8009638:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID - broadcast to all
 800963a:	4a18      	ldr	r2, [pc, #96]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 800963c:	6813      	ldr	r3, [r2, #0]
 800963e:	f36f 23dc 	bfc	r3, #11, #18
 8009642:	6013      	str	r3, [r2, #0]
  
  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009644:	4a15      	ldr	r2, [pc, #84]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 8009646:	7913      	ldrb	r3, [r2, #4]
 8009648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800964c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 byte to transmit
 800964e:	4a13      	ldr	r2, [pc, #76]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 8009650:	7913      	ldrb	r3, [r2, #4]
 8009652:	2101      	movs	r1, #1
 8009654:	f361 0303 	bfi	r3, r1, #0, #4
 8009658:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800965a:	4a10      	ldr	r2, [pc, #64]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 800965c:	7913      	ldrb	r3, [r2, #4]
 800965e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009662:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009664:	4a0d      	ldr	r2, [pc, #52]	@ (800969c <MCU_RequestModuleAnnouncement+0x94>)
 8009666:	7913      	ldrb	r3, [r2, #4]
 8009668:	f043 0310 	orr.w	r3, r3, #16
 800966c:	7113      	strb	r3, [r2, #4]
  
  if(debugMessages & DBG_MSG_ANNOUNCE_REQ){
 800966e:	4b0d      	ldr	r3, [pc, #52]	@ (80096a4 <MCU_RequestModuleAnnouncement+0x9c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <MCU_RequestModuleAnnouncement+0x80>
    sprintf(tempBuffer,"MCU TX 0x51D Request module announcements"); 
 800967a:	490b      	ldr	r1, [pc, #44]	@ (80096a8 <MCU_RequestModuleAnnouncement+0xa0>)
 800967c:	480b      	ldr	r0, [pc, #44]	@ (80096ac <MCU_RequestModuleAnnouncement+0xa4>)
 800967e:	f00b f941 	bl	8014904 <siprintf>
    serialOut(tempBuffer);
 8009682:	480a      	ldr	r0, [pc, #40]	@ (80096ac <MCU_RequestModuleAnnouncement+0xa4>)
 8009684:	f7fb ffda 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                  // Send it
 8009688:	2001      	movs	r0, #1
 800968a:	f7ff fc15 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000a66c 	.word	0x2000a66c
 800969c:	20000d40 	.word	0x20000d40
 80096a0:	20000d4c 	.word	0x20000d4c
 80096a4:	20000010 	.word	0x20000010
 80096a8:	08019120 	.word	0x08019120
 80096ac:	20000b5c 	.word	0x20000b5c

080096b0 <MCU_ProcessModuleTime>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 80096b0:	b5b0      	push	{r4, r5, r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 80096b6:	4b34      	ldr	r3, [pc, #208]	@ (8009788 <MCU_ProcessModuleTime+0xd8>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d006      	beq.n	80096d0 <MCU_ProcessModuleTime+0x20>
 80096c2:	4932      	ldr	r1, [pc, #200]	@ (800978c <MCU_ProcessModuleTime+0xdc>)
 80096c4:	4832      	ldr	r0, [pc, #200]	@ (8009790 <MCU_ProcessModuleTime+0xe0>)
 80096c6:	f00b f91d 	bl	8014904 <siprintf>
 80096ca:	4831      	ldr	r0, [pc, #196]	@ (8009790 <MCU_ProcessModuleTime+0xe0>)
 80096cc:	f7fb ffb6 	bl	800563c <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80096d0:	f7fc f89c 	bl	800580c <readRTC>
 80096d4:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80096d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009794 <MCU_ProcessModuleTime+0xe4>)
 80096da:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	f362 13c7 	bfi	r3, r2, #7, #1
 80096e4:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80096e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096ea:	4614      	mov	r4, r2
 80096ec:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80096f0:	4623      	mov	r3, r4
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	462a      	mov	r2, r5
 80096f8:	f362 031e 	bfi	r3, r2, #0, #31
 80096fc:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80096fe:	4b26      	ldr	r3, [pc, #152]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8009704:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 8009706:	2200      	movs	r2, #0
 8009708:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800970a:	4b23      	ldr	r3, [pc, #140]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 800970c:	2200      	movs	r2, #0
 800970e:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 8009710:	463b      	mov	r3, r7
 8009712:	2208      	movs	r2, #8
 8009714:	4619      	mov	r1, r3
 8009716:	4821      	ldr	r0, [pc, #132]	@ (800979c <MCU_ProcessModuleTime+0xec>)
 8009718:	f00c f867 	bl	80157ea <memcpy>

  txObj.bF.id.SID = ID_MODULE_SET_TIME;     // Standard ID
 800971c:	4a1e      	ldr	r2, [pc, #120]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 800971e:	8813      	ldrh	r3, [r2, #0]
 8009720:	f240 5116 	movw	r1, #1302	@ 0x516
 8009724:	f361 030a 	bfi	r3, r1, #0, #11
 8009728:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800972a:	4a1b      	ldr	r2, [pc, #108]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 800972c:	6813      	ldr	r3, [r2, #0]
 800972e:	f36f 23dc 	bfc	r3, #11, #18
 8009732:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009734:	4a18      	ldr	r2, [pc, #96]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 8009736:	7913      	ldrb	r3, [r2, #4]
 8009738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800973c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800973e:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 8009740:	7913      	ldrb	r3, [r2, #4]
 8009742:	2108      	movs	r1, #8
 8009744:	f361 0303 	bfi	r3, r1, #0, #4
 8009748:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800974a:	4a13      	ldr	r2, [pc, #76]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 800974c:	7913      	ldrb	r3, [r2, #4]
 800974e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009752:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009754:	4a10      	ldr	r2, [pc, #64]	@ (8009798 <MCU_ProcessModuleTime+0xe8>)
 8009756:	7913      	ldrb	r3, [r2, #4]
 8009758:	f043 0310 	orr.w	r3, r3, #16
 800975c:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <MCU_ProcessModuleTime+0xd8>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 0308 	and.w	r3, r3, #8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d006      	beq.n	8009778 <MCU_ProcessModuleTime+0xc8>
 800976a:	490d      	ldr	r1, [pc, #52]	@ (80097a0 <MCU_ProcessModuleTime+0xf0>)
 800976c:	4808      	ldr	r0, [pc, #32]	@ (8009790 <MCU_ProcessModuleTime+0xe0>)
 800976e:	f00b f8c9 	bl	8014904 <siprintf>
 8009772:	4807      	ldr	r0, [pc, #28]	@ (8009790 <MCU_ProcessModuleTime+0xe0>)
 8009774:	f7fb ff62 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009778:	2001      	movs	r0, #1
 800977a:	f7ff fb9d 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bdb0      	pop	{r4, r5, r7, pc}
 8009786:	bf00      	nop
 8009788:	2000000c 	.word	0x2000000c
 800978c:	0801914c 	.word	0x0801914c
 8009790:	20000b5c 	.word	0x20000b5c
 8009794:	2000a66c 	.word	0x2000a66c
 8009798:	20000d40 	.word	0x20000d40
 800979c:	20000d4c 	.word	0x20000d4c
 80097a0:	08019168 	.word	0x08019168

080097a4 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 80097ae:	4b41      	ldr	r3, [pc, #260]	@ (80098b4 <MCU_RequestHardware+0x110>)
 80097b0:	7d1b      	ldrb	r3, [r3, #20]
 80097b2:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80097b4:	2300      	movs	r3, #0
 80097b6:	73bb      	strb	r3, [r7, #14]
 80097b8:	e010      	b.n	80097dc <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	4a3e      	ldr	r2, [pc, #248]	@ (80098b8 <MCU_RequestHardware+0x114>)
 80097be:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	3308      	adds	r3, #8
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	79fa      	ldrb	r2, [r7, #7]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d101      	bne.n	80097d6 <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	3301      	adds	r3, #1
 80097da:	73bb      	strb	r3, [r7, #14]
 80097dc:	4b35      	ldr	r3, [pc, #212]	@ (80098b4 <MCU_RequestHardware+0x110>)
 80097de:	7d1b      	ldrb	r3, [r3, #20]
 80097e0:	7bba      	ldrb	r2, [r7, #14]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d3e9      	bcc.n	80097ba <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 80097e6:	4b33      	ldr	r3, [pc, #204]	@ (80098b4 <MCU_RequestHardware+0x110>)
 80097e8:	7d1b      	ldrb	r3, [r3, #20]
 80097ea:	7bfa      	ldrb	r2, [r7, #15]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d10d      	bne.n	800980c <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 80097f0:	4b32      	ldr	r3, [pc, #200]	@ (80098bc <MCU_RequestHardware+0x118>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 0309 	and.w	r3, r3, #9
 80097f8:	2b09      	cmp	r3, #9
 80097fa:	d156      	bne.n	80098aa <MCU_RequestHardware+0x106>
 80097fc:	4930      	ldr	r1, [pc, #192]	@ (80098c0 <MCU_RequestHardware+0x11c>)
 80097fe:	4831      	ldr	r0, [pc, #196]	@ (80098c4 <MCU_RequestHardware+0x120>)
 8009800:	f00b f880 	bl	8014904 <siprintf>
 8009804:	482f      	ldr	r0, [pc, #188]	@ (80098c4 <MCU_RequestHardware+0x120>)
 8009806:	f7fb ff19 	bl	800563c <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 800980a:	e04e      	b.n	80098aa <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4a2a      	ldr	r2, [pc, #168]	@ (80098b8 <MCU_RequestHardware+0x114>)
 8009810:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009814:	fb01 f303 	mul.w	r3, r1, r3
 8009818:	4413      	add	r3, r2
 800981a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8009826:	4b28      	ldr	r3, [pc, #160]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800982c:	4b26      	ldr	r3, [pc, #152]	@ (80098c8 <MCU_RequestHardware+0x124>)
 800982e:	2200      	movs	r2, #0
 8009830:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009832:	4b25      	ldr	r3, [pc, #148]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8009838:	7b3a      	ldrb	r2, [r7, #12]
 800983a:	4b24      	ldr	r3, [pc, #144]	@ (80098cc <MCU_RequestHardware+0x128>)
 800983c:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 800983e:	4a22      	ldr	r2, [pc, #136]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009840:	8813      	ldrh	r3, [r2, #0]
 8009842:	f240 5111 	movw	r1, #1297	@ 0x511
 8009846:	f361 030a 	bfi	r3, r1, #0, #11
 800984a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 800984c:	79fa      	ldrb	r2, [r7, #7]
 800984e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009852:	491d      	ldr	r1, [pc, #116]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009854:	680b      	ldr	r3, [r1, #0]
 8009856:	f362 23dc 	bfi	r3, r2, #11, #18
 800985a:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800985c:	4a1a      	ldr	r2, [pc, #104]	@ (80098c8 <MCU_RequestHardware+0x124>)
 800985e:	7913      	ldrb	r3, [r2, #4]
 8009860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009864:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8009866:	4a18      	ldr	r2, [pc, #96]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009868:	7913      	ldrb	r3, [r2, #4]
 800986a:	2101      	movs	r1, #1
 800986c:	f361 0303 	bfi	r3, r1, #0, #4
 8009870:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009872:	4a15      	ldr	r2, [pc, #84]	@ (80098c8 <MCU_RequestHardware+0x124>)
 8009874:	7913      	ldrb	r3, [r2, #4]
 8009876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800987a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800987c:	4a12      	ldr	r2, [pc, #72]	@ (80098c8 <MCU_RequestHardware+0x124>)
 800987e:	7913      	ldrb	r3, [r2, #4]
 8009880:	f043 0310 	orr.w	r3, r3, #16
 8009884:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009886:	4b0d      	ldr	r3, [pc, #52]	@ (80098bc <MCU_RequestHardware+0x118>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	f003 0308 	and.w	r3, r3, #8
 800988e:	2b00      	cmp	r3, #0
 8009890:	d008      	beq.n	80098a4 <MCU_RequestHardware+0x100>
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	461a      	mov	r2, r3
 8009896:	490e      	ldr	r1, [pc, #56]	@ (80098d0 <MCU_RequestHardware+0x12c>)
 8009898:	480a      	ldr	r0, [pc, #40]	@ (80098c4 <MCU_RequestHardware+0x120>)
 800989a:	f00b f833 	bl	8014904 <siprintf>
 800989e:	4809      	ldr	r0, [pc, #36]	@ (80098c4 <MCU_RequestHardware+0x120>)
 80098a0:	f7fb fecc 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 80098a4:	2001      	movs	r0, #1
 80098a6:	f7ff fb07 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	2000a66c 	.word	0x2000a66c
 80098b8:	20000dec 	.word	0x20000dec
 80098bc:	2000000c 	.word	0x2000000c
 80098c0:	08019180 	.word	0x08019180
 80098c4:	20000b5c 	.word	0x20000b5c
 80098c8:	20000d40 	.word	0x20000d40
 80098cc:	20000d4c 	.word	0x20000d4c
 80098d0:	080191bc 	.word	0x080191bc
 80098d4:	00000000 	.word	0x00000000

080098d8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	b08e      	sub	sp, #56	@ 0x38
 80098de:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 80098e0:	463b      	mov	r3, r7
 80098e2:	2208      	movs	r2, #8
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f00b f873 	bl	80149d2 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 80098ec:	4a94      	ldr	r2, [pc, #592]	@ (8009b40 <MCU_ProcessModuleHardware+0x268>)
 80098ee:	463b      	mov	r3, r7
 80098f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098f4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80098f8:	4b92      	ldr	r3, [pc, #584]	@ (8009b44 <MCU_ProcessModuleHardware+0x26c>)
 80098fa:	7d1b      	ldrb	r3, [r3, #20]
 80098fc:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80098fe:	2300      	movs	r3, #0
 8009900:	75bb      	strb	r3, [r7, #22]
 8009902:	e015      	b.n	8009930 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009904:	4b90      	ldr	r3, [pc, #576]	@ (8009b48 <MCU_ProcessModuleHardware+0x270>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800990c:	7dbb      	ldrb	r3, [r7, #22]
 800990e:	498f      	ldr	r1, [pc, #572]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009910:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009914:	fb00 f303 	mul.w	r3, r0, r3
 8009918:	440b      	add	r3, r1
 800991a:	3308      	adds	r3, #8
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009922:	429a      	cmp	r2, r3
 8009924:	d101      	bne.n	800992a <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 8009926:	7dbb      	ldrb	r3, [r7, #22]
 8009928:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800992a:	7dbb      	ldrb	r3, [r7, #22]
 800992c:	3301      	adds	r3, #1
 800992e:	75bb      	strb	r3, [r7, #22]
 8009930:	4b84      	ldr	r3, [pc, #528]	@ (8009b44 <MCU_ProcessModuleHardware+0x26c>)
 8009932:	7d1b      	ldrb	r3, [r3, #20]
 8009934:	7dba      	ldrb	r2, [r7, #22]
 8009936:	429a      	cmp	r2, r3
 8009938:	d3e4      	bcc.n	8009904 <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 800993a:	4b82      	ldr	r3, [pc, #520]	@ (8009b44 <MCU_ProcessModuleHardware+0x26c>)
 800993c:	7d1b      	ldrb	r3, [r3, #20]
 800993e:	7dfa      	ldrb	r2, [r7, #23]
 8009940:	429a      	cmp	r2, r3
 8009942:	d10e      	bne.n	8009962 <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8009944:	4b82      	ldr	r3, [pc, #520]	@ (8009b50 <MCU_ProcessModuleHardware+0x278>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f003 0309 	and.w	r3, r3, #9
 800994c:	2b09      	cmp	r3, #9
 800994e:	f040 825d 	bne.w	8009e0c <MCU_ProcessModuleHardware+0x534>
 8009952:	4980      	ldr	r1, [pc, #512]	@ (8009b54 <MCU_ProcessModuleHardware+0x27c>)
 8009954:	4880      	ldr	r0, [pc, #512]	@ (8009b58 <MCU_ProcessModuleHardware+0x280>)
 8009956:	f00a ffd5 	bl	8014904 <siprintf>
 800995a:	487f      	ldr	r0, [pc, #508]	@ (8009b58 <MCU_ProcessModuleHardware+0x280>)
 800995c:	f7fb fe6e 	bl	800563c <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009960:	e254      	b.n	8009e0c <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	8838      	ldrh	r0, [r7, #0]
 8009966:	4a79      	ldr	r2, [pc, #484]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009968:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800996c:	fb01 f303 	mul.w	r3, r1, r3
 8009970:	4413      	add	r3, r2
 8009972:	330e      	adds	r3, #14
 8009974:	4602      	mov	r2, r0
 8009976:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	8878      	ldrh	r0, [r7, #2]
 800997c:	4a73      	ldr	r2, [pc, #460]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 800997e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009982:	fb01 f303 	mul.w	r3, r1, r3
 8009986:	4413      	add	r3, r2
 8009988:	3310      	adds	r3, #16
 800998a:	4602      	mov	r2, r0
 800998c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	88b8      	ldrh	r0, [r7, #4]
 8009992:	4a6e      	ldr	r2, [pc, #440]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009994:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009998:	fb01 f303 	mul.w	r3, r1, r3
 800999c:	4413      	add	r3, r2
 800999e:	3312      	adds	r3, #18
 80099a0:	4602      	mov	r2, r0
 80099a2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	88f8      	ldrh	r0, [r7, #6]
 80099a8:	4a68      	ldr	r2, [pc, #416]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 80099aa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80099ae:	fb01 f303 	mul.w	r3, r1, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	330c      	adds	r3, #12
 80099b6:	4602      	mov	r2, r0
 80099b8:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80099ba:	4b68      	ldr	r3, [pc, #416]	@ (8009b5c <MCU_ProcessModuleHardware+0x284>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80099c2:	4962      	ldr	r1, [pc, #392]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 80099c4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80099c8:	fb00 f303 	mul.w	r3, r0, r3
 80099cc:	440b      	add	r3, r1
 80099ce:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80099d2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	4a62      	ldr	r2, [pc, #392]	@ (8009b60 <MCU_ProcessModuleHardware+0x288>)
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	495c      	ldr	r1, [pc, #368]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 80099dc:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80099e0:	fb00 f303 	mul.w	r3, r0, r3
 80099e4:	440b      	add	r3, r1
 80099e6:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80099ea:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	4a57      	ldr	r2, [pc, #348]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 80099f0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80099f4:	fb01 f303 	mul.w	r3, r1, r3
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	4a51      	ldr	r2, [pc, #324]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009a06:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	330e      	adds	r3, #14
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f6 fd6d 	bl	80004f4 <__aeabi_i2d>
 8009a1a:	a345      	add	r3, pc, #276	@ (adr r3, 8009b30 <MCU_ProcessModuleHardware+0x258>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f7f6 fdd2 	bl	80005c8 <__aeabi_dmul>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	a342      	add	r3, pc, #264	@ (adr r3, 8009b38 <MCU_ProcessModuleHardware+0x260>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fc11 	bl	8000258 <__aeabi_dsub>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f7f7 f8bb 	bl	8000bb8 <__aeabi_d2f>
 8009a42:	4603      	mov	r3, r0
 8009a44:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	4a40      	ldr	r2, [pc, #256]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009a4a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	3310      	adds	r3, #16
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f6 fd4b 	bl	80004f4 <__aeabi_i2d>
 8009a5e:	a334      	add	r3, pc, #208	@ (adr r3, 8009b30 <MCU_ProcessModuleHardware+0x258>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fdb0 	bl	80005c8 <__aeabi_dmul>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4619      	mov	r1, r3
 8009a70:	a331      	add	r3, pc, #196	@ (adr r3, 8009b38 <MCU_ProcessModuleHardware+0x260>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fbef 	bl	8000258 <__aeabi_dsub>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7f7 f899 	bl	8000bb8 <__aeabi_d2f>
 8009a86:	4603      	mov	r3, r0
 8009a88:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8009a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	d567      	bpl.n	8009b68 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009a98:	4b2d      	ldr	r3, [pc, #180]	@ (8009b50 <MCU_ProcessModuleHardware+0x278>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 0309 	and.w	r3, r3, #9
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d113      	bne.n	8009acc <MCU_ProcessModuleHardware+0x1f4>
 8009aa4:	4b28      	ldr	r3, [pc, #160]	@ (8009b48 <MCU_ProcessModuleHardware+0x270>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009aac:	461c      	mov	r4, r3
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f7f6 fd32 	bl	8000518 <__aeabi_f2d>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	e9cd 2300 	strd	r2, r3, [sp]
 8009abc:	4622      	mov	r2, r4
 8009abe:	4929      	ldr	r1, [pc, #164]	@ (8009b64 <MCU_ProcessModuleHardware+0x28c>)
 8009ac0:	4825      	ldr	r0, [pc, #148]	@ (8009b58 <MCU_ProcessModuleHardware+0x280>)
 8009ac2:	f00a ff1f 	bl	8014904 <siprintf>
 8009ac6:	4824      	ldr	r0, [pc, #144]	@ (8009b58 <MCU_ProcessModuleHardware+0x280>)
 8009ac8:	f7fb fdb8 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	4a1f      	ldr	r2, [pc, #124]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009ad0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	330e      	adds	r3, #14
 8009adc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009ae0:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	4a19      	ldr	r2, [pc, #100]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009ae6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	4413      	add	r3, r2
 8009af0:	3310      	adds	r3, #16
 8009af2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009af6:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	4a14      	ldr	r2, [pc, #80]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009afc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b00:	fb01 f303 	mul.w	r3, r1, r3
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009b0a:	7893      	ldrb	r3, [r2, #2]
 8009b0c:	f043 0302 	orr.w	r3, r3, #2
 8009b10:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	4a0d      	ldr	r2, [pc, #52]	@ (8009b4c <MCU_ProcessModuleHardware+0x274>)
 8009b16:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	3308      	adds	r3, #8
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 f88a 	bl	800ac40 <MCU_TransmitState>
 8009b2c:	e04f      	b.n	8009bce <MCU_ProcessModuleHardware+0x2f6>
 8009b2e:	bf00      	nop
 8009b30:	47ae147b 	.word	0x47ae147b
 8009b34:	3f947ae1 	.word	0x3f947ae1
 8009b38:	47ae147b 	.word	0x47ae147b
 8009b3c:	40847ae1 	.word	0x40847ae1
 8009b40:	20000da8 	.word	0x20000da8
 8009b44:	2000a66c 	.word	0x2000a66c
 8009b48:	20000d9c 	.word	0x20000d9c
 8009b4c:	20000dec 	.word	0x20000dec
 8009b50:	2000000c 	.word	0x2000000c
 8009b54:	080191e4 	.word	0x080191e4
 8009b58:	20000b5c 	.word	0x20000b5c
 8009b5c:	200005d0 	.word	0x200005d0
 8009b60:	20000d20 	.word	0x20000d20
 8009b64:	08019224 	.word	0x08019224
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b78:	dd29      	ble.n	8009bce <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8009b7a:	4bad      	ldr	r3, [pc, #692]	@ (8009e30 <MCU_ProcessModuleHardware+0x558>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d018      	beq.n	8009bb8 <MCU_ProcessModuleHardware+0x2e0>
 8009b86:	4bab      	ldr	r3, [pc, #684]	@ (8009e34 <MCU_ProcessModuleHardware+0x55c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009b8e:	461c      	mov	r4, r3
 8009b90:	6938      	ldr	r0, [r7, #16]
 8009b92:	f7f6 fcc1 	bl	8000518 <__aeabi_f2d>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	f04f 0000 	mov.w	r0, #0
 8009b9e:	49a6      	ldr	r1, [pc, #664]	@ (8009e38 <MCU_ProcessModuleHardware+0x560>)
 8009ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba4:	e9cd 2300 	strd	r2, r3, [sp]
 8009ba8:	4622      	mov	r2, r4
 8009baa:	49a4      	ldr	r1, [pc, #656]	@ (8009e3c <MCU_ProcessModuleHardware+0x564>)
 8009bac:	48a4      	ldr	r0, [pc, #656]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009bae:	f00a fea9 	bl	8014904 <siprintf>
 8009bb2:	48a3      	ldr	r0, [pc, #652]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009bb4:	f7fb fd42 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	4aa2      	ldr	r2, [pc, #648]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009bbc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	330e      	adds	r3, #14
 8009bc8:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 8009bcc:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8009bce:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bda:	dd4a      	ble.n	8009c72 <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8009bdc:	4b94      	ldr	r3, [pc, #592]	@ (8009e30 <MCU_ProcessModuleHardware+0x558>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 0309 	and.w	r3, r3, #9
 8009be4:	2b09      	cmp	r3, #9
 8009be6:	d113      	bne.n	8009c10 <MCU_ProcessModuleHardware+0x338>
 8009be8:	4b92      	ldr	r3, [pc, #584]	@ (8009e34 <MCU_ProcessModuleHardware+0x55c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7f6 fc90 	bl	8000518 <__aeabi_f2d>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8009c00:	4622      	mov	r2, r4
 8009c02:	4991      	ldr	r1, [pc, #580]	@ (8009e48 <MCU_ProcessModuleHardware+0x570>)
 8009c04:	488e      	ldr	r0, [pc, #568]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009c06:	f00a fe7d 	bl	8014904 <siprintf>
 8009c0a:	488d      	ldr	r0, [pc, #564]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009c0c:	f7fb fd16 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	4a8c      	ldr	r2, [pc, #560]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009c14:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	330e      	adds	r3, #14
 8009c20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009c24:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	4a86      	ldr	r2, [pc, #536]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009c2a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	3310      	adds	r3, #16
 8009c36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009c3a:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	4a81      	ldr	r2, [pc, #516]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009c40:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009c44:	fb01 f303 	mul.w	r3, r1, r3
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009c4e:	7893      	ldrb	r3, [r2, #2]
 8009c50:	f043 0302 	orr.w	r3, r3, #2
 8009c54:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
 8009c58:	4a7a      	ldr	r2, [pc, #488]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009c5a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009c5e:	fb01 f303 	mul.w	r3, r1, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	3308      	adds	r3, #8
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 ffe8 	bl	800ac40 <MCU_TransmitState>
 8009c70:	e032      	b.n	8009cd8 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8009c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c76:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8009e4c <MCU_ProcessModuleHardware+0x574>
 8009c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c82:	d529      	bpl.n	8009cd8 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8009c84:	4b6a      	ldr	r3, [pc, #424]	@ (8009e30 <MCU_ProcessModuleHardware+0x558>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d018      	beq.n	8009cc2 <MCU_ProcessModuleHardware+0x3ea>
 8009c90:	4b68      	ldr	r3, [pc, #416]	@ (8009e34 <MCU_ProcessModuleHardware+0x55c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009c98:	461c      	mov	r4, r3
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7f6 fc3c 	bl	8000518 <__aeabi_f2d>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	4969      	ldr	r1, [pc, #420]	@ (8009e50 <MCU_ProcessModuleHardware+0x578>)
 8009caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cae:	e9cd 2300 	strd	r2, r3, [sp]
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4967      	ldr	r1, [pc, #412]	@ (8009e54 <MCU_ProcessModuleHardware+0x57c>)
 8009cb6:	4862      	ldr	r0, [pc, #392]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009cb8:	f00a fe24 	bl	8014904 <siprintf>
 8009cbc:	4860      	ldr	r0, [pc, #384]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009cbe:	f7fb fcbd 	bl	800563c <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009cc6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009cca:	fb01 f303 	mul.w	r3, r1, r3
 8009cce:	4413      	add	r3, r2
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8009cd6:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009cd8:	4b55      	ldr	r3, [pc, #340]	@ (8009e30 <MCU_ProcessModuleHardware+0x558>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8093 	beq.w	8009e0c <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	4a56      	ldr	r2, [pc, #344]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009cea:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	330e      	adds	r3, #14
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f6 fbfb 	bl	80004f4 <__aeabi_i2d>
 8009cfe:	a346      	add	r3, pc, #280	@ (adr r3, 8009e18 <MCU_ProcessModuleHardware+0x540>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fc60 	bl	80005c8 <__aeabi_dmul>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	a343      	add	r3, pc, #268	@ (adr r3, 8009e20 <MCU_ProcessModuleHardware+0x548>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fa9f 	bl	8000258 <__aeabi_dsub>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7f6 ff49 	bl	8000bb8 <__aeabi_d2f>
 8009d26:	4603      	mov	r3, r0
 8009d28:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	4a45      	ldr	r2, [pc, #276]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009d2e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d32:	fb01 f303 	mul.w	r3, r1, r3
 8009d36:	4413      	add	r3, r2
 8009d38:	3310      	adds	r3, #16
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f6 fbd9 	bl	80004f4 <__aeabi_i2d>
 8009d42:	a335      	add	r3, pc, #212	@ (adr r3, 8009e18 <MCU_ProcessModuleHardware+0x540>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fc3e 	bl	80005c8 <__aeabi_dmul>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4610      	mov	r0, r2
 8009d52:	4619      	mov	r1, r3
 8009d54:	a332      	add	r3, pc, #200	@ (adr r3, 8009e20 <MCU_ProcessModuleHardware+0x548>)
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f7f6 fa7d 	bl	8000258 <__aeabi_dsub>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	f7f6 ff27 	bl	8000bb8 <__aeabi_d2f>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	4a34      	ldr	r2, [pc, #208]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009d72:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3312      	adds	r3, #18
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f6 fbb7 	bl	80004f4 <__aeabi_i2d>
 8009d86:	a328      	add	r3, pc, #160	@ (adr r3, 8009e28 <MCU_ProcessModuleHardware+0x550>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f7f6 fc1c 	bl	80005c8 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4610      	mov	r0, r2
 8009d96:	4619      	mov	r1, r3
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	f7f6 fa5c 	bl	800025c <__adddf3>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4610      	mov	r0, r2
 8009daa:	4619      	mov	r1, r3
 8009dac:	f7f6 ff04 	bl	8000bb8 <__aeabi_d2f>
 8009db0:	4603      	mov	r3, r0
 8009db2:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009db4:	4b1f      	ldr	r3, [pc, #124]	@ (8009e34 <MCU_ProcessModuleHardware+0x55c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	6938      	ldr	r0, [r7, #16]
 8009dc0:	f7f6 fbaa 	bl	8000518 <__aeabi_f2d>
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7f6 fba5 	bl	8000518 <__aeabi_f2d>
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	68b8      	ldr	r0, [r7, #8]
 8009dd4:	f7f6 fba0 	bl	8000518 <__aeabi_f2d>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009ddc:	7df9      	ldrb	r1, [r7, #23]
 8009dde:	4819      	ldr	r0, [pc, #100]	@ (8009e44 <MCU_ProcessModuleHardware+0x56c>)
 8009de0:	f240 46c4 	movw	r6, #1220	@ 0x4c4
 8009de4:	fb06 f101 	mul.w	r1, r6, r1
 8009de8:	4401      	add	r1, r0
 8009dea:	310c      	adds	r1, #12
 8009dec:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009dee:	9106      	str	r1, [sp, #24]
 8009df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009df4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009df8:	e9cd 4500 	strd	r4, r5, [sp]
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	4916      	ldr	r1, [pc, #88]	@ (8009e58 <MCU_ProcessModuleHardware+0x580>)
 8009e00:	480f      	ldr	r0, [pc, #60]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009e02:	f00a fd7f 	bl	8014904 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009e06:	480e      	ldr	r0, [pc, #56]	@ (8009e40 <MCU_ProcessModuleHardware+0x568>)
 8009e08:	f7fb fc18 	bl	800563c <serialOut>
}
 8009e0c:	bf00      	nop
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e16:	bf00      	nop
 8009e18:	47ae147b 	.word	0x47ae147b
 8009e1c:	3f947ae1 	.word	0x3f947ae1
 8009e20:	47ae147b 	.word	0x47ae147b
 8009e24:	40847ae1 	.word	0x40847ae1
 8009e28:	eb851eb8 	.word	0xeb851eb8
 8009e2c:	3f8eb851 	.word	0x3f8eb851
 8009e30:	2000000c 	.word	0x2000000c
 8009e34:	20000d9c 	.word	0x20000d9c
 8009e38:	40240000 	.word	0x40240000
 8009e3c:	0801926c 	.word	0x0801926c
 8009e40:	20000b5c 	.word	0x20000b5c
 8009e44:	20000dec 	.word	0x20000dec
 8009e48:	080192b4 	.word	0x080192b4
 8009e4c:	c2280000 	.word	0xc2280000
 8009e50:	c0450000 	.word	0xc0450000
 8009e54:	080192fc 	.word	0x080192fc
 8009e58:	08019348 	.word	0x08019348

08009e5c <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8009e66:	4b41      	ldr	r3, [pc, #260]	@ (8009f6c <MCU_RequestModuleStatus+0x110>)
 8009e68:	7d1b      	ldrb	r3, [r3, #20]
 8009e6a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73bb      	strb	r3, [r7, #14]
 8009e70:	e010      	b.n	8009e94 <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	4a3e      	ldr	r2, [pc, #248]	@ (8009f70 <MCU_RequestModuleStatus+0x114>)
 8009e76:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	3308      	adds	r3, #8
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	79fa      	ldrb	r2, [r7, #7]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d101      	bne.n	8009e8e <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	3301      	adds	r3, #1
 8009e92:	73bb      	strb	r3, [r7, #14]
 8009e94:	4b35      	ldr	r3, [pc, #212]	@ (8009f6c <MCU_RequestModuleStatus+0x110>)
 8009e96:	7d1b      	ldrb	r3, [r3, #20]
 8009e98:	7bba      	ldrb	r2, [r7, #14]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d3e9      	bcc.n	8009e72 <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8009e9e:	4b33      	ldr	r3, [pc, #204]	@ (8009f6c <MCU_RequestModuleStatus+0x110>)
 8009ea0:	7d1b      	ldrb	r3, [r3, #20]
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d10d      	bne.n	8009ec4 <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8009ea8:	4b32      	ldr	r3, [pc, #200]	@ (8009f74 <MCU_RequestModuleStatus+0x118>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 0309 	and.w	r3, r3, #9
 8009eb0:	2b09      	cmp	r3, #9
 8009eb2:	d156      	bne.n	8009f62 <MCU_RequestModuleStatus+0x106>
 8009eb4:	4930      	ldr	r1, [pc, #192]	@ (8009f78 <MCU_RequestModuleStatus+0x11c>)
 8009eb6:	4831      	ldr	r0, [pc, #196]	@ (8009f7c <MCU_RequestModuleStatus+0x120>)
 8009eb8:	f00a fd24 	bl	8014904 <siprintf>
 8009ebc:	482f      	ldr	r0, [pc, #188]	@ (8009f7c <MCU_RequestModuleStatus+0x120>)
 8009ebe:	f7fb fbbd 	bl	800563c <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8009ec2:	e04e      	b.n	8009f62 <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8009f70 <MCU_RequestModuleStatus+0x114>)
 8009ec8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8009ede:	4b28      	ldr	r3, [pc, #160]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009ee4:	4b26      	ldr	r3, [pc, #152]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009eea:	4b25      	ldr	r3, [pc, #148]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8009ef0:	7b3a      	ldrb	r2, [r7, #12]
 8009ef2:	4b24      	ldr	r3, [pc, #144]	@ (8009f84 <MCU_RequestModuleStatus+0x128>)
 8009ef4:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8009ef6:	4a22      	ldr	r2, [pc, #136]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009ef8:	8813      	ldrh	r3, [r2, #0]
 8009efa:	f240 5112 	movw	r1, #1298	@ 0x512
 8009efe:	f361 030a 	bfi	r3, r1, #0, #11
 8009f02:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8009f04:	79fa      	ldrb	r2, [r7, #7]
 8009f06:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009f0a:	491d      	ldr	r1, [pc, #116]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009f0c:	680b      	ldr	r3, [r1, #0]
 8009f0e:	f362 23dc 	bfi	r3, r2, #11, #18
 8009f12:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009f14:	4a1a      	ldr	r2, [pc, #104]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009f16:	7913      	ldrb	r3, [r2, #4]
 8009f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f1c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8009f1e:	4a18      	ldr	r2, [pc, #96]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009f20:	7913      	ldrb	r3, [r2, #4]
 8009f22:	2101      	movs	r1, #1
 8009f24:	f361 0303 	bfi	r3, r1, #0, #4
 8009f28:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009f2a:	4a15      	ldr	r2, [pc, #84]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009f2c:	7913      	ldrb	r3, [r2, #4]
 8009f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f32:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009f34:	4a12      	ldr	r2, [pc, #72]	@ (8009f80 <MCU_RequestModuleStatus+0x124>)
 8009f36:	7913      	ldrb	r3, [r2, #4]
 8009f38:	f043 0310 	orr.w	r3, r3, #16
 8009f3c:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f74 <MCU_RequestModuleStatus+0x118>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <MCU_RequestModuleStatus+0x100>
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	490e      	ldr	r1, [pc, #56]	@ (8009f88 <MCU_RequestModuleStatus+0x12c>)
 8009f50:	480a      	ldr	r0, [pc, #40]	@ (8009f7c <MCU_RequestModuleStatus+0x120>)
 8009f52:	f00a fcd7 	bl	8014904 <siprintf>
 8009f56:	4809      	ldr	r0, [pc, #36]	@ (8009f7c <MCU_RequestModuleStatus+0x120>)
 8009f58:	f7fb fb70 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f7fe ffab 	bl	8008eb8 <MCU_TransmitMessageQueue>
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	2000a66c 	.word	0x2000a66c
 8009f70:	20000dec 	.word	0x20000dec
 8009f74:	2000000c 	.word	0x2000000c
 8009f78:	080193b4 	.word	0x080193b4
 8009f7c:	20000b5c 	.word	0x20000b5c
 8009f80:	20000d40 	.word	0x20000d40
 8009f84:	20000d4c 	.word	0x20000d4c
 8009f88:	080193f4 	.word	0x080193f4

08009f8c <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8009f9a:	4b37      	ldr	r3, [pc, #220]	@ (800a078 <MCU_FindMaxVoltageModule+0xec>)
 8009f9c:	7d1b      	ldrb	r3, [r3, #20]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	71fb      	strb	r3, [r7, #7]
 8009fa6:	e052      	b.n	800a04e <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	4a34      	ldr	r2, [pc, #208]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 8009fac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fb0:	fb01 f303 	mul.w	r3, r1, r3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	88ba      	ldrh	r2, [r7, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d243      	bcs.n	800a048 <MCU_FindMaxVoltageModule+0xbc>
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 8009fc4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d134      	bne.n	800a048 <MCU_FindMaxVoltageModule+0xbc>
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	4a26      	ldr	r2, [pc, #152]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 8009fe2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009ff0:	789b      	ldrb	r3, [r3, #2]
 8009ff2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d125      	bne.n	800a048 <MCU_FindMaxVoltageModule+0xbc>
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 800a000:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d116      	bne.n	800a048 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	4a17      	ldr	r2, [pc, #92]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 800a01e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a022:	fb01 f303 	mul.w	r3, r1, r3
 800a026:	4413      	add	r3, r2
 800a028:	3314      	adds	r3, #20
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	4a12      	ldr	r2, [pc, #72]	@ (800a07c <MCU_FindMaxVoltageModule+0xf0>)
 800a032:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a036:	fb01 f303 	mul.w	r3, r1, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	3308      	adds	r3, #8
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 800a042:	79bb      	ldrb	r3, [r7, #6]
 800a044:	3301      	adds	r3, #1
 800a046:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	3301      	adds	r3, #1
 800a04c:	71fb      	strb	r3, [r7, #7]
 800a04e:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <MCU_FindMaxVoltageModule+0xec>)
 800a050:	7d1b      	ldrb	r3, [r3, #20]
 800a052:	79fa      	ldrb	r2, [r7, #7]
 800a054:	429a      	cmp	r2, r3
 800a056:	d3a7      	bcc.n	8009fa8 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 800a058:	88bb      	ldrh	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <MCU_FindMaxVoltageModule+0xdc>
 800a05e:	79bb      	ldrb	r3, [r7, #6]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MCU_FindMaxVoltageModule+0xdc>
 800a064:	2300      	movs	r3, #0
 800a066:	e000      	b.n	800a06a <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 800a068:	78fb      	ldrb	r3, [r7, #3]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	2000a66c 	.word	0x2000a66c
 800a07c:	20000dec 	.word	0x20000dec

0800a080 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	b09d      	sub	sp, #116	@ 0x74
 800a086:	af0a      	add	r7, sp, #40	@ 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 800a088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a08c:	2208      	movs	r2, #8
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f00a fc9e 	bl	80149d2 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 800a096:	4ab7      	ldr	r2, [pc, #732]	@ (800a374 <MCU_ProcessModuleStatus1+0x2f4>)
 800a098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0a0:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800a0a4:	4bb4      	ldr	r3, [pc, #720]	@ (800a378 <MCU_ProcessModuleStatus1+0x2f8>)
 800a0a6:	7d1b      	ldrb	r3, [r3, #20]
 800a0a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a0b2:	e01a      	b.n	800a0ea <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a0b4:	4bb1      	ldr	r3, [pc, #708]	@ (800a37c <MCU_ProcessModuleStatus1+0x2fc>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a0bc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0c0:	49af      	ldr	r1, [pc, #700]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a0c2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a0c6:	fb00 f303 	mul.w	r3, r0, r3
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d103      	bne.n	800a0e0 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 800a0d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 800a0e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a0ea:	4ba3      	ldr	r3, [pc, #652]	@ (800a378 <MCU_ProcessModuleStatus1+0x2f8>)
 800a0ec:	7d1b      	ldrb	r3, [r3, #20]
 800a0ee:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d3de      	bcc.n	800a0b4 <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 800a0f6:	4ba0      	ldr	r3, [pc, #640]	@ (800a378 <MCU_ProcessModuleStatus1+0x2f8>)
 800a0f8:	7d1b      	ldrb	r3, [r3, #20]
 800a0fa:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d10e      	bne.n	800a120 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 800a102:	4ba0      	ldr	r3, [pc, #640]	@ (800a384 <MCU_ProcessModuleStatus1+0x304>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f003 0309 	and.w	r3, r3, #9
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	f040 822e 	bne.w	800a56c <MCU_ProcessModuleStatus1+0x4ec>
 800a110:	499d      	ldr	r1, [pc, #628]	@ (800a388 <MCU_ProcessModuleStatus1+0x308>)
 800a112:	489e      	ldr	r0, [pc, #632]	@ (800a38c <MCU_ProcessModuleStatus1+0x30c>)
 800a114:	f00a fbf6 	bl	8014904 <siprintf>
 800a118:	489c      	ldr	r0, [pc, #624]	@ (800a38c <MCU_ProcessModuleStatus1+0x30c>)
 800a11a:	f7fb fa8f 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 800a11e:	e225      	b.n	800a56c <MCU_ProcessModuleStatus1+0x4ec>
    module[moduleIndex].statusPending = false;
 800a120:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a124:	4a96      	ldr	r2, [pc, #600]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a126:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a12a:	fb01 f303 	mul.w	r3, r1, r3
 800a12e:	4413      	add	r3, r2
 800a130:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a138:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a13c:	4a90      	ldr	r2, [pc, #576]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a13e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a142:	fb01 f303 	mul.w	r3, r1, r3
 800a146:	4413      	add	r3, r2
 800a148:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 800a150:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a154:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 800a156:	4a8a      	ldr	r2, [pc, #552]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a158:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a15c:	fb01 f303 	mul.w	r3, r1, r3
 800a160:	4413      	add	r3, r2
 800a162:	3316      	adds	r3, #22
 800a164:	4602      	mov	r2, r0
 800a166:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 800a168:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a16c:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800a16e:	4a84      	ldr	r2, [pc, #528]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a170:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	4413      	add	r3, r2
 800a17a:	3314      	adds	r3, #20
 800a17c:	4602      	mov	r2, r0
 800a17e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 800a180:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a184:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 800a188:	4a7d      	ldr	r2, [pc, #500]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a18a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a18e:	fb01 f303 	mul.w	r3, r1, r3
 800a192:	4413      	add	r3, r2
 800a194:	332b      	adds	r3, #43	@ 0x2b
 800a196:	4602      	mov	r2, r0
 800a198:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 800a19a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a19e:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 800a1a2:	4a77      	ldr	r2, [pc, #476]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a1a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a1a8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	332c      	adds	r3, #44	@ 0x2c
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800a1b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a1b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4a6e      	ldr	r2, [pc, #440]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a1c6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a1ca:	fb01 f303 	mul.w	r3, r1, r3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	3327      	adds	r3, #39	@ 0x27
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 800a1d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a1da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4a66      	ldr	r2, [pc, #408]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a1e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3326      	adds	r3, #38	@ 0x26
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 800a1f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a1fc:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 800a200:	4a5f      	ldr	r2, [pc, #380]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a202:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a206:	fb01 f303 	mul.w	r3, r1, r3
 800a20a:	4413      	add	r3, r2
 800a20c:	332d      	adds	r3, #45	@ 0x2d
 800a20e:	4602      	mov	r2, r0
 800a210:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a212:	4b5f      	ldr	r3, [pc, #380]	@ (800a390 <MCU_ProcessModuleStatus1+0x310>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a21a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a21c:	4958      	ldr	r1, [pc, #352]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a21e:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a222:	fb00 f303 	mul.w	r3, r0, r3
 800a226:	440b      	add	r3, r1
 800a228:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a22c:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a22e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a232:	4a58      	ldr	r2, [pc, #352]	@ (800a394 <MCU_ProcessModuleStatus1+0x314>)
 800a234:	6812      	ldr	r2, [r2, #0]
 800a236:	4952      	ldr	r1, [pc, #328]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a238:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a23c:	fb00 f303 	mul.w	r3, r0, r3
 800a240:	440b      	add	r3, r1
 800a242:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a246:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 800a248:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a24c:	4a4c      	ldr	r2, [pc, #304]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a24e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3327      	adds	r3, #39	@ 0x27
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a260:	4947      	ldr	r1, [pc, #284]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a262:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a266:	fb00 f303 	mul.w	r3, r0, r3
 800a26a:	440b      	add	r3, r1
 800a26c:	3329      	adds	r3, #41	@ 0x29
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	d10a      	bne.n	800a28a <MCU_ProcessModuleStatus1+0x20a>
     module[moduleIndex].command.commandStatus = commandActive;
 800a274:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a278:	4a41      	ldr	r2, [pc, #260]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a27a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a27e:	fb01 f303 	mul.w	r3, r1, r3
 800a282:	4413      	add	r3, r2
 800a284:	332a      	adds	r3, #42	@ 0x2a
 800a286:	2201      	movs	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a28a:	4b3e      	ldr	r3, [pc, #248]	@ (800a384 <MCU_ProcessModuleStatus1+0x304>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	f003 0308 	and.w	r3, r3, #8
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 816a 	beq.w	800a56c <MCU_ProcessModuleStatus1+0x4ec>
      switch (module[moduleIndex].currentState){
 800a298:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a29c:	4a38      	ldr	r2, [pc, #224]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a29e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3327      	adds	r3, #39	@ 0x27
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d014      	beq.n	800a2da <MCU_ProcessModuleStatus1+0x25a>
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	dc19      	bgt.n	800a2e8 <MCU_ProcessModuleStatus1+0x268>
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <MCU_ProcessModuleStatus1+0x23e>
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d007      	beq.n	800a2cc <MCU_ProcessModuleStatus1+0x24c>
 800a2bc:	e014      	b.n	800a2e8 <MCU_ProcessModuleStatus1+0x268>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800a2be:	f107 031c 	add.w	r3, r7, #28
 800a2c2:	4935      	ldr	r1, [pc, #212]	@ (800a398 <MCU_ProcessModuleStatus1+0x318>)
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f00a fb1d 	bl	8014904 <siprintf>
 800a2ca:	e01f      	b.n	800a30c <MCU_ProcessModuleStatus1+0x28c>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800a2cc:	f107 031c 	add.w	r3, r7, #28
 800a2d0:	4932      	ldr	r1, [pc, #200]	@ (800a39c <MCU_ProcessModuleStatus1+0x31c>)
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f00a fb16 	bl	8014904 <siprintf>
 800a2d8:	e018      	b.n	800a30c <MCU_ProcessModuleStatus1+0x28c>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800a2da:	f107 031c 	add.w	r3, r7, #28
 800a2de:	4930      	ldr	r1, [pc, #192]	@ (800a3a0 <MCU_ProcessModuleStatus1+0x320>)
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f00a fb0f 	bl	8014904 <siprintf>
 800a2e6:	e011      	b.n	800a30c <MCU_ProcessModuleStatus1+0x28c>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 800a2e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a2ec:	4a24      	ldr	r2, [pc, #144]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a2ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3327      	adds	r3, #39	@ 0x27
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f107 031c 	add.w	r3, r7, #28
 800a302:	4928      	ldr	r1, [pc, #160]	@ (800a3a4 <MCU_ProcessModuleStatus1+0x324>)
 800a304:	4618      	mov	r0, r3
 800a306:	f00a fafd 	bl	8014904 <siprintf>
 800a30a:	bf00      	nop
      switch (module[moduleIndex].status){
 800a30c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a310:	4a1b      	ldr	r2, [pc, #108]	@ (800a380 <MCU_ProcessModuleStatus1+0x300>)
 800a312:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a316:	fb01 f303 	mul.w	r3, r1, r3
 800a31a:	4413      	add	r3, r2
 800a31c:	3326      	adds	r3, #38	@ 0x26
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d847      	bhi.n	800a3b4 <MCU_ProcessModuleStatus1+0x334>
 800a324:	a201      	add	r2, pc, #4	@ (adr r2, 800a32c <MCU_ProcessModuleStatus1+0x2ac>)
 800a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a34b 	.word	0x0800a34b
 800a334:	0800a359 	.word	0x0800a359
 800a338:	0800a367 	.word	0x0800a367
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	4915      	ldr	r1, [pc, #84]	@ (800a398 <MCU_ProcessModuleStatus1+0x318>)
 800a342:	4618      	mov	r0, r3
 800a344:	f00a fade 	bl	8014904 <siprintf>
 800a348:	e046      	b.n	800a3d8 <MCU_ProcessModuleStatus1+0x358>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 800a34a:	f107 030c 	add.w	r3, r7, #12
 800a34e:	4916      	ldr	r1, [pc, #88]	@ (800a3a8 <MCU_ProcessModuleStatus1+0x328>)
 800a350:	4618      	mov	r0, r3
 800a352:	f00a fad7 	bl	8014904 <siprintf>
 800a356:	e03f      	b.n	800a3d8 <MCU_ProcessModuleStatus1+0x358>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	4913      	ldr	r1, [pc, #76]	@ (800a3ac <MCU_ProcessModuleStatus1+0x32c>)
 800a35e:	4618      	mov	r0, r3
 800a360:	f00a fad0 	bl	8014904 <siprintf>
 800a364:	e038      	b.n	800a3d8 <MCU_ProcessModuleStatus1+0x358>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800a366:	f107 030c 	add.w	r3, r7, #12
 800a36a:	4911      	ldr	r1, [pc, #68]	@ (800a3b0 <MCU_ProcessModuleStatus1+0x330>)
 800a36c:	4618      	mov	r0, r3
 800a36e:	f00a fac9 	bl	8014904 <siprintf>
 800a372:	e031      	b.n	800a3d8 <MCU_ProcessModuleStatus1+0x358>
 800a374:	20000da8 	.word	0x20000da8
 800a378:	2000a66c 	.word	0x2000a66c
 800a37c:	20000d9c 	.word	0x20000d9c
 800a380:	20000dec 	.word	0x20000dec
 800a384:	2000000c 	.word	0x2000000c
 800a388:	0801941c 	.word	0x0801941c
 800a38c:	20000b5c 	.word	0x20000b5c
 800a390:	200005d0 	.word	0x200005d0
 800a394:	20000d20 	.word	0x20000d20
 800a398:	0801945c 	.word	0x0801945c
 800a39c:	08019464 	.word	0x08019464
 800a3a0:	08019470 	.word	0x08019470
 800a3a4:	08019478 	.word	0x08019478
 800a3a8:	08019484 	.word	0x08019484
 800a3ac:	08019490 	.word	0x08019490
 800a3b0:	0801949c 	.word	0x0801949c
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800a3b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3b8:	4a75      	ldr	r2, [pc, #468]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a3ba:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3326      	adds	r3, #38	@ 0x26
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f107 030c 	add.w	r3, r7, #12
 800a3ce:	4971      	ldr	r1, [pc, #452]	@ (800a594 <MCU_ProcessModuleStatus1+0x514>)
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00a fa97 	bl	8014904 <siprintf>
 800a3d6:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 800a3d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3dc:	4a6c      	ldr	r2, [pc, #432]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a3de:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a3e2:	fb01 f303 	mul.w	r3, r1, r3
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3314      	adds	r3, #20
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 f881 	bl	80004f4 <__aeabi_i2d>
 800a3f2:	a361      	add	r3, pc, #388	@ (adr r3, 800a578 <MCU_ProcessModuleStatus1+0x4f8>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f6 f8e6 	bl	80005c8 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4610      	mov	r0, r2
 800a402:	4619      	mov	r1, r3
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 0300 	mov.w	r3, #0
 800a40c:	f7f5 ff26 	bl	800025c <__adddf3>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4610      	mov	r0, r2
 800a416:	4619      	mov	r1, r3
 800a418:	f7f6 fbce 	bl	8000bb8 <__aeabi_d2f>
 800a41c:	4603      	mov	r3, r0
 800a41e:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 800a420:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a424:	4a5a      	ldr	r2, [pc, #360]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a426:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a42a:	fb01 f303 	mul.w	r3, r1, r3
 800a42e:	4413      	add	r3, r2
 800a430:	3316      	adds	r3, #22
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f7f6 f85d 	bl	80004f4 <__aeabi_i2d>
 800a43a:	a351      	add	r3, pc, #324	@ (adr r3, 800a580 <MCU_ProcessModuleStatus1+0x500>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f7f6 f8c2 	bl	80005c8 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4610      	mov	r0, r2
 800a44a:	4619      	mov	r1, r3
 800a44c:	a34e      	add	r3, pc, #312	@ (adr r3, 800a588 <MCU_ProcessModuleStatus1+0x508>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f5 ff01 	bl	8000258 <__aeabi_dsub>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4610      	mov	r0, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	f7f6 fbab 	bl	8000bb8 <__aeabi_d2f>
 800a462:	4603      	mov	r3, r0
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800a466:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a46a:	4a49      	ldr	r2, [pc, #292]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a46c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	4413      	add	r3, r2
 800a476:	332b      	adds	r3, #43	@ 0x2b
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7f6 f83a 	bl	80004f4 <__aeabi_i2d>
 800a480:	f04f 0200 	mov.w	r2, #0
 800a484:	4b44      	ldr	r3, [pc, #272]	@ (800a598 <MCU_ProcessModuleStatus1+0x518>)
 800a486:	f7f6 f89f 	bl	80005c8 <__aeabi_dmul>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4610      	mov	r0, r2
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	f04f 0300 	mov.w	r3, #0
 800a49a:	f7f5 fedf 	bl	800025c <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f7f6 fb87 	bl	8000bb8 <__aeabi_d2f>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 800a4ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4b2:	4a37      	ldr	r2, [pc, #220]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a4b4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	332c      	adds	r3, #44	@ 0x2c
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f6 f816 	bl	80004f4 <__aeabi_i2d>
 800a4c8:	f04f 0200 	mov.w	r2, #0
 800a4cc:	4b32      	ldr	r3, [pc, #200]	@ (800a598 <MCU_ProcessModuleStatus1+0x518>)
 800a4ce:	f7f6 f87b 	bl	80005c8 <__aeabi_dmul>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	f7f5 febb 	bl	800025c <__adddf3>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f7f6 fb63 	bl	8000bb8 <__aeabi_d2f>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a4f6:	4b29      	ldr	r3, [pc, #164]	@ (800a59c <MCU_ProcessModuleStatus1+0x51c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a4fe:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a500:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a504:	4a22      	ldr	r2, [pc, #136]	@ (800a590 <MCU_ProcessModuleStatus1+0x510>)
 800a506:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	332d      	adds	r3, #45	@ 0x2d
 800a512:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a514:	461e      	mov	r6, r3
 800a516:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a518:	f7f5 fffe 	bl	8000518 <__aeabi_f2d>
 800a51c:	4604      	mov	r4, r0
 800a51e:	460d      	mov	r5, r1
 800a520:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a522:	f7f5 fff9 	bl	8000518 <__aeabi_f2d>
 800a526:	4680      	mov	r8, r0
 800a528:	4689      	mov	r9, r1
 800a52a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a52c:	f7f5 fff4 	bl	8000518 <__aeabi_f2d>
 800a530:	4682      	mov	sl, r0
 800a532:	468b      	mov	fp, r1
 800a534:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a536:	f7f5 ffef 	bl	8000518 <__aeabi_f2d>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	f107 011c 	add.w	r1, r7, #28
 800a542:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a546:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a54a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a54e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a552:	9601      	str	r6, [sp, #4]
 800a554:	f107 030c 	add.w	r3, r7, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	460b      	mov	r3, r1
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4910      	ldr	r1, [pc, #64]	@ (800a5a0 <MCU_ProcessModuleStatus1+0x520>)
 800a560:	4810      	ldr	r0, [pc, #64]	@ (800a5a4 <MCU_ProcessModuleStatus1+0x524>)
 800a562:	f00a f9cf 	bl	8014904 <siprintf>
      serialOut(tempBuffer);
 800a566:	480f      	ldr	r0, [pc, #60]	@ (800a5a4 <MCU_ProcessModuleStatus1+0x524>)
 800a568:	f7fb f868 	bl	800563c <serialOut>
}
 800a56c:	bf00      	nop
 800a56e:	374c      	adds	r7, #76	@ 0x4c
 800a570:	46bd      	mov	sp, r7
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	bf00      	nop
 800a578:	eb851eb8 	.word	0xeb851eb8
 800a57c:	3f8eb851 	.word	0x3f8eb851
 800a580:	47ae147b 	.word	0x47ae147b
 800a584:	3f947ae1 	.word	0x3f947ae1
 800a588:	47ae147b 	.word	0x47ae147b
 800a58c:	40847ae1 	.word	0x40847ae1
 800a590:	20000dec 	.word	0x20000dec
 800a594:	08019478 	.word	0x08019478
 800a598:	3fe00000 	.word	0x3fe00000
 800a59c:	20000d9c 	.word	0x20000d9c
 800a5a0:	080194a4 	.word	0x080194a4
 800a5a4:	20000b5c 	.word	0x20000b5c

0800a5a8 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	b091      	sub	sp, #68	@ 0x44
 800a5ae:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 800a5b0:	1d3b      	adds	r3, r7, #4
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f00a fa0b 	bl	80149d2 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 800a5bc:	4ab0      	ldr	r2, [pc, #704]	@ (800a880 <MCU_ProcessModuleStatus2+0x2d8>)
 800a5be:	1d3b      	adds	r3, r7, #4
 800a5c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5c4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800a5c8:	4bae      	ldr	r3, [pc, #696]	@ (800a884 <MCU_ProcessModuleStatus2+0x2dc>)
 800a5ca:	7d1b      	ldrb	r3, [r3, #20]
 800a5cc:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	77bb      	strb	r3, [r7, #30]
 800a5d2:	e015      	b.n	800a600 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a5d4:	4bac      	ldr	r3, [pc, #688]	@ (800a888 <MCU_ProcessModuleStatus2+0x2e0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a5dc:	7fbb      	ldrb	r3, [r7, #30]
 800a5de:	49ab      	ldr	r1, [pc, #684]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a5e0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a5e4:	fb00 f303 	mul.w	r3, r0, r3
 800a5e8:	440b      	add	r3, r1
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d101      	bne.n	800a5fa <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 800a5f6:	7fbb      	ldrb	r3, [r7, #30]
 800a5f8:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800a5fa:	7fbb      	ldrb	r3, [r7, #30]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	77bb      	strb	r3, [r7, #30]
 800a600:	4ba0      	ldr	r3, [pc, #640]	@ (800a884 <MCU_ProcessModuleStatus2+0x2dc>)
 800a602:	7d1b      	ldrb	r3, [r3, #20]
 800a604:	7fba      	ldrb	r2, [r7, #30]
 800a606:	429a      	cmp	r2, r3
 800a608:	d3e4      	bcc.n	800a5d4 <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800a60a:	4b9e      	ldr	r3, [pc, #632]	@ (800a884 <MCU_ProcessModuleStatus2+0x2dc>)
 800a60c:	7d1b      	ldrb	r3, [r3, #20]
 800a60e:	7ffa      	ldrb	r2, [r7, #31]
 800a610:	429a      	cmp	r2, r3
 800a612:	d10e      	bne.n	800a632 <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 800a614:	4b9e      	ldr	r3, [pc, #632]	@ (800a890 <MCU_ProcessModuleStatus2+0x2e8>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 0309 	and.w	r3, r3, #9
 800a61c:	2b09      	cmp	r3, #9
 800a61e:	f040 811f 	bne.w	800a860 <MCU_ProcessModuleStatus2+0x2b8>
 800a622:	499c      	ldr	r1, [pc, #624]	@ (800a894 <MCU_ProcessModuleStatus2+0x2ec>)
 800a624:	489c      	ldr	r0, [pc, #624]	@ (800a898 <MCU_ProcessModuleStatus2+0x2f0>)
 800a626:	f00a f96d 	bl	8014904 <siprintf>
 800a62a:	489b      	ldr	r0, [pc, #620]	@ (800a898 <MCU_ProcessModuleStatus2+0x2f0>)
 800a62c:	f7fb f806 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 800a630:	e116      	b.n	800a860 <MCU_ProcessModuleStatus2+0x2b8>
    module[moduleIndex].statusPending = false;
 800a632:	7ffb      	ldrb	r3, [r7, #31]
 800a634:	4a95      	ldr	r2, [pc, #596]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a636:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a63a:	fb01 f303 	mul.w	r3, r1, r3
 800a63e:	4413      	add	r3, r2
 800a640:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a644:	2200      	movs	r2, #0
 800a646:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a648:	7ffb      	ldrb	r3, [r7, #31]
 800a64a:	4a90      	ldr	r2, [pc, #576]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a64c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 800a65e:	7ffb      	ldrb	r3, [r7, #31]
 800a660:	8938      	ldrh	r0, [r7, #8]
 800a662:	4a8a      	ldr	r2, [pc, #552]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a664:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a668:	fb01 f303 	mul.w	r3, r1, r3
 800a66c:	4413      	add	r3, r2
 800a66e:	3322      	adds	r3, #34	@ 0x22
 800a670:	4602      	mov	r2, r0
 800a672:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 800a674:	7ffb      	ldrb	r3, [r7, #31]
 800a676:	88f8      	ldrh	r0, [r7, #6]
 800a678:	4a84      	ldr	r2, [pc, #528]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a67a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	4413      	add	r3, r2
 800a684:	331e      	adds	r3, #30
 800a686:	4602      	mov	r2, r0
 800a688:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800a68a:	7ffb      	ldrb	r3, [r7, #31]
 800a68c:	88b8      	ldrh	r0, [r7, #4]
 800a68e:	4a7f      	ldr	r2, [pc, #508]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a690:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a694:	fb01 f303 	mul.w	r3, r1, r3
 800a698:	4413      	add	r3, r2
 800a69a:	3320      	adds	r3, #32
 800a69c:	4602      	mov	r2, r0
 800a69e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 800a6a0:	7ffb      	ldrb	r3, [r7, #31]
 800a6a2:	8978      	ldrh	r0, [r7, #10]
 800a6a4:	4a79      	ldr	r2, [pc, #484]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a6a6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3324      	adds	r3, #36	@ 0x24
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a6b6:	4b79      	ldr	r3, [pc, #484]	@ (800a89c <MCU_ProcessModuleStatus2+0x2f4>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	7ffb      	ldrb	r3, [r7, #31]
 800a6bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6be:	4973      	ldr	r1, [pc, #460]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a6c0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a6c4:	fb00 f303 	mul.w	r3, r0, r3
 800a6c8:	440b      	add	r3, r1
 800a6ca:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a6ce:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a6d0:	7ffb      	ldrb	r3, [r7, #31]
 800a6d2:	4a73      	ldr	r2, [pc, #460]	@ (800a8a0 <MCU_ProcessModuleStatus2+0x2f8>)
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	496d      	ldr	r1, [pc, #436]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a6d8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a6dc:	fb00 f303 	mul.w	r3, r0, r3
 800a6e0:	440b      	add	r3, r1
 800a6e2:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a6e6:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a6e8:	4b69      	ldr	r3, [pc, #420]	@ (800a890 <MCU_ProcessModuleStatus2+0x2e8>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f003 0308 	and.w	r3, r3, #8
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80b5 	beq.w	800a860 <MCU_ProcessModuleStatus2+0x2b8>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 800a6f6:	7ffb      	ldrb	r3, [r7, #31]
 800a6f8:	4a64      	ldr	r2, [pc, #400]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a6fa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a6fe:	fb01 f303 	mul.w	r3, r1, r3
 800a702:	4413      	add	r3, r2
 800a704:	3322      	adds	r3, #34	@ 0x22
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7f5 fef3 	bl	80004f4 <__aeabi_i2d>
 800a70e:	a358      	add	r3, pc, #352	@ (adr r3, 800a870 <MCU_ProcessModuleStatus2+0x2c8>)
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f5 ff58 	bl	80005c8 <__aeabi_dmul>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4610      	mov	r0, r2
 800a71e:	4619      	mov	r1, r3
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	f7f5 fd98 	bl	800025c <__adddf3>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4610      	mov	r0, r2
 800a732:	4619      	mov	r1, r3
 800a734:	f7f6 fa40 	bl	8000bb8 <__aeabi_d2f>
 800a738:	4603      	mov	r3, r0
 800a73a:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 800a73c:	7ffb      	ldrb	r3, [r7, #31]
 800a73e:	4a53      	ldr	r2, [pc, #332]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a740:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a744:	fb01 f303 	mul.w	r3, r1, r3
 800a748:	4413      	add	r3, r2
 800a74a:	331e      	adds	r3, #30
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f5 fed0 	bl	80004f4 <__aeabi_i2d>
 800a754:	a346      	add	r3, pc, #280	@ (adr r3, 800a870 <MCU_ProcessModuleStatus2+0x2c8>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f7f5 ff35 	bl	80005c8 <__aeabi_dmul>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4610      	mov	r0, r2
 800a764:	4619      	mov	r1, r3
 800a766:	f04f 0200 	mov.w	r2, #0
 800a76a:	f04f 0300 	mov.w	r3, #0
 800a76e:	f7f5 fd75 	bl	800025c <__adddf3>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4610      	mov	r0, r2
 800a778:	4619      	mov	r1, r3
 800a77a:	f7f6 fa1d 	bl	8000bb8 <__aeabi_d2f>
 800a77e:	4603      	mov	r3, r0
 800a780:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 800a782:	7ffb      	ldrb	r3, [r7, #31]
 800a784:	4a41      	ldr	r2, [pc, #260]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a786:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a78a:	fb01 f303 	mul.w	r3, r1, r3
 800a78e:	4413      	add	r3, r2
 800a790:	3320      	adds	r3, #32
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	4618      	mov	r0, r3
 800a796:	f7f5 fead 	bl	80004f4 <__aeabi_i2d>
 800a79a:	a335      	add	r3, pc, #212	@ (adr r3, 800a870 <MCU_ProcessModuleStatus2+0x2c8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 ff12 	bl	80005c8 <__aeabi_dmul>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	f7f5 fd52 	bl	800025c <__adddf3>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f7f6 f9fa 	bl	8000bb8 <__aeabi_d2f>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ca:	4a30      	ldr	r2, [pc, #192]	@ (800a88c <MCU_ProcessModuleStatus2+0x2e4>)
 800a7cc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a7d0:	fb01 f303 	mul.w	r3, r1, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3324      	adds	r3, #36	@ 0x24
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7f5 fe8a 	bl	80004f4 <__aeabi_i2d>
 800a7e0:	a325      	add	r3, pc, #148	@ (adr r3, 800a878 <MCU_ProcessModuleStatus2+0x2d0>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 feef 	bl	80005c8 <__aeabi_dmul>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	f04f 0300 	mov.w	r3, #0
 800a7fa:	f7f5 fd2f 	bl	800025c <__adddf3>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4610      	mov	r0, r2
 800a804:	4619      	mov	r1, r3
 800a806:	f7f6 f9d7 	bl	8000bb8 <__aeabi_d2f>
 800a80a:	4603      	mov	r3, r0
 800a80c:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 800a80e:	4b1e      	ldr	r3, [pc, #120]	@ (800a888 <MCU_ProcessModuleStatus2+0x2e0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 800a816:	461e      	mov	r6, r3
 800a818:	69b8      	ldr	r0, [r7, #24]
 800a81a:	f7f5 fe7d 	bl	8000518 <__aeabi_f2d>
 800a81e:	4604      	mov	r4, r0
 800a820:	460d      	mov	r5, r1
 800a822:	6978      	ldr	r0, [r7, #20]
 800a824:	f7f5 fe78 	bl	8000518 <__aeabi_f2d>
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	6938      	ldr	r0, [r7, #16]
 800a82e:	f7f5 fe73 	bl	8000518 <__aeabi_f2d>
 800a832:	4682      	mov	sl, r0
 800a834:	468b      	mov	fp, r1
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7f5 fe6e 	bl	8000518 <__aeabi_f2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a844:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a848:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a84c:	e9cd 4500 	strd	r4, r5, [sp]
 800a850:	4632      	mov	r2, r6
 800a852:	4914      	ldr	r1, [pc, #80]	@ (800a8a4 <MCU_ProcessModuleStatus2+0x2fc>)
 800a854:	4810      	ldr	r0, [pc, #64]	@ (800a898 <MCU_ProcessModuleStatus2+0x2f0>)
 800a856:	f00a f855 	bl	8014904 <siprintf>
      serialOut(tempBuffer);
 800a85a:	480f      	ldr	r0, [pc, #60]	@ (800a898 <MCU_ProcessModuleStatus2+0x2f0>)
 800a85c:	f7fa feee 	bl	800563c <serialOut>
}
 800a860:	bf00      	nop
 800a862:	3724      	adds	r7, #36	@ 0x24
 800a864:	46bd      	mov	sp, r7
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w
 800a870:	d2f1a9fc 	.word	0xd2f1a9fc
 800a874:	3f50624d 	.word	0x3f50624d
 800a878:	eb851eb8 	.word	0xeb851eb8
 800a87c:	3f8eb851 	.word	0x3f8eb851
 800a880:	20000da8 	.word	0x20000da8
 800a884:	2000a66c 	.word	0x2000a66c
 800a888:	20000d9c 	.word	0x20000d9c
 800a88c:	20000dec 	.word	0x20000dec
 800a890:	2000000c 	.word	0x2000000c
 800a894:	08019524 	.word	0x08019524
 800a898:	20000b5c 	.word	0x20000b5c
 800a89c:	200005d0 	.word	0x200005d0
 800a8a0:	20000d20 	.word	0x20000d20
 800a8a4:	08019564 	.word	0x08019564

0800a8a8 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 800a8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	b08d      	sub	sp, #52	@ 0x34
 800a8ae:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 800a8b0:	463b      	mov	r3, r7
 800a8b2:	2208      	movs	r2, #8
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f00a f88b 	bl	80149d2 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800a8bc:	4a94      	ldr	r2, [pc, #592]	@ (800ab10 <MCU_ProcessModuleStatus3+0x268>)
 800a8be:	463b      	mov	r3, r7
 800a8c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8c4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800a8c8:	4b92      	ldr	r3, [pc, #584]	@ (800ab14 <MCU_ProcessModuleStatus3+0x26c>)
 800a8ca:	7d1b      	ldrb	r3, [r3, #20]
 800a8cc:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75bb      	strb	r3, [r7, #22]
 800a8d2:	e015      	b.n	800a900 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a8d4:	4b90      	ldr	r3, [pc, #576]	@ (800ab18 <MCU_ProcessModuleStatus3+0x270>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a8dc:	7dbb      	ldrb	r3, [r7, #22]
 800a8de:	498f      	ldr	r1, [pc, #572]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a8e0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a8e4:	fb00 f303 	mul.w	r3, r0, r3
 800a8e8:	440b      	add	r3, r1
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d101      	bne.n	800a8fa <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
 800a8f8:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a8fa:	7dbb      	ldrb	r3, [r7, #22]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	75bb      	strb	r3, [r7, #22]
 800a900:	4b84      	ldr	r3, [pc, #528]	@ (800ab14 <MCU_ProcessModuleStatus3+0x26c>)
 800a902:	7d1b      	ldrb	r3, [r3, #20]
 800a904:	7dba      	ldrb	r2, [r7, #22]
 800a906:	429a      	cmp	r2, r3
 800a908:	d3e4      	bcc.n	800a8d4 <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800a90a:	4b82      	ldr	r3, [pc, #520]	@ (800ab14 <MCU_ProcessModuleStatus3+0x26c>)
 800a90c:	7d1b      	ldrb	r3, [r3, #20]
 800a90e:	7dfa      	ldrb	r2, [r7, #23]
 800a910:	429a      	cmp	r2, r3
 800a912:	d10e      	bne.n	800a932 <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800a914:	4b82      	ldr	r3, [pc, #520]	@ (800ab20 <MCU_ProcessModuleStatus3+0x278>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	f003 0309 	and.w	r3, r3, #9
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	f040 80e7 	bne.w	800aaf0 <MCU_ProcessModuleStatus3+0x248>
 800a922:	4980      	ldr	r1, [pc, #512]	@ (800ab24 <MCU_ProcessModuleStatus3+0x27c>)
 800a924:	4880      	ldr	r0, [pc, #512]	@ (800ab28 <MCU_ProcessModuleStatus3+0x280>)
 800a926:	f009 ffed 	bl	8014904 <siprintf>
 800a92a:	487f      	ldr	r0, [pc, #508]	@ (800ab28 <MCU_ProcessModuleStatus3+0x280>)
 800a92c:	f7fa fe86 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 800a930:	e0de      	b.n	800aaf0 <MCU_ProcessModuleStatus3+0x248>
    module[moduleIndex].statusPending = false;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	4a79      	ldr	r2, [pc, #484]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a936:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a93a:	fb01 f303 	mul.w	r3, r1, r3
 800a93e:	4413      	add	r3, r2
 800a940:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a944:	2200      	movs	r2, #0
 800a946:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	4a74      	ldr	r2, [pc, #464]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a94c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a950:	fb01 f303 	mul.w	r3, r1, r3
 800a954:	4413      	add	r3, r2
 800a956:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	88b8      	ldrh	r0, [r7, #4]
 800a962:	4a6e      	ldr	r2, [pc, #440]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a964:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a968:	fb01 f303 	mul.w	r3, r1, r3
 800a96c:	4413      	add	r3, r2
 800a96e:	331c      	adds	r3, #28
 800a970:	4602      	mov	r2, r0
 800a972:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	8878      	ldrh	r0, [r7, #2]
 800a978:	4a68      	ldr	r2, [pc, #416]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a97a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a97e:	fb01 f303 	mul.w	r3, r1, r3
 800a982:	4413      	add	r3, r2
 800a984:	3318      	adds	r3, #24
 800a986:	4602      	mov	r2, r0
 800a988:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	8838      	ldrh	r0, [r7, #0]
 800a98e:	4a63      	ldr	r2, [pc, #396]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a990:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	4413      	add	r3, r2
 800a99a:	331a      	adds	r3, #26
 800a99c:	4602      	mov	r2, r0
 800a99e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a9a0:	4b62      	ldr	r3, [pc, #392]	@ (800ab2c <MCU_ProcessModuleStatus3+0x284>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a9a8:	495c      	ldr	r1, [pc, #368]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a9aa:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a9ae:	fb00 f303 	mul.w	r3, r0, r3
 800a9b2:	440b      	add	r3, r1
 800a9b4:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a9b8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	4a5c      	ldr	r2, [pc, #368]	@ (800ab30 <MCU_ProcessModuleStatus3+0x288>)
 800a9be:	6812      	ldr	r2, [r2, #0]
 800a9c0:	4956      	ldr	r1, [pc, #344]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a9c2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a9c6:	fb00 f303 	mul.w	r3, r0, r3
 800a9ca:	440b      	add	r3, r1
 800a9cc:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a9d0:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a9d2:	4b53      	ldr	r3, [pc, #332]	@ (800ab20 <MCU_ProcessModuleStatus3+0x278>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 8088 	beq.w	800aaf0 <MCU_ProcessModuleStatus3+0x248>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	4a4e      	ldr	r2, [pc, #312]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800a9e4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a9e8:	fb01 f303 	mul.w	r3, r1, r3
 800a9ec:	4413      	add	r3, r2
 800a9ee:	331c      	adds	r3, #28
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f5 fd7e 	bl	80004f4 <__aeabi_i2d>
 800a9f8:	a341      	add	r3, pc, #260	@ (adr r3, 800ab00 <MCU_ProcessModuleStatus3+0x258>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fde3 	bl	80005c8 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4610      	mov	r0, r2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	a33f      	add	r3, pc, #252	@ (adr r3, 800ab08 <MCU_ProcessModuleStatus3+0x260>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fc22 	bl	8000258 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f7f6 f8cc 	bl	8000bb8 <__aeabi_d2f>
 800aa20:	4603      	mov	r3, r0
 800aa22:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	4a3d      	ldr	r2, [pc, #244]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800aa28:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800aa2c:	fb01 f303 	mul.w	r3, r1, r3
 800aa30:	4413      	add	r3, r2
 800aa32:	3318      	adds	r3, #24
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f5 fd5c 	bl	80004f4 <__aeabi_i2d>
 800aa3c:	a330      	add	r3, pc, #192	@ (adr r3, 800ab00 <MCU_ProcessModuleStatus3+0x258>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fdc1 	bl	80005c8 <__aeabi_dmul>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	a32e      	add	r3, pc, #184	@ (adr r3, 800ab08 <MCU_ProcessModuleStatus3+0x260>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fc00 	bl	8000258 <__aeabi_dsub>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f7f6 f8aa 	bl	8000bb8 <__aeabi_d2f>
 800aa64:	4603      	mov	r3, r0
 800aa66:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	4a2c      	ldr	r2, [pc, #176]	@ (800ab1c <MCU_ProcessModuleStatus3+0x274>)
 800aa6c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800aa70:	fb01 f303 	mul.w	r3, r1, r3
 800aa74:	4413      	add	r3, r2
 800aa76:	331a      	adds	r3, #26
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7f5 fd3a 	bl	80004f4 <__aeabi_i2d>
 800aa80:	a31f      	add	r3, pc, #124	@ (adr r3, 800ab00 <MCU_ProcessModuleStatus3+0x258>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fd9f 	bl	80005c8 <__aeabi_dmul>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4610      	mov	r0, r2
 800aa90:	4619      	mov	r1, r3
 800aa92:	a31d      	add	r3, pc, #116	@ (adr r3, 800ab08 <MCU_ProcessModuleStatus3+0x260>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fbde 	bl	8000258 <__aeabi_dsub>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	f7f6 f888 	bl	8000bb8 <__aeabi_d2f>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800aaac:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <MCU_ProcessModuleStatus3+0x270>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800aab4:	461e      	mov	r6, r3
 800aab6:	6938      	ldr	r0, [r7, #16]
 800aab8:	f7f5 fd2e 	bl	8000518 <__aeabi_f2d>
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7f5 fd29 	bl	8000518 <__aeabi_f2d>
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	68b8      	ldr	r0, [r7, #8]
 800aacc:	f7f5 fd24 	bl	8000518 <__aeabi_f2d>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aad8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aadc:	e9cd 4500 	strd	r4, r5, [sp]
 800aae0:	4632      	mov	r2, r6
 800aae2:	4914      	ldr	r1, [pc, #80]	@ (800ab34 <MCU_ProcessModuleStatus3+0x28c>)
 800aae4:	4810      	ldr	r0, [pc, #64]	@ (800ab28 <MCU_ProcessModuleStatus3+0x280>)
 800aae6:	f009 ff0d 	bl	8014904 <siprintf>
      serialOut(tempBuffer);
 800aaea:	480f      	ldr	r0, [pc, #60]	@ (800ab28 <MCU_ProcessModuleStatus3+0x280>)
 800aaec:	f7fa fda6 	bl	800563c <serialOut>
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aafa:	bf00      	nop
 800aafc:	f3af 8000 	nop.w
 800ab00:	47ae147b 	.word	0x47ae147b
 800ab04:	3f847ae1 	.word	0x3f847ae1
 800ab08:	cccccccd 	.word	0xcccccccd
 800ab0c:	404baccc 	.word	0x404baccc
 800ab10:	20000da8 	.word	0x20000da8
 800ab14:	2000a66c 	.word	0x2000a66c
 800ab18:	20000d9c 	.word	0x20000d9c
 800ab1c:	20000dec 	.word	0x20000dec
 800ab20:	2000000c 	.word	0x2000000c
 800ab24:	080195f4 	.word	0x080195f4
 800ab28:	20000b5c 	.word	0x20000b5c
 800ab2c:	200005d0 	.word	0x200005d0
 800ab30:	20000d20 	.word	0x20000d20
 800ab34:	08019634 	.word	0x08019634

0800ab38 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b094      	sub	sp, #80	@ 0x50
 800ab3c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800ab3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ab42:	2208      	movs	r2, #8
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f009 ff43 	bl	80149d2 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800ab4c:	4a31      	ldr	r2, [pc, #196]	@ (800ac14 <MCU_ProcessCellCommStatus1+0xdc>)
 800ab4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ab52:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab56:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800ab5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac18 <MCU_ProcessCellCommStatus1+0xe0>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d052      	beq.n	800ac0c <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800ab66:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ab6a:	2bff      	cmp	r3, #255	@ 0xff
 800ab6c:	d10a      	bne.n	800ab84 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800ab6e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800ab76:	f107 0318 	add.w	r3, r7, #24
 800ab7a:	4928      	ldr	r1, [pc, #160]	@ (800ac1c <MCU_ProcessCellCommStatus1+0xe4>)
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f009 fec1 	bl	8014904 <siprintf>
 800ab82:	e019      	b.n	800abb8 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800ab84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ab88:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d109      	bne.n	800aba4 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800ab90:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ab94:	461a      	mov	r2, r3
 800ab96:	f107 0318 	add.w	r3, r7, #24
 800ab9a:	4921      	ldr	r1, [pc, #132]	@ (800ac20 <MCU_ProcessCellCommStatus1+0xe8>)
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f009 feb1 	bl	8014904 <siprintf>
 800aba2:	e009      	b.n	800abb8 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800aba4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800aba8:	461a      	mov	r2, r3
 800abaa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800abae:	f107 0018 	add.w	r0, r7, #24
 800abb2:	491c      	ldr	r1, [pc, #112]	@ (800ac24 <MCU_ProcessCellCommStatus1+0xec>)
 800abb4:	f009 fea6 	bl	8014904 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800abb8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800abbc:	2bff      	cmp	r3, #255	@ 0xff
 800abbe:	d105      	bne.n	800abcc <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800abc0:	1d3b      	adds	r3, r7, #4
 800abc2:	4919      	ldr	r1, [pc, #100]	@ (800ac28 <MCU_ProcessCellCommStatus1+0xf0>)
 800abc4:	4618      	mov	r0, r3
 800abc6:	f009 fe9d 	bl	8014904 <siprintf>
 800abca:	e007      	b.n	800abdc <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800abcc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800abd0:	461a      	mov	r2, r3
 800abd2:	1d3b      	adds	r3, r7, #4
 800abd4:	4915      	ldr	r1, [pc, #84]	@ (800ac2c <MCU_ProcessCellCommStatus1+0xf4>)
 800abd6:	4618      	mov	r0, r3
 800abd8:	f009 fe94 	bl	8014904 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800abdc:	4b14      	ldr	r3, [pc, #80]	@ (800ac30 <MCU_ProcessCellCommStatus1+0xf8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800abe4:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800abe6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800abe8:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800abea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800abee:	f107 0218 	add.w	r2, r7, #24
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	1d3b      	adds	r3, r7, #4
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	9100      	str	r1, [sp, #0]
 800abfa:	4613      	mov	r3, r2
 800abfc:	4602      	mov	r2, r0
 800abfe:	490d      	ldr	r1, [pc, #52]	@ (800ac34 <MCU_ProcessCellCommStatus1+0xfc>)
 800ac00:	480d      	ldr	r0, [pc, #52]	@ (800ac38 <MCU_ProcessCellCommStatus1+0x100>)
 800ac02:	f009 fe7f 	bl	8014904 <siprintf>

    serialOut(tempBuffer);
 800ac06:	480c      	ldr	r0, [pc, #48]	@ (800ac38 <MCU_ProcessCellCommStatus1+0x100>)
 800ac08:	f7fa fd18 	bl	800563c <serialOut>
  }
}
 800ac0c:	bf00      	nop
 800ac0e:	3740      	adds	r7, #64	@ 0x40
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000da8 	.word	0x20000da8
 800ac18:	2000000c 	.word	0x2000000c
 800ac1c:	080196a0 	.word	0x080196a0
 800ac20:	080196ac 	.word	0x080196ac
 800ac24:	080196b8 	.word	0x080196b8
 800ac28:	080196c4 	.word	0x080196c4
 800ac2c:	080196cc 	.word	0x080196cc
 800ac30:	20000d9c 	.word	0x20000d9c
 800ac34:	080196e0 	.word	0x080196e0
 800ac38:	20000b5c 	.word	0x20000b5c
 800ac3c:	00000000 	.word	0x00000000

0800ac40 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800ac40:	b5b0      	push	{r4, r5, r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	4603      	mov	r3, r0
 800ac48:	460a      	mov	r2, r1
 800ac4a:	71fb      	strb	r3, [r7, #7]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800ac54:	79bb      	ldrb	r3, [r7, #6]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	7a7b      	ldrb	r3, [r7, #9]
 800ac5e:	f362 0303 	bfi	r3, r2, #0, #4
 800ac62:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800ac64:	7a7b      	ldrb	r3, [r7, #9]
 800ac66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac6a:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800ac6c:	4b4c      	ldr	r3, [pc, #304]	@ (800ada0 <MCU_TransmitState+0x160>)
 800ac6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac72:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800ac74:	4b4b      	ldr	r3, [pc, #300]	@ (800ada4 <MCU_TransmitState+0x164>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800ac7a:	4b4a      	ldr	r3, [pc, #296]	@ (800ada4 <MCU_TransmitState+0x164>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800ac80:	4b48      	ldr	r3, [pc, #288]	@ (800ada4 <MCU_TransmitState+0x164>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4a47      	ldr	r2, [pc, #284]	@ (800ada8 <MCU_TransmitState+0x168>)
 800ac8a:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800ac8c:	4a45      	ldr	r2, [pc, #276]	@ (800ada4 <MCU_TransmitState+0x164>)
 800ac8e:	8813      	ldrh	r3, [r2, #0]
 800ac90:	f240 5114 	movw	r1, #1300	@ 0x514
 800ac94:	f361 030a 	bfi	r3, r1, #0, #11
 800ac98:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800ac9a:	79fa      	ldrb	r2, [r7, #7]
 800ac9c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800aca0:	4940      	ldr	r1, [pc, #256]	@ (800ada4 <MCU_TransmitState+0x164>)
 800aca2:	680b      	ldr	r3, [r1, #0]
 800aca4:	f362 23dc 	bfi	r3, r2, #11, #18
 800aca8:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800acaa:	4a3e      	ldr	r2, [pc, #248]	@ (800ada4 <MCU_TransmitState+0x164>)
 800acac:	7913      	ldrb	r3, [r2, #4]
 800acae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acb2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800acb4:	4a3b      	ldr	r2, [pc, #236]	@ (800ada4 <MCU_TransmitState+0x164>)
 800acb6:	7913      	ldrb	r3, [r2, #4]
 800acb8:	2104      	movs	r1, #4
 800acba:	f361 0303 	bfi	r3, r1, #0, #4
 800acbe:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800acc0:	4a38      	ldr	r2, [pc, #224]	@ (800ada4 <MCU_TransmitState+0x164>)
 800acc2:	7913      	ldrb	r3, [r2, #4]
 800acc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800acca:	4a36      	ldr	r2, [pc, #216]	@ (800ada4 <MCU_TransmitState+0x164>)
 800accc:	7913      	ldrb	r3, [r2, #4]
 800acce:	f043 0310 	orr.w	r3, r3, #16
 800acd2:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800acd4:	4b35      	ldr	r3, [pc, #212]	@ (800adac <MCU_TransmitState+0x16c>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	f003 0308 	and.w	r3, r3, #8
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d019      	beq.n	800ad14 <MCU_TransmitState+0xd4>
 800ace0:	79fc      	ldrb	r4, [r7, #7]
 800ace2:	79bd      	ldrb	r5, [r7, #6]
 800ace4:	4b2e      	ldr	r3, [pc, #184]	@ (800ada0 <MCU_TransmitState+0x160>)
 800ace6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acea:	4618      	mov	r0, r3
 800acec:	f7f5 fc02 	bl	80004f4 <__aeabi_i2d>
 800acf0:	a329      	add	r3, pc, #164	@ (adr r3, 800ad98 <MCU_TransmitState+0x158>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f7f5 fc67 	bl	80005c8 <__aeabi_dmul>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	e9cd 2300 	strd	r2, r3, [sp]
 800ad02:	462b      	mov	r3, r5
 800ad04:	4622      	mov	r2, r4
 800ad06:	492a      	ldr	r1, [pc, #168]	@ (800adb0 <MCU_TransmitState+0x170>)
 800ad08:	482a      	ldr	r0, [pc, #168]	@ (800adb4 <MCU_TransmitState+0x174>)
 800ad0a:	f009 fdfb 	bl	8014904 <siprintf>
 800ad0e:	4829      	ldr	r0, [pc, #164]	@ (800adb4 <MCU_TransmitState+0x174>)
 800ad10:	f7fa fc94 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800ad14:	2001      	movs	r0, #1
 800ad16:	f7fe f8cf 	bl	8008eb8 <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f9c9 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 800ad26:	4b1e      	ldr	r3, [pc, #120]	@ (800ada0 <MCU_TransmitState+0x160>)
 800ad28:	7d1b      	ldrb	r3, [r3, #20]
 800ad2a:	7bfa      	ldrb	r2, [r7, #15]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d02c      	beq.n	800ad8a <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	4a21      	ldr	r2, [pc, #132]	@ (800adb8 <MCU_TransmitState+0x178>)
 800ad34:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ad38:	fb01 f303 	mul.w	r3, r1, r3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3329      	adds	r3, #41	@ 0x29
 800ad40:	79ba      	ldrb	r2, [r7, #6]
 800ad42:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4a1c      	ldr	r2, [pc, #112]	@ (800adb8 <MCU_TransmitState+0x178>)
 800ad48:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	4413      	add	r3, r2
 800ad52:	332a      	adds	r3, #42	@ 0x2a
 800ad54:	2200      	movs	r2, #0
 800ad56:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800ad58:	4b18      	ldr	r3, [pc, #96]	@ (800adbc <MCU_TransmitState+0x17c>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ad60:	4915      	ldr	r1, [pc, #84]	@ (800adb8 <MCU_TransmitState+0x178>)
 800ad62:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad66:	fb00 f303 	mul.w	r3, r0, r3
 800ad6a:	440b      	add	r3, r1
 800ad6c:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ad70:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	4a12      	ldr	r2, [pc, #72]	@ (800adc0 <MCU_TransmitState+0x180>)
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	490f      	ldr	r1, [pc, #60]	@ (800adb8 <MCU_TransmitState+0x178>)
 800ad7a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad7e:	fb00 f303 	mul.w	r3, r0, r3
 800ad82:	440b      	add	r3, r1
 800ad84:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800ad88:	601a      	str	r2, [r3, #0]
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bdb0      	pop	{r4, r5, r7, pc}
 800ad92:	bf00      	nop
 800ad94:	f3af 8000 	nop.w
 800ad98:	eb851eb8 	.word	0xeb851eb8
 800ad9c:	3f8eb851 	.word	0x3f8eb851
 800ada0:	2000a66c 	.word	0x2000a66c
 800ada4:	20000d40 	.word	0x20000d40
 800ada8:	20000d4c 	.word	0x20000d4c
 800adac:	2000000c 	.word	0x2000000c
 800adb0:	08019764 	.word	0x08019764
 800adb4:	20000b5c 	.word	0x20000b5c
 800adb8:	20000dec 	.word	0x20000dec
 800adbc:	200005d0 	.word	0x200005d0
 800adc0:	20000d20 	.word	0x20000d20

0800adc4 <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	f003 030f 	and.w	r3, r3, #15
 800add4:	b2da      	uxtb	r2, r3
 800add6:	7b3b      	ldrb	r3, [r7, #12]
 800add8:	f362 0303 	bfi	r3, r2, #0, #4
 800addc:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800adde:	7b3b      	ldrb	r3, [r7, #12]
 800ade0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ade4:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800ade6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800adec:	4b1a      	ldr	r3, [pc, #104]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800adee:	2200      	movs	r2, #0
 800adf0:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800adf2:	4b19      	ldr	r3, [pc, #100]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	609a      	str	r2, [r3, #8]

  memcpy(txd, &maxState, sizeof(maxState));
 800adf8:	7b3a      	ldrb	r2, [r7, #12]
 800adfa:	4b18      	ldr	r3, [pc, #96]	@ (800ae5c <MCU_TransmitMaxState+0x98>)
 800adfc:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800adfe:	4a16      	ldr	r2, [pc, #88]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae00:	8813      	ldrh	r3, [r2, #0]
 800ae02:	f240 5117 	movw	r1, #1303	@ 0x517
 800ae06:	f361 030a 	bfi	r3, r1, #0, #11
 800ae0a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800ae0c:	4b14      	ldr	r3, [pc, #80]	@ (800ae60 <MCU_TransmitMaxState+0x9c>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800ae16:	4910      	ldr	r1, [pc, #64]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae18:	680b      	ldr	r3, [r1, #0]
 800ae1a:	f362 23dc 	bfi	r3, r2, #11, #18
 800ae1e:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800ae20:	4a0d      	ldr	r2, [pc, #52]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae22:	7913      	ldrb	r3, [r2, #4]
 800ae24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae28:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800ae2a:	4a0b      	ldr	r2, [pc, #44]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae2c:	7913      	ldrb	r3, [r2, #4]
 800ae2e:	2101      	movs	r1, #1
 800ae30:	f361 0303 	bfi	r3, r1, #0, #4
 800ae34:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ae36:	4a08      	ldr	r2, [pc, #32]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae38:	7913      	ldrb	r3, [r2, #4]
 800ae3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae3e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800ae40:	4a05      	ldr	r2, [pc, #20]	@ (800ae58 <MCU_TransmitMaxState+0x94>)
 800ae42:	7913      	ldrb	r3, [r2, #4]
 800ae44:	f043 0310 	orr.w	r3, r3, #16
 800ae48:	7113      	strb	r3, [r2, #4]

//  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	f7fe f834 	bl	8008eb8 <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20000d40 	.word	0x20000d40
 800ae5c:	20000d4c 	.word	0x20000d4c
 800ae60:	2000a66c 	.word	0x2000a66c

0800ae64 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800ae64:	b5b0      	push	{r4, r5, r7, lr}
 800ae66:	b08a      	sub	sp, #40	@ 0x28
 800ae68:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800ae6e:	4a85      	ldr	r2, [pc, #532]	@ (800b084 <MCU_ProcessCellDetail+0x220>)
 800ae70:	1d3b      	adds	r3, r7, #4
 800ae72:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae76:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800ae7a:	4b83      	ldr	r3, [pc, #524]	@ (800b088 <MCU_ProcessCellDetail+0x224>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d017      	beq.n	800aeb6 <MCU_ProcessCellDetail+0x52>
 800ae86:	4b81      	ldr	r3, [pc, #516]	@ (800b08c <MCU_ProcessCellDetail+0x228>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800ae8e:	461c      	mov	r4, r3
 800ae90:	797b      	ldrb	r3, [r7, #5]
 800ae92:	461d      	mov	r5, r3
 800ae94:	793b      	ldrb	r3, [r7, #4]
 800ae96:	7aba      	ldrb	r2, [r7, #10]
 800ae98:	88f9      	ldrh	r1, [r7, #6]
 800ae9a:	8938      	ldrh	r0, [r7, #8]
 800ae9c:	9003      	str	r0, [sp, #12]
 800ae9e:	9102      	str	r1, [sp, #8]
 800aea0:	9201      	str	r2, [sp, #4]
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	462b      	mov	r3, r5
 800aea6:	4622      	mov	r2, r4
 800aea8:	4979      	ldr	r1, [pc, #484]	@ (800b090 <MCU_ProcessCellDetail+0x22c>)
 800aeaa:	487a      	ldr	r0, [pc, #488]	@ (800b094 <MCU_ProcessCellDetail+0x230>)
 800aeac:	f009 fd2a 	bl	8014904 <siprintf>
 800aeb0:	4878      	ldr	r0, [pc, #480]	@ (800b094 <MCU_ProcessCellDetail+0x230>)
 800aeb2:	f7fa fbc3 	bl	800563c <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800aeb6:	4b78      	ldr	r3, [pc, #480]	@ (800b098 <MCU_ProcessCellDetail+0x234>)
 800aeb8:	7d1b      	ldrb	r3, [r3, #20]
 800aeba:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800aebc:	2300      	movs	r3, #0
 800aebe:	75bb      	strb	r3, [r7, #22]
 800aec0:	e015      	b.n	800aeee <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800aec2:	4b72      	ldr	r3, [pc, #456]	@ (800b08c <MCU_ProcessCellDetail+0x228>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800aeca:	7dbb      	ldrb	r3, [r7, #22]
 800aecc:	4973      	ldr	r1, [pc, #460]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800aece:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800aed2:	fb00 f303 	mul.w	r3, r0, r3
 800aed6:	440b      	add	r3, r1
 800aed8:	3308      	adds	r3, #8
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d101      	bne.n	800aee8 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 800aee4:	7dbb      	ldrb	r3, [r7, #22]
 800aee6:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800aee8:	7dbb      	ldrb	r3, [r7, #22]
 800aeea:	3301      	adds	r3, #1
 800aeec:	75bb      	strb	r3, [r7, #22]
 800aeee:	4b6a      	ldr	r3, [pc, #424]	@ (800b098 <MCU_ProcessCellDetail+0x234>)
 800aef0:	7d1b      	ldrb	r3, [r3, #20]
 800aef2:	7dba      	ldrb	r2, [r7, #22]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d3e4      	bcc.n	800aec2 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	7978      	ldrb	r0, [r7, #5]
 800aefc:	4a67      	ldr	r2, [pc, #412]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800aefe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	4413      	add	r3, r2
 800af08:	332d      	adds	r3, #45	@ 0x2d
 800af0a:	4602      	mov	r2, r0
 800af0c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800af0e:	7dfa      	ldrb	r2, [r7, #23]
 800af10:	793b      	ldrb	r3, [r7, #4]
 800af12:	4618      	mov	r0, r3
 800af14:	7abc      	ldrb	r4, [r7, #10]
 800af16:	4961      	ldr	r1, [pc, #388]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800af18:	4603      	mov	r3, r0
 800af1a:	005b      	lsls	r3, r3, #1
 800af1c:	4403      	add	r3, r0
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800af24:	fb00 f202 	mul.w	r2, r0, r2
 800af28:	4413      	add	r3, r2
 800af2a:	440b      	add	r3, r1
 800af2c:	3332      	adds	r3, #50	@ 0x32
 800af2e:	4622      	mov	r2, r4
 800af30:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800af32:	7dfa      	ldrb	r2, [r7, #23]
 800af34:	793b      	ldrb	r3, [r7, #4]
 800af36:	4618      	mov	r0, r3
 800af38:	7afc      	ldrb	r4, [r7, #11]
 800af3a:	4958      	ldr	r1, [pc, #352]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800af3c:	4603      	mov	r3, r0
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	4403      	add	r3, r0
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800af48:	fb00 f202 	mul.w	r2, r0, r2
 800af4c:	4413      	add	r3, r2
 800af4e:	440b      	add	r3, r1
 800af50:	3333      	adds	r3, #51	@ 0x33
 800af52:	4622      	mov	r2, r4
 800af54:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800af56:	7dfa      	ldrb	r2, [r7, #23]
 800af58:	793b      	ldrb	r3, [r7, #4]
 800af5a:	4618      	mov	r0, r3
 800af5c:	88fc      	ldrh	r4, [r7, #6]
 800af5e:	494f      	ldr	r1, [pc, #316]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800af60:	4603      	mov	r3, r0
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	4403      	add	r3, r0
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800af6c:	fb00 f202 	mul.w	r2, r0, r2
 800af70:	4413      	add	r3, r2
 800af72:	440b      	add	r3, r1
 800af74:	3330      	adds	r3, #48	@ 0x30
 800af76:	4622      	mov	r2, r4
 800af78:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800af7a:	7dfa      	ldrb	r2, [r7, #23]
 800af7c:	793b      	ldrb	r3, [r7, #4]
 800af7e:	4618      	mov	r0, r3
 800af80:	893c      	ldrh	r4, [r7, #8]
 800af82:	4946      	ldr	r1, [pc, #280]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800af84:	4603      	mov	r3, r0
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	4403      	add	r3, r0
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800af90:	fb00 f202 	mul.w	r2, r0, r2
 800af94:	4413      	add	r3, r2
 800af96:	440b      	add	r3, r1
 800af98:	332e      	adds	r3, #46	@ 0x2e
 800af9a:	4622      	mov	r2, r4
 800af9c:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800af9e:	4b40      	ldr	r3, [pc, #256]	@ (800b0a0 <MCU_ProcessCellDetail+0x23c>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800afa6:	493d      	ldr	r1, [pc, #244]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800afa8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800afac:	fb00 f303 	mul.w	r3, r0, r3
 800afb0:	440b      	add	r3, r1
 800afb2:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800afb6:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	4a3a      	ldr	r2, [pc, #232]	@ (800b0a4 <MCU_ProcessCellDetail+0x240>)
 800afbc:	6812      	ldr	r2, [r2, #0]
 800afbe:	4937      	ldr	r1, [pc, #220]	@ (800b09c <MCU_ProcessCellDetail+0x238>)
 800afc0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800afc4:	fb00 f303 	mul.w	r3, r0, r3
 800afc8:	440b      	add	r3, r1
 800afca:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800afce:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800afd0:	793b      	ldrb	r3, [r7, #4]
 800afd2:	461a      	mov	r2, r3
 800afd4:	797b      	ldrb	r3, [r7, #5]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	429a      	cmp	r2, r3
 800afda:	da4f      	bge.n	800b07c <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 800afdc:	793b      	ldrb	r3, [r7, #4]
 800afde:	3301      	adds	r3, #1
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800afe4:	4b30      	ldr	r3, [pc, #192]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800afea:	4b2f      	ldr	r3, [pc, #188]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800afec:	2200      	movs	r2, #0
 800afee:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800aff0:	4b2d      	ldr	r3, [pc, #180]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800aff6:	4b2d      	ldr	r3, [pc, #180]	@ (800b0ac <MCU_ProcessCellDetail+0x248>)
 800aff8:	461a      	mov	r2, r3
 800affa:	f107 030c 	add.w	r3, r7, #12
 800affe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b002:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800b006:	4a28      	ldr	r2, [pc, #160]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b008:	8813      	ldrh	r3, [r2, #0]
 800b00a:	f240 5115 	movw	r1, #1301	@ 0x515
 800b00e:	f361 030a 	bfi	r3, r1, #0, #11
 800b012:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800b014:	4b1d      	ldr	r3, [pc, #116]	@ (800b08c <MCU_ProcessCellDetail+0x228>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800b01c:	4a22      	ldr	r2, [pc, #136]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	f361 23dc 	bfi	r3, r1, #11, #18
 800b024:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b026:	4a20      	ldr	r2, [pc, #128]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b028:	7913      	ldrb	r3, [r2, #4]
 800b02a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b02e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800b030:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b032:	7913      	ldrb	r3, [r2, #4]
 800b034:	2102      	movs	r1, #2
 800b036:	f361 0303 	bfi	r3, r1, #0, #4
 800b03a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b03c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b03e:	7913      	ldrb	r3, [r2, #4]
 800b040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b044:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b046:	4a18      	ldr	r2, [pc, #96]	@ (800b0a8 <MCU_ProcessCellDetail+0x244>)
 800b048:	7913      	ldrb	r3, [r2, #4]
 800b04a:	f043 0310 	orr.w	r3, r3, #16
 800b04e:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800b050:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <MCU_ProcessCellDetail+0x224>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00c      	beq.n	800b076 <MCU_ProcessCellDetail+0x212>
 800b05c:	4b0b      	ldr	r3, [pc, #44]	@ (800b08c <MCU_ProcessCellDetail+0x228>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b064:	461a      	mov	r2, r3
 800b066:	7b7b      	ldrb	r3, [r7, #13]
 800b068:	4911      	ldr	r1, [pc, #68]	@ (800b0b0 <MCU_ProcessCellDetail+0x24c>)
 800b06a:	480a      	ldr	r0, [pc, #40]	@ (800b094 <MCU_ProcessCellDetail+0x230>)
 800b06c:	f009 fc4a 	bl	8014904 <siprintf>
 800b070:	4808      	ldr	r0, [pc, #32]	@ (800b094 <MCU_ProcessCellDetail+0x230>)
 800b072:	f7fa fae3 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800b076:	2001      	movs	r0, #1
 800b078:	f7fd ff1e 	bl	8008eb8 <MCU_TransmitMessageQueue>
  }
}
 800b07c:	bf00      	nop
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bdb0      	pop	{r4, r5, r7, pc}
 800b084:	20000da8 	.word	0x20000da8
 800b088:	2000000c 	.word	0x2000000c
 800b08c:	20000d9c 	.word	0x20000d9c
 800b090:	0801979c 	.word	0x0801979c
 800b094:	20000b5c 	.word	0x20000b5c
 800b098:	2000a66c 	.word	0x2000a66c
 800b09c:	20000dec 	.word	0x20000dec
 800b0a0:	200005d0 	.word	0x200005d0
 800b0a4:	20000d20 	.word	0x20000d20
 800b0a8:	20000d40 	.word	0x20000d40
 800b0ac:	20000d4c 	.word	0x20000d4c
 800b0b0:	080197f8 	.word	0x080197f8

0800b0b4 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 800b0be:	4b15      	ldr	r3, [pc, #84]	@ (800b114 <MCU_ModuleIndexFromId+0x60>)
 800b0c0:	7d1b      	ldrb	r3, [r3, #20]
 800b0c2:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]
 800b0c8:	e010      	b.n	800b0ec <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	4a12      	ldr	r2, [pc, #72]	@ (800b118 <MCU_ModuleIndexFromId+0x64>)
 800b0ce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b0d2:	fb01 f303 	mul.w	r3, r1, r3
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3308      	adds	r3, #8
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	79fa      	ldrb	r2, [r7, #7]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d101      	bne.n	800b0e6 <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	73bb      	strb	r3, [r7, #14]
 800b0ec:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <MCU_ModuleIndexFromId+0x60>)
 800b0ee:	7d1b      	ldrb	r3, [r3, #20]
 800b0f0:	7bba      	ldrb	r2, [r7, #14]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d3e9      	bcc.n	800b0ca <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 800b0f6:	4b07      	ldr	r3, [pc, #28]	@ (800b114 <MCU_ModuleIndexFromId+0x60>)
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	7bfa      	ldrb	r2, [r7, #15]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d001      	beq.n	800b104 <MCU_ModuleIndexFromId+0x50>
 800b100:	7bfb      	ldrb	r3, [r7, #15]
 800b102:	e001      	b.n	800b108 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 800b104:	4b03      	ldr	r3, [pc, #12]	@ (800b114 <MCU_ModuleIndexFromId+0x60>)
 800b106:	7d1b      	ldrb	r3, [r3, #20]

}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	2000a66c 	.word	0x2000a66c
 800b118:	20000dec 	.word	0x20000dec

0800b11c <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800b11c:	b590      	push	{r4, r7, lr}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b126:	4b32      	ldr	r3, [pc, #200]	@ (800b1f0 <MCU_TicksSinceLastMessage+0xd4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b12e:	4b31      	ldr	r3, [pc, #196]	@ (800b1f4 <MCU_TicksSinceLastMessage+0xd8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff ffbc 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800b13c:	4603      	mov	r3, r0
 800b13e:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800b140:	4b2d      	ldr	r3, [pc, #180]	@ (800b1f8 <MCU_TicksSinceLastMessage+0xdc>)
 800b142:	7d1b      	ldrb	r3, [r3, #20]
 800b144:	7afa      	ldrb	r2, [r7, #11]
 800b146:	429a      	cmp	r2, r3
 800b148:	d040      	beq.n	800b1cc <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800b14a:	7afb      	ldrb	r3, [r7, #11]
 800b14c:	4a2b      	ldr	r2, [pc, #172]	@ (800b1fc <MCU_TicksSinceLastMessage+0xe0>)
 800b14e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b152:	fb01 f303 	mul.w	r3, r1, r3
 800b156:	4413      	add	r3, r2
 800b158:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	429a      	cmp	r2, r3
 800b162:	d10d      	bne.n	800b180 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800b164:	7afb      	ldrb	r3, [r7, #11]
 800b166:	4a25      	ldr	r2, [pc, #148]	@ (800b1fc <MCU_TicksSinceLastMessage+0xe0>)
 800b168:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b16c:	fb01 f303 	mul.w	r3, r1, r3
 800b170:	4413      	add	r3, r2
 800b172:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e023      	b.n	800b1c8 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800b180:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f0 <MCU_TicksSinceLastMessage+0xd4>)
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	7afb      	ldrb	r3, [r7, #11]
 800b186:	491d      	ldr	r1, [pc, #116]	@ (800b1fc <MCU_TicksSinceLastMessage+0xe0>)
 800b188:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800b18c:	fb00 f303 	mul.w	r3, r0, r3
 800b190:	440b      	add	r3, r1
 800b192:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	1ad2      	subs	r2, r2, r3
 800b19a:	4b15      	ldr	r3, [pc, #84]	@ (800b1f0 <MCU_TicksSinceLastMessage+0xd4>)
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	7af9      	ldrb	r1, [r7, #11]
 800b1a2:	4816      	ldr	r0, [pc, #88]	@ (800b1fc <MCU_TicksSinceLastMessage+0xe0>)
 800b1a4:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800b1a8:	fb04 f101 	mul.w	r1, r4, r1
 800b1ac:	4401      	add	r1, r0
 800b1ae:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 800b1b2:	6809      	ldr	r1, [r1, #0]
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	1a41      	subs	r1, r0, r1
 800b1b8:	3901      	subs	r1, #1
 800b1ba:	fb01 f303 	mul.w	r3, r1, r3
 800b1be:	441a      	add	r2, r3
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	e00d      	b.n	800b1e8 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b200 <MCU_TicksSinceLastMessage+0xe4>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	f003 0309 	and.w	r3, r3, #9
 800b1d4:	2b09      	cmp	r3, #9
 800b1d6:	d106      	bne.n	800b1e6 <MCU_TicksSinceLastMessage+0xca>
 800b1d8:	490a      	ldr	r1, [pc, #40]	@ (800b204 <MCU_TicksSinceLastMessage+0xe8>)
 800b1da:	480b      	ldr	r0, [pc, #44]	@ (800b208 <MCU_TicksSinceLastMessage+0xec>)
 800b1dc:	f009 fb92 	bl	8014904 <siprintf>
 800b1e0:	4809      	ldr	r0, [pc, #36]	@ (800b208 <MCU_TicksSinceLastMessage+0xec>)
 800b1e2:	f7fa fa2b 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800b1e6:	2300      	movs	r3, #0
  }
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}
 800b1f0:	200005d0 	.word	0x200005d0
 800b1f4:	20000d20 	.word	0x20000d20
 800b1f8:	2000a66c 	.word	0x2000a66c
 800b1fc:	20000dec 	.word	0x20000dec
 800b200:	2000000c 	.word	0x2000000c
 800b204:	08019828 	.word	0x08019828
 800b208:	20000b5c 	.word	0x20000b5c

0800b20c <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b216:	4b32      	ldr	r3, [pc, #200]	@ (800b2e0 <MCU_TicksSinceLastStateTx+0xd4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b21e:	4b31      	ldr	r3, [pc, #196]	@ (800b2e4 <MCU_TicksSinceLastStateTx+0xd8>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff ff44 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800b22c:	4603      	mov	r3, r0
 800b22e:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800b230:	4b2d      	ldr	r3, [pc, #180]	@ (800b2e8 <MCU_TicksSinceLastStateTx+0xdc>)
 800b232:	7d1b      	ldrb	r3, [r3, #20]
 800b234:	7afa      	ldrb	r2, [r7, #11]
 800b236:	429a      	cmp	r2, r3
 800b238:	d040      	beq.n	800b2bc <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	4a2b      	ldr	r2, [pc, #172]	@ (800b2ec <MCU_TicksSinceLastStateTx+0xe0>)
 800b23e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b242:	fb01 f303 	mul.w	r3, r1, r3
 800b246:	4413      	add	r3, r2
 800b248:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	429a      	cmp	r2, r3
 800b252:	d10d      	bne.n	800b270 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	4a25      	ldr	r2, [pc, #148]	@ (800b2ec <MCU_TicksSinceLastStateTx+0xe0>)
 800b258:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b25c:	fb01 f303 	mul.w	r3, r1, r3
 800b260:	4413      	add	r3, r2
 800b262:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e023      	b.n	800b2b8 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800b270:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e0 <MCU_TicksSinceLastStateTx+0xd4>)
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	491d      	ldr	r1, [pc, #116]	@ (800b2ec <MCU_TicksSinceLastStateTx+0xe0>)
 800b278:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800b27c:	fb00 f303 	mul.w	r3, r0, r3
 800b280:	440b      	add	r3, r1
 800b282:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	1ad2      	subs	r2, r2, r3
 800b28a:	4b15      	ldr	r3, [pc, #84]	@ (800b2e0 <MCU_TicksSinceLastStateTx+0xd4>)
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	7af9      	ldrb	r1, [r7, #11]
 800b292:	4816      	ldr	r0, [pc, #88]	@ (800b2ec <MCU_TicksSinceLastStateTx+0xe0>)
 800b294:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800b298:	fb04 f101 	mul.w	r1, r4, r1
 800b29c:	4401      	add	r1, r0
 800b29e:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 800b2a2:	6809      	ldr	r1, [r1, #0]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	1a41      	subs	r1, r0, r1
 800b2a8:	3901      	subs	r1, #1
 800b2aa:	fb01 f303 	mul.w	r3, r1, r3
 800b2ae:	441a      	add	r2, r3
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	e00d      	b.n	800b2d8 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800b2bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f0 <MCU_TicksSinceLastStateTx+0xe4>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	f003 0309 	and.w	r3, r3, #9
 800b2c4:	2b09      	cmp	r3, #9
 800b2c6:	d106      	bne.n	800b2d6 <MCU_TicksSinceLastStateTx+0xca>
 800b2c8:	490a      	ldr	r1, [pc, #40]	@ (800b2f4 <MCU_TicksSinceLastStateTx+0xe8>)
 800b2ca:	480b      	ldr	r0, [pc, #44]	@ (800b2f8 <MCU_TicksSinceLastStateTx+0xec>)
 800b2cc:	f009 fb1a 	bl	8014904 <siprintf>
 800b2d0:	4809      	ldr	r0, [pc, #36]	@ (800b2f8 <MCU_TicksSinceLastStateTx+0xec>)
 800b2d2:	f7fa f9b3 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800b2d6:	2300      	movs	r3, #0
  }
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	371c      	adds	r7, #28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd90      	pop	{r4, r7, pc}
 800b2e0:	200005d0 	.word	0x200005d0
 800b2e4:	20000d20 	.word	0x20000d20
 800b2e8:	2000a66c 	.word	0x2000a66c
 800b2ec:	20000dec 	.word	0x20000dec
 800b2f0:	2000000c 	.word	0x2000000c
 800b2f4:	08019868 	.word	0x08019868
 800b2f8:	20000b5c 	.word	0x20000b5c

0800b2fc <MCU_ElapsedTicks>:

/***************************************************************************************************************
*     M C U _ E l a p s e d T i c k s                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_ElapsedTicks(lastContact* pLastContact)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b304:	4b16      	ldr	r3, [pc, #88]	@ (800b360 <MCU_ElapsedTicks+0x64>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30a:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b30c:	4b15      	ldr	r3, [pc, #84]	@ (800b364 <MCU_ElapsedTicks+0x68>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60fb      	str	r3, [r7, #12]

  if ((overFlows - pLastContact->overflows) == 0){
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d105      	bne.n	800b328 <MCU_ElapsedTicks+0x2c>
    elapsedTicks = timerCNT - pLastContact->ticks;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	e013      	b.n	800b350 <MCU_ElapsedTicks+0x54>
  } else {
    //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pLastContact->ticks) + ( (htim1.Init.Period +1) * (overFlows - (pLastContact->overflows +1))) + (timerCNT);
 800b328:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <MCU_ElapsedTicks+0x64>)
 800b32a:	68da      	ldr	r2, [r3, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	1ad2      	subs	r2, r2, r3
 800b332:	4b0b      	ldr	r3, [pc, #44]	@ (800b360 <MCU_ElapsedTicks+0x64>)
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	6849      	ldr	r1, [r1, #4]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	1a41      	subs	r1, r0, r1
 800b340:	3901      	subs	r1, #1
 800b342:	fb01 f303 	mul.w	r3, r1, r3
 800b346:	441a      	add	r2, r3
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	4413      	add	r3, r2
 800b34c:	3301      	adds	r3, #1
 800b34e:	617b      	str	r3, [r7, #20]
  }
  return elapsedTicks;
 800b350:	697b      	ldr	r3, [r7, #20]
}
 800b352:	4618      	mov	r0, r3
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200005d0 	.word	0x200005d0
 800b364:	20000d20 	.word	0x20000d20

0800b368 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800b372:	2300      	movs	r3, #0
 800b374:	73bb      	strb	r3, [r7, #14]
  Nop();
 800b376:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800b378:	2301      	movs	r3, #1
 800b37a:	73fb      	strb	r3, [r7, #15]
 800b37c:	e05d      	b.n	800b43a <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800b37e:	4b34      	ldr	r3, [pc, #208]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b380:	2200      	movs	r2, #0
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	e016      	b.n	800b3b4 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800b386:	f008 fd67 	bl	8013e58 <rand>
 800b38a:	4603      	mov	r3, r0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	4a30      	ldr	r2, [pc, #192]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b390:	7812      	ldrb	r2, [r2, #0]
 800b392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b396:	b2d9      	uxtb	r1, r3
 800b398:	4b2e      	ldr	r3, [pc, #184]	@ (800b454 <CAN_TestRegisterAccess+0xec>)
 800b39a:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800b39c:	4b2c      	ldr	r3, [pc, #176]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b458 <CAN_TestRegisterAccess+0xf0>)
 800b3a4:	21ff      	movs	r1, #255	@ 0xff
 800b3a6:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800b3a8:	4b29      	ldr	r3, [pc, #164]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	4b27      	ldr	r3, [pc, #156]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	4b26      	ldr	r3, [pc, #152]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d8e3      	bhi.n	800b386 <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800b3be:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	79f8      	ldrb	r0, [r7, #7]
 800b3c6:	4a23      	ldr	r2, [pc, #140]	@ (800b454 <CAN_TestRegisterAccess+0xec>)
 800b3c8:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800b3cc:	f7f6 faf8 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	79f8      	ldrb	r0, [r7, #7]
 800b3d6:	4a20      	ldr	r2, [pc, #128]	@ (800b458 <CAN_TestRegisterAccess+0xf0>)
 800b3d8:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800b3dc:	f7f6 fa3e 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	701a      	strb	r2, [r3, #0]
 800b3ea:	e01e      	b.n	800b42a <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800b3ec:	4b18      	ldr	r3, [pc, #96]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4b18      	ldr	r3, [pc, #96]	@ (800b454 <CAN_TestRegisterAccess+0xec>)
 800b3f4:	5c9a      	ldrb	r2, [r3, r2]
 800b3f6:	4b16      	ldr	r3, [pc, #88]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4b16      	ldr	r3, [pc, #88]	@ (800b458 <CAN_TestRegisterAccess+0xf0>)
 800b3fe:	5c5b      	ldrb	r3, [r3, r1]
 800b400:	429a      	cmp	r2, r3
 800b402:	bf0c      	ite	eq
 800b404:	2301      	moveq	r3, #1
 800b406:	2300      	movne	r3, #0
 800b408:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	f083 0301 	eor.w	r3, r3, #1
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <CAN_TestRegisterAccess+0xb6>
        Nop();
 800b416:	bf00      	nop
        Nop();
 800b418:	bf00      	nop

        // Data mismatch
        return false;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e013      	b.n	800b446 <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800b41e:	4b0c      	ldr	r3, [pc, #48]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	3301      	adds	r3, #1
 800b424:	b2da      	uxtb	r2, r3
 800b426:	4b0a      	ldr	r3, [pc, #40]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b428:	701a      	strb	r2, [r3, #0]
 800b42a:	4b09      	ldr	r3, [pc, #36]	@ (800b450 <CAN_TestRegisterAccess+0xe8>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	7bfa      	ldrb	r2, [r7, #15]
 800b430:	429a      	cmp	r2, r3
 800b432:	d8db      	bhi.n	800b3ec <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	3301      	adds	r3, #1
 800b438:	73fb      	strb	r3, [r7, #15]
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	2b40      	cmp	r3, #64	@ 0x40
 800b43e:	d99e      	bls.n	800b37e <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800b440:	bf00      	nop
  Nop();
 800b442:	bf00      	nop
  return true;
 800b444:	2301      	movs	r3, #1
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20000de8 	.word	0x20000de8
 800b454:	20000d4c 	.word	0x20000d4c
 800b458:	20000da8 	.word	0x20000da8

0800b45c <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800b466:	2300      	movs	r3, #0
 800b468:	73bb      	strb	r3, [r7, #14]
  Nop();
 800b46a:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800b46c:	2304      	movs	r3, #4
 800b46e:	73fb      	strb	r3, [r7, #15]
 800b470:	e05b      	b.n	800b52a <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800b472:	4b32      	ldr	r3, [pc, #200]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b474:	2200      	movs	r2, #0
 800b476:	701a      	strb	r2, [r3, #0]
 800b478:	e014      	b.n	800b4a4 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800b47a:	f008 fced 	bl	8013e58 <rand>
 800b47e:	4601      	mov	r1, r0
 800b480:	4b2e      	ldr	r3, [pc, #184]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	b2c9      	uxtb	r1, r1
 800b488:	4b2d      	ldr	r3, [pc, #180]	@ (800b540 <CAN_TestRamAccess+0xe4>)
 800b48a:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800b48c:	4b2b      	ldr	r3, [pc, #172]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	4b2c      	ldr	r3, [pc, #176]	@ (800b544 <CAN_TestRamAccess+0xe8>)
 800b494:	21ff      	movs	r1, #255	@ 0xff
 800b496:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800b498:	4b28      	ldr	r3, [pc, #160]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	4b26      	ldr	r3, [pc, #152]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	4b25      	ldr	r3, [pc, #148]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	7bfa      	ldrb	r2, [r7, #15]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d8e5      	bhi.n	800b47a <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800b4ae:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	79f8      	ldrb	r0, [r7, #7]
 800b4b6:	4a22      	ldr	r2, [pc, #136]	@ (800b540 <CAN_TestRamAccess+0xe4>)
 800b4b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4bc:	f7f6 fa80 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	79f8      	ldrb	r0, [r7, #7]
 800b4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800b544 <CAN_TestRamAccess+0xe8>)
 800b4c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4cc:	f7f6 f9c6 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800b4d4:	4b19      	ldr	r3, [pc, #100]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	e01e      	b.n	800b51a <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800b4dc:	4b17      	ldr	r3, [pc, #92]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <CAN_TestRamAccess+0xe4>)
 800b4e4:	5c9a      	ldrb	r2, [r3, r2]
 800b4e6:	4b15      	ldr	r3, [pc, #84]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4b15      	ldr	r3, [pc, #84]	@ (800b544 <CAN_TestRamAccess+0xe8>)
 800b4ee:	5c5b      	ldrb	r3, [r3, r1]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	bf0c      	ite	eq
 800b4f4:	2301      	moveq	r3, #1
 800b4f6:	2300      	movne	r3, #0
 800b4f8:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	f083 0301 	eor.w	r3, r3, #1
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <CAN_TestRamAccess+0xb2>
        Nop();
 800b506:	bf00      	nop
        Nop();
 800b508:	bf00      	nop

        // Data mismatch
        return false;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e011      	b.n	800b532 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800b50e:	4b0b      	ldr	r3, [pc, #44]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	b2da      	uxtb	r2, r3
 800b516:	4b09      	ldr	r3, [pc, #36]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	4b08      	ldr	r3, [pc, #32]	@ (800b53c <CAN_TestRamAccess+0xe0>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	7bfa      	ldrb	r2, [r7, #15]
 800b520:	429a      	cmp	r2, r3
 800b522:	d8db      	bhi.n	800b4dc <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	3304      	adds	r3, #4
 800b528:	73fb      	strb	r3, [r7, #15]
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	2b40      	cmp	r3, #64	@ 0x40
 800b52e:	d9a0      	bls.n	800b472 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800b530:	2301      	movs	r3, #1
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000de8 	.word	0x20000de8
 800b540:	20000d4c 	.word	0x20000d4c
 800b544:	20000da8 	.word	0x20000da8

0800b548 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800b54c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b55c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b560:	bf00      	nop
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <LL_AHB2_GRP1_EnableClock>:
{
 800b56a:	b480      	push	{r7}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b578:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4313      	orrs	r3, r2
 800b580:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4013      	ands	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b58e:	68fb      	ldr	r3, [r7, #12]
}
 800b590:	bf00      	nop
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b5a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b5b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4013      	ands	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b5d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800b608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b60c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b60e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4313      	orrs	r3, r2
 800b616:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800b618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b61c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4013      	ands	r3, r2
 800b622:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b624:	68fb      	ldr	r3, [r7, #12]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800b632:	b480      	push	{r7}
 800b634:	b085      	sub	sp, #20
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800b63a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b63e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4313      	orrs	r3, r2
 800b648:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b64a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b64e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4013      	ands	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b656:	68fb      	ldr	r3, [r7, #12]
}
 800b658:	bf00      	nop
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800b668:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b66c:	f7ff ff96 	bl	800b59c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800b670:	2200      	movs	r2, #0
 800b672:	2100      	movs	r1, #0
 800b674:	202e      	movs	r0, #46	@ 0x2e
 800b676:	f002 fd4e 	bl	800e116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800b67a:	202e      	movs	r0, #46	@ 0x2e
 800b67c:	f002 fd65 	bl	800e14a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b680:	bf00      	nop
 800b682:	bd80      	pop	{r7, pc}

0800b684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b09c      	sub	sp, #112	@ 0x70
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b68c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	605a      	str	r2, [r3, #4]
 800b696:	609a      	str	r2, [r3, #8]
 800b698:	60da      	str	r2, [r3, #12]
 800b69a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b69c:	f107 030c 	add.w	r3, r7, #12
 800b6a0:	2250      	movs	r2, #80	@ 0x50
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f009 f994 	bl	80149d2 <memset>
  if(huart->Instance==LPUART1)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a2f      	ldr	r2, [pc, #188]	@ (800b76c <HAL_UART_MspInit+0xe8>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d125      	bne.n	800b700 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b6bc:	f107 030c 	add.w	r3, r7, #12
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f004 fea2 	bl	801040a <HAL_RCCEx_PeriphCLKConfig>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b6cc:	f7fb fb6a 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7ff ff95 	bl	800b600 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	f7ff ff47 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b6dc:	230c      	movs	r3, #12
 800b6de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b6fa:	f003 f819 	bl	800e730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b6fe:	e031      	b.n	800b764 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1a      	ldr	r2, [pc, #104]	@ (800b770 <HAL_UART_MspInit+0xec>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d12c      	bne.n	800b764 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b70a:	2301      	movs	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800b70e:	2302      	movs	r3, #2
 800b710:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b712:	f107 030c 	add.w	r3, r7, #12
 800b716:	4618      	mov	r0, r3
 800b718:	f004 fe77 	bl	801040a <HAL_RCCEx_PeriphCLKConfig>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800b722:	f7fb fb3f 	bl	8006da4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b726:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b72a:	f7ff ff82 	bl	800b632 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b72e:	2002      	movs	r0, #2
 800b730:	f7ff ff1b 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b734:	23c0      	movs	r3, #192	@ 0xc0
 800b736:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b738:	2302      	movs	r3, #2
 800b73a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b740:	2300      	movs	r3, #0
 800b742:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b744:	2307      	movs	r3, #7
 800b746:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b74c:	4619      	mov	r1, r3
 800b74e:	4809      	ldr	r0, [pc, #36]	@ (800b774 <HAL_UART_MspInit+0xf0>)
 800b750:	f002 ffee 	bl	800e730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b754:	2200      	movs	r2, #0
 800b756:	2100      	movs	r1, #0
 800b758:	2024      	movs	r0, #36	@ 0x24
 800b75a:	f002 fcdc 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b75e:	2024      	movs	r0, #36	@ 0x24
 800b760:	f002 fcf3 	bl	800e14a <HAL_NVIC_EnableIRQ>
}
 800b764:	bf00      	nop
 800b766:	3770      	adds	r7, #112	@ 0x70
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	40008000 	.word	0x40008000
 800b770:	40013800 	.word	0x40013800
 800b774:	48000400 	.word	0x48000400

0800b778 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a05      	ldr	r2, [pc, #20]	@ (800b79c <HAL_PKA_MspInit+0x24>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d103      	bne.n	800b792 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800b78a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b78e:	f7ff ff05 	bl	800b59c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	58002000 	.word	0x58002000

0800b7a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b096      	sub	sp, #88	@ 0x58
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b7a8:	f107 0308 	add.w	r3, r7, #8
 800b7ac:	2250      	movs	r2, #80	@ 0x50
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f009 f90e 	bl	80149d2 <memset>
  if(hrtc->Instance==RTC)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b7f4 <HAL_RTC_MspInit+0x54>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d115      	bne.n	800b7ec <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b7c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b7c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f004 fe1a 	bl	801040a <HAL_RCCEx_PeriphCLKConfig>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800b7dc:	f7fb fae2 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b7e0:	f7ff feb2 	bl	800b548 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800b7e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b7e8:	f7ff fef1 	bl	800b5ce <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b7ec:	bf00      	nop
 800b7ee:	3758      	adds	r7, #88	@ 0x58
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	40002800 	.word	0x40002800

0800b7f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	605a      	str	r2, [r3, #4]
 800b80a:	609a      	str	r2, [r3, #8]
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a30      	ldr	r2, [pc, #192]	@ (800b8d8 <HAL_SPI_MspInit+0xe0>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d118      	bne.n	800b84c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b81a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b81e:	f7ff ff08 	bl	800b632 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b822:	2001      	movs	r0, #1
 800b824:	f7ff fea1 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800b828:	23c2      	movs	r3, #194	@ 0xc2
 800b82a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b82c:	2302      	movs	r3, #2
 800b82e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b834:	2300      	movs	r3, #0
 800b836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b838:	2305      	movs	r3, #5
 800b83a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b83c:	f107 030c 	add.w	r3, r7, #12
 800b840:	4619      	mov	r1, r3
 800b842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b846:	f002 ff73 	bl	800e730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b84a:	e040      	b.n	800b8ce <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a22      	ldr	r2, [pc, #136]	@ (800b8dc <HAL_SPI_MspInit+0xe4>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d13b      	bne.n	800b8ce <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b856:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b85a:	f7ff feb8 	bl	800b5ce <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b85e:	2004      	movs	r0, #4
 800b860:	f7ff fe83 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b864:	2001      	movs	r0, #1
 800b866:	f7ff fe80 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b86a:	2302      	movs	r3, #2
 800b86c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b86e:	2302      	movs	r3, #2
 800b870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b876:	2300      	movs	r3, #0
 800b878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800b87a:	2303      	movs	r3, #3
 800b87c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b87e:	f107 030c 	add.w	r3, r7, #12
 800b882:	4619      	mov	r1, r3
 800b884:	4816      	ldr	r0, [pc, #88]	@ (800b8e0 <HAL_SPI_MspInit+0xe8>)
 800b886:	f002 ff53 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b88a:	2304      	movs	r3, #4
 800b88c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b88e:	2302      	movs	r3, #2
 800b890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b896:	2300      	movs	r3, #0
 800b898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b89a:	2305      	movs	r3, #5
 800b89c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b89e:	f107 030c 	add.w	r3, r7, #12
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	480e      	ldr	r0, [pc, #56]	@ (800b8e0 <HAL_SPI_MspInit+0xe8>)
 800b8a6:	f002 ff43 	bl	800e730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b8aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b8bc:	2305      	movs	r3, #5
 800b8be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b8ca:	f002 ff31 	bl	800e730 <HAL_GPIO_Init>
}
 800b8ce:	bf00      	nop
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	40013000 	.word	0x40013000
 800b8dc:	40003800 	.word	0x40003800
 800b8e0:	48000800 	.word	0x48000800

0800b8e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a09      	ldr	r2, [pc, #36]	@ (800b918 <HAL_TIM_Base_MspInit+0x34>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d10b      	bne.n	800b90e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b8f6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b8fa:	f7ff fe9a 	bl	800b632 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	2100      	movs	r1, #0
 800b902:	2019      	movs	r0, #25
 800b904:	f002 fc07 	bl	800e116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b908:	2019      	movs	r0, #25
 800b90a:	f002 fc1e 	bl	800e14a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800b90e:	bf00      	nop
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	40012c00 	.word	0x40012c00

0800b91c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b09c      	sub	sp, #112	@ 0x70
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b924:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	60da      	str	r2, [r3, #12]
 800b932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b934:	f107 030c 	add.w	r3, r7, #12
 800b938:	2250      	movs	r2, #80	@ 0x50
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f009 f848 	bl	80149d2 <memset>
  if(hpcd->Instance==USB)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a1f      	ldr	r2, [pc, #124]	@ (800b9c4 <HAL_PCD_MspInit+0xa8>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d136      	bne.n	800b9ba <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b94c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b950:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800b952:	2306      	movs	r3, #6
 800b954:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b95a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b95c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b960:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b962:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800b966:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b96c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b96e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b972:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b974:	f107 030c 	add.w	r3, r7, #12
 800b978:	4618      	mov	r0, r3
 800b97a:	f004 fd46 	bl	801040a <HAL_RCCEx_PeriphCLKConfig>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b984:	f7fb fa0e 	bl	8006da4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b988:	2001      	movs	r0, #1
 800b98a:	f7ff fdee 	bl	800b56a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b98e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b992:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b994:	2302      	movs	r3, #2
 800b996:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b998:	2300      	movs	r3, #0
 800b99a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b99c:	2300      	movs	r3, #0
 800b99e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b9a0:	230a      	movs	r3, #10
 800b9a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b9ae:	f002 febf 	bl	800e730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b9b2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800b9b6:	f7ff fe0a 	bl	800b5ce <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800b9ba:	bf00      	nop
 800b9bc:	3770      	adds	r7, #112	@ 0x70
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	40006800 	.word	0x40006800

0800b9c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b9cc:	bf00      	nop
 800b9ce:	e7fd      	b.n	800b9cc <NMI_Handler+0x4>

0800b9d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b9d4:	bf00      	nop
 800b9d6:	e7fd      	b.n	800b9d4 <HardFault_Handler+0x4>

0800b9d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b9dc:	bf00      	nop
 800b9de:	e7fd      	b.n	800b9dc <MemManage_Handler+0x4>

0800b9e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <BusFault_Handler+0x4>

0800b9e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9ec:	bf00      	nop
 800b9ee:	e7fd      	b.n	800b9ec <UsageFault_Handler+0x4>

0800b9f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba02:	bf00      	nop
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ba10:	bf00      	nop
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ba1e:	f002 fa4f 	bl	800dec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba22:	bf00      	nop
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800ba2c:	4b08      	ldr	r3, [pc, #32]	@ (800ba50 <EXTI0_IRQHandler+0x28>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d105      	bne.n	800ba40 <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800ba34:	4b07      	ldr	r3, [pc, #28]	@ (800ba54 <EXTI0_IRQHandler+0x2c>)
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f003 f833 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800ba3e:	e004      	b.n	800ba4a <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800ba40:	4b05      	ldr	r3, [pc, #20]	@ (800ba58 <EXTI0_IRQHandler+0x30>)
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f003 f82d 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
}
 800ba4a:	bf00      	nop
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000a50 	.word	0x20000a50
 800ba54:	20000cce 	.word	0x20000cce
 800ba58:	20000c86 	.word	0x20000c86

0800ba5c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800ba60:	4b05      	ldr	r3, [pc, #20]	@ (800ba78 <EXTI1_IRQHandler+0x1c>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d104      	bne.n	800ba72 <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800ba68:	4b04      	ldr	r3, [pc, #16]	@ (800ba7c <EXTI1_IRQHandler+0x20>)
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f003 f819 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800ba72:	bf00      	nop
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20000a50 	.word	0x20000a50
 800ba7c:	20000cd6 	.word	0x20000cd6

0800ba80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800ba84:	4b05      	ldr	r3, [pc, #20]	@ (800ba9c <EXTI2_IRQHandler+0x1c>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800ba8c:	4b04      	ldr	r3, [pc, #16]	@ (800baa0 <EXTI2_IRQHandler+0x20>)
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f003 f807 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800ba96:	bf00      	nop
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000a50 	.word	0x20000a50
 800baa0:	20000cd6 	.word	0x20000cd6

0800baa4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800baa8:	4b08      	ldr	r3, [pc, #32]	@ (800bacc <EXTI4_IRQHandler+0x28>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d105      	bne.n	800babc <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800bab0:	4b07      	ldr	r3, [pc, #28]	@ (800bad0 <EXTI4_IRQHandler+0x2c>)
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f002 fff5 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800baba:	e004      	b.n	800bac6 <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800babc:	4b05      	ldr	r3, [pc, #20]	@ (800bad4 <EXTI4_IRQHandler+0x30>)
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f002 ffef 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
}
 800bac6:	bf00      	nop
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20000a50 	.word	0x20000a50
 800bad0:	20000cc4 	.word	0x20000cc4
 800bad4:	20000c9e 	.word	0x20000c9e

0800bad8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800badc:	4b12      	ldr	r3, [pc, #72]	@ (800bb28 <EXTI9_5_IRQHandler+0x50>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800bae4:	4b11      	ldr	r3, [pc, #68]	@ (800bb2c <EXTI9_5_IRQHandler+0x54>)
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	4618      	mov	r0, r3
 800baea:	f002 ffdb 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800baee:	4b10      	ldr	r3, [pc, #64]	@ (800bb30 <EXTI9_5_IRQHandler+0x58>)
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f002 ffd6 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800baf8:	e013      	b.n	800bb22 <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800bafa:	4b0c      	ldr	r3, [pc, #48]	@ (800bb2c <EXTI9_5_IRQHandler+0x54>)
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f002 ffd0 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800bb04:	4b0b      	ldr	r3, [pc, #44]	@ (800bb34 <EXTI9_5_IRQHandler+0x5c>)
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f002 ffcb 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800bb0e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb38 <EXTI9_5_IRQHandler+0x60>)
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f002 ffc6 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800bb18:	4b08      	ldr	r3, [pc, #32]	@ (800bb3c <EXTI9_5_IRQHandler+0x64>)
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f002 ffc1 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
}
 800bb22:	bf00      	nop
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000a50 	.word	0x20000a50
 800bb2c:	20000c5e 	.word	0x20000c5e
 800bb30:	20000c66 	.word	0x20000c66
 800bb34:	20000c94 	.word	0x20000c94
 800bb38:	20000ca6 	.word	0x20000ca6
 800bb3c:	20000cde 	.word	0x20000cde

0800bb40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bb44:	4802      	ldr	r0, [pc, #8]	@ (800bb50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800bb46:	f005 ff91 	bl	8011a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800bb4a:	bf00      	nop
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	200005d0 	.word	0x200005d0

0800bb54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bb58:	4802      	ldr	r0, [pc, #8]	@ (800bb64 <USART1_IRQHandler+0x10>)
 800bb5a:	f007 f859 	bl	8012c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bb5e:	bf00      	nop
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000444 	.word	0x20000444

0800bb68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800bb6c:	4b1c      	ldr	r3, [pc, #112]	@ (800bbe0 <EXTI15_10_IRQHandler+0x78>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d114      	bne.n	800bb9e <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800bb74:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe4 <EXTI15_10_IRQHandler+0x7c>)
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f002 ff93 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800bb7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe8 <EXTI15_10_IRQHandler+0x80>)
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f002 ff8e 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800bb88:	4b18      	ldr	r3, [pc, #96]	@ (800bbec <EXTI15_10_IRQHandler+0x84>)
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f002 ff89 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800bb92:	4b17      	ldr	r3, [pc, #92]	@ (800bbf0 <EXTI15_10_IRQHandler+0x88>)
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f002 ff84 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800bb9c:	e01d      	b.n	800bbda <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800bb9e:	4b11      	ldr	r3, [pc, #68]	@ (800bbe4 <EXTI15_10_IRQHandler+0x7c>)
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f002 ff7e 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800bba8:	4b12      	ldr	r3, [pc, #72]	@ (800bbf4 <EXTI15_10_IRQHandler+0x8c>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f002 ff79 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <EXTI15_10_IRQHandler+0x80>)
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f002 ff74 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800bbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbec <EXTI15_10_IRQHandler+0x84>)
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f002 ff6f 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	@ (800bbf8 <EXTI15_10_IRQHandler+0x90>)
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f002 ff6a 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <EXTI15_10_IRQHandler+0x94>)
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f002 ff65 	bl	800eaa4 <HAL_GPIO_EXTI_IRQHandler>
}
 800bbda:	bf00      	nop
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000a50 	.word	0x20000a50
 800bbe4:	20000c56 	.word	0x20000c56
 800bbe8:	20000c74 	.word	0x20000c74
 800bbec:	20000c7e 	.word	0x20000c7e
 800bbf0:	20000c86 	.word	0x20000c86
 800bbf4:	20000c66 	.word	0x20000c66
 800bbf8:	20000cc4 	.word	0x20000cc4
 800bbfc:	20000cce 	.word	0x20000cce

0800bc00 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800bc04:	f002 ff66 	bl	800ead4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800bc08:	bf00      	nop
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  return 1;
 800bc10:	2301      	movs	r3, #1
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_kill>:

int _kill(int pid, int sig)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800bc26:	f009 fda9 	bl	801577c <__errno>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2216      	movs	r2, #22
 800bc2e:	601a      	str	r2, [r3, #0]
  return -1;
 800bc30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <_exit>:

void _exit (int status)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800bc44:	f04f 31ff 	mov.w	r1, #4294967295
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff ffe7 	bl	800bc1c <_kill>
  while (1) {}    /* Make sure we hang here */
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <_exit+0x12>

0800bc52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b086      	sub	sp, #24
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc5e:	2300      	movs	r3, #0
 800bc60:	617b      	str	r3, [r7, #20]
 800bc62:	e00a      	b.n	800bc7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bc64:	f3af 8000 	nop.w
 800bc68:	4601      	mov	r1, r0
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	60ba      	str	r2, [r7, #8]
 800bc70:	b2ca      	uxtb	r2, r1
 800bc72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	3301      	adds	r3, #1
 800bc78:	617b      	str	r3, [r7, #20]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	dbf0      	blt.n	800bc64 <_read+0x12>
  }

  return len;
 800bc82:	687b      	ldr	r3, [r7, #4]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e009      	b.n	800bcb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	60ba      	str	r2, [r7, #8]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	dbf1      	blt.n	800bc9e <_write+0x12>
  }
  return len;
 800bcba:	687b      	ldr	r3, [r7, #4]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <_close>:

int _close(int file)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bcec:	605a      	str	r2, [r3, #4]
  return 0;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <_isatty>:

int _isatty(int file)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bd04:	2301      	movs	r3, #1
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b085      	sub	sp, #20
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bd34:	4a14      	ldr	r2, [pc, #80]	@ (800bd88 <_sbrk+0x5c>)
 800bd36:	4b15      	ldr	r3, [pc, #84]	@ (800bd8c <_sbrk+0x60>)
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bd40:	4b13      	ldr	r3, [pc, #76]	@ (800bd90 <_sbrk+0x64>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bd48:	4b11      	ldr	r3, [pc, #68]	@ (800bd90 <_sbrk+0x64>)
 800bd4a:	4a12      	ldr	r2, [pc, #72]	@ (800bd94 <_sbrk+0x68>)
 800bd4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bd4e:	4b10      	ldr	r3, [pc, #64]	@ (800bd90 <_sbrk+0x64>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4413      	add	r3, r2
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d207      	bcs.n	800bd6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bd5c:	f009 fd0e 	bl	801577c <__errno>
 800bd60:	4603      	mov	r3, r0
 800bd62:	220c      	movs	r2, #12
 800bd64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bd66:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6a:	e009      	b.n	800bd80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bd6c:	4b08      	ldr	r3, [pc, #32]	@ (800bd90 <_sbrk+0x64>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bd72:	4b07      	ldr	r3, [pc, #28]	@ (800bd90 <_sbrk+0x64>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4413      	add	r3, r2
 800bd7a:	4a05      	ldr	r2, [pc, #20]	@ (800bd90 <_sbrk+0x64>)
 800bd7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20030000 	.word	0x20030000
 800bd8c:	00000400 	.word	0x00000400
 800bd90:	2000a6d0 	.word	0x2000a6d0
 800bd94:	2000a908 	.word	0x2000a908

0800bd98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800bd9c:	4b24      	ldr	r3, [pc, #144]	@ (800be30 <SystemInit+0x98>)
 800bd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bda2:	4a23      	ldr	r2, [pc, #140]	@ (800be30 <SystemInit+0x98>)
 800bda4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bda8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800bdac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800bdbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdc0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800bdc4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800bdc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdd0:	4b18      	ldr	r3, [pc, #96]	@ (800be34 <SystemInit+0x9c>)
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800bdd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bde2:	f023 0305 	bic.w	r3, r3, #5
 800bde6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800bdea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdf6:	f023 0301 	bic.w	r3, r3, #1
 800bdfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800bdfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be02:	4a0d      	ldr	r2, [pc, #52]	@ (800be38 <SystemInit+0xa0>)
 800be04:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800be06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be0a:	4a0b      	ldr	r2, [pc, #44]	@ (800be38 <SystemInit+0xa0>)
 800be0c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800be0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800be1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be22:	2200      	movs	r2, #0
 800be24:	619a      	str	r2, [r3, #24]
}
 800be26:	bf00      	nop
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	e000ed00 	.word	0xe000ed00
 800be34:	faf6fefb 	.word	0xfaf6fefb
 800be38:	22041000 	.word	0x22041000

0800be3c <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800be3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3e:	b08b      	sub	sp, #44	@ 0x2c
 800be40:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800be42:	4a7a      	ldr	r2, [pc, #488]	@ (800c02c <VCU_ReceiveMessages+0x1f0>)
 800be44:	2101      	movs	r1, #1
 800be46:	2000      	movs	r0, #0
 800be48:	f7f6 fcea 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800be4c:	e0e2      	b.n	800c014 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800be4e:	2340      	movs	r3, #64	@ 0x40
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	4b77      	ldr	r3, [pc, #476]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be54:	4a77      	ldr	r2, [pc, #476]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800be56:	2101      	movs	r1, #1
 800be58:	2000      	movs	r0, #0
 800be5a:	f7f6 fb45 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800be5e:	4b76      	ldr	r3, [pc, #472]	@ (800c038 <VCU_ReceiveMessages+0x1fc>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 0312 	and.w	r3, r3, #18
 800be66:	2b12      	cmp	r3, #18
 800be68:	d12c      	bne.n	800bec4 <VCU_ReceiveMessages+0x88>
 800be6a:	4b72      	ldr	r3, [pc, #456]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be72:	b29b      	uxth	r3, r3
 800be74:	469c      	mov	ip, r3
 800be76:	4b6e      	ldr	r3, [pc, #440]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	469e      	mov	lr, r3
 800be7c:	4b6c      	ldr	r3, [pc, #432]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	461a      	mov	r2, r3
 800be82:	4b6b      	ldr	r3, [pc, #428]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be84:	789b      	ldrb	r3, [r3, #2]
 800be86:	4619      	mov	r1, r3
 800be88:	4b69      	ldr	r3, [pc, #420]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be8a:	78db      	ldrb	r3, [r3, #3]
 800be8c:	4618      	mov	r0, r3
 800be8e:	4b68      	ldr	r3, [pc, #416]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be90:	791b      	ldrb	r3, [r3, #4]
 800be92:	461c      	mov	r4, r3
 800be94:	4b66      	ldr	r3, [pc, #408]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be96:	795b      	ldrb	r3, [r3, #5]
 800be98:	461d      	mov	r5, r3
 800be9a:	4b65      	ldr	r3, [pc, #404]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800be9c:	799b      	ldrb	r3, [r3, #6]
 800be9e:	461e      	mov	r6, r3
 800bea0:	4b63      	ldr	r3, [pc, #396]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bea2:	79db      	ldrb	r3, [r3, #7]
 800bea4:	9306      	str	r3, [sp, #24]
 800bea6:	9605      	str	r6, [sp, #20]
 800bea8:	9504      	str	r5, [sp, #16]
 800beaa:	9403      	str	r4, [sp, #12]
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	9101      	str	r1, [sp, #4]
 800beb0:	9200      	str	r2, [sp, #0]
 800beb2:	4673      	mov	r3, lr
 800beb4:	4662      	mov	r2, ip
 800beb6:	4961      	ldr	r1, [pc, #388]	@ (800c03c <VCU_ReceiveMessages+0x200>)
 800beb8:	4861      	ldr	r0, [pc, #388]	@ (800c040 <VCU_ReceiveMessages+0x204>)
 800beba:	f008 fd23 	bl	8014904 <siprintf>
 800bebe:	4860      	ldr	r0, [pc, #384]	@ (800c040 <VCU_ReceiveMessages+0x204>)
 800bec0:	f7f9 fbbc 	bl	800563c <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800bec4:	4b5b      	ldr	r3, [pc, #364]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800becc:	b29b      	uxth	r3, r3
 800bece:	461a      	mov	r2, r3
 800bed0:	4b5c      	ldr	r3, [pc, #368]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bed2:	895b      	ldrh	r3, [r3, #10]
 800bed4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bed8:	429a      	cmp	r2, r3
 800beda:	d102      	bne.n	800bee2 <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800bedc:	f000 f950 	bl	800c180 <VCU_ProcessVcuCommand>
 800bee0:	e093      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800bee2:	4b54      	ldr	r3, [pc, #336]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beea:	b29b      	uxth	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	4b55      	ldr	r3, [pc, #340]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bef0:	895b      	ldrh	r3, [r3, #10]
 800bef2:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d102      	bne.n	800bf00 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800befa:	f000 fac7 	bl	800c48c <VCU_ProcessVcuTime>
 800befe:	e084      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800bf00:	4b4c      	ldr	r3, [pc, #304]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4b4d      	ldr	r3, [pc, #308]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bf0e:	895b      	ldrh	r3, [r3, #10]
 800bf10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d102      	bne.n	800bf1e <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800bf18:	f000 fb04 	bl	800c524 <VCU_ProcessReadEeprom>
 800bf1c:	e075      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800bf1e:	4b45      	ldr	r3, [pc, #276]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	4b46      	ldr	r3, [pc, #280]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bf2c:	895b      	ldrh	r3, [r3, #10]
 800bf2e:	f203 4303 	addw	r3, r3, #1027	@ 0x403
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d102      	bne.n	800bf3c <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800bf36:	f000 fbb1 	bl	800c69c <VCU_ProcessWriteEeprom>
 800bf3a:	e066      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800bf3c:	4b3d      	ldr	r3, [pc, #244]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	461a      	mov	r2, r3
 800bf48:	4b3e      	ldr	r3, [pc, #248]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bf4a:	895b      	ldrh	r3, [r3, #10]
 800bf4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d102      	bne.n	800bf5a <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800bf54:	f000 f9be 	bl	800c2d4 <VCU_ProcessVcuModuleCommand>
 800bf58:	e057      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800bf5a:	4b36      	ldr	r3, [pc, #216]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	461a      	mov	r2, r3
 800bf66:	4b37      	ldr	r3, [pc, #220]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bf68:	895b      	ldrh	r3, [r3, #10]
 800bf6a:	f203 4305 	addw	r3, r3, #1029	@ 0x405
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d102      	bne.n	800bf78 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800bf72:	f000 fa3b 	bl	800c3ec <VCU_ProcessVcuKeepAlive>
 800bf76:	e048      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800bf78:	4b2e      	ldr	r3, [pc, #184]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	461a      	mov	r2, r3
 800bf84:	4b2f      	ldr	r3, [pc, #188]	@ (800c044 <VCU_ReceiveMessages+0x208>)
 800bf86:	895b      	ldrh	r3, [r3, #10]
 800bf88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d102      	bne.n	800bf96 <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800bf90:	f000 fc44 	bl	800c81c <VCU_ProcessVcuRequestModuleList>
 800bf94:	e039      	b.n	800c00a <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800bf96:	4b28      	ldr	r3, [pc, #160]	@ (800c038 <VCU_ReceiveMessages+0x1fc>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	f003 0311 	and.w	r3, r3, #17
 800bf9e:	2b11      	cmp	r3, #17
 800bfa0:	d133      	bne.n	800c00a <VCU_ReceiveMessages+0x1ce>
 800bfa2:	4b24      	ldr	r3, [pc, #144]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	469c      	mov	ip, r3
 800bfae:	4b21      	ldr	r3, [pc, #132]	@ (800c034 <VCU_ReceiveMessages+0x1f8>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800bfb6:	469e      	mov	lr, r3
 800bfb8:	4b1d      	ldr	r3, [pc, #116]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4b1c      	ldr	r3, [pc, #112]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4b1a      	ldr	r3, [pc, #104]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfc6:	789b      	ldrb	r3, [r3, #2]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	4b19      	ldr	r3, [pc, #100]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfcc:	78db      	ldrb	r3, [r3, #3]
 800bfce:	461c      	mov	r4, r3
 800bfd0:	4b17      	ldr	r3, [pc, #92]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfd2:	791b      	ldrb	r3, [r3, #4]
 800bfd4:	461d      	mov	r5, r3
 800bfd6:	4b16      	ldr	r3, [pc, #88]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfd8:	795b      	ldrb	r3, [r3, #5]
 800bfda:	461e      	mov	r6, r3
 800bfdc:	4b14      	ldr	r3, [pc, #80]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfde:	799b      	ldrb	r3, [r3, #6]
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	4b13      	ldr	r3, [pc, #76]	@ (800c030 <VCU_ReceiveMessages+0x1f4>)
 800bfe4:	79db      	ldrb	r3, [r3, #7]
 800bfe6:	9307      	str	r3, [sp, #28]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	9306      	str	r3, [sp, #24]
 800bfec:	9605      	str	r6, [sp, #20]
 800bfee:	9504      	str	r5, [sp, #16]
 800bff0:	9403      	str	r4, [sp, #12]
 800bff2:	9002      	str	r0, [sp, #8]
 800bff4:	9101      	str	r1, [sp, #4]
 800bff6:	9200      	str	r2, [sp, #0]
 800bff8:	4673      	mov	r3, lr
 800bffa:	4662      	mov	r2, ip
 800bffc:	4912      	ldr	r1, [pc, #72]	@ (800c048 <VCU_ReceiveMessages+0x20c>)
 800bffe:	4810      	ldr	r0, [pc, #64]	@ (800c040 <VCU_ReceiveMessages+0x204>)
 800c000:	f008 fc80 	bl	8014904 <siprintf>
 800c004:	480e      	ldr	r0, [pc, #56]	@ (800c040 <VCU_ReceiveMessages+0x204>)
 800c006:	f7f9 fb19 	bl	800563c <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800c00a:	4a08      	ldr	r2, [pc, #32]	@ (800c02c <VCU_ReceiveMessages+0x1f0>)
 800c00c:	2101      	movs	r1, #1
 800c00e:	2000      	movs	r0, #0
 800c010:	f7f6 fc06 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800c014:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <VCU_ReceiveMessages+0x1f0>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f af16 	bne.w	800be4e <VCU_ReceiveMessages+0x12>
  }
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c02c:	2000a724 	.word	0x2000a724
 800c030:	2000a734 	.word	0x2000a734
 800c034:	2000a728 	.word	0x2000a728
 800c038:	2000000c 	.word	0x2000000c
 800c03c:	080198a4 	.word	0x080198a4
 800c040:	20000b5c 	.word	0x20000b5c
 800c044:	2000a66c 	.word	0x2000a66c
 800c048:	080198fc 	.word	0x080198fc

0800c04c <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04e:	b08d      	sub	sp, #52	@ 0x34
 800c050:	af08      	add	r7, sp, #32
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800c056:	2332      	movs	r3, #50	@ 0x32
 800c058:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	4a3e      	ldr	r2, [pc, #248]	@ (800c158 <VCU_TransmitMessageQueue+0x10c>)
 800c05e:	2102      	movs	r1, #2
 800c060:	4618      	mov	r0, r3
 800c062:	f7f6 fbaa 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d11a      	bne.n	800c0a2 <VCU_TransmitMessageQueue+0x56>
      Nop();
 800c06c:	bf00      	nop
      Nop();
 800c06e:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800c070:	79f8      	ldrb	r0, [r7, #7]
 800c072:	4b3a      	ldr	r3, [pc, #232]	@ (800c15c <VCU_TransmitMessageQueue+0x110>)
 800c074:	4a3a      	ldr	r2, [pc, #232]	@ (800c160 <VCU_TransmitMessageQueue+0x114>)
 800c076:	493b      	ldr	r1, [pc, #236]	@ (800c164 <VCU_TransmitMessageQueue+0x118>)
 800c078:	f7f6 fc59 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800c07c:	4b3a      	ldr	r3, [pc, #232]	@ (800c168 <VCU_TransmitMessageQueue+0x11c>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	f003 0311 	and.w	r3, r3, #17
 800c084:	2b11      	cmp	r3, #17
 800c086:	d106      	bne.n	800c096 <VCU_TransmitMessageQueue+0x4a>
 800c088:	4938      	ldr	r1, [pc, #224]	@ (800c16c <VCU_TransmitMessageQueue+0x120>)
 800c08a:	4839      	ldr	r0, [pc, #228]	@ (800c170 <VCU_TransmitMessageQueue+0x124>)
 800c08c:	f008 fc3a 	bl	8014904 <siprintf>
 800c090:	4837      	ldr	r0, [pc, #220]	@ (800c170 <VCU_TransmitMessageQueue+0x124>)
 800c092:	f7f9 fad3 	bl	800563c <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	2102      	movs	r1, #2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7f6 f8d0 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800c0a0:	e056      	b.n	800c150 <VCU_TransmitMessageQueue+0x104>
    }
    attempts--;
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800c0a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c158 <VCU_TransmitMessageQueue+0x10c>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0d2      	beq.n	800c05a <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800c0b4:	4b2f      	ldr	r3, [pc, #188]	@ (800c174 <VCU_TransmitMessageQueue+0x128>)
 800c0b6:	791b      	ldrb	r3, [r3, #4]
 800c0b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f7 fc42 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73bb      	strb	r3, [r7, #14]
  
  // Log TX message if DBG_COMMS is enabled
  if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){
 800c0c8:	4b27      	ldr	r3, [pc, #156]	@ (800c168 <VCU_TransmitMessageQueue+0x11c>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f003 0312 	and.w	r3, r3, #18
 800c0d0:	2b12      	cmp	r3, #18
 800c0d2:	d133      	bne.n	800c13c <VCU_TransmitMessageQueue+0xf0>
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0d4:	4b27      	ldr	r3, [pc, #156]	@ (800c174 <VCU_TransmitMessageQueue+0x128>)
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0dc:	b29b      	uxth	r3, r3
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c0de:	469c      	mov	ip, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0e0:	4b24      	ldr	r3, [pc, #144]	@ (800c174 <VCU_TransmitMessageQueue+0x128>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c0e8:	469e      	mov	lr, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0ea:	4b23      	ldr	r3, [pc, #140]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c0ee:	461a      	mov	r2, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0f0:	4b21      	ldr	r3, [pc, #132]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c0f2:	785b      	ldrb	r3, [r3, #1]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c0f4:	4619      	mov	r1, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0f6:	4b20      	ldr	r3, [pc, #128]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c0f8:	789b      	ldrb	r3, [r3, #2]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c0fa:	4618      	mov	r0, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c0fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c0fe:	78db      	ldrb	r3, [r3, #3]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c100:	461c      	mov	r4, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c102:	4b1d      	ldr	r3, [pc, #116]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c104:	791b      	ldrb	r3, [r3, #4]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c106:	461d      	mov	r5, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c108:	4b1b      	ldr	r3, [pc, #108]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c10a:	795b      	ldrb	r3, [r3, #5]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c10c:	461e      	mov	r6, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c10e:	4b1a      	ldr	r3, [pc, #104]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c110:	799b      	ldrb	r3, [r3, #6]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c112:	603b      	str	r3, [r7, #0]
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c114:	4b18      	ldr	r3, [pc, #96]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c116:	79db      	ldrb	r3, [r3, #7]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	9306      	str	r3, [sp, #24]
 800c11e:	9605      	str	r6, [sp, #20]
 800c120:	9504      	str	r5, [sp, #16]
 800c122:	9403      	str	r4, [sp, #12]
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	9101      	str	r1, [sp, #4]
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	4673      	mov	r3, lr
 800c12c:	4662      	mov	r2, ip
 800c12e:	4913      	ldr	r1, [pc, #76]	@ (800c17c <VCU_TransmitMessageQueue+0x130>)
 800c130:	480f      	ldr	r0, [pc, #60]	@ (800c170 <VCU_TransmitMessageQueue+0x124>)
 800c132:	f008 fbe7 	bl	8014904 <siprintf>
      serialOut(tempBuffer);
 800c136:	480e      	ldr	r0, [pc, #56]	@ (800c170 <VCU_TransmitMessageQueue+0x124>)
 800c138:	f7f9 fa80 	bl	800563c <serialOut>
  }

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	79f8      	ldrb	r0, [r7, #7]
 800c140:	2201      	movs	r2, #1
 800c142:	9201      	str	r2, [sp, #4]
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	4b0c      	ldr	r3, [pc, #48]	@ (800c178 <VCU_TransmitMessageQueue+0x12c>)
 800c148:	4a0a      	ldr	r2, [pc, #40]	@ (800c174 <VCU_TransmitMessageQueue+0x128>)
 800c14a:	2102      	movs	r1, #2
 800c14c:	f7f5 ff86 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c156:	bf00      	nop
 800c158:	2000a6d4 	.word	0x2000a6d4
 800c15c:	2000a776 	.word	0x2000a776
 800c160:	2000a775 	.word	0x2000a775
 800c164:	2000a774 	.word	0x2000a774
 800c168:	2000000c 	.word	0x2000000c
 800c16c:	08019968 	.word	0x08019968
 800c170:	20000b5c 	.word	0x20000b5c
 800c174:	2000a6d8 	.word	0x2000a6d8
 800c178:	2000a6e4 	.word	0x2000a6e4
 800c17c:	08019998 	.word	0x08019998

0800c180 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800c180:	b5b0      	push	{r4, r5, r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c186:	4b4a      	ldr	r3, [pc, #296]	@ (800c2b0 <VCU_ProcessVcuCommand+0x130>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a4a      	ldr	r2, [pc, #296]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c18c:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c18e:	4b4a      	ldr	r3, [pc, #296]	@ (800c2b8 <VCU_ProcessVcuCommand+0x138>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c194:	4a47      	ldr	r2, [pc, #284]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c196:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800c198:	4b46      	ldr	r3, [pc, #280]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800c1a0:	463b      	mov	r3, r7
 800c1a2:	2208      	movs	r2, #8
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f008 fc13 	bl	80149d2 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800c1ac:	4a43      	ldr	r2, [pc, #268]	@ (800c2bc <VCU_ProcessVcuCommand+0x13c>)
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b4:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800c1b8:	887a      	ldrh	r2, [r7, #2]
 800c1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c1bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800c1c0:	4b3c      	ldr	r3, [pc, #240]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1c6:	783a      	ldrb	r2, [r7, #0]
 800c1c8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d03d      	beq.n	800c24e <VCU_ProcessVcuCommand+0xce>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800c1d2:	783b      	ldrb	r3, [r7, #0]
 800c1d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4b35      	ldr	r3, [pc, #212]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c1de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 800c1e2:	4b34      	ldr	r3, [pc, #208]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c1e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	d81b      	bhi.n	800c224 <VCU_ProcessVcuCommand+0xa4>
 800c1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f4 <VCU_ProcessVcuCommand+0x74>)
 800c1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f2:	bf00      	nop
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c249 	.word	0x0800c249
 800c1fc:	0800c215 	.word	0x0800c215
 800c200:	0800c205 	.word	0x0800c205
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800c204:	4b2b      	ldr	r3, [pc, #172]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c206:	2200      	movs	r2, #0
 800c208:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800c20a:	4b2a      	ldr	r3, [pc, #168]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c212:	e01c      	b.n	800c24e <VCU_ProcessVcuCommand+0xce>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800c214:	4b27      	ldr	r3, [pc, #156]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c216:	2200      	movs	r2, #0
 800c218:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800c21a:	4b26      	ldr	r3, [pc, #152]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c222:	e014      	b.n	800c24e <VCU_ProcessVcuCommand+0xce>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800c224:	4b26      	ldr	r3, [pc, #152]	@ (800c2c0 <VCU_ProcessVcuCommand+0x140>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	f003 0311 	and.w	r3, r3, #17
 800c22c:	2b11      	cmp	r3, #17
 800c22e:	d10d      	bne.n	800c24c <VCU_ProcessVcuCommand+0xcc>
 800c230:	4b20      	ldr	r3, [pc, #128]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c236:	461a      	mov	r2, r3
 800c238:	4922      	ldr	r1, [pc, #136]	@ (800c2c4 <VCU_ProcessVcuCommand+0x144>)
 800c23a:	4823      	ldr	r0, [pc, #140]	@ (800c2c8 <VCU_ProcessVcuCommand+0x148>)
 800c23c:	f008 fb62 	bl	8014904 <siprintf>
 800c240:	4821      	ldr	r0, [pc, #132]	@ (800c2c8 <VCU_ProcessVcuCommand+0x148>)
 800c242:	f7f9 f9fb 	bl	800563c <serialOut>
        break;
 800c246:	e001      	b.n	800c24c <VCU_ProcessVcuCommand+0xcc>
        break;
 800c248:	bf00      	nop
 800c24a:	e000      	b.n	800c24e <VCU_ProcessVcuCommand+0xce>
        break;
 800c24c:	bf00      	nop
    }
  }
  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800c24e:	4b1c      	ldr	r3, [pc, #112]	@ (800c2c0 <VCU_ProcessVcuCommand+0x140>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	f003 0310 	and.w	r3, r3, #16
 800c256:	2b00      	cmp	r3, #0
 800c258:	d021      	beq.n	800c29e <VCU_ProcessVcuCommand+0x11e>
 800c25a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2cc <VCU_ProcessVcuCommand+0x14c>)
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c262:	b29b      	uxth	r3, r3
 800c264:	461c      	mov	r4, r3
 800c266:	4b13      	ldr	r3, [pc, #76]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c26c:	461d      	mov	r5, r3
 800c26e:	4b11      	ldr	r3, [pc, #68]	@ (800c2b4 <VCU_ProcessVcuCommand+0x134>)
 800c270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c274:	4618      	mov	r0, r3
 800c276:	f7f4 f93d 	bl	80004f4 <__aeabi_i2d>
 800c27a:	a30b      	add	r3, pc, #44	@ (adr r3, 800c2a8 <VCU_ProcessVcuCommand+0x128>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f7f4 f9a2 	bl	80005c8 <__aeabi_dmul>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	e9cd 2300 	strd	r2, r3, [sp]
 800c28c:	462b      	mov	r3, r5
 800c28e:	4622      	mov	r2, r4
 800c290:	490f      	ldr	r1, [pc, #60]	@ (800c2d0 <VCU_ProcessVcuCommand+0x150>)
 800c292:	480d      	ldr	r0, [pc, #52]	@ (800c2c8 <VCU_ProcessVcuCommand+0x148>)
 800c294:	f008 fb36 	bl	8014904 <siprintf>
 800c298:	480b      	ldr	r0, [pc, #44]	@ (800c2c8 <VCU_ProcessVcuCommand+0x148>)
 800c29a:	f7f9 f9cf 	bl	800563c <serialOut>
}
 800c29e:	bf00      	nop
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	eb851eb8 	.word	0xeb851eb8
 800c2ac:	3f8eb851 	.word	0x3f8eb851
 800c2b0:	20000d20 	.word	0x20000d20
 800c2b4:	2000a66c 	.word	0x2000a66c
 800c2b8:	200005d0 	.word	0x200005d0
 800c2bc:	2000a734 	.word	0x2000a734
 800c2c0:	2000000c 	.word	0x2000000c
 800c2c4:	080199fc 	.word	0x080199fc
 800c2c8:	20000b5c 	.word	0x20000b5c
 800c2cc:	2000a6d8 	.word	0x2000a6d8
 800c2d0:	08019a24 	.word	0x08019a24

0800c2d4 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c2da:	4b3a      	ldr	r3, [pc, #232]	@ (800c3c4 <VCU_ProcessVcuModuleCommand+0xf0>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a3a      	ldr	r2, [pc, #232]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c2e0:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c2e2:	4b3a      	ldr	r3, [pc, #232]	@ (800c3cc <VCU_ProcessVcuModuleCommand+0xf8>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e8:	4a37      	ldr	r2, [pc, #220]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c2ea:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800c2ec:	4b36      	ldr	r3, [pc, #216]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800c2f4:	463b      	mov	r3, r7
 800c2f6:	220c      	movs	r2, #12
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f008 fb69 	bl	80149d2 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800c300:	4a33      	ldr	r2, [pc, #204]	@ (800c3d0 <VCU_ProcessVcuModuleCommand+0xfc>)
 800c302:	463b      	mov	r3, r7
 800c304:	ca07      	ldmia	r2, {r0, r1, r2}
 800c306:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800c30a:	783a      	ldrb	r2, [r7, #0]
 800c30c:	4b2e      	ldr	r3, [pc, #184]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c30e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c312:	4b2d      	ldr	r3, [pc, #180]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c314:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fecb 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800c31e:	4603      	mov	r3, r0
 800c320:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c322:	4b29      	ldr	r3, [pc, #164]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c324:	7d1b      	ldrb	r3, [r3, #20]
 800c326:	7bfa      	ldrb	r2, [r7, #15]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d111      	bne.n	800c350 <VCU_ProcessVcuModuleCommand+0x7c>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800c32c:	4b29      	ldr	r3, [pc, #164]	@ (800c3d4 <VCU_ProcessVcuModuleCommand+0x100>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	f003 0311 	and.w	r3, r3, #17
 800c334:	2b11      	cmp	r3, #17
 800c336:	d140      	bne.n	800c3ba <VCU_ProcessVcuModuleCommand+0xe6>
 800c338:	4b23      	ldr	r3, [pc, #140]	@ (800c3c8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c33a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800c33e:	461a      	mov	r2, r3
 800c340:	4925      	ldr	r1, [pc, #148]	@ (800c3d8 <VCU_ProcessVcuModuleCommand+0x104>)
 800c342:	4826      	ldr	r0, [pc, #152]	@ (800c3dc <VCU_ProcessVcuModuleCommand+0x108>)
 800c344:	f008 fade 	bl	8014904 <siprintf>
 800c348:	4824      	ldr	r0, [pc, #144]	@ (800c3dc <VCU_ProcessVcuModuleCommand+0x108>)
 800c34a:	f7f9 f977 	bl	800563c <serialOut>
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
  }
}
 800c34e:	e034      	b.n	800c3ba <VCU_ProcessVcuModuleCommand+0xe6>
    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4a23      	ldr	r2, [pc, #140]	@ (800c3e0 <VCU_ProcessVcuModuleCommand+0x10c>)
 800c354:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800c358:	fb01 f303 	mul.w	r3, r1, r3
 800c35c:	4413      	add	r3, r2
 800c35e:	3327      	adds	r3, #39	@ 0x27
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	787a      	ldrb	r2, [r7, #1]
 800c364:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d00e      	beq.n	800c38c <VCU_ProcessVcuModuleCommand+0xb8>
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800c36e:	787b      	ldrb	r3, [r7, #1]
 800c370:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c374:	b2da      	uxtb	r2, r3
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	4610      	mov	r0, r2
 800c37a:	4a19      	ldr	r2, [pc, #100]	@ (800c3e0 <VCU_ProcessVcuModuleCommand+0x10c>)
 800c37c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800c380:	fb01 f303 	mul.w	r3, r1, r3
 800c384:	4413      	add	r3, r2
 800c386:	3328      	adds	r3, #40	@ 0x28
 800c388:	4602      	mov	r2, r0
 800c38a:	701a      	strb	r2, [r3, #0]
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800c38c:	4b11      	ldr	r3, [pc, #68]	@ (800c3d4 <VCU_ProcessVcuModuleCommand+0x100>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f003 0310 	and.w	r3, r3, #16
 800c394:	2b00      	cmp	r3, #0
 800c396:	d010      	beq.n	800c3ba <VCU_ProcessVcuModuleCommand+0xe6>
 800c398:	4b12      	ldr	r3, [pc, #72]	@ (800c3e4 <VCU_ProcessVcuModuleCommand+0x110>)
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	787b      	ldrb	r3, [r7, #1]
 800c3a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	490e      	ldr	r1, [pc, #56]	@ (800c3e8 <VCU_ProcessVcuModuleCommand+0x114>)
 800c3ae:	480b      	ldr	r0, [pc, #44]	@ (800c3dc <VCU_ProcessVcuModuleCommand+0x108>)
 800c3b0:	f008 faa8 	bl	8014904 <siprintf>
 800c3b4:	4809      	ldr	r0, [pc, #36]	@ (800c3dc <VCU_ProcessVcuModuleCommand+0x108>)
 800c3b6:	f7f9 f941 	bl	800563c <serialOut>
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000d20 	.word	0x20000d20
 800c3c8:	2000a66c 	.word	0x2000a66c
 800c3cc:	200005d0 	.word	0x200005d0
 800c3d0:	2000a734 	.word	0x2000a734
 800c3d4:	2000000c 	.word	0x2000000c
 800c3d8:	08019a54 	.word	0x08019a54
 800c3dc:	20000b5c 	.word	0x20000b5c
 800c3e0:	20000dec 	.word	0x20000dec
 800c3e4:	2000a6d8 	.word	0x2000a6d8
 800c3e8:	08019a94 	.word	0x08019a94

0800c3ec <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c3f2:	4b1e      	ldr	r3, [pc, #120]	@ (800c46c <VCU_ProcessVcuKeepAlive+0x80>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c470 <VCU_ProcessVcuKeepAlive+0x84>)
 800c3f8:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c474 <VCU_ProcessVcuKeepAlive+0x88>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	4a1b      	ldr	r2, [pc, #108]	@ (800c470 <VCU_ProcessVcuKeepAlive+0x84>)
 800c402:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800c404:	463b      	mov	r3, r7
 800c406:	2208      	movs	r2, #8
 800c408:	2100      	movs	r1, #0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f008 fae1 	bl	80149d2 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800c410:	4a19      	ldr	r2, [pc, #100]	@ (800c478 <VCU_ProcessVcuKeepAlive+0x8c>)
 800c412:	463b      	mov	r3, r7
 800c414:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c418:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800c41c:	783b      	ldrb	r3, [r7, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d008      	beq.n	800c434 <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800c422:	4b13      	ldr	r3, [pc, #76]	@ (800c470 <VCU_ProcessVcuKeepAlive+0x84>)
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800c42a:	783a      	ldrb	r2, [r7, #0]
 800c42c:	4b10      	ldr	r3, [pc, #64]	@ (800c470 <VCU_ProcessVcuKeepAlive+0x84>)
 800c42e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800c432:	e003      	b.n	800c43c <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800c434:	4b0e      	ldr	r3, [pc, #56]	@ (800c470 <VCU_ProcessVcuKeepAlive+0x84>)
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c43c:	4b0f      	ldr	r3, [pc, #60]	@ (800c47c <VCU_ProcessVcuKeepAlive+0x90>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00c      	beq.n	800c462 <VCU_ProcessVcuKeepAlive+0x76>
 800c448:	4b0d      	ldr	r3, [pc, #52]	@ (800c480 <VCU_ProcessVcuKeepAlive+0x94>)
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c450:	b29b      	uxth	r3, r3
 800c452:	461a      	mov	r2, r3
 800c454:	490b      	ldr	r1, [pc, #44]	@ (800c484 <VCU_ProcessVcuKeepAlive+0x98>)
 800c456:	480c      	ldr	r0, [pc, #48]	@ (800c488 <VCU_ProcessVcuKeepAlive+0x9c>)
 800c458:	f008 fa54 	bl	8014904 <siprintf>
 800c45c:	480a      	ldr	r0, [pc, #40]	@ (800c488 <VCU_ProcessVcuKeepAlive+0x9c>)
 800c45e:	f7f9 f8ed 	bl	800563c <serialOut>
}
 800c462:	bf00      	nop
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20000d20 	.word	0x20000d20
 800c470:	2000a66c 	.word	0x2000a66c
 800c474:	200005d0 	.word	0x200005d0
 800c478:	2000a734 	.word	0x2000a734
 800c47c:	2000000c 	.word	0x2000000c
 800c480:	2000a6d8 	.word	0x2000a6d8
 800c484:	08019ac4 	.word	0x08019ac4
 800c488:	20000b5c 	.word	0x20000b5c

0800c48c <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c492:	4b1c      	ldr	r3, [pc, #112]	@ (800c504 <VCU_ProcessVcuTime+0x78>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <VCU_ProcessVcuTime+0x2c>
 800c49e:	4b1a      	ldr	r3, [pc, #104]	@ (800c508 <VCU_ProcessVcuTime+0x7c>)
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4918      	ldr	r1, [pc, #96]	@ (800c50c <VCU_ProcessVcuTime+0x80>)
 800c4ac:	4818      	ldr	r0, [pc, #96]	@ (800c510 <VCU_ProcessVcuTime+0x84>)
 800c4ae:	f008 fa29 	bl	8014904 <siprintf>
 800c4b2:	4817      	ldr	r0, [pc, #92]	@ (800c510 <VCU_ProcessVcuTime+0x84>)
 800c4b4:	f7f9 f8c2 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c4b8:	4b16      	ldr	r3, [pc, #88]	@ (800c514 <VCU_ProcessVcuTime+0x88>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a16      	ldr	r2, [pc, #88]	@ (800c518 <VCU_ProcessVcuTime+0x8c>)
 800c4be:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c4c0:	4b16      	ldr	r3, [pc, #88]	@ (800c51c <VCU_ProcessVcuTime+0x90>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c6:	4a14      	ldr	r2, [pc, #80]	@ (800c518 <VCU_ProcessVcuTime+0x8c>)
 800c4c8:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800c4ca:	463b      	mov	r3, r7
 800c4cc:	2208      	movs	r2, #8
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f008 fa7e 	bl	80149d2 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800c4d6:	463b      	mov	r3, r7
 800c4d8:	2208      	movs	r2, #8
 800c4da:	4911      	ldr	r1, [pc, #68]	@ (800c520 <VCU_ProcessVcuTime+0x94>)
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f009 f984 	bl	80157ea <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800c4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800c4ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4ee:	f7f9 f913 	bl	8005718 <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800c4f2:	4b09      	ldr	r3, [pc, #36]	@ (800c518 <VCU_ProcessVcuTime+0x8c>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 800c4fa:	bf00      	nop
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	2000000c 	.word	0x2000000c
 800c508:	2000a6d8 	.word	0x2000a6d8
 800c50c:	08019ae4 	.word	0x08019ae4
 800c510:	20000b5c 	.word	0x20000b5c
 800c514:	20000d20 	.word	0x20000d20
 800c518:	2000a66c 	.word	0x2000a66c
 800c51c:	200005d0 	.word	0x200005d0
 800c520:	2000a734 	.word	0x2000a734

0800c524 <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c52e:	4b50      	ldr	r3, [pc, #320]	@ (800c670 <VCU_ProcessReadEeprom+0x14c>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 0310 	and.w	r3, r3, #16
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00c      	beq.n	800c554 <VCU_ProcessReadEeprom+0x30>
 800c53a:	4b4e      	ldr	r3, [pc, #312]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c542:	b29b      	uxth	r3, r3
 800c544:	461a      	mov	r2, r3
 800c546:	494c      	ldr	r1, [pc, #304]	@ (800c678 <VCU_ProcessReadEeprom+0x154>)
 800c548:	484c      	ldr	r0, [pc, #304]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c54a:	f008 f9db 	bl	8014904 <siprintf>
 800c54e:	484b      	ldr	r0, [pc, #300]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c550:	f7f9 f874 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c554:	4b4a      	ldr	r3, [pc, #296]	@ (800c680 <VCU_ProcessReadEeprom+0x15c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a4a      	ldr	r2, [pc, #296]	@ (800c684 <VCU_ProcessReadEeprom+0x160>)
 800c55a:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c55c:	4b4a      	ldr	r3, [pc, #296]	@ (800c688 <VCU_ProcessReadEeprom+0x164>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c562:	4a48      	ldr	r2, [pc, #288]	@ (800c684 <VCU_ProcessReadEeprom+0x160>)
 800c564:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800c566:	f107 030c 	add.w	r3, r7, #12
 800c56a:	2208      	movs	r2, #8
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f008 fa2f 	bl	80149d2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800c574:	4a45      	ldr	r2, [pc, #276]	@ (800c68c <VCU_ProcessReadEeprom+0x168>)
 800c576:	f107 030c 	add.w	r3, r7, #12
 800c57a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c57e:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800c582:	7b3b      	ldrb	r3, [r7, #12]
 800c584:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800c586:	463a      	mov	r2, r7
 800c588:	8afb      	ldrh	r3, [r7, #22]
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f8 f81b 	bl	80045c8 <EE_ReadVariable32bits>
 800c592:	4603      	mov	r3, r0
 800c594:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800c596:	8abb      	ldrh	r3, [r7, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d156      	bne.n	800c64a <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800c5a2:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800c5a8:	8afb      	ldrh	r3, [r7, #22]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c5ae:	4b31      	ldr	r3, [pc, #196]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c5b4:	4b2f      	ldr	r3, [pc, #188]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c5ba:	4b2e      	ldr	r3, [pc, #184]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800c5c0:	4b33      	ldr	r3, [pc, #204]	@ (800c690 <VCU_ProcessReadEeprom+0x16c>)
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	1d3b      	adds	r3, r7, #4
 800c5c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c5ca:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c5ce:	4b2d      	ldr	r3, [pc, #180]	@ (800c684 <VCU_ProcessReadEeprom+0x160>)
 800c5d0:	895b      	ldrh	r3, [r3, #10]
 800c5d2:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5dc:	b299      	uxth	r1, r3
 800c5de:	4a25      	ldr	r2, [pc, #148]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5e0:	8813      	ldrh	r3, [r2, #0]
 800c5e2:	f361 030a 	bfi	r3, r1, #0, #11
 800c5e6:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c5e8:	4a22      	ldr	r2, [pc, #136]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5ea:	6813      	ldr	r3, [r2, #0]
 800c5ec:	f36f 23dc 	bfc	r3, #11, #18
 800c5f0:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c5f2:	4a20      	ldr	r2, [pc, #128]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5f4:	7913      	ldrb	r3, [r2, #4]
 800c5f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5fa:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c5fe:	7913      	ldrb	r3, [r2, #4]
 800c600:	2108      	movs	r1, #8
 800c602:	f361 0303 	bfi	r3, r1, #0, #4
 800c606:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c608:	4a1a      	ldr	r2, [pc, #104]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c60a:	7913      	ldrb	r3, [r2, #4]
 800c60c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c610:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c612:	4a18      	ldr	r2, [pc, #96]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c614:	7913      	ldrb	r3, [r2, #4]
 800c616:	f023 0310 	bic.w	r3, r3, #16
 800c61a:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c61c:	4b14      	ldr	r3, [pc, #80]	@ (800c670 <VCU_ProcessReadEeprom+0x14c>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 0310 	and.w	r3, r3, #16
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00c      	beq.n	800c642 <VCU_ProcessReadEeprom+0x11e>
 800c628:	4b12      	ldr	r3, [pc, #72]	@ (800c674 <VCU_ProcessReadEeprom+0x150>)
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c630:	b29b      	uxth	r3, r3
 800c632:	461a      	mov	r2, r3
 800c634:	4917      	ldr	r1, [pc, #92]	@ (800c694 <VCU_ProcessReadEeprom+0x170>)
 800c636:	4811      	ldr	r0, [pc, #68]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c638:	f008 f964 	bl	8014904 <siprintf>
 800c63c:	480f      	ldr	r0, [pc, #60]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c63e:	f7f8 fffd 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c642:	2000      	movs	r0, #0
 800c644:	f7ff fd02 	bl	800c04c <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800c648:	e00e      	b.n	800c668 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800c64a:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <VCU_ProcessReadEeprom+0x14c>)
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d008      	beq.n	800c668 <VCU_ProcessReadEeprom+0x144>
 800c656:	8abb      	ldrh	r3, [r7, #20]
 800c658:	461a      	mov	r2, r3
 800c65a:	490f      	ldr	r1, [pc, #60]	@ (800c698 <VCU_ProcessReadEeprom+0x174>)
 800c65c:	4807      	ldr	r0, [pc, #28]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c65e:	f008 f951 	bl	8014904 <siprintf>
 800c662:	4806      	ldr	r0, [pc, #24]	@ (800c67c <VCU_ProcessReadEeprom+0x158>)
 800c664:	f7f8 ffea 	bl	800563c <serialOut>
}
 800c668:	bf00      	nop
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	2000000c 	.word	0x2000000c
 800c674:	2000a6d8 	.word	0x2000a6d8
 800c678:	08019afc 	.word	0x08019afc
 800c67c:	20000b5c 	.word	0x20000b5c
 800c680:	20000d20 	.word	0x20000d20
 800c684:	2000a66c 	.word	0x2000a66c
 800c688:	200005d0 	.word	0x200005d0
 800c68c:	2000a734 	.word	0x2000a734
 800c690:	2000a6e4 	.word	0x2000a6e4
 800c694:	08019b1c 	.word	0x08019b1c
 800c698:	08019b3c 	.word	0x08019b3c

0800c69c <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c6a6:	4b52      	ldr	r3, [pc, #328]	@ (800c7f0 <VCU_ProcessWriteEeprom+0x154>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	f003 0310 	and.w	r3, r3, #16
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00c      	beq.n	800c6cc <VCU_ProcessWriteEeprom+0x30>
 800c6b2:	4b50      	ldr	r3, [pc, #320]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	461a      	mov	r2, r3
 800c6be:	494e      	ldr	r1, [pc, #312]	@ (800c7f8 <VCU_ProcessWriteEeprom+0x15c>)
 800c6c0:	484e      	ldr	r0, [pc, #312]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c6c2:	f008 f91f 	bl	8014904 <siprintf>
 800c6c6:	484d      	ldr	r0, [pc, #308]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c6c8:	f7f8 ffb8 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c6cc:	4b4c      	ldr	r3, [pc, #304]	@ (800c800 <VCU_ProcessWriteEeprom+0x164>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a4c      	ldr	r2, [pc, #304]	@ (800c804 <VCU_ProcessWriteEeprom+0x168>)
 800c6d2:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c6d4:	4b4c      	ldr	r3, [pc, #304]	@ (800c808 <VCU_ProcessWriteEeprom+0x16c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6da:	4a4a      	ldr	r2, [pc, #296]	@ (800c804 <VCU_ProcessWriteEeprom+0x168>)
 800c6dc:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800c6de:	f107 0308 	add.w	r3, r7, #8
 800c6e2:	2208      	movs	r2, #8
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f008 f973 	bl	80149d2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800c6ec:	4a47      	ldr	r2, [pc, #284]	@ (800c80c <VCU_ProcessWriteEeprom+0x170>)
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6f6:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800c6fa:	7a3b      	ldrb	r3, [r7, #8]
 800c6fc:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800c702:	8a7b      	ldrh	r3, [r7, #18]
 800c704:	6979      	ldr	r1, [r7, #20]
 800c706:	4618      	mov	r0, r3
 800c708:	f7f9 f8fe 	bl	8005908 <StoreEEPROM>
 800c70c:	4603      	mov	r3, r0
 800c70e:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800c710:	8a3b      	ldrh	r3, [r7, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d156      	bne.n	800c7c4 <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800c71c:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800c722:	8a7b      	ldrh	r3, [r7, #18]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c728:	4b32      	ldr	r3, [pc, #200]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c72e:	4b31      	ldr	r3, [pc, #196]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c730:	2200      	movs	r2, #0
 800c732:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c734:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c736:	2200      	movs	r2, #0
 800c738:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800c73a:	4b35      	ldr	r3, [pc, #212]	@ (800c810 <VCU_ProcessWriteEeprom+0x174>)
 800c73c:	461a      	mov	r2, r3
 800c73e:	463b      	mov	r3, r7
 800c740:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c744:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c748:	4b2e      	ldr	r3, [pc, #184]	@ (800c804 <VCU_ProcessWriteEeprom+0x168>)
 800c74a:	895b      	ldrh	r3, [r3, #10]
 800c74c:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800c750:	b29b      	uxth	r3, r3
 800c752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c756:	b299      	uxth	r1, r3
 800c758:	4a26      	ldr	r2, [pc, #152]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c75a:	8813      	ldrh	r3, [r2, #0]
 800c75c:	f361 030a 	bfi	r3, r1, #0, #11
 800c760:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c762:	4a24      	ldr	r2, [pc, #144]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c764:	6813      	ldr	r3, [r2, #0]
 800c766:	f36f 23dc 	bfc	r3, #11, #18
 800c76a:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c76c:	4a21      	ldr	r2, [pc, #132]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c76e:	7913      	ldrb	r3, [r2, #4]
 800c770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c774:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c776:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c778:	7913      	ldrb	r3, [r2, #4]
 800c77a:	2108      	movs	r1, #8
 800c77c:	f361 0303 	bfi	r3, r1, #0, #4
 800c780:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c782:	4a1c      	ldr	r2, [pc, #112]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c784:	7913      	ldrb	r3, [r2, #4]
 800c786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c78a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c78c:	4a19      	ldr	r2, [pc, #100]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c78e:	7913      	ldrb	r3, [r2, #4]
 800c790:	f023 0310 	bic.w	r3, r3, #16
 800c794:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c796:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <VCU_ProcessWriteEeprom+0x154>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	f003 0310 	and.w	r3, r3, #16
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00c      	beq.n	800c7bc <VCU_ProcessWriteEeprom+0x120>
 800c7a2:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <VCU_ProcessWriteEeprom+0x158>)
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4919      	ldr	r1, [pc, #100]	@ (800c814 <VCU_ProcessWriteEeprom+0x178>)
 800c7b0:	4812      	ldr	r0, [pc, #72]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c7b2:	f008 f8a7 	bl	8014904 <siprintf>
 800c7b6:	4811      	ldr	r0, [pc, #68]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c7b8:	f7f8 ff40 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7ff fc45 	bl	800c04c <VCU_TransmitMessageQueue>
 800c7c2:	e00e      	b.n	800c7e2 <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c7f0 <VCU_ProcessWriteEeprom+0x154>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d008      	beq.n	800c7e2 <VCU_ProcessWriteEeprom+0x146>
 800c7d0:	8a3b      	ldrh	r3, [r7, #16]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	4910      	ldr	r1, [pc, #64]	@ (800c818 <VCU_ProcessWriteEeprom+0x17c>)
 800c7d6:	4809      	ldr	r0, [pc, #36]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c7d8:	f008 f894 	bl	8014904 <siprintf>
 800c7dc:	4807      	ldr	r0, [pc, #28]	@ (800c7fc <VCU_ProcessWriteEeprom+0x160>)
 800c7de:	f7f8 ff2d 	bl	800563c <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800c7e2:	f7fa fc0b 	bl	8006ffc <PCU_Initialize>
}
 800c7e6:	bf00      	nop
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	2000000c 	.word	0x2000000c
 800c7f4:	2000a6d8 	.word	0x2000a6d8
 800c7f8:	08019b60 	.word	0x08019b60
 800c7fc:	20000b5c 	.word	0x20000b5c
 800c800:	20000d20 	.word	0x20000d20
 800c804:	2000a66c 	.word	0x2000a66c
 800c808:	200005d0 	.word	0x200005d0
 800c80c:	2000a734 	.word	0x2000a734
 800c810:	2000a6e4 	.word	0x2000a6e4
 800c814:	08019b1c 	.word	0x08019b1c
 800c818:	08019b80 	.word	0x08019b80

0800c81c <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0

}
 800c820:	bf00      	nop
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
	...

0800c82c <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800c832:	4b16      	ldr	r3, [pc, #88]	@ (800c88c <VCU_TicksSinceLastMessage+0x60>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c838:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800c83a:	4b15      	ldr	r3, [pc, #84]	@ (800c890 <VCU_TicksSinceLastMessage+0x64>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800c840:	4b14      	ldr	r3, [pc, #80]	@ (800c894 <VCU_TicksSinceLastMessage+0x68>)
 800c842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d105      	bne.n	800c856 <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800c84a:	4b12      	ldr	r3, [pc, #72]	@ (800c894 <VCU_TicksSinceLastMessage+0x68>)
 800c84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	e013      	b.n	800c87e <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800c856:	4b0d      	ldr	r3, [pc, #52]	@ (800c88c <VCU_TicksSinceLastMessage+0x60>)
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	4b0e      	ldr	r3, [pc, #56]	@ (800c894 <VCU_TicksSinceLastMessage+0x68>)
 800c85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c85e:	1ad2      	subs	r2, r2, r3
 800c860:	4b0a      	ldr	r3, [pc, #40]	@ (800c88c <VCU_TicksSinceLastMessage+0x60>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	3301      	adds	r3, #1
 800c866:	490b      	ldr	r1, [pc, #44]	@ (800c894 <VCU_TicksSinceLastMessage+0x68>)
 800c868:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	1a41      	subs	r1, r0, r1
 800c86e:	3901      	subs	r1, #1
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	441a      	add	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	4413      	add	r3, r2
 800c87a:	3301      	adds	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	200005d0 	.word	0x200005d0
 800c890:	20000d20 	.word	0x20000d20
 800c894:	2000a66c 	.word	0x2000a66c

0800c898 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800c89e:	f04f 0300 	mov.w	r3, #0
 800c8a2:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800c8a4:	f04f 0300 	mov.w	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800c8aa:	4b67      	ldr	r3, [pc, #412]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c8ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7f3 fe1f 	bl	80004f4 <__aeabi_i2d>
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	4b64      	ldr	r3, [pc, #400]	@ (800ca4c <VCU_TransmitBmsState+0x1b4>)
 800c8bc:	f7f3 fe84 	bl	80005c8 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f04f 0200 	mov.w	r2, #0
 800c8cc:	f04f 0300 	mov.w	r3, #0
 800c8d0:	f7f3 fcc4 	bl	800025c <__adddf3>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f7f4 f96c 	bl	8000bb8 <__aeabi_d2f>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800c8e4:	6978      	ldr	r0, [r7, #20]
 800c8e6:	f7f3 fe17 	bl	8000518 <__aeabi_f2d>
 800c8ea:	a355      	add	r3, pc, #340	@ (adr r3, 800ca40 <VCU_TransmitBmsState+0x1a8>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 ff94 	bl	800081c <__aeabi_ddiv>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	f7f4 f95c 	bl	8000bb8 <__aeabi_d2f>
 800c900:	4603      	mov	r3, r0
 800c902:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800c904:	edd7 7a04 	vldr	s15, [r7, #16]
 800c908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c90c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c910:	793b      	ldrb	r3, [r7, #4]
 800c912:	b2da      	uxtb	r2, r3
 800c914:	893b      	ldrh	r3, [r7, #8]
 800c916:	f362 0389 	bfi	r3, r2, #2, #8
 800c91a:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800c91c:	4b4a      	ldr	r3, [pc, #296]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c91e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	b2da      	uxtb	r2, r3
 800c928:	7a3b      	ldrb	r3, [r7, #8]
 800c92a:	f362 0301 	bfi	r3, r2, #0, #2
 800c92e:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800c930:	4b45      	ldr	r3, [pc, #276]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c932:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c936:	f003 0303 	and.w	r3, r3, #3
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	7a7b      	ldrb	r3, [r7, #9]
 800c93e:	f362 0383 	bfi	r3, r2, #2, #2
 800c942:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800c944:	4b40      	ldr	r3, [pc, #256]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c946:	7d9b      	ldrb	r3, [r3, #22]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	7a7b      	ldrb	r3, [r7, #9]
 800c950:	f362 1304 	bfi	r3, r2, #4, #1
 800c954:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800c956:	4b3c      	ldr	r3, [pc, #240]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c958:	7d5b      	ldrb	r3, [r3, #21]
 800c95a:	f003 0301 	and.w	r3, r3, #1
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	7a7b      	ldrb	r3, [r7, #9]
 800c962:	f362 1345 	bfi	r3, r2, #5, #1
 800c966:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800c968:	4b37      	ldr	r3, [pc, #220]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c96a:	7ddb      	ldrb	r3, [r3, #23]
 800c96c:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800c96e:	4b36      	ldr	r3, [pc, #216]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c970:	7e1b      	ldrb	r3, [r3, #24]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d004      	beq.n	800c980 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800c976:	7a7b      	ldrb	r3, [r7, #9]
 800c978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c97c:	727b      	strb	r3, [r7, #9]
 800c97e:	e003      	b.n	800c988 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800c980:	7a7b      	ldrb	r3, [r7, #9]
 800c982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c986:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800c988:	4b2f      	ldr	r3, [pc, #188]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800c98e:	7a7b      	ldrb	r3, [r7, #9]
 800c990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c994:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c99a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c9a0:	4b2b      	ldr	r3, [pc, #172]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800c9ac:	4b29      	ldr	r3, [pc, #164]	@ (800ca54 <VCU_TransmitBmsState+0x1bc>)
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f107 0308 	add.w	r3, r7, #8
 800c9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9b8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c9bc:	4b22      	ldr	r3, [pc, #136]	@ (800ca48 <VCU_TransmitBmsState+0x1b0>)
 800c9be:	895b      	ldrh	r3, [r3, #10]
 800c9c0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9ca:	b299      	uxth	r1, r3
 800c9cc:	4a20      	ldr	r2, [pc, #128]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9ce:	8813      	ldrh	r3, [r2, #0]
 800c9d0:	f361 030a 	bfi	r3, r1, #0, #11
 800c9d4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c9d6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9d8:	6813      	ldr	r3, [r2, #0]
 800c9da:	f36f 23dc 	bfc	r3, #11, #18
 800c9de:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c9e0:	4a1b      	ldr	r2, [pc, #108]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9e2:	7913      	ldrb	r3, [r2, #4]
 800c9e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9e8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c9ea:	4a19      	ldr	r2, [pc, #100]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9ec:	7913      	ldrb	r3, [r2, #4]
 800c9ee:	2108      	movs	r1, #8
 800c9f0:	f361 0303 	bfi	r3, r1, #0, #4
 800c9f4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c9f6:	4a16      	ldr	r2, [pc, #88]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800c9f8:	7913      	ldrb	r3, [r2, #4]
 800c9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9fe:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ca00:	4a13      	ldr	r2, [pc, #76]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800ca02:	7913      	ldrb	r3, [r2, #4]
 800ca04:	f023 0310 	bic.w	r3, r3, #16
 800ca08:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ca0a:	4b13      	ldr	r3, [pc, #76]	@ (800ca58 <VCU_TransmitBmsState+0x1c0>)
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	f003 0310 	and.w	r3, r3, #16
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00c      	beq.n	800ca30 <VCU_TransmitBmsState+0x198>
 800ca16:	4b0e      	ldr	r3, [pc, #56]	@ (800ca50 <VCU_TransmitBmsState+0x1b8>)
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	490e      	ldr	r1, [pc, #56]	@ (800ca5c <VCU_TransmitBmsState+0x1c4>)
 800ca24:	480e      	ldr	r0, [pc, #56]	@ (800ca60 <VCU_TransmitBmsState+0x1c8>)
 800ca26:	f007 ff6d 	bl	8014904 <siprintf>
 800ca2a:	480d      	ldr	r0, [pc, #52]	@ (800ca60 <VCU_TransmitBmsState+0x1c8>)
 800ca2c:	f7f8 fe06 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7ff fb0b 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800ca36:	bf00      	nop
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	9999999a 	.word	0x9999999a
 800ca44:	3fd99999 	.word	0x3fd99999
 800ca48:	2000a66c 	.word	0x2000a66c
 800ca4c:	3fe00000 	.word	0x3fe00000
 800ca50:	2000a6d8 	.word	0x2000a6d8
 800ca54:	2000a6e4 	.word	0x2000a6e4
 800ca58:	2000000c 	.word	0x2000000c
 800ca5c:	08019ba4 	.word	0x08019ba4
 800ca60:	20000b5c 	.word	0x20000b5c
 800ca64:	00000000 	.word	0x00000000

0800ca68 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800ca7a:	4b65      	ldr	r3, [pc, #404]	@ (800cc10 <VCU_TransmitBmsData1+0x1a8>)
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f3 fd28 	bl	80004d4 <__aeabi_ui2d>
 800ca84:	a35e      	add	r3, pc, #376	@ (adr r3, 800cc00 <VCU_TransmitBmsData1+0x198>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fd9d 	bl	80005c8 <__aeabi_dmul>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	4610      	mov	r0, r2
 800ca94:	4619      	mov	r1, r3
 800ca96:	f04f 0200 	mov.w	r2, #0
 800ca9a:	4b5e      	ldr	r3, [pc, #376]	@ (800cc14 <VCU_TransmitBmsData1+0x1ac>)
 800ca9c:	f7f3 fbdc 	bl	8000258 <__aeabi_dsub>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4610      	mov	r0, r2
 800caa6:	4619      	mov	r1, r3
 800caa8:	f7f4 f886 	bl	8000bb8 <__aeabi_d2f>
 800caac:	4603      	mov	r3, r0
 800caae:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f7f3 fd31 	bl	8000518 <__aeabi_f2d>
 800cab6:	a352      	add	r3, pc, #328	@ (adr r3, 800cc00 <VCU_TransmitBmsData1+0x198>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 feae 	bl	800081c <__aeabi_ddiv>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4610      	mov	r0, r2
 800cac6:	4619      	mov	r1, r3
 800cac8:	f04f 0200 	mov.w	r2, #0
 800cacc:	4b52      	ldr	r3, [pc, #328]	@ (800cc18 <VCU_TransmitBmsData1+0x1b0>)
 800cace:	f7f3 fbc5 	bl	800025c <__adddf3>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4610      	mov	r0, r2
 800cad8:	4619      	mov	r1, r3
 800cada:	f7f4 f86d 	bl	8000bb8 <__aeabi_d2f>
 800cade:	4603      	mov	r3, r0
 800cae0:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800cae2:	edd7 7a02 	vldr	s15, [r7, #8]
 800cae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caea:	ee17 3a90 	vmov	r3, s15
 800caee:	b29b      	uxth	r3, r3
 800caf0:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800caf2:	4b47      	ldr	r3, [pc, #284]	@ (800cc10 <VCU_TransmitBmsData1+0x1a8>)
 800caf4:	899b      	ldrh	r3, [r3, #12]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f3 fcfc 	bl	80004f4 <__aeabi_i2d>
 800cafc:	a342      	add	r3, pc, #264	@ (adr r3, 800cc08 <VCU_TransmitBmsData1+0x1a0>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f7f3 fd61 	bl	80005c8 <__aeabi_dmul>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	f04f 0200 	mov.w	r2, #0
 800cb12:	f04f 0300 	mov.w	r3, #0
 800cb16:	f7f3 fba1 	bl	800025c <__adddf3>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4610      	mov	r0, r2
 800cb20:	4619      	mov	r1, r3
 800cb22:	f7f4 f849 	bl	8000bb8 <__aeabi_d2f>
 800cb26:	4603      	mov	r3, r0
 800cb28:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7f3 fcf4 	bl	8000518 <__aeabi_f2d>
 800cb30:	a333      	add	r3, pc, #204	@ (adr r3, 800cc00 <VCU_TransmitBmsData1+0x198>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fe71 	bl	800081c <__aeabi_ddiv>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4619      	mov	r1, r3
 800cb42:	f7f4 f839 	bl	8000bb8 <__aeabi_d2f>
 800cb46:	4603      	mov	r3, r0
 800cb48:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800cb4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb52:	ee17 3a90 	vmov	r3, s15
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cb5e:	4b2f      	ldr	r3, [pc, #188]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800cb64:	4b2d      	ldr	r3, [pc, #180]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800cb6a:	4b2c      	ldr	r3, [pc, #176]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800cb70:	4b2b      	ldr	r3, [pc, #172]	@ (800cc20 <VCU_TransmitBmsData1+0x1b8>)
 800cb72:	461a      	mov	r2, r3
 800cb74:	463b      	mov	r3, r7
 800cb76:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb7a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cb7e:	4b24      	ldr	r3, [pc, #144]	@ (800cc10 <VCU_TransmitBmsData1+0x1a8>)
 800cb80:	895b      	ldrh	r3, [r3, #10]
 800cb82:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb8c:	b299      	uxth	r1, r3
 800cb8e:	4a23      	ldr	r2, [pc, #140]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cb90:	8813      	ldrh	r3, [r2, #0]
 800cb92:	f361 030a 	bfi	r3, r1, #0, #11
 800cb96:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cb98:	4a20      	ldr	r2, [pc, #128]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cb9a:	6813      	ldr	r3, [r2, #0]
 800cb9c:	f36f 23dc 	bfc	r3, #11, #18
 800cba0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cba2:	4a1e      	ldr	r2, [pc, #120]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cba4:	7913      	ldrb	r3, [r2, #4]
 800cba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbaa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cbac:	4a1b      	ldr	r2, [pc, #108]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cbae:	7913      	ldrb	r3, [r2, #4]
 800cbb0:	2108      	movs	r1, #8
 800cbb2:	f361 0303 	bfi	r3, r1, #0, #4
 800cbb6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cbb8:	4a18      	ldr	r2, [pc, #96]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cbba:	7913      	ldrb	r3, [r2, #4]
 800cbbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbc0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cbc2:	4a16      	ldr	r2, [pc, #88]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cbc4:	7913      	ldrb	r3, [r2, #4]
 800cbc6:	f023 0310 	bic.w	r3, r3, #16
 800cbca:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cbcc:	4b15      	ldr	r3, [pc, #84]	@ (800cc24 <VCU_TransmitBmsData1+0x1bc>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f003 0310 	and.w	r3, r3, #16
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00c      	beq.n	800cbf2 <VCU_TransmitBmsData1+0x18a>
 800cbd8:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <VCU_TransmitBmsData1+0x1b4>)
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	4910      	ldr	r1, [pc, #64]	@ (800cc28 <VCU_TransmitBmsData1+0x1c0>)
 800cbe6:	4811      	ldr	r0, [pc, #68]	@ (800cc2c <VCU_TransmitBmsData1+0x1c4>)
 800cbe8:	f007 fe8c 	bl	8014904 <siprintf>
 800cbec:	480f      	ldr	r0, [pc, #60]	@ (800cc2c <VCU_TransmitBmsData1+0x1c4>)
 800cbee:	f7f8 fd25 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	f7ff fa2a 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800cbf8:	bf00      	nop
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	9999999a 	.word	0x9999999a
 800cc04:	3fa99999 	.word	0x3fa99999
 800cc08:	eb851eb8 	.word	0xeb851eb8
 800cc0c:	3f8eb851 	.word	0x3f8eb851
 800cc10:	2000a66c 	.word	0x2000a66c
 800cc14:	40990000 	.word	0x40990000
 800cc18:	40df4000 	.word	0x40df4000
 800cc1c:	2000a6d8 	.word	0x2000a6d8
 800cc20:	2000a6e4 	.word	0x2000a6e4
 800cc24:	2000000c 	.word	0x2000000c
 800cc28:	08019bbc 	.word	0x08019bbc
 800cc2c:	20000b5c 	.word	0x20000b5c

0800cc30 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800cc36:	f04f 0300 	mov.w	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800cc3c:	f04f 0300 	mov.w	r3, #0
 800cc40:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800cc42:	4b95      	ldr	r3, [pc, #596]	@ (800ce98 <VCU_TransmitBmsData2+0x268>)
 800cc44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f3 fc53 	bl	80004f4 <__aeabi_i2d>
 800cc4e:	f04f 0200 	mov.w	r2, #0
 800cc52:	4b92      	ldr	r3, [pc, #584]	@ (800ce9c <VCU_TransmitBmsData2+0x26c>)
 800cc54:	f7f3 fcb8 	bl	80005c8 <__aeabi_dmul>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f04f 0200 	mov.w	r2, #0
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	f7f3 faf8 	bl	800025c <__adddf3>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4610      	mov	r0, r2
 800cc72:	4619      	mov	r1, r3
 800cc74:	f7f3 ffa0 	bl	8000bb8 <__aeabi_d2f>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f7f3 fc4b 	bl	8000518 <__aeabi_f2d>
 800cc82:	a381      	add	r3, pc, #516	@ (adr r3, 800ce88 <VCU_TransmitBmsData2+0x258>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f7f3 fdc8 	bl	800081c <__aeabi_ddiv>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4610      	mov	r0, r2
 800cc92:	4619      	mov	r1, r3
 800cc94:	f7f3 ff90 	bl	8000bb8 <__aeabi_d2f>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800cc9c:	edd7 7a02 	vldr	s15, [r7, #8]
 800cca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca4:	ee17 3a90 	vmov	r3, s15
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800ccac:	4b7a      	ldr	r3, [pc, #488]	@ (800ce98 <VCU_TransmitBmsData2+0x268>)
 800ccae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7f3 fc1f 	bl	80004f4 <__aeabi_i2d>
 800ccb6:	a376      	add	r3, pc, #472	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fc84 	bl	80005c8 <__aeabi_dmul>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	f04f 0200 	mov.w	r2, #0
 800cccc:	f04f 0300 	mov.w	r3, #0
 800ccd0:	f7f3 fac4 	bl	800025c <__adddf3>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4619      	mov	r1, r3
 800ccdc:	f7f3 ff6c 	bl	8000bb8 <__aeabi_d2f>
 800cce0:	4603      	mov	r3, r0
 800cce2:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7f3 fc17 	bl	8000518 <__aeabi_f2d>
 800ccea:	a369      	add	r3, pc, #420	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 fd94 	bl	800081c <__aeabi_ddiv>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f7f3 ff5c 	bl	8000bb8 <__aeabi_d2f>
 800cd00:	4603      	mov	r3, r0
 800cd02:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800cd04:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd0c:	ee17 3a90 	vmov	r3, s15
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800cd14:	4b60      	ldr	r3, [pc, #384]	@ (800ce98 <VCU_TransmitBmsData2+0x268>)
 800cd16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f3 fbeb 	bl	80004f4 <__aeabi_i2d>
 800cd1e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f7f3 fc50 	bl	80005c8 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f04f 0200 	mov.w	r2, #0
 800cd34:	f04f 0300 	mov.w	r3, #0
 800cd38:	f7f3 fa90 	bl	800025c <__adddf3>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4610      	mov	r0, r2
 800cd42:	4619      	mov	r1, r3
 800cd44:	f7f3 ff38 	bl	8000bb8 <__aeabi_d2f>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f7f3 fbe3 	bl	8000518 <__aeabi_f2d>
 800cd52:	a34f      	add	r3, pc, #316	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fd60 	bl	800081c <__aeabi_ddiv>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	4610      	mov	r0, r2
 800cd62:	4619      	mov	r1, r3
 800cd64:	f7f3 ff28 	bl	8000bb8 <__aeabi_d2f>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800cd6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd74:	ee17 3a90 	vmov	r3, s15
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800cd7c:	4b46      	ldr	r3, [pc, #280]	@ (800ce98 <VCU_TransmitBmsData2+0x268>)
 800cd7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7f3 fbb7 	bl	80004f4 <__aeabi_i2d>
 800cd86:	a342      	add	r3, pc, #264	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f7f3 fc1c 	bl	80005c8 <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4610      	mov	r0, r2
 800cd96:	4619      	mov	r1, r3
 800cd98:	f04f 0200 	mov.w	r2, #0
 800cd9c:	f04f 0300 	mov.w	r3, #0
 800cda0:	f7f3 fa5c 	bl	800025c <__adddf3>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4610      	mov	r0, r2
 800cdaa:	4619      	mov	r1, r3
 800cdac:	f7f3 ff04 	bl	8000bb8 <__aeabi_d2f>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7f3 fbaf 	bl	8000518 <__aeabi_f2d>
 800cdba:	a335      	add	r3, pc, #212	@ (adr r3, 800ce90 <VCU_TransmitBmsData2+0x260>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fd2c 	bl	800081c <__aeabi_ddiv>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f7f3 fef4 	bl	8000bb8 <__aeabi_d2f>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800cdd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cddc:	ee17 3a90 	vmov	r3, s15
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cde4:	4b2e      	ldr	r3, [pc, #184]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800cdea:	4b2d      	ldr	r3, [pc, #180]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800cdf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800cdf6:	4b2b      	ldr	r3, [pc, #172]	@ (800cea4 <VCU_TransmitBmsData2+0x274>)
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce00:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ce04:	4b24      	ldr	r3, [pc, #144]	@ (800ce98 <VCU_TransmitBmsData2+0x268>)
 800ce06:	895b      	ldrh	r3, [r3, #10]
 800ce08:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce12:	b299      	uxth	r1, r3
 800ce14:	4a22      	ldr	r2, [pc, #136]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce16:	8813      	ldrh	r3, [r2, #0]
 800ce18:	f361 030a 	bfi	r3, r1, #0, #11
 800ce1c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ce1e:	4a20      	ldr	r2, [pc, #128]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce20:	6813      	ldr	r3, [r2, #0]
 800ce22:	f36f 23dc 	bfc	r3, #11, #18
 800ce26:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ce28:	4a1d      	ldr	r2, [pc, #116]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce2a:	7913      	ldrb	r3, [r2, #4]
 800ce2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce30:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ce32:	4a1b      	ldr	r2, [pc, #108]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce34:	7913      	ldrb	r3, [r2, #4]
 800ce36:	2108      	movs	r1, #8
 800ce38:	f361 0303 	bfi	r3, r1, #0, #4
 800ce3c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ce3e:	4a18      	ldr	r2, [pc, #96]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce40:	7913      	ldrb	r3, [r2, #4]
 800ce42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce46:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ce48:	4a15      	ldr	r2, [pc, #84]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce4a:	7913      	ldrb	r3, [r2, #4]
 800ce4c:	f023 0310 	bic.w	r3, r3, #16
 800ce50:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce52:	4b15      	ldr	r3, [pc, #84]	@ (800cea8 <VCU_TransmitBmsData2+0x278>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f003 0310 	and.w	r3, r3, #16
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <VCU_TransmitBmsData2+0x248>
 800ce5e:	4b10      	ldr	r3, [pc, #64]	@ (800cea0 <VCU_TransmitBmsData2+0x270>)
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4910      	ldr	r1, [pc, #64]	@ (800ceac <VCU_TransmitBmsData2+0x27c>)
 800ce6c:	4810      	ldr	r0, [pc, #64]	@ (800ceb0 <VCU_TransmitBmsData2+0x280>)
 800ce6e:	f007 fd49 	bl	8014904 <siprintf>
 800ce72:	480f      	ldr	r0, [pc, #60]	@ (800ceb0 <VCU_TransmitBmsData2+0x280>)
 800ce74:	f7f8 fbe2 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ce78:	2000      	movs	r0, #0
 800ce7a:	f7ff f8e7 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800ce7e:	bf00      	nop
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	9999999a 	.word	0x9999999a
 800ce8c:	3f599999 	.word	0x3f599999
 800ce90:	d2f1a9fc 	.word	0xd2f1a9fc
 800ce94:	3f50624d 	.word	0x3f50624d
 800ce98:	2000a66c 	.word	0x2000a66c
 800ce9c:	3fe00000 	.word	0x3fe00000
 800cea0:	2000a6d8 	.word	0x2000a6d8
 800cea4:	2000a6e4 	.word	0x2000a6e4
 800cea8:	2000000c 	.word	0x2000000c
 800ceac:	08019bd8 	.word	0x08019bd8
 800ceb0:	20000b5c 	.word	0x20000b5c
 800ceb4:	00000000 	.word	0x00000000

0800ceb8 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800cebe:	f04f 0300 	mov.w	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800cec4:	f04f 0300 	mov.w	r3, #0
 800cec8:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800ceca:	4b89      	ldr	r3, [pc, #548]	@ (800d0f0 <VCU_TransmitBmsData3+0x238>)
 800cecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f3 fb10 	bl	80004f4 <__aeabi_i2d>
 800ced4:	a380      	add	r3, pc, #512	@ (adr r3, 800d0d8 <VCU_TransmitBmsData3+0x220>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	f7f3 fb75 	bl	80005c8 <__aeabi_dmul>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4610      	mov	r0, r2
 800cee4:	4619      	mov	r1, r3
 800cee6:	a37e      	add	r3, pc, #504	@ (adr r3, 800d0e0 <VCU_TransmitBmsData3+0x228>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	f7f3 f9b4 	bl	8000258 <__aeabi_dsub>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4610      	mov	r0, r2
 800cef6:	4619      	mov	r1, r3
 800cef8:	f7f3 fe5e 	bl	8000bb8 <__aeabi_d2f>
 800cefc:	4603      	mov	r3, r0
 800cefe:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7f3 fb09 	bl	8000518 <__aeabi_f2d>
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	4b7a      	ldr	r3, [pc, #488]	@ (800d0f4 <VCU_TransmitBmsData3+0x23c>)
 800cf0c:	f7f3 fc86 	bl	800081c <__aeabi_ddiv>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	a373      	add	r3, pc, #460	@ (adr r3, 800d0e8 <VCU_TransmitBmsData3+0x230>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 f99d 	bl	800025c <__adddf3>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f7f3 fe45 	bl	8000bb8 <__aeabi_d2f>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800cf32:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf3a:	ee17 3a90 	vmov	r3, s15
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800cf42:	4b6b      	ldr	r3, [pc, #428]	@ (800d0f0 <VCU_TransmitBmsData3+0x238>)
 800cf44:	8bdb      	ldrh	r3, [r3, #30]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f3 fad4 	bl	80004f4 <__aeabi_i2d>
 800cf4c:	a362      	add	r3, pc, #392	@ (adr r3, 800d0d8 <VCU_TransmitBmsData3+0x220>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f7f3 fb39 	bl	80005c8 <__aeabi_dmul>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	a360      	add	r3, pc, #384	@ (adr r3, 800d0e0 <VCU_TransmitBmsData3+0x228>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	f7f3 f978 	bl	8000258 <__aeabi_dsub>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4619      	mov	r1, r3
 800cf70:	f7f3 fe22 	bl	8000bb8 <__aeabi_d2f>
 800cf74:	4603      	mov	r3, r0
 800cf76:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f7f3 facd 	bl	8000518 <__aeabi_f2d>
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	4b5c      	ldr	r3, [pc, #368]	@ (800d0f4 <VCU_TransmitBmsData3+0x23c>)
 800cf84:	f7f3 fc4a 	bl	800081c <__aeabi_ddiv>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	a355      	add	r3, pc, #340	@ (adr r3, 800d0e8 <VCU_TransmitBmsData3+0x230>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	f7f3 f961 	bl	800025c <__adddf3>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f7f3 fe09 	bl	8000bb8 <__aeabi_d2f>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800cfaa:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb2:	ee17 3a90 	vmov	r3, s15
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800cfba:	4b4d      	ldr	r3, [pc, #308]	@ (800d0f0 <VCU_TransmitBmsData3+0x238>)
 800cfbc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 fa98 	bl	80004f4 <__aeabi_i2d>
 800cfc4:	a344      	add	r3, pc, #272	@ (adr r3, 800d0d8 <VCU_TransmitBmsData3+0x220>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f7f3 fafd 	bl	80005c8 <__aeabi_dmul>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	a342      	add	r3, pc, #264	@ (adr r3, 800d0e0 <VCU_TransmitBmsData3+0x228>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 f93c 	bl	8000258 <__aeabi_dsub>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f7f3 fde6 	bl	8000bb8 <__aeabi_d2f>
 800cfec:	4603      	mov	r3, r0
 800cfee:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7f3 fa91 	bl	8000518 <__aeabi_f2d>
 800cff6:	f04f 0200 	mov.w	r2, #0
 800cffa:	4b3e      	ldr	r3, [pc, #248]	@ (800d0f4 <VCU_TransmitBmsData3+0x23c>)
 800cffc:	f7f3 fc0e 	bl	800081c <__aeabi_ddiv>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4610      	mov	r0, r2
 800d006:	4619      	mov	r1, r3
 800d008:	a337      	add	r3, pc, #220	@ (adr r3, 800d0e8 <VCU_TransmitBmsData3+0x230>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	f7f3 f925 	bl	800025c <__adddf3>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	4610      	mov	r0, r2
 800d018:	4619      	mov	r1, r3
 800d01a:	f7f3 fdcd 	bl	8000bb8 <__aeabi_d2f>
 800d01e:	4603      	mov	r3, r0
 800d020:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800d022:	edd7 7a02 	vldr	s15, [r7, #8]
 800d026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d02a:	ee17 3a90 	vmov	r3, s15
 800d02e:	b29b      	uxth	r3, r3
 800d030:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d036:	4b30      	ldr	r3, [pc, #192]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d038:	2200      	movs	r2, #0
 800d03a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d03c:	4b2e      	ldr	r3, [pc, #184]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d03e:	2200      	movs	r2, #0
 800d040:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d042:	4b2d      	ldr	r3, [pc, #180]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d044:	2200      	movs	r2, #0
 800d046:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800d048:	4b2c      	ldr	r3, [pc, #176]	@ (800d0fc <VCU_TransmitBmsData3+0x244>)
 800d04a:	461a      	mov	r2, r3
 800d04c:	463b      	mov	r3, r7
 800d04e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d052:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d056:	4b26      	ldr	r3, [pc, #152]	@ (800d0f0 <VCU_TransmitBmsData3+0x238>)
 800d058:	895b      	ldrh	r3, [r3, #10]
 800d05a:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 800d05e:	b29b      	uxth	r3, r3
 800d060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d064:	b299      	uxth	r1, r3
 800d066:	4a24      	ldr	r2, [pc, #144]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d068:	8813      	ldrh	r3, [r2, #0]
 800d06a:	f361 030a 	bfi	r3, r1, #0, #11
 800d06e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800d070:	4a21      	ldr	r2, [pc, #132]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d072:	6813      	ldr	r3, [r2, #0]
 800d074:	f36f 23dc 	bfc	r3, #11, #18
 800d078:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d07a:	4a1f      	ldr	r2, [pc, #124]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d07c:	7913      	ldrb	r3, [r2, #4]
 800d07e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d082:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d084:	4a1c      	ldr	r2, [pc, #112]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d086:	7913      	ldrb	r3, [r2, #4]
 800d088:	2108      	movs	r1, #8
 800d08a:	f361 0303 	bfi	r3, r1, #0, #4
 800d08e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d090:	4a19      	ldr	r2, [pc, #100]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d092:	7913      	ldrb	r3, [r2, #4]
 800d094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d098:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d09a:	4a17      	ldr	r2, [pc, #92]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d09c:	7913      	ldrb	r3, [r2, #4]
 800d09e:	f023 0310 	bic.w	r3, r3, #16
 800d0a2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d0a4:	4b16      	ldr	r3, [pc, #88]	@ (800d100 <VCU_TransmitBmsData3+0x248>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	f003 0310 	and.w	r3, r3, #16
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00c      	beq.n	800d0ca <VCU_TransmitBmsData3+0x212>
 800d0b0:	4b11      	ldr	r3, [pc, #68]	@ (800d0f8 <VCU_TransmitBmsData3+0x240>)
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4911      	ldr	r1, [pc, #68]	@ (800d104 <VCU_TransmitBmsData3+0x24c>)
 800d0be:	4812      	ldr	r0, [pc, #72]	@ (800d108 <VCU_TransmitBmsData3+0x250>)
 800d0c0:	f007 fc20 	bl	8014904 <siprintf>
 800d0c4:	4810      	ldr	r0, [pc, #64]	@ (800d108 <VCU_TransmitBmsData3+0x250>)
 800d0c6:	f7f8 fab9 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	f7fe ffbe 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800d0d0:	bf00      	nop
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	47ae147b 	.word	0x47ae147b
 800d0dc:	3f847ae1 	.word	0x3f847ae1
 800d0e0:	cccccccd 	.word	0xcccccccd
 800d0e4:	404baccc 	.word	0x404baccc
 800d0e8:	00000000 	.word	0x00000000
 800d0ec:	40c11000 	.word	0x40c11000
 800d0f0:	2000a66c 	.word	0x2000a66c
 800d0f4:	3fa00000 	.word	0x3fa00000
 800d0f8:	2000a6d8 	.word	0x2000a6d8
 800d0fc:	2000a6e4 	.word	0x2000a6e4
 800d100:	2000000c 	.word	0x2000000c
 800d104:	08019bf4 	.word	0x08019bf4
 800d108:	20000b5c 	.word	0x20000b5c
 800d10c:	00000000 	.word	0x00000000

0800d110 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800d116:	f04f 0300 	mov.w	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d11c:	f04f 0300 	mov.w	r3, #0
 800d120:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800d122:	4b83      	ldr	r3, [pc, #524]	@ (800d330 <VCU_TransmitBmsData5+0x220>)
 800d124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d126:	4618      	mov	r0, r3
 800d128:	f7f3 f9d4 	bl	80004d4 <__aeabi_ui2d>
 800d12c:	a37c      	add	r3, pc, #496	@ (adr r3, 800d320 <VCU_TransmitBmsData5+0x210>)
 800d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d132:	f7f3 fa49 	bl	80005c8 <__aeabi_dmul>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4610      	mov	r0, r2
 800d13c:	4619      	mov	r1, r3
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	4b7c      	ldr	r3, [pc, #496]	@ (800d334 <VCU_TransmitBmsData5+0x224>)
 800d144:	f7f3 f888 	bl	8000258 <__aeabi_dsub>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4610      	mov	r0, r2
 800d14e:	4619      	mov	r1, r3
 800d150:	f7f3 fd32 	bl	8000bb8 <__aeabi_d2f>
 800d154:	4603      	mov	r3, r0
 800d156:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7f3 f9dd 	bl	8000518 <__aeabi_f2d>
 800d15e:	a370      	add	r3, pc, #448	@ (adr r3, 800d320 <VCU_TransmitBmsData5+0x210>)
 800d160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d164:	f7f3 fb5a 	bl	800081c <__aeabi_ddiv>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4610      	mov	r0, r2
 800d16e:	4619      	mov	r1, r3
 800d170:	f04f 0200 	mov.w	r2, #0
 800d174:	4b70      	ldr	r3, [pc, #448]	@ (800d338 <VCU_TransmitBmsData5+0x228>)
 800d176:	f7f3 f871 	bl	800025c <__adddf3>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	4610      	mov	r0, r2
 800d180:	4619      	mov	r1, r3
 800d182:	f7f3 fd19 	bl	8000bb8 <__aeabi_d2f>
 800d186:	4603      	mov	r3, r0
 800d188:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800d18a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d192:	ee17 3a90 	vmov	r3, s15
 800d196:	b29b      	uxth	r3, r3
 800d198:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800d19a:	4b65      	ldr	r3, [pc, #404]	@ (800d330 <VCU_TransmitBmsData5+0x220>)
 800d19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f3 f998 	bl	80004d4 <__aeabi_ui2d>
 800d1a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800d320 <VCU_TransmitBmsData5+0x210>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 fa0d 	bl	80005c8 <__aeabi_dmul>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	f04f 0200 	mov.w	r2, #0
 800d1ba:	4b5e      	ldr	r3, [pc, #376]	@ (800d334 <VCU_TransmitBmsData5+0x224>)
 800d1bc:	f7f3 f84c 	bl	8000258 <__aeabi_dsub>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f7f3 fcf6 	bl	8000bb8 <__aeabi_d2f>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7f3 f9a1 	bl	8000518 <__aeabi_f2d>
 800d1d6:	a352      	add	r3, pc, #328	@ (adr r3, 800d320 <VCU_TransmitBmsData5+0x210>)
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 fb1e 	bl	800081c <__aeabi_ddiv>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	f04f 0200 	mov.w	r2, #0
 800d1ec:	4b52      	ldr	r3, [pc, #328]	@ (800d338 <VCU_TransmitBmsData5+0x228>)
 800d1ee:	f7f3 f835 	bl	800025c <__adddf3>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f7f3 fcdd 	bl	8000bb8 <__aeabi_d2f>
 800d1fe:	4603      	mov	r3, r0
 800d200:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800d202:	edd7 7a02 	vldr	s15, [r7, #8]
 800d206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20a:	ee17 3a90 	vmov	r3, s15
 800d20e:	b29b      	uxth	r3, r3
 800d210:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800d212:	4b47      	ldr	r3, [pc, #284]	@ (800d330 <VCU_TransmitBmsData5+0x220>)
 800d214:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800d216:	4618      	mov	r0, r3
 800d218:	f7f3 f96c 	bl	80004f4 <__aeabi_i2d>
 800d21c:	a342      	add	r3, pc, #264	@ (adr r3, 800d328 <VCU_TransmitBmsData5+0x218>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f9d1 	bl	80005c8 <__aeabi_dmul>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	4610      	mov	r0, r2
 800d22c:	4619      	mov	r1, r3
 800d22e:	f04f 0200 	mov.w	r2, #0
 800d232:	f04f 0300 	mov.w	r3, #0
 800d236:	f7f3 f811 	bl	800025c <__adddf3>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4610      	mov	r0, r2
 800d240:	4619      	mov	r1, r3
 800d242:	f7f3 fcb9 	bl	8000bb8 <__aeabi_d2f>
 800d246:	4603      	mov	r3, r0
 800d248:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7f3 f964 	bl	8000518 <__aeabi_f2d>
 800d250:	a333      	add	r3, pc, #204	@ (adr r3, 800d320 <VCU_TransmitBmsData5+0x210>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f3 fae1 	bl	800081c <__aeabi_ddiv>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4610      	mov	r0, r2
 800d260:	4619      	mov	r1, r3
 800d262:	f7f3 fca9 	bl	8000bb8 <__aeabi_d2f>
 800d266:	4603      	mov	r3, r0
 800d268:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800d26a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d272:	ee17 3a90 	vmov	r3, s15
 800d276:	b29b      	uxth	r3, r3
 800d278:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d27e:	4b2f      	ldr	r3, [pc, #188]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d284:	4b2d      	ldr	r3, [pc, #180]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d286:	2200      	movs	r2, #0
 800d288:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d28a:	4b2c      	ldr	r3, [pc, #176]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800d290:	4b2b      	ldr	r3, [pc, #172]	@ (800d340 <VCU_TransmitBmsData5+0x230>)
 800d292:	461a      	mov	r2, r3
 800d294:	463b      	mov	r3, r7
 800d296:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d29a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d29e:	4b24      	ldr	r3, [pc, #144]	@ (800d330 <VCU_TransmitBmsData5+0x220>)
 800d2a0:	895b      	ldrh	r3, [r3, #10]
 800d2a2:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2ac:	b299      	uxth	r1, r3
 800d2ae:	4a23      	ldr	r2, [pc, #140]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2b0:	8813      	ldrh	r3, [r2, #0]
 800d2b2:	f361 030a 	bfi	r3, r1, #0, #11
 800d2b6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d2b8:	4a20      	ldr	r2, [pc, #128]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2ba:	6813      	ldr	r3, [r2, #0]
 800d2bc:	f36f 23dc 	bfc	r3, #11, #18
 800d2c0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d2c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2c4:	7913      	ldrb	r3, [r2, #4]
 800d2c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2ca:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d2cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2ce:	7913      	ldrb	r3, [r2, #4]
 800d2d0:	2108      	movs	r1, #8
 800d2d2:	f361 0303 	bfi	r3, r1, #0, #4
 800d2d6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d2d8:	4a18      	ldr	r2, [pc, #96]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2da:	7913      	ldrb	r3, [r2, #4]
 800d2dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2e0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d2e2:	4a16      	ldr	r2, [pc, #88]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2e4:	7913      	ldrb	r3, [r2, #4]
 800d2e6:	f023 0310 	bic.w	r3, r3, #16
 800d2ea:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d2ec:	4b15      	ldr	r3, [pc, #84]	@ (800d344 <VCU_TransmitBmsData5+0x234>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	f003 0310 	and.w	r3, r3, #16
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00c      	beq.n	800d312 <VCU_TransmitBmsData5+0x202>
 800d2f8:	4b10      	ldr	r3, [pc, #64]	@ (800d33c <VCU_TransmitBmsData5+0x22c>)
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d300:	b29b      	uxth	r3, r3
 800d302:	461a      	mov	r2, r3
 800d304:	4910      	ldr	r1, [pc, #64]	@ (800d348 <VCU_TransmitBmsData5+0x238>)
 800d306:	4811      	ldr	r0, [pc, #68]	@ (800d34c <VCU_TransmitBmsData5+0x23c>)
 800d308:	f007 fafc 	bl	8014904 <siprintf>
 800d30c:	480f      	ldr	r0, [pc, #60]	@ (800d34c <VCU_TransmitBmsData5+0x23c>)
 800d30e:	f7f8 f995 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d312:	2000      	movs	r0, #0
 800d314:	f7fe fe9a 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800d318:	bf00      	nop
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	9999999a 	.word	0x9999999a
 800d324:	3fa99999 	.word	0x3fa99999
 800d328:	eb851eb8 	.word	0xeb851eb8
 800d32c:	3f8eb851 	.word	0x3f8eb851
 800d330:	2000a66c 	.word	0x2000a66c
 800d334:	40990000 	.word	0x40990000
 800d338:	40df4000 	.word	0x40df4000
 800d33c:	2000a6d8 	.word	0x2000a6d8
 800d340:	2000a6e4 	.word	0x2000a6e4
 800d344:	2000000c 	.word	0x2000000c
 800d348:	08019c10 	.word	0x08019c10
 800d34c:	20000b5c 	.word	0x20000b5c

0800d350 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800d35a:	2300      	movs	r3, #0
 800d35c:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800d35e:	4b2d      	ldr	r3, [pc, #180]	@ (800d414 <VCU_TransmitBmsData8+0xc4>)
 800d360:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800d364:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800d366:	2300      	movs	r3, #0
 800d368:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800d36a:	4b2a      	ldr	r3, [pc, #168]	@ (800d414 <VCU_TransmitBmsData8+0xc4>)
 800d36c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d370:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d372:	4b29      	ldr	r3, [pc, #164]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d374:	2200      	movs	r2, #0
 800d376:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d378:	4b27      	ldr	r3, [pc, #156]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d37e:	4b26      	ldr	r3, [pc, #152]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d380:	2200      	movs	r2, #0
 800d382:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800d384:	4b25      	ldr	r3, [pc, #148]	@ (800d41c <VCU_TransmitBmsData8+0xcc>)
 800d386:	461a      	mov	r2, r3
 800d388:	463b      	mov	r3, r7
 800d38a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d38e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d392:	4b20      	ldr	r3, [pc, #128]	@ (800d414 <VCU_TransmitBmsData8+0xc4>)
 800d394:	895b      	ldrh	r3, [r3, #10]
 800d396:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3a0:	b299      	uxth	r1, r3
 800d3a2:	4a1d      	ldr	r2, [pc, #116]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3a4:	8813      	ldrh	r3, [r2, #0]
 800d3a6:	f361 030a 	bfi	r3, r1, #0, #11
 800d3aa:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d3ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	f36f 23dc 	bfc	r3, #11, #18
 800d3b4:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d3b6:	4a18      	ldr	r2, [pc, #96]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3b8:	7913      	ldrb	r3, [r2, #4]
 800d3ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3be:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d3c0:	4a15      	ldr	r2, [pc, #84]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3c2:	7913      	ldrb	r3, [r2, #4]
 800d3c4:	2108      	movs	r1, #8
 800d3c6:	f361 0303 	bfi	r3, r1, #0, #4
 800d3ca:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d3cc:	4a12      	ldr	r2, [pc, #72]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3ce:	7913      	ldrb	r3, [r2, #4]
 800d3d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3d4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d3d6:	4a10      	ldr	r2, [pc, #64]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3d8:	7913      	ldrb	r3, [r2, #4]
 800d3da:	f023 0310 	bic.w	r3, r3, #16
 800d3de:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d3e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d420 <VCU_TransmitBmsData8+0xd0>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	f003 0310 	and.w	r3, r3, #16
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00c      	beq.n	800d406 <VCU_TransmitBmsData8+0xb6>
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d418 <VCU_TransmitBmsData8+0xc8>)
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	490a      	ldr	r1, [pc, #40]	@ (800d424 <VCU_TransmitBmsData8+0xd4>)
 800d3fa:	480b      	ldr	r0, [pc, #44]	@ (800d428 <VCU_TransmitBmsData8+0xd8>)
 800d3fc:	f007 fa82 	bl	8014904 <siprintf>
 800d400:	4809      	ldr	r0, [pc, #36]	@ (800d428 <VCU_TransmitBmsData8+0xd8>)
 800d402:	f7f8 f91b 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d406:	2000      	movs	r0, #0
 800d408:	f7fe fe20 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	2000a66c 	.word	0x2000a66c
 800d418:	2000a6d8 	.word	0x2000a6d8
 800d41c:	2000a6e4 	.word	0x2000a6e4
 800d420:	2000000c 	.word	0x2000000c
 800d424:	08019c2c 	.word	0x08019c2c
 800d428:	20000b5c 	.word	0x20000b5c

0800d42c <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800d436:	2300      	movs	r3, #0
 800d438:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800d43a:	4b2d      	ldr	r3, [pc, #180]	@ (800d4f0 <VCU_TransmitBmsData9+0xc4>)
 800d43c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d440:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800d442:	2300      	movs	r3, #0
 800d444:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800d446:	4b2a      	ldr	r3, [pc, #168]	@ (800d4f0 <VCU_TransmitBmsData9+0xc4>)
 800d448:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d44c:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d44e:	4b29      	ldr	r3, [pc, #164]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d454:	4b27      	ldr	r3, [pc, #156]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d456:	2200      	movs	r2, #0
 800d458:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d45a:	4b26      	ldr	r3, [pc, #152]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800d460:	4b25      	ldr	r3, [pc, #148]	@ (800d4f8 <VCU_TransmitBmsData9+0xcc>)
 800d462:	461a      	mov	r2, r3
 800d464:	463b      	mov	r3, r7
 800d466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d46a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d46e:	4b20      	ldr	r3, [pc, #128]	@ (800d4f0 <VCU_TransmitBmsData9+0xc4>)
 800d470:	895b      	ldrh	r3, [r3, #10]
 800d472:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 800d476:	b29b      	uxth	r3, r3
 800d478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d47c:	b299      	uxth	r1, r3
 800d47e:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d480:	8813      	ldrh	r3, [r2, #0]
 800d482:	f361 030a 	bfi	r3, r1, #0, #11
 800d486:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d488:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d48a:	6813      	ldr	r3, [r2, #0]
 800d48c:	f36f 23dc 	bfc	r3, #11, #18
 800d490:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d492:	4a18      	ldr	r2, [pc, #96]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d494:	7913      	ldrb	r3, [r2, #4]
 800d496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d49a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d49c:	4a15      	ldr	r2, [pc, #84]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d49e:	7913      	ldrb	r3, [r2, #4]
 800d4a0:	2108      	movs	r1, #8
 800d4a2:	f361 0303 	bfi	r3, r1, #0, #4
 800d4a6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d4a8:	4a12      	ldr	r2, [pc, #72]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d4aa:	7913      	ldrb	r3, [r2, #4]
 800d4ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4b0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d4b2:	4a10      	ldr	r2, [pc, #64]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d4b4:	7913      	ldrb	r3, [r2, #4]
 800d4b6:	f023 0310 	bic.w	r3, r3, #16
 800d4ba:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d4bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d4fc <VCU_TransmitBmsData9+0xd0>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00c      	beq.n	800d4e2 <VCU_TransmitBmsData9+0xb6>
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4f4 <VCU_TransmitBmsData9+0xc8>)
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	490a      	ldr	r1, [pc, #40]	@ (800d500 <VCU_TransmitBmsData9+0xd4>)
 800d4d6:	480b      	ldr	r0, [pc, #44]	@ (800d504 <VCU_TransmitBmsData9+0xd8>)
 800d4d8:	f007 fa14 	bl	8014904 <siprintf>
 800d4dc:	4809      	ldr	r0, [pc, #36]	@ (800d504 <VCU_TransmitBmsData9+0xd8>)
 800d4de:	f7f8 f8ad 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	f7fe fdb2 	bl	800c04c <VCU_TransmitMessageQueue>

}
 800d4e8:	bf00      	nop
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	2000a66c 	.word	0x2000a66c
 800d4f4:	2000a6d8 	.word	0x2000a6d8
 800d4f8:	2000a6e4 	.word	0x2000a6e4
 800d4fc:	2000000c 	.word	0x2000000c
 800d500:	08019c48 	.word	0x08019c48
 800d504:	20000b5c 	.word	0x20000b5c

0800d508 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800d516:	2300      	movs	r3, #0
 800d518:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d51a:	4b28      	ldr	r3, [pc, #160]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d520:	4b26      	ldr	r3, [pc, #152]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d522:	2200      	movs	r2, #0
 800d524:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d526:	4b25      	ldr	r3, [pc, #148]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d528:	2200      	movs	r2, #0
 800d52a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800d52c:	4b24      	ldr	r3, [pc, #144]	@ (800d5c0 <VCU_TransmitBmsData10+0xb8>)
 800d52e:	461a      	mov	r2, r3
 800d530:	463b      	mov	r3, r7
 800d532:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d536:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d53a:	4b22      	ldr	r3, [pc, #136]	@ (800d5c4 <VCU_TransmitBmsData10+0xbc>)
 800d53c:	895b      	ldrh	r3, [r3, #10]
 800d53e:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 800d542:	b29b      	uxth	r3, r3
 800d544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d548:	b299      	uxth	r1, r3
 800d54a:	4a1c      	ldr	r2, [pc, #112]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d54c:	8813      	ldrh	r3, [r2, #0]
 800d54e:	f361 030a 	bfi	r3, r1, #0, #11
 800d552:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d554:	4a19      	ldr	r2, [pc, #100]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d556:	6813      	ldr	r3, [r2, #0]
 800d558:	f36f 23dc 	bfc	r3, #11, #18
 800d55c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d55e:	4a17      	ldr	r2, [pc, #92]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d560:	7913      	ldrb	r3, [r2, #4]
 800d562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d566:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d568:	4a14      	ldr	r2, [pc, #80]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d56a:	7913      	ldrb	r3, [r2, #4]
 800d56c:	2108      	movs	r1, #8
 800d56e:	f361 0303 	bfi	r3, r1, #0, #4
 800d572:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d574:	4a11      	ldr	r2, [pc, #68]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d576:	7913      	ldrb	r3, [r2, #4]
 800d578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d57c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d57e:	4a0f      	ldr	r2, [pc, #60]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d580:	7913      	ldrb	r3, [r2, #4]
 800d582:	f023 0310 	bic.w	r3, r3, #16
 800d586:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d588:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c8 <VCU_TransmitBmsData10+0xc0>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	f003 0310 	and.w	r3, r3, #16
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00c      	beq.n	800d5ae <VCU_TransmitBmsData10+0xa6>
 800d594:	4b09      	ldr	r3, [pc, #36]	@ (800d5bc <VCU_TransmitBmsData10+0xb4>)
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	461a      	mov	r2, r3
 800d5a0:	490a      	ldr	r1, [pc, #40]	@ (800d5cc <VCU_TransmitBmsData10+0xc4>)
 800d5a2:	480b      	ldr	r0, [pc, #44]	@ (800d5d0 <VCU_TransmitBmsData10+0xc8>)
 800d5a4:	f007 f9ae 	bl	8014904 <siprintf>
 800d5a8:	4809      	ldr	r0, [pc, #36]	@ (800d5d0 <VCU_TransmitBmsData10+0xc8>)
 800d5aa:	f7f8 f847 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	f7fe fd4c 	bl	800c04c <VCU_TransmitMessageQueue>

}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	2000a6d8 	.word	0x2000a6d8
 800d5c0:	2000a6e4 	.word	0x2000a6e4
 800d5c4:	2000a66c 	.word	0x2000a66c
 800d5c8:	2000000c 	.word	0x2000000c
 800d5cc:	08019c64 	.word	0x08019c64
 800d5d0:	20000b5c 	.word	0x20000b5c

0800d5d4 <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d5da:	4b8f      	ldr	r3, [pc, #572]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d5dc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd fd67 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d5ea:	4b8b      	ldr	r3, [pc, #556]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d5ec:	7d1b      	ldrb	r3, [r3, #20]
 800d5ee:	7bfa      	ldrb	r2, [r7, #15]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d112      	bne.n	800d61a <VCU_TransmitModuleState+0x46>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800d5f4:	4b89      	ldr	r3, [pc, #548]	@ (800d81c <VCU_TransmitModuleState+0x248>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	f003 0311 	and.w	r3, r3, #17
 800d5fc:	2b11      	cmp	r3, #17
 800d5fe:	f040 8107 	bne.w	800d810 <VCU_TransmitModuleState+0x23c>
 800d602:	4b85      	ldr	r3, [pc, #532]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d604:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d608:	461a      	mov	r2, r3
 800d60a:	4985      	ldr	r1, [pc, #532]	@ (800d820 <VCU_TransmitModuleState+0x24c>)
 800d60c:	4885      	ldr	r0, [pc, #532]	@ (800d824 <VCU_TransmitModuleState+0x250>)
 800d60e:	f007 f979 	bl	8014904 <siprintf>
 800d612:	4884      	ldr	r0, [pc, #528]	@ (800d824 <VCU_TransmitModuleState+0x250>)
 800d614:	f7f8 f812 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800d618:	e0fa      	b.n	800d810 <VCU_TransmitModuleState+0x23c>
    moduleState.module_id                   = pack.dmcModuleId;
 800d61a:	4b7f      	ldr	r3, [pc, #508]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d61c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d620:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800d622:	7bfb      	ldrb	r3, [r7, #15]
 800d624:	4a80      	ldr	r2, [pc, #512]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d626:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d62a:	fb01 f303 	mul.w	r3, r1, r3
 800d62e:	4413      	add	r3, r2
 800d630:	332b      	adds	r3, #43	@ 0x2b
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	4a7b      	ldr	r2, [pc, #492]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d63a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d63e:	fb01 f303 	mul.w	r3, r1, r3
 800d642:	4413      	add	r3, r2
 800d644:	3327      	adds	r3, #39	@ 0x27
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 0303 	and.w	r3, r3, #3
 800d64c:	b2da      	uxtb	r2, r3
 800d64e:	797b      	ldrb	r3, [r7, #5]
 800d650:	f362 0301 	bfi	r3, r2, #0, #2
 800d654:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	4a73      	ldr	r2, [pc, #460]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d65a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d65e:	fb01 f303 	mul.w	r3, r1, r3
 800d662:	4413      	add	r3, r2
 800d664:	3326      	adds	r3, #38	@ 0x26
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	79bb      	ldrb	r3, [r7, #6]
 800d670:	f362 0383 	bfi	r3, r2, #2, #2
 800d674:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	4a6b      	ldr	r2, [pc, #428]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d67a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d67e:	fb01 f303 	mul.w	r3, r1, r3
 800d682:	4413      	add	r3, r2
 800d684:	332c      	adds	r3, #44	@ 0x2c
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f362 2391 	bfi	r3, r2, #10, #8
 800d68e:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	4a65      	ldr	r2, [pc, #404]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d694:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d698:	fb01 f303 	mul.w	r3, r1, r3
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d6a2:	789b      	ldrb	r3, [r3, #2]
 800d6a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	b25a      	sxtb	r2, r3
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
 800d6ae:	495e      	ldr	r1, [pc, #376]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d6b0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d6b4:	fb00 f303 	mul.w	r3, r0, r3
 800d6b8:	440b      	add	r3, r1
 800d6ba:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d6be:	789b      	ldrb	r3, [r3, #2]
 800d6c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	b25b      	sxtb	r3, r3
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	b25b      	sxtb	r3, r3
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	b25a      	sxtb	r2, r3
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	4955      	ldr	r1, [pc, #340]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d6d4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d6d8:	fb00 f303 	mul.w	r3, r0, r3
 800d6dc:	440b      	add	r3, r1
 800d6de:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d6e2:	789b      	ldrb	r3, [r3, #2]
 800d6e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	b25b      	sxtb	r3, r3
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	b25b      	sxtb	r3, r3
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b25a      	sxtb	r2, r3
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	494c      	ldr	r1, [pc, #304]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d6f8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d6fc:	fb00 f303 	mul.w	r3, r0, r3
 800d700:	440b      	add	r3, r1
 800d702:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d706:	789b      	ldrb	r3, [r3, #2]
 800d708:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	b25b      	sxtb	r3, r3
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	b25b      	sxtb	r3, r3
 800d714:	4313      	orrs	r3, r2
 800d716:	b25a      	sxtb	r2, r3
 800d718:	7bfb      	ldrb	r3, [r7, #15]
 800d71a:	4943      	ldr	r1, [pc, #268]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d71c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d720:	fb00 f303 	mul.w	r3, r0, r3
 800d724:	440b      	add	r3, r1
 800d726:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d72a:	789b      	ldrb	r3, [r3, #2]
 800d72c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d730:	b2db      	uxtb	r3, r3
 800d732:	b25b      	sxtb	r3, r3
 800d734:	011b      	lsls	r3, r3, #4
 800d736:	b25b      	sxtb	r3, r3
 800d738:	4313      	orrs	r3, r2
 800d73a:	b25b      	sxtb	r3, r3
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	88fb      	ldrh	r3, [r7, #6]
 800d740:	f362 138d 	bfi	r3, r2, #6, #8
 800d744:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800d746:	79bb      	ldrb	r3, [r7, #6]
 800d748:	f023 0320 	bic.w	r3, r3, #32
 800d74c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800d74e:	79bb      	ldrb	r3, [r7, #6]
 800d750:	f023 0310 	bic.w	r3, r3, #16
 800d754:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800d756:	4b30      	ldr	r3, [pc, #192]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d758:	7d1b      	ldrb	r3, [r3, #20]
 800d75a:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800d75c:	4b2e      	ldr	r3, [pc, #184]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d75e:	7ddb      	ldrb	r3, [r3, #23]
 800d760:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
 800d764:	4a30      	ldr	r2, [pc, #192]	@ (800d828 <VCU_TransmitModuleState+0x254>)
 800d766:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d76a:	fb01 f303 	mul.w	r3, r1, r3
 800d76e:	4413      	add	r3, r2
 800d770:	332d      	adds	r3, #45	@ 0x2d
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	72fb      	strb	r3, [r7, #11]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d776:	4b2d      	ldr	r3, [pc, #180]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d77c:	4b2b      	ldr	r3, [pc, #172]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d77e:	2200      	movs	r2, #0
 800d780:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d782:	4b2a      	ldr	r3, [pc, #168]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d784:	2200      	movs	r2, #0
 800d786:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800d788:	4b29      	ldr	r3, [pc, #164]	@ (800d830 <VCU_TransmitModuleState+0x25c>)
 800d78a:	461a      	mov	r2, r3
 800d78c:	1d3b      	adds	r3, r7, #4
 800d78e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d792:	e882 0003 	stmia.w	r2, {r0, r1}
    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d796:	4b20      	ldr	r3, [pc, #128]	@ (800d818 <VCU_TransmitModuleState+0x244>)
 800d798:	895b      	ldrh	r3, [r3, #10]
 800d79a:	f203 4311 	addw	r3, r3, #1041	@ 0x411
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7a4:	b299      	uxth	r1, r3
 800d7a6:	4a21      	ldr	r2, [pc, #132]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7a8:	8813      	ldrh	r3, [r2, #0]
 800d7aa:	f361 030a 	bfi	r3, r1, #0, #11
 800d7ae:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d7b0:	4a1e      	ldr	r2, [pc, #120]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7b2:	6813      	ldr	r3, [r2, #0]
 800d7b4:	f36f 23dc 	bfc	r3, #11, #18
 800d7b8:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7bc:	7913      	ldrb	r3, [r2, #4]
 800d7be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7c2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d7c4:	4a19      	ldr	r2, [pc, #100]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7c6:	7913      	ldrb	r3, [r2, #4]
 800d7c8:	2108      	movs	r1, #8
 800d7ca:	f361 0303 	bfi	r3, r1, #0, #4
 800d7ce:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d7d0:	4a16      	ldr	r2, [pc, #88]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7d2:	7913      	ldrb	r3, [r2, #4]
 800d7d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7d8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d7da:	4a14      	ldr	r2, [pc, #80]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7dc:	7913      	ldrb	r3, [r2, #4]
 800d7de:	f023 0310 	bic.w	r3, r3, #16
 800d7e2:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d7e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d81c <VCU_TransmitModuleState+0x248>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	f003 0310 	and.w	r3, r3, #16
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00c      	beq.n	800d80a <VCU_TransmitModuleState+0x236>
 800d7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d82c <VCU_TransmitModuleState+0x258>)
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	490d      	ldr	r1, [pc, #52]	@ (800d834 <VCU_TransmitModuleState+0x260>)
 800d7fe:	4809      	ldr	r0, [pc, #36]	@ (800d824 <VCU_TransmitModuleState+0x250>)
 800d800:	f007 f880 	bl	8014904 <siprintf>
 800d804:	4807      	ldr	r0, [pc, #28]	@ (800d824 <VCU_TransmitModuleState+0x250>)
 800d806:	f7f7 ff19 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d80a:	2000      	movs	r0, #0
 800d80c:	f7fe fc1e 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	2000a66c 	.word	0x2000a66c
 800d81c:	2000000c 	.word	0x2000000c
 800d820:	08019c80 	.word	0x08019c80
 800d824:	20000b5c 	.word	0x20000b5c
 800d828:	20000dec 	.word	0x20000dec
 800d82c:	2000a6d8 	.word	0x2000a6d8
 800d830:	2000a6e4 	.word	0x2000a6e4
 800d834:	08019cbc 	.word	0x08019cbc

0800d838 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d83e:	4b46      	ldr	r3, [pc, #280]	@ (800d958 <VCU_TransmitModulePower+0x120>)
 800d840:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d844:	4618      	mov	r0, r3
 800d846:	f7fd fc35 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d84e:	4b42      	ldr	r3, [pc, #264]	@ (800d958 <VCU_TransmitModulePower+0x120>)
 800d850:	7d1b      	ldrb	r3, [r3, #20]
 800d852:	7bfa      	ldrb	r2, [r7, #15]
 800d854:	429a      	cmp	r2, r3
 800d856:	d111      	bne.n	800d87c <VCU_TransmitModulePower+0x44>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800d858:	4b40      	ldr	r3, [pc, #256]	@ (800d95c <VCU_TransmitModulePower+0x124>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 0311 	and.w	r3, r3, #17
 800d860:	2b11      	cmp	r3, #17
 800d862:	d175      	bne.n	800d950 <VCU_TransmitModulePower+0x118>
 800d864:	4b3c      	ldr	r3, [pc, #240]	@ (800d958 <VCU_TransmitModulePower+0x120>)
 800d866:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d86a:	461a      	mov	r2, r3
 800d86c:	493c      	ldr	r1, [pc, #240]	@ (800d960 <VCU_TransmitModulePower+0x128>)
 800d86e:	483d      	ldr	r0, [pc, #244]	@ (800d964 <VCU_TransmitModulePower+0x12c>)
 800d870:	f007 f848 	bl	8014904 <siprintf>
 800d874:	483b      	ldr	r0, [pc, #236]	@ (800d964 <VCU_TransmitModulePower+0x12c>)
 800d876:	f7f7 fee1 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800d87a:	e069      	b.n	800d950 <VCU_TransmitModulePower+0x118>
    modulePower.module_id       = pack.dmcModuleId;
 800d87c:	4b36      	ldr	r3, [pc, #216]	@ (800d958 <VCU_TransmitModulePower+0x120>)
 800d87e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d882:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800d884:	7bfb      	ldrb	r3, [r7, #15]
 800d886:	4a38      	ldr	r2, [pc, #224]	@ (800d968 <VCU_TransmitModulePower+0x130>)
 800d888:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d88c:	fb01 f303 	mul.w	r3, r1, r3
 800d890:	4413      	add	r3, r2
 800d892:	3316      	adds	r3, #22
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	4a33      	ldr	r2, [pc, #204]	@ (800d968 <VCU_TransmitModulePower+0x130>)
 800d89c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d8a0:	fb01 f303 	mul.w	r3, r1, r3
 800d8a4:	4413      	add	r3, r2
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	813b      	strh	r3, [r7, #8]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	72bb      	strb	r3, [r7, #10]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d8b6:	4b2d      	ldr	r3, [pc, #180]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d8bc:	4b2b      	ldr	r3, [pc, #172]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d8c2:	4b2a      	ldr	r3, [pc, #168]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800d8c8:	4b29      	ldr	r3, [pc, #164]	@ (800d970 <VCU_TransmitModulePower+0x138>)
 800d8ca:	461c      	mov	r4, r3
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d8d6:	4b20      	ldr	r3, [pc, #128]	@ (800d958 <VCU_TransmitModulePower+0x120>)
 800d8d8:	895b      	ldrh	r3, [r3, #10]
 800d8da:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8e4:	b299      	uxth	r1, r3
 800d8e6:	4a21      	ldr	r2, [pc, #132]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8e8:	8813      	ldrh	r3, [r2, #0]
 800d8ea:	f361 030a 	bfi	r3, r1, #0, #11
 800d8ee:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d8f0:	4a1e      	ldr	r2, [pc, #120]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8f2:	6813      	ldr	r3, [r2, #0]
 800d8f4:	f36f 23dc 	bfc	r3, #11, #18
 800d8f8:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d8fa:	4a1c      	ldr	r2, [pc, #112]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d8fc:	7913      	ldrb	r3, [r2, #4]
 800d8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d902:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d904:	4a19      	ldr	r2, [pc, #100]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d906:	7913      	ldrb	r3, [r2, #4]
 800d908:	2108      	movs	r1, #8
 800d90a:	f361 0303 	bfi	r3, r1, #0, #4
 800d90e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d910:	4a16      	ldr	r2, [pc, #88]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d912:	7913      	ldrb	r3, [r2, #4]
 800d914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d918:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d91a:	4a14      	ldr	r2, [pc, #80]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d91c:	7913      	ldrb	r3, [r2, #4]
 800d91e:	f023 0310 	bic.w	r3, r3, #16
 800d922:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d924:	4b0d      	ldr	r3, [pc, #52]	@ (800d95c <VCU_TransmitModulePower+0x124>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 0310 	and.w	r3, r3, #16
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00c      	beq.n	800d94a <VCU_TransmitModulePower+0x112>
 800d930:	4b0e      	ldr	r3, [pc, #56]	@ (800d96c <VCU_TransmitModulePower+0x134>)
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d938:	b29b      	uxth	r3, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	490d      	ldr	r1, [pc, #52]	@ (800d974 <VCU_TransmitModulePower+0x13c>)
 800d93e:	4809      	ldr	r0, [pc, #36]	@ (800d964 <VCU_TransmitModulePower+0x12c>)
 800d940:	f006 ffe0 	bl	8014904 <siprintf>
 800d944:	4807      	ldr	r0, [pc, #28]	@ (800d964 <VCU_TransmitModulePower+0x12c>)
 800d946:	f7f7 fe79 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d94a:	2000      	movs	r0, #0
 800d94c:	f7fe fb7e 	bl	800c04c <VCU_TransmitMessageQueue>
}
 800d950:	bf00      	nop
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	bd90      	pop	{r4, r7, pc}
 800d958:	2000a66c 	.word	0x2000a66c
 800d95c:	2000000c 	.word	0x2000000c
 800d960:	08019cd8 	.word	0x08019cd8
 800d964:	20000b5c 	.word	0x20000b5c
 800d968:	20000dec 	.word	0x20000dec
 800d96c:	2000a6d8 	.word	0x2000a6d8
 800d970:	2000a6e4 	.word	0x2000a6e4
 800d974:	08019d14 	.word	0x08019d14

0800d978 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800d978:	b590      	push	{r4, r7, lr}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d97e:	4b41      	ldr	r3, [pc, #260]	@ (800da84 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d980:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d984:	4618      	mov	r0, r3
 800d986:	f7fd fb95 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d98e:	4b3d      	ldr	r3, [pc, #244]	@ (800da84 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d990:	7d1b      	ldrb	r3, [r3, #20]
 800d992:	7bfa      	ldrb	r2, [r7, #15]
 800d994:	429a      	cmp	r2, r3
 800d996:	d071      	beq.n	800da7c <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800d998:	4b3a      	ldr	r3, [pc, #232]	@ (800da84 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d99a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d99e:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800d9a0:	7bfb      	ldrb	r3, [r7, #15]
 800d9a2:	4a39      	ldr	r2, [pc, #228]	@ (800da88 <VCU_TransmitModuleCellVoltage+0x110>)
 800d9a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d9a8:	fb01 f303 	mul.w	r3, r1, r3
 800d9ac:	4413      	add	r3, r2
 800d9ae:	3322      	adds	r3, #34	@ 0x22
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	4a34      	ldr	r2, [pc, #208]	@ (800da88 <VCU_TransmitModuleCellVoltage+0x110>)
 800d9b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d9bc:	fb01 f303 	mul.w	r3, r1, r3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	331e      	adds	r3, #30
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
 800d9cc:	4a2e      	ldr	r2, [pc, #184]	@ (800da88 <VCU_TransmitModuleCellVoltage+0x110>)
 800d9ce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d9d2:	fb01 f303 	mul.w	r3, r1, r3
 800d9d6:	4413      	add	r3, r2
 800d9d8:	3320      	adds	r3, #32
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d9e2:	4b2a      	ldr	r3, [pc, #168]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d9e8:	4b28      	ldr	r3, [pc, #160]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d9ee:	4b27      	ldr	r3, [pc, #156]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800d9f4:	4b26      	ldr	r3, [pc, #152]	@ (800da90 <VCU_TransmitModuleCellVoltage+0x118>)
 800d9f6:	461c      	mov	r4, r3
 800d9f8:	463b      	mov	r3, r7
 800d9fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800da02:	4b20      	ldr	r3, [pc, #128]	@ (800da84 <VCU_TransmitModuleCellVoltage+0x10c>)
 800da04:	895b      	ldrh	r3, [r3, #10]
 800da06:	f203 4313 	addw	r3, r3, #1043	@ 0x413
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da10:	b299      	uxth	r1, r3
 800da12:	4a1e      	ldr	r2, [pc, #120]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da14:	8813      	ldrh	r3, [r2, #0]
 800da16:	f361 030a 	bfi	r3, r1, #0, #11
 800da1a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800da1c:	4a1b      	ldr	r2, [pc, #108]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da1e:	6813      	ldr	r3, [r2, #0]
 800da20:	f36f 23dc 	bfc	r3, #11, #18
 800da24:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800da26:	4a19      	ldr	r2, [pc, #100]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da28:	7913      	ldrb	r3, [r2, #4]
 800da2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da2e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800da30:	4a16      	ldr	r2, [pc, #88]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da32:	7913      	ldrb	r3, [r2, #4]
 800da34:	2108      	movs	r1, #8
 800da36:	f361 0303 	bfi	r3, r1, #0, #4
 800da3a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800da3c:	4a13      	ldr	r2, [pc, #76]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da3e:	7913      	ldrb	r3, [r2, #4]
 800da40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da44:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800da46:	4a11      	ldr	r2, [pc, #68]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da48:	7913      	ldrb	r3, [r2, #4]
 800da4a:	f023 0310 	bic.w	r3, r3, #16
 800da4e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800da50:	4b10      	ldr	r3, [pc, #64]	@ (800da94 <VCU_TransmitModuleCellVoltage+0x11c>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	f003 0310 	and.w	r3, r3, #16
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00c      	beq.n	800da76 <VCU_TransmitModuleCellVoltage+0xfe>
 800da5c:	4b0b      	ldr	r3, [pc, #44]	@ (800da8c <VCU_TransmitModuleCellVoltage+0x114>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da64:	b29b      	uxth	r3, r3
 800da66:	461a      	mov	r2, r3
 800da68:	490b      	ldr	r1, [pc, #44]	@ (800da98 <VCU_TransmitModuleCellVoltage+0x120>)
 800da6a:	480c      	ldr	r0, [pc, #48]	@ (800da9c <VCU_TransmitModuleCellVoltage+0x124>)
 800da6c:	f006 ff4a 	bl	8014904 <siprintf>
 800da70:	480a      	ldr	r0, [pc, #40]	@ (800da9c <VCU_TransmitModuleCellVoltage+0x124>)
 800da72:	f7f7 fde3 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800da76:	2000      	movs	r0, #0
 800da78:	f7fe fae8 	bl	800c04c <VCU_TransmitMessageQueue>
  }
}
 800da7c:	bf00      	nop
 800da7e:	3714      	adds	r7, #20
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}
 800da84:	2000a66c 	.word	0x2000a66c
 800da88:	20000dec 	.word	0x20000dec
 800da8c:	2000a6d8 	.word	0x2000a6d8
 800da90:	2000a6e4 	.word	0x2000a6e4
 800da94:	2000000c 	.word	0x2000000c
 800da98:	08019d30 	.word	0x08019d30
 800da9c:	20000b5c 	.word	0x20000b5c

0800daa0 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800daa0:	b590      	push	{r4, r7, lr}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800daa6:	4b41      	ldr	r3, [pc, #260]	@ (800dbac <VCU_TransmitModuleCellTemp+0x10c>)
 800daa8:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800daac:	4618      	mov	r0, r3
 800daae:	f7fd fb01 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800dab6:	4b3d      	ldr	r3, [pc, #244]	@ (800dbac <VCU_TransmitModuleCellTemp+0x10c>)
 800dab8:	7d1b      	ldrb	r3, [r3, #20]
 800daba:	7bfa      	ldrb	r2, [r7, #15]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d071      	beq.n	800dba4 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800dac0:	4b3a      	ldr	r3, [pc, #232]	@ (800dbac <VCU_TransmitModuleCellTemp+0x10c>)
 800dac2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dac6:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	4a39      	ldr	r2, [pc, #228]	@ (800dbb0 <VCU_TransmitModuleCellTemp+0x110>)
 800dacc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dad0:	fb01 f303 	mul.w	r3, r1, r3
 800dad4:	4413      	add	r3, r2
 800dad6:	331c      	adds	r3, #28
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	4a34      	ldr	r2, [pc, #208]	@ (800dbb0 <VCU_TransmitModuleCellTemp+0x110>)
 800dae0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dae4:	fb01 f303 	mul.w	r3, r1, r3
 800dae8:	4413      	add	r3, r2
 800daea:	3318      	adds	r3, #24
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800daf2:	7bfb      	ldrb	r3, [r7, #15]
 800daf4:	4a2e      	ldr	r2, [pc, #184]	@ (800dbb0 <VCU_TransmitModuleCellTemp+0x110>)
 800daf6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dafa:	fb01 f303 	mul.w	r3, r1, r3
 800dafe:	4413      	add	r3, r2
 800db00:	331a      	adds	r3, #26
 800db02:	881b      	ldrh	r3, [r3, #0]
 800db04:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800db0a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800db10:	4b28      	ldr	r3, [pc, #160]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db12:	2200      	movs	r2, #0
 800db14:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800db16:	4b27      	ldr	r3, [pc, #156]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db18:	2200      	movs	r2, #0
 800db1a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800db1c:	4b26      	ldr	r3, [pc, #152]	@ (800dbb8 <VCU_TransmitModuleCellTemp+0x118>)
 800db1e:	461c      	mov	r4, r3
 800db20:	463b      	mov	r3, r7
 800db22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db26:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800db2a:	4b20      	ldr	r3, [pc, #128]	@ (800dbac <VCU_TransmitModuleCellTemp+0x10c>)
 800db2c:	895b      	ldrh	r3, [r3, #10]
 800db2e:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800db32:	b29b      	uxth	r3, r3
 800db34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db38:	b299      	uxth	r1, r3
 800db3a:	4a1e      	ldr	r2, [pc, #120]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db3c:	8813      	ldrh	r3, [r2, #0]
 800db3e:	f361 030a 	bfi	r3, r1, #0, #11
 800db42:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800db44:	4a1b      	ldr	r2, [pc, #108]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db46:	6813      	ldr	r3, [r2, #0]
 800db48:	f36f 23dc 	bfc	r3, #11, #18
 800db4c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800db4e:	4a19      	ldr	r2, [pc, #100]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db50:	7913      	ldrb	r3, [r2, #4]
 800db52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db56:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800db58:	4a16      	ldr	r2, [pc, #88]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db5a:	7913      	ldrb	r3, [r2, #4]
 800db5c:	2108      	movs	r1, #8
 800db5e:	f361 0303 	bfi	r3, r1, #0, #4
 800db62:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800db64:	4a13      	ldr	r2, [pc, #76]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db66:	7913      	ldrb	r3, [r2, #4]
 800db68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db6c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800db6e:	4a11      	ldr	r2, [pc, #68]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db70:	7913      	ldrb	r3, [r2, #4]
 800db72:	f023 0310 	bic.w	r3, r3, #16
 800db76:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800db78:	4b10      	ldr	r3, [pc, #64]	@ (800dbbc <VCU_TransmitModuleCellTemp+0x11c>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f003 0310 	and.w	r3, r3, #16
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00c      	beq.n	800db9e <VCU_TransmitModuleCellTemp+0xfe>
 800db84:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb4 <VCU_TransmitModuleCellTemp+0x114>)
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	461a      	mov	r2, r3
 800db90:	490b      	ldr	r1, [pc, #44]	@ (800dbc0 <VCU_TransmitModuleCellTemp+0x120>)
 800db92:	480c      	ldr	r0, [pc, #48]	@ (800dbc4 <VCU_TransmitModuleCellTemp+0x124>)
 800db94:	f006 feb6 	bl	8014904 <siprintf>
 800db98:	480a      	ldr	r0, [pc, #40]	@ (800dbc4 <VCU_TransmitModuleCellTemp+0x124>)
 800db9a:	f7f7 fd4f 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800db9e:	2000      	movs	r0, #0
 800dba0:	f7fe fa54 	bl	800c04c <VCU_TransmitMessageQueue>
  }
}
 800dba4:	bf00      	nop
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd90      	pop	{r4, r7, pc}
 800dbac:	2000a66c 	.word	0x2000a66c
 800dbb0:	20000dec 	.word	0x20000dec
 800dbb4:	2000a6d8 	.word	0x2000a6d8
 800dbb8:	2000a6e4 	.word	0x2000a6e4
 800dbbc:	2000000c 	.word	0x2000000c
 800dbc0:	08019d54 	.word	0x08019d54
 800dbc4:	20000b5c 	.word	0x20000b5c

0800dbc8 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800dbce:	4b41      	ldr	r3, [pc, #260]	@ (800dcd4 <VCU_TransmitModuleLimits+0x10c>)
 800dbd0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd fa6d 	bl	800b0b4 <MCU_ModuleIndexFromId>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800dbde:	4b3d      	ldr	r3, [pc, #244]	@ (800dcd4 <VCU_TransmitModuleLimits+0x10c>)
 800dbe0:	7d1b      	ldrb	r3, [r3, #20]
 800dbe2:	7bfa      	ldrb	r2, [r7, #15]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d071      	beq.n	800dccc <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800dbe8:	4b3a      	ldr	r3, [pc, #232]	@ (800dcd4 <VCU_TransmitModuleLimits+0x10c>)
 800dbea:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dbee:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
 800dbf2:	4a39      	ldr	r2, [pc, #228]	@ (800dcd8 <VCU_TransmitModuleLimits+0x110>)
 800dbf4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dbf8:	fb01 f303 	mul.w	r3, r1, r3
 800dbfc:	4413      	add	r3, r2
 800dbfe:	3312      	adds	r3, #18
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	4a34      	ldr	r2, [pc, #208]	@ (800dcd8 <VCU_TransmitModuleLimits+0x110>)
 800dc08:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dc0c:	fb01 f303 	mul.w	r3, r1, r3
 800dc10:	4413      	add	r3, r2
 800dc12:	330e      	adds	r3, #14
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
 800dc1a:	4a2f      	ldr	r2, [pc, #188]	@ (800dcd8 <VCU_TransmitModuleLimits+0x110>)
 800dc1c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800dc20:	fb01 f303 	mul.w	r3, r1, r3
 800dc24:	4413      	add	r3, r2
 800dc26:	3310      	adds	r3, #16
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dc32:	4b2a      	ldr	r3, [pc, #168]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800dc38:	4b28      	ldr	r3, [pc, #160]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800dc3e:	4b27      	ldr	r3, [pc, #156]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800dc44:	4b26      	ldr	r3, [pc, #152]	@ (800dce0 <VCU_TransmitModuleLimits+0x118>)
 800dc46:	461c      	mov	r4, r3
 800dc48:	463b      	mov	r3, r7
 800dc4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dc52:	4b20      	ldr	r3, [pc, #128]	@ (800dcd4 <VCU_TransmitModuleLimits+0x10c>)
 800dc54:	895b      	ldrh	r3, [r3, #10]
 800dc56:	f203 4316 	addw	r3, r3, #1046	@ 0x416
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc60:	b299      	uxth	r1, r3
 800dc62:	4a1e      	ldr	r2, [pc, #120]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc64:	8813      	ldrh	r3, [r2, #0]
 800dc66:	f361 030a 	bfi	r3, r1, #0, #11
 800dc6a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dc6c:	4a1b      	ldr	r2, [pc, #108]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc6e:	6813      	ldr	r3, [r2, #0]
 800dc70:	f36f 23dc 	bfc	r3, #11, #18
 800dc74:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dc76:	4a19      	ldr	r2, [pc, #100]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc78:	7913      	ldrb	r3, [r2, #4]
 800dc7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc7e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dc80:	4a16      	ldr	r2, [pc, #88]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc82:	7913      	ldrb	r3, [r2, #4]
 800dc84:	2108      	movs	r1, #8
 800dc86:	f361 0303 	bfi	r3, r1, #0, #4
 800dc8a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dc8c:	4a13      	ldr	r2, [pc, #76]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc8e:	7913      	ldrb	r3, [r2, #4]
 800dc90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc94:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dc96:	4a11      	ldr	r2, [pc, #68]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dc98:	7913      	ldrb	r3, [r2, #4]
 800dc9a:	f023 0310 	bic.w	r3, r3, #16
 800dc9e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dca0:	4b10      	ldr	r3, [pc, #64]	@ (800dce4 <VCU_TransmitModuleLimits+0x11c>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00c      	beq.n	800dcc6 <VCU_TransmitModuleLimits+0xfe>
 800dcac:	4b0b      	ldr	r3, [pc, #44]	@ (800dcdc <VCU_TransmitModuleLimits+0x114>)
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	490b      	ldr	r1, [pc, #44]	@ (800dce8 <VCU_TransmitModuleLimits+0x120>)
 800dcba:	480c      	ldr	r0, [pc, #48]	@ (800dcec <VCU_TransmitModuleLimits+0x124>)
 800dcbc:	f006 fe22 	bl	8014904 <siprintf>
 800dcc0:	480a      	ldr	r0, [pc, #40]	@ (800dcec <VCU_TransmitModuleLimits+0x124>)
 800dcc2:	f7f7 fcbb 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f7fe f9c0 	bl	800c04c <VCU_TransmitMessageQueue>
  }

}
 800dccc:	bf00      	nop
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd90      	pop	{r4, r7, pc}
 800dcd4:	2000a66c 	.word	0x2000a66c
 800dcd8:	20000dec 	.word	0x20000dec
 800dcdc:	2000a6d8 	.word	0x2000a6d8
 800dce0:	2000a6e4 	.word	0x2000a6e4
 800dce4:	2000000c 	.word	0x2000000c
 800dce8:	08019d74 	.word	0x08019d74
 800dcec:	20000b5c 	.word	0x20000b5c

0800dcf0 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dcf4:	4b23      	ldr	r3, [pc, #140]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dcfa:	4b22      	ldr	r3, [pc, #136]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dd00:	4b20      	ldr	r3, [pc, #128]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dd06:	4b20      	ldr	r3, [pc, #128]	@ (800dd88 <VCU_RequestTime+0x98>)
 800dd08:	895b      	ldrh	r3, [r3, #10]
 800dd0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd14:	b299      	uxth	r1, r3
 800dd16:	4a1b      	ldr	r2, [pc, #108]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd18:	8813      	ldrh	r3, [r2, #0]
 800dd1a:	f361 030a 	bfi	r3, r1, #0, #11
 800dd1e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dd20:	4a18      	ldr	r2, [pc, #96]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd22:	6813      	ldr	r3, [r2, #0]
 800dd24:	f36f 23dc 	bfc	r3, #11, #18
 800dd28:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dd2a:	4a16      	ldr	r2, [pc, #88]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd2c:	7913      	ldrb	r3, [r2, #4]
 800dd2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd32:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dd34:	4a13      	ldr	r2, [pc, #76]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd36:	7913      	ldrb	r3, [r2, #4]
 800dd38:	2108      	movs	r1, #8
 800dd3a:	f361 0303 	bfi	r3, r1, #0, #4
 800dd3e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dd40:	4a10      	ldr	r2, [pc, #64]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd42:	7913      	ldrb	r3, [r2, #4]
 800dd44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd48:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dd4a:	4a0e      	ldr	r2, [pc, #56]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd4c:	7913      	ldrb	r3, [r2, #4]
 800dd4e:	f023 0310 	bic.w	r3, r3, #16
 800dd52:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dd54:	4b0d      	ldr	r3, [pc, #52]	@ (800dd8c <VCU_RequestTime+0x9c>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	f003 0310 	and.w	r3, r3, #16
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00c      	beq.n	800dd7a <VCU_RequestTime+0x8a>
 800dd60:	4b08      	ldr	r3, [pc, #32]	@ (800dd84 <VCU_RequestTime+0x94>)
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4908      	ldr	r1, [pc, #32]	@ (800dd90 <VCU_RequestTime+0xa0>)
 800dd6e:	4809      	ldr	r0, [pc, #36]	@ (800dd94 <VCU_RequestTime+0xa4>)
 800dd70:	f006 fdc8 	bl	8014904 <siprintf>
 800dd74:	4807      	ldr	r0, [pc, #28]	@ (800dd94 <VCU_RequestTime+0xa4>)
 800dd76:	f7f7 fc61 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f7fe f966 	bl	800c04c <VCU_TransmitMessageQueue>

}
 800dd80:	bf00      	nop
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	2000a6d8 	.word	0x2000a6d8
 800dd88:	2000a66c 	.word	0x2000a66c
 800dd8c:	2000000c 	.word	0x2000000c
 800dd90:	08019d90 	.word	0x08019d90
 800dd94:	20000b5c 	.word	0x20000b5c

0800dd98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800dd98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dd9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dd9c:	3304      	adds	r3, #4

0800dd9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dd9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dda0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800dda2:	d3f9      	bcc.n	800dd98 <CopyDataInit>
  bx lr
 800dda4:	4770      	bx	lr

0800dda6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800dda6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800dda8:	3004      	adds	r0, #4

0800ddaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800ddaa:	4288      	cmp	r0, r1
  bcc FillZerobss
 800ddac:	d3fb      	bcc.n	800dda6 <FillZerobss>
  bx lr
 800ddae:	4770      	bx	lr

0800ddb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ddb0:	480c      	ldr	r0, [pc, #48]	@ (800dde4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ddb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ddb4:	f7fd fff0 	bl	800bd98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800ddb8:	480b      	ldr	r0, [pc, #44]	@ (800dde8 <LoopForever+0x6>)
 800ddba:	490c      	ldr	r1, [pc, #48]	@ (800ddec <LoopForever+0xa>)
 800ddbc:	4a0c      	ldr	r2, [pc, #48]	@ (800ddf0 <LoopForever+0xe>)
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f7ff ffed 	bl	800dd9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800ddc4:	480b      	ldr	r0, [pc, #44]	@ (800ddf4 <LoopForever+0x12>)
 800ddc6:	490c      	ldr	r1, [pc, #48]	@ (800ddf8 <LoopForever+0x16>)
 800ddc8:	4a0c      	ldr	r2, [pc, #48]	@ (800ddfc <LoopForever+0x1a>)
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f7ff ffe7 	bl	800dd9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800ddd0:	480b      	ldr	r0, [pc, #44]	@ (800de00 <LoopForever+0x1e>)
 800ddd2:	490c      	ldr	r1, [pc, #48]	@ (800de04 <LoopForever+0x22>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f7ff ffe8 	bl	800ddaa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ddda:	f007 fcd5 	bl	8015788 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800ddde:	f7f7 ffdf 	bl	8005da0 <main>

0800dde2 <LoopForever>:

LoopForever:
  b LoopForever
 800dde2:	e7fe      	b.n	800dde2 <LoopForever>
  ldr   r0, =_estack
 800dde4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800dde8:	20000008 	.word	0x20000008
 800ddec:	200002c8 	.word	0x200002c8
 800ddf0:	0801a40c 	.word	0x0801a40c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800ddf4:	20030000 	.word	0x20030000
 800ddf8:	20030000 	.word	0x20030000
 800ddfc:	0801a6cc 	.word	0x0801a6cc
  INIT_BSS _sbss, _ebss
 800de00:	200002c8 	.word	0x200002c8
 800de04:	2000a904 	.word	0x2000a904

0800de08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800de08:	e7fe      	b.n	800de08 <ADC1_IRQHandler>
	...

0800de0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800de16:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <HAL_Init+0x3c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a0b      	ldr	r2, [pc, #44]	@ (800de48 <HAL_Init+0x3c>)
 800de1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800de22:	2003      	movs	r0, #3
 800de24:	f000 f96c 	bl	800e100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800de28:	200f      	movs	r0, #15
 800de2a:	f000 f80f 	bl	800de4c <HAL_InitTick>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	71fb      	strb	r3, [r7, #7]
 800de38:	e001      	b.n	800de3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800de3a:	f7fd fc13 	bl	800b664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800de3e:	79fb      	ldrb	r3, [r7, #7]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	58004000 	.word	0x58004000

0800de4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800de58:	4b17      	ldr	r3, [pc, #92]	@ (800deb8 <HAL_InitTick+0x6c>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d024      	beq.n	800deaa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800de60:	f002 f842 	bl	800fee8 <HAL_RCC_GetHCLKFreq>
 800de64:	4602      	mov	r2, r0
 800de66:	4b14      	ldr	r3, [pc, #80]	@ (800deb8 <HAL_InitTick+0x6c>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4619      	mov	r1, r3
 800de6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de70:	fbb3 f3f1 	udiv	r3, r3, r1
 800de74:	fbb2 f3f3 	udiv	r3, r2, r3
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 f974 	bl	800e166 <HAL_SYSTICK_Config>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10f      	bne.n	800dea4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d809      	bhi.n	800de9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800de8a:	2200      	movs	r2, #0
 800de8c:	6879      	ldr	r1, [r7, #4]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295
 800de92:	f000 f940 	bl	800e116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800de96:	4a09      	ldr	r2, [pc, #36]	@ (800debc <HAL_InitTick+0x70>)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6013      	str	r3, [r2, #0]
 800de9c:	e007      	b.n	800deae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	73fb      	strb	r3, [r7, #15]
 800dea2:	e004      	b.n	800deae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	73fb      	strb	r3, [r7, #15]
 800dea8:	e001      	b.n	800deae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800deae:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20000020 	.word	0x20000020
 800debc:	2000001c 	.word	0x2000001c

0800dec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dec0:	b480      	push	{r7}
 800dec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800dec4:	4b06      	ldr	r3, [pc, #24]	@ (800dee0 <HAL_IncTick+0x20>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	461a      	mov	r2, r3
 800deca:	4b06      	ldr	r3, [pc, #24]	@ (800dee4 <HAL_IncTick+0x24>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4413      	add	r3, r2
 800ded0:	4a04      	ldr	r2, [pc, #16]	@ (800dee4 <HAL_IncTick+0x24>)
 800ded2:	6013      	str	r3, [r2, #0]
}
 800ded4:	bf00      	nop
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	20000020 	.word	0x20000020
 800dee4:	2000a778 	.word	0x2000a778

0800dee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
  return uwTick;
 800deec:	4b03      	ldr	r3, [pc, #12]	@ (800defc <HAL_GetTick+0x14>)
 800deee:	681b      	ldr	r3, [r3, #0]
}
 800def0:	4618      	mov	r0, r3
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	2000a778 	.word	0x2000a778

0800df00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800df04:	4b03      	ldr	r3, [pc, #12]	@ (800df14 <HAL_GetTickPrio+0x14>)
 800df06:	681b      	ldr	r3, [r3, #0]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	2000001c 	.word	0x2000001c

0800df18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800df20:	f7ff ffe2 	bl	800dee8 <HAL_GetTick>
 800df24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df30:	d005      	beq.n	800df3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800df32:	4b0a      	ldr	r3, [pc, #40]	@ (800df5c <HAL_Delay+0x44>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	4413      	add	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800df3e:	bf00      	nop
 800df40:	f7ff ffd2 	bl	800dee8 <HAL_GetTick>
 800df44:	4602      	mov	r2, r0
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d8f7      	bhi.n	800df40 <HAL_Delay+0x28>
  {
  }
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20000020 	.word	0x20000020

0800df60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f003 0307 	and.w	r3, r3, #7
 800df6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df70:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <__NVIC_SetPriorityGrouping+0x44>)
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800df7c:	4013      	ands	r3, r2
 800df7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800df88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800df8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800df92:	4a04      	ldr	r2, [pc, #16]	@ (800dfa4 <__NVIC_SetPriorityGrouping+0x44>)
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	60d3      	str	r3, [r2, #12]
}
 800df98:	bf00      	nop
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	e000ed00 	.word	0xe000ed00

0800dfa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dfac:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <__NVIC_GetPriorityGrouping+0x18>)
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	0a1b      	lsrs	r3, r3, #8
 800dfb2:	f003 0307 	and.w	r3, r3, #7
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	e000ed00 	.word	0xe000ed00

0800dfc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dfce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	db0b      	blt.n	800dfee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	f003 021f 	and.w	r2, r3, #31
 800dfdc:	4907      	ldr	r1, [pc, #28]	@ (800dffc <__NVIC_EnableIRQ+0x38>)
 800dfde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfe2:	095b      	lsrs	r3, r3, #5
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	fa00 f202 	lsl.w	r2, r0, r2
 800dfea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dfee:	bf00      	nop
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	e000e100 	.word	0xe000e100

0800e000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	6039      	str	r1, [r7, #0]
 800e00a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e010:	2b00      	cmp	r3, #0
 800e012:	db0a      	blt.n	800e02a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	b2da      	uxtb	r2, r3
 800e018:	490c      	ldr	r1, [pc, #48]	@ (800e04c <__NVIC_SetPriority+0x4c>)
 800e01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e01e:	0112      	lsls	r2, r2, #4
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	440b      	add	r3, r1
 800e024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e028:	e00a      	b.n	800e040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	4908      	ldr	r1, [pc, #32]	@ (800e050 <__NVIC_SetPriority+0x50>)
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	f003 030f 	and.w	r3, r3, #15
 800e036:	3b04      	subs	r3, #4
 800e038:	0112      	lsls	r2, r2, #4
 800e03a:	b2d2      	uxtb	r2, r2
 800e03c:	440b      	add	r3, r1
 800e03e:	761a      	strb	r2, [r3, #24]
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	e000e100 	.word	0xe000e100
 800e050:	e000ed00 	.word	0xe000ed00

0800e054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e054:	b480      	push	{r7}
 800e056:	b089      	sub	sp, #36	@ 0x24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	f1c3 0307 	rsb	r3, r3, #7
 800e06e:	2b04      	cmp	r3, #4
 800e070:	bf28      	it	cs
 800e072:	2304      	movcs	r3, #4
 800e074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	3304      	adds	r3, #4
 800e07a:	2b06      	cmp	r3, #6
 800e07c:	d902      	bls.n	800e084 <NVIC_EncodePriority+0x30>
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	3b03      	subs	r3, #3
 800e082:	e000      	b.n	800e086 <NVIC_EncodePriority+0x32>
 800e084:	2300      	movs	r3, #0
 800e086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e088:	f04f 32ff 	mov.w	r2, #4294967295
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	fa02 f303 	lsl.w	r3, r2, r3
 800e092:	43da      	mvns	r2, r3
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	401a      	ands	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e09c:	f04f 31ff 	mov.w	r1, #4294967295
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a6:	43d9      	mvns	r1, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e0ac:	4313      	orrs	r3, r2
         );
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3724      	adds	r7, #36	@ 0x24
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
	...

0800e0bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0cc:	d301      	bcc.n	800e0d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e00f      	b.n	800e0f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e0fc <SysTick_Config+0x40>)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e0da:	210f      	movs	r1, #15
 800e0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e0:	f7ff ff8e 	bl	800e000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e0e4:	4b05      	ldr	r3, [pc, #20]	@ (800e0fc <SysTick_Config+0x40>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e0ea:	4b04      	ldr	r3, [pc, #16]	@ (800e0fc <SysTick_Config+0x40>)
 800e0ec:	2207      	movs	r2, #7
 800e0ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	e000e010 	.word	0xe000e010

0800e100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff ff29 	bl	800df60 <__NVIC_SetPriorityGrouping>
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b086      	sub	sp, #24
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	4603      	mov	r3, r0
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e124:	f7ff ff40 	bl	800dfa8 <__NVIC_GetPriorityGrouping>
 800e128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	68b9      	ldr	r1, [r7, #8]
 800e12e:	6978      	ldr	r0, [r7, #20]
 800e130:	f7ff ff90 	bl	800e054 <NVIC_EncodePriority>
 800e134:	4602      	mov	r2, r0
 800e136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff ff5f 	bl	800e000 <__NVIC_SetPriority>
}
 800e142:	bf00      	nop
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	4603      	mov	r3, r0
 800e152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ff33 	bl	800dfc4 <__NVIC_EnableIRQ>
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b082      	sub	sp, #8
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff ffa4 	bl	800e0bc <SysTick_Config>
 800e174:	4603      	mov	r3, r0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e17e:	b480      	push	{r7}
 800e180:	b083      	sub	sp, #12
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e04f      	b.n	800e230 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e196:	b2db      	uxtb	r3, r3
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d008      	beq.n	800e1ae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2204      	movs	r2, #4
 800e1a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e040      	b.n	800e230 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f022 020e 	bic.w	r2, r2, #14
 800e1bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e1cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f022 0201 	bic.w	r2, r2, #1
 800e1dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1e2:	f003 021c 	and.w	r2, r3, #28
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	fa01 f202 	lsl.w	r2, r1, r2
 800e1f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e1fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00c      	beq.n	800e21e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e20e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e212:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800e21c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b02      	cmp	r3, #2
 800e252:	d005      	beq.n	800e260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2204      	movs	r2, #4
 800e258:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	73fb      	strb	r3, [r7, #15]
 800e25e:	e047      	b.n	800e2f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f022 020e 	bic.w	r2, r2, #14
 800e26e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 0201 	bic.w	r2, r2, #1
 800e27e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e28a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e28e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e294:	f003 021c 	and.w	r2, r3, #28
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e29c:	2101      	movs	r1, #1
 800e29e:	fa01 f202 	lsl.w	r2, r1, r2
 800e2a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e2ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00c      	beq.n	800e2d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e2c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800e2ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	4798      	blx	r3
    }
  }
  return status;
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
	...

0800e2fc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e30a:	4b1c      	ldr	r3, [pc, #112]	@ (800e37c <HAL_FLASH_Program+0x80>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <HAL_FLASH_Program+0x1a>
 800e312:	2302      	movs	r3, #2
 800e314:	e02d      	b.n	800e372 <HAL_FLASH_Program+0x76>
 800e316:	4b19      	ldr	r3, [pc, #100]	@ (800e37c <HAL_FLASH_Program+0x80>)
 800e318:	2201      	movs	r2, #1
 800e31a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e31c:	4b17      	ldr	r3, [pc, #92]	@ (800e37c <HAL_FLASH_Program+0x80>)
 800e31e:	2200      	movs	r2, #0
 800e320:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e326:	f000 f869 	bl	800e3fc <FLASH_WaitForLastOperation>
 800e32a:	4603      	mov	r3, r0
 800e32c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800e32e:	7dfb      	ldrb	r3, [r7, #23]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d11a      	bne.n	800e36a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d105      	bne.n	800e346 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e33a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e33e:	68b8      	ldr	r0, [r7, #8]
 800e340:	f000 f8ca 	bl	800e4d8 <FLASH_Program_DoubleWord>
 800e344:	e004      	b.n	800e350 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	4619      	mov	r1, r3
 800e34a:	68b8      	ldr	r0, [r7, #8]
 800e34c:	f00a f87c 	bl	8018448 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e350:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e354:	f000 f852 	bl	800e3fc <FLASH_WaitForLastOperation>
 800e358:	4603      	mov	r3, r0
 800e35a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800e35c:	4b08      	ldr	r3, [pc, #32]	@ (800e380 <HAL_FLASH_Program+0x84>)
 800e35e:	695a      	ldr	r2, [r3, #20]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	43db      	mvns	r3, r3
 800e364:	4906      	ldr	r1, [pc, #24]	@ (800e380 <HAL_FLASH_Program+0x84>)
 800e366:	4013      	ands	r3, r2
 800e368:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e36a:	4b04      	ldr	r3, [pc, #16]	@ (800e37c <HAL_FLASH_Program+0x80>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800e370:	7dfb      	ldrb	r3, [r7, #23]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	2000a77c 	.word	0x2000a77c
 800e380:	58004000 	.word	0x58004000

0800e384 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e38e:	4b0b      	ldr	r3, [pc, #44]	@ (800e3bc <HAL_FLASH_Unlock+0x38>)
 800e390:	695b      	ldr	r3, [r3, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da0b      	bge.n	800e3ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e396:	4b09      	ldr	r3, [pc, #36]	@ (800e3bc <HAL_FLASH_Unlock+0x38>)
 800e398:	4a09      	ldr	r2, [pc, #36]	@ (800e3c0 <HAL_FLASH_Unlock+0x3c>)
 800e39a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e39c:	4b07      	ldr	r3, [pc, #28]	@ (800e3bc <HAL_FLASH_Unlock+0x38>)
 800e39e:	4a09      	ldr	r2, [pc, #36]	@ (800e3c4 <HAL_FLASH_Unlock+0x40>)
 800e3a0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e3a2:	4b06      	ldr	r3, [pc, #24]	@ (800e3bc <HAL_FLASH_Unlock+0x38>)
 800e3a4:	695b      	ldr	r3, [r3, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da01      	bge.n	800e3ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	58004000 	.word	0x58004000
 800e3c0:	45670123 	.word	0x45670123
 800e3c4:	cdef89ab 	.word	0xcdef89ab

0800e3c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e3d2:	4b09      	ldr	r3, [pc, #36]	@ (800e3f8 <HAL_FLASH_Lock+0x30>)
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	4a08      	ldr	r2, [pc, #32]	@ (800e3f8 <HAL_FLASH_Lock+0x30>)
 800e3d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3dc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800e3de:	4b06      	ldr	r3, [pc, #24]	@ (800e3f8 <HAL_FLASH_Lock+0x30>)
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	db01      	blt.n	800e3ea <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	58004000 	.word	0x58004000

0800e3fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800e404:	f7ff fd70 	bl	800dee8 <HAL_GetTick>
 800e408:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e40a:	e009      	b.n	800e420 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e40c:	f7ff fd6c 	bl	800dee8 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d801      	bhi.n	800e420 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800e41c:	2303      	movs	r3, #3
 800e41e:	e053      	b.n	800e4c8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e420:	4b2b      	ldr	r3, [pc, #172]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e42c:	d0ee      	beq.n	800e40c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800e42e:	4b28      	ldr	r3, [pc, #160]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e43e:	4b24      	ldr	r3, [pc, #144]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e440:	2201      	movs	r2, #1
 800e442:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800e44e:	4b20      	ldr	r3, [pc, #128]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e450:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e454:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e45c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800e464:	4013      	ands	r3, r2
 800e466:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e46e:	d307      	bcc.n	800e480 <FLASH_WaitForLastOperation+0x84>
 800e470:	4b17      	ldr	r3, [pc, #92]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e472:	699a      	ldr	r2, [r3, #24]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e47a:	4915      	ldr	r1, [pc, #84]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e47c:	4313      	orrs	r3, r2
 800e47e:	618b      	str	r3, [r1, #24]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e486:	2b00      	cmp	r3, #0
 800e488:	d004      	beq.n	800e494 <FLASH_WaitForLastOperation+0x98>
 800e48a:	4a11      	ldr	r2, [pc, #68]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e492:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00e      	beq.n	800e4b8 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e49a:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d4 <FLASH_WaitForLastOperation+0xd8>)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e011      	b.n	800e4c8 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e4a4:	f7ff fd20 	bl	800dee8 <HAL_GetTick>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d801      	bhi.n	800e4b8 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e007      	b.n	800e4c8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e4b8:	4b05      	ldr	r3, [pc, #20]	@ (800e4d0 <FLASH_WaitForLastOperation+0xd4>)
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e4c4:	d0ee      	beq.n	800e4a4 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	58004000 	.word	0x58004000
 800e4d4:	2000a77c 	.word	0x2000a77c

0800e4d8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e520 <FLASH_Program_DoubleWord+0x48>)
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	4a0d      	ldr	r2, [pc, #52]	@ (800e520 <FLASH_Program_DoubleWord+0x48>)
 800e4ea:	f043 0301 	orr.w	r3, r3, #1
 800e4ee:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800e4f6:	f3bf 8f6f 	isb	sy
}
 800e4fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e4fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e500:	f04f 0200 	mov.w	r2, #0
 800e504:	f04f 0300 	mov.w	r3, #0
 800e508:	000a      	movs	r2, r1
 800e50a:	2300      	movs	r3, #0
 800e50c:	68f9      	ldr	r1, [r7, #12]
 800e50e:	3104      	adds	r1, #4
 800e510:	4613      	mov	r3, r2
 800e512:	600b      	str	r3, [r1, #0]
}
 800e514:	bf00      	nop
 800e516:	3714      	adds	r7, #20
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	58004000 	.word	0x58004000

0800e524 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e52e:	4b24      	ldr	r3, [pc, #144]	@ (800e5c0 <HAL_FLASHEx_Erase+0x9c>)
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d101      	bne.n	800e53a <HAL_FLASHEx_Erase+0x16>
 800e536:	2302      	movs	r3, #2
 800e538:	e03d      	b.n	800e5b6 <HAL_FLASHEx_Erase+0x92>
 800e53a:	4b21      	ldr	r3, [pc, #132]	@ (800e5c0 <HAL_FLASHEx_Erase+0x9c>)
 800e53c:	2201      	movs	r2, #1
 800e53e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e540:	4b1f      	ldr	r3, [pc, #124]	@ (800e5c0 <HAL_FLASHEx_Erase+0x9c>)
 800e542:	2200      	movs	r2, #0
 800e544:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e54a:	f7ff ff57 	bl	800e3fc <FLASH_WaitForLastOperation>
 800e54e:	4603      	mov	r3, r0
 800e550:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d12a      	bne.n	800e5ae <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d124      	bne.n	800e5aa <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	f04f 32ff 	mov.w	r2, #4294967295
 800e566:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	60bb      	str	r3, [r7, #8]
 800e56e:	e012      	b.n	800e596 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e570:	68b8      	ldr	r0, [r7, #8]
 800e572:	f000 f869 	bl	800e648 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e57a:	f7ff ff3f 	bl	800e3fc <FLASH_WaitForLastOperation>
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	601a      	str	r2, [r3, #0]
          break;
 800e58e:	e00a      	b.n	800e5a6 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3301      	adds	r3, #1
 800e594:	60bb      	str	r3, [r7, #8]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	4413      	add	r3, r2
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d3e4      	bcc.n	800e570 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e5a6:	f000 f8b1 	bl	800e70c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e5aa:	f000 f867 	bl	800e67c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e5ae:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <HAL_FLASHEx_Erase+0x9c>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	701a      	strb	r2, [r3, #0]

  return status;
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	2000a77c 	.word	0x2000a77c

0800e5c4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e5cc:	4b1c      	ldr	r3, [pc, #112]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d101      	bne.n	800e5d8 <HAL_FLASHEx_Erase_IT+0x14>
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e02e      	b.n	800e636 <HAL_FLASHEx_Erase_IT+0x72>
 800e5d8:	4b19      	ldr	r3, [pc, #100]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e5de:	4b18      	ldr	r3, [pc, #96]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a15      	ldr	r2, [pc, #84]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e5ea:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e5f0:	f7ff ff04 	bl	800e3fc <FLASH_WaitForLastOperation>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800e5fe:	4b10      	ldr	r3, [pc, #64]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e600:	2200      	movs	r2, #0
 800e602:	701a      	strb	r2, [r3, #0]
 800e604:	e016      	b.n	800e634 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800e606:	4b0f      	ldr	r3, [pc, #60]	@ (800e644 <HAL_FLASHEx_Erase_IT+0x80>)
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	4a0e      	ldr	r2, [pc, #56]	@ (800e644 <HAL_FLASHEx_Erase_IT+0x80>)
 800e60c:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800e610:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b02      	cmp	r3, #2
 800e618:	d10c      	bne.n	800e634 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	4a08      	ldr	r2, [pc, #32]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e620:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	4a06      	ldr	r2, [pc, #24]	@ (800e640 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e628:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f80a 	bl	800e648 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800e634:	7bfb      	ldrb	r3, [r7, #15]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	2000a77c 	.word	0x2000a77c
 800e644:	58004000 	.word	0x58004000

0800e648 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e650:	4b09      	ldr	r3, [pc, #36]	@ (800e678 <FLASH_PageErase+0x30>)
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	4313      	orrs	r3, r2
 800e65e:	4a06      	ldr	r2, [pc, #24]	@ (800e678 <FLASH_PageErase+0x30>)
 800e660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	6153      	str	r3, [r2, #20]
}
 800e66a:	bf00      	nop
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	58004000 	.word	0x58004000

0800e67c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800e680:	4b21      	ldr	r3, [pc, #132]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e68c:	d117      	bne.n	800e6be <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e68e:	4b1e      	ldr	r3, [pc, #120]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a1d      	ldr	r2, [pc, #116]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e698:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e69a:	4b1b      	ldr	r3, [pc, #108]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a1a      	ldr	r2, [pc, #104]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e6a4:	6013      	str	r3, [r2, #0]
 800e6a6:	4b18      	ldr	r3, [pc, #96]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a17      	ldr	r2, [pc, #92]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e6b0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e6b2:	4b15      	ldr	r3, [pc, #84]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a14      	ldr	r2, [pc, #80]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e6bc:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800e6be:	4b12      	ldr	r3, [pc, #72]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6ca:	d117      	bne.n	800e6fc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a0d      	ldr	r2, [pc, #52]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e6d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e6e2:	6013      	str	r3, [r2, #0]
 800e6e4:	4b08      	ldr	r3, [pc, #32]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a07      	ldr	r2, [pc, #28]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e6f0:	4b05      	ldr	r3, [pc, #20]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a04      	ldr	r2, [pc, #16]	@ (800e708 <FLASH_FlushCaches+0x8c>)
 800e6f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e6fa:	6013      	str	r3, [r2, #0]
  }
}
 800e6fc:	bf00      	nop
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	58004000 	.word	0x58004000

0800e70c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e710:	4b06      	ldr	r3, [pc, #24]	@ (800e72c <FLASH_AcknowledgePageErase+0x20>)
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	4a05      	ldr	r2, [pc, #20]	@ (800e72c <FLASH_AcknowledgePageErase+0x20>)
 800e716:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800e71a:	f023 0302 	bic.w	r3, r3, #2
 800e71e:	6153      	str	r3, [r2, #20]
}
 800e720:	bf00      	nop
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	58004000 	.word	0x58004000

0800e730 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e730:	b480      	push	{r7}
 800e732:	b087      	sub	sp, #28
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e73a:	2300      	movs	r3, #0
 800e73c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e73e:	e14c      	b.n	800e9da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	2101      	movs	r1, #1
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	fa01 f303 	lsl.w	r3, r1, r3
 800e74c:	4013      	ands	r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f000 813e 	beq.w	800e9d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	f003 0303 	and.w	r3, r3, #3
 800e760:	2b01      	cmp	r3, #1
 800e762:	d005      	beq.n	800e770 <HAL_GPIO_Init+0x40>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	f003 0303 	and.w	r3, r3, #3
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d130      	bne.n	800e7d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	2203      	movs	r2, #3
 800e77c:	fa02 f303 	lsl.w	r3, r2, r3
 800e780:	43db      	mvns	r3, r3
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	4013      	ands	r3, r2
 800e786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	68da      	ldr	r2, [r3, #12]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	fa02 f303 	lsl.w	r3, r2, r3
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	4313      	orrs	r3, r2
 800e798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ae:	43db      	mvns	r3, r3
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	091b      	lsrs	r3, r3, #4
 800e7bc:	f003 0201 	and.w	r2, r3, #1
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	f003 0303 	and.w	r3, r3, #3
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d017      	beq.n	800e80e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ee:	43db      	mvns	r3, r3
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	689a      	ldr	r2, [r3, #8]
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	4313      	orrs	r3, r2
 800e806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	693a      	ldr	r2, [r7, #16]
 800e80c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f003 0303 	and.w	r3, r3, #3
 800e816:	2b02      	cmp	r3, #2
 800e818:	d123      	bne.n	800e862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	08da      	lsrs	r2, r3, #3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3208      	adds	r2, #8
 800e822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f003 0307 	and.w	r3, r3, #7
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	220f      	movs	r2, #15
 800e832:	fa02 f303 	lsl.w	r3, r2, r3
 800e836:	43db      	mvns	r3, r3
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	4013      	ands	r3, r2
 800e83c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	691a      	ldr	r2, [r3, #16]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	f003 0307 	and.w	r3, r3, #7
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	fa02 f303 	lsl.w	r3, r2, r3
 800e84e:	693a      	ldr	r2, [r7, #16]
 800e850:	4313      	orrs	r3, r2
 800e852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	08da      	lsrs	r2, r3, #3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3208      	adds	r2, #8
 800e85c:	6939      	ldr	r1, [r7, #16]
 800e85e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	2203      	movs	r2, #3
 800e86e:	fa02 f303 	lsl.w	r3, r2, r3
 800e872:	43db      	mvns	r3, r3
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	4013      	ands	r3, r2
 800e878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	f003 0203 	and.w	r2, r3, #3
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	fa02 f303 	lsl.w	r3, r2, r3
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 8098 	beq.w	800e9d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e8a4:	4a54      	ldr	r2, [pc, #336]	@ (800e9f8 <HAL_GPIO_Init+0x2c8>)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	089b      	lsrs	r3, r3, #2
 800e8aa:	3302      	adds	r3, #2
 800e8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	f003 0303 	and.w	r3, r3, #3
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	220f      	movs	r2, #15
 800e8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	693a      	ldr	r2, [r7, #16]
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e8ce:	d019      	beq.n	800e904 <HAL_GPIO_Init+0x1d4>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a4a      	ldr	r2, [pc, #296]	@ (800e9fc <HAL_GPIO_Init+0x2cc>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d013      	beq.n	800e900 <HAL_GPIO_Init+0x1d0>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a49      	ldr	r2, [pc, #292]	@ (800ea00 <HAL_GPIO_Init+0x2d0>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d00d      	beq.n	800e8fc <HAL_GPIO_Init+0x1cc>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a48      	ldr	r2, [pc, #288]	@ (800ea04 <HAL_GPIO_Init+0x2d4>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d007      	beq.n	800e8f8 <HAL_GPIO_Init+0x1c8>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a47      	ldr	r2, [pc, #284]	@ (800ea08 <HAL_GPIO_Init+0x2d8>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d101      	bne.n	800e8f4 <HAL_GPIO_Init+0x1c4>
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	e008      	b.n	800e906 <HAL_GPIO_Init+0x1d6>
 800e8f4:	2307      	movs	r3, #7
 800e8f6:	e006      	b.n	800e906 <HAL_GPIO_Init+0x1d6>
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e004      	b.n	800e906 <HAL_GPIO_Init+0x1d6>
 800e8fc:	2302      	movs	r3, #2
 800e8fe:	e002      	b.n	800e906 <HAL_GPIO_Init+0x1d6>
 800e900:	2301      	movs	r3, #1
 800e902:	e000      	b.n	800e906 <HAL_GPIO_Init+0x1d6>
 800e904:	2300      	movs	r3, #0
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	f002 0203 	and.w	r2, r2, #3
 800e90c:	0092      	lsls	r2, r2, #2
 800e90e:	4093      	lsls	r3, r2
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	4313      	orrs	r3, r2
 800e914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e916:	4938      	ldr	r1, [pc, #224]	@ (800e9f8 <HAL_GPIO_Init+0x2c8>)
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	089b      	lsrs	r3, r3, #2
 800e91c:	3302      	adds	r3, #2
 800e91e:	693a      	ldr	r2, [r7, #16]
 800e920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e924:	4b39      	ldr	r3, [pc, #228]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	43db      	mvns	r3, r3
 800e92e:	693a      	ldr	r2, [r7, #16]
 800e930:	4013      	ands	r3, r2
 800e932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	4313      	orrs	r3, r2
 800e946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e948:	4a30      	ldr	r2, [pc, #192]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e94e:	4b2f      	ldr	r3, [pc, #188]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	43db      	mvns	r3, r3
 800e958:	693a      	ldr	r2, [r7, #16]
 800e95a:	4013      	ands	r3, r2
 800e95c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4313      	orrs	r3, r2
 800e970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e972:	4a26      	ldr	r2, [pc, #152]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e978:	4b24      	ldr	r3, [pc, #144]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e97e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	43db      	mvns	r3, r3
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	4013      	ands	r3, r2
 800e988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e99e:	4a1b      	ldr	r2, [pc, #108]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800e9a6:	4b19      	ldr	r3, [pc, #100]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	43db      	mvns	r3, r3
 800e9b2:	693a      	ldr	r2, [r7, #16]
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d003      	beq.n	800e9cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800e9c4:	693a      	ldr	r2, [r7, #16]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e9cc:	4a0f      	ldr	r2, [pc, #60]	@ (800ea0c <HAL_GPIO_Init+0x2dc>)
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f47f aeab 	bne.w	800e740 <HAL_GPIO_Init+0x10>
  }
}
 800e9ea:	bf00      	nop
 800e9ec:	bf00      	nop
 800e9ee:	371c      	adds	r7, #28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr
 800e9f8:	40010000 	.word	0x40010000
 800e9fc:	48000400 	.word	0x48000400
 800ea00:	48000800 	.word	0x48000800
 800ea04:	48000c00 	.word	0x48000c00
 800ea08:	48001000 	.word	0x48001000
 800ea0c:	58000800 	.word	0x58000800

0800ea10 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	691a      	ldr	r2, [r3, #16]
 800ea20:	887b      	ldrh	r3, [r7, #2]
 800ea22:	4013      	ands	r3, r2
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	73fb      	strb	r3, [r7, #15]
 800ea2c:	e001      	b.n	800ea32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	807b      	strh	r3, [r7, #2]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ea50:	787b      	ldrb	r3, [r7, #1]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ea56:	887a      	ldrh	r2, [r7, #2]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ea5c:	e002      	b.n	800ea64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ea5e:	887a      	ldrh	r2, [r7, #2]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	695b      	ldr	r3, [r3, #20]
 800ea80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ea82:	887a      	ldrh	r2, [r7, #2]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4013      	ands	r3, r2
 800ea88:	041a      	lsls	r2, r3, #16
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	43d9      	mvns	r1, r3
 800ea8e:	887b      	ldrh	r3, [r7, #2]
 800ea90:	400b      	ands	r3, r1
 800ea92:	431a      	orrs	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	619a      	str	r2, [r3, #24]
}
 800ea98:	bf00      	nop
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800eaae:	4b08      	ldr	r3, [pc, #32]	@ (800ead0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eab0:	68da      	ldr	r2, [r3, #12]
 800eab2:	88fb      	ldrh	r3, [r7, #6]
 800eab4:	4013      	ands	r3, r2
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d006      	beq.n	800eac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800eaba:	4a05      	ldr	r2, [pc, #20]	@ (800ead0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eabc:	88fb      	ldrh	r3, [r7, #6]
 800eabe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800eac0:	88fb      	ldrh	r3, [r7, #6]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f7 f804 	bl	8005ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	58000800 	.word	0x58000800

0800ead4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800eada:	4b0a      	ldr	r3, [pc, #40]	@ (800eb04 <HAL_HSEM_IRQHandler+0x30>)
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800eae0:	4b08      	ldr	r3, [pc, #32]	@ (800eb04 <HAL_HSEM_IRQHandler+0x30>)
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	43db      	mvns	r3, r3
 800eae8:	4906      	ldr	r1, [pc, #24]	@ (800eb04 <HAL_HSEM_IRQHandler+0x30>)
 800eaea:	4013      	ands	r3, r2
 800eaec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800eaee:	4a05      	ldr	r2, [pc, #20]	@ (800eb04 <HAL_HSEM_IRQHandler+0x30>)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f807 	bl	800eb08 <HAL_HSEM_FreeCallback>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	58001500 	.word	0x58001500

0800eb08 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	b08b      	sub	sp, #44	@ 0x2c
 800eb20:	af06      	add	r7, sp, #24
 800eb22:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e0cb      	b.n	800ecc6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7fc feea 	bl	800b91c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2203      	movs	r2, #3
 800eb4c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f005 f943 	bl	8013de0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
 800eb5e:	e040      	b.n	800ebe2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	6879      	ldr	r1, [r7, #4]
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	4613      	mov	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3301      	adds	r3, #1
 800eb72:	2201      	movs	r2, #1
 800eb74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	4413      	add	r3, r2
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	440b      	add	r3, r1
 800eb86:	7bfa      	ldrb	r2, [r7, #15]
 800eb88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	440b      	add	r3, r1
 800eb9a:	3303      	adds	r3, #3
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800eba0:	7bfa      	ldrb	r2, [r7, #15]
 800eba2:	6879      	ldr	r1, [r7, #4]
 800eba4:	4613      	mov	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4413      	add	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	440b      	add	r3, r1
 800ebae:	3338      	adds	r3, #56	@ 0x38
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ebb4:	7bfa      	ldrb	r2, [r7, #15]
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	440b      	add	r3, r1
 800ebc2:	333c      	adds	r3, #60	@ 0x3c
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ebc8:	7bfa      	ldrb	r2, [r7, #15]
 800ebca:	6879      	ldr	r1, [r7, #4]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4413      	add	r3, r2
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	440b      	add	r3, r1
 800ebd6:	3340      	adds	r3, #64	@ 0x40
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	73fb      	strb	r3, [r7, #15]
 800ebe2:	7bfa      	ldrb	r2, [r7, #15]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d3b9      	bcc.n	800eb60 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
 800ebf0:	e044      	b.n	800ec7c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ebf2:	7bfa      	ldrb	r2, [r7, #15]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	4413      	add	r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	440b      	add	r3, r1
 800ec00:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ec08:	7bfa      	ldrb	r2, [r7, #15]
 800ec0a:	6879      	ldr	r1, [r7, #4]
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	4413      	add	r3, r2
 800ec12:	00db      	lsls	r3, r3, #3
 800ec14:	440b      	add	r3, r1
 800ec16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ec1a:	7bfa      	ldrb	r2, [r7, #15]
 800ec1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ec1e:	7bfa      	ldrb	r2, [r7, #15]
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4613      	mov	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	440b      	add	r3, r1
 800ec2c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800ec30:	2200      	movs	r2, #0
 800ec32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ec34:	7bfa      	ldrb	r2, [r7, #15]
 800ec36:	6879      	ldr	r1, [r7, #4]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	440b      	add	r3, r1
 800ec42:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ec4a:	7bfa      	ldrb	r2, [r7, #15]
 800ec4c:	6879      	ldr	r1, [r7, #4]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	4413      	add	r3, r2
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	440b      	add	r3, r1
 800ec58:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ec60:	7bfa      	ldrb	r2, [r7, #15]
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	440b      	add	r3, r1
 800ec6e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	73fb      	strb	r3, [r7, #15]
 800ec7c:	7bfa      	ldrb	r2, [r7, #15]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d3b5      	bcc.n	800ebf2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	603b      	str	r3, [r7, #0]
 800ec8c:	687e      	ldr	r6, [r7, #4]
 800ec8e:	466d      	mov	r5, sp
 800ec90:	f106 0410 	add.w	r4, r6, #16
 800ec94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	1d33      	adds	r3, r6, #4
 800ec9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eca0:	6838      	ldr	r0, [r7, #0]
 800eca2:	f005 f8b8 	bl	8013e16 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d102      	bne.n	800ecc4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 f805 	bl	800ecce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3714      	adds	r7, #20
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	f043 0301 	orr.w	r3, r3, #1
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b084      	sub	sp, #16
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d01d      	beq.n	800ed70 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	791b      	ldrb	r3, [r3, #4]
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d102      	bne.n	800ed44 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7fc fd1a 	bl	800b778 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2202      	movs	r2, #2
 800ed48:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	689a      	ldr	r2, [r3, #8]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800ed60:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	711a      	strb	r2, [r3, #4]
 800ed6e:	e001      	b.n	800ed74 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800ed70:	2301      	movs	r3, #1
 800ed72:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
	...

0800ed80 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ed84:	4b05      	ldr	r3, [pc, #20]	@ (800ed9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a04      	ldr	r2, [pc, #16]	@ (800ed9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ed8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed8e:	6013      	str	r3, [r2, #0]
}
 800ed90:	bf00      	nop
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	58000400 	.word	0x58000400

0800eda0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800eda4:	4b04      	ldr	r3, [pc, #16]	@ (800edb8 <HAL_PWREx_GetVoltageRange+0x18>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800edac:	4618      	mov	r0, r3
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	58000400 	.word	0x58000400

0800edbc <LL_RCC_HSE_IsEnabledDiv2>:
{
 800edbc:	b480      	push	{r7}
 800edbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800edc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800edca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800edce:	d101      	bne.n	800edd4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800edd0:	2301      	movs	r3, #1
 800edd2:	e000      	b.n	800edd6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <LL_RCC_HSE_Enable>:
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ede4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800edee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800edf2:	6013      	str	r3, [r2, #0]
}
 800edf4:	bf00      	nop
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <LL_RCC_HSE_Disable>:
{
 800edfe:	b480      	push	{r7}
 800ee00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ee02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee10:	6013      	str	r3, [r2, #0]
}
 800ee12:	bf00      	nop
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <LL_RCC_HSE_IsReady>:
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ee20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee2e:	d101      	bne.n	800ee34 <LL_RCC_HSE_IsReady+0x18>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e000      	b.n	800ee36 <LL_RCC_HSE_IsReady+0x1a>
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <LL_RCC_HSI_Enable>:
{
 800ee40:	b480      	push	{r7}
 800ee42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ee44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee52:	6013      	str	r3, [r2, #0]
}
 800ee54:	bf00      	nop
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <LL_RCC_HSI_Disable>:
{
 800ee5e:	b480      	push	{r7}
 800ee60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ee62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee70:	6013      	str	r3, [r2, #0]
}
 800ee72:	bf00      	nop
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <LL_RCC_HSI_IsReady>:
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ee80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee8e:	d101      	bne.n	800ee94 <LL_RCC_HSI_IsReady+0x18>
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <LL_RCC_HSI_IsReady+0x1a>
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800eea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	061b      	lsls	r3, r3, #24
 800eeb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eeba:	4313      	orrs	r3, r2
 800eebc:	604b      	str	r3, [r1, #4]
}
 800eebe:	bf00      	nop
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <LL_RCC_HSI48_Enable>:
{
 800eeca:	b480      	push	{r7}
 800eecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800eece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eeda:	f043 0301 	orr.w	r3, r3, #1
 800eede:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800eee2:	bf00      	nop
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <LL_RCC_HSI48_Disable>:
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800eef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eefc:	f023 0301 	bic.w	r3, r3, #1
 800ef00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ef04:	bf00      	nop
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <LL_RCC_HSI48_IsReady>:
{
 800ef0e:	b480      	push	{r7}
 800ef10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ef12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d101      	bne.n	800ef26 <LL_RCC_HSI48_IsReady+0x18>
 800ef22:	2301      	movs	r3, #1
 800ef24:	e000      	b.n	800ef28 <LL_RCC_HSI48_IsReady+0x1a>
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <LL_RCC_LSE_Enable>:
{
 800ef32:	b480      	push	{r7}
 800ef34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ef36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ef42:	f043 0301 	orr.w	r3, r3, #1
 800ef46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ef4a:	bf00      	nop
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <LL_RCC_LSE_Disable>:
{
 800ef54:	b480      	push	{r7}
 800ef56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ef58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ef64:	f023 0301 	bic.w	r3, r3, #1
 800ef68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ef6c:	bf00      	nop
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr

0800ef76 <LL_RCC_LSE_EnableBypass>:
{
 800ef76:	b480      	push	{r7}
 800ef78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ef7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ef86:	f043 0304 	orr.w	r3, r3, #4
 800ef8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ef8e:	bf00      	nop
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <LL_RCC_LSE_DisableBypass>:
{
 800ef98:	b480      	push	{r7}
 800ef9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ef9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800efa8:	f023 0304 	bic.w	r3, r3, #4
 800efac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800efb0:	bf00      	nop
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <LL_RCC_LSE_IsReady>:
{
 800efba:	b480      	push	{r7}
 800efbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800efbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d101      	bne.n	800efd2 <LL_RCC_LSE_IsReady+0x18>
 800efce:	2301      	movs	r3, #1
 800efd0:	e000      	b.n	800efd4 <LL_RCC_LSE_IsReady+0x1a>
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr

0800efde <LL_RCC_LSI1_Enable>:
{
 800efde:	b480      	push	{r7}
 800efe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800efe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800efee:	f043 0301 	orr.w	r3, r3, #1
 800eff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800eff6:	bf00      	nop
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <LL_RCC_LSI1_Disable>:
{
 800f000:	b480      	push	{r7}
 800f002:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800f004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f00c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f010:	f023 0301 	bic.w	r3, r3, #1
 800f014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f018:	bf00      	nop
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <LL_RCC_LSI1_IsReady>:
{
 800f022:	b480      	push	{r7}
 800f024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800f026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f02e:	f003 0302 	and.w	r3, r3, #2
 800f032:	2b02      	cmp	r3, #2
 800f034:	d101      	bne.n	800f03a <LL_RCC_LSI1_IsReady+0x18>
 800f036:	2301      	movs	r3, #1
 800f038:	e000      	b.n	800f03c <LL_RCC_LSI1_IsReady+0x1a>
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <LL_RCC_LSI2_Enable>:
{
 800f046:	b480      	push	{r7}
 800f048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f04a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f04e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f056:	f043 0304 	orr.w	r3, r3, #4
 800f05a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f05e:	bf00      	nop
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <LL_RCC_LSI2_Disable>:
{
 800f068:	b480      	push	{r7}
 800f06a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f06c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f078:	f023 0304 	bic.w	r3, r3, #4
 800f07c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f080:	bf00      	nop
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <LL_RCC_LSI2_IsReady>:
{
 800f08a:	b480      	push	{r7}
 800f08c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800f08e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f096:	f003 0308 	and.w	r3, r3, #8
 800f09a:	2b08      	cmp	r3, #8
 800f09c:	d101      	bne.n	800f0a2 <LL_RCC_LSI2_IsReady+0x18>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <LL_RCC_LSI2_IsReady+0x1a>
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr

0800f0ae <LL_RCC_LSI2_SetTrimming>:
{
 800f0ae:	b480      	push	{r7}
 800f0b0:	b083      	sub	sp, #12
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800f0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f0be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	021b      	lsls	r3, r3, #8
 800f0c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <LL_RCC_MSI_Enable>:
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f0ea:	f043 0301 	orr.w	r3, r3, #1
 800f0ee:	6013      	str	r3, [r2, #0]
}
 800f0f0:	bf00      	nop
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <LL_RCC_MSI_Disable>:
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f0fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f108:	f023 0301 	bic.w	r3, r3, #1
 800f10c:	6013      	str	r3, [r2, #0]
}
 800f10e:	bf00      	nop
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <LL_RCC_MSI_IsReady>:
{
 800f118:	b480      	push	{r7}
 800f11a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 0302 	and.w	r3, r3, #2
 800f126:	2b02      	cmp	r3, #2
 800f128:	d101      	bne.n	800f12e <LL_RCC_MSI_IsReady+0x16>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <LL_RCC_MSI_IsReady+0x18>
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <LL_RCC_MSI_SetRange>:
{
 800f13a:	b480      	push	{r7}
 800f13c:	b083      	sub	sp, #12
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800f142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f14c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4313      	orrs	r3, r2
 800f154:	600b      	str	r3, [r1, #0]
}
 800f156:	bf00      	nop
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <LL_RCC_MSI_GetRange>:
{
 800f162:	b480      	push	{r7}
 800f164:	b083      	sub	sp, #12
 800f166:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800f168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f172:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2bb0      	cmp	r3, #176	@ 0xb0
 800f178:	d901      	bls.n	800f17e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800f17a:	23b0      	movs	r3, #176	@ 0xb0
 800f17c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800f17e:	687b      	ldr	r3, [r7, #4]
}
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <LL_RCC_MSI_SetCalibTrimming>:
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	021b      	lsls	r3, r3, #8
 800f1a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	604b      	str	r3, [r1, #4]
}
 800f1aa:	bf00      	nop
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <LL_RCC_SetSysClkSource>:
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b083      	sub	sp, #12
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f1be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	f023 0203 	bic.w	r2, r3, #3
 800f1c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	608b      	str	r3, [r1, #8]
}
 800f1d2:	bf00      	nop
 800f1d4:	370c      	adds	r7, #12
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <LL_RCC_GetSysClkSource>:
{
 800f1de:	b480      	push	{r7}
 800f1e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	f003 030c 	and.w	r3, r3, #12
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <LL_RCC_SetAHBPrescaler>:
{
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f1fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4313      	orrs	r3, r2
 800f210:	608b      	str	r3, [r1, #8]
}
 800f212:	bf00      	nop
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr

0800f21e <LL_C2_RCC_SetAHBPrescaler>:
{
 800f21e:	b480      	push	{r7}
 800f220:	b083      	sub	sp, #12
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800f226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f22a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f22e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4313      	orrs	r3, r2
 800f23a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800f23e:	bf00      	nop
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <LL_RCC_SetAHB4Prescaler>:
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f256:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f25a:	f023 020f 	bic.w	r2, r3, #15
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	091b      	lsrs	r3, r3, #4
 800f262:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f266:	4313      	orrs	r3, r2
 800f268:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <LL_RCC_SetAPB1Prescaler>:
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f28a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4313      	orrs	r3, r2
 800f292:	608b      	str	r3, [r1, #8]
}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <LL_RCC_SetAPB2Prescaler>:
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f2a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800f2b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	608b      	str	r3, [r1, #8]
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <LL_RCC_GetAHBPrescaler>:
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f2cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <LL_RCC_GetAHB4Prescaler>:
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f2e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <LL_RCC_GetAPB1Prescaler>:
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <LL_RCC_GetAPB2Prescaler>:
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800f322:	4618      	mov	r0, r3
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800f32c:	b480      	push	{r7}
 800f32e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f33a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f33e:	6013      	str	r3, [r2, #0]
}
 800f340:	bf00      	nop
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr

0800f34a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800f34a:	b480      	push	{r7}
 800f34c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f34e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f35c:	6013      	str	r3, [r2, #0]
}
 800f35e:	bf00      	nop
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800f368:	b480      	push	{r7}
 800f36a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f36c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f37a:	d101      	bne.n	800f380 <LL_RCC_PLL_IsReady+0x18>
 800f37c:	2301      	movs	r3, #1
 800f37e:	e000      	b.n	800f382 <LL_RCC_PLL_IsReady+0x1a>
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f38c:	b480      	push	{r7}
 800f38e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	0a1b      	lsrs	r3, r3, #8
 800f398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f3aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f3c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f3d6:	b480      	push	{r7}
 800f3d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f3da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	f003 0303 	and.w	r3, r3, #3
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800f3f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f400:	d101      	bne.n	800f406 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800f402:	2301      	movs	r3, #1
 800f404:	e000      	b.n	800f408 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800f412:	b480      	push	{r7}
 800f414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800f416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f41a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f41e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f426:	d101      	bne.n	800f42c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800f428:	2301      	movs	r3, #1
 800f42a:	e000      	b.n	800f42e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800f438:	b480      	push	{r7}
 800f43a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800f43c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f440:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f44c:	d101      	bne.n	800f452 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800f44e:	2301      	movs	r3, #1
 800f450:	e000      	b.n	800f454 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800f45e:	b480      	push	{r7}
 800f460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800f462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f46c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f470:	d101      	bne.n	800f476 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800f472:	2301      	movs	r3, #1
 800f474:	e000      	b.n	800f478 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800f482:	b480      	push	{r7}
 800f484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800f486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f494:	d101      	bne.n	800f49a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800f496:	2301      	movs	r3, #1
 800f498:	e000      	b.n	800f49c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
	...

0800f4a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f4a8:	b590      	push	{r4, r7, lr}
 800f4aa:	b08d      	sub	sp, #52	@ 0x34
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e363      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f003 0320 	and.w	r3, r3, #32
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 808d 	beq.w	800f5e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f4c8:	f7ff fe89 	bl	800f1de <LL_RCC_GetSysClkSource>
 800f4cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f4ce:	f7ff ff82 	bl	800f3d6 <LL_RCC_PLL_GetMainSource>
 800f4d2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d005      	beq.n	800f4e6 <HAL_RCC_OscConfig+0x3e>
 800f4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4dc:	2b0c      	cmp	r3, #12
 800f4de:	d147      	bne.n	800f570 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800f4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d144      	bne.n	800f570 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d101      	bne.n	800f4f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e347      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f4f6:	f7ff fe34 	bl	800f162 <LL_RCC_MSI_GetRange>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	429c      	cmp	r4, r3
 800f4fe:	d914      	bls.n	800f52a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f504:	4618      	mov	r0, r3
 800f506:	f000 fd2f 	bl	800ff68 <RCC_SetFlashLatencyFromMSIRange>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800f510:	2301      	movs	r3, #1
 800f512:	e336      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f518:	4618      	mov	r0, r3
 800f51a:	f7ff fe0e 	bl	800f13a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff fe32 	bl	800f18c <LL_RCC_MSI_SetCalibTrimming>
 800f528:	e013      	b.n	800f552 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f52e:	4618      	mov	r0, r3
 800f530:	f7ff fe03 	bl	800f13a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7ff fe27 	bl	800f18c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f542:	4618      	mov	r0, r3
 800f544:	f000 fd10 	bl	800ff68 <RCC_SetFlashLatencyFromMSIRange>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e317      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f552:	f000 fcc9 	bl	800fee8 <HAL_RCC_GetHCLKFreq>
 800f556:	4603      	mov	r3, r0
 800f558:	4aa4      	ldr	r2, [pc, #656]	@ (800f7ec <HAL_RCC_OscConfig+0x344>)
 800f55a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f55c:	4ba4      	ldr	r3, [pc, #656]	@ (800f7f0 <HAL_RCC_OscConfig+0x348>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe fc73 	bl	800de4c <HAL_InitTick>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d039      	beq.n	800f5e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e308      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d01e      	beq.n	800f5b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f578:	f7ff fdb0 	bl	800f0dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f57c:	f7fe fcb4 	bl	800dee8 <HAL_GetTick>
 800f580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800f582:	e008      	b.n	800f596 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f584:	f7fe fcb0 	bl	800dee8 <HAL_GetTick>
 800f588:	4602      	mov	r2, r0
 800f58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d901      	bls.n	800f596 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e2f5      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800f596:	f7ff fdbf 	bl	800f118 <LL_RCC_MSI_IsReady>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d0f1      	beq.n	800f584 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff fdc8 	bl	800f13a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff fdec 	bl	800f18c <LL_RCC_MSI_SetCalibTrimming>
 800f5b4:	e015      	b.n	800f5e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f5b6:	f7ff fda0 	bl	800f0fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f5ba:	f7fe fc95 	bl	800dee8 <HAL_GetTick>
 800f5be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f5c0:	e008      	b.n	800f5d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f5c2:	f7fe fc91 	bl	800dee8 <HAL_GetTick>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	d901      	bls.n	800f5d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	e2d6      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f5d4:	f7ff fda0 	bl	800f118 <LL_RCC_MSI_IsReady>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1f1      	bne.n	800f5c2 <HAL_RCC_OscConfig+0x11a>
 800f5de:	e000      	b.n	800f5e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f5e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d047      	beq.n	800f67e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f5ee:	f7ff fdf6 	bl	800f1de <LL_RCC_GetSysClkSource>
 800f5f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f5f4:	f7ff feef 	bl	800f3d6 <LL_RCC_PLL_GetMainSource>
 800f5f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f5fa:	6a3b      	ldr	r3, [r7, #32]
 800f5fc:	2b08      	cmp	r3, #8
 800f5fe:	d005      	beq.n	800f60c <HAL_RCC_OscConfig+0x164>
 800f600:	6a3b      	ldr	r3, [r7, #32]
 800f602:	2b0c      	cmp	r3, #12
 800f604:	d108      	bne.n	800f618 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	2b03      	cmp	r3, #3
 800f60a:	d105      	bne.n	800f618 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d134      	bne.n	800f67e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800f614:	2301      	movs	r3, #1
 800f616:	e2b4      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f620:	d102      	bne.n	800f628 <HAL_RCC_OscConfig+0x180>
 800f622:	f7ff fbdd 	bl	800ede0 <LL_RCC_HSE_Enable>
 800f626:	e001      	b.n	800f62c <HAL_RCC_OscConfig+0x184>
 800f628:	f7ff fbe9 	bl	800edfe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d012      	beq.n	800f65a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f634:	f7fe fc58 	bl	800dee8 <HAL_GetTick>
 800f638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f63a:	e008      	b.n	800f64e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f63c:	f7fe fc54 	bl	800dee8 <HAL_GetTick>
 800f640:	4602      	mov	r2, r0
 800f642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f644:	1ad3      	subs	r3, r2, r3
 800f646:	2b64      	cmp	r3, #100	@ 0x64
 800f648:	d901      	bls.n	800f64e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f64a:	2303      	movs	r3, #3
 800f64c:	e299      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f64e:	f7ff fbe5 	bl	800ee1c <LL_RCC_HSE_IsReady>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0f1      	beq.n	800f63c <HAL_RCC_OscConfig+0x194>
 800f658:	e011      	b.n	800f67e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f65a:	f7fe fc45 	bl	800dee8 <HAL_GetTick>
 800f65e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f660:	e008      	b.n	800f674 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f662:	f7fe fc41 	bl	800dee8 <HAL_GetTick>
 800f666:	4602      	mov	r2, r0
 800f668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	2b64      	cmp	r3, #100	@ 0x64
 800f66e:	d901      	bls.n	800f674 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800f670:	2303      	movs	r3, #3
 800f672:	e286      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f674:	f7ff fbd2 	bl	800ee1c <LL_RCC_HSE_IsReady>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1f1      	bne.n	800f662 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 0302 	and.w	r3, r3, #2
 800f686:	2b00      	cmp	r3, #0
 800f688:	d04c      	beq.n	800f724 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f68a:	f7ff fda8 	bl	800f1de <LL_RCC_GetSysClkSource>
 800f68e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f690:	f7ff fea1 	bl	800f3d6 <LL_RCC_PLL_GetMainSource>
 800f694:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	2b04      	cmp	r3, #4
 800f69a:	d005      	beq.n	800f6a8 <HAL_RCC_OscConfig+0x200>
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	2b0c      	cmp	r3, #12
 800f6a0:	d10e      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d10b      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e266      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff fbf1 	bl	800eea0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f6be:	e031      	b.n	800f724 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d019      	beq.n	800f6fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f6c8:	f7ff fbba 	bl	800ee40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6cc:	f7fe fc0c 	bl	800dee8 <HAL_GetTick>
 800f6d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f6d2:	e008      	b.n	800f6e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f6d4:	f7fe fc08 	bl	800dee8 <HAL_GetTick>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d901      	bls.n	800f6e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	e24d      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f6e6:	f7ff fbc9 	bl	800ee7c <LL_RCC_HSI_IsReady>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0f1      	beq.n	800f6d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	691b      	ldr	r3, [r3, #16]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fbd3 	bl	800eea0 <LL_RCC_HSI_SetCalibTrimming>
 800f6fa:	e013      	b.n	800f724 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f6fc:	f7ff fbaf 	bl	800ee5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f700:	f7fe fbf2 	bl	800dee8 <HAL_GetTick>
 800f704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f706:	e008      	b.n	800f71a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f708:	f7fe fbee 	bl	800dee8 <HAL_GetTick>
 800f70c:	4602      	mov	r2, r0
 800f70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	2b02      	cmp	r3, #2
 800f714:	d901      	bls.n	800f71a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800f716:	2303      	movs	r3, #3
 800f718:	e233      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f71a:	f7ff fbaf 	bl	800ee7c <LL_RCC_HSI_IsReady>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1f1      	bne.n	800f708 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f003 0308 	and.w	r3, r3, #8
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f000 80a3 	beq.w	800f884 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	695b      	ldr	r3, [r3, #20]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d076      	beq.n	800f834 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f003 0310 	and.w	r3, r3, #16
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d046      	beq.n	800f7e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800f752:	f7ff fc66 	bl	800f022 <LL_RCC_LSI1_IsReady>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d113      	bne.n	800f784 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800f75c:	f7ff fc3f 	bl	800efde <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f760:	f7fe fbc2 	bl	800dee8 <HAL_GetTick>
 800f764:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f766:	e008      	b.n	800f77a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f768:	f7fe fbbe 	bl	800dee8 <HAL_GetTick>
 800f76c:	4602      	mov	r2, r0
 800f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	2b02      	cmp	r3, #2
 800f774:	d901      	bls.n	800f77a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800f776:	2303      	movs	r3, #3
 800f778:	e203      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f77a:	f7ff fc52 	bl	800f022 <LL_RCC_LSI1_IsReady>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0f1      	beq.n	800f768 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800f784:	f7ff fc5f 	bl	800f046 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f788:	f7fe fbae 	bl	800dee8 <HAL_GetTick>
 800f78c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f78e:	e008      	b.n	800f7a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f790:	f7fe fbaa 	bl	800dee8 <HAL_GetTick>
 800f794:	4602      	mov	r2, r0
 800f796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d901      	bls.n	800f7a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	e1ef      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f7a2:	f7ff fc72 	bl	800f08a <LL_RCC_LSI2_IsReady>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d0f1      	beq.n	800f790 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7ff fc7c 	bl	800f0ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800f7b6:	f7ff fc23 	bl	800f000 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7ba:	f7fe fb95 	bl	800dee8 <HAL_GetTick>
 800f7be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f7c0:	e008      	b.n	800f7d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f7c2:	f7fe fb91 	bl	800dee8 <HAL_GetTick>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d901      	bls.n	800f7d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800f7d0:	2303      	movs	r3, #3
 800f7d2:	e1d6      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f7d4:	f7ff fc25 	bl	800f022 <LL_RCC_LSI1_IsReady>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1f1      	bne.n	800f7c2 <HAL_RCC_OscConfig+0x31a>
 800f7de:	e051      	b.n	800f884 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800f7e0:	f7ff fbfd 	bl	800efde <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7e4:	f7fe fb80 	bl	800dee8 <HAL_GetTick>
 800f7e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f7ea:	e00c      	b.n	800f806 <HAL_RCC_OscConfig+0x35e>
 800f7ec:	20000018 	.word	0x20000018
 800f7f0:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f7f4:	f7fe fb78 	bl	800dee8 <HAL_GetTick>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fc:	1ad3      	subs	r3, r2, r3
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d901      	bls.n	800f806 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800f802:	2303      	movs	r3, #3
 800f804:	e1bd      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f806:	f7ff fc0c 	bl	800f022 <LL_RCC_LSI1_IsReady>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d0f1      	beq.n	800f7f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800f810:	f7ff fc2a 	bl	800f068 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f814:	e008      	b.n	800f828 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f816:	f7fe fb67 	bl	800dee8 <HAL_GetTick>
 800f81a:	4602      	mov	r2, r0
 800f81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	2b03      	cmp	r3, #3
 800f822:	d901      	bls.n	800f828 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800f824:	2303      	movs	r3, #3
 800f826:	e1ac      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f828:	f7ff fc2f 	bl	800f08a <LL_RCC_LSI2_IsReady>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1f1      	bne.n	800f816 <HAL_RCC_OscConfig+0x36e>
 800f832:	e027      	b.n	800f884 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800f834:	f7ff fc18 	bl	800f068 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f838:	f7fe fb56 	bl	800dee8 <HAL_GetTick>
 800f83c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f83e:	e008      	b.n	800f852 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f840:	f7fe fb52 	bl	800dee8 <HAL_GetTick>
 800f844:	4602      	mov	r2, r0
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d901      	bls.n	800f852 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f84e:	2303      	movs	r3, #3
 800f850:	e197      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f852:	f7ff fc1a 	bl	800f08a <LL_RCC_LSI2_IsReady>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1f1      	bne.n	800f840 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800f85c:	f7ff fbd0 	bl	800f000 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f860:	f7fe fb42 	bl	800dee8 <HAL_GetTick>
 800f864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f866:	e008      	b.n	800f87a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f868:	f7fe fb3e 	bl	800dee8 <HAL_GetTick>
 800f86c:	4602      	mov	r2, r0
 800f86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	2b02      	cmp	r3, #2
 800f874:	d901      	bls.n	800f87a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800f876:	2303      	movs	r3, #3
 800f878:	e183      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f87a:	f7ff fbd2 	bl	800f022 <LL_RCC_LSI1_IsReady>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1f1      	bne.n	800f868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d05b      	beq.n	800f948 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f890:	4ba7      	ldr	r3, [pc, #668]	@ (800fb30 <HAL_RCC_OscConfig+0x688>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d114      	bne.n	800f8c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f89c:	f7ff fa70 	bl	800ed80 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f8a0:	f7fe fb22 	bl	800dee8 <HAL_GetTick>
 800f8a4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f8a6:	e008      	b.n	800f8ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8a8:	f7fe fb1e 	bl	800dee8 <HAL_GetTick>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d901      	bls.n	800f8ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	e163      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f8ba:	4b9d      	ldr	r3, [pc, #628]	@ (800fb30 <HAL_RCC_OscConfig+0x688>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d0f0      	beq.n	800f8a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d102      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x42c>
 800f8ce:	f7ff fb30 	bl	800ef32 <LL_RCC_LSE_Enable>
 800f8d2:	e00c      	b.n	800f8ee <HAL_RCC_OscConfig+0x446>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	2b05      	cmp	r3, #5
 800f8da:	d104      	bne.n	800f8e6 <HAL_RCC_OscConfig+0x43e>
 800f8dc:	f7ff fb4b 	bl	800ef76 <LL_RCC_LSE_EnableBypass>
 800f8e0:	f7ff fb27 	bl	800ef32 <LL_RCC_LSE_Enable>
 800f8e4:	e003      	b.n	800f8ee <HAL_RCC_OscConfig+0x446>
 800f8e6:	f7ff fb35 	bl	800ef54 <LL_RCC_LSE_Disable>
 800f8ea:	f7ff fb55 	bl	800ef98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d014      	beq.n	800f920 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8f6:	f7fe faf7 	bl	800dee8 <HAL_GetTick>
 800f8fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f8fc:	e00a      	b.n	800f914 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8fe:	f7fe faf3 	bl	800dee8 <HAL_GetTick>
 800f902:	4602      	mov	r2, r0
 800f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d901      	bls.n	800f914 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800f910:	2303      	movs	r3, #3
 800f912:	e136      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f914:	f7ff fb51 	bl	800efba <LL_RCC_LSE_IsReady>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d0ef      	beq.n	800f8fe <HAL_RCC_OscConfig+0x456>
 800f91e:	e013      	b.n	800f948 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f920:	f7fe fae2 	bl	800dee8 <HAL_GetTick>
 800f924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f926:	e00a      	b.n	800f93e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f928:	f7fe fade 	bl	800dee8 <HAL_GetTick>
 800f92c:	4602      	mov	r2, r0
 800f92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f936:	4293      	cmp	r3, r2
 800f938:	d901      	bls.n	800f93e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800f93a:	2303      	movs	r3, #3
 800f93c:	e121      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f93e:	f7ff fb3c 	bl	800efba <LL_RCC_LSE_IsReady>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1ef      	bne.n	800f928 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f950:	2b00      	cmp	r3, #0
 800f952:	d02c      	beq.n	800f9ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d014      	beq.n	800f986 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f95c:	f7ff fab5 	bl	800eeca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f960:	f7fe fac2 	bl	800dee8 <HAL_GetTick>
 800f964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f966:	e008      	b.n	800f97a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f968:	f7fe fabe 	bl	800dee8 <HAL_GetTick>
 800f96c:	4602      	mov	r2, r0
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	2b02      	cmp	r3, #2
 800f974:	d901      	bls.n	800f97a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800f976:	2303      	movs	r3, #3
 800f978:	e103      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f97a:	f7ff fac8 	bl	800ef0e <LL_RCC_HSI48_IsReady>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0f1      	beq.n	800f968 <HAL_RCC_OscConfig+0x4c0>
 800f984:	e013      	b.n	800f9ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f986:	f7ff fab1 	bl	800eeec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f98a:	f7fe faad 	bl	800dee8 <HAL_GetTick>
 800f98e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f990:	e008      	b.n	800f9a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f992:	f7fe faa9 	bl	800dee8 <HAL_GetTick>
 800f996:	4602      	mov	r2, r0
 800f998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	2b02      	cmp	r3, #2
 800f99e:	d901      	bls.n	800f9a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e0ee      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f9a4:	f7ff fab3 	bl	800ef0e <LL_RCC_HSI48_IsReady>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1f1      	bne.n	800f992 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f000 80e4 	beq.w	800fb80 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9b8:	f7ff fc11 	bl	800f1de <LL_RCC_GetSysClkSource>
 800f9bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800f9be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	f040 80b4 	bne.w	800fb38 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f003 0203 	and.w	r2, r3, #3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d123      	bne.n	800fa26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d11c      	bne.n	800fa26 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	0a1b      	lsrs	r3, r3, #8
 800f9f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d114      	bne.n	800fa26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d10d      	bne.n	800fa26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d106      	bne.n	800fa26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d05d      	beq.n	800fae2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	2b0c      	cmp	r3, #12
 800fa2a:	d058      	beq.n	800fade <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fa2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e0a1      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fa3e:	f7ff fc84 	bl	800f34a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fa42:	f7fe fa51 	bl	800dee8 <HAL_GetTick>
 800fa46:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa48:	e008      	b.n	800fa5c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa4a:	f7fe fa4d 	bl	800dee8 <HAL_GetTick>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	2b02      	cmp	r3, #2
 800fa56:	d901      	bls.n	800fa5c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800fa58:	2303      	movs	r3, #3
 800fa5a:	e092      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1ef      	bne.n	800fa4a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fa6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa6e:	68da      	ldr	r2, [r3, #12]
 800fa70:	4b30      	ldr	r3, [pc, #192]	@ (800fb34 <HAL_RCC_OscConfig+0x68c>)
 800fa72:	4013      	ands	r3, r2
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fa7c:	4311      	orrs	r1, r2
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fa82:	0212      	lsls	r2, r2, #8
 800fa84:	4311      	orrs	r1, r2
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fa8a:	4311      	orrs	r1, r2
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fa90:	4311      	orrs	r1, r2
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800fa96:	430a      	orrs	r2, r1
 800fa98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800faa0:	f7ff fc44 	bl	800f32c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800faa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800faae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fab4:	f7fe fa18 	bl	800dee8 <HAL_GetTick>
 800fab8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800faba:	e008      	b.n	800face <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fabc:	f7fe fa14 	bl	800dee8 <HAL_GetTick>
 800fac0:	4602      	mov	r2, r0
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	1ad3      	subs	r3, r2, r3
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	d901      	bls.n	800face <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800faca:	2303      	movs	r3, #3
 800facc:	e059      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800face:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d0ef      	beq.n	800fabc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fadc:	e050      	b.n	800fb80 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fade:	2301      	movs	r3, #1
 800fae0:	e04f      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800faec:	2b00      	cmp	r3, #0
 800faee:	d147      	bne.n	800fb80 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800faf0:	f7ff fc1c 	bl	800f32c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800faf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fafe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fb02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fb04:	f7fe f9f0 	bl	800dee8 <HAL_GetTick>
 800fb08:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fb0a:	e008      	b.n	800fb1e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb0c:	f7fe f9ec 	bl	800dee8 <HAL_GetTick>
 800fb10:	4602      	mov	r2, r0
 800fb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d901      	bls.n	800fb1e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	e031      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fb1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0ef      	beq.n	800fb0c <HAL_RCC_OscConfig+0x664>
 800fb2c:	e028      	b.n	800fb80 <HAL_RCC_OscConfig+0x6d8>
 800fb2e:	bf00      	nop
 800fb30:	58000400 	.word	0x58000400
 800fb34:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	2b0c      	cmp	r3, #12
 800fb3c:	d01e      	beq.n	800fb7c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb3e:	f7ff fc04 	bl	800f34a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb42:	f7fe f9d1 	bl	800dee8 <HAL_GetTick>
 800fb46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fb48:	e008      	b.n	800fb5c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb4a:	f7fe f9cd 	bl	800dee8 <HAL_GetTick>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	d901      	bls.n	800fb5c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800fb58:	2303      	movs	r3, #3
 800fb5a:	e012      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fb5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1ef      	bne.n	800fb4a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800fb6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb6e:	68da      	ldr	r2, [r3, #12]
 800fb70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb74:	4b05      	ldr	r3, [pc, #20]	@ (800fb8c <HAL_RCC_OscConfig+0x6e4>)
 800fb76:	4013      	ands	r3, r2
 800fb78:	60cb      	str	r3, [r1, #12]
 800fb7a:	e001      	b.n	800fb80 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e000      	b.n	800fb82 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3734      	adds	r7, #52	@ 0x34
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd90      	pop	{r4, r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	eefefffc 	.word	0xeefefffc

0800fb90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d101      	bne.n	800fba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fba0:	2301      	movs	r3, #1
 800fba2:	e12d      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fba4:	4b98      	ldr	r3, [pc, #608]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f003 0307 	and.w	r3, r3, #7
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d91b      	bls.n	800fbea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fbb2:	4b95      	ldr	r3, [pc, #596]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f023 0207 	bic.w	r2, r3, #7
 800fbba:	4993      	ldr	r1, [pc, #588]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbc2:	f7fe f991 	bl	800dee8 <HAL_GetTick>
 800fbc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbc8:	e008      	b.n	800fbdc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fbca:	f7fe f98d 	bl	800dee8 <HAL_GetTick>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d901      	bls.n	800fbdc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e111      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbdc:	4b8a      	ldr	r3, [pc, #552]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 0307 	and.w	r3, r3, #7
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d1ef      	bne.n	800fbca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0302 	and.w	r3, r3, #2
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d016      	beq.n	800fc24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff fafb 	bl	800f1f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fc00:	f7fe f972 	bl	800dee8 <HAL_GetTick>
 800fc04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fc06:	e008      	b.n	800fc1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fc08:	f7fe f96e 	bl	800dee8 <HAL_GetTick>
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d901      	bls.n	800fc1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800fc16:	2303      	movs	r3, #3
 800fc18:	e0f2      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fc1a:	f7ff fbe8 	bl	800f3ee <LL_RCC_IsActiveFlag_HPRE>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d0f1      	beq.n	800fc08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 0320 	and.w	r3, r3, #32
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d016      	beq.n	800fc5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff faf2 	bl	800f21e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fc3a:	f7fe f955 	bl	800dee8 <HAL_GetTick>
 800fc3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800fc40:	e008      	b.n	800fc54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fc42:	f7fe f951 	bl	800dee8 <HAL_GetTick>
 800fc46:	4602      	mov	r2, r0
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d901      	bls.n	800fc54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800fc50:	2303      	movs	r3, #3
 800fc52:	e0d5      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800fc54:	f7ff fbdd 	bl	800f412 <LL_RCC_IsActiveFlag_C2HPRE>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d0f1      	beq.n	800fc42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d016      	beq.n	800fc98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	699b      	ldr	r3, [r3, #24]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff faeb 	bl	800f24a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fc74:	f7fe f938 	bl	800dee8 <HAL_GetTick>
 800fc78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fc7a:	e008      	b.n	800fc8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fc7c:	f7fe f934 	bl	800dee8 <HAL_GetTick>
 800fc80:	4602      	mov	r2, r0
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	2b02      	cmp	r3, #2
 800fc88:	d901      	bls.n	800fc8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800fc8a:	2303      	movs	r3, #3
 800fc8c:	e0b8      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fc8e:	f7ff fbd3 	bl	800f438 <LL_RCC_IsActiveFlag_SHDHPRE>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d0f1      	beq.n	800fc7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f003 0304 	and.w	r3, r3, #4
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d016      	beq.n	800fcd2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff fae5 	bl	800f278 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fcae:	f7fe f91b 	bl	800dee8 <HAL_GetTick>
 800fcb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fcb4:	e008      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fcb6:	f7fe f917 	bl	800dee8 <HAL_GetTick>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d901      	bls.n	800fcc8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800fcc4:	2303      	movs	r3, #3
 800fcc6:	e09b      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fcc8:	f7ff fbc9 	bl	800f45e <LL_RCC_IsActiveFlag_PPRE1>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d0f1      	beq.n	800fcb6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f003 0308 	and.w	r3, r3, #8
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d017      	beq.n	800fd0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff fadb 	bl	800f2a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fcea:	f7fe f8fd 	bl	800dee8 <HAL_GetTick>
 800fcee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fcf0:	e008      	b.n	800fd04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fcf2:	f7fe f8f9 	bl	800dee8 <HAL_GetTick>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d901      	bls.n	800fd04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800fd00:	2303      	movs	r3, #3
 800fd02:	e07d      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fd04:	f7ff fbbd 	bl	800f482 <LL_RCC_IsActiveFlag_PPRE2>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0f1      	beq.n	800fcf2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d043      	beq.n	800fda2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	2b02      	cmp	r3, #2
 800fd20:	d106      	bne.n	800fd30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800fd22:	f7ff f87b 	bl	800ee1c <LL_RCC_HSE_IsReady>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d11e      	bne.n	800fd6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e067      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d106      	bne.n	800fd46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800fd38:	f7ff fb16 	bl	800f368 <LL_RCC_PLL_IsReady>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d113      	bne.n	800fd6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e05c      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d106      	bne.n	800fd5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800fd4e:	f7ff f9e3 	bl	800f118 <LL_RCC_MSI_IsReady>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d108      	bne.n	800fd6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e051      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800fd5c:	f7ff f88e 	bl	800ee7c <LL_RCC_HSI_IsReady>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d101      	bne.n	800fd6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fd66:	2301      	movs	r3, #1
 800fd68:	e04a      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff fa21 	bl	800f1b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd74:	f7fe f8b8 	bl	800dee8 <HAL_GetTick>
 800fd78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd7a:	e00a      	b.n	800fd92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fd7c:	f7fe f8b4 	bl	800dee8 <HAL_GetTick>
 800fd80:	4602      	mov	r2, r0
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	1ad3      	subs	r3, r2, r3
 800fd86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d901      	bls.n	800fd92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800fd8e:	2303      	movs	r3, #3
 800fd90:	e036      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd92:	f7ff fa24 	bl	800f1de <LL_RCC_GetSysClkSource>
 800fd96:	4602      	mov	r2, r0
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d1ec      	bne.n	800fd7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fda2:	4b19      	ldr	r3, [pc, #100]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	683a      	ldr	r2, [r7, #0]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d21b      	bcs.n	800fde8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fdb0:	4b15      	ldr	r3, [pc, #84]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f023 0207 	bic.w	r2, r3, #7
 800fdb8:	4913      	ldr	r1, [pc, #76]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdc0:	f7fe f892 	bl	800dee8 <HAL_GetTick>
 800fdc4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fdc6:	e008      	b.n	800fdda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fdc8:	f7fe f88e 	bl	800dee8 <HAL_GetTick>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d901      	bls.n	800fdda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800fdd6:	2303      	movs	r3, #3
 800fdd8:	e012      	b.n	800fe00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fdda:	4b0b      	ldr	r3, [pc, #44]	@ (800fe08 <HAL_RCC_ClockConfig+0x278>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f003 0307 	and.w	r3, r3, #7
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d1ef      	bne.n	800fdc8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fde8:	f000 f87e 	bl	800fee8 <HAL_RCC_GetHCLKFreq>
 800fdec:	4603      	mov	r3, r0
 800fdee:	4a07      	ldr	r2, [pc, #28]	@ (800fe0c <HAL_RCC_ClockConfig+0x27c>)
 800fdf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800fdf2:	f7fe f885 	bl	800df00 <HAL_GetTickPrio>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fe f827 	bl	800de4c <HAL_InitTick>
 800fdfe:	4603      	mov	r3, r0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	58004000 	.word	0x58004000
 800fe0c:	20000018 	.word	0x20000018

0800fe10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe10:	b590      	push	{r4, r7, lr}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe16:	f7ff f9e2 	bl	800f1de <LL_RCC_GetSysClkSource>
 800fe1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10a      	bne.n	800fe38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800fe22:	f7ff f99e 	bl	800f162 <LL_RCC_MSI_GetRange>
 800fe26:	4603      	mov	r3, r0
 800fe28:	091b      	lsrs	r3, r3, #4
 800fe2a:	f003 030f 	and.w	r3, r3, #15
 800fe2e:	4a2b      	ldr	r2, [pc, #172]	@ (800fedc <HAL_RCC_GetSysClockFreq+0xcc>)
 800fe30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe34:	60fb      	str	r3, [r7, #12]
 800fe36:	e04b      	b.n	800fed0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b04      	cmp	r3, #4
 800fe3c:	d102      	bne.n	800fe44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fe3e:	4b28      	ldr	r3, [pc, #160]	@ (800fee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fe40:	60fb      	str	r3, [r7, #12]
 800fe42:	e045      	b.n	800fed0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2b08      	cmp	r3, #8
 800fe48:	d10a      	bne.n	800fe60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fe4a:	f7fe ffb7 	bl	800edbc <LL_RCC_HSE_IsEnabledDiv2>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d102      	bne.n	800fe5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800fe54:	4b22      	ldr	r3, [pc, #136]	@ (800fee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fe56:	60fb      	str	r3, [r7, #12]
 800fe58:	e03a      	b.n	800fed0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800fe5a:	4b22      	ldr	r3, [pc, #136]	@ (800fee4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	e037      	b.n	800fed0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800fe60:	f7ff fab9 	bl	800f3d6 <LL_RCC_PLL_GetMainSource>
 800fe64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d003      	beq.n	800fe74 <HAL_RCC_GetSysClockFreq+0x64>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d003      	beq.n	800fe7a <HAL_RCC_GetSysClockFreq+0x6a>
 800fe72:	e00d      	b.n	800fe90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800fe74:	4b1a      	ldr	r3, [pc, #104]	@ (800fee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fe76:	60bb      	str	r3, [r7, #8]
        break;
 800fe78:	e015      	b.n	800fea6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fe7a:	f7fe ff9f 	bl	800edbc <LL_RCC_HSE_IsEnabledDiv2>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d102      	bne.n	800fe8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800fe84:	4b16      	ldr	r3, [pc, #88]	@ (800fee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fe86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800fe88:	e00d      	b.n	800fea6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800fe8a:	4b16      	ldr	r3, [pc, #88]	@ (800fee4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800fe8c:	60bb      	str	r3, [r7, #8]
        break;
 800fe8e:	e00a      	b.n	800fea6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800fe90:	f7ff f967 	bl	800f162 <LL_RCC_MSI_GetRange>
 800fe94:	4603      	mov	r3, r0
 800fe96:	091b      	lsrs	r3, r3, #4
 800fe98:	f003 030f 	and.w	r3, r3, #15
 800fe9c:	4a0f      	ldr	r2, [pc, #60]	@ (800fedc <HAL_RCC_GetSysClockFreq+0xcc>)
 800fe9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea2:	60bb      	str	r3, [r7, #8]
        break;
 800fea4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800fea6:	f7ff fa71 	bl	800f38c <LL_RCC_PLL_GetN>
 800feaa:	4602      	mov	r2, r0
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	fb03 f402 	mul.w	r4, r3, r2
 800feb2:	f7ff fa84 	bl	800f3be <LL_RCC_PLL_GetDivider>
 800feb6:	4603      	mov	r3, r0
 800feb8:	091b      	lsrs	r3, r3, #4
 800feba:	3301      	adds	r3, #1
 800febc:	fbb4 f4f3 	udiv	r4, r4, r3
 800fec0:	f7ff fa71 	bl	800f3a6 <LL_RCC_PLL_GetR>
 800fec4:	4603      	mov	r3, r0
 800fec6:	0f5b      	lsrs	r3, r3, #29
 800fec8:	3301      	adds	r3, #1
 800feca:	fbb4 f3f3 	udiv	r3, r4, r3
 800fece:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800fed0:	68fb      	ldr	r3, [r7, #12]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd90      	pop	{r4, r7, pc}
 800feda:	bf00      	nop
 800fedc:	08019e48 	.word	0x08019e48
 800fee0:	00f42400 	.word	0x00f42400
 800fee4:	01e84800 	.word	0x01e84800

0800fee8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fee8:	b598      	push	{r3, r4, r7, lr}
 800feea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800feec:	f7ff ff90 	bl	800fe10 <HAL_RCC_GetSysClockFreq>
 800fef0:	4604      	mov	r4, r0
 800fef2:	f7ff f9e9 	bl	800f2c8 <LL_RCC_GetAHBPrescaler>
 800fef6:	4603      	mov	r3, r0
 800fef8:	091b      	lsrs	r3, r3, #4
 800fefa:	f003 030f 	and.w	r3, r3, #15
 800fefe:	4a03      	ldr	r2, [pc, #12]	@ (800ff0c <HAL_RCC_GetHCLKFreq+0x24>)
 800ff00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	bd98      	pop	{r3, r4, r7, pc}
 800ff0c:	08019de8 	.word	0x08019de8

0800ff10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ff10:	b598      	push	{r3, r4, r7, lr}
 800ff12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ff14:	f7ff ffe8 	bl	800fee8 <HAL_RCC_GetHCLKFreq>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	f7ff f9ef 	bl	800f2fc <LL_RCC_GetAPB1Prescaler>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	0a1b      	lsrs	r3, r3, #8
 800ff22:	f003 0307 	and.w	r3, r3, #7
 800ff26:	4a04      	ldr	r2, [pc, #16]	@ (800ff38 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ff28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff2c:	f003 031f 	and.w	r3, r3, #31
 800ff30:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	bd98      	pop	{r3, r4, r7, pc}
 800ff38:	08019e28 	.word	0x08019e28

0800ff3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ff3c:	b598      	push	{r3, r4, r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ff40:	f7ff ffd2 	bl	800fee8 <HAL_RCC_GetHCLKFreq>
 800ff44:	4604      	mov	r4, r0
 800ff46:	f7ff f9e5 	bl	800f314 <LL_RCC_GetAPB2Prescaler>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	0adb      	lsrs	r3, r3, #11
 800ff4e:	f003 0307 	and.w	r3, r3, #7
 800ff52:	4a04      	ldr	r2, [pc, #16]	@ (800ff64 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ff54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff58:	f003 031f 	and.w	r3, r3, #31
 800ff5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	bd98      	pop	{r3, r4, r7, pc}
 800ff64:	08019e28 	.word	0x08019e28

0800ff68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ff68:	b590      	push	{r4, r7, lr}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2bb0      	cmp	r3, #176	@ 0xb0
 800ff74:	d903      	bls.n	800ff7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ff76:	4b15      	ldr	r3, [pc, #84]	@ (800ffcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ff78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	e007      	b.n	800ff8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	091b      	lsrs	r3, r3, #4
 800ff82:	f003 030f 	and.w	r3, r3, #15
 800ff86:	4a11      	ldr	r2, [pc, #68]	@ (800ffcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ff88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ff8e:	f7ff f9a7 	bl	800f2e0 <LL_RCC_GetAHB4Prescaler>
 800ff92:	4603      	mov	r3, r0
 800ff94:	091b      	lsrs	r3, r3, #4
 800ff96:	f003 030f 	and.w	r3, r3, #15
 800ff9a:	4a0d      	ldr	r2, [pc, #52]	@ (800ffd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ff9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ffd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ffac:	fba2 2303 	umull	r2, r3, r2, r3
 800ffb0:	0c9c      	lsrs	r4, r3, #18
 800ffb2:	f7fe fef5 	bl	800eda0 <HAL_PWREx_GetVoltageRange>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 f80c 	bl	800ffd8 <RCC_SetFlashLatency>
 800ffc0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3714      	adds	r7, #20
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd90      	pop	{r4, r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	08019e48 	.word	0x08019e48
 800ffd0:	08019de8 	.word	0x08019de8
 800ffd4:	431bde83 	.word	0x431bde83

0800ffd8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b093      	sub	sp, #76	@ 0x4c
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ffe2:	4b37      	ldr	r3, [pc, #220]	@ (80100c0 <RCC_SetFlashLatency+0xe8>)
 800ffe4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800ffe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ffee:	4a35      	ldr	r2, [pc, #212]	@ (80100c4 <RCC_SetFlashLatency+0xec>)
 800fff0:	f107 031c 	add.w	r3, r7, #28
 800fff4:	ca07      	ldmia	r2, {r0, r1, r2}
 800fff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800fffa:	4b33      	ldr	r3, [pc, #204]	@ (80100c8 <RCC_SetFlashLatency+0xf0>)
 800fffc:	f107 040c 	add.w	r4, r7, #12
 8010000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8010006:	2300      	movs	r3, #0
 8010008:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010010:	d11a      	bne.n	8010048 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8010012:	2300      	movs	r3, #0
 8010014:	643b      	str	r3, [r7, #64]	@ 0x40
 8010016:	e013      	b.n	8010040 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8010018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	3348      	adds	r3, #72	@ 0x48
 801001e:	443b      	add	r3, r7
 8010020:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	429a      	cmp	r2, r3
 8010028:	d807      	bhi.n	801003a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801002a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	3348      	adds	r3, #72	@ 0x48
 8010030:	443b      	add	r3, r7
 8010032:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010036:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8010038:	e020      	b.n	801007c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801003a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801003c:	3301      	adds	r3, #1
 801003e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010042:	2b03      	cmp	r3, #3
 8010044:	d9e8      	bls.n	8010018 <RCC_SetFlashLatency+0x40>
 8010046:	e019      	b.n	801007c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010048:	2300      	movs	r3, #0
 801004a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801004c:	e013      	b.n	8010076 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801004e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	3348      	adds	r3, #72	@ 0x48
 8010054:	443b      	add	r3, r7
 8010056:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	429a      	cmp	r2, r3
 801005e:	d807      	bhi.n	8010070 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	3348      	adds	r3, #72	@ 0x48
 8010066:	443b      	add	r3, r7
 8010068:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801006c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 801006e:	e005      	b.n	801007c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010072:	3301      	adds	r3, #1
 8010074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010078:	2b02      	cmp	r3, #2
 801007a:	d9e8      	bls.n	801004e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801007c:	4b13      	ldr	r3, [pc, #76]	@ (80100cc <RCC_SetFlashLatency+0xf4>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f023 0207 	bic.w	r2, r3, #7
 8010084:	4911      	ldr	r1, [pc, #68]	@ (80100cc <RCC_SetFlashLatency+0xf4>)
 8010086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010088:	4313      	orrs	r3, r2
 801008a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801008c:	f7fd ff2c 	bl	800dee8 <HAL_GetTick>
 8010090:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010092:	e008      	b.n	80100a6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010094:	f7fd ff28 	bl	800dee8 <HAL_GetTick>
 8010098:	4602      	mov	r2, r0
 801009a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d901      	bls.n	80100a6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80100a2:	2303      	movs	r3, #3
 80100a4:	e007      	b.n	80100b6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80100a6:	4b09      	ldr	r3, [pc, #36]	@ (80100cc <RCC_SetFlashLatency+0xf4>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f003 0307 	and.w	r3, r3, #7
 80100ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d1ef      	bne.n	8010094 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	374c      	adds	r7, #76	@ 0x4c
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd90      	pop	{r4, r7, pc}
 80100be:	bf00      	nop
 80100c0:	08019db0 	.word	0x08019db0
 80100c4:	08019dc0 	.word	0x08019dc0
 80100c8:	08019dcc 	.word	0x08019dcc
 80100cc:	58004000 	.word	0x58004000

080100d0 <LL_RCC_LSE_IsEnabled>:
{
 80100d0:	b480      	push	{r7}
 80100d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80100d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80100d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100dc:	f003 0301 	and.w	r3, r3, #1
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d101      	bne.n	80100e8 <LL_RCC_LSE_IsEnabled+0x18>
 80100e4:	2301      	movs	r3, #1
 80100e6:	e000      	b.n	80100ea <LL_RCC_LSE_IsEnabled+0x1a>
 80100e8:	2300      	movs	r3, #0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <LL_RCC_LSE_IsReady>:
{
 80100f4:	b480      	push	{r7}
 80100f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80100f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80100fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010100:	f003 0302 	and.w	r3, r3, #2
 8010104:	2b02      	cmp	r3, #2
 8010106:	d101      	bne.n	801010c <LL_RCC_LSE_IsReady+0x18>
 8010108:	2301      	movs	r3, #1
 801010a:	e000      	b.n	801010e <LL_RCC_LSE_IsReady+0x1a>
 801010c:	2300      	movs	r3, #0
}
 801010e:	4618      	mov	r0, r3
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <LL_RCC_SetRFWKPClockSource>:
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8010120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010128:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801012c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4313      	orrs	r3, r2
 8010134:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <LL_RCC_SetSMPSClockSource>:
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801014c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010152:	f023 0203 	bic.w	r2, r3, #3
 8010156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4313      	orrs	r3, r2
 801015e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <LL_RCC_SetSMPSPrescaler>:
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8010174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801017a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801017e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4313      	orrs	r3, r2
 8010186:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010188:	bf00      	nop
 801018a:	370c      	adds	r7, #12
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <LL_RCC_SetUSARTClockSource>:
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801019c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101a4:	f023 0203 	bic.w	r2, r3, #3
 80101a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <LL_RCC_SetLPUARTClockSource>:
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80101c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80101d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4313      	orrs	r3, r2
 80101dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <LL_RCC_SetI2CClockSource>:
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80101f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	091b      	lsrs	r3, r3, #4
 8010200:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8010204:	43db      	mvns	r3, r3
 8010206:	401a      	ands	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	011b      	lsls	r3, r3, #4
 801020c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8010210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010214:	4313      	orrs	r3, r2
 8010216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801021a:	bf00      	nop
 801021c:	370c      	adds	r7, #12
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr

08010226 <LL_RCC_SetLPTIMClockSource>:
{
 8010226:	b480      	push	{r7}
 8010228:	b083      	sub	sp, #12
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801022e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010232:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	0c1b      	lsrs	r3, r3, #16
 801023a:	041b      	lsls	r3, r3, #16
 801023c:	43db      	mvns	r3, r3
 801023e:	401a      	ands	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	041b      	lsls	r3, r3, #16
 8010244:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010248:	4313      	orrs	r3, r2
 801024a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801024e:	bf00      	nop
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <LL_RCC_SetSAIClockSource>:
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8010262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801026a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801026e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4313      	orrs	r3, r2
 8010276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801027a:	bf00      	nop
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <LL_RCC_SetRNGClockSource>:
{
 8010286:	b480      	push	{r7}
 8010288:	b083      	sub	sp, #12
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801028e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010296:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 801029a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80102a6:	bf00      	nop
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <LL_RCC_SetCLK48ClockSource>:
{
 80102b2:	b480      	push	{r7}
 80102b4:	b083      	sub	sp, #12
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80102ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80102c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80102d2:	bf00      	nop
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <LL_RCC_SetUSBClockSource>:
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff ffe3 	bl	80102b2 <LL_RCC_SetCLK48ClockSource>
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <LL_RCC_SetADCClockSource>:
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80102fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010304:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4313      	orrs	r3, r2
 8010310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010314:	bf00      	nop
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <LL_RCC_SetRTCClockSource>:
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801032c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4313      	orrs	r3, r2
 801033c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <LL_RCC_GetRTCClockSource>:
{
 801034c:	b480      	push	{r7}
 801034e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8010350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 801035c:	4618      	mov	r0, r3
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <LL_RCC_ForceBackupDomainReset>:
{
 8010366:	b480      	push	{r7}
 8010368:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801036a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801036e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801037a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801037e:	bf00      	nop
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <LL_RCC_ReleaseBackupDomainReset>:
{
 8010388:	b480      	push	{r7}
 801038a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801038c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801039c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80103a0:	bf00      	nop
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <LL_RCC_PLLSAI1_Enable>:
{
 80103aa:	b480      	push	{r7}
 80103ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80103ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80103b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80103bc:	6013      	str	r3, [r2, #0]
}
 80103be:	bf00      	nop
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <LL_RCC_PLLSAI1_Disable>:
{
 80103c8:	b480      	push	{r7}
 80103ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80103cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80103d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80103da:	6013      	str	r3, [r2, #0]
}
 80103dc:	bf00      	nop
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr

080103e6 <LL_RCC_PLLSAI1_IsReady>:
{
 80103e6:	b480      	push	{r7}
 80103e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80103ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80103f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80103f8:	d101      	bne.n	80103fe <LL_RCC_PLLSAI1_IsReady+0x18>
 80103fa:	2301      	movs	r3, #1
 80103fc:	e000      	b.n	8010400 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr

0801040a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b088      	sub	sp, #32
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8010412:	2300      	movs	r3, #0
 8010414:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8010416:	2300      	movs	r3, #0
 8010418:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010422:	2b00      	cmp	r3, #0
 8010424:	d034      	beq.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801042a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801042e:	d021      	beq.n	8010474 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8010430:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010434:	d81b      	bhi.n	801046e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010436:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801043a:	d01d      	beq.n	8010478 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801043c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010440:	d815      	bhi.n	801046e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00b      	beq.n	801045e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8010446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801044a:	d110      	bne.n	801046e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801044c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801045a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801045c:	e00d      	b.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3304      	adds	r3, #4
 8010462:	4618      	mov	r0, r3
 8010464:	f000 f947 	bl	80106f6 <RCCEx_PLLSAI1_ConfigNP>
 8010468:	4603      	mov	r3, r0
 801046a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801046c:	e005      	b.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801046e:	2301      	movs	r3, #1
 8010470:	77fb      	strb	r3, [r7, #31]
        break;
 8010472:	e002      	b.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010474:	bf00      	nop
 8010476:	e000      	b.n	801047a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010478:	bf00      	nop
    }

    if (ret == HAL_OK)
 801047a:	7ffb      	ldrb	r3, [r7, #31]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d105      	bne.n	801048c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010484:	4618      	mov	r0, r3
 8010486:	f7ff fee8 	bl	801025a <LL_RCC_SetSAIClockSource>
 801048a:	e001      	b.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801048c:	7ffb      	ldrb	r3, [r7, #31]
 801048e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010498:	2b00      	cmp	r3, #0
 801049a:	d046      	beq.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801049c:	f7ff ff56 	bl	801034c <LL_RCC_GetRTCClockSource>
 80104a0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104a6:	69ba      	ldr	r2, [r7, #24]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d03c      	beq.n	8010526 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80104ac:	f7fe fc68 	bl	800ed80 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d105      	bne.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff ff30 	bl	8010320 <LL_RCC_SetRTCClockSource>
 80104c0:	e02e      	b.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80104c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80104c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80104cc:	f7ff ff4b 	bl	8010366 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80104d0:	f7ff ff5a 	bl	8010388 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104de:	4313      	orrs	r3, r2
 80104e0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80104e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80104ec:	f7ff fdf0 	bl	80100d0 <LL_RCC_LSE_IsEnabled>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d114      	bne.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80104f6:	f7fd fcf7 	bl	800dee8 <HAL_GetTick>
 80104fa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80104fc:	e00b      	b.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80104fe:	f7fd fcf3 	bl	800dee8 <HAL_GetTick>
 8010502:	4602      	mov	r2, r0
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	f241 3288 	movw	r2, #5000	@ 0x1388
 801050c:	4293      	cmp	r3, r2
 801050e:	d902      	bls.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8010510:	2303      	movs	r3, #3
 8010512:	77fb      	strb	r3, [r7, #31]
              break;
 8010514:	e004      	b.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8010516:	f7ff fded 	bl	80100f4 <LL_RCC_LSE_IsReady>
 801051a:	4603      	mov	r3, r0
 801051c:	2b01      	cmp	r3, #1
 801051e:	d1ee      	bne.n	80104fe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8010520:	7ffb      	ldrb	r3, [r7, #31]
 8010522:	77bb      	strb	r3, [r7, #30]
 8010524:	e001      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010526:	7ffb      	ldrb	r3, [r7, #31]
 8010528:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	2b00      	cmp	r3, #0
 8010534:	d004      	beq.n	8010540 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fe2a 	bl	8010194 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f003 0302 	and.w	r3, r3, #2
 8010548:	2b00      	cmp	r3, #0
 801054a:	d004      	beq.n	8010556 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	69db      	ldr	r3, [r3, #28]
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff fe35 	bl	80101c0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0310 	and.w	r3, r3, #16
 801055e:	2b00      	cmp	r3, #0
 8010560:	d004      	beq.n	801056c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010566:	4618      	mov	r0, r3
 8010568:	f7ff fe5d 	bl	8010226 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f003 0320 	and.w	r3, r3, #32
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff fe52 	bl	8010226 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f003 0304 	and.w	r3, r3, #4
 801058a:	2b00      	cmp	r3, #0
 801058c:	d004      	beq.n	8010598 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a1b      	ldr	r3, [r3, #32]
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff fe2a 	bl	80101ec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f003 0308 	and.w	r3, r3, #8
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d004      	beq.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7ff fe1f 	bl	80101ec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d022      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff fe8d 	bl	80102de <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80105cc:	d107      	bne.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80105ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80105d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80105dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80105e6:	d10b      	bne.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3304      	adds	r3, #4
 80105ec:	4618      	mov	r0, r3
 80105ee:	f000 f8dd 	bl	80107ac <RCCEx_PLLSAI1_ConfigNQ>
 80105f2:	4603      	mov	r3, r0
 80105f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80105f6:	7ffb      	ldrb	r3, [r7, #31]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d001      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80105fc:	7ffb      	ldrb	r3, [r7, #31]
 80105fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010608:	2b00      	cmp	r3, #0
 801060a:	d02b      	beq.n	8010664 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010614:	d008      	beq.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801061a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801061e:	d003      	beq.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010624:	2b00      	cmp	r3, #0
 8010626:	d105      	bne.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801062c:	4618      	mov	r0, r3
 801062e:	f7ff fe2a 	bl	8010286 <LL_RCC_SetRNGClockSource>
 8010632:	e00a      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801063c:	60fb      	str	r3, [r7, #12]
 801063e:	2000      	movs	r0, #0
 8010640:	f7ff fe21 	bl	8010286 <LL_RCC_SetRNGClockSource>
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7ff fe34 	bl	80102b2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801064e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010652:	d107      	bne.n	8010664 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801065e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010662:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801066c:	2b00      	cmp	r3, #0
 801066e:	d022      	beq.n	80106b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff fe3d 	bl	80102f4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801067e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010682:	d107      	bne.n	8010694 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801068e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010692:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801069c:	d10b      	bne.n	80106b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3304      	adds	r3, #4
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 f8dd 	bl	8010862 <RCCEx_PLLSAI1_ConfigNR>
 80106a8:	4603      	mov	r3, r0
 80106aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80106ac:	7ffb      	ldrb	r3, [r7, #31]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d001      	beq.n	80106b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80106b2:	7ffb      	ldrb	r3, [r7, #31]
 80106b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d004      	beq.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7ff fd26 	bl	8010118 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d009      	beq.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fd45 	bl	801016c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff fd2c 	bl	8010144 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80106ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3720      	adds	r7, #32
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010702:	f7ff fe61 	bl	80103c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010706:	f7fd fbef 	bl	800dee8 <HAL_GetTick>
 801070a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801070c:	e009      	b.n	8010722 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801070e:	f7fd fbeb 	bl	800dee8 <HAL_GetTick>
 8010712:	4602      	mov	r2, r0
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	2b02      	cmp	r3, #2
 801071a:	d902      	bls.n	8010722 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	73fb      	strb	r3, [r7, #15]
      break;
 8010720:	e004      	b.n	801072c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010722:	f7ff fe60 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1f0      	bne.n	801070e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801072c:	7bfb      	ldrb	r3, [r7, #15]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d137      	bne.n	80107a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	021b      	lsls	r3, r3, #8
 8010742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010746:	4313      	orrs	r3, r2
 8010748:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801074a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801074e:	691b      	ldr	r3, [r3, #16]
 8010750:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801075c:	4313      	orrs	r3, r2
 801075e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010760:	f7ff fe23 	bl	80103aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010764:	f7fd fbc0 	bl	800dee8 <HAL_GetTick>
 8010768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801076a:	e009      	b.n	8010780 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801076c:	f7fd fbbc 	bl	800dee8 <HAL_GetTick>
 8010770:	4602      	mov	r2, r0
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	1ad3      	subs	r3, r2, r3
 8010776:	2b02      	cmp	r3, #2
 8010778:	d902      	bls.n	8010780 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	73fb      	strb	r3, [r7, #15]
        break;
 801077e:	e004      	b.n	801078a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010780:	f7ff fe31 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 8010784:	4603      	mov	r3, r0
 8010786:	2b01      	cmp	r3, #1
 8010788:	d1f0      	bne.n	801076c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801078a:	7bfb      	ldrb	r3, [r7, #15]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d108      	bne.n	80107a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010794:	691a      	ldr	r2, [r3, #16]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	691b      	ldr	r3, [r3, #16]
 801079a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801079e:	4313      	orrs	r3, r2
 80107a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80107a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80107b4:	2300      	movs	r3, #0
 80107b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80107b8:	f7ff fe06 	bl	80103c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80107bc:	f7fd fb94 	bl	800dee8 <HAL_GetTick>
 80107c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80107c2:	e009      	b.n	80107d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80107c4:	f7fd fb90 	bl	800dee8 <HAL_GetTick>
 80107c8:	4602      	mov	r2, r0
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d902      	bls.n	80107d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80107d2:	2303      	movs	r3, #3
 80107d4:	73fb      	strb	r3, [r7, #15]
      break;
 80107d6:	e004      	b.n	80107e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80107d8:	f7ff fe05 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1f0      	bne.n	80107c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d137      	bne.n	8010858 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80107e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80107ec:	691b      	ldr	r3, [r3, #16]
 80107ee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	021b      	lsls	r3, r3, #8
 80107f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80107fc:	4313      	orrs	r3, r2
 80107fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8010800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010804:	691b      	ldr	r3, [r3, #16]
 8010806:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010812:	4313      	orrs	r3, r2
 8010814:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010816:	f7ff fdc8 	bl	80103aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801081a:	f7fd fb65 	bl	800dee8 <HAL_GetTick>
 801081e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010820:	e009      	b.n	8010836 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010822:	f7fd fb61 	bl	800dee8 <HAL_GetTick>
 8010826:	4602      	mov	r2, r0
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	2b02      	cmp	r3, #2
 801082e:	d902      	bls.n	8010836 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8010830:	2303      	movs	r3, #3
 8010832:	73fb      	strb	r3, [r7, #15]
        break;
 8010834:	e004      	b.n	8010840 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010836:	f7ff fdd6 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 801083a:	4603      	mov	r3, r0
 801083c:	2b01      	cmp	r3, #1
 801083e:	d1f0      	bne.n	8010822 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8010840:	7bfb      	ldrb	r3, [r7, #15]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d108      	bne.n	8010858 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801084a:	691a      	ldr	r2, [r3, #16]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010854:	4313      	orrs	r3, r2
 8010856:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010858:	7bfb      	ldrb	r3, [r7, #15]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801086e:	f7ff fdab 	bl	80103c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010872:	f7fd fb39 	bl	800dee8 <HAL_GetTick>
 8010876:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010878:	e009      	b.n	801088e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801087a:	f7fd fb35 	bl	800dee8 <HAL_GetTick>
 801087e:	4602      	mov	r2, r0
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	2b02      	cmp	r3, #2
 8010886:	d902      	bls.n	801088e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8010888:	2303      	movs	r3, #3
 801088a:	73fb      	strb	r3, [r7, #15]
      break;
 801088c:	e004      	b.n	8010898 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801088e:	f7ff fdaa 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1f0      	bne.n	801087a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8010898:	7bfb      	ldrb	r3, [r7, #15]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d137      	bne.n	801090e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801089e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	021b      	lsls	r3, r3, #8
 80108ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80108b2:	4313      	orrs	r3, r2
 80108b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80108b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80108c8:	4313      	orrs	r3, r2
 80108ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80108cc:	f7ff fd6d 	bl	80103aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108d0:	f7fd fb0a 	bl	800dee8 <HAL_GetTick>
 80108d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80108d6:	e009      	b.n	80108ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80108d8:	f7fd fb06 	bl	800dee8 <HAL_GetTick>
 80108dc:	4602      	mov	r2, r0
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	d902      	bls.n	80108ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80108e6:	2303      	movs	r3, #3
 80108e8:	73fb      	strb	r3, [r7, #15]
        break;
 80108ea:	e004      	b.n	80108f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80108ec:	f7ff fd7b 	bl	80103e6 <LL_RCC_PLLSAI1_IsReady>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d1f0      	bne.n	80108d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80108f6:	7bfb      	ldrb	r3, [r7, #15]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d108      	bne.n	801090e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80108fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010900:	691a      	ldr	r2, [r3, #16]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	691b      	ldr	r3, [r3, #16]
 8010906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801090a:	4313      	orrs	r3, r2
 801090c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	e09f      	b.n	8010a6a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010930:	b2db      	uxtb	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	d106      	bne.n	8010944 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7fa ff2e 	bl	800b7a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2202      	movs	r2, #2
 8010948:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801094c:	4b49      	ldr	r3, [pc, #292]	@ (8010a74 <HAL_RTC_Init+0x15c>)
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	f003 0310 	and.w	r3, r3, #16
 8010954:	2b10      	cmp	r3, #16
 8010956:	d07e      	beq.n	8010a56 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	22ca      	movs	r2, #202	@ 0xca
 801095e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2253      	movs	r2, #83	@ 0x53
 8010966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 fac6 	bl	8010efa <RTC_EnterInitMode>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00a      	beq.n	801098a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	22ff      	movs	r2, #255	@ 0xff
 801097a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2204      	movs	r2, #4
 8010980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8010984:	2301      	movs	r3, #1
 8010986:	73fb      	strb	r3, [r7, #15]
 8010988:	e067      	b.n	8010a5a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	6812      	ldr	r2, [r2, #0]
 8010994:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801099c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	6899      	ldr	r1, [r3, #8]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	685a      	ldr	r2, [r3, #4]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	691b      	ldr	r3, [r3, #16]
 80109ac:	431a      	orrs	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	431a      	orrs	r2, r3
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	68d2      	ldr	r2, [r2, #12]
 80109c4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	6919      	ldr	r1, [r3, #16]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	041a      	lsls	r2, r3, #16
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	430a      	orrs	r2, r1
 80109d8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	68da      	ldr	r2, [r3, #12]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80109e8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f022 0203 	bic.w	r2, r2, #3
 80109f8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	69da      	ldr	r2, [r3, #28]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	695b      	ldr	r3, [r3, #20]
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	430a      	orrs	r2, r1
 8010a10:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	f003 0320 	and.w	r3, r3, #32
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d113      	bne.n	8010a48 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 fa44 	bl	8010eae <HAL_RTC_WaitForSynchro>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00d      	beq.n	8010a48 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	22ff      	movs	r2, #255	@ 0xff
 8010a32:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2204      	movs	r2, #4
 8010a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8010a44:	2301      	movs	r3, #1
 8010a46:	e010      	b.n	8010a6a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	22ff      	movs	r2, #255	@ 0xff
 8010a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	73fb      	strb	r3, [r7, #15]
 8010a54:	e001      	b.n	8010a5a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d103      	bne.n	8010a68 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	40002800 	.word	0x40002800

08010a78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b087      	sub	sp, #28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d101      	bne.n	8010a92 <HAL_RTC_SetTime+0x1a>
 8010a8e:	2302      	movs	r3, #2
 8010a90:	e0b2      	b.n	8010bf8 <HAL_RTC_SetTime+0x180>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2201      	movs	r2, #1
 8010a96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d126      	bne.n	8010af6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d102      	bne.n	8010abc <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f000 fa44 	bl	8010f4e <RTC_ByteToBcd2>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	785b      	ldrb	r3, [r3, #1]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f000 fa3d 	bl	8010f4e <RTC_ByteToBcd2>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010ad8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	789b      	ldrb	r3, [r3, #2]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 fa35 	bl	8010f4e <RTC_ByteToBcd2>
 8010ae4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8010ae6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	78db      	ldrb	r3, [r3, #3]
 8010aee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010af0:	4313      	orrs	r3, r2
 8010af2:	617b      	str	r3, [r7, #20]
 8010af4:	e018      	b.n	8010b28 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d102      	bne.n	8010b0a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	2200      	movs	r2, #0
 8010b08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	785b      	ldrb	r3, [r3, #1]
 8010b14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010b16:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010b1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	78db      	ldrb	r3, [r3, #3]
 8010b22:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010b24:	4313      	orrs	r3, r2
 8010b26:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	22ca      	movs	r2, #202	@ 0xca
 8010b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2253      	movs	r2, #83	@ 0x53
 8010b36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 f9de 	bl	8010efa <RTC_EnterInitMode>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00d      	beq.n	8010b60 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	22ff      	movs	r2, #255	@ 0xff
 8010b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2204      	movs	r2, #4
 8010b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e04b      	b.n	8010bf8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010b6a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010b6e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	689a      	ldr	r2, [r3, #8]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010b7e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	6899      	ldr	r1, [r3, #8]
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	68da      	ldr	r2, [r3, #12]
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	691b      	ldr	r3, [r3, #16]
 8010b8e:	431a      	orrs	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	430a      	orrs	r2, r1
 8010b96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	68da      	ldr	r2, [r3, #12]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010ba6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	f003 0320 	and.w	r3, r3, #32
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d113      	bne.n	8010bde <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f000 f979 	bl	8010eae <HAL_RTC_WaitForSynchro>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d00d      	beq.n	8010bde <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	22ff      	movs	r2, #255	@ 0xff
 8010bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2204      	movs	r2, #4
 8010bce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e00c      	b.n	8010bf8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	22ff      	movs	r2, #255	@ 0xff
 8010be4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2201      	movs	r2, #1
 8010bea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
  }
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	371c      	adds	r7, #28
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd90      	pop	{r4, r7, pc}

08010c00 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	691b      	ldr	r3, [r3, #16]
 8010c1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010c2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010c32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	0c1b      	lsrs	r3, r3, #16
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	0a1b      	lsrs	r3, r3, #8
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	0c1b      	lsrs	r3, r3, #16
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d11a      	bne.n	8010cae <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 f986 	bl	8010f8e <RTC_Bcd2ToByte>
 8010c82:	4603      	mov	r3, r0
 8010c84:	461a      	mov	r2, r3
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	785b      	ldrb	r3, [r3, #1]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 f97d 	bl	8010f8e <RTC_Bcd2ToByte>
 8010c94:	4603      	mov	r3, r0
 8010c96:	461a      	mov	r2, r3
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	789b      	ldrb	r3, [r3, #2]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f000 f974 	bl	8010f8e <RTC_Bcd2ToByte>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	461a      	mov	r2, r3
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010cae:	2300      	movs	r3, #0
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3718      	adds	r7, #24
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b087      	sub	sp, #28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d101      	bne.n	8010cd2 <HAL_RTC_SetDate+0x1a>
 8010cce:	2302      	movs	r3, #2
 8010cd0:	e09c      	b.n	8010e0c <HAL_RTC_SetDate+0x154>
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2202      	movs	r2, #2
 8010cde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10e      	bne.n	8010d06 <HAL_RTC_SetDate+0x4e>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	785b      	ldrb	r3, [r3, #1]
 8010cec:	f003 0310 	and.w	r3, r3, #16
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d008      	beq.n	8010d06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	785b      	ldrb	r3, [r3, #1]
 8010cf8:	f023 0310 	bic.w	r3, r3, #16
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	330a      	adds	r3, #10
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d11c      	bne.n	8010d46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	78db      	ldrb	r3, [r3, #3]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f000 f91c 	bl	8010f4e <RTC_ByteToBcd2>
 8010d16:	4603      	mov	r3, r0
 8010d18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	785b      	ldrb	r3, [r3, #1]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 f915 	bl	8010f4e <RTC_ByteToBcd2>
 8010d24:	4603      	mov	r3, r0
 8010d26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010d28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	789b      	ldrb	r3, [r3, #2]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f000 f90d 	bl	8010f4e <RTC_ByteToBcd2>
 8010d34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010d36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010d40:	4313      	orrs	r3, r2
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	e00e      	b.n	8010d64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	78db      	ldrb	r3, [r3, #3]
 8010d4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	785b      	ldrb	r3, [r3, #1]
 8010d50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010d52:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8010d58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010d60:	4313      	orrs	r3, r2
 8010d62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	22ca      	movs	r2, #202	@ 0xca
 8010d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2253      	movs	r2, #83	@ 0x53
 8010d72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f000 f8c0 	bl	8010efa <RTC_EnterInitMode>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00d      	beq.n	8010d9c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	22ff      	movs	r2, #255	@ 0xff
 8010d86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	e037      	b.n	8010e0c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010da6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010daa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	68da      	ldr	r2, [r3, #12]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010dba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	f003 0320 	and.w	r3, r3, #32
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d113      	bne.n	8010df2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f000 f86f 	bl	8010eae <HAL_RTC_WaitForSynchro>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00d      	beq.n	8010df2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	22ff      	movs	r2, #255	@ 0xff
 8010ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2204      	movs	r2, #4
 8010de2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	e00c      	b.n	8010e0c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	22ff      	movs	r2, #255	@ 0xff
 8010df8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
  }
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	371c      	adds	r7, #28
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd90      	pop	{r4, r7, pc}

08010e14 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010e2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010e2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	0c1b      	lsrs	r3, r3, #16
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	0a1b      	lsrs	r3, r3, #8
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	f003 031f 	and.w	r3, r3, #31
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	0b5b      	lsrs	r3, r3, #13
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	f003 0307 	and.w	r3, r3, #7
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d11a      	bne.n	8010ea4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	78db      	ldrb	r3, [r3, #3]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f000 f88b 	bl	8010f8e <RTC_Bcd2ToByte>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	785b      	ldrb	r3, [r3, #1]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 f882 	bl	8010f8e <RTC_Bcd2ToByte>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	789b      	ldrb	r3, [r3, #2]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 f879 	bl	8010f8e <RTC_Bcd2ToByte>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3718      	adds	r7, #24
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010ec4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8010ec6:	f7fd f80f 	bl	800dee8 <HAL_GetTick>
 8010eca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010ecc:	e009      	b.n	8010ee2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010ece:	f7fd f80b 	bl	800dee8 <HAL_GetTick>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010edc:	d901      	bls.n	8010ee2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010ede:	2303      	movs	r3, #3
 8010ee0:	e007      	b.n	8010ef2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	f003 0320 	and.w	r3, r3, #32
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d0ee      	beq.n	8010ece <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010ef0:	2300      	movs	r3, #0
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b084      	sub	sp, #16
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d119      	bne.n	8010f44 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f04f 32ff 	mov.w	r2, #4294967295
 8010f18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010f1a:	f7fc ffe5 	bl	800dee8 <HAL_GetTick>
 8010f1e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010f20:	e009      	b.n	8010f36 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010f22:	f7fc ffe1 	bl	800dee8 <HAL_GetTick>
 8010f26:	4602      	mov	r2, r0
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f30:	d901      	bls.n	8010f36 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8010f32:	2303      	movs	r3, #3
 8010f34:	e007      	b.n	8010f46 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d0ee      	beq.n	8010f22 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010f4e:	b480      	push	{r7}
 8010f50:	b085      	sub	sp, #20
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	4603      	mov	r3, r0
 8010f56:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8010f60:	e005      	b.n	8010f6e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3301      	adds	r3, #1
 8010f66:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8010f68:	7afb      	ldrb	r3, [r7, #11]
 8010f6a:	3b0a      	subs	r3, #10
 8010f6c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8010f6e:	7afb      	ldrb	r3, [r7, #11]
 8010f70:	2b09      	cmp	r3, #9
 8010f72:	d8f6      	bhi.n	8010f62 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	011b      	lsls	r3, r3, #4
 8010f7a:	b2da      	uxtb	r2, r3
 8010f7c:	7afb      	ldrb	r3, [r7, #11]
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	b2db      	uxtb	r3, r3
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3714      	adds	r7, #20
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010f8e:	b480      	push	{r7}
 8010f90:	b085      	sub	sp, #20
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	4603      	mov	r3, r0
 8010f96:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8010f98:	79fb      	ldrb	r3, [r7, #7]
 8010f9a:	091b      	lsrs	r3, r3, #4
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	4413      	add	r3, r2
 8010fa6:	005b      	lsls	r3, r3, #1
 8010fa8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	f003 030f 	and.w	r3, r3, #15
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	4413      	add	r3, r2
 8010fb8:	b2db      	uxtb	r3, r3
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr

08010fc6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b087      	sub	sp, #28
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	60f8      	str	r0, [r7, #12]
 8010fce:	60b9      	str	r1, [r7, #8]
 8010fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	3350      	adds	r3, #80	@ 0x50
 8010fd8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
}
 8010fea:	bf00      	nop
 8010fec:	371c      	adds	r7, #28
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d101      	bne.n	8011008 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011004:	2301      	movs	r3, #1
 8011006:	e095      	b.n	8011134 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801100c:	2b00      	cmp	r3, #0
 801100e:	d108      	bne.n	8011022 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011018:	d009      	beq.n	801102e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2200      	movs	r2, #0
 801101e:	61da      	str	r2, [r3, #28]
 8011020:	e005      	b.n	801102e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801103a:	b2db      	uxtb	r3, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	d106      	bne.n	801104e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f7fa fbd5 	bl	800b7f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2202      	movs	r2, #2
 8011052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011064:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801106e:	d902      	bls.n	8011076 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011070:	2300      	movs	r3, #0
 8011072:	60fb      	str	r3, [r7, #12]
 8011074:	e002      	b.n	801107c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801107a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011084:	d007      	beq.n	8011096 <HAL_SPI_Init+0xa0>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801108e:	d002      	beq.n	8011096 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80110a6:	431a      	orrs	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	431a      	orrs	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	695b      	ldr	r3, [r3, #20]
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	431a      	orrs	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	69db      	ldr	r3, [r3, #28]
 80110ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80110ce:	431a      	orrs	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a1b      	ldr	r3, [r3, #32]
 80110d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110d8:	ea42 0103 	orr.w	r1, r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	430a      	orrs	r2, r1
 80110ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	699b      	ldr	r3, [r3, #24]
 80110f0:	0c1b      	lsrs	r3, r3, #16
 80110f2:	f003 0204 	and.w	r2, r3, #4
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110fa:	f003 0310 	and.w	r3, r3, #16
 80110fe:	431a      	orrs	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011104:	f003 0308 	and.w	r3, r3, #8
 8011108:	431a      	orrs	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011112:	ea42 0103 	orr.w	r1, r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	430a      	orrs	r2, r1
 8011122:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2201      	movs	r2, #1
 801112e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08a      	sub	sp, #40	@ 0x28
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
 8011148:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801114a:	2301      	movs	r3, #1
 801114c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801115a:	2b01      	cmp	r3, #1
 801115c:	d101      	bne.n	8011162 <HAL_SPI_TransmitReceive+0x26>
 801115e:	2302      	movs	r3, #2
 8011160:	e1fb      	b.n	801155a <HAL_SPI_TransmitReceive+0x41e>
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2201      	movs	r2, #1
 8011166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801116a:	f7fc febd 	bl	800dee8 <HAL_GetTick>
 801116e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011176:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801117e:	887b      	ldrh	r3, [r7, #2]
 8011180:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011182:	887b      	ldrh	r3, [r7, #2]
 8011184:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011186:	7efb      	ldrb	r3, [r7, #27]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d00e      	beq.n	80111aa <HAL_SPI_TransmitReceive+0x6e>
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011192:	d106      	bne.n	80111a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d102      	bne.n	80111a2 <HAL_SPI_TransmitReceive+0x66>
 801119c:	7efb      	ldrb	r3, [r7, #27]
 801119e:	2b04      	cmp	r3, #4
 80111a0:	d003      	beq.n	80111aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80111a2:	2302      	movs	r3, #2
 80111a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80111a8:	e1cd      	b.n	8011546 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d005      	beq.n	80111bc <HAL_SPI_TransmitReceive+0x80>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d002      	beq.n	80111bc <HAL_SPI_TransmitReceive+0x80>
 80111b6:	887b      	ldrh	r3, [r7, #2]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d103      	bne.n	80111c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80111bc:	2301      	movs	r3, #1
 80111be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80111c2:	e1c0      	b.n	8011546 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d003      	beq.n	80111d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2205      	movs	r2, #5
 80111d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2200      	movs	r2, #0
 80111dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	887a      	ldrh	r2, [r7, #2]
 80111e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	887a      	ldrh	r2, [r7, #2]
 80111f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	68ba      	ldr	r2, [r7, #8]
 80111f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	887a      	ldrh	r2, [r7, #2]
 80111fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	887a      	ldrh	r2, [r7, #2]
 8011204:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801121a:	d802      	bhi.n	8011222 <HAL_SPI_TransmitReceive+0xe6>
 801121c:	8a3b      	ldrh	r3, [r7, #16]
 801121e:	2b01      	cmp	r3, #1
 8011220:	d908      	bls.n	8011234 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	685a      	ldr	r2, [r3, #4]
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011230:	605a      	str	r2, [r3, #4]
 8011232:	e007      	b.n	8011244 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011242:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801124e:	2b40      	cmp	r3, #64	@ 0x40
 8011250:	d007      	beq.n	8011262 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801126a:	d97c      	bls.n	8011366 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <HAL_SPI_TransmitReceive+0x13e>
 8011274:	8a7b      	ldrh	r3, [r7, #18]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d169      	bne.n	801134e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801127e:	881a      	ldrh	r2, [r3, #0]
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801128a:	1c9a      	adds	r2, r3, #2
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011294:	b29b      	uxth	r3, r3
 8011296:	3b01      	subs	r3, #1
 8011298:	b29a      	uxth	r2, r3
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801129e:	e056      	b.n	801134e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	f003 0302 	and.w	r3, r3, #2
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d11b      	bne.n	80112e6 <HAL_SPI_TransmitReceive+0x1aa>
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d016      	beq.n	80112e6 <HAL_SPI_TransmitReceive+0x1aa>
 80112b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d113      	bne.n	80112e6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112c2:	881a      	ldrh	r2, [r3, #0]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112ce:	1c9a      	adds	r2, r3, #2
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80112d8:	b29b      	uxth	r3, r3
 80112da:	3b01      	subs	r3, #1
 80112dc:	b29a      	uxth	r2, r3
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80112e2:	2300      	movs	r3, #0
 80112e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	f003 0301 	and.w	r3, r3, #1
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d11c      	bne.n	801132e <HAL_SPI_TransmitReceive+0x1f2>
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d016      	beq.n	801132e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	68da      	ldr	r2, [r3, #12]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801130a:	b292      	uxth	r2, r2
 801130c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011312:	1c9a      	adds	r2, r3, #2
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801131e:	b29b      	uxth	r3, r3
 8011320:	3b01      	subs	r3, #1
 8011322:	b29a      	uxth	r2, r3
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801132a:	2301      	movs	r3, #1
 801132c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801132e:	f7fc fddb 	bl	800dee8 <HAL_GetTick>
 8011332:	4602      	mov	r2, r0
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801133a:	429a      	cmp	r2, r3
 801133c:	d807      	bhi.n	801134e <HAL_SPI_TransmitReceive+0x212>
 801133e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011344:	d003      	beq.n	801134e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011346:	2303      	movs	r3, #3
 8011348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 801134c:	e0fb      	b.n	8011546 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011352:	b29b      	uxth	r3, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d1a3      	bne.n	80112a0 <HAL_SPI_TransmitReceive+0x164>
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801135e:	b29b      	uxth	r3, r3
 8011360:	2b00      	cmp	r3, #0
 8011362:	d19d      	bne.n	80112a0 <HAL_SPI_TransmitReceive+0x164>
 8011364:	e0df      	b.n	8011526 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d003      	beq.n	8011376 <HAL_SPI_TransmitReceive+0x23a>
 801136e:	8a7b      	ldrh	r3, [r7, #18]
 8011370:	2b01      	cmp	r3, #1
 8011372:	f040 80cb 	bne.w	801150c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801137a:	b29b      	uxth	r3, r3
 801137c:	2b01      	cmp	r3, #1
 801137e:	d912      	bls.n	80113a6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011384:	881a      	ldrh	r2, [r3, #0]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011390:	1c9a      	adds	r2, r3, #2
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801139a:	b29b      	uxth	r3, r3
 801139c:	3b02      	subs	r3, #2
 801139e:	b29a      	uxth	r2, r3
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80113a4:	e0b2      	b.n	801150c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	330c      	adds	r3, #12
 80113b0:	7812      	ldrb	r2, [r2, #0]
 80113b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113b8:	1c5a      	adds	r2, r3, #1
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	3b01      	subs	r3, #1
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80113cc:	e09e      	b.n	801150c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	f003 0302 	and.w	r3, r3, #2
 80113d8:	2b02      	cmp	r3, #2
 80113da:	d134      	bne.n	8011446 <HAL_SPI_TransmitReceive+0x30a>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d02f      	beq.n	8011446 <HAL_SPI_TransmitReceive+0x30a>
 80113e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d12c      	bne.n	8011446 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d912      	bls.n	801141c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113fa:	881a      	ldrh	r2, [r3, #0]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011406:	1c9a      	adds	r2, r3, #2
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011410:	b29b      	uxth	r3, r3
 8011412:	3b02      	subs	r3, #2
 8011414:	b29a      	uxth	r2, r3
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801141a:	e012      	b.n	8011442 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	330c      	adds	r3, #12
 8011426:	7812      	ldrb	r2, [r2, #0]
 8011428:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801142e:	1c5a      	adds	r2, r3, #1
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011438:	b29b      	uxth	r3, r3
 801143a:	3b01      	subs	r3, #1
 801143c:	b29a      	uxth	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011442:	2300      	movs	r3, #0
 8011444:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	f003 0301 	and.w	r3, r3, #1
 8011450:	2b01      	cmp	r3, #1
 8011452:	d148      	bne.n	80114e6 <HAL_SPI_TransmitReceive+0x3aa>
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801145a:	b29b      	uxth	r3, r3
 801145c:	2b00      	cmp	r3, #0
 801145e:	d042      	beq.n	80114e6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011466:	b29b      	uxth	r3, r3
 8011468:	2b01      	cmp	r3, #1
 801146a:	d923      	bls.n	80114b4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68da      	ldr	r2, [r3, #12]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011476:	b292      	uxth	r2, r2
 8011478:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801147e:	1c9a      	adds	r2, r3, #2
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801148a:	b29b      	uxth	r3, r3
 801148c:	3b02      	subs	r3, #2
 801148e:	b29a      	uxth	r2, r3
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801149c:	b29b      	uxth	r3, r3
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d81f      	bhi.n	80114e2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	685a      	ldr	r2, [r3, #4]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80114b0:	605a      	str	r2, [r3, #4]
 80114b2:	e016      	b.n	80114e2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f103 020c 	add.w	r2, r3, #12
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114c0:	7812      	ldrb	r2, [r2, #0]
 80114c2:	b2d2      	uxtb	r2, r2
 80114c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ca:	1c5a      	adds	r2, r3, #1
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	3b01      	subs	r3, #1
 80114da:	b29a      	uxth	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80114e2:	2301      	movs	r3, #1
 80114e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80114e6:	f7fc fcff 	bl	800dee8 <HAL_GetTick>
 80114ea:	4602      	mov	r2, r0
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d803      	bhi.n	80114fe <HAL_SPI_TransmitReceive+0x3c2>
 80114f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fc:	d102      	bne.n	8011504 <HAL_SPI_TransmitReceive+0x3c8>
 80114fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011500:	2b00      	cmp	r3, #0
 8011502:	d103      	bne.n	801150c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011504:	2303      	movs	r3, #3
 8011506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 801150a:	e01c      	b.n	8011546 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011510:	b29b      	uxth	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	f47f af5b 	bne.w	80113ce <HAL_SPI_TransmitReceive+0x292>
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801151e:	b29b      	uxth	r3, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	f47f af54 	bne.w	80113ce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011526:	69fa      	ldr	r2, [r7, #28]
 8011528:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f000 f938 	bl	80117a0 <SPI_EndRxTxTransaction>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d006      	beq.n	8011544 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2220      	movs	r2, #32
 8011540:	661a      	str	r2, [r3, #96]	@ 0x60
 8011542:	e000      	b.n	8011546 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011544:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2201      	movs	r2, #1
 801154a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2200      	movs	r2, #0
 8011552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8011556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 801155a:	4618      	mov	r0, r3
 801155c:	3728      	adds	r7, #40	@ 0x28
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
	...

08011564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	4613      	mov	r3, r2
 8011572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011574:	f7fc fcb8 	bl	800dee8 <HAL_GetTick>
 8011578:	4602      	mov	r2, r0
 801157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801157c:	1a9b      	subs	r3, r3, r2
 801157e:	683a      	ldr	r2, [r7, #0]
 8011580:	4413      	add	r3, r2
 8011582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011584:	f7fc fcb0 	bl	800dee8 <HAL_GetTick>
 8011588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801158a:	4b39      	ldr	r3, [pc, #228]	@ (8011670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	015b      	lsls	r3, r3, #5
 8011590:	0d1b      	lsrs	r3, r3, #20
 8011592:	69fa      	ldr	r2, [r7, #28]
 8011594:	fb02 f303 	mul.w	r3, r2, r3
 8011598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801159a:	e054      	b.n	8011646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a2:	d050      	beq.n	8011646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80115a4:	f7fc fca0 	bl	800dee8 <HAL_GetTick>
 80115a8:	4602      	mov	r2, r0
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	69fa      	ldr	r2, [r7, #28]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d902      	bls.n	80115ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d13d      	bne.n	8011636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	685a      	ldr	r2, [r3, #4]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80115c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80115d2:	d111      	bne.n	80115f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80115dc:	d004      	beq.n	80115e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80115e6:	d107      	bne.n	80115f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80115f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011600:	d10f      	bne.n	8011622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011610:	601a      	str	r2, [r3, #0]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2201      	movs	r2, #1
 8011626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2200      	movs	r2, #0
 801162e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011632:	2303      	movs	r3, #3
 8011634:	e017      	b.n	8011666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d101      	bne.n	8011640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801163c:	2300      	movs	r3, #0
 801163e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	3b01      	subs	r3, #1
 8011644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	689a      	ldr	r2, [r3, #8]
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	4013      	ands	r3, r2
 8011650:	68ba      	ldr	r2, [r7, #8]
 8011652:	429a      	cmp	r2, r3
 8011654:	bf0c      	ite	eq
 8011656:	2301      	moveq	r3, #1
 8011658:	2300      	movne	r3, #0
 801165a:	b2db      	uxtb	r3, r3
 801165c:	461a      	mov	r2, r3
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	429a      	cmp	r2, r3
 8011662:	d19b      	bne.n	801159c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011664:	2300      	movs	r3, #0
}
 8011666:	4618      	mov	r0, r3
 8011668:	3720      	adds	r7, #32
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	20000018 	.word	0x20000018

08011674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b08a      	sub	sp, #40	@ 0x28
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	607a      	str	r2, [r7, #4]
 8011680:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011686:	f7fc fc2f 	bl	800dee8 <HAL_GetTick>
 801168a:	4602      	mov	r2, r0
 801168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	4413      	add	r3, r2
 8011694:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011696:	f7fc fc27 	bl	800dee8 <HAL_GetTick>
 801169a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	330c      	adds	r3, #12
 80116a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80116a4:	4b3d      	ldr	r3, [pc, #244]	@ (801179c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	00da      	lsls	r2, r3, #3
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	0d1b      	lsrs	r3, r3, #20
 80116b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116b6:	fb02 f303 	mul.w	r3, r2, r3
 80116ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80116bc:	e060      	b.n	8011780 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80116c4:	d107      	bne.n	80116d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d104      	bne.n	80116d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116dc:	d050      	beq.n	8011780 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80116de:	f7fc fc03 	bl	800dee8 <HAL_GetTick>
 80116e2:	4602      	mov	r2, r0
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d902      	bls.n	80116f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80116ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d13d      	bne.n	8011770 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	685a      	ldr	r2, [r3, #4]
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801170c:	d111      	bne.n	8011732 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011716:	d004      	beq.n	8011722 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011720:	d107      	bne.n	8011732 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801173a:	d10f      	bne.n	801175c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801174a:	601a      	str	r2, [r3, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801175a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2201      	movs	r2, #1
 8011760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2200      	movs	r2, #0
 8011768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e010      	b.n	8011792 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011776:	2300      	movs	r3, #0
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	3b01      	subs	r3, #1
 801177e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	689a      	ldr	r2, [r3, #8]
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	4013      	ands	r3, r2
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	429a      	cmp	r2, r3
 801178e:	d196      	bne.n	80116be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3728      	adds	r7, #40	@ 0x28
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	20000018 	.word	0x20000018

080117a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af02      	add	r7, sp, #8
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff ff5b 	bl	8011674 <SPI_WaitFifoStateUntilTimeout>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d007      	beq.n	80117d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80117c8:	f043 0220 	orr.w	r2, r3, #32
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80117d0:	2303      	movs	r3, #3
 80117d2:	e027      	b.n	8011824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	2200      	movs	r2, #0
 80117dc:	2180      	movs	r1, #128	@ 0x80
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7ff fec0 	bl	8011564 <SPI_WaitFlagStateUntilTimeout>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d007      	beq.n	80117fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80117ee:	f043 0220 	orr.w	r2, r3, #32
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80117f6:	2303      	movs	r3, #3
 80117f8:	e014      	b.n	8011824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	2200      	movs	r2, #0
 8011802:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7ff ff34 	bl	8011674 <SPI_WaitFifoStateUntilTimeout>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d007      	beq.n	8011822 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011816:	f043 0220 	orr.w	r2, r3, #32
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801181e:	2303      	movs	r3, #3
 8011820:	e000      	b.n	8011824 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801183a:	2301      	movs	r3, #1
 801183c:	e054      	b.n	80118e8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d111      	bne.n	801186e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f000 ff68 	bl	8012728 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a23      	ldr	r2, [pc, #140]	@ (80118f0 <HAL_TIM_Base_Init+0xc4>)
 8011864:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2202      	movs	r2, #2
 8011872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3304      	adds	r3, #4
 801187e:	4619      	mov	r1, r3
 8011880:	4610      	mov	r0, r2
 8011882:	f000 fbd3 	bl	801202c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2201      	movs	r2, #1
 801188a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2201      	movs	r2, #1
 8011892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2201      	movs	r2, #1
 801189a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2201      	movs	r2, #1
 80118a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2201      	movs	r2, #1
 80118aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2201      	movs	r2, #1
 80118ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2201      	movs	r2, #1
 80118c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2201      	movs	r2, #1
 80118ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2201      	movs	r2, #1
 80118d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2201      	movs	r2, #1
 80118da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2201      	movs	r2, #1
 80118e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80118e6:	2300      	movs	r3, #0
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	0800b8e5 	.word	0x0800b8e5

080118f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b01      	cmp	r3, #1
 8011906:	d001      	beq.n	801190c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011908:	2301      	movs	r3, #1
 801190a:	e036      	b.n	801197a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2202      	movs	r2, #2
 8011910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	68da      	ldr	r2, [r3, #12]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f042 0201 	orr.w	r2, r2, #1
 8011922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a17      	ldr	r2, [pc, #92]	@ (8011988 <HAL_TIM_Base_Start_IT+0x94>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d004      	beq.n	8011938 <HAL_TIM_Base_Start_IT+0x44>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011936:	d115      	bne.n	8011964 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	689a      	ldr	r2, [r3, #8]
 801193e:	4b13      	ldr	r3, [pc, #76]	@ (801198c <HAL_TIM_Base_Start_IT+0x98>)
 8011940:	4013      	ands	r3, r2
 8011942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2b06      	cmp	r3, #6
 8011948:	d015      	beq.n	8011976 <HAL_TIM_Base_Start_IT+0x82>
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011950:	d011      	beq.n	8011976 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f042 0201 	orr.w	r2, r2, #1
 8011960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011962:	e008      	b.n	8011976 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f042 0201 	orr.w	r2, r2, #1
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	e000      	b.n	8011978 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3714      	adds	r7, #20
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	40012c00 	.word	0x40012c00
 801198c:	00010007 	.word	0x00010007

08011990 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	e054      	b.n	8011a4c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d111      	bne.n	80119d2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 feb6 	bl	8012728 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d102      	bne.n	80119ca <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	4a23      	ldr	r2, [pc, #140]	@ (8011a54 <HAL_TIM_OC_Init+0xc4>)
 80119c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2202      	movs	r2, #2
 80119d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3304      	adds	r3, #4
 80119e2:	4619      	mov	r1, r3
 80119e4:	4610      	mov	r0, r2
 80119e6:	f000 fb21 	bl	801202c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2201      	movs	r2, #1
 80119ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2201      	movs	r2, #1
 8011a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2201      	movs	r2, #1
 8011a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2201      	movs	r2, #1
 8011a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2201      	movs	r2, #1
 8011a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2201      	movs	r2, #1
 8011a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	08011a59 	.word	0x08011a59

08011a58 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	f003 0302 	and.w	r3, r3, #2
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d128      	bne.n	8011ad4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	f003 0302 	and.w	r3, r3, #2
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d121      	bne.n	8011ad4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f06f 0202 	mvn.w	r2, #2
 8011a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	699b      	ldr	r3, [r3, #24]
 8011aa6:	f003 0303 	and.w	r3, r3, #3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d005      	beq.n	8011aba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	4798      	blx	r3
 8011ab8:	e009      	b.n	8011ace <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	691b      	ldr	r3, [r3, #16]
 8011ada:	f003 0304 	and.w	r3, r3, #4
 8011ade:	2b04      	cmp	r3, #4
 8011ae0:	d128      	bne.n	8011b34 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	f003 0304 	and.w	r3, r3, #4
 8011aec:	2b04      	cmp	r3, #4
 8011aee:	d121      	bne.n	8011b34 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f06f 0204 	mvn.w	r2, #4
 8011af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2202      	movs	r2, #2
 8011afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	699b      	ldr	r3, [r3, #24]
 8011b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d005      	beq.n	8011b1a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	4798      	blx	r3
 8011b18:	e009      	b.n	8011b2e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2200      	movs	r2, #0
 8011b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	691b      	ldr	r3, [r3, #16]
 8011b3a:	f003 0308 	and.w	r3, r3, #8
 8011b3e:	2b08      	cmp	r3, #8
 8011b40:	d128      	bne.n	8011b94 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	f003 0308 	and.w	r3, r3, #8
 8011b4c:	2b08      	cmp	r3, #8
 8011b4e:	d121      	bne.n	8011b94 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f06f 0208 	mvn.w	r2, #8
 8011b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2204      	movs	r2, #4
 8011b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	f003 0303 	and.w	r3, r3, #3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d005      	beq.n	8011b7a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	4798      	blx	r3
 8011b78:	e009      	b.n	8011b8e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	691b      	ldr	r3, [r3, #16]
 8011b9a:	f003 0310 	and.w	r3, r3, #16
 8011b9e:	2b10      	cmp	r3, #16
 8011ba0:	d128      	bne.n	8011bf4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	f003 0310 	and.w	r3, r3, #16
 8011bac:	2b10      	cmp	r3, #16
 8011bae:	d121      	bne.n	8011bf4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f06f 0210 	mvn.w	r2, #16
 8011bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2208      	movs	r2, #8
 8011bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	69db      	ldr	r3, [r3, #28]
 8011bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d005      	beq.n	8011bda <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	4798      	blx	r3
 8011bd8:	e009      	b.n	8011bee <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d110      	bne.n	8011c24 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	f003 0301 	and.w	r3, r3, #1
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d109      	bne.n	8011c24 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f06f 0201 	mvn.w	r2, #1
 8011c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	691b      	ldr	r3, [r3, #16]
 8011c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c2e:	2b80      	cmp	r3, #128	@ 0x80
 8011c30:	d110      	bne.n	8011c54 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c3c:	2b80      	cmp	r3, #128	@ 0x80
 8011c3e:	d109      	bne.n	8011c54 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c62:	d110      	bne.n	8011c86 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c6e:	2b80      	cmp	r3, #128	@ 0x80
 8011c70:	d109      	bne.n	8011c86 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	691b      	ldr	r3, [r3, #16]
 8011c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c90:	2b40      	cmp	r3, #64	@ 0x40
 8011c92:	d110      	bne.n	8011cb6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c9e:	2b40      	cmp	r3, #64	@ 0x40
 8011ca0:	d109      	bne.n	8011cb6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	691b      	ldr	r3, [r3, #16]
 8011cbc:	f003 0320 	and.w	r3, r3, #32
 8011cc0:	2b20      	cmp	r3, #32
 8011cc2:	d110      	bne.n	8011ce6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	f003 0320 	and.w	r3, r3, #32
 8011cce:	2b20      	cmp	r3, #32
 8011cd0:	d109      	bne.n	8011ce6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f06f 0220 	mvn.w	r2, #32
 8011cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ce6:	bf00      	nop
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b086      	sub	sp, #24
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <HAL_TIM_OC_ConfigChannel+0x1e>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e066      	b.n	8011ddc <HAL_TIM_OC_ConfigChannel+0xec>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2201      	movs	r2, #1
 8011d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2b14      	cmp	r3, #20
 8011d1a:	d857      	bhi.n	8011dcc <HAL_TIM_OC_ConfigChannel+0xdc>
 8011d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8011d24 <HAL_TIM_OC_ConfigChannel+0x34>)
 8011d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d22:	bf00      	nop
 8011d24:	08011d79 	.word	0x08011d79
 8011d28:	08011dcd 	.word	0x08011dcd
 8011d2c:	08011dcd 	.word	0x08011dcd
 8011d30:	08011dcd 	.word	0x08011dcd
 8011d34:	08011d87 	.word	0x08011d87
 8011d38:	08011dcd 	.word	0x08011dcd
 8011d3c:	08011dcd 	.word	0x08011dcd
 8011d40:	08011dcd 	.word	0x08011dcd
 8011d44:	08011d95 	.word	0x08011d95
 8011d48:	08011dcd 	.word	0x08011dcd
 8011d4c:	08011dcd 	.word	0x08011dcd
 8011d50:	08011dcd 	.word	0x08011dcd
 8011d54:	08011da3 	.word	0x08011da3
 8011d58:	08011dcd 	.word	0x08011dcd
 8011d5c:	08011dcd 	.word	0x08011dcd
 8011d60:	08011dcd 	.word	0x08011dcd
 8011d64:	08011db1 	.word	0x08011db1
 8011d68:	08011dcd 	.word	0x08011dcd
 8011d6c:	08011dcd 	.word	0x08011dcd
 8011d70:	08011dcd 	.word	0x08011dcd
 8011d74:	08011dbf 	.word	0x08011dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	68b9      	ldr	r1, [r7, #8]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 f9b8 	bl	80120f4 <TIM_OC1_SetConfig>
      break;
 8011d84:	e025      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	68b9      	ldr	r1, [r7, #8]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f000 fa2d 	bl	80121ec <TIM_OC2_SetConfig>
      break;
 8011d92:	e01e      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	68b9      	ldr	r1, [r7, #8]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 faa0 	bl	80122e0 <TIM_OC3_SetConfig>
      break;
 8011da0:	e017      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	68b9      	ldr	r1, [r7, #8]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 fb11 	bl	80123d0 <TIM_OC4_SetConfig>
      break;
 8011dae:	e010      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	68b9      	ldr	r1, [r7, #8]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f000 fb68 	bl	801248c <TIM_OC5_SetConfig>
      break;
 8011dbc:	e009      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	68b9      	ldr	r1, [r7, #8]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f000 fbb9 	bl	801253c <TIM_OC6_SetConfig>
      break;
 8011dca:	e002      	b.n	8011dd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	75fb      	strb	r3, [r7, #23]
      break;
 8011dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d101      	bne.n	8011e00 <HAL_TIM_ConfigClockSource+0x1c>
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	e0b6      	b.n	8011f6e <HAL_TIM_ConfigClockSource+0x18a>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2201      	movs	r2, #1
 8011e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2202      	movs	r2, #2
 8011e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8011e1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8011e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e3c:	d03e      	beq.n	8011ebc <HAL_TIM_ConfigClockSource+0xd8>
 8011e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e42:	f200 8087 	bhi.w	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e4a:	f000 8086 	beq.w	8011f5a <HAL_TIM_ConfigClockSource+0x176>
 8011e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e52:	d87f      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e54:	2b70      	cmp	r3, #112	@ 0x70
 8011e56:	d01a      	beq.n	8011e8e <HAL_TIM_ConfigClockSource+0xaa>
 8011e58:	2b70      	cmp	r3, #112	@ 0x70
 8011e5a:	d87b      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e5c:	2b60      	cmp	r3, #96	@ 0x60
 8011e5e:	d050      	beq.n	8011f02 <HAL_TIM_ConfigClockSource+0x11e>
 8011e60:	2b60      	cmp	r3, #96	@ 0x60
 8011e62:	d877      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e64:	2b50      	cmp	r3, #80	@ 0x50
 8011e66:	d03c      	beq.n	8011ee2 <HAL_TIM_ConfigClockSource+0xfe>
 8011e68:	2b50      	cmp	r3, #80	@ 0x50
 8011e6a:	d873      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e6c:	2b40      	cmp	r3, #64	@ 0x40
 8011e6e:	d058      	beq.n	8011f22 <HAL_TIM_ConfigClockSource+0x13e>
 8011e70:	2b40      	cmp	r3, #64	@ 0x40
 8011e72:	d86f      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e74:	2b30      	cmp	r3, #48	@ 0x30
 8011e76:	d064      	beq.n	8011f42 <HAL_TIM_ConfigClockSource+0x15e>
 8011e78:	2b30      	cmp	r3, #48	@ 0x30
 8011e7a:	d86b      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e7c:	2b20      	cmp	r3, #32
 8011e7e:	d060      	beq.n	8011f42 <HAL_TIM_ConfigClockSource+0x15e>
 8011e80:	2b20      	cmp	r3, #32
 8011e82:	d867      	bhi.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d05c      	beq.n	8011f42 <HAL_TIM_ConfigClockSource+0x15e>
 8011e88:	2b10      	cmp	r3, #16
 8011e8a:	d05a      	beq.n	8011f42 <HAL_TIM_ConfigClockSource+0x15e>
 8011e8c:	e062      	b.n	8011f54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011e9e:	f000 fc23 	bl	80126e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	609a      	str	r2, [r3, #8]
      break;
 8011eba:	e04f      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011ecc:	f000 fc0c 	bl	80126e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	689a      	ldr	r2, [r3, #8]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011ede:	609a      	str	r2, [r3, #8]
      break;
 8011ee0:	e03c      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011eee:	461a      	mov	r2, r3
 8011ef0:	f000 fb7e 	bl	80125f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2150      	movs	r1, #80	@ 0x50
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fbd7 	bl	80126ae <TIM_ITRx_SetConfig>
      break;
 8011f00:	e02c      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011f0e:	461a      	mov	r2, r3
 8011f10:	f000 fb9d 	bl	801264e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2160      	movs	r1, #96	@ 0x60
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f000 fbc7 	bl	80126ae <TIM_ITRx_SetConfig>
      break;
 8011f20:	e01c      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f2e:	461a      	mov	r2, r3
 8011f30:	f000 fb5e 	bl	80125f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2140      	movs	r1, #64	@ 0x40
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f000 fbb7 	bl	80126ae <TIM_ITRx_SetConfig>
      break;
 8011f40:	e00c      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f000 fbae 	bl	80126ae <TIM_ITRx_SetConfig>
      break;
 8011f52:	e003      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8011f54:	2301      	movs	r3, #1
 8011f56:	73fb      	strb	r3, [r7, #15]
      break;
 8011f58:	e000      	b.n	8011f5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8011f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011f76:	b480      	push	{r7}
 8011f78:	b083      	sub	sp, #12
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8011f7e:	bf00      	nop
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b083      	sub	sp, #12
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011f92:	bf00      	nop
 8011f94:	370c      	adds	r7, #12
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	b083      	sub	sp, #12
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011fa6:	bf00      	nop
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr

08011fb2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011fb2:	b480      	push	{r7}
 8011fb4:	b083      	sub	sp, #12
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8011fba:	bf00      	nop
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr

08011fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011fc6:	b480      	push	{r7}
 8011fc8:	b083      	sub	sp, #12
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011fce:	bf00      	nop
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b083      	sub	sp, #12
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011fe2:	bf00      	nop
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011fee:	b480      	push	{r7}
 8011ff0:	b083      	sub	sp, #12
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011ff6:	bf00      	nop
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012002:	b480      	push	{r7}
 8012004:	b083      	sub	sp, #12
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 801200a:	bf00      	nop
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012016:	b480      	push	{r7}
 8012018:	b083      	sub	sp, #12
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801201e:	bf00      	nop
 8012020:	370c      	adds	r7, #12
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr
	...

0801202c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	4a2a      	ldr	r2, [pc, #168]	@ (80120e8 <TIM_Base_SetConfig+0xbc>)
 8012040:	4293      	cmp	r3, r2
 8012042:	d003      	beq.n	801204c <TIM_Base_SetConfig+0x20>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801204a:	d108      	bne.n	801205e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	4313      	orrs	r3, r2
 801205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4a21      	ldr	r2, [pc, #132]	@ (80120e8 <TIM_Base_SetConfig+0xbc>)
 8012062:	4293      	cmp	r3, r2
 8012064:	d00b      	beq.n	801207e <TIM_Base_SetConfig+0x52>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801206c:	d007      	beq.n	801207e <TIM_Base_SetConfig+0x52>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4a1e      	ldr	r2, [pc, #120]	@ (80120ec <TIM_Base_SetConfig+0xc0>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d003      	beq.n	801207e <TIM_Base_SetConfig+0x52>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4a1d      	ldr	r2, [pc, #116]	@ (80120f0 <TIM_Base_SetConfig+0xc4>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d108      	bne.n	8012090 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	4313      	orrs	r3, r2
 801208e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	695b      	ldr	r3, [r3, #20]
 801209a:	4313      	orrs	r3, r2
 801209c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	689a      	ldr	r2, [r3, #8]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4a0c      	ldr	r2, [pc, #48]	@ (80120e8 <TIM_Base_SetConfig+0xbc>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d007      	beq.n	80120cc <TIM_Base_SetConfig+0xa0>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	4a0b      	ldr	r2, [pc, #44]	@ (80120ec <TIM_Base_SetConfig+0xc0>)
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d003      	beq.n	80120cc <TIM_Base_SetConfig+0xa0>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4a0a      	ldr	r2, [pc, #40]	@ (80120f0 <TIM_Base_SetConfig+0xc4>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d103      	bne.n	80120d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	691a      	ldr	r2, [r3, #16]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2201      	movs	r2, #1
 80120d8:	615a      	str	r2, [r3, #20]
}
 80120da:	bf00      	nop
 80120dc:	3714      	adds	r7, #20
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop
 80120e8:	40012c00 	.word	0x40012c00
 80120ec:	40014400 	.word	0x40014400
 80120f0:	40014800 	.word	0x40014800

080120f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b087      	sub	sp, #28
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a1b      	ldr	r3, [r3, #32]
 8012102:	f023 0201 	bic.w	r2, r3, #1
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a1b      	ldr	r3, [r3, #32]
 801210e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	699b      	ldr	r3, [r3, #24]
 801211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f023 0303 	bic.w	r3, r3, #3
 801212e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	4313      	orrs	r3, r2
 8012138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	f023 0302 	bic.w	r3, r3, #2
 8012140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	689b      	ldr	r3, [r3, #8]
 8012146:	697a      	ldr	r2, [r7, #20]
 8012148:	4313      	orrs	r3, r2
 801214a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4a24      	ldr	r2, [pc, #144]	@ (80121e0 <TIM_OC1_SetConfig+0xec>)
 8012150:	4293      	cmp	r3, r2
 8012152:	d007      	beq.n	8012164 <TIM_OC1_SetConfig+0x70>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	4a23      	ldr	r2, [pc, #140]	@ (80121e4 <TIM_OC1_SetConfig+0xf0>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d003      	beq.n	8012164 <TIM_OC1_SetConfig+0x70>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4a22      	ldr	r2, [pc, #136]	@ (80121e8 <TIM_OC1_SetConfig+0xf4>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d10c      	bne.n	801217e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	f023 0308 	bic.w	r3, r3, #8
 801216a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	697a      	ldr	r2, [r7, #20]
 8012172:	4313      	orrs	r3, r2
 8012174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f023 0304 	bic.w	r3, r3, #4
 801217c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4a17      	ldr	r2, [pc, #92]	@ (80121e0 <TIM_OC1_SetConfig+0xec>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d007      	beq.n	8012196 <TIM_OC1_SetConfig+0xa2>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a17      	ldr	r2, [pc, #92]	@ (80121e8 <TIM_OC1_SetConfig+0xf4>)
 801218a:	4293      	cmp	r3, r2
 801218c:	d003      	beq.n	8012196 <TIM_OC1_SetConfig+0xa2>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a14      	ldr	r2, [pc, #80]	@ (80121e4 <TIM_OC1_SetConfig+0xf0>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d111      	bne.n	80121ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801219c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80121a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	695b      	ldr	r3, [r3, #20]
 80121aa:	693a      	ldr	r2, [r7, #16]
 80121ac:	4313      	orrs	r3, r2
 80121ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	699b      	ldr	r3, [r3, #24]
 80121b4:	693a      	ldr	r2, [r7, #16]
 80121b6:	4313      	orrs	r3, r2
 80121b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	693a      	ldr	r2, [r7, #16]
 80121be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	685a      	ldr	r2, [r3, #4]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	697a      	ldr	r2, [r7, #20]
 80121d2:	621a      	str	r2, [r3, #32]
}
 80121d4:	bf00      	nop
 80121d6:	371c      	adds	r7, #28
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr
 80121e0:	40012c00 	.word	0x40012c00
 80121e4:	40014800 	.word	0x40014800
 80121e8:	40014400 	.word	0x40014400

080121ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b087      	sub	sp, #28
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a1b      	ldr	r3, [r3, #32]
 80121fa:	f023 0210 	bic.w	r2, r3, #16
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6a1b      	ldr	r3, [r3, #32]
 8012206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	699b      	ldr	r3, [r3, #24]
 8012212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801221a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801221e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	021b      	lsls	r3, r3, #8
 801222e:	68fa      	ldr	r2, [r7, #12]
 8012230:	4313      	orrs	r3, r2
 8012232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	f023 0320 	bic.w	r3, r3, #32
 801223a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	011b      	lsls	r3, r3, #4
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	4313      	orrs	r3, r2
 8012246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	4a22      	ldr	r2, [pc, #136]	@ (80122d4 <TIM_OC2_SetConfig+0xe8>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d10d      	bne.n	801226c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	011b      	lsls	r3, r3, #4
 801225e:	697a      	ldr	r2, [r7, #20]
 8012260:	4313      	orrs	r3, r2
 8012262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801226a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	4a19      	ldr	r2, [pc, #100]	@ (80122d4 <TIM_OC2_SetConfig+0xe8>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d007      	beq.n	8012284 <TIM_OC2_SetConfig+0x98>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4a18      	ldr	r2, [pc, #96]	@ (80122d8 <TIM_OC2_SetConfig+0xec>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d003      	beq.n	8012284 <TIM_OC2_SetConfig+0x98>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4a17      	ldr	r2, [pc, #92]	@ (80122dc <TIM_OC2_SetConfig+0xf0>)
 8012280:	4293      	cmp	r3, r2
 8012282:	d113      	bne.n	80122ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801228a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	695b      	ldr	r3, [r3, #20]
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	693a      	ldr	r2, [r7, #16]
 801229c:	4313      	orrs	r3, r2
 801229e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	699b      	ldr	r3, [r3, #24]
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	4313      	orrs	r3, r2
 80122aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	693a      	ldr	r2, [r7, #16]
 80122b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	685a      	ldr	r2, [r3, #4]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	697a      	ldr	r2, [r7, #20]
 80122c4:	621a      	str	r2, [r3, #32]
}
 80122c6:	bf00      	nop
 80122c8:	371c      	adds	r7, #28
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop
 80122d4:	40012c00 	.word	0x40012c00
 80122d8:	40014400 	.word	0x40014400
 80122dc:	40014800 	.word	0x40014800

080122e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b087      	sub	sp, #28
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6a1b      	ldr	r3, [r3, #32]
 80122ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a1b      	ldr	r3, [r3, #32]
 80122fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	69db      	ldr	r3, [r3, #28]
 8012306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801230e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f023 0303 	bic.w	r3, r3, #3
 801231a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	4313      	orrs	r3, r2
 8012324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801232c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	021b      	lsls	r3, r3, #8
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	4313      	orrs	r3, r2
 8012338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4a21      	ldr	r2, [pc, #132]	@ (80123c4 <TIM_OC3_SetConfig+0xe4>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d10d      	bne.n	801235e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	021b      	lsls	r3, r3, #8
 8012350:	697a      	ldr	r2, [r7, #20]
 8012352:	4313      	orrs	r3, r2
 8012354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801235c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4a18      	ldr	r2, [pc, #96]	@ (80123c4 <TIM_OC3_SetConfig+0xe4>)
 8012362:	4293      	cmp	r3, r2
 8012364:	d007      	beq.n	8012376 <TIM_OC3_SetConfig+0x96>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4a17      	ldr	r2, [pc, #92]	@ (80123c8 <TIM_OC3_SetConfig+0xe8>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d003      	beq.n	8012376 <TIM_OC3_SetConfig+0x96>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4a16      	ldr	r2, [pc, #88]	@ (80123cc <TIM_OC3_SetConfig+0xec>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d113      	bne.n	801239e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801237c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	011b      	lsls	r3, r3, #4
 801238c:	693a      	ldr	r2, [r7, #16]
 801238e:	4313      	orrs	r3, r2
 8012390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	693a      	ldr	r2, [r7, #16]
 801239a:	4313      	orrs	r3, r2
 801239c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	693a      	ldr	r2, [r7, #16]
 80123a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	685a      	ldr	r2, [r3, #4]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	697a      	ldr	r2, [r7, #20]
 80123b6:	621a      	str	r2, [r3, #32]
}
 80123b8:	bf00      	nop
 80123ba:	371c      	adds	r7, #28
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr
 80123c4:	40012c00 	.word	0x40012c00
 80123c8:	40014400 	.word	0x40014400
 80123cc:	40014800 	.word	0x40014800

080123d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b087      	sub	sp, #28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6a1b      	ldr	r3, [r3, #32]
 80123de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6a1b      	ldr	r3, [r3, #32]
 80123ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	69db      	ldr	r3, [r3, #28]
 80123f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80123fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801240a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	021b      	lsls	r3, r3, #8
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	4313      	orrs	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801241e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	031b      	lsls	r3, r3, #12
 8012426:	693a      	ldr	r2, [r7, #16]
 8012428:	4313      	orrs	r3, r2
 801242a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	4a14      	ldr	r2, [pc, #80]	@ (8012480 <TIM_OC4_SetConfig+0xb0>)
 8012430:	4293      	cmp	r3, r2
 8012432:	d007      	beq.n	8012444 <TIM_OC4_SetConfig+0x74>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4a13      	ldr	r2, [pc, #76]	@ (8012484 <TIM_OC4_SetConfig+0xb4>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d003      	beq.n	8012444 <TIM_OC4_SetConfig+0x74>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a12      	ldr	r2, [pc, #72]	@ (8012488 <TIM_OC4_SetConfig+0xb8>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d109      	bne.n	8012458 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801244a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	695b      	ldr	r3, [r3, #20]
 8012450:	019b      	lsls	r3, r3, #6
 8012452:	697a      	ldr	r2, [r7, #20]
 8012454:	4313      	orrs	r3, r2
 8012456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	697a      	ldr	r2, [r7, #20]
 801245c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	685a      	ldr	r2, [r3, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	693a      	ldr	r2, [r7, #16]
 8012470:	621a      	str	r2, [r3, #32]
}
 8012472:	bf00      	nop
 8012474:	371c      	adds	r7, #28
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	40012c00 	.word	0x40012c00
 8012484:	40014400 	.word	0x40014400
 8012488:	40014800 	.word	0x40014800

0801248c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801248c:	b480      	push	{r7}
 801248e:	b087      	sub	sp, #28
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6a1b      	ldr	r3, [r3, #32]
 80124a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80124be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	4313      	orrs	r3, r2
 80124c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80124d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	041b      	lsls	r3, r3, #16
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	4313      	orrs	r3, r2
 80124dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4a13      	ldr	r2, [pc, #76]	@ (8012530 <TIM_OC5_SetConfig+0xa4>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d007      	beq.n	80124f6 <TIM_OC5_SetConfig+0x6a>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	4a12      	ldr	r2, [pc, #72]	@ (8012534 <TIM_OC5_SetConfig+0xa8>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d003      	beq.n	80124f6 <TIM_OC5_SetConfig+0x6a>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4a11      	ldr	r2, [pc, #68]	@ (8012538 <TIM_OC5_SetConfig+0xac>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d109      	bne.n	801250a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	695b      	ldr	r3, [r3, #20]
 8012502:	021b      	lsls	r3, r3, #8
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	4313      	orrs	r3, r2
 8012508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	685a      	ldr	r2, [r3, #4]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	693a      	ldr	r2, [r7, #16]
 8012522:	621a      	str	r2, [r3, #32]
}
 8012524:	bf00      	nop
 8012526:	371c      	adds	r7, #28
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr
 8012530:	40012c00 	.word	0x40012c00
 8012534:	40014400 	.word	0x40014400
 8012538:	40014800 	.word	0x40014800

0801253c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801253c:	b480      	push	{r7}
 801253e:	b087      	sub	sp, #28
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6a1b      	ldr	r3, [r3, #32]
 801254a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6a1b      	ldr	r3, [r3, #32]
 8012556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801256a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801256e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	021b      	lsls	r3, r3, #8
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	4313      	orrs	r3, r2
 801257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	051b      	lsls	r3, r3, #20
 801258a:	693a      	ldr	r2, [r7, #16]
 801258c:	4313      	orrs	r3, r2
 801258e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	4a14      	ldr	r2, [pc, #80]	@ (80125e4 <TIM_OC6_SetConfig+0xa8>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d007      	beq.n	80125a8 <TIM_OC6_SetConfig+0x6c>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4a13      	ldr	r2, [pc, #76]	@ (80125e8 <TIM_OC6_SetConfig+0xac>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d003      	beq.n	80125a8 <TIM_OC6_SetConfig+0x6c>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a12      	ldr	r2, [pc, #72]	@ (80125ec <TIM_OC6_SetConfig+0xb0>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d109      	bne.n	80125bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80125ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	695b      	ldr	r3, [r3, #20]
 80125b4:	029b      	lsls	r3, r3, #10
 80125b6:	697a      	ldr	r2, [r7, #20]
 80125b8:	4313      	orrs	r3, r2
 80125ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	697a      	ldr	r2, [r7, #20]
 80125c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	693a      	ldr	r2, [r7, #16]
 80125d4:	621a      	str	r2, [r3, #32]
}
 80125d6:	bf00      	nop
 80125d8:	371c      	adds	r7, #28
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	40012c00 	.word	0x40012c00
 80125e8:	40014400 	.word	0x40014400
 80125ec:	40014800 	.word	0x40014800

080125f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b087      	sub	sp, #28
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6a1b      	ldr	r3, [r3, #32]
 8012600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6a1b      	ldr	r3, [r3, #32]
 8012606:	f023 0201 	bic.w	r2, r3, #1
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	699b      	ldr	r3, [r3, #24]
 8012612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801261a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	011b      	lsls	r3, r3, #4
 8012620:	693a      	ldr	r2, [r7, #16]
 8012622:	4313      	orrs	r3, r2
 8012624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	f023 030a 	bic.w	r3, r3, #10
 801262c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	4313      	orrs	r3, r2
 8012634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	693a      	ldr	r2, [r7, #16]
 801263a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	697a      	ldr	r2, [r7, #20]
 8012640:	621a      	str	r2, [r3, #32]
}
 8012642:	bf00      	nop
 8012644:	371c      	adds	r7, #28
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801264e:	b480      	push	{r7}
 8012650:	b087      	sub	sp, #28
 8012652:	af00      	add	r7, sp, #0
 8012654:	60f8      	str	r0, [r7, #12]
 8012656:	60b9      	str	r1, [r7, #8]
 8012658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	f023 0210 	bic.w	r2, r3, #16
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	699b      	ldr	r3, [r3, #24]
 801266a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	6a1b      	ldr	r3, [r3, #32]
 8012670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	031b      	lsls	r3, r3, #12
 801267e:	697a      	ldr	r2, [r7, #20]
 8012680:	4313      	orrs	r3, r2
 8012682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801268a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	011b      	lsls	r3, r3, #4
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	4313      	orrs	r3, r2
 8012694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	697a      	ldr	r2, [r7, #20]
 801269a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	693a      	ldr	r2, [r7, #16]
 80126a0:	621a      	str	r2, [r3, #32]
}
 80126a2:	bf00      	nop
 80126a4:	371c      	adds	r7, #28
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr

080126ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80126ae:	b480      	push	{r7}
 80126b0:	b085      	sub	sp, #20
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
 80126b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80126c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	4313      	orrs	r3, r2
 80126d0:	f043 0307 	orr.w	r3, r3, #7
 80126d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	609a      	str	r2, [r3, #8]
}
 80126dc:	bf00      	nop
 80126de:	3714      	adds	r7, #20
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	607a      	str	r2, [r7, #4]
 80126f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	021a      	lsls	r2, r3, #8
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	431a      	orrs	r2, r3
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	4313      	orrs	r3, r2
 8012710:	697a      	ldr	r2, [r7, #20]
 8012712:	4313      	orrs	r3, r2
 8012714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	697a      	ldr	r2, [r7, #20]
 801271a:	609a      	str	r2, [r3, #8]
}
 801271c:	bf00      	nop
 801271e:	371c      	adds	r7, #28
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr

08012728 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	4a1e      	ldr	r2, [pc, #120]	@ (80127ac <TIM_ResetCallback+0x84>)
 8012734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a1d      	ldr	r2, [pc, #116]	@ (80127b0 <TIM_ResetCallback+0x88>)
 801273c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a1c      	ldr	r2, [pc, #112]	@ (80127b4 <TIM_ResetCallback+0x8c>)
 8012744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a1b      	ldr	r2, [pc, #108]	@ (80127b8 <TIM_ResetCallback+0x90>)
 801274c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a1a      	ldr	r2, [pc, #104]	@ (80127bc <TIM_ResetCallback+0x94>)
 8012754:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a19      	ldr	r2, [pc, #100]	@ (80127c0 <TIM_ResetCallback+0x98>)
 801275c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	4a18      	ldr	r2, [pc, #96]	@ (80127c4 <TIM_ResetCallback+0x9c>)
 8012764:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4a17      	ldr	r2, [pc, #92]	@ (80127c8 <TIM_ResetCallback+0xa0>)
 801276c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	4a16      	ldr	r2, [pc, #88]	@ (80127cc <TIM_ResetCallback+0xa4>)
 8012774:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4a15      	ldr	r2, [pc, #84]	@ (80127d0 <TIM_ResetCallback+0xa8>)
 801277c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	4a14      	ldr	r2, [pc, #80]	@ (80127d4 <TIM_ResetCallback+0xac>)
 8012784:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	4a13      	ldr	r2, [pc, #76]	@ (80127d8 <TIM_ResetCallback+0xb0>)
 801278c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	4a12      	ldr	r2, [pc, #72]	@ (80127dc <TIM_ResetCallback+0xb4>)
 8012794:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4a11      	ldr	r2, [pc, #68]	@ (80127e0 <TIM_ResetCallback+0xb8>)
 801279c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80127a0:	bf00      	nop
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	08005bfd 	.word	0x08005bfd
 80127b0:	08011f77 	.word	0x08011f77
 80127b4:	08011fef 	.word	0x08011fef
 80127b8:	08012003 	.word	0x08012003
 80127bc:	08011f9f 	.word	0x08011f9f
 80127c0:	08011fb3 	.word	0x08011fb3
 80127c4:	08011f8b 	.word	0x08011f8b
 80127c8:	08011fc7 	.word	0x08011fc7
 80127cc:	08011fdb 	.word	0x08011fdb
 80127d0:	08012017 	.word	0x08012017
 80127d4:	080129c5 	.word	0x080129c5
 80127d8:	080129d9 	.word	0x080129d9
 80127dc:	080129ed 	.word	0x080129ed
 80127e0:	08012a01 	.word	0x08012a01

080127e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d101      	bne.n	80127fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80127f8:	2302      	movs	r3, #2
 80127fa:	e04a      	b.n	8012892 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2202      	movs	r2, #2
 8012808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a1f      	ldr	r2, [pc, #124]	@ (80128a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d108      	bne.n	8012838 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801282c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	4313      	orrs	r3, r2
 8012836:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801283e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	4313      	orrs	r3, r2
 8012848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a12      	ldr	r2, [pc, #72]	@ (80128a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d004      	beq.n	8012866 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012864:	d10c      	bne.n	8012880 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801286c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	68ba      	ldr	r2, [r7, #8]
 8012874:	4313      	orrs	r3, r2
 8012876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2201      	movs	r2, #1
 8012884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2200      	movs	r2, #0
 801288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012890:	2300      	movs	r3, #0
}
 8012892:	4618      	mov	r0, r3
 8012894:	3714      	adds	r7, #20
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop
 80128a0:	40012c00 	.word	0x40012c00

080128a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b085      	sub	sp, #20
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80128ae:	2300      	movs	r3, #0
 80128b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d101      	bne.n	80128c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80128bc:	2302      	movs	r3, #2
 80128be:	e078      	b.n	80129b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2201      	movs	r2, #1
 80128c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	4313      	orrs	r3, r2
 80128e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	4313      	orrs	r3, r2
 80128f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4313      	orrs	r3, r2
 80128fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	691b      	ldr	r3, [r3, #16]
 801290a:	4313      	orrs	r3, r2
 801290c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	695b      	ldr	r3, [r3, #20]
 8012918:	4313      	orrs	r3, r2
 801291a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012926:	4313      	orrs	r3, r2
 8012928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	699b      	ldr	r3, [r3, #24]
 8012934:	041b      	lsls	r3, r3, #16
 8012936:	4313      	orrs	r3, r2
 8012938:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4a20      	ldr	r2, [pc, #128]	@ (80129c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d106      	bne.n	8012952 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	69db      	ldr	r3, [r3, #28]
 801294e:	4313      	orrs	r3, r2
 8012950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a1a      	ldr	r2, [pc, #104]	@ (80129c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8012958:	4293      	cmp	r3, r2
 801295a:	d121      	bne.n	80129a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012966:	051b      	lsls	r3, r3, #20
 8012968:	4313      	orrs	r3, r2
 801296a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	6a1b      	ldr	r3, [r3, #32]
 8012976:	4313      	orrs	r3, r2
 8012978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012984:	4313      	orrs	r3, r2
 8012986:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4a0c      	ldr	r2, [pc, #48]	@ (80129c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801298e:	4293      	cmp	r3, r2
 8012990:	d106      	bne.n	80129a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299c:	4313      	orrs	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	40012c00 	.word	0x40012c00

080129c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80129cc:	bf00      	nop
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80129e0:	bf00      	nop
 80129e2:	370c      	adds	r7, #12
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr

080129ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b083      	sub	sp, #12
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012a08:	bf00      	nop
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <LL_RCC_GetUSARTClockSource>:
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8012a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	4013      	ands	r3, r2
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	370c      	adds	r7, #12
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <LL_RCC_GetLPUARTClockSource>:
{
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8012a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	4013      	ands	r3, r2
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	370c      	adds	r7, #12
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d101      	bne.n	8012a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e042      	b.n	8012aec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d106      	bne.n	8012a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7f8 fe03 	bl	800b684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2224      	movs	r2, #36	@ 0x24
 8012a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f022 0201 	bic.w	r2, r2, #1
 8012a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 fbfe 	bl	8013298 <UART_SetConfig>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d101      	bne.n	8012aa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e022      	b.n	8012aec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d002      	beq.n	8012ab4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 fe1a 	bl	80136e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	685a      	ldr	r2, [r3, #4]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	689a      	ldr	r2, [r3, #8]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f042 0201 	orr.w	r2, r2, #1
 8012ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f000 fea1 	bl	801382c <UART_CheckIdleState>
 8012aea:	4603      	mov	r3, r0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b08a      	sub	sp, #40	@ 0x28
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	603b      	str	r3, [r7, #0]
 8012b00:	4613      	mov	r3, r2
 8012b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012b0a:	2b20      	cmp	r3, #32
 8012b0c:	d17b      	bne.n	8012c06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d002      	beq.n	8012b1a <HAL_UART_Transmit+0x26>
 8012b14:	88fb      	ldrh	r3, [r7, #6]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d101      	bne.n	8012b1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e074      	b.n	8012c08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2221      	movs	r2, #33	@ 0x21
 8012b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012b2e:	f7fb f9db 	bl	800dee8 <HAL_GetTick>
 8012b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	88fa      	ldrh	r2, [r7, #6]
 8012b38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	88fa      	ldrh	r2, [r7, #6]
 8012b40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b4c:	d108      	bne.n	8012b60 <HAL_UART_Transmit+0x6c>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	691b      	ldr	r3, [r3, #16]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d104      	bne.n	8012b60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012b56:	2300      	movs	r3, #0
 8012b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	61bb      	str	r3, [r7, #24]
 8012b5e:	e003      	b.n	8012b68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012b64:	2300      	movs	r3, #0
 8012b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012b68:	e030      	b.n	8012bcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	2200      	movs	r2, #0
 8012b72:	2180      	movs	r1, #128	@ 0x80
 8012b74:	68f8      	ldr	r0, [r7, #12]
 8012b76:	f000 ff03 	bl	8013980 <UART_WaitOnFlagUntilTimeout>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d005      	beq.n	8012b8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2220      	movs	r2, #32
 8012b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012b88:	2303      	movs	r3, #3
 8012b8a:	e03d      	b.n	8012c08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10b      	bne.n	8012baa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	461a      	mov	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012ba0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	3302      	adds	r3, #2
 8012ba6:	61bb      	str	r3, [r7, #24]
 8012ba8:	e007      	b.n	8012bba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	781a      	ldrb	r2, [r3, #0]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d1c8      	bne.n	8012b6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	2200      	movs	r2, #0
 8012be0:	2140      	movs	r1, #64	@ 0x40
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f000 fecc 	bl	8013980 <UART_WaitOnFlagUntilTimeout>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d005      	beq.n	8012bfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2220      	movs	r2, #32
 8012bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012bf6:	2303      	movs	r3, #3
 8012bf8:	e006      	b.n	8012c08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2220      	movs	r2, #32
 8012bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012c02:	2300      	movs	r3, #0
 8012c04:	e000      	b.n	8012c08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012c06:	2302      	movs	r3, #2
  }
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3720      	adds	r7, #32
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b0ba      	sub	sp, #232	@ 0xe8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	69db      	ldr	r3, [r3, #28]
 8012c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012c3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8012c3e:	4013      	ands	r3, r2
 8012c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d11b      	bne.n	8012c84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c50:	f003 0320 	and.w	r3, r3, #32
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d015      	beq.n	8012c84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c5c:	f003 0320 	and.w	r3, r3, #32
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d105      	bne.n	8012c70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d009      	beq.n	8012c84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f000 82e3 	beq.w	8013240 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	4798      	blx	r3
      }
      return;
 8012c82:	e2dd      	b.n	8013240 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f000 8123 	beq.w	8012ed4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012c8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012c92:	4b8d      	ldr	r3, [pc, #564]	@ (8012ec8 <HAL_UART_IRQHandler+0x2b8>)
 8012c94:	4013      	ands	r3, r2
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d106      	bne.n	8012ca8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8012ecc <HAL_UART_IRQHandler+0x2bc>)
 8012ca0:	4013      	ands	r3, r2
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	f000 8116 	beq.w	8012ed4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012cac:	f003 0301 	and.w	r3, r3, #1
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d011      	beq.n	8012cd8 <HAL_UART_IRQHandler+0xc8>
 8012cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00b      	beq.n	8012cd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cce:	f043 0201 	orr.w	r2, r3, #1
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012cdc:	f003 0302 	and.w	r3, r3, #2
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d011      	beq.n	8012d08 <HAL_UART_IRQHandler+0xf8>
 8012ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012ce8:	f003 0301 	and.w	r3, r3, #1
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00b      	beq.n	8012d08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cfe:	f043 0204 	orr.w	r2, r3, #4
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012d0c:	f003 0304 	and.w	r3, r3, #4
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d011      	beq.n	8012d38 <HAL_UART_IRQHandler+0x128>
 8012d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012d18:	f003 0301 	and.w	r3, r3, #1
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d00b      	beq.n	8012d38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2204      	movs	r2, #4
 8012d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d2e:	f043 0202 	orr.w	r2, r3, #2
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012d3c:	f003 0308 	and.w	r3, r3, #8
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d017      	beq.n	8012d74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012d48:	f003 0320 	and.w	r3, r3, #32
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d105      	bne.n	8012d5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012d50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012d54:	4b5c      	ldr	r3, [pc, #368]	@ (8012ec8 <HAL_UART_IRQHandler+0x2b8>)
 8012d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00b      	beq.n	8012d74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2208      	movs	r2, #8
 8012d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d6a:	f043 0208 	orr.w	r2, r3, #8
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d012      	beq.n	8012da6 <HAL_UART_IRQHandler+0x196>
 8012d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00c      	beq.n	8012da6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d9c:	f043 0220 	orr.w	r2, r3, #32
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f000 8249 	beq.w	8013244 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012db6:	f003 0320 	and.w	r3, r3, #32
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d013      	beq.n	8012de6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012dc2:	f003 0320 	and.w	r3, r3, #32
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d105      	bne.n	8012dd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d007      	beq.n	8012de6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d003      	beq.n	8012de6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012dec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012dfa:	2b40      	cmp	r3, #64	@ 0x40
 8012dfc:	d005      	beq.n	8012e0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012e02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d054      	beq.n	8012eb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f000 fe1f 	bl	8013a4e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	689b      	ldr	r3, [r3, #8]
 8012e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e1a:	2b40      	cmp	r3, #64	@ 0x40
 8012e1c:	d146      	bne.n	8012eac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	3308      	adds	r3, #8
 8012e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012e2c:	e853 3f00 	ldrex	r3, [r3]
 8012e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	3308      	adds	r3, #8
 8012e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012e5a:	e841 2300 	strex	r3, r2, [r1]
 8012e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d1d9      	bne.n	8012e1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d017      	beq.n	8012ea4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e7a:	4a15      	ldr	r2, [pc, #84]	@ (8012ed0 <HAL_UART_IRQHandler+0x2c0>)
 8012e7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fb f9d9 	bl	800e23c <HAL_DMA_Abort_IT>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d019      	beq.n	8012ec4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012e9e:	4610      	mov	r0, r2
 8012ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ea2:	e00f      	b.n	8012ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f9e1 	bl	801326c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012eaa:	e00b      	b.n	8012ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 f9dd 	bl	801326c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012eb2:	e007      	b.n	8012ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 f9d9 	bl	801326c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012ec2:	e1bf      	b.n	8013244 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ec4:	bf00      	nop
    return;
 8012ec6:	e1bd      	b.n	8013244 <HAL_UART_IRQHandler+0x634>
 8012ec8:	10000001 	.word	0x10000001
 8012ecc:	04000120 	.word	0x04000120
 8012ed0:	08013b1b 	.word	0x08013b1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	f040 8153 	bne.w	8013184 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012ee2:	f003 0310 	and.w	r3, r3, #16
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	f000 814c 	beq.w	8013184 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ef0:	f003 0310 	and.w	r3, r3, #16
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 8145 	beq.w	8013184 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2210      	movs	r2, #16
 8012f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f0c:	2b40      	cmp	r3, #64	@ 0x40
 8012f0e:	f040 80bb 	bne.w	8013088 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 818f 	beq.w	8013248 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012f30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012f34:	429a      	cmp	r2, r3
 8012f36:	f080 8187 	bcs.w	8013248 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012f40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f003 0320 	and.w	r3, r3, #32
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	f040 8087 	bne.w	8013066 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012f64:	e853 3f00 	ldrex	r3, [r3]
 8012f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012f86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012f92:	e841 2300 	strex	r3, r2, [r1]
 8012f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1da      	bne.n	8012f58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	3308      	adds	r3, #8
 8012fa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012fac:	e853 3f00 	ldrex	r3, [r3]
 8012fb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012fb4:	f023 0301 	bic.w	r3, r3, #1
 8012fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3308      	adds	r3, #8
 8012fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012fc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012fd2:	e841 2300 	strex	r3, r2, [r1]
 8012fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d1e1      	bne.n	8012fa2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	3308      	adds	r3, #8
 8012fe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012fe8:	e853 3f00 	ldrex	r3, [r3]
 8012fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3308      	adds	r3, #8
 8012ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013004:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013006:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013008:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801300a:	e841 2300 	strex	r3, r2, [r1]
 801300e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013012:	2b00      	cmp	r3, #0
 8013014:	d1e3      	bne.n	8012fde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2220      	movs	r2, #32
 801301a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2200      	movs	r2, #0
 8013022:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801302c:	e853 3f00 	ldrex	r3, [r3]
 8013030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013034:	f023 0310 	bic.w	r3, r3, #16
 8013038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	461a      	mov	r2, r3
 8013042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013046:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013048:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801304a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801304c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801304e:	e841 2300 	strex	r3, r2, [r1]
 8013052:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1e4      	bne.n	8013024 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013060:	4618      	mov	r0, r3
 8013062:	f7fb f88c 	bl	800e17e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2202      	movs	r2, #2
 801306a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013078:	b29b      	uxth	r3, r3
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	b29b      	uxth	r3, r3
 801307e:	4619      	mov	r1, r3
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 f8fd 	bl	8013280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013086:	e0df      	b.n	8013248 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013094:	b29b      	uxth	r3, r3
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	f000 80d1 	beq.w	801324c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80130aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 80cc 	beq.w	801324c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130bc:	e853 3f00 	ldrex	r3, [r3]
 80130c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80130c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80130c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	461a      	mov	r2, r3
 80130d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80130d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80130d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80130dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80130de:	e841 2300 	strex	r3, r2, [r1]
 80130e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80130e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1e4      	bne.n	80130b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	3308      	adds	r3, #8
 80130f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f4:	e853 3f00 	ldrex	r3, [r3]
 80130f8:	623b      	str	r3, [r7, #32]
   return(result);
 80130fa:	6a3b      	ldr	r3, [r7, #32]
 80130fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013100:	f023 0301 	bic.w	r3, r3, #1
 8013104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	3308      	adds	r3, #8
 801310e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8013112:	633a      	str	r2, [r7, #48]	@ 0x30
 8013114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801311a:	e841 2300 	strex	r3, r2, [r1]
 801311e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1e1      	bne.n	80130ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2220      	movs	r2, #32
 801312a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	e853 3f00 	ldrex	r3, [r3]
 8013146:	60fb      	str	r3, [r7, #12]
   return(result);
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f023 0310 	bic.w	r3, r3, #16
 801314e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	461a      	mov	r2, r3
 8013158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801315c:	61fb      	str	r3, [r7, #28]
 801315e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013160:	69b9      	ldr	r1, [r7, #24]
 8013162:	69fa      	ldr	r2, [r7, #28]
 8013164:	e841 2300 	strex	r3, r2, [r1]
 8013168:	617b      	str	r3, [r7, #20]
   return(result);
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d1e4      	bne.n	801313a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2202      	movs	r2, #2
 8013174:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801317a:	4619      	mov	r1, r3
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 f87f 	bl	8013280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013182:	e063      	b.n	801324c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00e      	beq.n	80131ae <HAL_UART_IRQHandler+0x59e>
 8013190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013198:	2b00      	cmp	r3, #0
 801319a:	d008      	beq.n	80131ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80131a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f000 fcf8 	bl	8013b9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80131ac:	e051      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80131ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80131b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d014      	beq.n	80131e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80131ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80131be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d105      	bne.n	80131d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80131c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80131ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d008      	beq.n	80131e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d03a      	beq.n	8013250 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	4798      	blx	r3
    }
    return;
 80131e2:	e035      	b.n	8013250 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80131e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80131e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d009      	beq.n	8013204 <HAL_UART_IRQHandler+0x5f4>
 80131f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80131f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d003      	beq.n	8013204 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f000 fca2 	bl	8013b46 <UART_EndTransmit_IT>
    return;
 8013202:	e026      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801320c:	2b00      	cmp	r3, #0
 801320e:	d009      	beq.n	8013224 <HAL_UART_IRQHandler+0x614>
 8013210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013214:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013218:	2b00      	cmp	r3, #0
 801321a:	d003      	beq.n	8013224 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 fcd1 	bl	8013bc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013222:	e016      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801322c:	2b00      	cmp	r3, #0
 801322e:	d010      	beq.n	8013252 <HAL_UART_IRQHandler+0x642>
 8013230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013234:	2b00      	cmp	r3, #0
 8013236:	da0c      	bge.n	8013252 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 fcb9 	bl	8013bb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801323e:	e008      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
      return;
 8013240:	bf00      	nop
 8013242:	e006      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
    return;
 8013244:	bf00      	nop
 8013246:	e004      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
      return;
 8013248:	bf00      	nop
 801324a:	e002      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
      return;
 801324c:	bf00      	nop
 801324e:	e000      	b.n	8013252 <HAL_UART_IRQHandler+0x642>
    return;
 8013250:	bf00      	nop
  }
}
 8013252:	37e8      	adds	r7, #232	@ 0xe8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013274:	bf00      	nop
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr

08013280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	460b      	mov	r3, r1
 801328a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801328c:	bf00      	nop
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801329c:	b08c      	sub	sp, #48	@ 0x30
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80132a2:	2300      	movs	r3, #0
 80132a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	689a      	ldr	r2, [r3, #8]
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	431a      	orrs	r2, r3
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	695b      	ldr	r3, [r3, #20]
 80132b6:	431a      	orrs	r2, r3
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	69db      	ldr	r3, [r3, #28]
 80132bc:	4313      	orrs	r3, r2
 80132be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	681a      	ldr	r2, [r3, #0]
 80132c6:	4baf      	ldr	r3, [pc, #700]	@ (8013584 <UART_SetConfig+0x2ec>)
 80132c8:	4013      	ands	r3, r2
 80132ca:	697a      	ldr	r2, [r7, #20]
 80132cc:	6812      	ldr	r2, [r2, #0]
 80132ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80132d0:	430b      	orrs	r3, r1
 80132d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	68da      	ldr	r2, [r3, #12]
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	430a      	orrs	r2, r1
 80132e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	699b      	ldr	r3, [r3, #24]
 80132ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4aa4      	ldr	r2, [pc, #656]	@ (8013588 <UART_SetConfig+0x2f0>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d004      	beq.n	8013304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	6a1b      	ldr	r3, [r3, #32]
 80132fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013300:	4313      	orrs	r3, r2
 8013302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	689b      	ldr	r3, [r3, #8]
 801330a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801330e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8013312:	697a      	ldr	r2, [r7, #20]
 8013314:	6812      	ldr	r2, [r2, #0]
 8013316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013318:	430b      	orrs	r3, r1
 801331a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013322:	f023 010f 	bic.w	r1, r3, #15
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	430a      	orrs	r2, r1
 8013330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4a95      	ldr	r2, [pc, #596]	@ (801358c <UART_SetConfig+0x2f4>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d125      	bne.n	8013388 <UART_SetConfig+0xf0>
 801333c:	2003      	movs	r0, #3
 801333e:	f7ff fb69 	bl	8012a14 <LL_RCC_GetUSARTClockSource>
 8013342:	4603      	mov	r3, r0
 8013344:	2b03      	cmp	r3, #3
 8013346:	d81b      	bhi.n	8013380 <UART_SetConfig+0xe8>
 8013348:	a201      	add	r2, pc, #4	@ (adr r2, 8013350 <UART_SetConfig+0xb8>)
 801334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334e:	bf00      	nop
 8013350:	08013361 	.word	0x08013361
 8013354:	08013371 	.word	0x08013371
 8013358:	08013369 	.word	0x08013369
 801335c:	08013379 	.word	0x08013379
 8013360:	2301      	movs	r3, #1
 8013362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013366:	e042      	b.n	80133ee <UART_SetConfig+0x156>
 8013368:	2302      	movs	r3, #2
 801336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801336e:	e03e      	b.n	80133ee <UART_SetConfig+0x156>
 8013370:	2304      	movs	r3, #4
 8013372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013376:	e03a      	b.n	80133ee <UART_SetConfig+0x156>
 8013378:	2308      	movs	r3, #8
 801337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801337e:	e036      	b.n	80133ee <UART_SetConfig+0x156>
 8013380:	2310      	movs	r3, #16
 8013382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013386:	e032      	b.n	80133ee <UART_SetConfig+0x156>
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a7e      	ldr	r2, [pc, #504]	@ (8013588 <UART_SetConfig+0x2f0>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d12a      	bne.n	80133e8 <UART_SetConfig+0x150>
 8013392:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8013396:	f7ff fb4d 	bl	8012a34 <LL_RCC_GetLPUARTClockSource>
 801339a:	4603      	mov	r3, r0
 801339c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80133a0:	d01a      	beq.n	80133d8 <UART_SetConfig+0x140>
 80133a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80133a6:	d81b      	bhi.n	80133e0 <UART_SetConfig+0x148>
 80133a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80133ac:	d00c      	beq.n	80133c8 <UART_SetConfig+0x130>
 80133ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80133b2:	d815      	bhi.n	80133e0 <UART_SetConfig+0x148>
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d003      	beq.n	80133c0 <UART_SetConfig+0x128>
 80133b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80133bc:	d008      	beq.n	80133d0 <UART_SetConfig+0x138>
 80133be:	e00f      	b.n	80133e0 <UART_SetConfig+0x148>
 80133c0:	2300      	movs	r3, #0
 80133c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80133c6:	e012      	b.n	80133ee <UART_SetConfig+0x156>
 80133c8:	2302      	movs	r3, #2
 80133ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80133ce:	e00e      	b.n	80133ee <UART_SetConfig+0x156>
 80133d0:	2304      	movs	r3, #4
 80133d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80133d6:	e00a      	b.n	80133ee <UART_SetConfig+0x156>
 80133d8:	2308      	movs	r3, #8
 80133da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80133de:	e006      	b.n	80133ee <UART_SetConfig+0x156>
 80133e0:	2310      	movs	r3, #16
 80133e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80133e6:	e002      	b.n	80133ee <UART_SetConfig+0x156>
 80133e8:	2310      	movs	r3, #16
 80133ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	4a65      	ldr	r2, [pc, #404]	@ (8013588 <UART_SetConfig+0x2f0>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	f040 8097 	bne.w	8013528 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80133fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80133fe:	2b08      	cmp	r3, #8
 8013400:	d823      	bhi.n	801344a <UART_SetConfig+0x1b2>
 8013402:	a201      	add	r2, pc, #4	@ (adr r2, 8013408 <UART_SetConfig+0x170>)
 8013404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013408:	0801342d 	.word	0x0801342d
 801340c:	0801344b 	.word	0x0801344b
 8013410:	08013435 	.word	0x08013435
 8013414:	0801344b 	.word	0x0801344b
 8013418:	0801343b 	.word	0x0801343b
 801341c:	0801344b 	.word	0x0801344b
 8013420:	0801344b 	.word	0x0801344b
 8013424:	0801344b 	.word	0x0801344b
 8013428:	08013443 	.word	0x08013443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801342c:	f7fc fd70 	bl	800ff10 <HAL_RCC_GetPCLK1Freq>
 8013430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013432:	e010      	b.n	8013456 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013434:	4b56      	ldr	r3, [pc, #344]	@ (8013590 <UART_SetConfig+0x2f8>)
 8013436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013438:	e00d      	b.n	8013456 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801343a:	f7fc fce9 	bl	800fe10 <HAL_RCC_GetSysClockFreq>
 801343e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013440:	e009      	b.n	8013456 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013448:	e005      	b.n	8013456 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801344a:	2300      	movs	r3, #0
 801344c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013454:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 812b 	beq.w	80136b4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013462:	4a4c      	ldr	r2, [pc, #304]	@ (8013594 <UART_SetConfig+0x2fc>)
 8013464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013468:	461a      	mov	r2, r3
 801346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013470:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	685a      	ldr	r2, [r3, #4]
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	69ba      	ldr	r2, [r7, #24]
 801347e:	429a      	cmp	r2, r3
 8013480:	d305      	bcc.n	801348e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013488:	69ba      	ldr	r2, [r7, #24]
 801348a:	429a      	cmp	r2, r3
 801348c:	d903      	bls.n	8013496 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801348e:	2301      	movs	r3, #1
 8013490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013494:	e10e      	b.n	80136b4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013498:	2200      	movs	r2, #0
 801349a:	60bb      	str	r3, [r7, #8]
 801349c:	60fa      	str	r2, [r7, #12]
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134a2:	4a3c      	ldr	r2, [pc, #240]	@ (8013594 <UART_SetConfig+0x2fc>)
 80134a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	2200      	movs	r2, #0
 80134ac:	603b      	str	r3, [r7, #0]
 80134ae:	607a      	str	r2, [r7, #4]
 80134b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80134b8:	f7ed fc1e 	bl	8000cf8 <__aeabi_uldivmod>
 80134bc:	4602      	mov	r2, r0
 80134be:	460b      	mov	r3, r1
 80134c0:	4610      	mov	r0, r2
 80134c2:	4619      	mov	r1, r3
 80134c4:	f04f 0200 	mov.w	r2, #0
 80134c8:	f04f 0300 	mov.w	r3, #0
 80134cc:	020b      	lsls	r3, r1, #8
 80134ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80134d2:	0202      	lsls	r2, r0, #8
 80134d4:	6979      	ldr	r1, [r7, #20]
 80134d6:	6849      	ldr	r1, [r1, #4]
 80134d8:	0849      	lsrs	r1, r1, #1
 80134da:	2000      	movs	r0, #0
 80134dc:	460c      	mov	r4, r1
 80134de:	4605      	mov	r5, r0
 80134e0:	eb12 0804 	adds.w	r8, r2, r4
 80134e4:	eb43 0905 	adc.w	r9, r3, r5
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	2200      	movs	r2, #0
 80134ee:	469a      	mov	sl, r3
 80134f0:	4693      	mov	fp, r2
 80134f2:	4652      	mov	r2, sl
 80134f4:	465b      	mov	r3, fp
 80134f6:	4640      	mov	r0, r8
 80134f8:	4649      	mov	r1, r9
 80134fa:	f7ed fbfd 	bl	8000cf8 <__aeabi_uldivmod>
 80134fe:	4602      	mov	r2, r0
 8013500:	460b      	mov	r3, r1
 8013502:	4613      	mov	r3, r2
 8013504:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013506:	6a3b      	ldr	r3, [r7, #32]
 8013508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801350c:	d308      	bcc.n	8013520 <UART_SetConfig+0x288>
 801350e:	6a3b      	ldr	r3, [r7, #32]
 8013510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013514:	d204      	bcs.n	8013520 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	6a3a      	ldr	r2, [r7, #32]
 801351c:	60da      	str	r2, [r3, #12]
 801351e:	e0c9      	b.n	80136b4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8013520:	2301      	movs	r3, #1
 8013522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013526:	e0c5      	b.n	80136b4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	69db      	ldr	r3, [r3, #28]
 801352c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013530:	d16d      	bne.n	801360e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8013532:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013536:	3b01      	subs	r3, #1
 8013538:	2b07      	cmp	r3, #7
 801353a:	d82d      	bhi.n	8013598 <UART_SetConfig+0x300>
 801353c:	a201      	add	r2, pc, #4	@ (adr r2, 8013544 <UART_SetConfig+0x2ac>)
 801353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013542:	bf00      	nop
 8013544:	08013565 	.word	0x08013565
 8013548:	0801356d 	.word	0x0801356d
 801354c:	08013599 	.word	0x08013599
 8013550:	08013573 	.word	0x08013573
 8013554:	08013599 	.word	0x08013599
 8013558:	08013599 	.word	0x08013599
 801355c:	08013599 	.word	0x08013599
 8013560:	0801357b 	.word	0x0801357b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013564:	f7fc fcea 	bl	800ff3c <HAL_RCC_GetPCLK2Freq>
 8013568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801356a:	e01b      	b.n	80135a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801356c:	4b08      	ldr	r3, [pc, #32]	@ (8013590 <UART_SetConfig+0x2f8>)
 801356e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013570:	e018      	b.n	80135a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013572:	f7fc fc4d 	bl	800fe10 <HAL_RCC_GetSysClockFreq>
 8013576:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013578:	e014      	b.n	80135a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801357a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801357e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013580:	e010      	b.n	80135a4 <UART_SetConfig+0x30c>
 8013582:	bf00      	nop
 8013584:	cfff69f3 	.word	0xcfff69f3
 8013588:	40008000 	.word	0x40008000
 801358c:	40013800 	.word	0x40013800
 8013590:	00f42400 	.word	0x00f42400
 8013594:	08019e88 	.word	0x08019e88
      default:
        pclk = 0U;
 8013598:	2300      	movs	r3, #0
 801359a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80135a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80135a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f000 8084 	beq.w	80136b4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135b0:	4a4b      	ldr	r2, [pc, #300]	@ (80136e0 <UART_SetConfig+0x448>)
 80135b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135b6:	461a      	mov	r2, r3
 80135b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80135be:	005a      	lsls	r2, r3, #1
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	085b      	lsrs	r3, r3, #1
 80135c6:	441a      	add	r2, r3
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80135d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135d2:	6a3b      	ldr	r3, [r7, #32]
 80135d4:	2b0f      	cmp	r3, #15
 80135d6:	d916      	bls.n	8013606 <UART_SetConfig+0x36e>
 80135d8:	6a3b      	ldr	r3, [r7, #32]
 80135da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135de:	d212      	bcs.n	8013606 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80135e0:	6a3b      	ldr	r3, [r7, #32]
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	f023 030f 	bic.w	r3, r3, #15
 80135e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80135ea:	6a3b      	ldr	r3, [r7, #32]
 80135ec:	085b      	lsrs	r3, r3, #1
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	f003 0307 	and.w	r3, r3, #7
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	8bfb      	ldrh	r3, [r7, #30]
 80135f8:	4313      	orrs	r3, r2
 80135fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	8bfa      	ldrh	r2, [r7, #30]
 8013602:	60da      	str	r2, [r3, #12]
 8013604:	e056      	b.n	80136b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013606:	2301      	movs	r3, #1
 8013608:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801360c:	e052      	b.n	80136b4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801360e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013612:	3b01      	subs	r3, #1
 8013614:	2b07      	cmp	r3, #7
 8013616:	d822      	bhi.n	801365e <UART_SetConfig+0x3c6>
 8013618:	a201      	add	r2, pc, #4	@ (adr r2, 8013620 <UART_SetConfig+0x388>)
 801361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801361e:	bf00      	nop
 8013620:	08013641 	.word	0x08013641
 8013624:	08013649 	.word	0x08013649
 8013628:	0801365f 	.word	0x0801365f
 801362c:	0801364f 	.word	0x0801364f
 8013630:	0801365f 	.word	0x0801365f
 8013634:	0801365f 	.word	0x0801365f
 8013638:	0801365f 	.word	0x0801365f
 801363c:	08013657 	.word	0x08013657
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013640:	f7fc fc7c 	bl	800ff3c <HAL_RCC_GetPCLK2Freq>
 8013644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013646:	e010      	b.n	801366a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013648:	4b26      	ldr	r3, [pc, #152]	@ (80136e4 <UART_SetConfig+0x44c>)
 801364a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801364c:	e00d      	b.n	801366a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801364e:	f7fc fbdf 	bl	800fe10 <HAL_RCC_GetSysClockFreq>
 8013652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013654:	e009      	b.n	801366a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801365a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801365c:	e005      	b.n	801366a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801365e:	2300      	movs	r3, #0
 8013660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013662:	2301      	movs	r3, #1
 8013664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013668:	bf00      	nop
    }

    if (pclk != 0U)
 801366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366c:	2b00      	cmp	r3, #0
 801366e:	d021      	beq.n	80136b4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013674:	4a1a      	ldr	r2, [pc, #104]	@ (80136e0 <UART_SetConfig+0x448>)
 8013676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801367a:	461a      	mov	r2, r3
 801367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	085b      	lsrs	r3, r3, #1
 8013688:	441a      	add	r2, r3
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013692:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013694:	6a3b      	ldr	r3, [r7, #32]
 8013696:	2b0f      	cmp	r3, #15
 8013698:	d909      	bls.n	80136ae <UART_SetConfig+0x416>
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80136a0:	d205      	bcs.n	80136ae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	60da      	str	r2, [r3, #12]
 80136ac:	e002      	b.n	80136b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80136ae:	2301      	movs	r3, #1
 80136b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	2201      	movs	r2, #1
 80136b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	2201      	movs	r2, #1
 80136c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	2200      	movs	r2, #0
 80136c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2200      	movs	r2, #0
 80136ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80136d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3730      	adds	r7, #48	@ 0x30
 80136d8:	46bd      	mov	sp, r7
 80136da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80136de:	bf00      	nop
 80136e0:	08019e88 	.word	0x08019e88
 80136e4:	00f42400 	.word	0x00f42400

080136e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80136e8:	b480      	push	{r7}
 80136ea:	b083      	sub	sp, #12
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136f4:	f003 0301 	and.w	r3, r3, #1
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d00a      	beq.n	8013712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	430a      	orrs	r2, r1
 8013710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013716:	f003 0302 	and.w	r3, r3, #2
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00a      	beq.n	8013734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	430a      	orrs	r2, r1
 8013732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013738:	f003 0304 	and.w	r3, r3, #4
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00a      	beq.n	8013756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	430a      	orrs	r2, r1
 8013754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801375a:	f003 0308 	and.w	r3, r3, #8
 801375e:	2b00      	cmp	r3, #0
 8013760:	d00a      	beq.n	8013778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	430a      	orrs	r2, r1
 8013776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801377c:	f003 0310 	and.w	r3, r3, #16
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00a      	beq.n	801379a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	689b      	ldr	r3, [r3, #8]
 801378a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	430a      	orrs	r2, r1
 8013798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801379e:	f003 0320 	and.w	r3, r3, #32
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00a      	beq.n	80137bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	430a      	orrs	r2, r1
 80137ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d01a      	beq.n	80137fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	430a      	orrs	r2, r1
 80137dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80137e6:	d10a      	bne.n	80137fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	430a      	orrs	r2, r1
 80137fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00a      	beq.n	8013820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	430a      	orrs	r2, r1
 801381e:	605a      	str	r2, [r3, #4]
  }
}
 8013820:	bf00      	nop
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr

0801382c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b098      	sub	sp, #96	@ 0x60
 8013830:	af02      	add	r7, sp, #8
 8013832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801383c:	f7fa fb54 	bl	800dee8 <HAL_GetTick>
 8013840:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f003 0308 	and.w	r3, r3, #8
 801384c:	2b08      	cmp	r3, #8
 801384e:	d12f      	bne.n	80138b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013858:	2200      	movs	r2, #0
 801385a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f000 f88e 	bl	8013980 <UART_WaitOnFlagUntilTimeout>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	d022      	beq.n	80138b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013872:	e853 3f00 	ldrex	r3, [r3]
 8013876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801387a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801387e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	461a      	mov	r2, r3
 8013886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013888:	647b      	str	r3, [r7, #68]	@ 0x44
 801388a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801388c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801388e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013890:	e841 2300 	strex	r3, r2, [r1]
 8013894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1e6      	bne.n	801386a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2220      	movs	r2, #32
 80138a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80138ac:	2303      	movs	r3, #3
 80138ae:	e063      	b.n	8013978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f003 0304 	and.w	r3, r3, #4
 80138ba:	2b04      	cmp	r3, #4
 80138bc:	d149      	bne.n	8013952 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138c6:	2200      	movs	r2, #0
 80138c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f857 	bl	8013980 <UART_WaitOnFlagUntilTimeout>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d03c      	beq.n	8013952 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e0:	e853 3f00 	ldrex	r3, [r3]
 80138e4:	623b      	str	r3, [r7, #32]
   return(result);
 80138e6:	6a3b      	ldr	r3, [r7, #32]
 80138e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80138ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	461a      	mov	r2, r3
 80138f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80138f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138fe:	e841 2300 	strex	r3, r2, [r1]
 8013902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013906:	2b00      	cmp	r3, #0
 8013908:	d1e6      	bne.n	80138d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	3308      	adds	r3, #8
 8013910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	e853 3f00 	ldrex	r3, [r3]
 8013918:	60fb      	str	r3, [r7, #12]
   return(result);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f023 0301 	bic.w	r3, r3, #1
 8013920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	3308      	adds	r3, #8
 8013928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801392a:	61fa      	str	r2, [r7, #28]
 801392c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801392e:	69b9      	ldr	r1, [r7, #24]
 8013930:	69fa      	ldr	r2, [r7, #28]
 8013932:	e841 2300 	strex	r3, r2, [r1]
 8013936:	617b      	str	r3, [r7, #20]
   return(result);
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1e5      	bne.n	801390a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2220      	movs	r2, #32
 8013942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2200      	movs	r2, #0
 801394a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801394e:	2303      	movs	r3, #3
 8013950:	e012      	b.n	8013978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2220      	movs	r2, #32
 8013956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2220      	movs	r2, #32
 801395e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2200      	movs	r2, #0
 8013972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3758      	adds	r7, #88	@ 0x58
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	603b      	str	r3, [r7, #0]
 801398c:	4613      	mov	r3, r2
 801398e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013990:	e049      	b.n	8013a26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013998:	d045      	beq.n	8013a26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801399a:	f7fa faa5 	bl	800dee8 <HAL_GetTick>
 801399e:	4602      	mov	r2, r0
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	1ad3      	subs	r3, r2, r3
 80139a4:	69ba      	ldr	r2, [r7, #24]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d302      	bcc.n	80139b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80139b0:	2303      	movs	r3, #3
 80139b2:	e048      	b.n	8013a46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0304 	and.w	r3, r3, #4
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d031      	beq.n	8013a26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	69db      	ldr	r3, [r3, #28]
 80139c8:	f003 0308 	and.w	r3, r3, #8
 80139cc:	2b08      	cmp	r3, #8
 80139ce:	d110      	bne.n	80139f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	2208      	movs	r2, #8
 80139d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f000 f838 	bl	8013a4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2208      	movs	r2, #8
 80139e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80139ee:	2301      	movs	r3, #1
 80139f0:	e029      	b.n	8013a46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	69db      	ldr	r3, [r3, #28]
 80139f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80139fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013a00:	d111      	bne.n	8013a26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f000 f81e 	bl	8013a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2220      	movs	r2, #32
 8013a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013a22:	2303      	movs	r3, #3
 8013a24:	e00f      	b.n	8013a46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	69da      	ldr	r2, [r3, #28]
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	4013      	ands	r3, r2
 8013a30:	68ba      	ldr	r2, [r7, #8]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	bf0c      	ite	eq
 8013a36:	2301      	moveq	r3, #1
 8013a38:	2300      	movne	r3, #0
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	79fb      	ldrb	r3, [r7, #7]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d0a6      	beq.n	8013992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013a44:	2300      	movs	r3, #0
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}

08013a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013a4e:	b480      	push	{r7}
 8013a50:	b095      	sub	sp, #84	@ 0x54
 8013a52:	af00      	add	r7, sp, #0
 8013a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a5e:	e853 3f00 	ldrex	r3, [r3]
 8013a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	461a      	mov	r2, r3
 8013a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8013a76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a7c:	e841 2300 	strex	r3, r2, [r1]
 8013a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d1e6      	bne.n	8013a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	3308      	adds	r3, #8
 8013a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a90:	6a3b      	ldr	r3, [r7, #32]
 8013a92:	e853 3f00 	ldrex	r3, [r3]
 8013a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013a9e:	f023 0301 	bic.w	r3, r3, #1
 8013aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ab4:	e841 2300 	strex	r3, r2, [r1]
 8013ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d1e3      	bne.n	8013a88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d118      	bne.n	8013afa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	e853 3f00 	ldrex	r3, [r3]
 8013ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	f023 0310 	bic.w	r3, r3, #16
 8013adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ae6:	61bb      	str	r3, [r7, #24]
 8013ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aea:	6979      	ldr	r1, [r7, #20]
 8013aec:	69ba      	ldr	r2, [r7, #24]
 8013aee:	e841 2300 	strex	r3, r2, [r1]
 8013af2:	613b      	str	r3, [r7, #16]
   return(result);
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d1e6      	bne.n	8013ac8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2220      	movs	r2, #32
 8013afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2200      	movs	r2, #0
 8013b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013b0e:	bf00      	nop
 8013b10:	3754      	adds	r7, #84	@ 0x54
 8013b12:	46bd      	mov	sp, r7
 8013b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b18:	4770      	bx	lr

08013b1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b084      	sub	sp, #16
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2200      	movs	r2, #0
 8013b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7ff fb97 	bl	801326c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b3e:	bf00      	nop
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}

08013b46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013b46:	b580      	push	{r7, lr}
 8013b48:	b088      	sub	sp, #32
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	e853 3f00 	ldrex	r3, [r3]
 8013b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013b62:	61fb      	str	r3, [r7, #28]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	461a      	mov	r2, r3
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	61bb      	str	r3, [r7, #24]
 8013b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b70:	6979      	ldr	r1, [r7, #20]
 8013b72:	69ba      	ldr	r2, [r7, #24]
 8013b74:	e841 2300 	strex	r3, r2, [r1]
 8013b78:	613b      	str	r3, [r7, #16]
   return(result);
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d1e6      	bne.n	8013b4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2220      	movs	r2, #32
 8013b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f7ff fb62 	bl	8013258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b94:	bf00      	nop
 8013b96:	3720      	adds	r7, #32
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013ba4:	bf00      	nop
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013bb8:	bf00      	nop
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d101      	bne.n	8013bee <HAL_UARTEx_DisableFifoMode+0x16>
 8013bea:	2302      	movs	r3, #2
 8013bec:	e027      	b.n	8013c3e <HAL_UARTEx_DisableFifoMode+0x66>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2224      	movs	r2, #36	@ 0x24
 8013bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f022 0201 	bic.w	r2, r2, #1
 8013c14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013c1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2200      	movs	r2, #0
 8013c22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2220      	movs	r2, #32
 8013c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2200      	movs	r2, #0
 8013c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c3c:	2300      	movs	r3, #0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3714      	adds	r7, #20
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b084      	sub	sp, #16
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
 8013c52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013c5a:	2b01      	cmp	r3, #1
 8013c5c:	d101      	bne.n	8013c62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013c5e:	2302      	movs	r3, #2
 8013c60:	e02d      	b.n	8013cbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2201      	movs	r2, #1
 8013c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2224      	movs	r2, #36	@ 0x24
 8013c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f022 0201 	bic.w	r2, r2, #1
 8013c88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	683a      	ldr	r2, [r7, #0]
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 f850 	bl	8013d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2220      	movs	r2, #32
 8013cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b084      	sub	sp, #16
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
 8013cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d101      	bne.n	8013cde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013cda:	2302      	movs	r3, #2
 8013cdc:	e02d      	b.n	8013d3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2224      	movs	r2, #36	@ 0x24
 8013cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f022 0201 	bic.w	r2, r2, #1
 8013d04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	689b      	ldr	r3, [r3, #8]
 8013d0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	683a      	ldr	r2, [r7, #0]
 8013d16:	430a      	orrs	r2, r1
 8013d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f812 	bl	8013d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2220      	movs	r2, #32
 8013d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
	...

08013d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d108      	bne.n	8013d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013d64:	e031      	b.n	8013dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013d66:	2308      	movs	r3, #8
 8013d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013d6a:	2308      	movs	r3, #8
 8013d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	0e5b      	lsrs	r3, r3, #25
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	f003 0307 	and.w	r3, r3, #7
 8013d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	0f5b      	lsrs	r3, r3, #29
 8013d86:	b2db      	uxtb	r3, r3
 8013d88:	f003 0307 	and.w	r3, r3, #7
 8013d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013d8e:	7bbb      	ldrb	r3, [r7, #14]
 8013d90:	7b3a      	ldrb	r2, [r7, #12]
 8013d92:	4911      	ldr	r1, [pc, #68]	@ (8013dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8013d94:	5c8a      	ldrb	r2, [r1, r2]
 8013d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013d9a:	7b3a      	ldrb	r2, [r7, #12]
 8013d9c:	490f      	ldr	r1, [pc, #60]	@ (8013ddc <UARTEx_SetNbDataToProcess+0x98>)
 8013d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013dac:	7bfb      	ldrb	r3, [r7, #15]
 8013dae:	7b7a      	ldrb	r2, [r7, #13]
 8013db0:	4909      	ldr	r1, [pc, #36]	@ (8013dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8013db2:	5c8a      	ldrb	r2, [r1, r2]
 8013db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013db8:	7b7a      	ldrb	r2, [r7, #13]
 8013dba:	4908      	ldr	r1, [pc, #32]	@ (8013ddc <UARTEx_SetNbDataToProcess+0x98>)
 8013dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8013dc2:	b29a      	uxth	r2, r3
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013dca:	bf00      	nop
 8013dcc:	3714      	adds	r7, #20
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	08019ea0 	.word	0x08019ea0
 8013ddc:	08019ea8 	.word	0x08019ea8

08013de0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013de8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8013dec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	43db      	mvns	r3, r3
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	4013      	ands	r3, r2
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013e08:	2300      	movs	r3, #0
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3714      	adds	r7, #20
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013e16:	b084      	sub	sp, #16
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	f107 0014 	add.w	r0, r7, #20
 8013e24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	370c      	adds	r7, #12
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	b004      	add	sp, #16
 8013e56:	4770      	bx	lr

08013e58 <rand>:
 8013e58:	4b16      	ldr	r3, [pc, #88]	@ (8013eb4 <rand+0x5c>)
 8013e5a:	b510      	push	{r4, lr}
 8013e5c:	681c      	ldr	r4, [r3, #0]
 8013e5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e60:	b9b3      	cbnz	r3, 8013e90 <rand+0x38>
 8013e62:	2018      	movs	r0, #24
 8013e64:	f002 fbde 	bl	8016624 <malloc>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	6320      	str	r0, [r4, #48]	@ 0x30
 8013e6c:	b920      	cbnz	r0, 8013e78 <rand+0x20>
 8013e6e:	4b12      	ldr	r3, [pc, #72]	@ (8013eb8 <rand+0x60>)
 8013e70:	4812      	ldr	r0, [pc, #72]	@ (8013ebc <rand+0x64>)
 8013e72:	2152      	movs	r1, #82	@ 0x52
 8013e74:	f001 fcc8 	bl	8015808 <__assert_func>
 8013e78:	4911      	ldr	r1, [pc, #68]	@ (8013ec0 <rand+0x68>)
 8013e7a:	4b12      	ldr	r3, [pc, #72]	@ (8013ec4 <rand+0x6c>)
 8013e7c:	e9c0 1300 	strd	r1, r3, [r0]
 8013e80:	4b11      	ldr	r3, [pc, #68]	@ (8013ec8 <rand+0x70>)
 8013e82:	6083      	str	r3, [r0, #8]
 8013e84:	230b      	movs	r3, #11
 8013e86:	8183      	strh	r3, [r0, #12]
 8013e88:	2100      	movs	r1, #0
 8013e8a:	2001      	movs	r0, #1
 8013e8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013e90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013e92:	480e      	ldr	r0, [pc, #56]	@ (8013ecc <rand+0x74>)
 8013e94:	690b      	ldr	r3, [r1, #16]
 8013e96:	694c      	ldr	r4, [r1, #20]
 8013e98:	4a0d      	ldr	r2, [pc, #52]	@ (8013ed0 <rand+0x78>)
 8013e9a:	4358      	muls	r0, r3
 8013e9c:	fb02 0004 	mla	r0, r2, r4, r0
 8013ea0:	fba3 3202 	umull	r3, r2, r3, r2
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	eb40 0002 	adc.w	r0, r0, r2
 8013eaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013eae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013eb2:	bd10      	pop	{r4, pc}
 8013eb4:	20000038 	.word	0x20000038
 8013eb8:	08019eb0 	.word	0x08019eb0
 8013ebc:	08019ec7 	.word	0x08019ec7
 8013ec0:	abcd330e 	.word	0xabcd330e
 8013ec4:	e66d1234 	.word	0xe66d1234
 8013ec8:	0005deec 	.word	0x0005deec
 8013ecc:	5851f42d 	.word	0x5851f42d
 8013ed0:	4c957f2d 	.word	0x4c957f2d

08013ed4 <__cvt>:
 8013ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ed8:	ec57 6b10 	vmov	r6, r7, d0
 8013edc:	2f00      	cmp	r7, #0
 8013ede:	460c      	mov	r4, r1
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	463b      	mov	r3, r7
 8013ee4:	bfbb      	ittet	lt
 8013ee6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013eea:	461f      	movlt	r7, r3
 8013eec:	2300      	movge	r3, #0
 8013eee:	232d      	movlt	r3, #45	@ 0x2d
 8013ef0:	700b      	strb	r3, [r1, #0]
 8013ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013ef8:	4691      	mov	r9, r2
 8013efa:	f023 0820 	bic.w	r8, r3, #32
 8013efe:	bfbc      	itt	lt
 8013f00:	4632      	movlt	r2, r6
 8013f02:	4616      	movlt	r6, r2
 8013f04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013f08:	d005      	beq.n	8013f16 <__cvt+0x42>
 8013f0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013f0e:	d100      	bne.n	8013f12 <__cvt+0x3e>
 8013f10:	3401      	adds	r4, #1
 8013f12:	2102      	movs	r1, #2
 8013f14:	e000      	b.n	8013f18 <__cvt+0x44>
 8013f16:	2103      	movs	r1, #3
 8013f18:	ab03      	add	r3, sp, #12
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	ab02      	add	r3, sp, #8
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	ec47 6b10 	vmov	d0, r6, r7
 8013f24:	4653      	mov	r3, sl
 8013f26:	4622      	mov	r2, r4
 8013f28:	f001 fd1e 	bl	8015968 <_dtoa_r>
 8013f2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013f30:	4605      	mov	r5, r0
 8013f32:	d119      	bne.n	8013f68 <__cvt+0x94>
 8013f34:	f019 0f01 	tst.w	r9, #1
 8013f38:	d00e      	beq.n	8013f58 <__cvt+0x84>
 8013f3a:	eb00 0904 	add.w	r9, r0, r4
 8013f3e:	2200      	movs	r2, #0
 8013f40:	2300      	movs	r3, #0
 8013f42:	4630      	mov	r0, r6
 8013f44:	4639      	mov	r1, r7
 8013f46:	f7ec fda7 	bl	8000a98 <__aeabi_dcmpeq>
 8013f4a:	b108      	cbz	r0, 8013f50 <__cvt+0x7c>
 8013f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f50:	2230      	movs	r2, #48	@ 0x30
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	454b      	cmp	r3, r9
 8013f56:	d31e      	bcc.n	8013f96 <__cvt+0xc2>
 8013f58:	9b03      	ldr	r3, [sp, #12]
 8013f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f5c:	1b5b      	subs	r3, r3, r5
 8013f5e:	4628      	mov	r0, r5
 8013f60:	6013      	str	r3, [r2, #0]
 8013f62:	b004      	add	sp, #16
 8013f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013f6c:	eb00 0904 	add.w	r9, r0, r4
 8013f70:	d1e5      	bne.n	8013f3e <__cvt+0x6a>
 8013f72:	7803      	ldrb	r3, [r0, #0]
 8013f74:	2b30      	cmp	r3, #48	@ 0x30
 8013f76:	d10a      	bne.n	8013f8e <__cvt+0xba>
 8013f78:	2200      	movs	r2, #0
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	4639      	mov	r1, r7
 8013f80:	f7ec fd8a 	bl	8000a98 <__aeabi_dcmpeq>
 8013f84:	b918      	cbnz	r0, 8013f8e <__cvt+0xba>
 8013f86:	f1c4 0401 	rsb	r4, r4, #1
 8013f8a:	f8ca 4000 	str.w	r4, [sl]
 8013f8e:	f8da 3000 	ldr.w	r3, [sl]
 8013f92:	4499      	add	r9, r3
 8013f94:	e7d3      	b.n	8013f3e <__cvt+0x6a>
 8013f96:	1c59      	adds	r1, r3, #1
 8013f98:	9103      	str	r1, [sp, #12]
 8013f9a:	701a      	strb	r2, [r3, #0]
 8013f9c:	e7d9      	b.n	8013f52 <__cvt+0x7e>

08013f9e <__exponent>:
 8013f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fa0:	2900      	cmp	r1, #0
 8013fa2:	bfba      	itte	lt
 8013fa4:	4249      	neglt	r1, r1
 8013fa6:	232d      	movlt	r3, #45	@ 0x2d
 8013fa8:	232b      	movge	r3, #43	@ 0x2b
 8013faa:	2909      	cmp	r1, #9
 8013fac:	7002      	strb	r2, [r0, #0]
 8013fae:	7043      	strb	r3, [r0, #1]
 8013fb0:	dd29      	ble.n	8014006 <__exponent+0x68>
 8013fb2:	f10d 0307 	add.w	r3, sp, #7
 8013fb6:	461d      	mov	r5, r3
 8013fb8:	270a      	movs	r7, #10
 8013fba:	461a      	mov	r2, r3
 8013fbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8013fc0:	fb07 1416 	mls	r4, r7, r6, r1
 8013fc4:	3430      	adds	r4, #48	@ 0x30
 8013fc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013fca:	460c      	mov	r4, r1
 8013fcc:	2c63      	cmp	r4, #99	@ 0x63
 8013fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	dcf1      	bgt.n	8013fba <__exponent+0x1c>
 8013fd6:	3130      	adds	r1, #48	@ 0x30
 8013fd8:	1e94      	subs	r4, r2, #2
 8013fda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013fde:	1c41      	adds	r1, r0, #1
 8013fe0:	4623      	mov	r3, r4
 8013fe2:	42ab      	cmp	r3, r5
 8013fe4:	d30a      	bcc.n	8013ffc <__exponent+0x5e>
 8013fe6:	f10d 0309 	add.w	r3, sp, #9
 8013fea:	1a9b      	subs	r3, r3, r2
 8013fec:	42ac      	cmp	r4, r5
 8013fee:	bf88      	it	hi
 8013ff0:	2300      	movhi	r3, #0
 8013ff2:	3302      	adds	r3, #2
 8013ff4:	4403      	add	r3, r0
 8013ff6:	1a18      	subs	r0, r3, r0
 8013ff8:	b003      	add	sp, #12
 8013ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ffc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014000:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014004:	e7ed      	b.n	8013fe2 <__exponent+0x44>
 8014006:	2330      	movs	r3, #48	@ 0x30
 8014008:	3130      	adds	r1, #48	@ 0x30
 801400a:	7083      	strb	r3, [r0, #2]
 801400c:	70c1      	strb	r1, [r0, #3]
 801400e:	1d03      	adds	r3, r0, #4
 8014010:	e7f1      	b.n	8013ff6 <__exponent+0x58>
	...

08014014 <_printf_float>:
 8014014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014018:	b08d      	sub	sp, #52	@ 0x34
 801401a:	460c      	mov	r4, r1
 801401c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014020:	4616      	mov	r6, r2
 8014022:	461f      	mov	r7, r3
 8014024:	4605      	mov	r5, r0
 8014026:	f001 fb5f 	bl	80156e8 <_localeconv_r>
 801402a:	6803      	ldr	r3, [r0, #0]
 801402c:	9304      	str	r3, [sp, #16]
 801402e:	4618      	mov	r0, r3
 8014030:	f7ec f906 	bl	8000240 <strlen>
 8014034:	2300      	movs	r3, #0
 8014036:	930a      	str	r3, [sp, #40]	@ 0x28
 8014038:	f8d8 3000 	ldr.w	r3, [r8]
 801403c:	9005      	str	r0, [sp, #20]
 801403e:	3307      	adds	r3, #7
 8014040:	f023 0307 	bic.w	r3, r3, #7
 8014044:	f103 0208 	add.w	r2, r3, #8
 8014048:	f894 a018 	ldrb.w	sl, [r4, #24]
 801404c:	f8d4 b000 	ldr.w	fp, [r4]
 8014050:	f8c8 2000 	str.w	r2, [r8]
 8014054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014058:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801405c:	9307      	str	r3, [sp, #28]
 801405e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014062:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801406a:	4b9c      	ldr	r3, [pc, #624]	@ (80142dc <_printf_float+0x2c8>)
 801406c:	f04f 32ff 	mov.w	r2, #4294967295
 8014070:	f7ec fd44 	bl	8000afc <__aeabi_dcmpun>
 8014074:	bb70      	cbnz	r0, 80140d4 <_printf_float+0xc0>
 8014076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801407a:	4b98      	ldr	r3, [pc, #608]	@ (80142dc <_printf_float+0x2c8>)
 801407c:	f04f 32ff 	mov.w	r2, #4294967295
 8014080:	f7ec fd1e 	bl	8000ac0 <__aeabi_dcmple>
 8014084:	bb30      	cbnz	r0, 80140d4 <_printf_float+0xc0>
 8014086:	2200      	movs	r2, #0
 8014088:	2300      	movs	r3, #0
 801408a:	4640      	mov	r0, r8
 801408c:	4649      	mov	r1, r9
 801408e:	f7ec fd0d 	bl	8000aac <__aeabi_dcmplt>
 8014092:	b110      	cbz	r0, 801409a <_printf_float+0x86>
 8014094:	232d      	movs	r3, #45	@ 0x2d
 8014096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801409a:	4a91      	ldr	r2, [pc, #580]	@ (80142e0 <_printf_float+0x2cc>)
 801409c:	4b91      	ldr	r3, [pc, #580]	@ (80142e4 <_printf_float+0x2d0>)
 801409e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80140a2:	bf8c      	ite	hi
 80140a4:	4690      	movhi	r8, r2
 80140a6:	4698      	movls	r8, r3
 80140a8:	2303      	movs	r3, #3
 80140aa:	6123      	str	r3, [r4, #16]
 80140ac:	f02b 0304 	bic.w	r3, fp, #4
 80140b0:	6023      	str	r3, [r4, #0]
 80140b2:	f04f 0900 	mov.w	r9, #0
 80140b6:	9700      	str	r7, [sp, #0]
 80140b8:	4633      	mov	r3, r6
 80140ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80140bc:	4621      	mov	r1, r4
 80140be:	4628      	mov	r0, r5
 80140c0:	f000 f9d2 	bl	8014468 <_printf_common>
 80140c4:	3001      	adds	r0, #1
 80140c6:	f040 808d 	bne.w	80141e4 <_printf_float+0x1d0>
 80140ca:	f04f 30ff 	mov.w	r0, #4294967295
 80140ce:	b00d      	add	sp, #52	@ 0x34
 80140d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d4:	4642      	mov	r2, r8
 80140d6:	464b      	mov	r3, r9
 80140d8:	4640      	mov	r0, r8
 80140da:	4649      	mov	r1, r9
 80140dc:	f7ec fd0e 	bl	8000afc <__aeabi_dcmpun>
 80140e0:	b140      	cbz	r0, 80140f4 <_printf_float+0xe0>
 80140e2:	464b      	mov	r3, r9
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	bfbc      	itt	lt
 80140e8:	232d      	movlt	r3, #45	@ 0x2d
 80140ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80140ee:	4a7e      	ldr	r2, [pc, #504]	@ (80142e8 <_printf_float+0x2d4>)
 80140f0:	4b7e      	ldr	r3, [pc, #504]	@ (80142ec <_printf_float+0x2d8>)
 80140f2:	e7d4      	b.n	801409e <_printf_float+0x8a>
 80140f4:	6863      	ldr	r3, [r4, #4]
 80140f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80140fa:	9206      	str	r2, [sp, #24]
 80140fc:	1c5a      	adds	r2, r3, #1
 80140fe:	d13b      	bne.n	8014178 <_printf_float+0x164>
 8014100:	2306      	movs	r3, #6
 8014102:	6063      	str	r3, [r4, #4]
 8014104:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014108:	2300      	movs	r3, #0
 801410a:	6022      	str	r2, [r4, #0]
 801410c:	9303      	str	r3, [sp, #12]
 801410e:	ab0a      	add	r3, sp, #40	@ 0x28
 8014110:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014114:	ab09      	add	r3, sp, #36	@ 0x24
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	6861      	ldr	r1, [r4, #4]
 801411a:	ec49 8b10 	vmov	d0, r8, r9
 801411e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014122:	4628      	mov	r0, r5
 8014124:	f7ff fed6 	bl	8013ed4 <__cvt>
 8014128:	9b06      	ldr	r3, [sp, #24]
 801412a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801412c:	2b47      	cmp	r3, #71	@ 0x47
 801412e:	4680      	mov	r8, r0
 8014130:	d129      	bne.n	8014186 <_printf_float+0x172>
 8014132:	1cc8      	adds	r0, r1, #3
 8014134:	db02      	blt.n	801413c <_printf_float+0x128>
 8014136:	6863      	ldr	r3, [r4, #4]
 8014138:	4299      	cmp	r1, r3
 801413a:	dd41      	ble.n	80141c0 <_printf_float+0x1ac>
 801413c:	f1aa 0a02 	sub.w	sl, sl, #2
 8014140:	fa5f fa8a 	uxtb.w	sl, sl
 8014144:	3901      	subs	r1, #1
 8014146:	4652      	mov	r2, sl
 8014148:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801414c:	9109      	str	r1, [sp, #36]	@ 0x24
 801414e:	f7ff ff26 	bl	8013f9e <__exponent>
 8014152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014154:	1813      	adds	r3, r2, r0
 8014156:	2a01      	cmp	r2, #1
 8014158:	4681      	mov	r9, r0
 801415a:	6123      	str	r3, [r4, #16]
 801415c:	dc02      	bgt.n	8014164 <_printf_float+0x150>
 801415e:	6822      	ldr	r2, [r4, #0]
 8014160:	07d2      	lsls	r2, r2, #31
 8014162:	d501      	bpl.n	8014168 <_printf_float+0x154>
 8014164:	3301      	adds	r3, #1
 8014166:	6123      	str	r3, [r4, #16]
 8014168:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801416c:	2b00      	cmp	r3, #0
 801416e:	d0a2      	beq.n	80140b6 <_printf_float+0xa2>
 8014170:	232d      	movs	r3, #45	@ 0x2d
 8014172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014176:	e79e      	b.n	80140b6 <_printf_float+0xa2>
 8014178:	9a06      	ldr	r2, [sp, #24]
 801417a:	2a47      	cmp	r2, #71	@ 0x47
 801417c:	d1c2      	bne.n	8014104 <_printf_float+0xf0>
 801417e:	2b00      	cmp	r3, #0
 8014180:	d1c0      	bne.n	8014104 <_printf_float+0xf0>
 8014182:	2301      	movs	r3, #1
 8014184:	e7bd      	b.n	8014102 <_printf_float+0xee>
 8014186:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801418a:	d9db      	bls.n	8014144 <_printf_float+0x130>
 801418c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014190:	d118      	bne.n	80141c4 <_printf_float+0x1b0>
 8014192:	2900      	cmp	r1, #0
 8014194:	6863      	ldr	r3, [r4, #4]
 8014196:	dd0b      	ble.n	80141b0 <_printf_float+0x19c>
 8014198:	6121      	str	r1, [r4, #16]
 801419a:	b913      	cbnz	r3, 80141a2 <_printf_float+0x18e>
 801419c:	6822      	ldr	r2, [r4, #0]
 801419e:	07d0      	lsls	r0, r2, #31
 80141a0:	d502      	bpl.n	80141a8 <_printf_float+0x194>
 80141a2:	3301      	adds	r3, #1
 80141a4:	440b      	add	r3, r1
 80141a6:	6123      	str	r3, [r4, #16]
 80141a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80141aa:	f04f 0900 	mov.w	r9, #0
 80141ae:	e7db      	b.n	8014168 <_printf_float+0x154>
 80141b0:	b913      	cbnz	r3, 80141b8 <_printf_float+0x1a4>
 80141b2:	6822      	ldr	r2, [r4, #0]
 80141b4:	07d2      	lsls	r2, r2, #31
 80141b6:	d501      	bpl.n	80141bc <_printf_float+0x1a8>
 80141b8:	3302      	adds	r3, #2
 80141ba:	e7f4      	b.n	80141a6 <_printf_float+0x192>
 80141bc:	2301      	movs	r3, #1
 80141be:	e7f2      	b.n	80141a6 <_printf_float+0x192>
 80141c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80141c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141c6:	4299      	cmp	r1, r3
 80141c8:	db05      	blt.n	80141d6 <_printf_float+0x1c2>
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	6121      	str	r1, [r4, #16]
 80141ce:	07d8      	lsls	r0, r3, #31
 80141d0:	d5ea      	bpl.n	80141a8 <_printf_float+0x194>
 80141d2:	1c4b      	adds	r3, r1, #1
 80141d4:	e7e7      	b.n	80141a6 <_printf_float+0x192>
 80141d6:	2900      	cmp	r1, #0
 80141d8:	bfd4      	ite	le
 80141da:	f1c1 0202 	rsble	r2, r1, #2
 80141de:	2201      	movgt	r2, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	e7e0      	b.n	80141a6 <_printf_float+0x192>
 80141e4:	6823      	ldr	r3, [r4, #0]
 80141e6:	055a      	lsls	r2, r3, #21
 80141e8:	d407      	bmi.n	80141fa <_printf_float+0x1e6>
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	4642      	mov	r2, r8
 80141ee:	4631      	mov	r1, r6
 80141f0:	4628      	mov	r0, r5
 80141f2:	47b8      	blx	r7
 80141f4:	3001      	adds	r0, #1
 80141f6:	d12b      	bne.n	8014250 <_printf_float+0x23c>
 80141f8:	e767      	b.n	80140ca <_printf_float+0xb6>
 80141fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80141fe:	f240 80dd 	bls.w	80143bc <_printf_float+0x3a8>
 8014202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014206:	2200      	movs	r2, #0
 8014208:	2300      	movs	r3, #0
 801420a:	f7ec fc45 	bl	8000a98 <__aeabi_dcmpeq>
 801420e:	2800      	cmp	r0, #0
 8014210:	d033      	beq.n	801427a <_printf_float+0x266>
 8014212:	4a37      	ldr	r2, [pc, #220]	@ (80142f0 <_printf_float+0x2dc>)
 8014214:	2301      	movs	r3, #1
 8014216:	4631      	mov	r1, r6
 8014218:	4628      	mov	r0, r5
 801421a:	47b8      	blx	r7
 801421c:	3001      	adds	r0, #1
 801421e:	f43f af54 	beq.w	80140ca <_printf_float+0xb6>
 8014222:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014226:	4543      	cmp	r3, r8
 8014228:	db02      	blt.n	8014230 <_printf_float+0x21c>
 801422a:	6823      	ldr	r3, [r4, #0]
 801422c:	07d8      	lsls	r0, r3, #31
 801422e:	d50f      	bpl.n	8014250 <_printf_float+0x23c>
 8014230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014234:	4631      	mov	r1, r6
 8014236:	4628      	mov	r0, r5
 8014238:	47b8      	blx	r7
 801423a:	3001      	adds	r0, #1
 801423c:	f43f af45 	beq.w	80140ca <_printf_float+0xb6>
 8014240:	f04f 0900 	mov.w	r9, #0
 8014244:	f108 38ff 	add.w	r8, r8, #4294967295
 8014248:	f104 0a1a 	add.w	sl, r4, #26
 801424c:	45c8      	cmp	r8, r9
 801424e:	dc09      	bgt.n	8014264 <_printf_float+0x250>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	079b      	lsls	r3, r3, #30
 8014254:	f100 8103 	bmi.w	801445e <_printf_float+0x44a>
 8014258:	68e0      	ldr	r0, [r4, #12]
 801425a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801425c:	4298      	cmp	r0, r3
 801425e:	bfb8      	it	lt
 8014260:	4618      	movlt	r0, r3
 8014262:	e734      	b.n	80140ce <_printf_float+0xba>
 8014264:	2301      	movs	r3, #1
 8014266:	4652      	mov	r2, sl
 8014268:	4631      	mov	r1, r6
 801426a:	4628      	mov	r0, r5
 801426c:	47b8      	blx	r7
 801426e:	3001      	adds	r0, #1
 8014270:	f43f af2b 	beq.w	80140ca <_printf_float+0xb6>
 8014274:	f109 0901 	add.w	r9, r9, #1
 8014278:	e7e8      	b.n	801424c <_printf_float+0x238>
 801427a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801427c:	2b00      	cmp	r3, #0
 801427e:	dc39      	bgt.n	80142f4 <_printf_float+0x2e0>
 8014280:	4a1b      	ldr	r2, [pc, #108]	@ (80142f0 <_printf_float+0x2dc>)
 8014282:	2301      	movs	r3, #1
 8014284:	4631      	mov	r1, r6
 8014286:	4628      	mov	r0, r5
 8014288:	47b8      	blx	r7
 801428a:	3001      	adds	r0, #1
 801428c:	f43f af1d 	beq.w	80140ca <_printf_float+0xb6>
 8014290:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014294:	ea59 0303 	orrs.w	r3, r9, r3
 8014298:	d102      	bne.n	80142a0 <_printf_float+0x28c>
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	07d9      	lsls	r1, r3, #31
 801429e:	d5d7      	bpl.n	8014250 <_printf_float+0x23c>
 80142a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142a4:	4631      	mov	r1, r6
 80142a6:	4628      	mov	r0, r5
 80142a8:	47b8      	blx	r7
 80142aa:	3001      	adds	r0, #1
 80142ac:	f43f af0d 	beq.w	80140ca <_printf_float+0xb6>
 80142b0:	f04f 0a00 	mov.w	sl, #0
 80142b4:	f104 0b1a 	add.w	fp, r4, #26
 80142b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142ba:	425b      	negs	r3, r3
 80142bc:	4553      	cmp	r3, sl
 80142be:	dc01      	bgt.n	80142c4 <_printf_float+0x2b0>
 80142c0:	464b      	mov	r3, r9
 80142c2:	e793      	b.n	80141ec <_printf_float+0x1d8>
 80142c4:	2301      	movs	r3, #1
 80142c6:	465a      	mov	r2, fp
 80142c8:	4631      	mov	r1, r6
 80142ca:	4628      	mov	r0, r5
 80142cc:	47b8      	blx	r7
 80142ce:	3001      	adds	r0, #1
 80142d0:	f43f aefb 	beq.w	80140ca <_printf_float+0xb6>
 80142d4:	f10a 0a01 	add.w	sl, sl, #1
 80142d8:	e7ee      	b.n	80142b8 <_printf_float+0x2a4>
 80142da:	bf00      	nop
 80142dc:	7fefffff 	.word	0x7fefffff
 80142e0:	08019f23 	.word	0x08019f23
 80142e4:	08019f1f 	.word	0x08019f1f
 80142e8:	08019f2b 	.word	0x08019f2b
 80142ec:	08019f27 	.word	0x08019f27
 80142f0:	0801a134 	.word	0x0801a134
 80142f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80142f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142fa:	4553      	cmp	r3, sl
 80142fc:	bfa8      	it	ge
 80142fe:	4653      	movge	r3, sl
 8014300:	2b00      	cmp	r3, #0
 8014302:	4699      	mov	r9, r3
 8014304:	dc36      	bgt.n	8014374 <_printf_float+0x360>
 8014306:	f04f 0b00 	mov.w	fp, #0
 801430a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801430e:	f104 021a 	add.w	r2, r4, #26
 8014312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014314:	9306      	str	r3, [sp, #24]
 8014316:	eba3 0309 	sub.w	r3, r3, r9
 801431a:	455b      	cmp	r3, fp
 801431c:	dc31      	bgt.n	8014382 <_printf_float+0x36e>
 801431e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014320:	459a      	cmp	sl, r3
 8014322:	dc3a      	bgt.n	801439a <_printf_float+0x386>
 8014324:	6823      	ldr	r3, [r4, #0]
 8014326:	07da      	lsls	r2, r3, #31
 8014328:	d437      	bmi.n	801439a <_printf_float+0x386>
 801432a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801432c:	ebaa 0903 	sub.w	r9, sl, r3
 8014330:	9b06      	ldr	r3, [sp, #24]
 8014332:	ebaa 0303 	sub.w	r3, sl, r3
 8014336:	4599      	cmp	r9, r3
 8014338:	bfa8      	it	ge
 801433a:	4699      	movge	r9, r3
 801433c:	f1b9 0f00 	cmp.w	r9, #0
 8014340:	dc33      	bgt.n	80143aa <_printf_float+0x396>
 8014342:	f04f 0800 	mov.w	r8, #0
 8014346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801434a:	f104 0b1a 	add.w	fp, r4, #26
 801434e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014350:	ebaa 0303 	sub.w	r3, sl, r3
 8014354:	eba3 0309 	sub.w	r3, r3, r9
 8014358:	4543      	cmp	r3, r8
 801435a:	f77f af79 	ble.w	8014250 <_printf_float+0x23c>
 801435e:	2301      	movs	r3, #1
 8014360:	465a      	mov	r2, fp
 8014362:	4631      	mov	r1, r6
 8014364:	4628      	mov	r0, r5
 8014366:	47b8      	blx	r7
 8014368:	3001      	adds	r0, #1
 801436a:	f43f aeae 	beq.w	80140ca <_printf_float+0xb6>
 801436e:	f108 0801 	add.w	r8, r8, #1
 8014372:	e7ec      	b.n	801434e <_printf_float+0x33a>
 8014374:	4642      	mov	r2, r8
 8014376:	4631      	mov	r1, r6
 8014378:	4628      	mov	r0, r5
 801437a:	47b8      	blx	r7
 801437c:	3001      	adds	r0, #1
 801437e:	d1c2      	bne.n	8014306 <_printf_float+0x2f2>
 8014380:	e6a3      	b.n	80140ca <_printf_float+0xb6>
 8014382:	2301      	movs	r3, #1
 8014384:	4631      	mov	r1, r6
 8014386:	4628      	mov	r0, r5
 8014388:	9206      	str	r2, [sp, #24]
 801438a:	47b8      	blx	r7
 801438c:	3001      	adds	r0, #1
 801438e:	f43f ae9c 	beq.w	80140ca <_printf_float+0xb6>
 8014392:	9a06      	ldr	r2, [sp, #24]
 8014394:	f10b 0b01 	add.w	fp, fp, #1
 8014398:	e7bb      	b.n	8014312 <_printf_float+0x2fe>
 801439a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801439e:	4631      	mov	r1, r6
 80143a0:	4628      	mov	r0, r5
 80143a2:	47b8      	blx	r7
 80143a4:	3001      	adds	r0, #1
 80143a6:	d1c0      	bne.n	801432a <_printf_float+0x316>
 80143a8:	e68f      	b.n	80140ca <_printf_float+0xb6>
 80143aa:	9a06      	ldr	r2, [sp, #24]
 80143ac:	464b      	mov	r3, r9
 80143ae:	4442      	add	r2, r8
 80143b0:	4631      	mov	r1, r6
 80143b2:	4628      	mov	r0, r5
 80143b4:	47b8      	blx	r7
 80143b6:	3001      	adds	r0, #1
 80143b8:	d1c3      	bne.n	8014342 <_printf_float+0x32e>
 80143ba:	e686      	b.n	80140ca <_printf_float+0xb6>
 80143bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80143c0:	f1ba 0f01 	cmp.w	sl, #1
 80143c4:	dc01      	bgt.n	80143ca <_printf_float+0x3b6>
 80143c6:	07db      	lsls	r3, r3, #31
 80143c8:	d536      	bpl.n	8014438 <_printf_float+0x424>
 80143ca:	2301      	movs	r3, #1
 80143cc:	4642      	mov	r2, r8
 80143ce:	4631      	mov	r1, r6
 80143d0:	4628      	mov	r0, r5
 80143d2:	47b8      	blx	r7
 80143d4:	3001      	adds	r0, #1
 80143d6:	f43f ae78 	beq.w	80140ca <_printf_float+0xb6>
 80143da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143de:	4631      	mov	r1, r6
 80143e0:	4628      	mov	r0, r5
 80143e2:	47b8      	blx	r7
 80143e4:	3001      	adds	r0, #1
 80143e6:	f43f ae70 	beq.w	80140ca <_printf_float+0xb6>
 80143ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80143ee:	2200      	movs	r2, #0
 80143f0:	2300      	movs	r3, #0
 80143f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143f6:	f7ec fb4f 	bl	8000a98 <__aeabi_dcmpeq>
 80143fa:	b9c0      	cbnz	r0, 801442e <_printf_float+0x41a>
 80143fc:	4653      	mov	r3, sl
 80143fe:	f108 0201 	add.w	r2, r8, #1
 8014402:	4631      	mov	r1, r6
 8014404:	4628      	mov	r0, r5
 8014406:	47b8      	blx	r7
 8014408:	3001      	adds	r0, #1
 801440a:	d10c      	bne.n	8014426 <_printf_float+0x412>
 801440c:	e65d      	b.n	80140ca <_printf_float+0xb6>
 801440e:	2301      	movs	r3, #1
 8014410:	465a      	mov	r2, fp
 8014412:	4631      	mov	r1, r6
 8014414:	4628      	mov	r0, r5
 8014416:	47b8      	blx	r7
 8014418:	3001      	adds	r0, #1
 801441a:	f43f ae56 	beq.w	80140ca <_printf_float+0xb6>
 801441e:	f108 0801 	add.w	r8, r8, #1
 8014422:	45d0      	cmp	r8, sl
 8014424:	dbf3      	blt.n	801440e <_printf_float+0x3fa>
 8014426:	464b      	mov	r3, r9
 8014428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801442c:	e6df      	b.n	80141ee <_printf_float+0x1da>
 801442e:	f04f 0800 	mov.w	r8, #0
 8014432:	f104 0b1a 	add.w	fp, r4, #26
 8014436:	e7f4      	b.n	8014422 <_printf_float+0x40e>
 8014438:	2301      	movs	r3, #1
 801443a:	4642      	mov	r2, r8
 801443c:	e7e1      	b.n	8014402 <_printf_float+0x3ee>
 801443e:	2301      	movs	r3, #1
 8014440:	464a      	mov	r2, r9
 8014442:	4631      	mov	r1, r6
 8014444:	4628      	mov	r0, r5
 8014446:	47b8      	blx	r7
 8014448:	3001      	adds	r0, #1
 801444a:	f43f ae3e 	beq.w	80140ca <_printf_float+0xb6>
 801444e:	f108 0801 	add.w	r8, r8, #1
 8014452:	68e3      	ldr	r3, [r4, #12]
 8014454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014456:	1a5b      	subs	r3, r3, r1
 8014458:	4543      	cmp	r3, r8
 801445a:	dcf0      	bgt.n	801443e <_printf_float+0x42a>
 801445c:	e6fc      	b.n	8014258 <_printf_float+0x244>
 801445e:	f04f 0800 	mov.w	r8, #0
 8014462:	f104 0919 	add.w	r9, r4, #25
 8014466:	e7f4      	b.n	8014452 <_printf_float+0x43e>

08014468 <_printf_common>:
 8014468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801446c:	4616      	mov	r6, r2
 801446e:	4698      	mov	r8, r3
 8014470:	688a      	ldr	r2, [r1, #8]
 8014472:	690b      	ldr	r3, [r1, #16]
 8014474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014478:	4293      	cmp	r3, r2
 801447a:	bfb8      	it	lt
 801447c:	4613      	movlt	r3, r2
 801447e:	6033      	str	r3, [r6, #0]
 8014480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014484:	4607      	mov	r7, r0
 8014486:	460c      	mov	r4, r1
 8014488:	b10a      	cbz	r2, 801448e <_printf_common+0x26>
 801448a:	3301      	adds	r3, #1
 801448c:	6033      	str	r3, [r6, #0]
 801448e:	6823      	ldr	r3, [r4, #0]
 8014490:	0699      	lsls	r1, r3, #26
 8014492:	bf42      	ittt	mi
 8014494:	6833      	ldrmi	r3, [r6, #0]
 8014496:	3302      	addmi	r3, #2
 8014498:	6033      	strmi	r3, [r6, #0]
 801449a:	6825      	ldr	r5, [r4, #0]
 801449c:	f015 0506 	ands.w	r5, r5, #6
 80144a0:	d106      	bne.n	80144b0 <_printf_common+0x48>
 80144a2:	f104 0a19 	add.w	sl, r4, #25
 80144a6:	68e3      	ldr	r3, [r4, #12]
 80144a8:	6832      	ldr	r2, [r6, #0]
 80144aa:	1a9b      	subs	r3, r3, r2
 80144ac:	42ab      	cmp	r3, r5
 80144ae:	dc26      	bgt.n	80144fe <_printf_common+0x96>
 80144b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80144b4:	6822      	ldr	r2, [r4, #0]
 80144b6:	3b00      	subs	r3, #0
 80144b8:	bf18      	it	ne
 80144ba:	2301      	movne	r3, #1
 80144bc:	0692      	lsls	r2, r2, #26
 80144be:	d42b      	bmi.n	8014518 <_printf_common+0xb0>
 80144c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80144c4:	4641      	mov	r1, r8
 80144c6:	4638      	mov	r0, r7
 80144c8:	47c8      	blx	r9
 80144ca:	3001      	adds	r0, #1
 80144cc:	d01e      	beq.n	801450c <_printf_common+0xa4>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	6922      	ldr	r2, [r4, #16]
 80144d2:	f003 0306 	and.w	r3, r3, #6
 80144d6:	2b04      	cmp	r3, #4
 80144d8:	bf02      	ittt	eq
 80144da:	68e5      	ldreq	r5, [r4, #12]
 80144dc:	6833      	ldreq	r3, [r6, #0]
 80144de:	1aed      	subeq	r5, r5, r3
 80144e0:	68a3      	ldr	r3, [r4, #8]
 80144e2:	bf0c      	ite	eq
 80144e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144e8:	2500      	movne	r5, #0
 80144ea:	4293      	cmp	r3, r2
 80144ec:	bfc4      	itt	gt
 80144ee:	1a9b      	subgt	r3, r3, r2
 80144f0:	18ed      	addgt	r5, r5, r3
 80144f2:	2600      	movs	r6, #0
 80144f4:	341a      	adds	r4, #26
 80144f6:	42b5      	cmp	r5, r6
 80144f8:	d11a      	bne.n	8014530 <_printf_common+0xc8>
 80144fa:	2000      	movs	r0, #0
 80144fc:	e008      	b.n	8014510 <_printf_common+0xa8>
 80144fe:	2301      	movs	r3, #1
 8014500:	4652      	mov	r2, sl
 8014502:	4641      	mov	r1, r8
 8014504:	4638      	mov	r0, r7
 8014506:	47c8      	blx	r9
 8014508:	3001      	adds	r0, #1
 801450a:	d103      	bne.n	8014514 <_printf_common+0xac>
 801450c:	f04f 30ff 	mov.w	r0, #4294967295
 8014510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014514:	3501      	adds	r5, #1
 8014516:	e7c6      	b.n	80144a6 <_printf_common+0x3e>
 8014518:	18e1      	adds	r1, r4, r3
 801451a:	1c5a      	adds	r2, r3, #1
 801451c:	2030      	movs	r0, #48	@ 0x30
 801451e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014522:	4422      	add	r2, r4
 8014524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801452c:	3302      	adds	r3, #2
 801452e:	e7c7      	b.n	80144c0 <_printf_common+0x58>
 8014530:	2301      	movs	r3, #1
 8014532:	4622      	mov	r2, r4
 8014534:	4641      	mov	r1, r8
 8014536:	4638      	mov	r0, r7
 8014538:	47c8      	blx	r9
 801453a:	3001      	adds	r0, #1
 801453c:	d0e6      	beq.n	801450c <_printf_common+0xa4>
 801453e:	3601      	adds	r6, #1
 8014540:	e7d9      	b.n	80144f6 <_printf_common+0x8e>
	...

08014544 <_printf_i>:
 8014544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014548:	7e0f      	ldrb	r7, [r1, #24]
 801454a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801454c:	2f78      	cmp	r7, #120	@ 0x78
 801454e:	4691      	mov	r9, r2
 8014550:	4680      	mov	r8, r0
 8014552:	460c      	mov	r4, r1
 8014554:	469a      	mov	sl, r3
 8014556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801455a:	d807      	bhi.n	801456c <_printf_i+0x28>
 801455c:	2f62      	cmp	r7, #98	@ 0x62
 801455e:	d80a      	bhi.n	8014576 <_printf_i+0x32>
 8014560:	2f00      	cmp	r7, #0
 8014562:	f000 80d1 	beq.w	8014708 <_printf_i+0x1c4>
 8014566:	2f58      	cmp	r7, #88	@ 0x58
 8014568:	f000 80b8 	beq.w	80146dc <_printf_i+0x198>
 801456c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014574:	e03a      	b.n	80145ec <_printf_i+0xa8>
 8014576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801457a:	2b15      	cmp	r3, #21
 801457c:	d8f6      	bhi.n	801456c <_printf_i+0x28>
 801457e:	a101      	add	r1, pc, #4	@ (adr r1, 8014584 <_printf_i+0x40>)
 8014580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014584:	080145dd 	.word	0x080145dd
 8014588:	080145f1 	.word	0x080145f1
 801458c:	0801456d 	.word	0x0801456d
 8014590:	0801456d 	.word	0x0801456d
 8014594:	0801456d 	.word	0x0801456d
 8014598:	0801456d 	.word	0x0801456d
 801459c:	080145f1 	.word	0x080145f1
 80145a0:	0801456d 	.word	0x0801456d
 80145a4:	0801456d 	.word	0x0801456d
 80145a8:	0801456d 	.word	0x0801456d
 80145ac:	0801456d 	.word	0x0801456d
 80145b0:	080146ef 	.word	0x080146ef
 80145b4:	0801461b 	.word	0x0801461b
 80145b8:	080146a9 	.word	0x080146a9
 80145bc:	0801456d 	.word	0x0801456d
 80145c0:	0801456d 	.word	0x0801456d
 80145c4:	08014711 	.word	0x08014711
 80145c8:	0801456d 	.word	0x0801456d
 80145cc:	0801461b 	.word	0x0801461b
 80145d0:	0801456d 	.word	0x0801456d
 80145d4:	0801456d 	.word	0x0801456d
 80145d8:	080146b1 	.word	0x080146b1
 80145dc:	6833      	ldr	r3, [r6, #0]
 80145de:	1d1a      	adds	r2, r3, #4
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	6032      	str	r2, [r6, #0]
 80145e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80145ec:	2301      	movs	r3, #1
 80145ee:	e09c      	b.n	801472a <_printf_i+0x1e6>
 80145f0:	6833      	ldr	r3, [r6, #0]
 80145f2:	6820      	ldr	r0, [r4, #0]
 80145f4:	1d19      	adds	r1, r3, #4
 80145f6:	6031      	str	r1, [r6, #0]
 80145f8:	0606      	lsls	r6, r0, #24
 80145fa:	d501      	bpl.n	8014600 <_printf_i+0xbc>
 80145fc:	681d      	ldr	r5, [r3, #0]
 80145fe:	e003      	b.n	8014608 <_printf_i+0xc4>
 8014600:	0645      	lsls	r5, r0, #25
 8014602:	d5fb      	bpl.n	80145fc <_printf_i+0xb8>
 8014604:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014608:	2d00      	cmp	r5, #0
 801460a:	da03      	bge.n	8014614 <_printf_i+0xd0>
 801460c:	232d      	movs	r3, #45	@ 0x2d
 801460e:	426d      	negs	r5, r5
 8014610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014614:	4858      	ldr	r0, [pc, #352]	@ (8014778 <_printf_i+0x234>)
 8014616:	230a      	movs	r3, #10
 8014618:	e011      	b.n	801463e <_printf_i+0xfa>
 801461a:	6821      	ldr	r1, [r4, #0]
 801461c:	6833      	ldr	r3, [r6, #0]
 801461e:	0608      	lsls	r0, r1, #24
 8014620:	f853 5b04 	ldr.w	r5, [r3], #4
 8014624:	d402      	bmi.n	801462c <_printf_i+0xe8>
 8014626:	0649      	lsls	r1, r1, #25
 8014628:	bf48      	it	mi
 801462a:	b2ad      	uxthmi	r5, r5
 801462c:	2f6f      	cmp	r7, #111	@ 0x6f
 801462e:	4852      	ldr	r0, [pc, #328]	@ (8014778 <_printf_i+0x234>)
 8014630:	6033      	str	r3, [r6, #0]
 8014632:	bf14      	ite	ne
 8014634:	230a      	movne	r3, #10
 8014636:	2308      	moveq	r3, #8
 8014638:	2100      	movs	r1, #0
 801463a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801463e:	6866      	ldr	r6, [r4, #4]
 8014640:	60a6      	str	r6, [r4, #8]
 8014642:	2e00      	cmp	r6, #0
 8014644:	db05      	blt.n	8014652 <_printf_i+0x10e>
 8014646:	6821      	ldr	r1, [r4, #0]
 8014648:	432e      	orrs	r6, r5
 801464a:	f021 0104 	bic.w	r1, r1, #4
 801464e:	6021      	str	r1, [r4, #0]
 8014650:	d04b      	beq.n	80146ea <_printf_i+0x1a6>
 8014652:	4616      	mov	r6, r2
 8014654:	fbb5 f1f3 	udiv	r1, r5, r3
 8014658:	fb03 5711 	mls	r7, r3, r1, r5
 801465c:	5dc7      	ldrb	r7, [r0, r7]
 801465e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014662:	462f      	mov	r7, r5
 8014664:	42bb      	cmp	r3, r7
 8014666:	460d      	mov	r5, r1
 8014668:	d9f4      	bls.n	8014654 <_printf_i+0x110>
 801466a:	2b08      	cmp	r3, #8
 801466c:	d10b      	bne.n	8014686 <_printf_i+0x142>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	07df      	lsls	r7, r3, #31
 8014672:	d508      	bpl.n	8014686 <_printf_i+0x142>
 8014674:	6923      	ldr	r3, [r4, #16]
 8014676:	6861      	ldr	r1, [r4, #4]
 8014678:	4299      	cmp	r1, r3
 801467a:	bfde      	ittt	le
 801467c:	2330      	movle	r3, #48	@ 0x30
 801467e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014682:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014686:	1b92      	subs	r2, r2, r6
 8014688:	6122      	str	r2, [r4, #16]
 801468a:	f8cd a000 	str.w	sl, [sp]
 801468e:	464b      	mov	r3, r9
 8014690:	aa03      	add	r2, sp, #12
 8014692:	4621      	mov	r1, r4
 8014694:	4640      	mov	r0, r8
 8014696:	f7ff fee7 	bl	8014468 <_printf_common>
 801469a:	3001      	adds	r0, #1
 801469c:	d14a      	bne.n	8014734 <_printf_i+0x1f0>
 801469e:	f04f 30ff 	mov.w	r0, #4294967295
 80146a2:	b004      	add	sp, #16
 80146a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	f043 0320 	orr.w	r3, r3, #32
 80146ae:	6023      	str	r3, [r4, #0]
 80146b0:	4832      	ldr	r0, [pc, #200]	@ (801477c <_printf_i+0x238>)
 80146b2:	2778      	movs	r7, #120	@ 0x78
 80146b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	6831      	ldr	r1, [r6, #0]
 80146bc:	061f      	lsls	r7, r3, #24
 80146be:	f851 5b04 	ldr.w	r5, [r1], #4
 80146c2:	d402      	bmi.n	80146ca <_printf_i+0x186>
 80146c4:	065f      	lsls	r7, r3, #25
 80146c6:	bf48      	it	mi
 80146c8:	b2ad      	uxthmi	r5, r5
 80146ca:	6031      	str	r1, [r6, #0]
 80146cc:	07d9      	lsls	r1, r3, #31
 80146ce:	bf44      	itt	mi
 80146d0:	f043 0320 	orrmi.w	r3, r3, #32
 80146d4:	6023      	strmi	r3, [r4, #0]
 80146d6:	b11d      	cbz	r5, 80146e0 <_printf_i+0x19c>
 80146d8:	2310      	movs	r3, #16
 80146da:	e7ad      	b.n	8014638 <_printf_i+0xf4>
 80146dc:	4826      	ldr	r0, [pc, #152]	@ (8014778 <_printf_i+0x234>)
 80146de:	e7e9      	b.n	80146b4 <_printf_i+0x170>
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	f023 0320 	bic.w	r3, r3, #32
 80146e6:	6023      	str	r3, [r4, #0]
 80146e8:	e7f6      	b.n	80146d8 <_printf_i+0x194>
 80146ea:	4616      	mov	r6, r2
 80146ec:	e7bd      	b.n	801466a <_printf_i+0x126>
 80146ee:	6833      	ldr	r3, [r6, #0]
 80146f0:	6825      	ldr	r5, [r4, #0]
 80146f2:	6961      	ldr	r1, [r4, #20]
 80146f4:	1d18      	adds	r0, r3, #4
 80146f6:	6030      	str	r0, [r6, #0]
 80146f8:	062e      	lsls	r6, r5, #24
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	d501      	bpl.n	8014702 <_printf_i+0x1be>
 80146fe:	6019      	str	r1, [r3, #0]
 8014700:	e002      	b.n	8014708 <_printf_i+0x1c4>
 8014702:	0668      	lsls	r0, r5, #25
 8014704:	d5fb      	bpl.n	80146fe <_printf_i+0x1ba>
 8014706:	8019      	strh	r1, [r3, #0]
 8014708:	2300      	movs	r3, #0
 801470a:	6123      	str	r3, [r4, #16]
 801470c:	4616      	mov	r6, r2
 801470e:	e7bc      	b.n	801468a <_printf_i+0x146>
 8014710:	6833      	ldr	r3, [r6, #0]
 8014712:	1d1a      	adds	r2, r3, #4
 8014714:	6032      	str	r2, [r6, #0]
 8014716:	681e      	ldr	r6, [r3, #0]
 8014718:	6862      	ldr	r2, [r4, #4]
 801471a:	2100      	movs	r1, #0
 801471c:	4630      	mov	r0, r6
 801471e:	f7eb fd3f 	bl	80001a0 <memchr>
 8014722:	b108      	cbz	r0, 8014728 <_printf_i+0x1e4>
 8014724:	1b80      	subs	r0, r0, r6
 8014726:	6060      	str	r0, [r4, #4]
 8014728:	6863      	ldr	r3, [r4, #4]
 801472a:	6123      	str	r3, [r4, #16]
 801472c:	2300      	movs	r3, #0
 801472e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014732:	e7aa      	b.n	801468a <_printf_i+0x146>
 8014734:	6923      	ldr	r3, [r4, #16]
 8014736:	4632      	mov	r2, r6
 8014738:	4649      	mov	r1, r9
 801473a:	4640      	mov	r0, r8
 801473c:	47d0      	blx	sl
 801473e:	3001      	adds	r0, #1
 8014740:	d0ad      	beq.n	801469e <_printf_i+0x15a>
 8014742:	6823      	ldr	r3, [r4, #0]
 8014744:	079b      	lsls	r3, r3, #30
 8014746:	d413      	bmi.n	8014770 <_printf_i+0x22c>
 8014748:	68e0      	ldr	r0, [r4, #12]
 801474a:	9b03      	ldr	r3, [sp, #12]
 801474c:	4298      	cmp	r0, r3
 801474e:	bfb8      	it	lt
 8014750:	4618      	movlt	r0, r3
 8014752:	e7a6      	b.n	80146a2 <_printf_i+0x15e>
 8014754:	2301      	movs	r3, #1
 8014756:	4632      	mov	r2, r6
 8014758:	4649      	mov	r1, r9
 801475a:	4640      	mov	r0, r8
 801475c:	47d0      	blx	sl
 801475e:	3001      	adds	r0, #1
 8014760:	d09d      	beq.n	801469e <_printf_i+0x15a>
 8014762:	3501      	adds	r5, #1
 8014764:	68e3      	ldr	r3, [r4, #12]
 8014766:	9903      	ldr	r1, [sp, #12]
 8014768:	1a5b      	subs	r3, r3, r1
 801476a:	42ab      	cmp	r3, r5
 801476c:	dcf2      	bgt.n	8014754 <_printf_i+0x210>
 801476e:	e7eb      	b.n	8014748 <_printf_i+0x204>
 8014770:	2500      	movs	r5, #0
 8014772:	f104 0619 	add.w	r6, r4, #25
 8014776:	e7f5      	b.n	8014764 <_printf_i+0x220>
 8014778:	08019f2f 	.word	0x08019f2f
 801477c:	08019f40 	.word	0x08019f40

08014780 <std>:
 8014780:	2300      	movs	r3, #0
 8014782:	b510      	push	{r4, lr}
 8014784:	4604      	mov	r4, r0
 8014786:	e9c0 3300 	strd	r3, r3, [r0]
 801478a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801478e:	6083      	str	r3, [r0, #8]
 8014790:	8181      	strh	r1, [r0, #12]
 8014792:	6643      	str	r3, [r0, #100]	@ 0x64
 8014794:	81c2      	strh	r2, [r0, #14]
 8014796:	6183      	str	r3, [r0, #24]
 8014798:	4619      	mov	r1, r3
 801479a:	2208      	movs	r2, #8
 801479c:	305c      	adds	r0, #92	@ 0x5c
 801479e:	f000 f918 	bl	80149d2 <memset>
 80147a2:	4b0d      	ldr	r3, [pc, #52]	@ (80147d8 <std+0x58>)
 80147a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80147a6:	4b0d      	ldr	r3, [pc, #52]	@ (80147dc <std+0x5c>)
 80147a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80147aa:	4b0d      	ldr	r3, [pc, #52]	@ (80147e0 <std+0x60>)
 80147ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80147ae:	4b0d      	ldr	r3, [pc, #52]	@ (80147e4 <std+0x64>)
 80147b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80147b2:	4b0d      	ldr	r3, [pc, #52]	@ (80147e8 <std+0x68>)
 80147b4:	6224      	str	r4, [r4, #32]
 80147b6:	429c      	cmp	r4, r3
 80147b8:	d006      	beq.n	80147c8 <std+0x48>
 80147ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80147be:	4294      	cmp	r4, r2
 80147c0:	d002      	beq.n	80147c8 <std+0x48>
 80147c2:	33d0      	adds	r3, #208	@ 0xd0
 80147c4:	429c      	cmp	r4, r3
 80147c6:	d105      	bne.n	80147d4 <std+0x54>
 80147c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80147cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d0:	f000 bffe 	b.w	80157d0 <__retarget_lock_init_recursive>
 80147d4:	bd10      	pop	{r4, pc}
 80147d6:	bf00      	nop
 80147d8:	08014949 	.word	0x08014949
 80147dc:	0801496f 	.word	0x0801496f
 80147e0:	080149a7 	.word	0x080149a7
 80147e4:	080149cb 	.word	0x080149cb
 80147e8:	2000a794 	.word	0x2000a794

080147ec <stdio_exit_handler>:
 80147ec:	4a02      	ldr	r2, [pc, #8]	@ (80147f8 <stdio_exit_handler+0xc>)
 80147ee:	4903      	ldr	r1, [pc, #12]	@ (80147fc <stdio_exit_handler+0x10>)
 80147f0:	4803      	ldr	r0, [pc, #12]	@ (8014800 <stdio_exit_handler+0x14>)
 80147f2:	f000 b869 	b.w	80148c8 <_fwalk_sglue>
 80147f6:	bf00      	nop
 80147f8:	20000024 	.word	0x20000024
 80147fc:	08017341 	.word	0x08017341
 8014800:	2000003c 	.word	0x2000003c

08014804 <cleanup_stdio>:
 8014804:	6841      	ldr	r1, [r0, #4]
 8014806:	4b0c      	ldr	r3, [pc, #48]	@ (8014838 <cleanup_stdio+0x34>)
 8014808:	4299      	cmp	r1, r3
 801480a:	b510      	push	{r4, lr}
 801480c:	4604      	mov	r4, r0
 801480e:	d001      	beq.n	8014814 <cleanup_stdio+0x10>
 8014810:	f002 fd96 	bl	8017340 <_fflush_r>
 8014814:	68a1      	ldr	r1, [r4, #8]
 8014816:	4b09      	ldr	r3, [pc, #36]	@ (801483c <cleanup_stdio+0x38>)
 8014818:	4299      	cmp	r1, r3
 801481a:	d002      	beq.n	8014822 <cleanup_stdio+0x1e>
 801481c:	4620      	mov	r0, r4
 801481e:	f002 fd8f 	bl	8017340 <_fflush_r>
 8014822:	68e1      	ldr	r1, [r4, #12]
 8014824:	4b06      	ldr	r3, [pc, #24]	@ (8014840 <cleanup_stdio+0x3c>)
 8014826:	4299      	cmp	r1, r3
 8014828:	d004      	beq.n	8014834 <cleanup_stdio+0x30>
 801482a:	4620      	mov	r0, r4
 801482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014830:	f002 bd86 	b.w	8017340 <_fflush_r>
 8014834:	bd10      	pop	{r4, pc}
 8014836:	bf00      	nop
 8014838:	2000a794 	.word	0x2000a794
 801483c:	2000a7fc 	.word	0x2000a7fc
 8014840:	2000a864 	.word	0x2000a864

08014844 <global_stdio_init.part.0>:
 8014844:	b510      	push	{r4, lr}
 8014846:	4b0b      	ldr	r3, [pc, #44]	@ (8014874 <global_stdio_init.part.0+0x30>)
 8014848:	4c0b      	ldr	r4, [pc, #44]	@ (8014878 <global_stdio_init.part.0+0x34>)
 801484a:	4a0c      	ldr	r2, [pc, #48]	@ (801487c <global_stdio_init.part.0+0x38>)
 801484c:	601a      	str	r2, [r3, #0]
 801484e:	4620      	mov	r0, r4
 8014850:	2200      	movs	r2, #0
 8014852:	2104      	movs	r1, #4
 8014854:	f7ff ff94 	bl	8014780 <std>
 8014858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801485c:	2201      	movs	r2, #1
 801485e:	2109      	movs	r1, #9
 8014860:	f7ff ff8e 	bl	8014780 <std>
 8014864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014868:	2202      	movs	r2, #2
 801486a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801486e:	2112      	movs	r1, #18
 8014870:	f7ff bf86 	b.w	8014780 <std>
 8014874:	2000a8cc 	.word	0x2000a8cc
 8014878:	2000a794 	.word	0x2000a794
 801487c:	080147ed 	.word	0x080147ed

08014880 <__sfp_lock_acquire>:
 8014880:	4801      	ldr	r0, [pc, #4]	@ (8014888 <__sfp_lock_acquire+0x8>)
 8014882:	f000 bfa7 	b.w	80157d4 <__retarget_lock_acquire_recursive>
 8014886:	bf00      	nop
 8014888:	2000a8fb 	.word	0x2000a8fb

0801488c <__sfp_lock_release>:
 801488c:	4801      	ldr	r0, [pc, #4]	@ (8014894 <__sfp_lock_release+0x8>)
 801488e:	f000 bfa3 	b.w	80157d8 <__retarget_lock_release_recursive>
 8014892:	bf00      	nop
 8014894:	2000a8fb 	.word	0x2000a8fb

08014898 <__sinit>:
 8014898:	b510      	push	{r4, lr}
 801489a:	4604      	mov	r4, r0
 801489c:	f7ff fff0 	bl	8014880 <__sfp_lock_acquire>
 80148a0:	6a23      	ldr	r3, [r4, #32]
 80148a2:	b11b      	cbz	r3, 80148ac <__sinit+0x14>
 80148a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148a8:	f7ff bff0 	b.w	801488c <__sfp_lock_release>
 80148ac:	4b04      	ldr	r3, [pc, #16]	@ (80148c0 <__sinit+0x28>)
 80148ae:	6223      	str	r3, [r4, #32]
 80148b0:	4b04      	ldr	r3, [pc, #16]	@ (80148c4 <__sinit+0x2c>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1f5      	bne.n	80148a4 <__sinit+0xc>
 80148b8:	f7ff ffc4 	bl	8014844 <global_stdio_init.part.0>
 80148bc:	e7f2      	b.n	80148a4 <__sinit+0xc>
 80148be:	bf00      	nop
 80148c0:	08014805 	.word	0x08014805
 80148c4:	2000a8cc 	.word	0x2000a8cc

080148c8 <_fwalk_sglue>:
 80148c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148cc:	4607      	mov	r7, r0
 80148ce:	4688      	mov	r8, r1
 80148d0:	4614      	mov	r4, r2
 80148d2:	2600      	movs	r6, #0
 80148d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148d8:	f1b9 0901 	subs.w	r9, r9, #1
 80148dc:	d505      	bpl.n	80148ea <_fwalk_sglue+0x22>
 80148de:	6824      	ldr	r4, [r4, #0]
 80148e0:	2c00      	cmp	r4, #0
 80148e2:	d1f7      	bne.n	80148d4 <_fwalk_sglue+0xc>
 80148e4:	4630      	mov	r0, r6
 80148e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148ea:	89ab      	ldrh	r3, [r5, #12]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d907      	bls.n	8014900 <_fwalk_sglue+0x38>
 80148f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148f4:	3301      	adds	r3, #1
 80148f6:	d003      	beq.n	8014900 <_fwalk_sglue+0x38>
 80148f8:	4629      	mov	r1, r5
 80148fa:	4638      	mov	r0, r7
 80148fc:	47c0      	blx	r8
 80148fe:	4306      	orrs	r6, r0
 8014900:	3568      	adds	r5, #104	@ 0x68
 8014902:	e7e9      	b.n	80148d8 <_fwalk_sglue+0x10>

08014904 <siprintf>:
 8014904:	b40e      	push	{r1, r2, r3}
 8014906:	b510      	push	{r4, lr}
 8014908:	b09d      	sub	sp, #116	@ 0x74
 801490a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801490c:	9002      	str	r0, [sp, #8]
 801490e:	9006      	str	r0, [sp, #24]
 8014910:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014914:	480a      	ldr	r0, [pc, #40]	@ (8014940 <siprintf+0x3c>)
 8014916:	9107      	str	r1, [sp, #28]
 8014918:	9104      	str	r1, [sp, #16]
 801491a:	490a      	ldr	r1, [pc, #40]	@ (8014944 <siprintf+0x40>)
 801491c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014920:	9105      	str	r1, [sp, #20]
 8014922:	2400      	movs	r4, #0
 8014924:	a902      	add	r1, sp, #8
 8014926:	6800      	ldr	r0, [r0, #0]
 8014928:	9301      	str	r3, [sp, #4]
 801492a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801492c:	f002 fb88 	bl	8017040 <_svfiprintf_r>
 8014930:	9b02      	ldr	r3, [sp, #8]
 8014932:	701c      	strb	r4, [r3, #0]
 8014934:	b01d      	add	sp, #116	@ 0x74
 8014936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801493a:	b003      	add	sp, #12
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop
 8014940:	20000038 	.word	0x20000038
 8014944:	ffff0208 	.word	0xffff0208

08014948 <__sread>:
 8014948:	b510      	push	{r4, lr}
 801494a:	460c      	mov	r4, r1
 801494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014950:	f000 fef0 	bl	8015734 <_read_r>
 8014954:	2800      	cmp	r0, #0
 8014956:	bfab      	itete	ge
 8014958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801495a:	89a3      	ldrhlt	r3, [r4, #12]
 801495c:	181b      	addge	r3, r3, r0
 801495e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014962:	bfac      	ite	ge
 8014964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014966:	81a3      	strhlt	r3, [r4, #12]
 8014968:	bd10      	pop	{r4, pc}

0801496a <__seofread>:
 801496a:	2000      	movs	r0, #0
 801496c:	4770      	bx	lr

0801496e <__swrite>:
 801496e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014972:	461f      	mov	r7, r3
 8014974:	898b      	ldrh	r3, [r1, #12]
 8014976:	05db      	lsls	r3, r3, #23
 8014978:	4605      	mov	r5, r0
 801497a:	460c      	mov	r4, r1
 801497c:	4616      	mov	r6, r2
 801497e:	d505      	bpl.n	801498c <__swrite+0x1e>
 8014980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014984:	2302      	movs	r3, #2
 8014986:	2200      	movs	r2, #0
 8014988:	f000 fec2 	bl	8015710 <_lseek_r>
 801498c:	89a3      	ldrh	r3, [r4, #12]
 801498e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014996:	81a3      	strh	r3, [r4, #12]
 8014998:	4632      	mov	r2, r6
 801499a:	463b      	mov	r3, r7
 801499c:	4628      	mov	r0, r5
 801499e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149a2:	f000 bed9 	b.w	8015758 <_write_r>

080149a6 <__sseek>:
 80149a6:	b510      	push	{r4, lr}
 80149a8:	460c      	mov	r4, r1
 80149aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149ae:	f000 feaf 	bl	8015710 <_lseek_r>
 80149b2:	1c43      	adds	r3, r0, #1
 80149b4:	89a3      	ldrh	r3, [r4, #12]
 80149b6:	bf15      	itete	ne
 80149b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80149ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80149be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80149c2:	81a3      	strheq	r3, [r4, #12]
 80149c4:	bf18      	it	ne
 80149c6:	81a3      	strhne	r3, [r4, #12]
 80149c8:	bd10      	pop	{r4, pc}

080149ca <__sclose>:
 80149ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149ce:	f000 be8f 	b.w	80156f0 <_close_r>

080149d2 <memset>:
 80149d2:	4402      	add	r2, r0
 80149d4:	4603      	mov	r3, r0
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d100      	bne.n	80149dc <memset+0xa>
 80149da:	4770      	bx	lr
 80149dc:	f803 1b01 	strb.w	r1, [r3], #1
 80149e0:	e7f9      	b.n	80149d6 <memset+0x4>
	...

080149e4 <localtime>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4b0b      	ldr	r3, [pc, #44]	@ (8014a14 <localtime+0x30>)
 80149e8:	681d      	ldr	r5, [r3, #0]
 80149ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80149ec:	4604      	mov	r4, r0
 80149ee:	b953      	cbnz	r3, 8014a06 <localtime+0x22>
 80149f0:	2024      	movs	r0, #36	@ 0x24
 80149f2:	f001 fe17 	bl	8016624 <malloc>
 80149f6:	4602      	mov	r2, r0
 80149f8:	6368      	str	r0, [r5, #52]	@ 0x34
 80149fa:	b920      	cbnz	r0, 8014a06 <localtime+0x22>
 80149fc:	4b06      	ldr	r3, [pc, #24]	@ (8014a18 <localtime+0x34>)
 80149fe:	4807      	ldr	r0, [pc, #28]	@ (8014a1c <localtime+0x38>)
 8014a00:	2132      	movs	r1, #50	@ 0x32
 8014a02:	f000 ff01 	bl	8015808 <__assert_func>
 8014a06:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8014a08:	4620      	mov	r0, r4
 8014a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a0e:	f000 b807 	b.w	8014a20 <localtime_r>
 8014a12:	bf00      	nop
 8014a14:	20000038 	.word	0x20000038
 8014a18:	08019eb0 	.word	0x08019eb0
 8014a1c:	08019f51 	.word	0x08019f51

08014a20 <localtime_r>:
 8014a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a24:	460c      	mov	r4, r1
 8014a26:	4607      	mov	r7, r0
 8014a28:	f002 fd1c 	bl	8017464 <__gettzinfo>
 8014a2c:	4621      	mov	r1, r4
 8014a2e:	4605      	mov	r5, r0
 8014a30:	4638      	mov	r0, r7
 8014a32:	f002 fd1b 	bl	801746c <gmtime_r>
 8014a36:	6943      	ldr	r3, [r0, #20]
 8014a38:	0799      	lsls	r1, r3, #30
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8014a40:	d106      	bne.n	8014a50 <localtime_r+0x30>
 8014a42:	2264      	movs	r2, #100	@ 0x64
 8014a44:	fb98 f3f2 	sdiv	r3, r8, r2
 8014a48:	fb02 8313 	mls	r3, r2, r3, r8
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d171      	bne.n	8014b34 <localtime_r+0x114>
 8014a50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014a54:	fb98 f3f2 	sdiv	r3, r8, r2
 8014a58:	fb02 8313 	mls	r3, r2, r3, r8
 8014a5c:	fab3 f383 	clz	r3, r3
 8014a60:	095b      	lsrs	r3, r3, #5
 8014a62:	425e      	negs	r6, r3
 8014a64:	4b64      	ldr	r3, [pc, #400]	@ (8014bf8 <localtime_r+0x1d8>)
 8014a66:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 8014a6a:	441e      	add	r6, r3
 8014a6c:	f000 fc08 	bl	8015280 <__tz_lock>
 8014a70:	f000 fc12 	bl	8015298 <_tzset_unlocked>
 8014a74:	4b61      	ldr	r3, [pc, #388]	@ (8014bfc <localtime_r+0x1dc>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d06a      	beq.n	8014b52 <localtime_r+0x132>
 8014a7c:	686b      	ldr	r3, [r5, #4]
 8014a7e:	4543      	cmp	r3, r8
 8014a80:	d15a      	bne.n	8014b38 <localtime_r+0x118>
 8014a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a86:	682f      	ldr	r7, [r5, #0]
 8014a88:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014a8c:	2f00      	cmp	r7, #0
 8014a8e:	d15b      	bne.n	8014b48 <localtime_r+0x128>
 8014a90:	4282      	cmp	r2, r0
 8014a92:	eb73 0101 	sbcs.w	r1, r3, r1
 8014a96:	db5e      	blt.n	8014b56 <localtime_r+0x136>
 8014a98:	2301      	movs	r3, #1
 8014a9a:	6223      	str	r3, [r4, #32]
 8014a9c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014a9e:	6861      	ldr	r1, [r4, #4]
 8014aa0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8014aa4:	fb93 f0f2 	sdiv	r0, r3, r2
 8014aa8:	fb02 3310 	mls	r3, r2, r0, r3
 8014aac:	223c      	movs	r2, #60	@ 0x3c
 8014aae:	fb93 f5f2 	sdiv	r5, r3, r2
 8014ab2:	fb02 3215 	mls	r2, r2, r5, r3
 8014ab6:	6823      	ldr	r3, [r4, #0]
 8014ab8:	1a9b      	subs	r3, r3, r2
 8014aba:	68a2      	ldr	r2, [r4, #8]
 8014abc:	6023      	str	r3, [r4, #0]
 8014abe:	1b49      	subs	r1, r1, r5
 8014ac0:	1a12      	subs	r2, r2, r0
 8014ac2:	2b3b      	cmp	r3, #59	@ 0x3b
 8014ac4:	6061      	str	r1, [r4, #4]
 8014ac6:	60a2      	str	r2, [r4, #8]
 8014ac8:	dd51      	ble.n	8014b6e <localtime_r+0x14e>
 8014aca:	3101      	adds	r1, #1
 8014acc:	6061      	str	r1, [r4, #4]
 8014ace:	3b3c      	subs	r3, #60	@ 0x3c
 8014ad0:	6023      	str	r3, [r4, #0]
 8014ad2:	6863      	ldr	r3, [r4, #4]
 8014ad4:	2b3b      	cmp	r3, #59	@ 0x3b
 8014ad6:	dd50      	ble.n	8014b7a <localtime_r+0x15a>
 8014ad8:	3201      	adds	r2, #1
 8014ada:	60a2      	str	r2, [r4, #8]
 8014adc:	3b3c      	subs	r3, #60	@ 0x3c
 8014ade:	6063      	str	r3, [r4, #4]
 8014ae0:	68a3      	ldr	r3, [r4, #8]
 8014ae2:	2b17      	cmp	r3, #23
 8014ae4:	dd4f      	ble.n	8014b86 <localtime_r+0x166>
 8014ae6:	69e2      	ldr	r2, [r4, #28]
 8014ae8:	3201      	adds	r2, #1
 8014aea:	61e2      	str	r2, [r4, #28]
 8014aec:	69a2      	ldr	r2, [r4, #24]
 8014aee:	3201      	adds	r2, #1
 8014af0:	2a07      	cmp	r2, #7
 8014af2:	bfa8      	it	ge
 8014af4:	2200      	movge	r2, #0
 8014af6:	61a2      	str	r2, [r4, #24]
 8014af8:	68e2      	ldr	r2, [r4, #12]
 8014afa:	3b18      	subs	r3, #24
 8014afc:	3201      	adds	r2, #1
 8014afe:	60a3      	str	r3, [r4, #8]
 8014b00:	6923      	ldr	r3, [r4, #16]
 8014b02:	60e2      	str	r2, [r4, #12]
 8014b04:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8014b08:	428a      	cmp	r2, r1
 8014b0a:	dd0e      	ble.n	8014b2a <localtime_r+0x10a>
 8014b0c:	2b0b      	cmp	r3, #11
 8014b0e:	eba2 0201 	sub.w	r2, r2, r1
 8014b12:	60e2      	str	r2, [r4, #12]
 8014b14:	f103 0201 	add.w	r2, r3, #1
 8014b18:	bf09      	itett	eq
 8014b1a:	6963      	ldreq	r3, [r4, #20]
 8014b1c:	6122      	strne	r2, [r4, #16]
 8014b1e:	2200      	moveq	r2, #0
 8014b20:	3301      	addeq	r3, #1
 8014b22:	bf02      	ittt	eq
 8014b24:	6122      	streq	r2, [r4, #16]
 8014b26:	6163      	streq	r3, [r4, #20]
 8014b28:	61e2      	streq	r2, [r4, #28]
 8014b2a:	f000 fbaf 	bl	801528c <__tz_unlock>
 8014b2e:	4620      	mov	r0, r4
 8014b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b34:	2301      	movs	r3, #1
 8014b36:	e794      	b.n	8014a62 <localtime_r+0x42>
 8014b38:	4640      	mov	r0, r8
 8014b3a:	f000 faed 	bl	8015118 <__tzcalc_limits>
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	d19f      	bne.n	8014a82 <localtime_r+0x62>
 8014b42:	f04f 33ff 	mov.w	r3, #4294967295
 8014b46:	e004      	b.n	8014b52 <localtime_r+0x132>
 8014b48:	4282      	cmp	r2, r0
 8014b4a:	eb73 0101 	sbcs.w	r1, r3, r1
 8014b4e:	da02      	bge.n	8014b56 <localtime_r+0x136>
 8014b50:	2300      	movs	r3, #0
 8014b52:	6223      	str	r3, [r4, #32]
 8014b54:	e009      	b.n	8014b6a <localtime_r+0x14a>
 8014b56:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8014b5a:	4282      	cmp	r2, r0
 8014b5c:	418b      	sbcs	r3, r1
 8014b5e:	bfb4      	ite	lt
 8014b60:	2301      	movlt	r3, #1
 8014b62:	2300      	movge	r3, #0
 8014b64:	6223      	str	r3, [r4, #32]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d198      	bne.n	8014a9c <localtime_r+0x7c>
 8014b6a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8014b6c:	e797      	b.n	8014a9e <localtime_r+0x7e>
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	daaf      	bge.n	8014ad2 <localtime_r+0xb2>
 8014b72:	3901      	subs	r1, #1
 8014b74:	6061      	str	r1, [r4, #4]
 8014b76:	333c      	adds	r3, #60	@ 0x3c
 8014b78:	e7aa      	b.n	8014ad0 <localtime_r+0xb0>
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	dab0      	bge.n	8014ae0 <localtime_r+0xc0>
 8014b7e:	3a01      	subs	r2, #1
 8014b80:	60a2      	str	r2, [r4, #8]
 8014b82:	333c      	adds	r3, #60	@ 0x3c
 8014b84:	e7ab      	b.n	8014ade <localtime_r+0xbe>
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	dacf      	bge.n	8014b2a <localtime_r+0x10a>
 8014b8a:	69e2      	ldr	r2, [r4, #28]
 8014b8c:	3a01      	subs	r2, #1
 8014b8e:	61e2      	str	r2, [r4, #28]
 8014b90:	69a2      	ldr	r2, [r4, #24]
 8014b92:	3a01      	subs	r2, #1
 8014b94:	bf48      	it	mi
 8014b96:	2206      	movmi	r2, #6
 8014b98:	61a2      	str	r2, [r4, #24]
 8014b9a:	68e2      	ldr	r2, [r4, #12]
 8014b9c:	3318      	adds	r3, #24
 8014b9e:	3a01      	subs	r2, #1
 8014ba0:	60e2      	str	r2, [r4, #12]
 8014ba2:	60a3      	str	r3, [r4, #8]
 8014ba4:	2a00      	cmp	r2, #0
 8014ba6:	d1c0      	bne.n	8014b2a <localtime_r+0x10a>
 8014ba8:	6923      	ldr	r3, [r4, #16]
 8014baa:	3b01      	subs	r3, #1
 8014bac:	d405      	bmi.n	8014bba <localtime_r+0x19a>
 8014bae:	6123      	str	r3, [r4, #16]
 8014bb0:	6923      	ldr	r3, [r4, #16]
 8014bb2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014bb6:	60e3      	str	r3, [r4, #12]
 8014bb8:	e7b7      	b.n	8014b2a <localtime_r+0x10a>
 8014bba:	230b      	movs	r3, #11
 8014bbc:	6123      	str	r3, [r4, #16]
 8014bbe:	6963      	ldr	r3, [r4, #20]
 8014bc0:	1e5a      	subs	r2, r3, #1
 8014bc2:	6162      	str	r2, [r4, #20]
 8014bc4:	0792      	lsls	r2, r2, #30
 8014bc6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8014bca:	d105      	bne.n	8014bd8 <localtime_r+0x1b8>
 8014bcc:	2164      	movs	r1, #100	@ 0x64
 8014bce:	fb93 f2f1 	sdiv	r2, r3, r1
 8014bd2:	fb01 3212 	mls	r2, r1, r2, r3
 8014bd6:	b962      	cbnz	r2, 8014bf2 <localtime_r+0x1d2>
 8014bd8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014bdc:	fb93 f1f2 	sdiv	r1, r3, r2
 8014be0:	fb02 3311 	mls	r3, r2, r1, r3
 8014be4:	fab3 f383 	clz	r3, r3
 8014be8:	095b      	lsrs	r3, r3, #5
 8014bea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8014bee:	61e3      	str	r3, [r4, #28]
 8014bf0:	e7de      	b.n	8014bb0 <localtime_r+0x190>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e7f9      	b.n	8014bea <localtime_r+0x1ca>
 8014bf6:	bf00      	nop
 8014bf8:	0801a19c 	.word	0x0801a19c
 8014bfc:	2000a8f0 	.word	0x2000a8f0

08014c00 <validate_structure>:
 8014c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c02:	6801      	ldr	r1, [r0, #0]
 8014c04:	293b      	cmp	r1, #59	@ 0x3b
 8014c06:	4604      	mov	r4, r0
 8014c08:	d911      	bls.n	8014c2e <validate_structure+0x2e>
 8014c0a:	223c      	movs	r2, #60	@ 0x3c
 8014c0c:	4668      	mov	r0, sp
 8014c0e:	f000 fe19 	bl	8015844 <div>
 8014c12:	9a01      	ldr	r2, [sp, #4]
 8014c14:	6863      	ldr	r3, [r4, #4]
 8014c16:	9900      	ldr	r1, [sp, #0]
 8014c18:	2a00      	cmp	r2, #0
 8014c1a:	440b      	add	r3, r1
 8014c1c:	6063      	str	r3, [r4, #4]
 8014c1e:	bfbb      	ittet	lt
 8014c20:	323c      	addlt	r2, #60	@ 0x3c
 8014c22:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014c26:	6022      	strge	r2, [r4, #0]
 8014c28:	6022      	strlt	r2, [r4, #0]
 8014c2a:	bfb8      	it	lt
 8014c2c:	6063      	strlt	r3, [r4, #4]
 8014c2e:	6861      	ldr	r1, [r4, #4]
 8014c30:	293b      	cmp	r1, #59	@ 0x3b
 8014c32:	d911      	bls.n	8014c58 <validate_structure+0x58>
 8014c34:	223c      	movs	r2, #60	@ 0x3c
 8014c36:	4668      	mov	r0, sp
 8014c38:	f000 fe04 	bl	8015844 <div>
 8014c3c:	9a01      	ldr	r2, [sp, #4]
 8014c3e:	68a3      	ldr	r3, [r4, #8]
 8014c40:	9900      	ldr	r1, [sp, #0]
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	440b      	add	r3, r1
 8014c46:	60a3      	str	r3, [r4, #8]
 8014c48:	bfbb      	ittet	lt
 8014c4a:	323c      	addlt	r2, #60	@ 0x3c
 8014c4c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014c50:	6062      	strge	r2, [r4, #4]
 8014c52:	6062      	strlt	r2, [r4, #4]
 8014c54:	bfb8      	it	lt
 8014c56:	60a3      	strlt	r3, [r4, #8]
 8014c58:	68a1      	ldr	r1, [r4, #8]
 8014c5a:	2917      	cmp	r1, #23
 8014c5c:	d911      	bls.n	8014c82 <validate_structure+0x82>
 8014c5e:	2218      	movs	r2, #24
 8014c60:	4668      	mov	r0, sp
 8014c62:	f000 fdef 	bl	8015844 <div>
 8014c66:	9a01      	ldr	r2, [sp, #4]
 8014c68:	68e3      	ldr	r3, [r4, #12]
 8014c6a:	9900      	ldr	r1, [sp, #0]
 8014c6c:	2a00      	cmp	r2, #0
 8014c6e:	440b      	add	r3, r1
 8014c70:	60e3      	str	r3, [r4, #12]
 8014c72:	bfbb      	ittet	lt
 8014c74:	3218      	addlt	r2, #24
 8014c76:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014c7a:	60a2      	strge	r2, [r4, #8]
 8014c7c:	60a2      	strlt	r2, [r4, #8]
 8014c7e:	bfb8      	it	lt
 8014c80:	60e3      	strlt	r3, [r4, #12]
 8014c82:	6921      	ldr	r1, [r4, #16]
 8014c84:	290b      	cmp	r1, #11
 8014c86:	d911      	bls.n	8014cac <validate_structure+0xac>
 8014c88:	220c      	movs	r2, #12
 8014c8a:	4668      	mov	r0, sp
 8014c8c:	f000 fdda 	bl	8015844 <div>
 8014c90:	9a01      	ldr	r2, [sp, #4]
 8014c92:	6963      	ldr	r3, [r4, #20]
 8014c94:	9900      	ldr	r1, [sp, #0]
 8014c96:	2a00      	cmp	r2, #0
 8014c98:	440b      	add	r3, r1
 8014c9a:	6163      	str	r3, [r4, #20]
 8014c9c:	bfbb      	ittet	lt
 8014c9e:	320c      	addlt	r2, #12
 8014ca0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014ca4:	6122      	strge	r2, [r4, #16]
 8014ca6:	6122      	strlt	r2, [r4, #16]
 8014ca8:	bfb8      	it	lt
 8014caa:	6163      	strlt	r3, [r4, #20]
 8014cac:	6963      	ldr	r3, [r4, #20]
 8014cae:	079a      	lsls	r2, r3, #30
 8014cb0:	d11c      	bne.n	8014cec <validate_structure+0xec>
 8014cb2:	2164      	movs	r1, #100	@ 0x64
 8014cb4:	fb93 f2f1 	sdiv	r2, r3, r1
 8014cb8:	fb01 3212 	mls	r2, r1, r2, r3
 8014cbc:	b9c2      	cbnz	r2, 8014cf0 <validate_structure+0xf0>
 8014cbe:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8014cc2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014cc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8014cca:	fb02 3311 	mls	r3, r2, r1, r3
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	bf0c      	ite	eq
 8014cd2:	231d      	moveq	r3, #29
 8014cd4:	231c      	movne	r3, #28
 8014cd6:	68e2      	ldr	r2, [r4, #12]
 8014cd8:	2a00      	cmp	r2, #0
 8014cda:	dc0b      	bgt.n	8014cf4 <validate_structure+0xf4>
 8014cdc:	4d31      	ldr	r5, [pc, #196]	@ (8014da4 <validate_structure+0x1a4>)
 8014cde:	200b      	movs	r0, #11
 8014ce0:	2164      	movs	r1, #100	@ 0x64
 8014ce2:	68e6      	ldr	r6, [r4, #12]
 8014ce4:	2e00      	cmp	r6, #0
 8014ce6:	dd30      	ble.n	8014d4a <validate_structure+0x14a>
 8014ce8:	b003      	add	sp, #12
 8014cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cec:	231c      	movs	r3, #28
 8014cee:	e7f2      	b.n	8014cd6 <validate_structure+0xd6>
 8014cf0:	231d      	movs	r3, #29
 8014cf2:	e7f0      	b.n	8014cd6 <validate_structure+0xd6>
 8014cf4:	4d2b      	ldr	r5, [pc, #172]	@ (8014da4 <validate_structure+0x1a4>)
 8014cf6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014cfa:	2a01      	cmp	r2, #1
 8014cfc:	bf14      	ite	ne
 8014cfe:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8014d02:	4618      	moveq	r0, r3
 8014d04:	4281      	cmp	r1, r0
 8014d06:	ddef      	ble.n	8014ce8 <validate_structure+0xe8>
 8014d08:	3201      	adds	r2, #1
 8014d0a:	1a09      	subs	r1, r1, r0
 8014d0c:	2a0c      	cmp	r2, #12
 8014d0e:	60e1      	str	r1, [r4, #12]
 8014d10:	6122      	str	r2, [r4, #16]
 8014d12:	d1f0      	bne.n	8014cf6 <validate_structure+0xf6>
 8014d14:	6963      	ldr	r3, [r4, #20]
 8014d16:	2100      	movs	r1, #0
 8014d18:	1c5a      	adds	r2, r3, #1
 8014d1a:	6121      	str	r1, [r4, #16]
 8014d1c:	0791      	lsls	r1, r2, #30
 8014d1e:	6162      	str	r2, [r4, #20]
 8014d20:	d13c      	bne.n	8014d9c <validate_structure+0x19c>
 8014d22:	2164      	movs	r1, #100	@ 0x64
 8014d24:	fb92 f0f1 	sdiv	r0, r2, r1
 8014d28:	fb01 2210 	mls	r2, r1, r0, r2
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	d137      	bne.n	8014da0 <validate_structure+0x1a0>
 8014d30:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8014d34:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014d38:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d3c:	fb02 3311 	mls	r3, r2, r1, r3
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	bf0c      	ite	eq
 8014d44:	231d      	moveq	r3, #29
 8014d46:	231c      	movne	r3, #28
 8014d48:	e7d5      	b.n	8014cf6 <validate_structure+0xf6>
 8014d4a:	6922      	ldr	r2, [r4, #16]
 8014d4c:	3a01      	subs	r2, #1
 8014d4e:	6122      	str	r2, [r4, #16]
 8014d50:	3201      	adds	r2, #1
 8014d52:	d116      	bne.n	8014d82 <validate_structure+0x182>
 8014d54:	6963      	ldr	r3, [r4, #20]
 8014d56:	1e5a      	subs	r2, r3, #1
 8014d58:	0797      	lsls	r7, r2, #30
 8014d5a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8014d5e:	d119      	bne.n	8014d94 <validate_structure+0x194>
 8014d60:	fb92 f7f1 	sdiv	r7, r2, r1
 8014d64:	fb01 2217 	mls	r2, r1, r7, r2
 8014d68:	b9b2      	cbnz	r2, 8014d98 <validate_structure+0x198>
 8014d6a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8014d6e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014d72:	fb93 f7f2 	sdiv	r7, r3, r2
 8014d76:	fb02 3317 	mls	r3, r2, r7, r3
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	bf0c      	ite	eq
 8014d7e:	231d      	moveq	r3, #29
 8014d80:	231c      	movne	r3, #28
 8014d82:	6922      	ldr	r2, [r4, #16]
 8014d84:	2a01      	cmp	r2, #1
 8014d86:	bf14      	ite	ne
 8014d88:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8014d8c:	461a      	moveq	r2, r3
 8014d8e:	4432      	add	r2, r6
 8014d90:	60e2      	str	r2, [r4, #12]
 8014d92:	e7a6      	b.n	8014ce2 <validate_structure+0xe2>
 8014d94:	231c      	movs	r3, #28
 8014d96:	e7f4      	b.n	8014d82 <validate_structure+0x182>
 8014d98:	231d      	movs	r3, #29
 8014d9a:	e7f2      	b.n	8014d82 <validate_structure+0x182>
 8014d9c:	231c      	movs	r3, #28
 8014d9e:	e7aa      	b.n	8014cf6 <validate_structure+0xf6>
 8014da0:	231d      	movs	r3, #29
 8014da2:	e7a8      	b.n	8014cf6 <validate_structure+0xf6>
 8014da4:	0801a16c 	.word	0x0801a16c

08014da8 <mktime>:
 8014da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dac:	b085      	sub	sp, #20
 8014dae:	4607      	mov	r7, r0
 8014db0:	f002 fb58 	bl	8017464 <__gettzinfo>
 8014db4:	4681      	mov	r9, r0
 8014db6:	4638      	mov	r0, r7
 8014db8:	f7ff ff22 	bl	8014c00 <validate_structure>
 8014dbc:	e9d7 4300 	ldrd	r4, r3, [r7]
 8014dc0:	223c      	movs	r2, #60	@ 0x3c
 8014dc2:	fb02 4403 	mla	r4, r2, r3, r4
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	697d      	ldr	r5, [r7, #20]
 8014dca:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8014dce:	fb02 4403 	mla	r4, r2, r3, r4
 8014dd2:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8014dd6:	4ac3      	ldr	r2, [pc, #780]	@ (80150e4 <mktime+0x33c>)
 8014dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014ddc:	3e01      	subs	r6, #1
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	4416      	add	r6, r2
 8014de2:	dd11      	ble.n	8014e08 <mktime+0x60>
 8014de4:	07a9      	lsls	r1, r5, #30
 8014de6:	d10f      	bne.n	8014e08 <mktime+0x60>
 8014de8:	2264      	movs	r2, #100	@ 0x64
 8014dea:	fb95 f3f2 	sdiv	r3, r5, r2
 8014dee:	fb02 5313 	mls	r3, r2, r3, r5
 8014df2:	b943      	cbnz	r3, 8014e06 <mktime+0x5e>
 8014df4:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8014df8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014dfc:	fb93 f1f2 	sdiv	r1, r3, r2
 8014e00:	fb02 3311 	mls	r3, r2, r1, r3
 8014e04:	b903      	cbnz	r3, 8014e08 <mktime+0x60>
 8014e06:	3601      	adds	r6, #1
 8014e08:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8014e0c:	3310      	adds	r3, #16
 8014e0e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8014e12:	4293      	cmp	r3, r2
 8014e14:	61fe      	str	r6, [r7, #28]
 8014e16:	f200 8170 	bhi.w	80150fa <mktime+0x352>
 8014e1a:	2d46      	cmp	r5, #70	@ 0x46
 8014e1c:	f340 80b6 	ble.w	8014f8c <mktime+0x1e4>
 8014e20:	2346      	movs	r3, #70	@ 0x46
 8014e22:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014e26:	2164      	movs	r1, #100	@ 0x64
 8014e28:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014e2c:	079a      	lsls	r2, r3, #30
 8014e2e:	f040 80a7 	bne.w	8014f80 <mktime+0x1d8>
 8014e32:	fb93 f2f1 	sdiv	r2, r3, r1
 8014e36:	fb01 3212 	mls	r2, r1, r2, r3
 8014e3a:	2a00      	cmp	r2, #0
 8014e3c:	f040 80a3 	bne.w	8014f86 <mktime+0x1de>
 8014e40:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8014e44:	fb92 fef0 	sdiv	lr, r2, r0
 8014e48:	fb00 221e 	mls	r2, r0, lr, r2
 8014e4c:	2a00      	cmp	r2, #0
 8014e4e:	bf0c      	ite	eq
 8014e50:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8014e54:	4662      	movne	r2, ip
 8014e56:	3301      	adds	r3, #1
 8014e58:	429d      	cmp	r5, r3
 8014e5a:	4416      	add	r6, r2
 8014e5c:	d1e6      	bne.n	8014e2c <mktime+0x84>
 8014e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80150e8 <mktime+0x340>)
 8014e60:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014e64:	fbc6 4803 	smlal	r4, r8, r6, r3
 8014e68:	f000 fa0a 	bl	8015280 <__tz_lock>
 8014e6c:	f000 fa14 	bl	8015298 <_tzset_unlocked>
 8014e70:	4b9e      	ldr	r3, [pc, #632]	@ (80150ec <mktime+0x344>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 8147 	beq.w	8015108 <mktime+0x360>
 8014e7a:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8014e7e:	6978      	ldr	r0, [r7, #20]
 8014e80:	4653      	mov	r3, sl
 8014e82:	2b01      	cmp	r3, #1
 8014e84:	bfa8      	it	ge
 8014e86:	2301      	movge	r3, #1
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014e8e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8014e92:	4283      	cmp	r3, r0
 8014e94:	f040 80bd 	bne.w	8015012 <mktime+0x26a>
 8014e98:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8014e9c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8014ea0:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8014ea4:	1a13      	subs	r3, r2, r0
 8014ea6:	9303      	str	r3, [sp, #12]
 8014ea8:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8014eac:	9302      	str	r3, [sp, #8]
 8014eae:	9a02      	ldr	r2, [sp, #8]
 8014eb0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8014eb4:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8014eb8:	ebb2 0e03 	subs.w	lr, r2, r3
 8014ebc:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8014ec0:	4574      	cmp	r4, lr
 8014ec2:	eb78 0201 	sbcs.w	r2, r8, r1
 8014ec6:	f280 80c7 	bge.w	8015058 <mktime+0x2b0>
 8014eca:	f8d9 2000 	ldr.w	r2, [r9]
 8014ece:	2a00      	cmp	r2, #0
 8014ed0:	f000 80d0 	beq.w	8015074 <mktime+0x2cc>
 8014ed4:	9a03      	ldr	r2, [sp, #12]
 8014ed6:	4294      	cmp	r4, r2
 8014ed8:	eb78 020b 	sbcs.w	r2, r8, fp
 8014edc:	f2c0 8111 	blt.w	8015102 <mktime+0x35a>
 8014ee0:	4574      	cmp	r4, lr
 8014ee2:	eb78 0101 	sbcs.w	r1, r8, r1
 8014ee6:	bfb4      	ite	lt
 8014ee8:	f04f 0b01 	movlt.w	fp, #1
 8014eec:	f04f 0b00 	movge.w	fp, #0
 8014ef0:	f1ba 0f00 	cmp.w	sl, #0
 8014ef4:	f2c0 8094 	blt.w	8015020 <mktime+0x278>
 8014ef8:	9a01      	ldr	r2, [sp, #4]
 8014efa:	ea82 0a0b 	eor.w	sl, r2, fp
 8014efe:	f1ba 0f01 	cmp.w	sl, #1
 8014f02:	f040 808d 	bne.w	8015020 <mktime+0x278>
 8014f06:	f1bb 0f00 	cmp.w	fp, #0
 8014f0a:	f000 80c2 	beq.w	8015092 <mktime+0x2ea>
 8014f0e:	1a1b      	subs	r3, r3, r0
 8014f10:	683a      	ldr	r2, [r7, #0]
 8014f12:	441a      	add	r2, r3
 8014f14:	191c      	adds	r4, r3, r4
 8014f16:	603a      	str	r2, [r7, #0]
 8014f18:	4638      	mov	r0, r7
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	9201      	str	r2, [sp, #4]
 8014f1e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014f22:	f7ff fe6d 	bl	8014c00 <validate_structure>
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	9a01      	ldr	r2, [sp, #4]
 8014f2a:	1a9b      	subs	r3, r3, r2
 8014f2c:	d078      	beq.n	8015020 <mktime+0x278>
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	f300 80b1 	bgt.w	8015096 <mktime+0x2ee>
 8014f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f38:	bfa8      	it	ge
 8014f3a:	469a      	movge	sl, r3
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8014f42:	4456      	add	r6, sl
 8014f44:	f140 80b0 	bpl.w	80150a8 <mktime+0x300>
 8014f48:	1e6b      	subs	r3, r5, #1
 8014f4a:	0799      	lsls	r1, r3, #30
 8014f4c:	f040 80a6 	bne.w	801509c <mktime+0x2f4>
 8014f50:	2264      	movs	r2, #100	@ 0x64
 8014f52:	fb93 f1f2 	sdiv	r1, r3, r2
 8014f56:	fb02 3311 	mls	r3, r2, r1, r3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	f040 80a1 	bne.w	80150a2 <mktime+0x2fa>
 8014f60:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014f64:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8014f68:	fb95 f2f3 	sdiv	r2, r5, r3
 8014f6c:	fb03 5512 	mls	r5, r3, r2, r5
 8014f70:	2d00      	cmp	r5, #0
 8014f72:	f240 136d 	movw	r3, #365	@ 0x16d
 8014f76:	bf18      	it	ne
 8014f78:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8014f7c:	61fb      	str	r3, [r7, #28]
 8014f7e:	e04f      	b.n	8015020 <mktime+0x278>
 8014f80:	f240 126d 	movw	r2, #365	@ 0x16d
 8014f84:	e767      	b.n	8014e56 <mktime+0xae>
 8014f86:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8014f8a:	e764      	b.n	8014e56 <mktime+0xae>
 8014f8c:	f43f af67 	beq.w	8014e5e <mktime+0xb6>
 8014f90:	2345      	movs	r3, #69	@ 0x45
 8014f92:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014f96:	2164      	movs	r1, #100	@ 0x64
 8014f98:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014f9c:	e012      	b.n	8014fc4 <mktime+0x21c>
 8014f9e:	bb62      	cbnz	r2, 8014ffa <mktime+0x252>
 8014fa0:	fb93 f2f1 	sdiv	r2, r3, r1
 8014fa4:	fb01 3212 	mls	r2, r1, r2, r3
 8014fa8:	bb52      	cbnz	r2, 8015000 <mktime+0x258>
 8014faa:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8014fae:	fb92 fef0 	sdiv	lr, r2, r0
 8014fb2:	fb00 221e 	mls	r2, r0, lr, r2
 8014fb6:	2a00      	cmp	r2, #0
 8014fb8:	bf0c      	ite	eq
 8014fba:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8014fbe:	4662      	movne	r2, ip
 8014fc0:	1ab6      	subs	r6, r6, r2
 8014fc2:	3b01      	subs	r3, #1
 8014fc4:	429d      	cmp	r5, r3
 8014fc6:	f003 0203 	and.w	r2, r3, #3
 8014fca:	dbe8      	blt.n	8014f9e <mktime+0x1f6>
 8014fcc:	b9da      	cbnz	r2, 8015006 <mktime+0x25e>
 8014fce:	2264      	movs	r2, #100	@ 0x64
 8014fd0:	fb95 f3f2 	sdiv	r3, r5, r2
 8014fd4:	fb02 5313 	mls	r3, r2, r3, r5
 8014fd8:	b9c3      	cbnz	r3, 801500c <mktime+0x264>
 8014fda:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8014fde:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014fe2:	fb93 f1f2 	sdiv	r1, r3, r2
 8014fe6:	fb02 3311 	mls	r3, r2, r1, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f240 136d 	movw	r3, #365	@ 0x16d
 8014ff0:	bf08      	it	eq
 8014ff2:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8014ff6:	1af6      	subs	r6, r6, r3
 8014ff8:	e731      	b.n	8014e5e <mktime+0xb6>
 8014ffa:	f240 126d 	movw	r2, #365	@ 0x16d
 8014ffe:	e7df      	b.n	8014fc0 <mktime+0x218>
 8015000:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8015004:	e7dc      	b.n	8014fc0 <mktime+0x218>
 8015006:	f240 136d 	movw	r3, #365	@ 0x16d
 801500a:	e7f4      	b.n	8014ff6 <mktime+0x24e>
 801500c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8015010:	e7f1      	b.n	8014ff6 <mktime+0x24e>
 8015012:	f000 f881 	bl	8015118 <__tzcalc_limits>
 8015016:	2800      	cmp	r0, #0
 8015018:	f47f af3e 	bne.w	8014e98 <mktime+0xf0>
 801501c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015020:	f1bb 0f01 	cmp.w	fp, #1
 8015024:	d172      	bne.n	801510c <mktime+0x364>
 8015026:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801502a:	191c      	adds	r4, r3, r4
 801502c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8015030:	f04f 0b01 	mov.w	fp, #1
 8015034:	f000 f92a 	bl	801528c <__tz_unlock>
 8015038:	3604      	adds	r6, #4
 801503a:	2307      	movs	r3, #7
 801503c:	fb96 f3f3 	sdiv	r3, r6, r3
 8015040:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015044:	1af6      	subs	r6, r6, r3
 8015046:	d456      	bmi.n	80150f6 <mktime+0x34e>
 8015048:	f8c7 b020 	str.w	fp, [r7, #32]
 801504c:	61be      	str	r6, [r7, #24]
 801504e:	4620      	mov	r0, r4
 8015050:	4641      	mov	r1, r8
 8015052:	b005      	add	sp, #20
 8015054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015058:	9a02      	ldr	r2, [sp, #8]
 801505a:	1a12      	subs	r2, r2, r0
 801505c:	9202      	str	r2, [sp, #8]
 801505e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8015062:	eb6c 0c02 	sbc.w	ip, ip, r2
 8015066:	9a02      	ldr	r2, [sp, #8]
 8015068:	4294      	cmp	r4, r2
 801506a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801506e:	f6bf af2c 	bge.w	8014eca <mktime+0x122>
 8015072:	e7d3      	b.n	801501c <mktime+0x274>
 8015074:	9a03      	ldr	r2, [sp, #12]
 8015076:	4294      	cmp	r4, r2
 8015078:	eb78 020b 	sbcs.w	r2, r8, fp
 801507c:	f6ff af30 	blt.w	8014ee0 <mktime+0x138>
 8015080:	f1ba 0f00 	cmp.w	sl, #0
 8015084:	dbcf      	blt.n	8015026 <mktime+0x27e>
 8015086:	f04f 0b01 	mov.w	fp, #1
 801508a:	e735      	b.n	8014ef8 <mktime+0x150>
 801508c:	f04f 0b00 	mov.w	fp, #0
 8015090:	e732      	b.n	8014ef8 <mktime+0x150>
 8015092:	1ac3      	subs	r3, r0, r3
 8015094:	e73c      	b.n	8014f10 <mktime+0x168>
 8015096:	f04f 3aff 	mov.w	sl, #4294967295
 801509a:	e74f      	b.n	8014f3c <mktime+0x194>
 801509c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80150a0:	e76c      	b.n	8014f7c <mktime+0x1d4>
 80150a2:	f240 136d 	movw	r3, #365	@ 0x16d
 80150a6:	e769      	b.n	8014f7c <mktime+0x1d4>
 80150a8:	07aa      	lsls	r2, r5, #30
 80150aa:	d117      	bne.n	80150dc <mktime+0x334>
 80150ac:	2164      	movs	r1, #100	@ 0x64
 80150ae:	fb95 f2f1 	sdiv	r2, r5, r1
 80150b2:	fb01 5212 	mls	r2, r1, r2, r5
 80150b6:	b9da      	cbnz	r2, 80150f0 <mktime+0x348>
 80150b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80150bc:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80150c0:	fb95 f1f2 	sdiv	r1, r5, r2
 80150c4:	fb02 5511 	mls	r5, r2, r1, r5
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	f240 126d 	movw	r2, #365	@ 0x16d
 80150ce:	bf08      	it	eq
 80150d0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80150d4:	4293      	cmp	r3, r2
 80150d6:	bfa8      	it	ge
 80150d8:	1a9b      	subge	r3, r3, r2
 80150da:	e74f      	b.n	8014f7c <mktime+0x1d4>
 80150dc:	f240 126d 	movw	r2, #365	@ 0x16d
 80150e0:	e7f8      	b.n	80150d4 <mktime+0x32c>
 80150e2:	bf00      	nop
 80150e4:	0801a13c 	.word	0x0801a13c
 80150e8:	00015180 	.word	0x00015180
 80150ec:	2000a8f0 	.word	0x2000a8f0
 80150f0:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80150f4:	e7ee      	b.n	80150d4 <mktime+0x32c>
 80150f6:	3607      	adds	r6, #7
 80150f8:	e7a6      	b.n	8015048 <mktime+0x2a0>
 80150fa:	f04f 34ff 	mov.w	r4, #4294967295
 80150fe:	46a0      	mov	r8, r4
 8015100:	e7a5      	b.n	801504e <mktime+0x2a6>
 8015102:	f1ba 0f00 	cmp.w	sl, #0
 8015106:	dac1      	bge.n	801508c <mktime+0x2e4>
 8015108:	f04f 0b00 	mov.w	fp, #0
 801510c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8015110:	191c      	adds	r4, r3, r4
 8015112:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8015116:	e78d      	b.n	8015034 <mktime+0x28c>

08015118 <__tzcalc_limits>:
 8015118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	f002 f9a1 	bl	8017464 <__gettzinfo>
 8015122:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8015126:	429c      	cmp	r4, r3
 8015128:	f340 80a3 	ble.w	8015272 <__tzcalc_limits+0x15a>
 801512c:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8015130:	1865      	adds	r5, r4, r1
 8015132:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8015136:	f240 126d 	movw	r2, #365	@ 0x16d
 801513a:	10ad      	asrs	r5, r5, #2
 801513c:	fb02 5503 	mla	r5, r2, r3, r5
 8015140:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8015144:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8015148:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801514c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015150:	441d      	add	r5, r3
 8015152:	19a3      	adds	r3, r4, r6
 8015154:	4e48      	ldr	r6, [pc, #288]	@ (8015278 <__tzcalc_limits+0x160>)
 8015156:	6044      	str	r4, [r0, #4]
 8015158:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801515c:	4601      	mov	r1, r0
 801515e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015162:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8015166:	441d      	add	r5, r3
 8015168:	7a0b      	ldrb	r3, [r1, #8]
 801516a:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801516e:	2b4a      	cmp	r3, #74	@ 0x4a
 8015170:	d138      	bne.n	80151e4 <__tzcalc_limits+0xcc>
 8015172:	07a2      	lsls	r2, r4, #30
 8015174:	eb05 030c 	add.w	r3, r5, ip
 8015178:	d106      	bne.n	8015188 <__tzcalc_limits+0x70>
 801517a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801517e:	fb94 f2fe 	sdiv	r2, r4, lr
 8015182:	fb0e 4212 	mls	r2, lr, r2, r4
 8015186:	b932      	cbnz	r2, 8015196 <__tzcalc_limits+0x7e>
 8015188:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801518c:	fb94 f2fe 	sdiv	r2, r4, lr
 8015190:	fb0e 4212 	mls	r2, lr, r2, r4
 8015194:	bb1a      	cbnz	r2, 80151de <__tzcalc_limits+0xc6>
 8015196:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 801519a:	bfd4      	ite	le
 801519c:	f04f 0c00 	movle.w	ip, #0
 80151a0:	f04f 0c01 	movgt.w	ip, #1
 80151a4:	4463      	add	r3, ip
 80151a6:	3b01      	subs	r3, #1
 80151a8:	698a      	ldr	r2, [r1, #24]
 80151aa:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80151ae:	fbc3 2c06 	smlal	r2, ip, r3, r6
 80151b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80151b4:	18d2      	adds	r2, r2, r3
 80151b6:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 80151ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80151be:	3128      	adds	r1, #40	@ 0x28
 80151c0:	428f      	cmp	r7, r1
 80151c2:	d1d1      	bne.n	8015168 <__tzcalc_limits+0x50>
 80151c4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80151c8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80151cc:	428c      	cmp	r4, r1
 80151ce:	4193      	sbcs	r3, r2
 80151d0:	bfb4      	ite	lt
 80151d2:	2301      	movlt	r3, #1
 80151d4:	2300      	movge	r3, #0
 80151d6:	6003      	str	r3, [r0, #0]
 80151d8:	2001      	movs	r0, #1
 80151da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151de:	f04f 0c00 	mov.w	ip, #0
 80151e2:	e7df      	b.n	80151a4 <__tzcalc_limits+0x8c>
 80151e4:	2b44      	cmp	r3, #68	@ 0x44
 80151e6:	d102      	bne.n	80151ee <__tzcalc_limits+0xd6>
 80151e8:	eb05 030c 	add.w	r3, r5, ip
 80151ec:	e7dc      	b.n	80151a8 <__tzcalc_limits+0x90>
 80151ee:	07a3      	lsls	r3, r4, #30
 80151f0:	d105      	bne.n	80151fe <__tzcalc_limits+0xe6>
 80151f2:	2264      	movs	r2, #100	@ 0x64
 80151f4:	fb94 f3f2 	sdiv	r3, r4, r2
 80151f8:	fb02 4313 	mls	r3, r2, r3, r4
 80151fc:	bb93      	cbnz	r3, 8015264 <__tzcalc_limits+0x14c>
 80151fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015202:	fb94 f3f2 	sdiv	r3, r4, r2
 8015206:	fb02 4313 	mls	r3, r2, r3, r4
 801520a:	fab3 f383 	clz	r3, r3
 801520e:	095b      	lsrs	r3, r3, #5
 8015210:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801527c <__tzcalc_limits+0x164>
 8015214:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8015218:	425b      	negs	r3, r3
 801521a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801521e:	462a      	mov	r2, r5
 8015220:	f04f 0800 	mov.w	r8, #0
 8015224:	4473      	add	r3, lr
 8015226:	f108 0801 	add.w	r8, r8, #1
 801522a:	45c1      	cmp	r9, r8
 801522c:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8015230:	dc1a      	bgt.n	8015268 <__tzcalc_limits+0x150>
 8015232:	f102 0804 	add.w	r8, r2, #4
 8015236:	2307      	movs	r3, #7
 8015238:	fb98 f3f3 	sdiv	r3, r8, r3
 801523c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015240:	eba8 0303 	sub.w	r3, r8, r3
 8015244:	ebbc 0c03 	subs.w	ip, ip, r3
 8015248:	690b      	ldr	r3, [r1, #16]
 801524a:	f103 33ff 	add.w	r3, r3, #4294967295
 801524e:	bf48      	it	mi
 8015250:	f10c 0c07 	addmi.w	ip, ip, #7
 8015254:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015258:	449c      	add	ip, r3
 801525a:	45f4      	cmp	ip, lr
 801525c:	da06      	bge.n	801526c <__tzcalc_limits+0x154>
 801525e:	eb02 030c 	add.w	r3, r2, ip
 8015262:	e7a1      	b.n	80151a8 <__tzcalc_limits+0x90>
 8015264:	2301      	movs	r3, #1
 8015266:	e7d3      	b.n	8015210 <__tzcalc_limits+0xf8>
 8015268:	4472      	add	r2, lr
 801526a:	e7dc      	b.n	8015226 <__tzcalc_limits+0x10e>
 801526c:	f1ac 0c07 	sub.w	ip, ip, #7
 8015270:	e7f3      	b.n	801525a <__tzcalc_limits+0x142>
 8015272:	2000      	movs	r0, #0
 8015274:	e7b1      	b.n	80151da <__tzcalc_limits+0xc2>
 8015276:	bf00      	nop
 8015278:	00015180 	.word	0x00015180
 801527c:	0801a198 	.word	0x0801a198

08015280 <__tz_lock>:
 8015280:	4801      	ldr	r0, [pc, #4]	@ (8015288 <__tz_lock+0x8>)
 8015282:	f000 baa6 	b.w	80157d2 <__retarget_lock_acquire>
 8015286:	bf00      	nop
 8015288:	2000a8f8 	.word	0x2000a8f8

0801528c <__tz_unlock>:
 801528c:	4801      	ldr	r0, [pc, #4]	@ (8015294 <__tz_unlock+0x8>)
 801528e:	f000 baa2 	b.w	80157d6 <__retarget_lock_release>
 8015292:	bf00      	nop
 8015294:	2000a8f8 	.word	0x2000a8f8

08015298 <_tzset_unlocked>:
 8015298:	4b01      	ldr	r3, [pc, #4]	@ (80152a0 <_tzset_unlocked+0x8>)
 801529a:	6818      	ldr	r0, [r3, #0]
 801529c:	f000 b802 	b.w	80152a4 <_tzset_unlocked_r>
 80152a0:	20000038 	.word	0x20000038

080152a4 <_tzset_unlocked_r>:
 80152a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a8:	b08d      	sub	sp, #52	@ 0x34
 80152aa:	4607      	mov	r7, r0
 80152ac:	f002 f8da 	bl	8017464 <__gettzinfo>
 80152b0:	49bc      	ldr	r1, [pc, #752]	@ (80155a4 <_tzset_unlocked_r+0x300>)
 80152b2:	4dbd      	ldr	r5, [pc, #756]	@ (80155a8 <_tzset_unlocked_r+0x304>)
 80152b4:	4604      	mov	r4, r0
 80152b6:	4638      	mov	r0, r7
 80152b8:	f001 f9ac 	bl	8016614 <_getenv_r>
 80152bc:	4606      	mov	r6, r0
 80152be:	bb10      	cbnz	r0, 8015306 <_tzset_unlocked_r+0x62>
 80152c0:	4bba      	ldr	r3, [pc, #744]	@ (80155ac <_tzset_unlocked_r+0x308>)
 80152c2:	4abb      	ldr	r2, [pc, #748]	@ (80155b0 <_tzset_unlocked_r+0x30c>)
 80152c4:	6018      	str	r0, [r3, #0]
 80152c6:	4bbb      	ldr	r3, [pc, #748]	@ (80155b4 <_tzset_unlocked_r+0x310>)
 80152c8:	62a0      	str	r0, [r4, #40]	@ 0x28
 80152ca:	6018      	str	r0, [r3, #0]
 80152cc:	4bba      	ldr	r3, [pc, #744]	@ (80155b8 <_tzset_unlocked_r+0x314>)
 80152ce:	6520      	str	r0, [r4, #80]	@ 0x50
 80152d0:	e9c3 2200 	strd	r2, r2, [r3]
 80152d4:	214a      	movs	r1, #74	@ 0x4a
 80152d6:	2200      	movs	r2, #0
 80152d8:	2300      	movs	r3, #0
 80152da:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80152de:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80152e2:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80152e6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80152ea:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80152ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80152f2:	6828      	ldr	r0, [r5, #0]
 80152f4:	7221      	strb	r1, [r4, #8]
 80152f6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80152fa:	f001 f99b 	bl	8016634 <free>
 80152fe:	602e      	str	r6, [r5, #0]
 8015300:	b00d      	add	sp, #52	@ 0x34
 8015302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015306:	6829      	ldr	r1, [r5, #0]
 8015308:	2900      	cmp	r1, #0
 801530a:	f040 808e 	bne.w	801542a <_tzset_unlocked_r+0x186>
 801530e:	6828      	ldr	r0, [r5, #0]
 8015310:	f001 f990 	bl	8016634 <free>
 8015314:	4630      	mov	r0, r6
 8015316:	f7ea ff93 	bl	8000240 <strlen>
 801531a:	1c41      	adds	r1, r0, #1
 801531c:	4638      	mov	r0, r7
 801531e:	f001 f9b3 	bl	8016688 <_malloc_r>
 8015322:	6028      	str	r0, [r5, #0]
 8015324:	2800      	cmp	r0, #0
 8015326:	f040 8086 	bne.w	8015436 <_tzset_unlocked_r+0x192>
 801532a:	4aa2      	ldr	r2, [pc, #648]	@ (80155b4 <_tzset_unlocked_r+0x310>)
 801532c:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80155b8 <_tzset_unlocked_r+0x314>
 8015330:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80155ac <_tzset_unlocked_r+0x308>
 8015334:	2300      	movs	r3, #0
 8015336:	6013      	str	r3, [r2, #0]
 8015338:	4aa0      	ldr	r2, [pc, #640]	@ (80155bc <_tzset_unlocked_r+0x318>)
 801533a:	f8ca 3000 	str.w	r3, [sl]
 801533e:	2000      	movs	r0, #0
 8015340:	2100      	movs	r1, #0
 8015342:	e9c8 2200 	strd	r2, r2, [r8]
 8015346:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801534a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801534e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8015352:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015356:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801535a:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801535e:	224a      	movs	r2, #74	@ 0x4a
 8015360:	7222      	strb	r2, [r4, #8]
 8015362:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015364:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8015368:	6523      	str	r3, [r4, #80]	@ 0x50
 801536a:	7833      	ldrb	r3, [r6, #0]
 801536c:	2b3a      	cmp	r3, #58	@ 0x3a
 801536e:	bf08      	it	eq
 8015370:	3601      	addeq	r6, #1
 8015372:	7833      	ldrb	r3, [r6, #0]
 8015374:	2b3c      	cmp	r3, #60	@ 0x3c
 8015376:	d162      	bne.n	801543e <_tzset_unlocked_r+0x19a>
 8015378:	1c75      	adds	r5, r6, #1
 801537a:	4a91      	ldr	r2, [pc, #580]	@ (80155c0 <_tzset_unlocked_r+0x31c>)
 801537c:	4991      	ldr	r1, [pc, #580]	@ (80155c4 <_tzset_unlocked_r+0x320>)
 801537e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015380:	4628      	mov	r0, r5
 8015382:	f002 f817 	bl	80173b4 <siscanf>
 8015386:	2800      	cmp	r0, #0
 8015388:	ddba      	ble.n	8015300 <_tzset_unlocked_r+0x5c>
 801538a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801538c:	1eda      	subs	r2, r3, #3
 801538e:	2a07      	cmp	r2, #7
 8015390:	d8b6      	bhi.n	8015300 <_tzset_unlocked_r+0x5c>
 8015392:	5ceb      	ldrb	r3, [r5, r3]
 8015394:	2b3e      	cmp	r3, #62	@ 0x3e
 8015396:	d1b3      	bne.n	8015300 <_tzset_unlocked_r+0x5c>
 8015398:	3602      	adds	r6, #2
 801539a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801539c:	18f5      	adds	r5, r6, r3
 801539e:	5cf3      	ldrb	r3, [r6, r3]
 80153a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80153a2:	d15a      	bne.n	801545a <_tzset_unlocked_r+0x1b6>
 80153a4:	3501      	adds	r5, #1
 80153a6:	f04f 39ff 	mov.w	r9, #4294967295
 80153aa:	2300      	movs	r3, #0
 80153ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80153b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80153b4:	af08      	add	r7, sp, #32
 80153b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80153b8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80153bc:	9303      	str	r3, [sp, #12]
 80153be:	f10d 031e 	add.w	r3, sp, #30
 80153c2:	9300      	str	r3, [sp, #0]
 80153c4:	4980      	ldr	r1, [pc, #512]	@ (80155c8 <_tzset_unlocked_r+0x324>)
 80153c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80153c8:	aa07      	add	r2, sp, #28
 80153ca:	4628      	mov	r0, r5
 80153cc:	f001 fff2 	bl	80173b4 <siscanf>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	dd95      	ble.n	8015300 <_tzset_unlocked_r+0x5c>
 80153d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80153d8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80153dc:	223c      	movs	r2, #60	@ 0x3c
 80153de:	fb02 6603 	mla	r6, r2, r3, r6
 80153e2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80153e6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80153ea:	fb02 6603 	mla	r6, r2, r3, r6
 80153ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153f0:	fb09 f606 	mul.w	r6, r9, r6
 80153f4:	eb05 0903 	add.w	r9, r5, r3
 80153f8:	5ceb      	ldrb	r3, [r5, r3]
 80153fa:	2b3c      	cmp	r3, #60	@ 0x3c
 80153fc:	f040 80ee 	bne.w	80155dc <_tzset_unlocked_r+0x338>
 8015400:	f109 0501 	add.w	r5, r9, #1
 8015404:	4a71      	ldr	r2, [pc, #452]	@ (80155cc <_tzset_unlocked_r+0x328>)
 8015406:	496f      	ldr	r1, [pc, #444]	@ (80155c4 <_tzset_unlocked_r+0x320>)
 8015408:	ab0a      	add	r3, sp, #40	@ 0x28
 801540a:	4628      	mov	r0, r5
 801540c:	f001 ffd2 	bl	80173b4 <siscanf>
 8015410:	2800      	cmp	r0, #0
 8015412:	dc28      	bgt.n	8015466 <_tzset_unlocked_r+0x1c2>
 8015414:	f899 3001 	ldrb.w	r3, [r9, #1]
 8015418:	2b3e      	cmp	r3, #62	@ 0x3e
 801541a:	d124      	bne.n	8015466 <_tzset_unlocked_r+0x1c2>
 801541c:	4b68      	ldr	r3, [pc, #416]	@ (80155c0 <_tzset_unlocked_r+0x31c>)
 801541e:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015420:	e9c8 3300 	strd	r3, r3, [r8]
 8015424:	f8ca 6000 	str.w	r6, [sl]
 8015428:	e76a      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 801542a:	f7ea fea9 	bl	8000180 <strcmp>
 801542e:	2800      	cmp	r0, #0
 8015430:	f47f af6d 	bne.w	801530e <_tzset_unlocked_r+0x6a>
 8015434:	e764      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 8015436:	4631      	mov	r1, r6
 8015438:	f000 f9cf 	bl	80157da <strcpy>
 801543c:	e775      	b.n	801532a <_tzset_unlocked_r+0x86>
 801543e:	4a60      	ldr	r2, [pc, #384]	@ (80155c0 <_tzset_unlocked_r+0x31c>)
 8015440:	4963      	ldr	r1, [pc, #396]	@ (80155d0 <_tzset_unlocked_r+0x32c>)
 8015442:	ab0a      	add	r3, sp, #40	@ 0x28
 8015444:	4630      	mov	r0, r6
 8015446:	f001 ffb5 	bl	80173b4 <siscanf>
 801544a:	2800      	cmp	r0, #0
 801544c:	f77f af58 	ble.w	8015300 <_tzset_unlocked_r+0x5c>
 8015450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015452:	3b03      	subs	r3, #3
 8015454:	2b07      	cmp	r3, #7
 8015456:	d9a0      	bls.n	801539a <_tzset_unlocked_r+0xf6>
 8015458:	e752      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 801545a:	2b2b      	cmp	r3, #43	@ 0x2b
 801545c:	bf08      	it	eq
 801545e:	3501      	addeq	r5, #1
 8015460:	f04f 0901 	mov.w	r9, #1
 8015464:	e7a1      	b.n	80153aa <_tzset_unlocked_r+0x106>
 8015466:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015468:	1eda      	subs	r2, r3, #3
 801546a:	2a07      	cmp	r2, #7
 801546c:	f63f af48 	bhi.w	8015300 <_tzset_unlocked_r+0x5c>
 8015470:	5ceb      	ldrb	r3, [r5, r3]
 8015472:	2b3e      	cmp	r3, #62	@ 0x3e
 8015474:	f47f af44 	bne.w	8015300 <_tzset_unlocked_r+0x5c>
 8015478:	f109 0902 	add.w	r9, r9, #2
 801547c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801547e:	eb09 0503 	add.w	r5, r9, r3
 8015482:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015486:	2b2d      	cmp	r3, #45	@ 0x2d
 8015488:	f040 80b7 	bne.w	80155fa <_tzset_unlocked_r+0x356>
 801548c:	3501      	adds	r5, #1
 801548e:	f04f 39ff 	mov.w	r9, #4294967295
 8015492:	2300      	movs	r3, #0
 8015494:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015498:	f8ad 301e 	strh.w	r3, [sp, #30]
 801549c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80154a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80154a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80154a4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	f10d 031e 	add.w	r3, sp, #30
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	4945      	ldr	r1, [pc, #276]	@ (80155c8 <_tzset_unlocked_r+0x324>)
 80154b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80154b4:	aa07      	add	r2, sp, #28
 80154b6:	4628      	mov	r0, r5
 80154b8:	f001 ff7c 	bl	80173b4 <siscanf>
 80154bc:	2800      	cmp	r0, #0
 80154be:	f300 80a2 	bgt.w	8015606 <_tzset_unlocked_r+0x362>
 80154c2:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80154c6:	9304      	str	r3, [sp, #16]
 80154c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154ca:	4627      	mov	r7, r4
 80154cc:	441d      	add	r5, r3
 80154ce:	f04f 0b00 	mov.w	fp, #0
 80154d2:	782b      	ldrb	r3, [r5, #0]
 80154d4:	2b2c      	cmp	r3, #44	@ 0x2c
 80154d6:	bf08      	it	eq
 80154d8:	3501      	addeq	r5, #1
 80154da:	f895 9000 	ldrb.w	r9, [r5]
 80154de:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80154e2:	f040 80a3 	bne.w	801562c <_tzset_unlocked_r+0x388>
 80154e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80154e8:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80154ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80154f0:	aa09      	add	r2, sp, #36	@ 0x24
 80154f2:	9200      	str	r2, [sp, #0]
 80154f4:	4937      	ldr	r1, [pc, #220]	@ (80155d4 <_tzset_unlocked_r+0x330>)
 80154f6:	9303      	str	r3, [sp, #12]
 80154f8:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80154fc:	4628      	mov	r0, r5
 80154fe:	f001 ff59 	bl	80173b4 <siscanf>
 8015502:	2803      	cmp	r0, #3
 8015504:	f47f aefc 	bne.w	8015300 <_tzset_unlocked_r+0x5c>
 8015508:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801550c:	1e4b      	subs	r3, r1, #1
 801550e:	2b0b      	cmp	r3, #11
 8015510:	f63f aef6 	bhi.w	8015300 <_tzset_unlocked_r+0x5c>
 8015514:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8015518:	1e53      	subs	r3, r2, #1
 801551a:	2b04      	cmp	r3, #4
 801551c:	f63f aef0 	bhi.w	8015300 <_tzset_unlocked_r+0x5c>
 8015520:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015524:	2b06      	cmp	r3, #6
 8015526:	f63f aeeb 	bhi.w	8015300 <_tzset_unlocked_r+0x5c>
 801552a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801552e:	f887 9008 	strb.w	r9, [r7, #8]
 8015532:	617b      	str	r3, [r7, #20]
 8015534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015536:	eb05 0903 	add.w	r9, r5, r3
 801553a:	2500      	movs	r5, #0
 801553c:	f04f 0302 	mov.w	r3, #2
 8015540:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015544:	f8ad 501e 	strh.w	r5, [sp, #30]
 8015548:	f8ad 5020 	strh.w	r5, [sp, #32]
 801554c:	950a      	str	r5, [sp, #40]	@ 0x28
 801554e:	f899 3000 	ldrb.w	r3, [r9]
 8015552:	2b2f      	cmp	r3, #47	@ 0x2f
 8015554:	f040 8096 	bne.w	8015684 <_tzset_unlocked_r+0x3e0>
 8015558:	ab0a      	add	r3, sp, #40	@ 0x28
 801555a:	aa08      	add	r2, sp, #32
 801555c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015560:	f10d 021e 	add.w	r2, sp, #30
 8015564:	9200      	str	r2, [sp, #0]
 8015566:	491c      	ldr	r1, [pc, #112]	@ (80155d8 <_tzset_unlocked_r+0x334>)
 8015568:	9303      	str	r3, [sp, #12]
 801556a:	aa07      	add	r2, sp, #28
 801556c:	4648      	mov	r0, r9
 801556e:	f001 ff21 	bl	80173b4 <siscanf>
 8015572:	42a8      	cmp	r0, r5
 8015574:	f300 8086 	bgt.w	8015684 <_tzset_unlocked_r+0x3e0>
 8015578:	214a      	movs	r1, #74	@ 0x4a
 801557a:	2200      	movs	r2, #0
 801557c:	2300      	movs	r3, #0
 801557e:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8015582:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015586:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801558a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801558e:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8015592:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8015596:	7221      	strb	r1, [r4, #8]
 8015598:	62a5      	str	r5, [r4, #40]	@ 0x28
 801559a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801559e:	6525      	str	r5, [r4, #80]	@ 0x50
 80155a0:	e6ae      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 80155a2:	bf00      	nop
 80155a4:	08019faa 	.word	0x08019faa
 80155a8:	2000a8d0 	.word	0x2000a8d0
 80155ac:	2000a8ec 	.word	0x2000a8ec
 80155b0:	08019fad 	.word	0x08019fad
 80155b4:	2000a8f0 	.word	0x2000a8f0
 80155b8:	20000030 	.word	0x20000030
 80155bc:	0801a033 	.word	0x0801a033
 80155c0:	2000a8e0 	.word	0x2000a8e0
 80155c4:	08019fb1 	.word	0x08019fb1
 80155c8:	08019fe6 	.word	0x08019fe6
 80155cc:	2000a8d4 	.word	0x2000a8d4
 80155d0:	08019fc4 	.word	0x08019fc4
 80155d4:	08019fd2 	.word	0x08019fd2
 80155d8:	08019fe5 	.word	0x08019fe5
 80155dc:	4a3e      	ldr	r2, [pc, #248]	@ (80156d8 <_tzset_unlocked_r+0x434>)
 80155de:	493f      	ldr	r1, [pc, #252]	@ (80156dc <_tzset_unlocked_r+0x438>)
 80155e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80155e2:	4648      	mov	r0, r9
 80155e4:	f001 fee6 	bl	80173b4 <siscanf>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	f77f af17 	ble.w	801541c <_tzset_unlocked_r+0x178>
 80155ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155f0:	3b03      	subs	r3, #3
 80155f2:	2b07      	cmp	r3, #7
 80155f4:	f67f af42 	bls.w	801547c <_tzset_unlocked_r+0x1d8>
 80155f8:	e682      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 80155fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80155fc:	bf08      	it	eq
 80155fe:	3501      	addeq	r5, #1
 8015600:	f04f 0901 	mov.w	r9, #1
 8015604:	e745      	b.n	8015492 <_tzset_unlocked_r+0x1ee>
 8015606:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801560a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801560e:	213c      	movs	r1, #60	@ 0x3c
 8015610:	fb01 3302 	mla	r3, r1, r2, r3
 8015614:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015618:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801561c:	fb01 3302 	mla	r3, r1, r2, r3
 8015620:	fb09 f303 	mul.w	r3, r9, r3
 8015624:	e74f      	b.n	80154c6 <_tzset_unlocked_r+0x222>
 8015626:	f04f 0b01 	mov.w	fp, #1
 801562a:	e752      	b.n	80154d2 <_tzset_unlocked_r+0x22e>
 801562c:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8015630:	bf06      	itte	eq
 8015632:	3501      	addeq	r5, #1
 8015634:	464b      	moveq	r3, r9
 8015636:	2344      	movne	r3, #68	@ 0x44
 8015638:	220a      	movs	r2, #10
 801563a:	a90b      	add	r1, sp, #44	@ 0x2c
 801563c:	4628      	mov	r0, r5
 801563e:	9305      	str	r3, [sp, #20]
 8015640:	f001 fc98 	bl	8016f74 <strtoul>
 8015644:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8015648:	9b05      	ldr	r3, [sp, #20]
 801564a:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801564e:	45a9      	cmp	r9, r5
 8015650:	d114      	bne.n	801567c <_tzset_unlocked_r+0x3d8>
 8015652:	234d      	movs	r3, #77	@ 0x4d
 8015654:	f1bb 0f00 	cmp.w	fp, #0
 8015658:	d107      	bne.n	801566a <_tzset_unlocked_r+0x3c6>
 801565a:	7223      	strb	r3, [r4, #8]
 801565c:	2103      	movs	r1, #3
 801565e:	2302      	movs	r3, #2
 8015660:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8015664:	f8c4 b014 	str.w	fp, [r4, #20]
 8015668:	e767      	b.n	801553a <_tzset_unlocked_r+0x296>
 801566a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801566e:	220b      	movs	r2, #11
 8015670:	2301      	movs	r3, #1
 8015672:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8015676:	2300      	movs	r3, #0
 8015678:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801567a:	e75e      	b.n	801553a <_tzset_unlocked_r+0x296>
 801567c:	b280      	uxth	r0, r0
 801567e:	723b      	strb	r3, [r7, #8]
 8015680:	6178      	str	r0, [r7, #20]
 8015682:	e75a      	b.n	801553a <_tzset_unlocked_r+0x296>
 8015684:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015688:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801568c:	213c      	movs	r1, #60	@ 0x3c
 801568e:	fb01 3302 	mla	r3, r1, r2, r3
 8015692:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015696:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801569a:	fb01 3302 	mla	r3, r1, r2, r3
 801569e:	61bb      	str	r3, [r7, #24]
 80156a0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80156a2:	3728      	adds	r7, #40	@ 0x28
 80156a4:	444d      	add	r5, r9
 80156a6:	f1bb 0f00 	cmp.w	fp, #0
 80156aa:	d0bc      	beq.n	8015626 <_tzset_unlocked_r+0x382>
 80156ac:	9b04      	ldr	r3, [sp, #16]
 80156ae:	6523      	str	r3, [r4, #80]	@ 0x50
 80156b0:	4b0b      	ldr	r3, [pc, #44]	@ (80156e0 <_tzset_unlocked_r+0x43c>)
 80156b2:	f8c8 3000 	str.w	r3, [r8]
 80156b6:	6860      	ldr	r0, [r4, #4]
 80156b8:	4b07      	ldr	r3, [pc, #28]	@ (80156d8 <_tzset_unlocked_r+0x434>)
 80156ba:	62a6      	str	r6, [r4, #40]	@ 0x28
 80156bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80156c0:	f7ff fd2a 	bl	8015118 <__tzcalc_limits>
 80156c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80156c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80156c8:	f8ca 2000 	str.w	r2, [sl]
 80156cc:	1a9b      	subs	r3, r3, r2
 80156ce:	4a05      	ldr	r2, [pc, #20]	@ (80156e4 <_tzset_unlocked_r+0x440>)
 80156d0:	bf18      	it	ne
 80156d2:	2301      	movne	r3, #1
 80156d4:	6013      	str	r3, [r2, #0]
 80156d6:	e613      	b.n	8015300 <_tzset_unlocked_r+0x5c>
 80156d8:	2000a8d4 	.word	0x2000a8d4
 80156dc:	08019fc4 	.word	0x08019fc4
 80156e0:	2000a8e0 	.word	0x2000a8e0
 80156e4:	2000a8f0 	.word	0x2000a8f0

080156e8 <_localeconv_r>:
 80156e8:	4800      	ldr	r0, [pc, #0]	@ (80156ec <_localeconv_r+0x4>)
 80156ea:	4770      	bx	lr
 80156ec:	200001d0 	.word	0x200001d0

080156f0 <_close_r>:
 80156f0:	b538      	push	{r3, r4, r5, lr}
 80156f2:	4d06      	ldr	r5, [pc, #24]	@ (801570c <_close_r+0x1c>)
 80156f4:	2300      	movs	r3, #0
 80156f6:	4604      	mov	r4, r0
 80156f8:	4608      	mov	r0, r1
 80156fa:	602b      	str	r3, [r5, #0]
 80156fc:	f7f6 fae2 	bl	800bcc4 <_close>
 8015700:	1c43      	adds	r3, r0, #1
 8015702:	d102      	bne.n	801570a <_close_r+0x1a>
 8015704:	682b      	ldr	r3, [r5, #0]
 8015706:	b103      	cbz	r3, 801570a <_close_r+0x1a>
 8015708:	6023      	str	r3, [r4, #0]
 801570a:	bd38      	pop	{r3, r4, r5, pc}
 801570c:	2000a8f4 	.word	0x2000a8f4

08015710 <_lseek_r>:
 8015710:	b538      	push	{r3, r4, r5, lr}
 8015712:	4d07      	ldr	r5, [pc, #28]	@ (8015730 <_lseek_r+0x20>)
 8015714:	4604      	mov	r4, r0
 8015716:	4608      	mov	r0, r1
 8015718:	4611      	mov	r1, r2
 801571a:	2200      	movs	r2, #0
 801571c:	602a      	str	r2, [r5, #0]
 801571e:	461a      	mov	r2, r3
 8015720:	f7f6 faf7 	bl	800bd12 <_lseek>
 8015724:	1c43      	adds	r3, r0, #1
 8015726:	d102      	bne.n	801572e <_lseek_r+0x1e>
 8015728:	682b      	ldr	r3, [r5, #0]
 801572a:	b103      	cbz	r3, 801572e <_lseek_r+0x1e>
 801572c:	6023      	str	r3, [r4, #0]
 801572e:	bd38      	pop	{r3, r4, r5, pc}
 8015730:	2000a8f4 	.word	0x2000a8f4

08015734 <_read_r>:
 8015734:	b538      	push	{r3, r4, r5, lr}
 8015736:	4d07      	ldr	r5, [pc, #28]	@ (8015754 <_read_r+0x20>)
 8015738:	4604      	mov	r4, r0
 801573a:	4608      	mov	r0, r1
 801573c:	4611      	mov	r1, r2
 801573e:	2200      	movs	r2, #0
 8015740:	602a      	str	r2, [r5, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	f7f6 fa85 	bl	800bc52 <_read>
 8015748:	1c43      	adds	r3, r0, #1
 801574a:	d102      	bne.n	8015752 <_read_r+0x1e>
 801574c:	682b      	ldr	r3, [r5, #0]
 801574e:	b103      	cbz	r3, 8015752 <_read_r+0x1e>
 8015750:	6023      	str	r3, [r4, #0]
 8015752:	bd38      	pop	{r3, r4, r5, pc}
 8015754:	2000a8f4 	.word	0x2000a8f4

08015758 <_write_r>:
 8015758:	b538      	push	{r3, r4, r5, lr}
 801575a:	4d07      	ldr	r5, [pc, #28]	@ (8015778 <_write_r+0x20>)
 801575c:	4604      	mov	r4, r0
 801575e:	4608      	mov	r0, r1
 8015760:	4611      	mov	r1, r2
 8015762:	2200      	movs	r2, #0
 8015764:	602a      	str	r2, [r5, #0]
 8015766:	461a      	mov	r2, r3
 8015768:	f7f6 fa90 	bl	800bc8c <_write>
 801576c:	1c43      	adds	r3, r0, #1
 801576e:	d102      	bne.n	8015776 <_write_r+0x1e>
 8015770:	682b      	ldr	r3, [r5, #0]
 8015772:	b103      	cbz	r3, 8015776 <_write_r+0x1e>
 8015774:	6023      	str	r3, [r4, #0]
 8015776:	bd38      	pop	{r3, r4, r5, pc}
 8015778:	2000a8f4 	.word	0x2000a8f4

0801577c <__errno>:
 801577c:	4b01      	ldr	r3, [pc, #4]	@ (8015784 <__errno+0x8>)
 801577e:	6818      	ldr	r0, [r3, #0]
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	20000038 	.word	0x20000038

08015788 <__libc_init_array>:
 8015788:	b570      	push	{r4, r5, r6, lr}
 801578a:	4d0d      	ldr	r5, [pc, #52]	@ (80157c0 <__libc_init_array+0x38>)
 801578c:	4c0d      	ldr	r4, [pc, #52]	@ (80157c4 <__libc_init_array+0x3c>)
 801578e:	1b64      	subs	r4, r4, r5
 8015790:	10a4      	asrs	r4, r4, #2
 8015792:	2600      	movs	r6, #0
 8015794:	42a6      	cmp	r6, r4
 8015796:	d109      	bne.n	80157ac <__libc_init_array+0x24>
 8015798:	4d0b      	ldr	r5, [pc, #44]	@ (80157c8 <__libc_init_array+0x40>)
 801579a:	4c0c      	ldr	r4, [pc, #48]	@ (80157cc <__libc_init_array+0x44>)
 801579c:	f002 fe46 	bl	801842c <_init>
 80157a0:	1b64      	subs	r4, r4, r5
 80157a2:	10a4      	asrs	r4, r4, #2
 80157a4:	2600      	movs	r6, #0
 80157a6:	42a6      	cmp	r6, r4
 80157a8:	d105      	bne.n	80157b6 <__libc_init_array+0x2e>
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80157b0:	4798      	blx	r3
 80157b2:	3601      	adds	r6, #1
 80157b4:	e7ee      	b.n	8015794 <__libc_init_array+0xc>
 80157b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80157ba:	4798      	blx	r3
 80157bc:	3601      	adds	r6, #1
 80157be:	e7f2      	b.n	80157a6 <__libc_init_array+0x1e>
 80157c0:	0801a404 	.word	0x0801a404
 80157c4:	0801a404 	.word	0x0801a404
 80157c8:	0801a404 	.word	0x0801a404
 80157cc:	0801a408 	.word	0x0801a408

080157d0 <__retarget_lock_init_recursive>:
 80157d0:	4770      	bx	lr

080157d2 <__retarget_lock_acquire>:
 80157d2:	4770      	bx	lr

080157d4 <__retarget_lock_acquire_recursive>:
 80157d4:	4770      	bx	lr

080157d6 <__retarget_lock_release>:
 80157d6:	4770      	bx	lr

080157d8 <__retarget_lock_release_recursive>:
 80157d8:	4770      	bx	lr

080157da <strcpy>:
 80157da:	4603      	mov	r3, r0
 80157dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157e0:	f803 2b01 	strb.w	r2, [r3], #1
 80157e4:	2a00      	cmp	r2, #0
 80157e6:	d1f9      	bne.n	80157dc <strcpy+0x2>
 80157e8:	4770      	bx	lr

080157ea <memcpy>:
 80157ea:	440a      	add	r2, r1
 80157ec:	4291      	cmp	r1, r2
 80157ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80157f2:	d100      	bne.n	80157f6 <memcpy+0xc>
 80157f4:	4770      	bx	lr
 80157f6:	b510      	push	{r4, lr}
 80157f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015800:	4291      	cmp	r1, r2
 8015802:	d1f9      	bne.n	80157f8 <memcpy+0xe>
 8015804:	bd10      	pop	{r4, pc}
	...

08015808 <__assert_func>:
 8015808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801580a:	4614      	mov	r4, r2
 801580c:	461a      	mov	r2, r3
 801580e:	4b09      	ldr	r3, [pc, #36]	@ (8015834 <__assert_func+0x2c>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4605      	mov	r5, r0
 8015814:	68d8      	ldr	r0, [r3, #12]
 8015816:	b14c      	cbz	r4, 801582c <__assert_func+0x24>
 8015818:	4b07      	ldr	r3, [pc, #28]	@ (8015838 <__assert_func+0x30>)
 801581a:	9100      	str	r1, [sp, #0]
 801581c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015820:	4906      	ldr	r1, [pc, #24]	@ (801583c <__assert_func+0x34>)
 8015822:	462b      	mov	r3, r5
 8015824:	f001 fdb4 	bl	8017390 <fiprintf>
 8015828:	f001 fed6 	bl	80175d8 <abort>
 801582c:	4b04      	ldr	r3, [pc, #16]	@ (8015840 <__assert_func+0x38>)
 801582e:	461c      	mov	r4, r3
 8015830:	e7f3      	b.n	801581a <__assert_func+0x12>
 8015832:	bf00      	nop
 8015834:	20000038 	.word	0x20000038
 8015838:	08019ff8 	.word	0x08019ff8
 801583c:	0801a005 	.word	0x0801a005
 8015840:	0801a033 	.word	0x0801a033

08015844 <div>:
 8015844:	b510      	push	{r4, lr}
 8015846:	fb91 f4f2 	sdiv	r4, r1, r2
 801584a:	fb02 1114 	mls	r1, r2, r4, r1
 801584e:	6004      	str	r4, [r0, #0]
 8015850:	6041      	str	r1, [r0, #4]
 8015852:	bd10      	pop	{r4, pc}

08015854 <quorem>:
 8015854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015858:	6903      	ldr	r3, [r0, #16]
 801585a:	690c      	ldr	r4, [r1, #16]
 801585c:	42a3      	cmp	r3, r4
 801585e:	4607      	mov	r7, r0
 8015860:	db7e      	blt.n	8015960 <quorem+0x10c>
 8015862:	3c01      	subs	r4, #1
 8015864:	f101 0814 	add.w	r8, r1, #20
 8015868:	00a3      	lsls	r3, r4, #2
 801586a:	f100 0514 	add.w	r5, r0, #20
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015874:	9301      	str	r3, [sp, #4]
 8015876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801587a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801587e:	3301      	adds	r3, #1
 8015880:	429a      	cmp	r2, r3
 8015882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015886:	fbb2 f6f3 	udiv	r6, r2, r3
 801588a:	d32e      	bcc.n	80158ea <quorem+0x96>
 801588c:	f04f 0a00 	mov.w	sl, #0
 8015890:	46c4      	mov	ip, r8
 8015892:	46ae      	mov	lr, r5
 8015894:	46d3      	mov	fp, sl
 8015896:	f85c 3b04 	ldr.w	r3, [ip], #4
 801589a:	b298      	uxth	r0, r3
 801589c:	fb06 a000 	mla	r0, r6, r0, sl
 80158a0:	0c02      	lsrs	r2, r0, #16
 80158a2:	0c1b      	lsrs	r3, r3, #16
 80158a4:	fb06 2303 	mla	r3, r6, r3, r2
 80158a8:	f8de 2000 	ldr.w	r2, [lr]
 80158ac:	b280      	uxth	r0, r0
 80158ae:	b292      	uxth	r2, r2
 80158b0:	1a12      	subs	r2, r2, r0
 80158b2:	445a      	add	r2, fp
 80158b4:	f8de 0000 	ldr.w	r0, [lr]
 80158b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80158bc:	b29b      	uxth	r3, r3
 80158be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80158c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80158c6:	b292      	uxth	r2, r2
 80158c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80158cc:	45e1      	cmp	r9, ip
 80158ce:	f84e 2b04 	str.w	r2, [lr], #4
 80158d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80158d6:	d2de      	bcs.n	8015896 <quorem+0x42>
 80158d8:	9b00      	ldr	r3, [sp, #0]
 80158da:	58eb      	ldr	r3, [r5, r3]
 80158dc:	b92b      	cbnz	r3, 80158ea <quorem+0x96>
 80158de:	9b01      	ldr	r3, [sp, #4]
 80158e0:	3b04      	subs	r3, #4
 80158e2:	429d      	cmp	r5, r3
 80158e4:	461a      	mov	r2, r3
 80158e6:	d32f      	bcc.n	8015948 <quorem+0xf4>
 80158e8:	613c      	str	r4, [r7, #16]
 80158ea:	4638      	mov	r0, r7
 80158ec:	f001 f9ca 	bl	8016c84 <__mcmp>
 80158f0:	2800      	cmp	r0, #0
 80158f2:	db25      	blt.n	8015940 <quorem+0xec>
 80158f4:	4629      	mov	r1, r5
 80158f6:	2000      	movs	r0, #0
 80158f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80158fc:	f8d1 c000 	ldr.w	ip, [r1]
 8015900:	fa1f fe82 	uxth.w	lr, r2
 8015904:	fa1f f38c 	uxth.w	r3, ip
 8015908:	eba3 030e 	sub.w	r3, r3, lr
 801590c:	4403      	add	r3, r0
 801590e:	0c12      	lsrs	r2, r2, #16
 8015910:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015914:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015918:	b29b      	uxth	r3, r3
 801591a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801591e:	45c1      	cmp	r9, r8
 8015920:	f841 3b04 	str.w	r3, [r1], #4
 8015924:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015928:	d2e6      	bcs.n	80158f8 <quorem+0xa4>
 801592a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801592e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015932:	b922      	cbnz	r2, 801593e <quorem+0xea>
 8015934:	3b04      	subs	r3, #4
 8015936:	429d      	cmp	r5, r3
 8015938:	461a      	mov	r2, r3
 801593a:	d30b      	bcc.n	8015954 <quorem+0x100>
 801593c:	613c      	str	r4, [r7, #16]
 801593e:	3601      	adds	r6, #1
 8015940:	4630      	mov	r0, r6
 8015942:	b003      	add	sp, #12
 8015944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015948:	6812      	ldr	r2, [r2, #0]
 801594a:	3b04      	subs	r3, #4
 801594c:	2a00      	cmp	r2, #0
 801594e:	d1cb      	bne.n	80158e8 <quorem+0x94>
 8015950:	3c01      	subs	r4, #1
 8015952:	e7c6      	b.n	80158e2 <quorem+0x8e>
 8015954:	6812      	ldr	r2, [r2, #0]
 8015956:	3b04      	subs	r3, #4
 8015958:	2a00      	cmp	r2, #0
 801595a:	d1ef      	bne.n	801593c <quorem+0xe8>
 801595c:	3c01      	subs	r4, #1
 801595e:	e7ea      	b.n	8015936 <quorem+0xe2>
 8015960:	2000      	movs	r0, #0
 8015962:	e7ee      	b.n	8015942 <quorem+0xee>
 8015964:	0000      	movs	r0, r0
	...

08015968 <_dtoa_r>:
 8015968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801596c:	69c7      	ldr	r7, [r0, #28]
 801596e:	b097      	sub	sp, #92	@ 0x5c
 8015970:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015974:	ec55 4b10 	vmov	r4, r5, d0
 8015978:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801597a:	9107      	str	r1, [sp, #28]
 801597c:	4681      	mov	r9, r0
 801597e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015980:	9311      	str	r3, [sp, #68]	@ 0x44
 8015982:	b97f      	cbnz	r7, 80159a4 <_dtoa_r+0x3c>
 8015984:	2010      	movs	r0, #16
 8015986:	f000 fe4d 	bl	8016624 <malloc>
 801598a:	4602      	mov	r2, r0
 801598c:	f8c9 001c 	str.w	r0, [r9, #28]
 8015990:	b920      	cbnz	r0, 801599c <_dtoa_r+0x34>
 8015992:	4ba9      	ldr	r3, [pc, #676]	@ (8015c38 <_dtoa_r+0x2d0>)
 8015994:	21ef      	movs	r1, #239	@ 0xef
 8015996:	48a9      	ldr	r0, [pc, #676]	@ (8015c3c <_dtoa_r+0x2d4>)
 8015998:	f7ff ff36 	bl	8015808 <__assert_func>
 801599c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80159a0:	6007      	str	r7, [r0, #0]
 80159a2:	60c7      	str	r7, [r0, #12]
 80159a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80159a8:	6819      	ldr	r1, [r3, #0]
 80159aa:	b159      	cbz	r1, 80159c4 <_dtoa_r+0x5c>
 80159ac:	685a      	ldr	r2, [r3, #4]
 80159ae:	604a      	str	r2, [r1, #4]
 80159b0:	2301      	movs	r3, #1
 80159b2:	4093      	lsls	r3, r2
 80159b4:	608b      	str	r3, [r1, #8]
 80159b6:	4648      	mov	r0, r9
 80159b8:	f000 ff32 	bl	8016820 <_Bfree>
 80159bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80159c0:	2200      	movs	r2, #0
 80159c2:	601a      	str	r2, [r3, #0]
 80159c4:	1e2b      	subs	r3, r5, #0
 80159c6:	bfb9      	ittee	lt
 80159c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80159cc:	9305      	strlt	r3, [sp, #20]
 80159ce:	2300      	movge	r3, #0
 80159d0:	6033      	strge	r3, [r6, #0]
 80159d2:	9f05      	ldr	r7, [sp, #20]
 80159d4:	4b9a      	ldr	r3, [pc, #616]	@ (8015c40 <_dtoa_r+0x2d8>)
 80159d6:	bfbc      	itt	lt
 80159d8:	2201      	movlt	r2, #1
 80159da:	6032      	strlt	r2, [r6, #0]
 80159dc:	43bb      	bics	r3, r7
 80159de:	d112      	bne.n	8015a06 <_dtoa_r+0x9e>
 80159e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80159e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80159e6:	6013      	str	r3, [r2, #0]
 80159e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80159ec:	4323      	orrs	r3, r4
 80159ee:	f000 855a 	beq.w	80164a6 <_dtoa_r+0xb3e>
 80159f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80159f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015c54 <_dtoa_r+0x2ec>
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	f000 855c 	beq.w	80164b6 <_dtoa_r+0xb4e>
 80159fe:	f10a 0303 	add.w	r3, sl, #3
 8015a02:	f000 bd56 	b.w	80164b2 <_dtoa_r+0xb4a>
 8015a06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	ec51 0b17 	vmov	r0, r1, d7
 8015a10:	2300      	movs	r3, #0
 8015a12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015a16:	f7eb f83f 	bl	8000a98 <__aeabi_dcmpeq>
 8015a1a:	4680      	mov	r8, r0
 8015a1c:	b158      	cbz	r0, 8015a36 <_dtoa_r+0xce>
 8015a1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015a20:	2301      	movs	r3, #1
 8015a22:	6013      	str	r3, [r2, #0]
 8015a24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a26:	b113      	cbz	r3, 8015a2e <_dtoa_r+0xc6>
 8015a28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015a2a:	4b86      	ldr	r3, [pc, #536]	@ (8015c44 <_dtoa_r+0x2dc>)
 8015a2c:	6013      	str	r3, [r2, #0]
 8015a2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015c58 <_dtoa_r+0x2f0>
 8015a32:	f000 bd40 	b.w	80164b6 <_dtoa_r+0xb4e>
 8015a36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8015a3a:	aa14      	add	r2, sp, #80	@ 0x50
 8015a3c:	a915      	add	r1, sp, #84	@ 0x54
 8015a3e:	4648      	mov	r0, r9
 8015a40:	f001 f9d0 	bl	8016de4 <__d2b>
 8015a44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015a48:	9002      	str	r0, [sp, #8]
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	d078      	beq.n	8015b40 <_dtoa_r+0x1d8>
 8015a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015a5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015a60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015a64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015a68:	4619      	mov	r1, r3
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	4b76      	ldr	r3, [pc, #472]	@ (8015c48 <_dtoa_r+0x2e0>)
 8015a6e:	f7ea fbf3 	bl	8000258 <__aeabi_dsub>
 8015a72:	a36b      	add	r3, pc, #428	@ (adr r3, 8015c20 <_dtoa_r+0x2b8>)
 8015a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a78:	f7ea fda6 	bl	80005c8 <__aeabi_dmul>
 8015a7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015c28 <_dtoa_r+0x2c0>)
 8015a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a82:	f7ea fbeb 	bl	800025c <__adddf3>
 8015a86:	4604      	mov	r4, r0
 8015a88:	4630      	mov	r0, r6
 8015a8a:	460d      	mov	r5, r1
 8015a8c:	f7ea fd32 	bl	80004f4 <__aeabi_i2d>
 8015a90:	a367      	add	r3, pc, #412	@ (adr r3, 8015c30 <_dtoa_r+0x2c8>)
 8015a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a96:	f7ea fd97 	bl	80005c8 <__aeabi_dmul>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	460b      	mov	r3, r1
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	4629      	mov	r1, r5
 8015aa2:	f7ea fbdb 	bl	800025c <__adddf3>
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	460d      	mov	r5, r1
 8015aaa:	f7eb f83d 	bl	8000b28 <__aeabi_d2iz>
 8015aae:	2200      	movs	r2, #0
 8015ab0:	4607      	mov	r7, r0
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	f7ea fff8 	bl	8000aac <__aeabi_dcmplt>
 8015abc:	b140      	cbz	r0, 8015ad0 <_dtoa_r+0x168>
 8015abe:	4638      	mov	r0, r7
 8015ac0:	f7ea fd18 	bl	80004f4 <__aeabi_i2d>
 8015ac4:	4622      	mov	r2, r4
 8015ac6:	462b      	mov	r3, r5
 8015ac8:	f7ea ffe6 	bl	8000a98 <__aeabi_dcmpeq>
 8015acc:	b900      	cbnz	r0, 8015ad0 <_dtoa_r+0x168>
 8015ace:	3f01      	subs	r7, #1
 8015ad0:	2f16      	cmp	r7, #22
 8015ad2:	d852      	bhi.n	8015b7a <_dtoa_r+0x212>
 8015ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8015c4c <_dtoa_r+0x2e4>)
 8015ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015ae2:	f7ea ffe3 	bl	8000aac <__aeabi_dcmplt>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d049      	beq.n	8015b7e <_dtoa_r+0x216>
 8015aea:	3f01      	subs	r7, #1
 8015aec:	2300      	movs	r3, #0
 8015aee:	9310      	str	r3, [sp, #64]	@ 0x40
 8015af0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015af2:	1b9b      	subs	r3, r3, r6
 8015af4:	1e5a      	subs	r2, r3, #1
 8015af6:	bf45      	ittet	mi
 8015af8:	f1c3 0301 	rsbmi	r3, r3, #1
 8015afc:	9300      	strmi	r3, [sp, #0]
 8015afe:	2300      	movpl	r3, #0
 8015b00:	2300      	movmi	r3, #0
 8015b02:	9206      	str	r2, [sp, #24]
 8015b04:	bf54      	ite	pl
 8015b06:	9300      	strpl	r3, [sp, #0]
 8015b08:	9306      	strmi	r3, [sp, #24]
 8015b0a:	2f00      	cmp	r7, #0
 8015b0c:	db39      	blt.n	8015b82 <_dtoa_r+0x21a>
 8015b0e:	9b06      	ldr	r3, [sp, #24]
 8015b10:	970d      	str	r7, [sp, #52]	@ 0x34
 8015b12:	443b      	add	r3, r7
 8015b14:	9306      	str	r3, [sp, #24]
 8015b16:	2300      	movs	r3, #0
 8015b18:	9308      	str	r3, [sp, #32]
 8015b1a:	9b07      	ldr	r3, [sp, #28]
 8015b1c:	2b09      	cmp	r3, #9
 8015b1e:	d863      	bhi.n	8015be8 <_dtoa_r+0x280>
 8015b20:	2b05      	cmp	r3, #5
 8015b22:	bfc4      	itt	gt
 8015b24:	3b04      	subgt	r3, #4
 8015b26:	9307      	strgt	r3, [sp, #28]
 8015b28:	9b07      	ldr	r3, [sp, #28]
 8015b2a:	f1a3 0302 	sub.w	r3, r3, #2
 8015b2e:	bfcc      	ite	gt
 8015b30:	2400      	movgt	r4, #0
 8015b32:	2401      	movle	r4, #1
 8015b34:	2b03      	cmp	r3, #3
 8015b36:	d863      	bhi.n	8015c00 <_dtoa_r+0x298>
 8015b38:	e8df f003 	tbb	[pc, r3]
 8015b3c:	2b375452 	.word	0x2b375452
 8015b40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015b44:	441e      	add	r6, r3
 8015b46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015b4a:	2b20      	cmp	r3, #32
 8015b4c:	bfc1      	itttt	gt
 8015b4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015b52:	409f      	lslgt	r7, r3
 8015b54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015b58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015b5c:	bfd6      	itet	le
 8015b5e:	f1c3 0320 	rsble	r3, r3, #32
 8015b62:	ea47 0003 	orrgt.w	r0, r7, r3
 8015b66:	fa04 f003 	lslle.w	r0, r4, r3
 8015b6a:	f7ea fcb3 	bl	80004d4 <__aeabi_ui2d>
 8015b6e:	2201      	movs	r2, #1
 8015b70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015b74:	3e01      	subs	r6, #1
 8015b76:	9212      	str	r2, [sp, #72]	@ 0x48
 8015b78:	e776      	b.n	8015a68 <_dtoa_r+0x100>
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	e7b7      	b.n	8015aee <_dtoa_r+0x186>
 8015b7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015b80:	e7b6      	b.n	8015af0 <_dtoa_r+0x188>
 8015b82:	9b00      	ldr	r3, [sp, #0]
 8015b84:	1bdb      	subs	r3, r3, r7
 8015b86:	9300      	str	r3, [sp, #0]
 8015b88:	427b      	negs	r3, r7
 8015b8a:	9308      	str	r3, [sp, #32]
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015b90:	e7c3      	b.n	8015b1a <_dtoa_r+0x1b2>
 8015b92:	2301      	movs	r3, #1
 8015b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b98:	eb07 0b03 	add.w	fp, r7, r3
 8015b9c:	f10b 0301 	add.w	r3, fp, #1
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	9303      	str	r3, [sp, #12]
 8015ba4:	bfb8      	it	lt
 8015ba6:	2301      	movlt	r3, #1
 8015ba8:	e006      	b.n	8015bb8 <_dtoa_r+0x250>
 8015baa:	2301      	movs	r3, #1
 8015bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	dd28      	ble.n	8015c06 <_dtoa_r+0x29e>
 8015bb4:	469b      	mov	fp, r3
 8015bb6:	9303      	str	r3, [sp, #12]
 8015bb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8015bbc:	2100      	movs	r1, #0
 8015bbe:	2204      	movs	r2, #4
 8015bc0:	f102 0514 	add.w	r5, r2, #20
 8015bc4:	429d      	cmp	r5, r3
 8015bc6:	d926      	bls.n	8015c16 <_dtoa_r+0x2ae>
 8015bc8:	6041      	str	r1, [r0, #4]
 8015bca:	4648      	mov	r0, r9
 8015bcc:	f000 fde8 	bl	80167a0 <_Balloc>
 8015bd0:	4682      	mov	sl, r0
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	d142      	bne.n	8015c5c <_dtoa_r+0x2f4>
 8015bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8015c50 <_dtoa_r+0x2e8>)
 8015bd8:	4602      	mov	r2, r0
 8015bda:	f240 11af 	movw	r1, #431	@ 0x1af
 8015bde:	e6da      	b.n	8015996 <_dtoa_r+0x2e>
 8015be0:	2300      	movs	r3, #0
 8015be2:	e7e3      	b.n	8015bac <_dtoa_r+0x244>
 8015be4:	2300      	movs	r3, #0
 8015be6:	e7d5      	b.n	8015b94 <_dtoa_r+0x22c>
 8015be8:	2401      	movs	r4, #1
 8015bea:	2300      	movs	r3, #0
 8015bec:	9307      	str	r3, [sp, #28]
 8015bee:	9409      	str	r4, [sp, #36]	@ 0x24
 8015bf0:	f04f 3bff 	mov.w	fp, #4294967295
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	f8cd b00c 	str.w	fp, [sp, #12]
 8015bfa:	2312      	movs	r3, #18
 8015bfc:	920c      	str	r2, [sp, #48]	@ 0x30
 8015bfe:	e7db      	b.n	8015bb8 <_dtoa_r+0x250>
 8015c00:	2301      	movs	r3, #1
 8015c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c04:	e7f4      	b.n	8015bf0 <_dtoa_r+0x288>
 8015c06:	f04f 0b01 	mov.w	fp, #1
 8015c0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8015c0e:	465b      	mov	r3, fp
 8015c10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015c14:	e7d0      	b.n	8015bb8 <_dtoa_r+0x250>
 8015c16:	3101      	adds	r1, #1
 8015c18:	0052      	lsls	r2, r2, #1
 8015c1a:	e7d1      	b.n	8015bc0 <_dtoa_r+0x258>
 8015c1c:	f3af 8000 	nop.w
 8015c20:	636f4361 	.word	0x636f4361
 8015c24:	3fd287a7 	.word	0x3fd287a7
 8015c28:	8b60c8b3 	.word	0x8b60c8b3
 8015c2c:	3fc68a28 	.word	0x3fc68a28
 8015c30:	509f79fb 	.word	0x509f79fb
 8015c34:	3fd34413 	.word	0x3fd34413
 8015c38:	08019eb0 	.word	0x08019eb0
 8015c3c:	0801a041 	.word	0x0801a041
 8015c40:	7ff00000 	.word	0x7ff00000
 8015c44:	0801a135 	.word	0x0801a135
 8015c48:	3ff80000 	.word	0x3ff80000
 8015c4c:	0801a230 	.word	0x0801a230
 8015c50:	0801a099 	.word	0x0801a099
 8015c54:	0801a03d 	.word	0x0801a03d
 8015c58:	0801a134 	.word	0x0801a134
 8015c5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015c60:	6018      	str	r0, [r3, #0]
 8015c62:	9b03      	ldr	r3, [sp, #12]
 8015c64:	2b0e      	cmp	r3, #14
 8015c66:	f200 80a1 	bhi.w	8015dac <_dtoa_r+0x444>
 8015c6a:	2c00      	cmp	r4, #0
 8015c6c:	f000 809e 	beq.w	8015dac <_dtoa_r+0x444>
 8015c70:	2f00      	cmp	r7, #0
 8015c72:	dd33      	ble.n	8015cdc <_dtoa_r+0x374>
 8015c74:	4b9c      	ldr	r3, [pc, #624]	@ (8015ee8 <_dtoa_r+0x580>)
 8015c76:	f007 020f 	and.w	r2, r7, #15
 8015c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c7e:	ed93 7b00 	vldr	d7, [r3]
 8015c82:	05f8      	lsls	r0, r7, #23
 8015c84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015c88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015c8c:	d516      	bpl.n	8015cbc <_dtoa_r+0x354>
 8015c8e:	4b97      	ldr	r3, [pc, #604]	@ (8015eec <_dtoa_r+0x584>)
 8015c90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015c98:	f7ea fdc0 	bl	800081c <__aeabi_ddiv>
 8015c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ca0:	f004 040f 	and.w	r4, r4, #15
 8015ca4:	2603      	movs	r6, #3
 8015ca6:	4d91      	ldr	r5, [pc, #580]	@ (8015eec <_dtoa_r+0x584>)
 8015ca8:	b954      	cbnz	r4, 8015cc0 <_dtoa_r+0x358>
 8015caa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cb2:	f7ea fdb3 	bl	800081c <__aeabi_ddiv>
 8015cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015cba:	e028      	b.n	8015d0e <_dtoa_r+0x3a6>
 8015cbc:	2602      	movs	r6, #2
 8015cbe:	e7f2      	b.n	8015ca6 <_dtoa_r+0x33e>
 8015cc0:	07e1      	lsls	r1, r4, #31
 8015cc2:	d508      	bpl.n	8015cd6 <_dtoa_r+0x36e>
 8015cc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015cc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ccc:	f7ea fc7c 	bl	80005c8 <__aeabi_dmul>
 8015cd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015cd4:	3601      	adds	r6, #1
 8015cd6:	1064      	asrs	r4, r4, #1
 8015cd8:	3508      	adds	r5, #8
 8015cda:	e7e5      	b.n	8015ca8 <_dtoa_r+0x340>
 8015cdc:	f000 80af 	beq.w	8015e3e <_dtoa_r+0x4d6>
 8015ce0:	427c      	negs	r4, r7
 8015ce2:	4b81      	ldr	r3, [pc, #516]	@ (8015ee8 <_dtoa_r+0x580>)
 8015ce4:	4d81      	ldr	r5, [pc, #516]	@ (8015eec <_dtoa_r+0x584>)
 8015ce6:	f004 020f 	and.w	r2, r4, #15
 8015cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015cf6:	f7ea fc67 	bl	80005c8 <__aeabi_dmul>
 8015cfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015cfe:	1124      	asrs	r4, r4, #4
 8015d00:	2300      	movs	r3, #0
 8015d02:	2602      	movs	r6, #2
 8015d04:	2c00      	cmp	r4, #0
 8015d06:	f040 808f 	bne.w	8015e28 <_dtoa_r+0x4c0>
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d1d3      	bne.n	8015cb6 <_dtoa_r+0x34e>
 8015d0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f000 8094 	beq.w	8015e42 <_dtoa_r+0x4da>
 8015d1a:	4b75      	ldr	r3, [pc, #468]	@ (8015ef0 <_dtoa_r+0x588>)
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	4620      	mov	r0, r4
 8015d20:	4629      	mov	r1, r5
 8015d22:	f7ea fec3 	bl	8000aac <__aeabi_dcmplt>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	f000 808b 	beq.w	8015e42 <_dtoa_r+0x4da>
 8015d2c:	9b03      	ldr	r3, [sp, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	f000 8087 	beq.w	8015e42 <_dtoa_r+0x4da>
 8015d34:	f1bb 0f00 	cmp.w	fp, #0
 8015d38:	dd34      	ble.n	8015da4 <_dtoa_r+0x43c>
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	4b6d      	ldr	r3, [pc, #436]	@ (8015ef4 <_dtoa_r+0x58c>)
 8015d3e:	2200      	movs	r2, #0
 8015d40:	4629      	mov	r1, r5
 8015d42:	f7ea fc41 	bl	80005c8 <__aeabi_dmul>
 8015d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d4a:	f107 38ff 	add.w	r8, r7, #4294967295
 8015d4e:	3601      	adds	r6, #1
 8015d50:	465c      	mov	r4, fp
 8015d52:	4630      	mov	r0, r6
 8015d54:	f7ea fbce 	bl	80004f4 <__aeabi_i2d>
 8015d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d5c:	f7ea fc34 	bl	80005c8 <__aeabi_dmul>
 8015d60:	4b65      	ldr	r3, [pc, #404]	@ (8015ef8 <_dtoa_r+0x590>)
 8015d62:	2200      	movs	r2, #0
 8015d64:	f7ea fa7a 	bl	800025c <__adddf3>
 8015d68:	4605      	mov	r5, r0
 8015d6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015d6e:	2c00      	cmp	r4, #0
 8015d70:	d16a      	bne.n	8015e48 <_dtoa_r+0x4e0>
 8015d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d76:	4b61      	ldr	r3, [pc, #388]	@ (8015efc <_dtoa_r+0x594>)
 8015d78:	2200      	movs	r2, #0
 8015d7a:	f7ea fa6d 	bl	8000258 <__aeabi_dsub>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	460b      	mov	r3, r1
 8015d82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015d86:	462a      	mov	r2, r5
 8015d88:	4633      	mov	r3, r6
 8015d8a:	f7ea fead 	bl	8000ae8 <__aeabi_dcmpgt>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	f040 8298 	bne.w	80162c4 <_dtoa_r+0x95c>
 8015d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d98:	462a      	mov	r2, r5
 8015d9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015d9e:	f7ea fe85 	bl	8000aac <__aeabi_dcmplt>
 8015da2:	bb38      	cbnz	r0, 8015df4 <_dtoa_r+0x48c>
 8015da4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015da8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015dac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	f2c0 8157 	blt.w	8016062 <_dtoa_r+0x6fa>
 8015db4:	2f0e      	cmp	r7, #14
 8015db6:	f300 8154 	bgt.w	8016062 <_dtoa_r+0x6fa>
 8015dba:	4b4b      	ldr	r3, [pc, #300]	@ (8015ee8 <_dtoa_r+0x580>)
 8015dbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015dc0:	ed93 7b00 	vldr	d7, [r3]
 8015dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	ed8d 7b00 	vstr	d7, [sp]
 8015dcc:	f280 80e5 	bge.w	8015f9a <_dtoa_r+0x632>
 8015dd0:	9b03      	ldr	r3, [sp, #12]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	f300 80e1 	bgt.w	8015f9a <_dtoa_r+0x632>
 8015dd8:	d10c      	bne.n	8015df4 <_dtoa_r+0x48c>
 8015dda:	4b48      	ldr	r3, [pc, #288]	@ (8015efc <_dtoa_r+0x594>)
 8015ddc:	2200      	movs	r2, #0
 8015dde:	ec51 0b17 	vmov	r0, r1, d7
 8015de2:	f7ea fbf1 	bl	80005c8 <__aeabi_dmul>
 8015de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dea:	f7ea fe73 	bl	8000ad4 <__aeabi_dcmpge>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	f000 8266 	beq.w	80162c0 <_dtoa_r+0x958>
 8015df4:	2400      	movs	r4, #0
 8015df6:	4625      	mov	r5, r4
 8015df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dfa:	4656      	mov	r6, sl
 8015dfc:	ea6f 0803 	mvn.w	r8, r3
 8015e00:	2700      	movs	r7, #0
 8015e02:	4621      	mov	r1, r4
 8015e04:	4648      	mov	r0, r9
 8015e06:	f000 fd0b 	bl	8016820 <_Bfree>
 8015e0a:	2d00      	cmp	r5, #0
 8015e0c:	f000 80bd 	beq.w	8015f8a <_dtoa_r+0x622>
 8015e10:	b12f      	cbz	r7, 8015e1e <_dtoa_r+0x4b6>
 8015e12:	42af      	cmp	r7, r5
 8015e14:	d003      	beq.n	8015e1e <_dtoa_r+0x4b6>
 8015e16:	4639      	mov	r1, r7
 8015e18:	4648      	mov	r0, r9
 8015e1a:	f000 fd01 	bl	8016820 <_Bfree>
 8015e1e:	4629      	mov	r1, r5
 8015e20:	4648      	mov	r0, r9
 8015e22:	f000 fcfd 	bl	8016820 <_Bfree>
 8015e26:	e0b0      	b.n	8015f8a <_dtoa_r+0x622>
 8015e28:	07e2      	lsls	r2, r4, #31
 8015e2a:	d505      	bpl.n	8015e38 <_dtoa_r+0x4d0>
 8015e2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015e30:	f7ea fbca 	bl	80005c8 <__aeabi_dmul>
 8015e34:	3601      	adds	r6, #1
 8015e36:	2301      	movs	r3, #1
 8015e38:	1064      	asrs	r4, r4, #1
 8015e3a:	3508      	adds	r5, #8
 8015e3c:	e762      	b.n	8015d04 <_dtoa_r+0x39c>
 8015e3e:	2602      	movs	r6, #2
 8015e40:	e765      	b.n	8015d0e <_dtoa_r+0x3a6>
 8015e42:	9c03      	ldr	r4, [sp, #12]
 8015e44:	46b8      	mov	r8, r7
 8015e46:	e784      	b.n	8015d52 <_dtoa_r+0x3ea>
 8015e48:	4b27      	ldr	r3, [pc, #156]	@ (8015ee8 <_dtoa_r+0x580>)
 8015e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015e54:	4454      	add	r4, sl
 8015e56:	2900      	cmp	r1, #0
 8015e58:	d054      	beq.n	8015f04 <_dtoa_r+0x59c>
 8015e5a:	4929      	ldr	r1, [pc, #164]	@ (8015f00 <_dtoa_r+0x598>)
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	f7ea fcdd 	bl	800081c <__aeabi_ddiv>
 8015e62:	4633      	mov	r3, r6
 8015e64:	462a      	mov	r2, r5
 8015e66:	f7ea f9f7 	bl	8000258 <__aeabi_dsub>
 8015e6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015e6e:	4656      	mov	r6, sl
 8015e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e74:	f7ea fe58 	bl	8000b28 <__aeabi_d2iz>
 8015e78:	4605      	mov	r5, r0
 8015e7a:	f7ea fb3b 	bl	80004f4 <__aeabi_i2d>
 8015e7e:	4602      	mov	r2, r0
 8015e80:	460b      	mov	r3, r1
 8015e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e86:	f7ea f9e7 	bl	8000258 <__aeabi_dsub>
 8015e8a:	3530      	adds	r5, #48	@ 0x30
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	460b      	mov	r3, r1
 8015e90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e94:	f806 5b01 	strb.w	r5, [r6], #1
 8015e98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015e9c:	f7ea fe06 	bl	8000aac <__aeabi_dcmplt>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d172      	bne.n	8015f8a <_dtoa_r+0x622>
 8015ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ea8:	4911      	ldr	r1, [pc, #68]	@ (8015ef0 <_dtoa_r+0x588>)
 8015eaa:	2000      	movs	r0, #0
 8015eac:	f7ea f9d4 	bl	8000258 <__aeabi_dsub>
 8015eb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015eb4:	f7ea fdfa 	bl	8000aac <__aeabi_dcmplt>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	f040 80b4 	bne.w	8016026 <_dtoa_r+0x6be>
 8015ebe:	42a6      	cmp	r6, r4
 8015ec0:	f43f af70 	beq.w	8015da4 <_dtoa_r+0x43c>
 8015ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8015ef4 <_dtoa_r+0x58c>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	f7ea fb7c 	bl	80005c8 <__aeabi_dmul>
 8015ed0:	4b08      	ldr	r3, [pc, #32]	@ (8015ef4 <_dtoa_r+0x58c>)
 8015ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015edc:	f7ea fb74 	bl	80005c8 <__aeabi_dmul>
 8015ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ee4:	e7c4      	b.n	8015e70 <_dtoa_r+0x508>
 8015ee6:	bf00      	nop
 8015ee8:	0801a230 	.word	0x0801a230
 8015eec:	0801a208 	.word	0x0801a208
 8015ef0:	3ff00000 	.word	0x3ff00000
 8015ef4:	40240000 	.word	0x40240000
 8015ef8:	401c0000 	.word	0x401c0000
 8015efc:	40140000 	.word	0x40140000
 8015f00:	3fe00000 	.word	0x3fe00000
 8015f04:	4631      	mov	r1, r6
 8015f06:	4628      	mov	r0, r5
 8015f08:	f7ea fb5e 	bl	80005c8 <__aeabi_dmul>
 8015f0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015f10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015f12:	4656      	mov	r6, sl
 8015f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f18:	f7ea fe06 	bl	8000b28 <__aeabi_d2iz>
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	f7ea fae9 	bl	80004f4 <__aeabi_i2d>
 8015f22:	4602      	mov	r2, r0
 8015f24:	460b      	mov	r3, r1
 8015f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f2a:	f7ea f995 	bl	8000258 <__aeabi_dsub>
 8015f2e:	3530      	adds	r5, #48	@ 0x30
 8015f30:	f806 5b01 	strb.w	r5, [r6], #1
 8015f34:	4602      	mov	r2, r0
 8015f36:	460b      	mov	r3, r1
 8015f38:	42a6      	cmp	r6, r4
 8015f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f3e:	f04f 0200 	mov.w	r2, #0
 8015f42:	d124      	bne.n	8015f8e <_dtoa_r+0x626>
 8015f44:	4baf      	ldr	r3, [pc, #700]	@ (8016204 <_dtoa_r+0x89c>)
 8015f46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015f4a:	f7ea f987 	bl	800025c <__adddf3>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	460b      	mov	r3, r1
 8015f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f56:	f7ea fdc7 	bl	8000ae8 <__aeabi_dcmpgt>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d163      	bne.n	8016026 <_dtoa_r+0x6be>
 8015f5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015f62:	49a8      	ldr	r1, [pc, #672]	@ (8016204 <_dtoa_r+0x89c>)
 8015f64:	2000      	movs	r0, #0
 8015f66:	f7ea f977 	bl	8000258 <__aeabi_dsub>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f72:	f7ea fd9b 	bl	8000aac <__aeabi_dcmplt>
 8015f76:	2800      	cmp	r0, #0
 8015f78:	f43f af14 	beq.w	8015da4 <_dtoa_r+0x43c>
 8015f7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015f7e:	1e73      	subs	r3, r6, #1
 8015f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015f82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f86:	2b30      	cmp	r3, #48	@ 0x30
 8015f88:	d0f8      	beq.n	8015f7c <_dtoa_r+0x614>
 8015f8a:	4647      	mov	r7, r8
 8015f8c:	e03b      	b.n	8016006 <_dtoa_r+0x69e>
 8015f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8016208 <_dtoa_r+0x8a0>)
 8015f90:	f7ea fb1a 	bl	80005c8 <__aeabi_dmul>
 8015f94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f98:	e7bc      	b.n	8015f14 <_dtoa_r+0x5ac>
 8015f9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015f9e:	4656      	mov	r6, sl
 8015fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	4629      	mov	r1, r5
 8015fa8:	f7ea fc38 	bl	800081c <__aeabi_ddiv>
 8015fac:	f7ea fdbc 	bl	8000b28 <__aeabi_d2iz>
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	f7ea fa9f 	bl	80004f4 <__aeabi_i2d>
 8015fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fba:	f7ea fb05 	bl	80005c8 <__aeabi_dmul>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015fca:	f7ea f945 	bl	8000258 <__aeabi_dsub>
 8015fce:	f806 4b01 	strb.w	r4, [r6], #1
 8015fd2:	9d03      	ldr	r5, [sp, #12]
 8015fd4:	eba6 040a 	sub.w	r4, r6, sl
 8015fd8:	42a5      	cmp	r5, r4
 8015fda:	4602      	mov	r2, r0
 8015fdc:	460b      	mov	r3, r1
 8015fde:	d133      	bne.n	8016048 <_dtoa_r+0x6e0>
 8015fe0:	f7ea f93c 	bl	800025c <__adddf3>
 8015fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fe8:	4604      	mov	r4, r0
 8015fea:	460d      	mov	r5, r1
 8015fec:	f7ea fd7c 	bl	8000ae8 <__aeabi_dcmpgt>
 8015ff0:	b9c0      	cbnz	r0, 8016024 <_dtoa_r+0x6bc>
 8015ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	f7ea fd4d 	bl	8000a98 <__aeabi_dcmpeq>
 8015ffe:	b110      	cbz	r0, 8016006 <_dtoa_r+0x69e>
 8016000:	f018 0f01 	tst.w	r8, #1
 8016004:	d10e      	bne.n	8016024 <_dtoa_r+0x6bc>
 8016006:	9902      	ldr	r1, [sp, #8]
 8016008:	4648      	mov	r0, r9
 801600a:	f000 fc09 	bl	8016820 <_Bfree>
 801600e:	2300      	movs	r3, #0
 8016010:	7033      	strb	r3, [r6, #0]
 8016012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016014:	3701      	adds	r7, #1
 8016016:	601f      	str	r7, [r3, #0]
 8016018:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 824b 	beq.w	80164b6 <_dtoa_r+0xb4e>
 8016020:	601e      	str	r6, [r3, #0]
 8016022:	e248      	b.n	80164b6 <_dtoa_r+0xb4e>
 8016024:	46b8      	mov	r8, r7
 8016026:	4633      	mov	r3, r6
 8016028:	461e      	mov	r6, r3
 801602a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801602e:	2a39      	cmp	r2, #57	@ 0x39
 8016030:	d106      	bne.n	8016040 <_dtoa_r+0x6d8>
 8016032:	459a      	cmp	sl, r3
 8016034:	d1f8      	bne.n	8016028 <_dtoa_r+0x6c0>
 8016036:	2230      	movs	r2, #48	@ 0x30
 8016038:	f108 0801 	add.w	r8, r8, #1
 801603c:	f88a 2000 	strb.w	r2, [sl]
 8016040:	781a      	ldrb	r2, [r3, #0]
 8016042:	3201      	adds	r2, #1
 8016044:	701a      	strb	r2, [r3, #0]
 8016046:	e7a0      	b.n	8015f8a <_dtoa_r+0x622>
 8016048:	4b6f      	ldr	r3, [pc, #444]	@ (8016208 <_dtoa_r+0x8a0>)
 801604a:	2200      	movs	r2, #0
 801604c:	f7ea fabc 	bl	80005c8 <__aeabi_dmul>
 8016050:	2200      	movs	r2, #0
 8016052:	2300      	movs	r3, #0
 8016054:	4604      	mov	r4, r0
 8016056:	460d      	mov	r5, r1
 8016058:	f7ea fd1e 	bl	8000a98 <__aeabi_dcmpeq>
 801605c:	2800      	cmp	r0, #0
 801605e:	d09f      	beq.n	8015fa0 <_dtoa_r+0x638>
 8016060:	e7d1      	b.n	8016006 <_dtoa_r+0x69e>
 8016062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016064:	2a00      	cmp	r2, #0
 8016066:	f000 80ea 	beq.w	801623e <_dtoa_r+0x8d6>
 801606a:	9a07      	ldr	r2, [sp, #28]
 801606c:	2a01      	cmp	r2, #1
 801606e:	f300 80cd 	bgt.w	801620c <_dtoa_r+0x8a4>
 8016072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016074:	2a00      	cmp	r2, #0
 8016076:	f000 80c1 	beq.w	80161fc <_dtoa_r+0x894>
 801607a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801607e:	9c08      	ldr	r4, [sp, #32]
 8016080:	9e00      	ldr	r6, [sp, #0]
 8016082:	9a00      	ldr	r2, [sp, #0]
 8016084:	441a      	add	r2, r3
 8016086:	9200      	str	r2, [sp, #0]
 8016088:	9a06      	ldr	r2, [sp, #24]
 801608a:	2101      	movs	r1, #1
 801608c:	441a      	add	r2, r3
 801608e:	4648      	mov	r0, r9
 8016090:	9206      	str	r2, [sp, #24]
 8016092:	f000 fc79 	bl	8016988 <__i2b>
 8016096:	4605      	mov	r5, r0
 8016098:	b166      	cbz	r6, 80160b4 <_dtoa_r+0x74c>
 801609a:	9b06      	ldr	r3, [sp, #24]
 801609c:	2b00      	cmp	r3, #0
 801609e:	dd09      	ble.n	80160b4 <_dtoa_r+0x74c>
 80160a0:	42b3      	cmp	r3, r6
 80160a2:	9a00      	ldr	r2, [sp, #0]
 80160a4:	bfa8      	it	ge
 80160a6:	4633      	movge	r3, r6
 80160a8:	1ad2      	subs	r2, r2, r3
 80160aa:	9200      	str	r2, [sp, #0]
 80160ac:	9a06      	ldr	r2, [sp, #24]
 80160ae:	1af6      	subs	r6, r6, r3
 80160b0:	1ad3      	subs	r3, r2, r3
 80160b2:	9306      	str	r3, [sp, #24]
 80160b4:	9b08      	ldr	r3, [sp, #32]
 80160b6:	b30b      	cbz	r3, 80160fc <_dtoa_r+0x794>
 80160b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	f000 80c6 	beq.w	801624c <_dtoa_r+0x8e4>
 80160c0:	2c00      	cmp	r4, #0
 80160c2:	f000 80c0 	beq.w	8016246 <_dtoa_r+0x8de>
 80160c6:	4629      	mov	r1, r5
 80160c8:	4622      	mov	r2, r4
 80160ca:	4648      	mov	r0, r9
 80160cc:	f000 fd14 	bl	8016af8 <__pow5mult>
 80160d0:	9a02      	ldr	r2, [sp, #8]
 80160d2:	4601      	mov	r1, r0
 80160d4:	4605      	mov	r5, r0
 80160d6:	4648      	mov	r0, r9
 80160d8:	f000 fc6c 	bl	80169b4 <__multiply>
 80160dc:	9902      	ldr	r1, [sp, #8]
 80160de:	4680      	mov	r8, r0
 80160e0:	4648      	mov	r0, r9
 80160e2:	f000 fb9d 	bl	8016820 <_Bfree>
 80160e6:	9b08      	ldr	r3, [sp, #32]
 80160e8:	1b1b      	subs	r3, r3, r4
 80160ea:	9308      	str	r3, [sp, #32]
 80160ec:	f000 80b1 	beq.w	8016252 <_dtoa_r+0x8ea>
 80160f0:	9a08      	ldr	r2, [sp, #32]
 80160f2:	4641      	mov	r1, r8
 80160f4:	4648      	mov	r0, r9
 80160f6:	f000 fcff 	bl	8016af8 <__pow5mult>
 80160fa:	9002      	str	r0, [sp, #8]
 80160fc:	2101      	movs	r1, #1
 80160fe:	4648      	mov	r0, r9
 8016100:	f000 fc42 	bl	8016988 <__i2b>
 8016104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016106:	4604      	mov	r4, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	f000 81d8 	beq.w	80164be <_dtoa_r+0xb56>
 801610e:	461a      	mov	r2, r3
 8016110:	4601      	mov	r1, r0
 8016112:	4648      	mov	r0, r9
 8016114:	f000 fcf0 	bl	8016af8 <__pow5mult>
 8016118:	9b07      	ldr	r3, [sp, #28]
 801611a:	2b01      	cmp	r3, #1
 801611c:	4604      	mov	r4, r0
 801611e:	f300 809f 	bgt.w	8016260 <_dtoa_r+0x8f8>
 8016122:	9b04      	ldr	r3, [sp, #16]
 8016124:	2b00      	cmp	r3, #0
 8016126:	f040 8097 	bne.w	8016258 <_dtoa_r+0x8f0>
 801612a:	9b05      	ldr	r3, [sp, #20]
 801612c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016130:	2b00      	cmp	r3, #0
 8016132:	f040 8093 	bne.w	801625c <_dtoa_r+0x8f4>
 8016136:	9b05      	ldr	r3, [sp, #20]
 8016138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801613c:	0d1b      	lsrs	r3, r3, #20
 801613e:	051b      	lsls	r3, r3, #20
 8016140:	b133      	cbz	r3, 8016150 <_dtoa_r+0x7e8>
 8016142:	9b00      	ldr	r3, [sp, #0]
 8016144:	3301      	adds	r3, #1
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	9b06      	ldr	r3, [sp, #24]
 801614a:	3301      	adds	r3, #1
 801614c:	9306      	str	r3, [sp, #24]
 801614e:	2301      	movs	r3, #1
 8016150:	9308      	str	r3, [sp, #32]
 8016152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016154:	2b00      	cmp	r3, #0
 8016156:	f000 81b8 	beq.w	80164ca <_dtoa_r+0xb62>
 801615a:	6923      	ldr	r3, [r4, #16]
 801615c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016160:	6918      	ldr	r0, [r3, #16]
 8016162:	f000 fbc5 	bl	80168f0 <__hi0bits>
 8016166:	f1c0 0020 	rsb	r0, r0, #32
 801616a:	9b06      	ldr	r3, [sp, #24]
 801616c:	4418      	add	r0, r3
 801616e:	f010 001f 	ands.w	r0, r0, #31
 8016172:	f000 8082 	beq.w	801627a <_dtoa_r+0x912>
 8016176:	f1c0 0320 	rsb	r3, r0, #32
 801617a:	2b04      	cmp	r3, #4
 801617c:	dd73      	ble.n	8016266 <_dtoa_r+0x8fe>
 801617e:	9b00      	ldr	r3, [sp, #0]
 8016180:	f1c0 001c 	rsb	r0, r0, #28
 8016184:	4403      	add	r3, r0
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	9b06      	ldr	r3, [sp, #24]
 801618a:	4403      	add	r3, r0
 801618c:	4406      	add	r6, r0
 801618e:	9306      	str	r3, [sp, #24]
 8016190:	9b00      	ldr	r3, [sp, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	dd05      	ble.n	80161a2 <_dtoa_r+0x83a>
 8016196:	9902      	ldr	r1, [sp, #8]
 8016198:	461a      	mov	r2, r3
 801619a:	4648      	mov	r0, r9
 801619c:	f000 fd06 	bl	8016bac <__lshift>
 80161a0:	9002      	str	r0, [sp, #8]
 80161a2:	9b06      	ldr	r3, [sp, #24]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	dd05      	ble.n	80161b4 <_dtoa_r+0x84c>
 80161a8:	4621      	mov	r1, r4
 80161aa:	461a      	mov	r2, r3
 80161ac:	4648      	mov	r0, r9
 80161ae:	f000 fcfd 	bl	8016bac <__lshift>
 80161b2:	4604      	mov	r4, r0
 80161b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d061      	beq.n	801627e <_dtoa_r+0x916>
 80161ba:	9802      	ldr	r0, [sp, #8]
 80161bc:	4621      	mov	r1, r4
 80161be:	f000 fd61 	bl	8016c84 <__mcmp>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	da5b      	bge.n	801627e <_dtoa_r+0x916>
 80161c6:	2300      	movs	r3, #0
 80161c8:	9902      	ldr	r1, [sp, #8]
 80161ca:	220a      	movs	r2, #10
 80161cc:	4648      	mov	r0, r9
 80161ce:	f000 fb49 	bl	8016864 <__multadd>
 80161d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161d4:	9002      	str	r0, [sp, #8]
 80161d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f000 8177 	beq.w	80164ce <_dtoa_r+0xb66>
 80161e0:	4629      	mov	r1, r5
 80161e2:	2300      	movs	r3, #0
 80161e4:	220a      	movs	r2, #10
 80161e6:	4648      	mov	r0, r9
 80161e8:	f000 fb3c 	bl	8016864 <__multadd>
 80161ec:	f1bb 0f00 	cmp.w	fp, #0
 80161f0:	4605      	mov	r5, r0
 80161f2:	dc6f      	bgt.n	80162d4 <_dtoa_r+0x96c>
 80161f4:	9b07      	ldr	r3, [sp, #28]
 80161f6:	2b02      	cmp	r3, #2
 80161f8:	dc49      	bgt.n	801628e <_dtoa_r+0x926>
 80161fa:	e06b      	b.n	80162d4 <_dtoa_r+0x96c>
 80161fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80161fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016202:	e73c      	b.n	801607e <_dtoa_r+0x716>
 8016204:	3fe00000 	.word	0x3fe00000
 8016208:	40240000 	.word	0x40240000
 801620c:	9b03      	ldr	r3, [sp, #12]
 801620e:	1e5c      	subs	r4, r3, #1
 8016210:	9b08      	ldr	r3, [sp, #32]
 8016212:	42a3      	cmp	r3, r4
 8016214:	db09      	blt.n	801622a <_dtoa_r+0x8c2>
 8016216:	1b1c      	subs	r4, r3, r4
 8016218:	9b03      	ldr	r3, [sp, #12]
 801621a:	2b00      	cmp	r3, #0
 801621c:	f6bf af30 	bge.w	8016080 <_dtoa_r+0x718>
 8016220:	9b00      	ldr	r3, [sp, #0]
 8016222:	9a03      	ldr	r2, [sp, #12]
 8016224:	1a9e      	subs	r6, r3, r2
 8016226:	2300      	movs	r3, #0
 8016228:	e72b      	b.n	8016082 <_dtoa_r+0x71a>
 801622a:	9b08      	ldr	r3, [sp, #32]
 801622c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801622e:	9408      	str	r4, [sp, #32]
 8016230:	1ae3      	subs	r3, r4, r3
 8016232:	441a      	add	r2, r3
 8016234:	9e00      	ldr	r6, [sp, #0]
 8016236:	9b03      	ldr	r3, [sp, #12]
 8016238:	920d      	str	r2, [sp, #52]	@ 0x34
 801623a:	2400      	movs	r4, #0
 801623c:	e721      	b.n	8016082 <_dtoa_r+0x71a>
 801623e:	9c08      	ldr	r4, [sp, #32]
 8016240:	9e00      	ldr	r6, [sp, #0]
 8016242:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016244:	e728      	b.n	8016098 <_dtoa_r+0x730>
 8016246:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801624a:	e751      	b.n	80160f0 <_dtoa_r+0x788>
 801624c:	9a08      	ldr	r2, [sp, #32]
 801624e:	9902      	ldr	r1, [sp, #8]
 8016250:	e750      	b.n	80160f4 <_dtoa_r+0x78c>
 8016252:	f8cd 8008 	str.w	r8, [sp, #8]
 8016256:	e751      	b.n	80160fc <_dtoa_r+0x794>
 8016258:	2300      	movs	r3, #0
 801625a:	e779      	b.n	8016150 <_dtoa_r+0x7e8>
 801625c:	9b04      	ldr	r3, [sp, #16]
 801625e:	e777      	b.n	8016150 <_dtoa_r+0x7e8>
 8016260:	2300      	movs	r3, #0
 8016262:	9308      	str	r3, [sp, #32]
 8016264:	e779      	b.n	801615a <_dtoa_r+0x7f2>
 8016266:	d093      	beq.n	8016190 <_dtoa_r+0x828>
 8016268:	9a00      	ldr	r2, [sp, #0]
 801626a:	331c      	adds	r3, #28
 801626c:	441a      	add	r2, r3
 801626e:	9200      	str	r2, [sp, #0]
 8016270:	9a06      	ldr	r2, [sp, #24]
 8016272:	441a      	add	r2, r3
 8016274:	441e      	add	r6, r3
 8016276:	9206      	str	r2, [sp, #24]
 8016278:	e78a      	b.n	8016190 <_dtoa_r+0x828>
 801627a:	4603      	mov	r3, r0
 801627c:	e7f4      	b.n	8016268 <_dtoa_r+0x900>
 801627e:	9b03      	ldr	r3, [sp, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	46b8      	mov	r8, r7
 8016284:	dc20      	bgt.n	80162c8 <_dtoa_r+0x960>
 8016286:	469b      	mov	fp, r3
 8016288:	9b07      	ldr	r3, [sp, #28]
 801628a:	2b02      	cmp	r3, #2
 801628c:	dd1e      	ble.n	80162cc <_dtoa_r+0x964>
 801628e:	f1bb 0f00 	cmp.w	fp, #0
 8016292:	f47f adb1 	bne.w	8015df8 <_dtoa_r+0x490>
 8016296:	4621      	mov	r1, r4
 8016298:	465b      	mov	r3, fp
 801629a:	2205      	movs	r2, #5
 801629c:	4648      	mov	r0, r9
 801629e:	f000 fae1 	bl	8016864 <__multadd>
 80162a2:	4601      	mov	r1, r0
 80162a4:	4604      	mov	r4, r0
 80162a6:	9802      	ldr	r0, [sp, #8]
 80162a8:	f000 fcec 	bl	8016c84 <__mcmp>
 80162ac:	2800      	cmp	r0, #0
 80162ae:	f77f ada3 	ble.w	8015df8 <_dtoa_r+0x490>
 80162b2:	4656      	mov	r6, sl
 80162b4:	2331      	movs	r3, #49	@ 0x31
 80162b6:	f806 3b01 	strb.w	r3, [r6], #1
 80162ba:	f108 0801 	add.w	r8, r8, #1
 80162be:	e59f      	b.n	8015e00 <_dtoa_r+0x498>
 80162c0:	9c03      	ldr	r4, [sp, #12]
 80162c2:	46b8      	mov	r8, r7
 80162c4:	4625      	mov	r5, r4
 80162c6:	e7f4      	b.n	80162b2 <_dtoa_r+0x94a>
 80162c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80162cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	f000 8101 	beq.w	80164d6 <_dtoa_r+0xb6e>
 80162d4:	2e00      	cmp	r6, #0
 80162d6:	dd05      	ble.n	80162e4 <_dtoa_r+0x97c>
 80162d8:	4629      	mov	r1, r5
 80162da:	4632      	mov	r2, r6
 80162dc:	4648      	mov	r0, r9
 80162de:	f000 fc65 	bl	8016bac <__lshift>
 80162e2:	4605      	mov	r5, r0
 80162e4:	9b08      	ldr	r3, [sp, #32]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d05c      	beq.n	80163a4 <_dtoa_r+0xa3c>
 80162ea:	6869      	ldr	r1, [r5, #4]
 80162ec:	4648      	mov	r0, r9
 80162ee:	f000 fa57 	bl	80167a0 <_Balloc>
 80162f2:	4606      	mov	r6, r0
 80162f4:	b928      	cbnz	r0, 8016302 <_dtoa_r+0x99a>
 80162f6:	4b82      	ldr	r3, [pc, #520]	@ (8016500 <_dtoa_r+0xb98>)
 80162f8:	4602      	mov	r2, r0
 80162fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80162fe:	f7ff bb4a 	b.w	8015996 <_dtoa_r+0x2e>
 8016302:	692a      	ldr	r2, [r5, #16]
 8016304:	3202      	adds	r2, #2
 8016306:	0092      	lsls	r2, r2, #2
 8016308:	f105 010c 	add.w	r1, r5, #12
 801630c:	300c      	adds	r0, #12
 801630e:	f7ff fa6c 	bl	80157ea <memcpy>
 8016312:	2201      	movs	r2, #1
 8016314:	4631      	mov	r1, r6
 8016316:	4648      	mov	r0, r9
 8016318:	f000 fc48 	bl	8016bac <__lshift>
 801631c:	f10a 0301 	add.w	r3, sl, #1
 8016320:	9300      	str	r3, [sp, #0]
 8016322:	eb0a 030b 	add.w	r3, sl, fp
 8016326:	9308      	str	r3, [sp, #32]
 8016328:	9b04      	ldr	r3, [sp, #16]
 801632a:	f003 0301 	and.w	r3, r3, #1
 801632e:	462f      	mov	r7, r5
 8016330:	9306      	str	r3, [sp, #24]
 8016332:	4605      	mov	r5, r0
 8016334:	9b00      	ldr	r3, [sp, #0]
 8016336:	9802      	ldr	r0, [sp, #8]
 8016338:	4621      	mov	r1, r4
 801633a:	f103 3bff 	add.w	fp, r3, #4294967295
 801633e:	f7ff fa89 	bl	8015854 <quorem>
 8016342:	4603      	mov	r3, r0
 8016344:	3330      	adds	r3, #48	@ 0x30
 8016346:	9003      	str	r0, [sp, #12]
 8016348:	4639      	mov	r1, r7
 801634a:	9802      	ldr	r0, [sp, #8]
 801634c:	9309      	str	r3, [sp, #36]	@ 0x24
 801634e:	f000 fc99 	bl	8016c84 <__mcmp>
 8016352:	462a      	mov	r2, r5
 8016354:	9004      	str	r0, [sp, #16]
 8016356:	4621      	mov	r1, r4
 8016358:	4648      	mov	r0, r9
 801635a:	f000 fcaf 	bl	8016cbc <__mdiff>
 801635e:	68c2      	ldr	r2, [r0, #12]
 8016360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016362:	4606      	mov	r6, r0
 8016364:	bb02      	cbnz	r2, 80163a8 <_dtoa_r+0xa40>
 8016366:	4601      	mov	r1, r0
 8016368:	9802      	ldr	r0, [sp, #8]
 801636a:	f000 fc8b 	bl	8016c84 <__mcmp>
 801636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016370:	4602      	mov	r2, r0
 8016372:	4631      	mov	r1, r6
 8016374:	4648      	mov	r0, r9
 8016376:	920c      	str	r2, [sp, #48]	@ 0x30
 8016378:	9309      	str	r3, [sp, #36]	@ 0x24
 801637a:	f000 fa51 	bl	8016820 <_Bfree>
 801637e:	9b07      	ldr	r3, [sp, #28]
 8016380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016382:	9e00      	ldr	r6, [sp, #0]
 8016384:	ea42 0103 	orr.w	r1, r2, r3
 8016388:	9b06      	ldr	r3, [sp, #24]
 801638a:	4319      	orrs	r1, r3
 801638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801638e:	d10d      	bne.n	80163ac <_dtoa_r+0xa44>
 8016390:	2b39      	cmp	r3, #57	@ 0x39
 8016392:	d027      	beq.n	80163e4 <_dtoa_r+0xa7c>
 8016394:	9a04      	ldr	r2, [sp, #16]
 8016396:	2a00      	cmp	r2, #0
 8016398:	dd01      	ble.n	801639e <_dtoa_r+0xa36>
 801639a:	9b03      	ldr	r3, [sp, #12]
 801639c:	3331      	adds	r3, #49	@ 0x31
 801639e:	f88b 3000 	strb.w	r3, [fp]
 80163a2:	e52e      	b.n	8015e02 <_dtoa_r+0x49a>
 80163a4:	4628      	mov	r0, r5
 80163a6:	e7b9      	b.n	801631c <_dtoa_r+0x9b4>
 80163a8:	2201      	movs	r2, #1
 80163aa:	e7e2      	b.n	8016372 <_dtoa_r+0xa0a>
 80163ac:	9904      	ldr	r1, [sp, #16]
 80163ae:	2900      	cmp	r1, #0
 80163b0:	db04      	blt.n	80163bc <_dtoa_r+0xa54>
 80163b2:	9807      	ldr	r0, [sp, #28]
 80163b4:	4301      	orrs	r1, r0
 80163b6:	9806      	ldr	r0, [sp, #24]
 80163b8:	4301      	orrs	r1, r0
 80163ba:	d120      	bne.n	80163fe <_dtoa_r+0xa96>
 80163bc:	2a00      	cmp	r2, #0
 80163be:	ddee      	ble.n	801639e <_dtoa_r+0xa36>
 80163c0:	9902      	ldr	r1, [sp, #8]
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	2201      	movs	r2, #1
 80163c6:	4648      	mov	r0, r9
 80163c8:	f000 fbf0 	bl	8016bac <__lshift>
 80163cc:	4621      	mov	r1, r4
 80163ce:	9002      	str	r0, [sp, #8]
 80163d0:	f000 fc58 	bl	8016c84 <__mcmp>
 80163d4:	2800      	cmp	r0, #0
 80163d6:	9b00      	ldr	r3, [sp, #0]
 80163d8:	dc02      	bgt.n	80163e0 <_dtoa_r+0xa78>
 80163da:	d1e0      	bne.n	801639e <_dtoa_r+0xa36>
 80163dc:	07da      	lsls	r2, r3, #31
 80163de:	d5de      	bpl.n	801639e <_dtoa_r+0xa36>
 80163e0:	2b39      	cmp	r3, #57	@ 0x39
 80163e2:	d1da      	bne.n	801639a <_dtoa_r+0xa32>
 80163e4:	2339      	movs	r3, #57	@ 0x39
 80163e6:	f88b 3000 	strb.w	r3, [fp]
 80163ea:	4633      	mov	r3, r6
 80163ec:	461e      	mov	r6, r3
 80163ee:	3b01      	subs	r3, #1
 80163f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80163f4:	2a39      	cmp	r2, #57	@ 0x39
 80163f6:	d04e      	beq.n	8016496 <_dtoa_r+0xb2e>
 80163f8:	3201      	adds	r2, #1
 80163fa:	701a      	strb	r2, [r3, #0]
 80163fc:	e501      	b.n	8015e02 <_dtoa_r+0x49a>
 80163fe:	2a00      	cmp	r2, #0
 8016400:	dd03      	ble.n	801640a <_dtoa_r+0xaa2>
 8016402:	2b39      	cmp	r3, #57	@ 0x39
 8016404:	d0ee      	beq.n	80163e4 <_dtoa_r+0xa7c>
 8016406:	3301      	adds	r3, #1
 8016408:	e7c9      	b.n	801639e <_dtoa_r+0xa36>
 801640a:	9a00      	ldr	r2, [sp, #0]
 801640c:	9908      	ldr	r1, [sp, #32]
 801640e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016412:	428a      	cmp	r2, r1
 8016414:	d028      	beq.n	8016468 <_dtoa_r+0xb00>
 8016416:	9902      	ldr	r1, [sp, #8]
 8016418:	2300      	movs	r3, #0
 801641a:	220a      	movs	r2, #10
 801641c:	4648      	mov	r0, r9
 801641e:	f000 fa21 	bl	8016864 <__multadd>
 8016422:	42af      	cmp	r7, r5
 8016424:	9002      	str	r0, [sp, #8]
 8016426:	f04f 0300 	mov.w	r3, #0
 801642a:	f04f 020a 	mov.w	r2, #10
 801642e:	4639      	mov	r1, r7
 8016430:	4648      	mov	r0, r9
 8016432:	d107      	bne.n	8016444 <_dtoa_r+0xadc>
 8016434:	f000 fa16 	bl	8016864 <__multadd>
 8016438:	4607      	mov	r7, r0
 801643a:	4605      	mov	r5, r0
 801643c:	9b00      	ldr	r3, [sp, #0]
 801643e:	3301      	adds	r3, #1
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	e777      	b.n	8016334 <_dtoa_r+0x9cc>
 8016444:	f000 fa0e 	bl	8016864 <__multadd>
 8016448:	4629      	mov	r1, r5
 801644a:	4607      	mov	r7, r0
 801644c:	2300      	movs	r3, #0
 801644e:	220a      	movs	r2, #10
 8016450:	4648      	mov	r0, r9
 8016452:	f000 fa07 	bl	8016864 <__multadd>
 8016456:	4605      	mov	r5, r0
 8016458:	e7f0      	b.n	801643c <_dtoa_r+0xad4>
 801645a:	f1bb 0f00 	cmp.w	fp, #0
 801645e:	bfcc      	ite	gt
 8016460:	465e      	movgt	r6, fp
 8016462:	2601      	movle	r6, #1
 8016464:	4456      	add	r6, sl
 8016466:	2700      	movs	r7, #0
 8016468:	9902      	ldr	r1, [sp, #8]
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	2201      	movs	r2, #1
 801646e:	4648      	mov	r0, r9
 8016470:	f000 fb9c 	bl	8016bac <__lshift>
 8016474:	4621      	mov	r1, r4
 8016476:	9002      	str	r0, [sp, #8]
 8016478:	f000 fc04 	bl	8016c84 <__mcmp>
 801647c:	2800      	cmp	r0, #0
 801647e:	dcb4      	bgt.n	80163ea <_dtoa_r+0xa82>
 8016480:	d102      	bne.n	8016488 <_dtoa_r+0xb20>
 8016482:	9b00      	ldr	r3, [sp, #0]
 8016484:	07db      	lsls	r3, r3, #31
 8016486:	d4b0      	bmi.n	80163ea <_dtoa_r+0xa82>
 8016488:	4633      	mov	r3, r6
 801648a:	461e      	mov	r6, r3
 801648c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016490:	2a30      	cmp	r2, #48	@ 0x30
 8016492:	d0fa      	beq.n	801648a <_dtoa_r+0xb22>
 8016494:	e4b5      	b.n	8015e02 <_dtoa_r+0x49a>
 8016496:	459a      	cmp	sl, r3
 8016498:	d1a8      	bne.n	80163ec <_dtoa_r+0xa84>
 801649a:	2331      	movs	r3, #49	@ 0x31
 801649c:	f108 0801 	add.w	r8, r8, #1
 80164a0:	f88a 3000 	strb.w	r3, [sl]
 80164a4:	e4ad      	b.n	8015e02 <_dtoa_r+0x49a>
 80164a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80164a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8016504 <_dtoa_r+0xb9c>
 80164ac:	b11b      	cbz	r3, 80164b6 <_dtoa_r+0xb4e>
 80164ae:	f10a 0308 	add.w	r3, sl, #8
 80164b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80164b4:	6013      	str	r3, [r2, #0]
 80164b6:	4650      	mov	r0, sl
 80164b8:	b017      	add	sp, #92	@ 0x5c
 80164ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164be:	9b07      	ldr	r3, [sp, #28]
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	f77f ae2e 	ble.w	8016122 <_dtoa_r+0x7ba>
 80164c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164c8:	9308      	str	r3, [sp, #32]
 80164ca:	2001      	movs	r0, #1
 80164cc:	e64d      	b.n	801616a <_dtoa_r+0x802>
 80164ce:	f1bb 0f00 	cmp.w	fp, #0
 80164d2:	f77f aed9 	ble.w	8016288 <_dtoa_r+0x920>
 80164d6:	4656      	mov	r6, sl
 80164d8:	9802      	ldr	r0, [sp, #8]
 80164da:	4621      	mov	r1, r4
 80164dc:	f7ff f9ba 	bl	8015854 <quorem>
 80164e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80164e4:	f806 3b01 	strb.w	r3, [r6], #1
 80164e8:	eba6 020a 	sub.w	r2, r6, sl
 80164ec:	4593      	cmp	fp, r2
 80164ee:	ddb4      	ble.n	801645a <_dtoa_r+0xaf2>
 80164f0:	9902      	ldr	r1, [sp, #8]
 80164f2:	2300      	movs	r3, #0
 80164f4:	220a      	movs	r2, #10
 80164f6:	4648      	mov	r0, r9
 80164f8:	f000 f9b4 	bl	8016864 <__multadd>
 80164fc:	9002      	str	r0, [sp, #8]
 80164fe:	e7eb      	b.n	80164d8 <_dtoa_r+0xb70>
 8016500:	0801a099 	.word	0x0801a099
 8016504:	0801a034 	.word	0x0801a034

08016508 <_free_r>:
 8016508:	b538      	push	{r3, r4, r5, lr}
 801650a:	4605      	mov	r5, r0
 801650c:	2900      	cmp	r1, #0
 801650e:	d041      	beq.n	8016594 <_free_r+0x8c>
 8016510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016514:	1f0c      	subs	r4, r1, #4
 8016516:	2b00      	cmp	r3, #0
 8016518:	bfb8      	it	lt
 801651a:	18e4      	addlt	r4, r4, r3
 801651c:	f000 f934 	bl	8016788 <__malloc_lock>
 8016520:	4a1d      	ldr	r2, [pc, #116]	@ (8016598 <_free_r+0x90>)
 8016522:	6813      	ldr	r3, [r2, #0]
 8016524:	b933      	cbnz	r3, 8016534 <_free_r+0x2c>
 8016526:	6063      	str	r3, [r4, #4]
 8016528:	6014      	str	r4, [r2, #0]
 801652a:	4628      	mov	r0, r5
 801652c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016530:	f000 b930 	b.w	8016794 <__malloc_unlock>
 8016534:	42a3      	cmp	r3, r4
 8016536:	d908      	bls.n	801654a <_free_r+0x42>
 8016538:	6820      	ldr	r0, [r4, #0]
 801653a:	1821      	adds	r1, r4, r0
 801653c:	428b      	cmp	r3, r1
 801653e:	bf01      	itttt	eq
 8016540:	6819      	ldreq	r1, [r3, #0]
 8016542:	685b      	ldreq	r3, [r3, #4]
 8016544:	1809      	addeq	r1, r1, r0
 8016546:	6021      	streq	r1, [r4, #0]
 8016548:	e7ed      	b.n	8016526 <_free_r+0x1e>
 801654a:	461a      	mov	r2, r3
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	b10b      	cbz	r3, 8016554 <_free_r+0x4c>
 8016550:	42a3      	cmp	r3, r4
 8016552:	d9fa      	bls.n	801654a <_free_r+0x42>
 8016554:	6811      	ldr	r1, [r2, #0]
 8016556:	1850      	adds	r0, r2, r1
 8016558:	42a0      	cmp	r0, r4
 801655a:	d10b      	bne.n	8016574 <_free_r+0x6c>
 801655c:	6820      	ldr	r0, [r4, #0]
 801655e:	4401      	add	r1, r0
 8016560:	1850      	adds	r0, r2, r1
 8016562:	4283      	cmp	r3, r0
 8016564:	6011      	str	r1, [r2, #0]
 8016566:	d1e0      	bne.n	801652a <_free_r+0x22>
 8016568:	6818      	ldr	r0, [r3, #0]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	6053      	str	r3, [r2, #4]
 801656e:	4408      	add	r0, r1
 8016570:	6010      	str	r0, [r2, #0]
 8016572:	e7da      	b.n	801652a <_free_r+0x22>
 8016574:	d902      	bls.n	801657c <_free_r+0x74>
 8016576:	230c      	movs	r3, #12
 8016578:	602b      	str	r3, [r5, #0]
 801657a:	e7d6      	b.n	801652a <_free_r+0x22>
 801657c:	6820      	ldr	r0, [r4, #0]
 801657e:	1821      	adds	r1, r4, r0
 8016580:	428b      	cmp	r3, r1
 8016582:	bf04      	itt	eq
 8016584:	6819      	ldreq	r1, [r3, #0]
 8016586:	685b      	ldreq	r3, [r3, #4]
 8016588:	6063      	str	r3, [r4, #4]
 801658a:	bf04      	itt	eq
 801658c:	1809      	addeq	r1, r1, r0
 801658e:	6021      	streq	r1, [r4, #0]
 8016590:	6054      	str	r4, [r2, #4]
 8016592:	e7ca      	b.n	801652a <_free_r+0x22>
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	bf00      	nop
 8016598:	2000a900 	.word	0x2000a900

0801659c <_findenv_r>:
 801659c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016610 <_findenv_r+0x74>
 80165a4:	4606      	mov	r6, r0
 80165a6:	4689      	mov	r9, r1
 80165a8:	4617      	mov	r7, r2
 80165aa:	f001 f831 	bl	8017610 <__env_lock>
 80165ae:	f8da 4000 	ldr.w	r4, [sl]
 80165b2:	b134      	cbz	r4, 80165c2 <_findenv_r+0x26>
 80165b4:	464b      	mov	r3, r9
 80165b6:	4698      	mov	r8, r3
 80165b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165bc:	b13a      	cbz	r2, 80165ce <_findenv_r+0x32>
 80165be:	2a3d      	cmp	r2, #61	@ 0x3d
 80165c0:	d1f9      	bne.n	80165b6 <_findenv_r+0x1a>
 80165c2:	4630      	mov	r0, r6
 80165c4:	f001 f82a 	bl	801761c <__env_unlock>
 80165c8:	2000      	movs	r0, #0
 80165ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ce:	eba8 0809 	sub.w	r8, r8, r9
 80165d2:	46a3      	mov	fp, r4
 80165d4:	f854 0b04 	ldr.w	r0, [r4], #4
 80165d8:	2800      	cmp	r0, #0
 80165da:	d0f2      	beq.n	80165c2 <_findenv_r+0x26>
 80165dc:	4642      	mov	r2, r8
 80165de:	4649      	mov	r1, r9
 80165e0:	f000 ff2e 	bl	8017440 <strncmp>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d1f4      	bne.n	80165d2 <_findenv_r+0x36>
 80165e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80165ec:	eb03 0508 	add.w	r5, r3, r8
 80165f0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80165f4:	2b3d      	cmp	r3, #61	@ 0x3d
 80165f6:	d1ec      	bne.n	80165d2 <_findenv_r+0x36>
 80165f8:	f8da 3000 	ldr.w	r3, [sl]
 80165fc:	ebab 0303 	sub.w	r3, fp, r3
 8016600:	109b      	asrs	r3, r3, #2
 8016602:	4630      	mov	r0, r6
 8016604:	603b      	str	r3, [r7, #0]
 8016606:	f001 f809 	bl	801761c <__env_unlock>
 801660a:	1c68      	adds	r0, r5, #1
 801660c:	e7dd      	b.n	80165ca <_findenv_r+0x2e>
 801660e:	bf00      	nop
 8016610:	20000014 	.word	0x20000014

08016614 <_getenv_r>:
 8016614:	b507      	push	{r0, r1, r2, lr}
 8016616:	aa01      	add	r2, sp, #4
 8016618:	f7ff ffc0 	bl	801659c <_findenv_r>
 801661c:	b003      	add	sp, #12
 801661e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016624 <malloc>:
 8016624:	4b02      	ldr	r3, [pc, #8]	@ (8016630 <malloc+0xc>)
 8016626:	4601      	mov	r1, r0
 8016628:	6818      	ldr	r0, [r3, #0]
 801662a:	f000 b82d 	b.w	8016688 <_malloc_r>
 801662e:	bf00      	nop
 8016630:	20000038 	.word	0x20000038

08016634 <free>:
 8016634:	4b02      	ldr	r3, [pc, #8]	@ (8016640 <free+0xc>)
 8016636:	4601      	mov	r1, r0
 8016638:	6818      	ldr	r0, [r3, #0]
 801663a:	f7ff bf65 	b.w	8016508 <_free_r>
 801663e:	bf00      	nop
 8016640:	20000038 	.word	0x20000038

08016644 <sbrk_aligned>:
 8016644:	b570      	push	{r4, r5, r6, lr}
 8016646:	4e0f      	ldr	r6, [pc, #60]	@ (8016684 <sbrk_aligned+0x40>)
 8016648:	460c      	mov	r4, r1
 801664a:	6831      	ldr	r1, [r6, #0]
 801664c:	4605      	mov	r5, r0
 801664e:	b911      	cbnz	r1, 8016656 <sbrk_aligned+0x12>
 8016650:	f000 ffb2 	bl	80175b8 <_sbrk_r>
 8016654:	6030      	str	r0, [r6, #0]
 8016656:	4621      	mov	r1, r4
 8016658:	4628      	mov	r0, r5
 801665a:	f000 ffad 	bl	80175b8 <_sbrk_r>
 801665e:	1c43      	adds	r3, r0, #1
 8016660:	d103      	bne.n	801666a <sbrk_aligned+0x26>
 8016662:	f04f 34ff 	mov.w	r4, #4294967295
 8016666:	4620      	mov	r0, r4
 8016668:	bd70      	pop	{r4, r5, r6, pc}
 801666a:	1cc4      	adds	r4, r0, #3
 801666c:	f024 0403 	bic.w	r4, r4, #3
 8016670:	42a0      	cmp	r0, r4
 8016672:	d0f8      	beq.n	8016666 <sbrk_aligned+0x22>
 8016674:	1a21      	subs	r1, r4, r0
 8016676:	4628      	mov	r0, r5
 8016678:	f000 ff9e 	bl	80175b8 <_sbrk_r>
 801667c:	3001      	adds	r0, #1
 801667e:	d1f2      	bne.n	8016666 <sbrk_aligned+0x22>
 8016680:	e7ef      	b.n	8016662 <sbrk_aligned+0x1e>
 8016682:	bf00      	nop
 8016684:	2000a8fc 	.word	0x2000a8fc

08016688 <_malloc_r>:
 8016688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801668c:	1ccd      	adds	r5, r1, #3
 801668e:	f025 0503 	bic.w	r5, r5, #3
 8016692:	3508      	adds	r5, #8
 8016694:	2d0c      	cmp	r5, #12
 8016696:	bf38      	it	cc
 8016698:	250c      	movcc	r5, #12
 801669a:	2d00      	cmp	r5, #0
 801669c:	4606      	mov	r6, r0
 801669e:	db01      	blt.n	80166a4 <_malloc_r+0x1c>
 80166a0:	42a9      	cmp	r1, r5
 80166a2:	d904      	bls.n	80166ae <_malloc_r+0x26>
 80166a4:	230c      	movs	r3, #12
 80166a6:	6033      	str	r3, [r6, #0]
 80166a8:	2000      	movs	r0, #0
 80166aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016784 <_malloc_r+0xfc>
 80166b2:	f000 f869 	bl	8016788 <__malloc_lock>
 80166b6:	f8d8 3000 	ldr.w	r3, [r8]
 80166ba:	461c      	mov	r4, r3
 80166bc:	bb44      	cbnz	r4, 8016710 <_malloc_r+0x88>
 80166be:	4629      	mov	r1, r5
 80166c0:	4630      	mov	r0, r6
 80166c2:	f7ff ffbf 	bl	8016644 <sbrk_aligned>
 80166c6:	1c43      	adds	r3, r0, #1
 80166c8:	4604      	mov	r4, r0
 80166ca:	d158      	bne.n	801677e <_malloc_r+0xf6>
 80166cc:	f8d8 4000 	ldr.w	r4, [r8]
 80166d0:	4627      	mov	r7, r4
 80166d2:	2f00      	cmp	r7, #0
 80166d4:	d143      	bne.n	801675e <_malloc_r+0xd6>
 80166d6:	2c00      	cmp	r4, #0
 80166d8:	d04b      	beq.n	8016772 <_malloc_r+0xea>
 80166da:	6823      	ldr	r3, [r4, #0]
 80166dc:	4639      	mov	r1, r7
 80166de:	4630      	mov	r0, r6
 80166e0:	eb04 0903 	add.w	r9, r4, r3
 80166e4:	f000 ff68 	bl	80175b8 <_sbrk_r>
 80166e8:	4581      	cmp	r9, r0
 80166ea:	d142      	bne.n	8016772 <_malloc_r+0xea>
 80166ec:	6821      	ldr	r1, [r4, #0]
 80166ee:	1a6d      	subs	r5, r5, r1
 80166f0:	4629      	mov	r1, r5
 80166f2:	4630      	mov	r0, r6
 80166f4:	f7ff ffa6 	bl	8016644 <sbrk_aligned>
 80166f8:	3001      	adds	r0, #1
 80166fa:	d03a      	beq.n	8016772 <_malloc_r+0xea>
 80166fc:	6823      	ldr	r3, [r4, #0]
 80166fe:	442b      	add	r3, r5
 8016700:	6023      	str	r3, [r4, #0]
 8016702:	f8d8 3000 	ldr.w	r3, [r8]
 8016706:	685a      	ldr	r2, [r3, #4]
 8016708:	bb62      	cbnz	r2, 8016764 <_malloc_r+0xdc>
 801670a:	f8c8 7000 	str.w	r7, [r8]
 801670e:	e00f      	b.n	8016730 <_malloc_r+0xa8>
 8016710:	6822      	ldr	r2, [r4, #0]
 8016712:	1b52      	subs	r2, r2, r5
 8016714:	d420      	bmi.n	8016758 <_malloc_r+0xd0>
 8016716:	2a0b      	cmp	r2, #11
 8016718:	d917      	bls.n	801674a <_malloc_r+0xc2>
 801671a:	1961      	adds	r1, r4, r5
 801671c:	42a3      	cmp	r3, r4
 801671e:	6025      	str	r5, [r4, #0]
 8016720:	bf18      	it	ne
 8016722:	6059      	strne	r1, [r3, #4]
 8016724:	6863      	ldr	r3, [r4, #4]
 8016726:	bf08      	it	eq
 8016728:	f8c8 1000 	streq.w	r1, [r8]
 801672c:	5162      	str	r2, [r4, r5]
 801672e:	604b      	str	r3, [r1, #4]
 8016730:	4630      	mov	r0, r6
 8016732:	f000 f82f 	bl	8016794 <__malloc_unlock>
 8016736:	f104 000b 	add.w	r0, r4, #11
 801673a:	1d23      	adds	r3, r4, #4
 801673c:	f020 0007 	bic.w	r0, r0, #7
 8016740:	1ac2      	subs	r2, r0, r3
 8016742:	bf1c      	itt	ne
 8016744:	1a1b      	subne	r3, r3, r0
 8016746:	50a3      	strne	r3, [r4, r2]
 8016748:	e7af      	b.n	80166aa <_malloc_r+0x22>
 801674a:	6862      	ldr	r2, [r4, #4]
 801674c:	42a3      	cmp	r3, r4
 801674e:	bf0c      	ite	eq
 8016750:	f8c8 2000 	streq.w	r2, [r8]
 8016754:	605a      	strne	r2, [r3, #4]
 8016756:	e7eb      	b.n	8016730 <_malloc_r+0xa8>
 8016758:	4623      	mov	r3, r4
 801675a:	6864      	ldr	r4, [r4, #4]
 801675c:	e7ae      	b.n	80166bc <_malloc_r+0x34>
 801675e:	463c      	mov	r4, r7
 8016760:	687f      	ldr	r7, [r7, #4]
 8016762:	e7b6      	b.n	80166d2 <_malloc_r+0x4a>
 8016764:	461a      	mov	r2, r3
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	42a3      	cmp	r3, r4
 801676a:	d1fb      	bne.n	8016764 <_malloc_r+0xdc>
 801676c:	2300      	movs	r3, #0
 801676e:	6053      	str	r3, [r2, #4]
 8016770:	e7de      	b.n	8016730 <_malloc_r+0xa8>
 8016772:	230c      	movs	r3, #12
 8016774:	6033      	str	r3, [r6, #0]
 8016776:	4630      	mov	r0, r6
 8016778:	f000 f80c 	bl	8016794 <__malloc_unlock>
 801677c:	e794      	b.n	80166a8 <_malloc_r+0x20>
 801677e:	6005      	str	r5, [r0, #0]
 8016780:	e7d6      	b.n	8016730 <_malloc_r+0xa8>
 8016782:	bf00      	nop
 8016784:	2000a900 	.word	0x2000a900

08016788 <__malloc_lock>:
 8016788:	4801      	ldr	r0, [pc, #4]	@ (8016790 <__malloc_lock+0x8>)
 801678a:	f7ff b823 	b.w	80157d4 <__retarget_lock_acquire_recursive>
 801678e:	bf00      	nop
 8016790:	2000a8fa 	.word	0x2000a8fa

08016794 <__malloc_unlock>:
 8016794:	4801      	ldr	r0, [pc, #4]	@ (801679c <__malloc_unlock+0x8>)
 8016796:	f7ff b81f 	b.w	80157d8 <__retarget_lock_release_recursive>
 801679a:	bf00      	nop
 801679c:	2000a8fa 	.word	0x2000a8fa

080167a0 <_Balloc>:
 80167a0:	b570      	push	{r4, r5, r6, lr}
 80167a2:	69c6      	ldr	r6, [r0, #28]
 80167a4:	4604      	mov	r4, r0
 80167a6:	460d      	mov	r5, r1
 80167a8:	b976      	cbnz	r6, 80167c8 <_Balloc+0x28>
 80167aa:	2010      	movs	r0, #16
 80167ac:	f7ff ff3a 	bl	8016624 <malloc>
 80167b0:	4602      	mov	r2, r0
 80167b2:	61e0      	str	r0, [r4, #28]
 80167b4:	b920      	cbnz	r0, 80167c0 <_Balloc+0x20>
 80167b6:	4b18      	ldr	r3, [pc, #96]	@ (8016818 <_Balloc+0x78>)
 80167b8:	4818      	ldr	r0, [pc, #96]	@ (801681c <_Balloc+0x7c>)
 80167ba:	216b      	movs	r1, #107	@ 0x6b
 80167bc:	f7ff f824 	bl	8015808 <__assert_func>
 80167c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167c4:	6006      	str	r6, [r0, #0]
 80167c6:	60c6      	str	r6, [r0, #12]
 80167c8:	69e6      	ldr	r6, [r4, #28]
 80167ca:	68f3      	ldr	r3, [r6, #12]
 80167cc:	b183      	cbz	r3, 80167f0 <_Balloc+0x50>
 80167ce:	69e3      	ldr	r3, [r4, #28]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80167d6:	b9b8      	cbnz	r0, 8016808 <_Balloc+0x68>
 80167d8:	2101      	movs	r1, #1
 80167da:	fa01 f605 	lsl.w	r6, r1, r5
 80167de:	1d72      	adds	r2, r6, #5
 80167e0:	0092      	lsls	r2, r2, #2
 80167e2:	4620      	mov	r0, r4
 80167e4:	f000 feff 	bl	80175e6 <_calloc_r>
 80167e8:	b160      	cbz	r0, 8016804 <_Balloc+0x64>
 80167ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80167ee:	e00e      	b.n	801680e <_Balloc+0x6e>
 80167f0:	2221      	movs	r2, #33	@ 0x21
 80167f2:	2104      	movs	r1, #4
 80167f4:	4620      	mov	r0, r4
 80167f6:	f000 fef6 	bl	80175e6 <_calloc_r>
 80167fa:	69e3      	ldr	r3, [r4, #28]
 80167fc:	60f0      	str	r0, [r6, #12]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1e4      	bne.n	80167ce <_Balloc+0x2e>
 8016804:	2000      	movs	r0, #0
 8016806:	bd70      	pop	{r4, r5, r6, pc}
 8016808:	6802      	ldr	r2, [r0, #0]
 801680a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801680e:	2300      	movs	r3, #0
 8016810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016814:	e7f7      	b.n	8016806 <_Balloc+0x66>
 8016816:	bf00      	nop
 8016818:	08019eb0 	.word	0x08019eb0
 801681c:	0801a0aa 	.word	0x0801a0aa

08016820 <_Bfree>:
 8016820:	b570      	push	{r4, r5, r6, lr}
 8016822:	69c6      	ldr	r6, [r0, #28]
 8016824:	4605      	mov	r5, r0
 8016826:	460c      	mov	r4, r1
 8016828:	b976      	cbnz	r6, 8016848 <_Bfree+0x28>
 801682a:	2010      	movs	r0, #16
 801682c:	f7ff fefa 	bl	8016624 <malloc>
 8016830:	4602      	mov	r2, r0
 8016832:	61e8      	str	r0, [r5, #28]
 8016834:	b920      	cbnz	r0, 8016840 <_Bfree+0x20>
 8016836:	4b09      	ldr	r3, [pc, #36]	@ (801685c <_Bfree+0x3c>)
 8016838:	4809      	ldr	r0, [pc, #36]	@ (8016860 <_Bfree+0x40>)
 801683a:	218f      	movs	r1, #143	@ 0x8f
 801683c:	f7fe ffe4 	bl	8015808 <__assert_func>
 8016840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016844:	6006      	str	r6, [r0, #0]
 8016846:	60c6      	str	r6, [r0, #12]
 8016848:	b13c      	cbz	r4, 801685a <_Bfree+0x3a>
 801684a:	69eb      	ldr	r3, [r5, #28]
 801684c:	6862      	ldr	r2, [r4, #4]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016854:	6021      	str	r1, [r4, #0]
 8016856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801685a:	bd70      	pop	{r4, r5, r6, pc}
 801685c:	08019eb0 	.word	0x08019eb0
 8016860:	0801a0aa 	.word	0x0801a0aa

08016864 <__multadd>:
 8016864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016868:	690d      	ldr	r5, [r1, #16]
 801686a:	4607      	mov	r7, r0
 801686c:	460c      	mov	r4, r1
 801686e:	461e      	mov	r6, r3
 8016870:	f101 0c14 	add.w	ip, r1, #20
 8016874:	2000      	movs	r0, #0
 8016876:	f8dc 3000 	ldr.w	r3, [ip]
 801687a:	b299      	uxth	r1, r3
 801687c:	fb02 6101 	mla	r1, r2, r1, r6
 8016880:	0c1e      	lsrs	r6, r3, #16
 8016882:	0c0b      	lsrs	r3, r1, #16
 8016884:	fb02 3306 	mla	r3, r2, r6, r3
 8016888:	b289      	uxth	r1, r1
 801688a:	3001      	adds	r0, #1
 801688c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016890:	4285      	cmp	r5, r0
 8016892:	f84c 1b04 	str.w	r1, [ip], #4
 8016896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801689a:	dcec      	bgt.n	8016876 <__multadd+0x12>
 801689c:	b30e      	cbz	r6, 80168e2 <__multadd+0x7e>
 801689e:	68a3      	ldr	r3, [r4, #8]
 80168a0:	42ab      	cmp	r3, r5
 80168a2:	dc19      	bgt.n	80168d8 <__multadd+0x74>
 80168a4:	6861      	ldr	r1, [r4, #4]
 80168a6:	4638      	mov	r0, r7
 80168a8:	3101      	adds	r1, #1
 80168aa:	f7ff ff79 	bl	80167a0 <_Balloc>
 80168ae:	4680      	mov	r8, r0
 80168b0:	b928      	cbnz	r0, 80168be <__multadd+0x5a>
 80168b2:	4602      	mov	r2, r0
 80168b4:	4b0c      	ldr	r3, [pc, #48]	@ (80168e8 <__multadd+0x84>)
 80168b6:	480d      	ldr	r0, [pc, #52]	@ (80168ec <__multadd+0x88>)
 80168b8:	21ba      	movs	r1, #186	@ 0xba
 80168ba:	f7fe ffa5 	bl	8015808 <__assert_func>
 80168be:	6922      	ldr	r2, [r4, #16]
 80168c0:	3202      	adds	r2, #2
 80168c2:	f104 010c 	add.w	r1, r4, #12
 80168c6:	0092      	lsls	r2, r2, #2
 80168c8:	300c      	adds	r0, #12
 80168ca:	f7fe ff8e 	bl	80157ea <memcpy>
 80168ce:	4621      	mov	r1, r4
 80168d0:	4638      	mov	r0, r7
 80168d2:	f7ff ffa5 	bl	8016820 <_Bfree>
 80168d6:	4644      	mov	r4, r8
 80168d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80168dc:	3501      	adds	r5, #1
 80168de:	615e      	str	r6, [r3, #20]
 80168e0:	6125      	str	r5, [r4, #16]
 80168e2:	4620      	mov	r0, r4
 80168e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168e8:	0801a099 	.word	0x0801a099
 80168ec:	0801a0aa 	.word	0x0801a0aa

080168f0 <__hi0bits>:
 80168f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80168f4:	4603      	mov	r3, r0
 80168f6:	bf36      	itet	cc
 80168f8:	0403      	lslcc	r3, r0, #16
 80168fa:	2000      	movcs	r0, #0
 80168fc:	2010      	movcc	r0, #16
 80168fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016902:	bf3c      	itt	cc
 8016904:	021b      	lslcc	r3, r3, #8
 8016906:	3008      	addcc	r0, #8
 8016908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801690c:	bf3c      	itt	cc
 801690e:	011b      	lslcc	r3, r3, #4
 8016910:	3004      	addcc	r0, #4
 8016912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016916:	bf3c      	itt	cc
 8016918:	009b      	lslcc	r3, r3, #2
 801691a:	3002      	addcc	r0, #2
 801691c:	2b00      	cmp	r3, #0
 801691e:	db05      	blt.n	801692c <__hi0bits+0x3c>
 8016920:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016924:	f100 0001 	add.w	r0, r0, #1
 8016928:	bf08      	it	eq
 801692a:	2020      	moveq	r0, #32
 801692c:	4770      	bx	lr

0801692e <__lo0bits>:
 801692e:	6803      	ldr	r3, [r0, #0]
 8016930:	4602      	mov	r2, r0
 8016932:	f013 0007 	ands.w	r0, r3, #7
 8016936:	d00b      	beq.n	8016950 <__lo0bits+0x22>
 8016938:	07d9      	lsls	r1, r3, #31
 801693a:	d421      	bmi.n	8016980 <__lo0bits+0x52>
 801693c:	0798      	lsls	r0, r3, #30
 801693e:	bf49      	itett	mi
 8016940:	085b      	lsrmi	r3, r3, #1
 8016942:	089b      	lsrpl	r3, r3, #2
 8016944:	2001      	movmi	r0, #1
 8016946:	6013      	strmi	r3, [r2, #0]
 8016948:	bf5c      	itt	pl
 801694a:	6013      	strpl	r3, [r2, #0]
 801694c:	2002      	movpl	r0, #2
 801694e:	4770      	bx	lr
 8016950:	b299      	uxth	r1, r3
 8016952:	b909      	cbnz	r1, 8016958 <__lo0bits+0x2a>
 8016954:	0c1b      	lsrs	r3, r3, #16
 8016956:	2010      	movs	r0, #16
 8016958:	b2d9      	uxtb	r1, r3
 801695a:	b909      	cbnz	r1, 8016960 <__lo0bits+0x32>
 801695c:	3008      	adds	r0, #8
 801695e:	0a1b      	lsrs	r3, r3, #8
 8016960:	0719      	lsls	r1, r3, #28
 8016962:	bf04      	itt	eq
 8016964:	091b      	lsreq	r3, r3, #4
 8016966:	3004      	addeq	r0, #4
 8016968:	0799      	lsls	r1, r3, #30
 801696a:	bf04      	itt	eq
 801696c:	089b      	lsreq	r3, r3, #2
 801696e:	3002      	addeq	r0, #2
 8016970:	07d9      	lsls	r1, r3, #31
 8016972:	d403      	bmi.n	801697c <__lo0bits+0x4e>
 8016974:	085b      	lsrs	r3, r3, #1
 8016976:	f100 0001 	add.w	r0, r0, #1
 801697a:	d003      	beq.n	8016984 <__lo0bits+0x56>
 801697c:	6013      	str	r3, [r2, #0]
 801697e:	4770      	bx	lr
 8016980:	2000      	movs	r0, #0
 8016982:	4770      	bx	lr
 8016984:	2020      	movs	r0, #32
 8016986:	4770      	bx	lr

08016988 <__i2b>:
 8016988:	b510      	push	{r4, lr}
 801698a:	460c      	mov	r4, r1
 801698c:	2101      	movs	r1, #1
 801698e:	f7ff ff07 	bl	80167a0 <_Balloc>
 8016992:	4602      	mov	r2, r0
 8016994:	b928      	cbnz	r0, 80169a2 <__i2b+0x1a>
 8016996:	4b05      	ldr	r3, [pc, #20]	@ (80169ac <__i2b+0x24>)
 8016998:	4805      	ldr	r0, [pc, #20]	@ (80169b0 <__i2b+0x28>)
 801699a:	f240 1145 	movw	r1, #325	@ 0x145
 801699e:	f7fe ff33 	bl	8015808 <__assert_func>
 80169a2:	2301      	movs	r3, #1
 80169a4:	6144      	str	r4, [r0, #20]
 80169a6:	6103      	str	r3, [r0, #16]
 80169a8:	bd10      	pop	{r4, pc}
 80169aa:	bf00      	nop
 80169ac:	0801a099 	.word	0x0801a099
 80169b0:	0801a0aa 	.word	0x0801a0aa

080169b4 <__multiply>:
 80169b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b8:	4617      	mov	r7, r2
 80169ba:	690a      	ldr	r2, [r1, #16]
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	429a      	cmp	r2, r3
 80169c0:	bfa8      	it	ge
 80169c2:	463b      	movge	r3, r7
 80169c4:	4689      	mov	r9, r1
 80169c6:	bfa4      	itt	ge
 80169c8:	460f      	movge	r7, r1
 80169ca:	4699      	movge	r9, r3
 80169cc:	693d      	ldr	r5, [r7, #16]
 80169ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	6879      	ldr	r1, [r7, #4]
 80169d6:	eb05 060a 	add.w	r6, r5, sl
 80169da:	42b3      	cmp	r3, r6
 80169dc:	b085      	sub	sp, #20
 80169de:	bfb8      	it	lt
 80169e0:	3101      	addlt	r1, #1
 80169e2:	f7ff fedd 	bl	80167a0 <_Balloc>
 80169e6:	b930      	cbnz	r0, 80169f6 <__multiply+0x42>
 80169e8:	4602      	mov	r2, r0
 80169ea:	4b41      	ldr	r3, [pc, #260]	@ (8016af0 <__multiply+0x13c>)
 80169ec:	4841      	ldr	r0, [pc, #260]	@ (8016af4 <__multiply+0x140>)
 80169ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80169f2:	f7fe ff09 	bl	8015808 <__assert_func>
 80169f6:	f100 0414 	add.w	r4, r0, #20
 80169fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80169fe:	4623      	mov	r3, r4
 8016a00:	2200      	movs	r2, #0
 8016a02:	4573      	cmp	r3, lr
 8016a04:	d320      	bcc.n	8016a48 <__multiply+0x94>
 8016a06:	f107 0814 	add.w	r8, r7, #20
 8016a0a:	f109 0114 	add.w	r1, r9, #20
 8016a0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016a12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016a16:	9302      	str	r3, [sp, #8]
 8016a18:	1beb      	subs	r3, r5, r7
 8016a1a:	3b15      	subs	r3, #21
 8016a1c:	f023 0303 	bic.w	r3, r3, #3
 8016a20:	3304      	adds	r3, #4
 8016a22:	3715      	adds	r7, #21
 8016a24:	42bd      	cmp	r5, r7
 8016a26:	bf38      	it	cc
 8016a28:	2304      	movcc	r3, #4
 8016a2a:	9301      	str	r3, [sp, #4]
 8016a2c:	9b02      	ldr	r3, [sp, #8]
 8016a2e:	9103      	str	r1, [sp, #12]
 8016a30:	428b      	cmp	r3, r1
 8016a32:	d80c      	bhi.n	8016a4e <__multiply+0x9a>
 8016a34:	2e00      	cmp	r6, #0
 8016a36:	dd03      	ble.n	8016a40 <__multiply+0x8c>
 8016a38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d055      	beq.n	8016aec <__multiply+0x138>
 8016a40:	6106      	str	r6, [r0, #16]
 8016a42:	b005      	add	sp, #20
 8016a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a48:	f843 2b04 	str.w	r2, [r3], #4
 8016a4c:	e7d9      	b.n	8016a02 <__multiply+0x4e>
 8016a4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016a52:	f1ba 0f00 	cmp.w	sl, #0
 8016a56:	d01f      	beq.n	8016a98 <__multiply+0xe4>
 8016a58:	46c4      	mov	ip, r8
 8016a5a:	46a1      	mov	r9, r4
 8016a5c:	2700      	movs	r7, #0
 8016a5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a62:	f8d9 3000 	ldr.w	r3, [r9]
 8016a66:	fa1f fb82 	uxth.w	fp, r2
 8016a6a:	b29b      	uxth	r3, r3
 8016a6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016a70:	443b      	add	r3, r7
 8016a72:	f8d9 7000 	ldr.w	r7, [r9]
 8016a76:	0c12      	lsrs	r2, r2, #16
 8016a78:	0c3f      	lsrs	r7, r7, #16
 8016a7a:	fb0a 7202 	mla	r2, sl, r2, r7
 8016a7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a88:	4565      	cmp	r5, ip
 8016a8a:	f849 3b04 	str.w	r3, [r9], #4
 8016a8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016a92:	d8e4      	bhi.n	8016a5e <__multiply+0xaa>
 8016a94:	9b01      	ldr	r3, [sp, #4]
 8016a96:	50e7      	str	r7, [r4, r3]
 8016a98:	9b03      	ldr	r3, [sp, #12]
 8016a9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016a9e:	3104      	adds	r1, #4
 8016aa0:	f1b9 0f00 	cmp.w	r9, #0
 8016aa4:	d020      	beq.n	8016ae8 <__multiply+0x134>
 8016aa6:	6823      	ldr	r3, [r4, #0]
 8016aa8:	4647      	mov	r7, r8
 8016aaa:	46a4      	mov	ip, r4
 8016aac:	f04f 0a00 	mov.w	sl, #0
 8016ab0:	f8b7 b000 	ldrh.w	fp, [r7]
 8016ab4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016ab8:	fb09 220b 	mla	r2, r9, fp, r2
 8016abc:	4452      	add	r2, sl
 8016abe:	b29b      	uxth	r3, r3
 8016ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ac4:	f84c 3b04 	str.w	r3, [ip], #4
 8016ac8:	f857 3b04 	ldr.w	r3, [r7], #4
 8016acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016ad0:	f8bc 3000 	ldrh.w	r3, [ip]
 8016ad4:	fb09 330a 	mla	r3, r9, sl, r3
 8016ad8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016adc:	42bd      	cmp	r5, r7
 8016ade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016ae2:	d8e5      	bhi.n	8016ab0 <__multiply+0xfc>
 8016ae4:	9a01      	ldr	r2, [sp, #4]
 8016ae6:	50a3      	str	r3, [r4, r2]
 8016ae8:	3404      	adds	r4, #4
 8016aea:	e79f      	b.n	8016a2c <__multiply+0x78>
 8016aec:	3e01      	subs	r6, #1
 8016aee:	e7a1      	b.n	8016a34 <__multiply+0x80>
 8016af0:	0801a099 	.word	0x0801a099
 8016af4:	0801a0aa 	.word	0x0801a0aa

08016af8 <__pow5mult>:
 8016af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016afc:	4615      	mov	r5, r2
 8016afe:	f012 0203 	ands.w	r2, r2, #3
 8016b02:	4607      	mov	r7, r0
 8016b04:	460e      	mov	r6, r1
 8016b06:	d007      	beq.n	8016b18 <__pow5mult+0x20>
 8016b08:	4c25      	ldr	r4, [pc, #148]	@ (8016ba0 <__pow5mult+0xa8>)
 8016b0a:	3a01      	subs	r2, #1
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b12:	f7ff fea7 	bl	8016864 <__multadd>
 8016b16:	4606      	mov	r6, r0
 8016b18:	10ad      	asrs	r5, r5, #2
 8016b1a:	d03d      	beq.n	8016b98 <__pow5mult+0xa0>
 8016b1c:	69fc      	ldr	r4, [r7, #28]
 8016b1e:	b97c      	cbnz	r4, 8016b40 <__pow5mult+0x48>
 8016b20:	2010      	movs	r0, #16
 8016b22:	f7ff fd7f 	bl	8016624 <malloc>
 8016b26:	4602      	mov	r2, r0
 8016b28:	61f8      	str	r0, [r7, #28]
 8016b2a:	b928      	cbnz	r0, 8016b38 <__pow5mult+0x40>
 8016b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8016ba4 <__pow5mult+0xac>)
 8016b2e:	481e      	ldr	r0, [pc, #120]	@ (8016ba8 <__pow5mult+0xb0>)
 8016b30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016b34:	f7fe fe68 	bl	8015808 <__assert_func>
 8016b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b3c:	6004      	str	r4, [r0, #0]
 8016b3e:	60c4      	str	r4, [r0, #12]
 8016b40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b48:	b94c      	cbnz	r4, 8016b5e <__pow5mult+0x66>
 8016b4a:	f240 2171 	movw	r1, #625	@ 0x271
 8016b4e:	4638      	mov	r0, r7
 8016b50:	f7ff ff1a 	bl	8016988 <__i2b>
 8016b54:	2300      	movs	r3, #0
 8016b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	6003      	str	r3, [r0, #0]
 8016b5e:	f04f 0900 	mov.w	r9, #0
 8016b62:	07eb      	lsls	r3, r5, #31
 8016b64:	d50a      	bpl.n	8016b7c <__pow5mult+0x84>
 8016b66:	4631      	mov	r1, r6
 8016b68:	4622      	mov	r2, r4
 8016b6a:	4638      	mov	r0, r7
 8016b6c:	f7ff ff22 	bl	80169b4 <__multiply>
 8016b70:	4631      	mov	r1, r6
 8016b72:	4680      	mov	r8, r0
 8016b74:	4638      	mov	r0, r7
 8016b76:	f7ff fe53 	bl	8016820 <_Bfree>
 8016b7a:	4646      	mov	r6, r8
 8016b7c:	106d      	asrs	r5, r5, #1
 8016b7e:	d00b      	beq.n	8016b98 <__pow5mult+0xa0>
 8016b80:	6820      	ldr	r0, [r4, #0]
 8016b82:	b938      	cbnz	r0, 8016b94 <__pow5mult+0x9c>
 8016b84:	4622      	mov	r2, r4
 8016b86:	4621      	mov	r1, r4
 8016b88:	4638      	mov	r0, r7
 8016b8a:	f7ff ff13 	bl	80169b4 <__multiply>
 8016b8e:	6020      	str	r0, [r4, #0]
 8016b90:	f8c0 9000 	str.w	r9, [r0]
 8016b94:	4604      	mov	r4, r0
 8016b96:	e7e4      	b.n	8016b62 <__pow5mult+0x6a>
 8016b98:	4630      	mov	r0, r6
 8016b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b9e:	bf00      	nop
 8016ba0:	0801a1fc 	.word	0x0801a1fc
 8016ba4:	08019eb0 	.word	0x08019eb0
 8016ba8:	0801a0aa 	.word	0x0801a0aa

08016bac <__lshift>:
 8016bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bb0:	460c      	mov	r4, r1
 8016bb2:	6849      	ldr	r1, [r1, #4]
 8016bb4:	6923      	ldr	r3, [r4, #16]
 8016bb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016bba:	68a3      	ldr	r3, [r4, #8]
 8016bbc:	4607      	mov	r7, r0
 8016bbe:	4691      	mov	r9, r2
 8016bc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016bc4:	f108 0601 	add.w	r6, r8, #1
 8016bc8:	42b3      	cmp	r3, r6
 8016bca:	db0b      	blt.n	8016be4 <__lshift+0x38>
 8016bcc:	4638      	mov	r0, r7
 8016bce:	f7ff fde7 	bl	80167a0 <_Balloc>
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	b948      	cbnz	r0, 8016bea <__lshift+0x3e>
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	4b28      	ldr	r3, [pc, #160]	@ (8016c7c <__lshift+0xd0>)
 8016bda:	4829      	ldr	r0, [pc, #164]	@ (8016c80 <__lshift+0xd4>)
 8016bdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016be0:	f7fe fe12 	bl	8015808 <__assert_func>
 8016be4:	3101      	adds	r1, #1
 8016be6:	005b      	lsls	r3, r3, #1
 8016be8:	e7ee      	b.n	8016bc8 <__lshift+0x1c>
 8016bea:	2300      	movs	r3, #0
 8016bec:	f100 0114 	add.w	r1, r0, #20
 8016bf0:	f100 0210 	add.w	r2, r0, #16
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	4553      	cmp	r3, sl
 8016bf8:	db33      	blt.n	8016c62 <__lshift+0xb6>
 8016bfa:	6920      	ldr	r0, [r4, #16]
 8016bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c00:	f104 0314 	add.w	r3, r4, #20
 8016c04:	f019 091f 	ands.w	r9, r9, #31
 8016c08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c10:	d02b      	beq.n	8016c6a <__lshift+0xbe>
 8016c12:	f1c9 0e20 	rsb	lr, r9, #32
 8016c16:	468a      	mov	sl, r1
 8016c18:	2200      	movs	r2, #0
 8016c1a:	6818      	ldr	r0, [r3, #0]
 8016c1c:	fa00 f009 	lsl.w	r0, r0, r9
 8016c20:	4310      	orrs	r0, r2
 8016c22:	f84a 0b04 	str.w	r0, [sl], #4
 8016c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c2a:	459c      	cmp	ip, r3
 8016c2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c30:	d8f3      	bhi.n	8016c1a <__lshift+0x6e>
 8016c32:	ebac 0304 	sub.w	r3, ip, r4
 8016c36:	3b15      	subs	r3, #21
 8016c38:	f023 0303 	bic.w	r3, r3, #3
 8016c3c:	3304      	adds	r3, #4
 8016c3e:	f104 0015 	add.w	r0, r4, #21
 8016c42:	4560      	cmp	r0, ip
 8016c44:	bf88      	it	hi
 8016c46:	2304      	movhi	r3, #4
 8016c48:	50ca      	str	r2, [r1, r3]
 8016c4a:	b10a      	cbz	r2, 8016c50 <__lshift+0xa4>
 8016c4c:	f108 0602 	add.w	r6, r8, #2
 8016c50:	3e01      	subs	r6, #1
 8016c52:	4638      	mov	r0, r7
 8016c54:	612e      	str	r6, [r5, #16]
 8016c56:	4621      	mov	r1, r4
 8016c58:	f7ff fde2 	bl	8016820 <_Bfree>
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c62:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c66:	3301      	adds	r3, #1
 8016c68:	e7c5      	b.n	8016bf6 <__lshift+0x4a>
 8016c6a:	3904      	subs	r1, #4
 8016c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c70:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c74:	459c      	cmp	ip, r3
 8016c76:	d8f9      	bhi.n	8016c6c <__lshift+0xc0>
 8016c78:	e7ea      	b.n	8016c50 <__lshift+0xa4>
 8016c7a:	bf00      	nop
 8016c7c:	0801a099 	.word	0x0801a099
 8016c80:	0801a0aa 	.word	0x0801a0aa

08016c84 <__mcmp>:
 8016c84:	690a      	ldr	r2, [r1, #16]
 8016c86:	4603      	mov	r3, r0
 8016c88:	6900      	ldr	r0, [r0, #16]
 8016c8a:	1a80      	subs	r0, r0, r2
 8016c8c:	b530      	push	{r4, r5, lr}
 8016c8e:	d10e      	bne.n	8016cae <__mcmp+0x2a>
 8016c90:	3314      	adds	r3, #20
 8016c92:	3114      	adds	r1, #20
 8016c94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016c98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016c9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016ca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016ca4:	4295      	cmp	r5, r2
 8016ca6:	d003      	beq.n	8016cb0 <__mcmp+0x2c>
 8016ca8:	d205      	bcs.n	8016cb6 <__mcmp+0x32>
 8016caa:	f04f 30ff 	mov.w	r0, #4294967295
 8016cae:	bd30      	pop	{r4, r5, pc}
 8016cb0:	42a3      	cmp	r3, r4
 8016cb2:	d3f3      	bcc.n	8016c9c <__mcmp+0x18>
 8016cb4:	e7fb      	b.n	8016cae <__mcmp+0x2a>
 8016cb6:	2001      	movs	r0, #1
 8016cb8:	e7f9      	b.n	8016cae <__mcmp+0x2a>
	...

08016cbc <__mdiff>:
 8016cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc0:	4689      	mov	r9, r1
 8016cc2:	4606      	mov	r6, r0
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	4648      	mov	r0, r9
 8016cc8:	4614      	mov	r4, r2
 8016cca:	f7ff ffdb 	bl	8016c84 <__mcmp>
 8016cce:	1e05      	subs	r5, r0, #0
 8016cd0:	d112      	bne.n	8016cf8 <__mdiff+0x3c>
 8016cd2:	4629      	mov	r1, r5
 8016cd4:	4630      	mov	r0, r6
 8016cd6:	f7ff fd63 	bl	80167a0 <_Balloc>
 8016cda:	4602      	mov	r2, r0
 8016cdc:	b928      	cbnz	r0, 8016cea <__mdiff+0x2e>
 8016cde:	4b3f      	ldr	r3, [pc, #252]	@ (8016ddc <__mdiff+0x120>)
 8016ce0:	f240 2137 	movw	r1, #567	@ 0x237
 8016ce4:	483e      	ldr	r0, [pc, #248]	@ (8016de0 <__mdiff+0x124>)
 8016ce6:	f7fe fd8f 	bl	8015808 <__assert_func>
 8016cea:	2301      	movs	r3, #1
 8016cec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016cf0:	4610      	mov	r0, r2
 8016cf2:	b003      	add	sp, #12
 8016cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf8:	bfbc      	itt	lt
 8016cfa:	464b      	movlt	r3, r9
 8016cfc:	46a1      	movlt	r9, r4
 8016cfe:	4630      	mov	r0, r6
 8016d00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016d04:	bfba      	itte	lt
 8016d06:	461c      	movlt	r4, r3
 8016d08:	2501      	movlt	r5, #1
 8016d0a:	2500      	movge	r5, #0
 8016d0c:	f7ff fd48 	bl	80167a0 <_Balloc>
 8016d10:	4602      	mov	r2, r0
 8016d12:	b918      	cbnz	r0, 8016d1c <__mdiff+0x60>
 8016d14:	4b31      	ldr	r3, [pc, #196]	@ (8016ddc <__mdiff+0x120>)
 8016d16:	f240 2145 	movw	r1, #581	@ 0x245
 8016d1a:	e7e3      	b.n	8016ce4 <__mdiff+0x28>
 8016d1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016d20:	6926      	ldr	r6, [r4, #16]
 8016d22:	60c5      	str	r5, [r0, #12]
 8016d24:	f109 0310 	add.w	r3, r9, #16
 8016d28:	f109 0514 	add.w	r5, r9, #20
 8016d2c:	f104 0e14 	add.w	lr, r4, #20
 8016d30:	f100 0b14 	add.w	fp, r0, #20
 8016d34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016d38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016d3c:	9301      	str	r3, [sp, #4]
 8016d3e:	46d9      	mov	r9, fp
 8016d40:	f04f 0c00 	mov.w	ip, #0
 8016d44:	9b01      	ldr	r3, [sp, #4]
 8016d46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016d4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016d4e:	9301      	str	r3, [sp, #4]
 8016d50:	fa1f f38a 	uxth.w	r3, sl
 8016d54:	4619      	mov	r1, r3
 8016d56:	b283      	uxth	r3, r0
 8016d58:	1acb      	subs	r3, r1, r3
 8016d5a:	0c00      	lsrs	r0, r0, #16
 8016d5c:	4463      	add	r3, ip
 8016d5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016d62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016d6c:	4576      	cmp	r6, lr
 8016d6e:	f849 3b04 	str.w	r3, [r9], #4
 8016d72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016d76:	d8e5      	bhi.n	8016d44 <__mdiff+0x88>
 8016d78:	1b33      	subs	r3, r6, r4
 8016d7a:	3b15      	subs	r3, #21
 8016d7c:	f023 0303 	bic.w	r3, r3, #3
 8016d80:	3415      	adds	r4, #21
 8016d82:	3304      	adds	r3, #4
 8016d84:	42a6      	cmp	r6, r4
 8016d86:	bf38      	it	cc
 8016d88:	2304      	movcc	r3, #4
 8016d8a:	441d      	add	r5, r3
 8016d8c:	445b      	add	r3, fp
 8016d8e:	461e      	mov	r6, r3
 8016d90:	462c      	mov	r4, r5
 8016d92:	4544      	cmp	r4, r8
 8016d94:	d30e      	bcc.n	8016db4 <__mdiff+0xf8>
 8016d96:	f108 0103 	add.w	r1, r8, #3
 8016d9a:	1b49      	subs	r1, r1, r5
 8016d9c:	f021 0103 	bic.w	r1, r1, #3
 8016da0:	3d03      	subs	r5, #3
 8016da2:	45a8      	cmp	r8, r5
 8016da4:	bf38      	it	cc
 8016da6:	2100      	movcc	r1, #0
 8016da8:	440b      	add	r3, r1
 8016daa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dae:	b191      	cbz	r1, 8016dd6 <__mdiff+0x11a>
 8016db0:	6117      	str	r7, [r2, #16]
 8016db2:	e79d      	b.n	8016cf0 <__mdiff+0x34>
 8016db4:	f854 1b04 	ldr.w	r1, [r4], #4
 8016db8:	46e6      	mov	lr, ip
 8016dba:	0c08      	lsrs	r0, r1, #16
 8016dbc:	fa1c fc81 	uxtah	ip, ip, r1
 8016dc0:	4471      	add	r1, lr
 8016dc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016dc6:	b289      	uxth	r1, r1
 8016dc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016dcc:	f846 1b04 	str.w	r1, [r6], #4
 8016dd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016dd4:	e7dd      	b.n	8016d92 <__mdiff+0xd6>
 8016dd6:	3f01      	subs	r7, #1
 8016dd8:	e7e7      	b.n	8016daa <__mdiff+0xee>
 8016dda:	bf00      	nop
 8016ddc:	0801a099 	.word	0x0801a099
 8016de0:	0801a0aa 	.word	0x0801a0aa

08016de4 <__d2b>:
 8016de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016de8:	460f      	mov	r7, r1
 8016dea:	2101      	movs	r1, #1
 8016dec:	ec59 8b10 	vmov	r8, r9, d0
 8016df0:	4616      	mov	r6, r2
 8016df2:	f7ff fcd5 	bl	80167a0 <_Balloc>
 8016df6:	4604      	mov	r4, r0
 8016df8:	b930      	cbnz	r0, 8016e08 <__d2b+0x24>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	4b23      	ldr	r3, [pc, #140]	@ (8016e8c <__d2b+0xa8>)
 8016dfe:	4824      	ldr	r0, [pc, #144]	@ (8016e90 <__d2b+0xac>)
 8016e00:	f240 310f 	movw	r1, #783	@ 0x30f
 8016e04:	f7fe fd00 	bl	8015808 <__assert_func>
 8016e08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016e0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e10:	b10d      	cbz	r5, 8016e16 <__d2b+0x32>
 8016e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016e16:	9301      	str	r3, [sp, #4]
 8016e18:	f1b8 0300 	subs.w	r3, r8, #0
 8016e1c:	d023      	beq.n	8016e66 <__d2b+0x82>
 8016e1e:	4668      	mov	r0, sp
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	f7ff fd84 	bl	801692e <__lo0bits>
 8016e26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016e2a:	b1d0      	cbz	r0, 8016e62 <__d2b+0x7e>
 8016e2c:	f1c0 0320 	rsb	r3, r0, #32
 8016e30:	fa02 f303 	lsl.w	r3, r2, r3
 8016e34:	430b      	orrs	r3, r1
 8016e36:	40c2      	lsrs	r2, r0
 8016e38:	6163      	str	r3, [r4, #20]
 8016e3a:	9201      	str	r2, [sp, #4]
 8016e3c:	9b01      	ldr	r3, [sp, #4]
 8016e3e:	61a3      	str	r3, [r4, #24]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	bf0c      	ite	eq
 8016e44:	2201      	moveq	r2, #1
 8016e46:	2202      	movne	r2, #2
 8016e48:	6122      	str	r2, [r4, #16]
 8016e4a:	b1a5      	cbz	r5, 8016e76 <__d2b+0x92>
 8016e4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016e50:	4405      	add	r5, r0
 8016e52:	603d      	str	r5, [r7, #0]
 8016e54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016e58:	6030      	str	r0, [r6, #0]
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	b003      	add	sp, #12
 8016e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e62:	6161      	str	r1, [r4, #20]
 8016e64:	e7ea      	b.n	8016e3c <__d2b+0x58>
 8016e66:	a801      	add	r0, sp, #4
 8016e68:	f7ff fd61 	bl	801692e <__lo0bits>
 8016e6c:	9b01      	ldr	r3, [sp, #4]
 8016e6e:	6163      	str	r3, [r4, #20]
 8016e70:	3020      	adds	r0, #32
 8016e72:	2201      	movs	r2, #1
 8016e74:	e7e8      	b.n	8016e48 <__d2b+0x64>
 8016e76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016e7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016e7e:	6038      	str	r0, [r7, #0]
 8016e80:	6918      	ldr	r0, [r3, #16]
 8016e82:	f7ff fd35 	bl	80168f0 <__hi0bits>
 8016e86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016e8a:	e7e5      	b.n	8016e58 <__d2b+0x74>
 8016e8c:	0801a099 	.word	0x0801a099
 8016e90:	0801a0aa 	.word	0x0801a0aa

08016e94 <_strtoul_l.isra.0>:
 8016e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e98:	4e34      	ldr	r6, [pc, #208]	@ (8016f6c <_strtoul_l.isra.0+0xd8>)
 8016e9a:	4686      	mov	lr, r0
 8016e9c:	460d      	mov	r5, r1
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ea4:	5d37      	ldrb	r7, [r6, r4]
 8016ea6:	f017 0708 	ands.w	r7, r7, #8
 8016eaa:	d1f8      	bne.n	8016e9e <_strtoul_l.isra.0+0xa>
 8016eac:	2c2d      	cmp	r4, #45	@ 0x2d
 8016eae:	d110      	bne.n	8016ed2 <_strtoul_l.isra.0+0x3e>
 8016eb0:	782c      	ldrb	r4, [r5, #0]
 8016eb2:	2701      	movs	r7, #1
 8016eb4:	1c85      	adds	r5, r0, #2
 8016eb6:	f033 0010 	bics.w	r0, r3, #16
 8016eba:	d115      	bne.n	8016ee8 <_strtoul_l.isra.0+0x54>
 8016ebc:	2c30      	cmp	r4, #48	@ 0x30
 8016ebe:	d10d      	bne.n	8016edc <_strtoul_l.isra.0+0x48>
 8016ec0:	7828      	ldrb	r0, [r5, #0]
 8016ec2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016ec6:	2858      	cmp	r0, #88	@ 0x58
 8016ec8:	d108      	bne.n	8016edc <_strtoul_l.isra.0+0x48>
 8016eca:	786c      	ldrb	r4, [r5, #1]
 8016ecc:	3502      	adds	r5, #2
 8016ece:	2310      	movs	r3, #16
 8016ed0:	e00a      	b.n	8016ee8 <_strtoul_l.isra.0+0x54>
 8016ed2:	2c2b      	cmp	r4, #43	@ 0x2b
 8016ed4:	bf04      	itt	eq
 8016ed6:	782c      	ldrbeq	r4, [r5, #0]
 8016ed8:	1c85      	addeq	r5, r0, #2
 8016eda:	e7ec      	b.n	8016eb6 <_strtoul_l.isra.0+0x22>
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d1f6      	bne.n	8016ece <_strtoul_l.isra.0+0x3a>
 8016ee0:	2c30      	cmp	r4, #48	@ 0x30
 8016ee2:	bf14      	ite	ne
 8016ee4:	230a      	movne	r3, #10
 8016ee6:	2308      	moveq	r3, #8
 8016ee8:	f04f 38ff 	mov.w	r8, #4294967295
 8016eec:	2600      	movs	r6, #0
 8016eee:	fbb8 f8f3 	udiv	r8, r8, r3
 8016ef2:	fb03 f908 	mul.w	r9, r3, r8
 8016ef6:	ea6f 0909 	mvn.w	r9, r9
 8016efa:	4630      	mov	r0, r6
 8016efc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016f00:	f1bc 0f09 	cmp.w	ip, #9
 8016f04:	d810      	bhi.n	8016f28 <_strtoul_l.isra.0+0x94>
 8016f06:	4664      	mov	r4, ip
 8016f08:	42a3      	cmp	r3, r4
 8016f0a:	dd1e      	ble.n	8016f4a <_strtoul_l.isra.0+0xb6>
 8016f0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016f10:	d007      	beq.n	8016f22 <_strtoul_l.isra.0+0x8e>
 8016f12:	4580      	cmp	r8, r0
 8016f14:	d316      	bcc.n	8016f44 <_strtoul_l.isra.0+0xb0>
 8016f16:	d101      	bne.n	8016f1c <_strtoul_l.isra.0+0x88>
 8016f18:	45a1      	cmp	r9, r4
 8016f1a:	db13      	blt.n	8016f44 <_strtoul_l.isra.0+0xb0>
 8016f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8016f20:	2601      	movs	r6, #1
 8016f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f26:	e7e9      	b.n	8016efc <_strtoul_l.isra.0+0x68>
 8016f28:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016f2c:	f1bc 0f19 	cmp.w	ip, #25
 8016f30:	d801      	bhi.n	8016f36 <_strtoul_l.isra.0+0xa2>
 8016f32:	3c37      	subs	r4, #55	@ 0x37
 8016f34:	e7e8      	b.n	8016f08 <_strtoul_l.isra.0+0x74>
 8016f36:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016f3a:	f1bc 0f19 	cmp.w	ip, #25
 8016f3e:	d804      	bhi.n	8016f4a <_strtoul_l.isra.0+0xb6>
 8016f40:	3c57      	subs	r4, #87	@ 0x57
 8016f42:	e7e1      	b.n	8016f08 <_strtoul_l.isra.0+0x74>
 8016f44:	f04f 36ff 	mov.w	r6, #4294967295
 8016f48:	e7eb      	b.n	8016f22 <_strtoul_l.isra.0+0x8e>
 8016f4a:	1c73      	adds	r3, r6, #1
 8016f4c:	d106      	bne.n	8016f5c <_strtoul_l.isra.0+0xc8>
 8016f4e:	2322      	movs	r3, #34	@ 0x22
 8016f50:	f8ce 3000 	str.w	r3, [lr]
 8016f54:	4630      	mov	r0, r6
 8016f56:	b932      	cbnz	r2, 8016f66 <_strtoul_l.isra.0+0xd2>
 8016f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f5c:	b107      	cbz	r7, 8016f60 <_strtoul_l.isra.0+0xcc>
 8016f5e:	4240      	negs	r0, r0
 8016f60:	2a00      	cmp	r2, #0
 8016f62:	d0f9      	beq.n	8016f58 <_strtoul_l.isra.0+0xc4>
 8016f64:	b106      	cbz	r6, 8016f68 <_strtoul_l.isra.0+0xd4>
 8016f66:	1e69      	subs	r1, r5, #1
 8016f68:	6011      	str	r1, [r2, #0]
 8016f6a:	e7f5      	b.n	8016f58 <_strtoul_l.isra.0+0xc4>
 8016f6c:	0801a2f9 	.word	0x0801a2f9

08016f70 <_strtoul_r>:
 8016f70:	f7ff bf90 	b.w	8016e94 <_strtoul_l.isra.0>

08016f74 <strtoul>:
 8016f74:	4613      	mov	r3, r2
 8016f76:	460a      	mov	r2, r1
 8016f78:	4601      	mov	r1, r0
 8016f7a:	4802      	ldr	r0, [pc, #8]	@ (8016f84 <strtoul+0x10>)
 8016f7c:	6800      	ldr	r0, [r0, #0]
 8016f7e:	f7ff bf89 	b.w	8016e94 <_strtoul_l.isra.0>
 8016f82:	bf00      	nop
 8016f84:	20000038 	.word	0x20000038

08016f88 <__ssputs_r>:
 8016f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f8c:	688e      	ldr	r6, [r1, #8]
 8016f8e:	461f      	mov	r7, r3
 8016f90:	42be      	cmp	r6, r7
 8016f92:	680b      	ldr	r3, [r1, #0]
 8016f94:	4682      	mov	sl, r0
 8016f96:	460c      	mov	r4, r1
 8016f98:	4690      	mov	r8, r2
 8016f9a:	d82d      	bhi.n	8016ff8 <__ssputs_r+0x70>
 8016f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fa4:	d026      	beq.n	8016ff4 <__ssputs_r+0x6c>
 8016fa6:	6965      	ldr	r5, [r4, #20]
 8016fa8:	6909      	ldr	r1, [r1, #16]
 8016faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fae:	eba3 0901 	sub.w	r9, r3, r1
 8016fb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fb6:	1c7b      	adds	r3, r7, #1
 8016fb8:	444b      	add	r3, r9
 8016fba:	106d      	asrs	r5, r5, #1
 8016fbc:	429d      	cmp	r5, r3
 8016fbe:	bf38      	it	cc
 8016fc0:	461d      	movcc	r5, r3
 8016fc2:	0553      	lsls	r3, r2, #21
 8016fc4:	d527      	bpl.n	8017016 <__ssputs_r+0x8e>
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	f7ff fb5e 	bl	8016688 <_malloc_r>
 8016fcc:	4606      	mov	r6, r0
 8016fce:	b360      	cbz	r0, 801702a <__ssputs_r+0xa2>
 8016fd0:	6921      	ldr	r1, [r4, #16]
 8016fd2:	464a      	mov	r2, r9
 8016fd4:	f7fe fc09 	bl	80157ea <memcpy>
 8016fd8:	89a3      	ldrh	r3, [r4, #12]
 8016fda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016fe2:	81a3      	strh	r3, [r4, #12]
 8016fe4:	6126      	str	r6, [r4, #16]
 8016fe6:	6165      	str	r5, [r4, #20]
 8016fe8:	444e      	add	r6, r9
 8016fea:	eba5 0509 	sub.w	r5, r5, r9
 8016fee:	6026      	str	r6, [r4, #0]
 8016ff0:	60a5      	str	r5, [r4, #8]
 8016ff2:	463e      	mov	r6, r7
 8016ff4:	42be      	cmp	r6, r7
 8016ff6:	d900      	bls.n	8016ffa <__ssputs_r+0x72>
 8016ff8:	463e      	mov	r6, r7
 8016ffa:	6820      	ldr	r0, [r4, #0]
 8016ffc:	4632      	mov	r2, r6
 8016ffe:	4641      	mov	r1, r8
 8017000:	f000 fa04 	bl	801740c <memmove>
 8017004:	68a3      	ldr	r3, [r4, #8]
 8017006:	1b9b      	subs	r3, r3, r6
 8017008:	60a3      	str	r3, [r4, #8]
 801700a:	6823      	ldr	r3, [r4, #0]
 801700c:	4433      	add	r3, r6
 801700e:	6023      	str	r3, [r4, #0]
 8017010:	2000      	movs	r0, #0
 8017012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017016:	462a      	mov	r2, r5
 8017018:	f000 fb18 	bl	801764c <_realloc_r>
 801701c:	4606      	mov	r6, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	d1e0      	bne.n	8016fe4 <__ssputs_r+0x5c>
 8017022:	6921      	ldr	r1, [r4, #16]
 8017024:	4650      	mov	r0, sl
 8017026:	f7ff fa6f 	bl	8016508 <_free_r>
 801702a:	230c      	movs	r3, #12
 801702c:	f8ca 3000 	str.w	r3, [sl]
 8017030:	89a3      	ldrh	r3, [r4, #12]
 8017032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017036:	81a3      	strh	r3, [r4, #12]
 8017038:	f04f 30ff 	mov.w	r0, #4294967295
 801703c:	e7e9      	b.n	8017012 <__ssputs_r+0x8a>
	...

08017040 <_svfiprintf_r>:
 8017040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	4698      	mov	r8, r3
 8017046:	898b      	ldrh	r3, [r1, #12]
 8017048:	061b      	lsls	r3, r3, #24
 801704a:	b09d      	sub	sp, #116	@ 0x74
 801704c:	4607      	mov	r7, r0
 801704e:	460d      	mov	r5, r1
 8017050:	4614      	mov	r4, r2
 8017052:	d510      	bpl.n	8017076 <_svfiprintf_r+0x36>
 8017054:	690b      	ldr	r3, [r1, #16]
 8017056:	b973      	cbnz	r3, 8017076 <_svfiprintf_r+0x36>
 8017058:	2140      	movs	r1, #64	@ 0x40
 801705a:	f7ff fb15 	bl	8016688 <_malloc_r>
 801705e:	6028      	str	r0, [r5, #0]
 8017060:	6128      	str	r0, [r5, #16]
 8017062:	b930      	cbnz	r0, 8017072 <_svfiprintf_r+0x32>
 8017064:	230c      	movs	r3, #12
 8017066:	603b      	str	r3, [r7, #0]
 8017068:	f04f 30ff 	mov.w	r0, #4294967295
 801706c:	b01d      	add	sp, #116	@ 0x74
 801706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017072:	2340      	movs	r3, #64	@ 0x40
 8017074:	616b      	str	r3, [r5, #20]
 8017076:	2300      	movs	r3, #0
 8017078:	9309      	str	r3, [sp, #36]	@ 0x24
 801707a:	2320      	movs	r3, #32
 801707c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017080:	f8cd 800c 	str.w	r8, [sp, #12]
 8017084:	2330      	movs	r3, #48	@ 0x30
 8017086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017224 <_svfiprintf_r+0x1e4>
 801708a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801708e:	f04f 0901 	mov.w	r9, #1
 8017092:	4623      	mov	r3, r4
 8017094:	469a      	mov	sl, r3
 8017096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801709a:	b10a      	cbz	r2, 80170a0 <_svfiprintf_r+0x60>
 801709c:	2a25      	cmp	r2, #37	@ 0x25
 801709e:	d1f9      	bne.n	8017094 <_svfiprintf_r+0x54>
 80170a0:	ebba 0b04 	subs.w	fp, sl, r4
 80170a4:	d00b      	beq.n	80170be <_svfiprintf_r+0x7e>
 80170a6:	465b      	mov	r3, fp
 80170a8:	4622      	mov	r2, r4
 80170aa:	4629      	mov	r1, r5
 80170ac:	4638      	mov	r0, r7
 80170ae:	f7ff ff6b 	bl	8016f88 <__ssputs_r>
 80170b2:	3001      	adds	r0, #1
 80170b4:	f000 80a7 	beq.w	8017206 <_svfiprintf_r+0x1c6>
 80170b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170ba:	445a      	add	r2, fp
 80170bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80170be:	f89a 3000 	ldrb.w	r3, [sl]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f000 809f 	beq.w	8017206 <_svfiprintf_r+0x1c6>
 80170c8:	2300      	movs	r3, #0
 80170ca:	f04f 32ff 	mov.w	r2, #4294967295
 80170ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170d2:	f10a 0a01 	add.w	sl, sl, #1
 80170d6:	9304      	str	r3, [sp, #16]
 80170d8:	9307      	str	r3, [sp, #28]
 80170da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170de:	931a      	str	r3, [sp, #104]	@ 0x68
 80170e0:	4654      	mov	r4, sl
 80170e2:	2205      	movs	r2, #5
 80170e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170e8:	484e      	ldr	r0, [pc, #312]	@ (8017224 <_svfiprintf_r+0x1e4>)
 80170ea:	f7e9 f859 	bl	80001a0 <memchr>
 80170ee:	9a04      	ldr	r2, [sp, #16]
 80170f0:	b9d8      	cbnz	r0, 801712a <_svfiprintf_r+0xea>
 80170f2:	06d0      	lsls	r0, r2, #27
 80170f4:	bf44      	itt	mi
 80170f6:	2320      	movmi	r3, #32
 80170f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170fc:	0711      	lsls	r1, r2, #28
 80170fe:	bf44      	itt	mi
 8017100:	232b      	movmi	r3, #43	@ 0x2b
 8017102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017106:	f89a 3000 	ldrb.w	r3, [sl]
 801710a:	2b2a      	cmp	r3, #42	@ 0x2a
 801710c:	d015      	beq.n	801713a <_svfiprintf_r+0xfa>
 801710e:	9a07      	ldr	r2, [sp, #28]
 8017110:	4654      	mov	r4, sl
 8017112:	2000      	movs	r0, #0
 8017114:	f04f 0c0a 	mov.w	ip, #10
 8017118:	4621      	mov	r1, r4
 801711a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801711e:	3b30      	subs	r3, #48	@ 0x30
 8017120:	2b09      	cmp	r3, #9
 8017122:	d94b      	bls.n	80171bc <_svfiprintf_r+0x17c>
 8017124:	b1b0      	cbz	r0, 8017154 <_svfiprintf_r+0x114>
 8017126:	9207      	str	r2, [sp, #28]
 8017128:	e014      	b.n	8017154 <_svfiprintf_r+0x114>
 801712a:	eba0 0308 	sub.w	r3, r0, r8
 801712e:	fa09 f303 	lsl.w	r3, r9, r3
 8017132:	4313      	orrs	r3, r2
 8017134:	9304      	str	r3, [sp, #16]
 8017136:	46a2      	mov	sl, r4
 8017138:	e7d2      	b.n	80170e0 <_svfiprintf_r+0xa0>
 801713a:	9b03      	ldr	r3, [sp, #12]
 801713c:	1d19      	adds	r1, r3, #4
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	9103      	str	r1, [sp, #12]
 8017142:	2b00      	cmp	r3, #0
 8017144:	bfbb      	ittet	lt
 8017146:	425b      	neglt	r3, r3
 8017148:	f042 0202 	orrlt.w	r2, r2, #2
 801714c:	9307      	strge	r3, [sp, #28]
 801714e:	9307      	strlt	r3, [sp, #28]
 8017150:	bfb8      	it	lt
 8017152:	9204      	strlt	r2, [sp, #16]
 8017154:	7823      	ldrb	r3, [r4, #0]
 8017156:	2b2e      	cmp	r3, #46	@ 0x2e
 8017158:	d10a      	bne.n	8017170 <_svfiprintf_r+0x130>
 801715a:	7863      	ldrb	r3, [r4, #1]
 801715c:	2b2a      	cmp	r3, #42	@ 0x2a
 801715e:	d132      	bne.n	80171c6 <_svfiprintf_r+0x186>
 8017160:	9b03      	ldr	r3, [sp, #12]
 8017162:	1d1a      	adds	r2, r3, #4
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	9203      	str	r2, [sp, #12]
 8017168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801716c:	3402      	adds	r4, #2
 801716e:	9305      	str	r3, [sp, #20]
 8017170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017234 <_svfiprintf_r+0x1f4>
 8017174:	7821      	ldrb	r1, [r4, #0]
 8017176:	2203      	movs	r2, #3
 8017178:	4650      	mov	r0, sl
 801717a:	f7e9 f811 	bl	80001a0 <memchr>
 801717e:	b138      	cbz	r0, 8017190 <_svfiprintf_r+0x150>
 8017180:	9b04      	ldr	r3, [sp, #16]
 8017182:	eba0 000a 	sub.w	r0, r0, sl
 8017186:	2240      	movs	r2, #64	@ 0x40
 8017188:	4082      	lsls	r2, r0
 801718a:	4313      	orrs	r3, r2
 801718c:	3401      	adds	r4, #1
 801718e:	9304      	str	r3, [sp, #16]
 8017190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017194:	4824      	ldr	r0, [pc, #144]	@ (8017228 <_svfiprintf_r+0x1e8>)
 8017196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801719a:	2206      	movs	r2, #6
 801719c:	f7e9 f800 	bl	80001a0 <memchr>
 80171a0:	2800      	cmp	r0, #0
 80171a2:	d036      	beq.n	8017212 <_svfiprintf_r+0x1d2>
 80171a4:	4b21      	ldr	r3, [pc, #132]	@ (801722c <_svfiprintf_r+0x1ec>)
 80171a6:	bb1b      	cbnz	r3, 80171f0 <_svfiprintf_r+0x1b0>
 80171a8:	9b03      	ldr	r3, [sp, #12]
 80171aa:	3307      	adds	r3, #7
 80171ac:	f023 0307 	bic.w	r3, r3, #7
 80171b0:	3308      	adds	r3, #8
 80171b2:	9303      	str	r3, [sp, #12]
 80171b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b6:	4433      	add	r3, r6
 80171b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80171ba:	e76a      	b.n	8017092 <_svfiprintf_r+0x52>
 80171bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80171c0:	460c      	mov	r4, r1
 80171c2:	2001      	movs	r0, #1
 80171c4:	e7a8      	b.n	8017118 <_svfiprintf_r+0xd8>
 80171c6:	2300      	movs	r3, #0
 80171c8:	3401      	adds	r4, #1
 80171ca:	9305      	str	r3, [sp, #20]
 80171cc:	4619      	mov	r1, r3
 80171ce:	f04f 0c0a 	mov.w	ip, #10
 80171d2:	4620      	mov	r0, r4
 80171d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171d8:	3a30      	subs	r2, #48	@ 0x30
 80171da:	2a09      	cmp	r2, #9
 80171dc:	d903      	bls.n	80171e6 <_svfiprintf_r+0x1a6>
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d0c6      	beq.n	8017170 <_svfiprintf_r+0x130>
 80171e2:	9105      	str	r1, [sp, #20]
 80171e4:	e7c4      	b.n	8017170 <_svfiprintf_r+0x130>
 80171e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80171ea:	4604      	mov	r4, r0
 80171ec:	2301      	movs	r3, #1
 80171ee:	e7f0      	b.n	80171d2 <_svfiprintf_r+0x192>
 80171f0:	ab03      	add	r3, sp, #12
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	462a      	mov	r2, r5
 80171f6:	4b0e      	ldr	r3, [pc, #56]	@ (8017230 <_svfiprintf_r+0x1f0>)
 80171f8:	a904      	add	r1, sp, #16
 80171fa:	4638      	mov	r0, r7
 80171fc:	f7fc ff0a 	bl	8014014 <_printf_float>
 8017200:	1c42      	adds	r2, r0, #1
 8017202:	4606      	mov	r6, r0
 8017204:	d1d6      	bne.n	80171b4 <_svfiprintf_r+0x174>
 8017206:	89ab      	ldrh	r3, [r5, #12]
 8017208:	065b      	lsls	r3, r3, #25
 801720a:	f53f af2d 	bmi.w	8017068 <_svfiprintf_r+0x28>
 801720e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017210:	e72c      	b.n	801706c <_svfiprintf_r+0x2c>
 8017212:	ab03      	add	r3, sp, #12
 8017214:	9300      	str	r3, [sp, #0]
 8017216:	462a      	mov	r2, r5
 8017218:	4b05      	ldr	r3, [pc, #20]	@ (8017230 <_svfiprintf_r+0x1f0>)
 801721a:	a904      	add	r1, sp, #16
 801721c:	4638      	mov	r0, r7
 801721e:	f7fd f991 	bl	8014544 <_printf_i>
 8017222:	e7ed      	b.n	8017200 <_svfiprintf_r+0x1c0>
 8017224:	0801a103 	.word	0x0801a103
 8017228:	0801a10d 	.word	0x0801a10d
 801722c:	08014015 	.word	0x08014015
 8017230:	08016f89 	.word	0x08016f89
 8017234:	0801a109 	.word	0x0801a109

08017238 <__sflush_r>:
 8017238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017240:	0716      	lsls	r6, r2, #28
 8017242:	4605      	mov	r5, r0
 8017244:	460c      	mov	r4, r1
 8017246:	d454      	bmi.n	80172f2 <__sflush_r+0xba>
 8017248:	684b      	ldr	r3, [r1, #4]
 801724a:	2b00      	cmp	r3, #0
 801724c:	dc02      	bgt.n	8017254 <__sflush_r+0x1c>
 801724e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017250:	2b00      	cmp	r3, #0
 8017252:	dd48      	ble.n	80172e6 <__sflush_r+0xae>
 8017254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017256:	2e00      	cmp	r6, #0
 8017258:	d045      	beq.n	80172e6 <__sflush_r+0xae>
 801725a:	2300      	movs	r3, #0
 801725c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017260:	682f      	ldr	r7, [r5, #0]
 8017262:	6a21      	ldr	r1, [r4, #32]
 8017264:	602b      	str	r3, [r5, #0]
 8017266:	d030      	beq.n	80172ca <__sflush_r+0x92>
 8017268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801726a:	89a3      	ldrh	r3, [r4, #12]
 801726c:	0759      	lsls	r1, r3, #29
 801726e:	d505      	bpl.n	801727c <__sflush_r+0x44>
 8017270:	6863      	ldr	r3, [r4, #4]
 8017272:	1ad2      	subs	r2, r2, r3
 8017274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017276:	b10b      	cbz	r3, 801727c <__sflush_r+0x44>
 8017278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801727a:	1ad2      	subs	r2, r2, r3
 801727c:	2300      	movs	r3, #0
 801727e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017280:	6a21      	ldr	r1, [r4, #32]
 8017282:	4628      	mov	r0, r5
 8017284:	47b0      	blx	r6
 8017286:	1c43      	adds	r3, r0, #1
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	d106      	bne.n	801729a <__sflush_r+0x62>
 801728c:	6829      	ldr	r1, [r5, #0]
 801728e:	291d      	cmp	r1, #29
 8017290:	d82b      	bhi.n	80172ea <__sflush_r+0xb2>
 8017292:	4a2a      	ldr	r2, [pc, #168]	@ (801733c <__sflush_r+0x104>)
 8017294:	40ca      	lsrs	r2, r1
 8017296:	07d6      	lsls	r6, r2, #31
 8017298:	d527      	bpl.n	80172ea <__sflush_r+0xb2>
 801729a:	2200      	movs	r2, #0
 801729c:	6062      	str	r2, [r4, #4]
 801729e:	04d9      	lsls	r1, r3, #19
 80172a0:	6922      	ldr	r2, [r4, #16]
 80172a2:	6022      	str	r2, [r4, #0]
 80172a4:	d504      	bpl.n	80172b0 <__sflush_r+0x78>
 80172a6:	1c42      	adds	r2, r0, #1
 80172a8:	d101      	bne.n	80172ae <__sflush_r+0x76>
 80172aa:	682b      	ldr	r3, [r5, #0]
 80172ac:	b903      	cbnz	r3, 80172b0 <__sflush_r+0x78>
 80172ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80172b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172b2:	602f      	str	r7, [r5, #0]
 80172b4:	b1b9      	cbz	r1, 80172e6 <__sflush_r+0xae>
 80172b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172ba:	4299      	cmp	r1, r3
 80172bc:	d002      	beq.n	80172c4 <__sflush_r+0x8c>
 80172be:	4628      	mov	r0, r5
 80172c0:	f7ff f922 	bl	8016508 <_free_r>
 80172c4:	2300      	movs	r3, #0
 80172c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80172c8:	e00d      	b.n	80172e6 <__sflush_r+0xae>
 80172ca:	2301      	movs	r3, #1
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b0      	blx	r6
 80172d0:	4602      	mov	r2, r0
 80172d2:	1c50      	adds	r0, r2, #1
 80172d4:	d1c9      	bne.n	801726a <__sflush_r+0x32>
 80172d6:	682b      	ldr	r3, [r5, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d0c6      	beq.n	801726a <__sflush_r+0x32>
 80172dc:	2b1d      	cmp	r3, #29
 80172de:	d001      	beq.n	80172e4 <__sflush_r+0xac>
 80172e0:	2b16      	cmp	r3, #22
 80172e2:	d11e      	bne.n	8017322 <__sflush_r+0xea>
 80172e4:	602f      	str	r7, [r5, #0]
 80172e6:	2000      	movs	r0, #0
 80172e8:	e022      	b.n	8017330 <__sflush_r+0xf8>
 80172ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172ee:	b21b      	sxth	r3, r3
 80172f0:	e01b      	b.n	801732a <__sflush_r+0xf2>
 80172f2:	690f      	ldr	r7, [r1, #16]
 80172f4:	2f00      	cmp	r7, #0
 80172f6:	d0f6      	beq.n	80172e6 <__sflush_r+0xae>
 80172f8:	0793      	lsls	r3, r2, #30
 80172fa:	680e      	ldr	r6, [r1, #0]
 80172fc:	bf08      	it	eq
 80172fe:	694b      	ldreq	r3, [r1, #20]
 8017300:	600f      	str	r7, [r1, #0]
 8017302:	bf18      	it	ne
 8017304:	2300      	movne	r3, #0
 8017306:	eba6 0807 	sub.w	r8, r6, r7
 801730a:	608b      	str	r3, [r1, #8]
 801730c:	f1b8 0f00 	cmp.w	r8, #0
 8017310:	dde9      	ble.n	80172e6 <__sflush_r+0xae>
 8017312:	6a21      	ldr	r1, [r4, #32]
 8017314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017316:	4643      	mov	r3, r8
 8017318:	463a      	mov	r2, r7
 801731a:	4628      	mov	r0, r5
 801731c:	47b0      	blx	r6
 801731e:	2800      	cmp	r0, #0
 8017320:	dc08      	bgt.n	8017334 <__sflush_r+0xfc>
 8017322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801732a:	81a3      	strh	r3, [r4, #12]
 801732c:	f04f 30ff 	mov.w	r0, #4294967295
 8017330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017334:	4407      	add	r7, r0
 8017336:	eba8 0800 	sub.w	r8, r8, r0
 801733a:	e7e7      	b.n	801730c <__sflush_r+0xd4>
 801733c:	20400001 	.word	0x20400001

08017340 <_fflush_r>:
 8017340:	b538      	push	{r3, r4, r5, lr}
 8017342:	690b      	ldr	r3, [r1, #16]
 8017344:	4605      	mov	r5, r0
 8017346:	460c      	mov	r4, r1
 8017348:	b913      	cbnz	r3, 8017350 <_fflush_r+0x10>
 801734a:	2500      	movs	r5, #0
 801734c:	4628      	mov	r0, r5
 801734e:	bd38      	pop	{r3, r4, r5, pc}
 8017350:	b118      	cbz	r0, 801735a <_fflush_r+0x1a>
 8017352:	6a03      	ldr	r3, [r0, #32]
 8017354:	b90b      	cbnz	r3, 801735a <_fflush_r+0x1a>
 8017356:	f7fd fa9f 	bl	8014898 <__sinit>
 801735a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d0f3      	beq.n	801734a <_fflush_r+0xa>
 8017362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017364:	07d0      	lsls	r0, r2, #31
 8017366:	d404      	bmi.n	8017372 <_fflush_r+0x32>
 8017368:	0599      	lsls	r1, r3, #22
 801736a:	d402      	bmi.n	8017372 <_fflush_r+0x32>
 801736c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801736e:	f7fe fa31 	bl	80157d4 <__retarget_lock_acquire_recursive>
 8017372:	4628      	mov	r0, r5
 8017374:	4621      	mov	r1, r4
 8017376:	f7ff ff5f 	bl	8017238 <__sflush_r>
 801737a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801737c:	07da      	lsls	r2, r3, #31
 801737e:	4605      	mov	r5, r0
 8017380:	d4e4      	bmi.n	801734c <_fflush_r+0xc>
 8017382:	89a3      	ldrh	r3, [r4, #12]
 8017384:	059b      	lsls	r3, r3, #22
 8017386:	d4e1      	bmi.n	801734c <_fflush_r+0xc>
 8017388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801738a:	f7fe fa25 	bl	80157d8 <__retarget_lock_release_recursive>
 801738e:	e7dd      	b.n	801734c <_fflush_r+0xc>

08017390 <fiprintf>:
 8017390:	b40e      	push	{r1, r2, r3}
 8017392:	b503      	push	{r0, r1, lr}
 8017394:	4601      	mov	r1, r0
 8017396:	ab03      	add	r3, sp, #12
 8017398:	4805      	ldr	r0, [pc, #20]	@ (80173b0 <fiprintf+0x20>)
 801739a:	f853 2b04 	ldr.w	r2, [r3], #4
 801739e:	6800      	ldr	r0, [r0, #0]
 80173a0:	9301      	str	r3, [sp, #4]
 80173a2:	f000 fb89 	bl	8017ab8 <_vfiprintf_r>
 80173a6:	b002      	add	sp, #8
 80173a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80173ac:	b003      	add	sp, #12
 80173ae:	4770      	bx	lr
 80173b0:	20000038 	.word	0x20000038

080173b4 <siscanf>:
 80173b4:	b40e      	push	{r1, r2, r3}
 80173b6:	b570      	push	{r4, r5, r6, lr}
 80173b8:	b09d      	sub	sp, #116	@ 0x74
 80173ba:	ac21      	add	r4, sp, #132	@ 0x84
 80173bc:	2500      	movs	r5, #0
 80173be:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80173c2:	f854 6b04 	ldr.w	r6, [r4], #4
 80173c6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80173ca:	951b      	str	r5, [sp, #108]	@ 0x6c
 80173cc:	9002      	str	r0, [sp, #8]
 80173ce:	9006      	str	r0, [sp, #24]
 80173d0:	f7e8 ff36 	bl	8000240 <strlen>
 80173d4:	4b0b      	ldr	r3, [pc, #44]	@ (8017404 <siscanf+0x50>)
 80173d6:	9003      	str	r0, [sp, #12]
 80173d8:	9007      	str	r0, [sp, #28]
 80173da:	480b      	ldr	r0, [pc, #44]	@ (8017408 <siscanf+0x54>)
 80173dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173e6:	4632      	mov	r2, r6
 80173e8:	4623      	mov	r3, r4
 80173ea:	a902      	add	r1, sp, #8
 80173ec:	6800      	ldr	r0, [r0, #0]
 80173ee:	950f      	str	r5, [sp, #60]	@ 0x3c
 80173f0:	9514      	str	r5, [sp, #80]	@ 0x50
 80173f2:	9401      	str	r4, [sp, #4]
 80173f4:	f000 f9c0 	bl	8017778 <__ssvfiscanf_r>
 80173f8:	b01d      	add	sp, #116	@ 0x74
 80173fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173fe:	b003      	add	sp, #12
 8017400:	4770      	bx	lr
 8017402:	bf00      	nop
 8017404:	0801496b 	.word	0x0801496b
 8017408:	20000038 	.word	0x20000038

0801740c <memmove>:
 801740c:	4288      	cmp	r0, r1
 801740e:	b510      	push	{r4, lr}
 8017410:	eb01 0402 	add.w	r4, r1, r2
 8017414:	d902      	bls.n	801741c <memmove+0x10>
 8017416:	4284      	cmp	r4, r0
 8017418:	4623      	mov	r3, r4
 801741a:	d807      	bhi.n	801742c <memmove+0x20>
 801741c:	1e43      	subs	r3, r0, #1
 801741e:	42a1      	cmp	r1, r4
 8017420:	d008      	beq.n	8017434 <memmove+0x28>
 8017422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801742a:	e7f8      	b.n	801741e <memmove+0x12>
 801742c:	4402      	add	r2, r0
 801742e:	4601      	mov	r1, r0
 8017430:	428a      	cmp	r2, r1
 8017432:	d100      	bne.n	8017436 <memmove+0x2a>
 8017434:	bd10      	pop	{r4, pc}
 8017436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801743a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801743e:	e7f7      	b.n	8017430 <memmove+0x24>

08017440 <strncmp>:
 8017440:	b510      	push	{r4, lr}
 8017442:	b16a      	cbz	r2, 8017460 <strncmp+0x20>
 8017444:	3901      	subs	r1, #1
 8017446:	1884      	adds	r4, r0, r2
 8017448:	f810 2b01 	ldrb.w	r2, [r0], #1
 801744c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017450:	429a      	cmp	r2, r3
 8017452:	d103      	bne.n	801745c <strncmp+0x1c>
 8017454:	42a0      	cmp	r0, r4
 8017456:	d001      	beq.n	801745c <strncmp+0x1c>
 8017458:	2a00      	cmp	r2, #0
 801745a:	d1f5      	bne.n	8017448 <strncmp+0x8>
 801745c:	1ad0      	subs	r0, r2, r3
 801745e:	bd10      	pop	{r4, pc}
 8017460:	4610      	mov	r0, r2
 8017462:	e7fc      	b.n	801745e <strncmp+0x1e>

08017464 <__gettzinfo>:
 8017464:	4800      	ldr	r0, [pc, #0]	@ (8017468 <__gettzinfo+0x4>)
 8017466:	4770      	bx	lr
 8017468:	20000088 	.word	0x20000088

0801746c <gmtime_r>:
 801746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017470:	4a4d      	ldr	r2, [pc, #308]	@ (80175a8 <gmtime_r+0x13c>)
 8017472:	460c      	mov	r4, r1
 8017474:	2300      	movs	r3, #0
 8017476:	e9d0 0100 	ldrd	r0, r1, [r0]
 801747a:	f7e9 fbed 	bl	8000c58 <__aeabi_ldivmod>
 801747e:	2a00      	cmp	r2, #0
 8017480:	bfbc      	itt	lt
 8017482:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8017486:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 801748a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801748e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8017492:	fbb2 f3f1 	udiv	r3, r2, r1
 8017496:	fb01 2213 	mls	r2, r1, r3, r2
 801749a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801749e:	bfac      	ite	ge
 80174a0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80174a4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80174a8:	60a3      	str	r3, [r4, #8]
 80174aa:	fbb2 f3f1 	udiv	r3, r2, r1
 80174ae:	fb01 2213 	mls	r2, r1, r3, r2
 80174b2:	6063      	str	r3, [r4, #4]
 80174b4:	6022      	str	r2, [r4, #0]
 80174b6:	1cc3      	adds	r3, r0, #3
 80174b8:	2207      	movs	r2, #7
 80174ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80174be:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80174c2:	1a9b      	subs	r3, r3, r2
 80174c4:	4939      	ldr	r1, [pc, #228]	@ (80175ac <gmtime_r+0x140>)
 80174c6:	d555      	bpl.n	8017574 <gmtime_r+0x108>
 80174c8:	3307      	adds	r3, #7
 80174ca:	61a3      	str	r3, [r4, #24]
 80174cc:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 80174d0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80174d4:	fb93 f1f1 	sdiv	r1, r3, r1
 80174d8:	4b35      	ldr	r3, [pc, #212]	@ (80175b0 <gmtime_r+0x144>)
 80174da:	fb03 0001 	mla	r0, r3, r1, r0
 80174de:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80174e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80174e6:	4403      	add	r3, r0
 80174e8:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80174ec:	fbb0 f2fc 	udiv	r2, r0, ip
 80174f0:	1a9b      	subs	r3, r3, r2
 80174f2:	f240 176d 	movw	r7, #365	@ 0x16d
 80174f6:	4a2f      	ldr	r2, [pc, #188]	@ (80175b4 <gmtime_r+0x148>)
 80174f8:	fbb0 f2f2 	udiv	r2, r0, r2
 80174fc:	2664      	movs	r6, #100	@ 0x64
 80174fe:	1a9b      	subs	r3, r3, r2
 8017500:	fbb3 f2f7 	udiv	r2, r3, r7
 8017504:	fbb3 f3fc 	udiv	r3, r3, ip
 8017508:	fbb2 f5f6 	udiv	r5, r2, r6
 801750c:	1aeb      	subs	r3, r5, r3
 801750e:	4403      	add	r3, r0
 8017510:	fb07 3312 	mls	r3, r7, r2, r3
 8017514:	2099      	movs	r0, #153	@ 0x99
 8017516:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801751a:	3702      	adds	r7, #2
 801751c:	f103 0e01 	add.w	lr, r3, #1
 8017520:	fbb7 fcf0 	udiv	ip, r7, r0
 8017524:	fb00 f00c 	mul.w	r0, r0, ip
 8017528:	3002      	adds	r0, #2
 801752a:	f04f 0805 	mov.w	r8, #5
 801752e:	fbb0 f0f8 	udiv	r0, r0, r8
 8017532:	ebae 0000 	sub.w	r0, lr, r0
 8017536:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 801753a:	4577      	cmp	r7, lr
 801753c:	bf8c      	ite	hi
 801753e:	f06f 0709 	mvnhi.w	r7, #9
 8017542:	2702      	movls	r7, #2
 8017544:	4467      	add	r7, ip
 8017546:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 801754a:	fb0c 2101 	mla	r1, ip, r1, r2
 801754e:	2f01      	cmp	r7, #1
 8017550:	bf98      	it	ls
 8017552:	3101      	addls	r1, #1
 8017554:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8017558:	d312      	bcc.n	8017580 <gmtime_r+0x114>
 801755a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801755e:	61e3      	str	r3, [r4, #28]
 8017560:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8017564:	2300      	movs	r3, #0
 8017566:	60e0      	str	r0, [r4, #12]
 8017568:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801756c:	6223      	str	r3, [r4, #32]
 801756e:	4620      	mov	r0, r4
 8017570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017574:	2800      	cmp	r0, #0
 8017576:	61a3      	str	r3, [r4, #24]
 8017578:	dba8      	blt.n	80174cc <gmtime_r+0x60>
 801757a:	fb90 f1f1 	sdiv	r1, r0, r1
 801757e:	e7ab      	b.n	80174d8 <gmtime_r+0x6c>
 8017580:	f012 0f03 	tst.w	r2, #3
 8017584:	d102      	bne.n	801758c <gmtime_r+0x120>
 8017586:	fb06 2515 	mls	r5, r6, r5, r2
 801758a:	b95d      	cbnz	r5, 80175a4 <gmtime_r+0x138>
 801758c:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8017590:	fbb2 f6f5 	udiv	r6, r2, r5
 8017594:	fb05 2216 	mls	r2, r5, r6, r2
 8017598:	fab2 f282 	clz	r2, r2
 801759c:	0952      	lsrs	r2, r2, #5
 801759e:	333b      	adds	r3, #59	@ 0x3b
 80175a0:	4413      	add	r3, r2
 80175a2:	e7dc      	b.n	801755e <gmtime_r+0xf2>
 80175a4:	2201      	movs	r2, #1
 80175a6:	e7fa      	b.n	801759e <gmtime_r+0x132>
 80175a8:	00015180 	.word	0x00015180
 80175ac:	00023ab1 	.word	0x00023ab1
 80175b0:	fffdc54f 	.word	0xfffdc54f
 80175b4:	00023ab0 	.word	0x00023ab0

080175b8 <_sbrk_r>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	4d06      	ldr	r5, [pc, #24]	@ (80175d4 <_sbrk_r+0x1c>)
 80175bc:	2300      	movs	r3, #0
 80175be:	4604      	mov	r4, r0
 80175c0:	4608      	mov	r0, r1
 80175c2:	602b      	str	r3, [r5, #0]
 80175c4:	f7f4 fbb2 	bl	800bd2c <_sbrk>
 80175c8:	1c43      	adds	r3, r0, #1
 80175ca:	d102      	bne.n	80175d2 <_sbrk_r+0x1a>
 80175cc:	682b      	ldr	r3, [r5, #0]
 80175ce:	b103      	cbz	r3, 80175d2 <_sbrk_r+0x1a>
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	bd38      	pop	{r3, r4, r5, pc}
 80175d4:	2000a8f4 	.word	0x2000a8f4

080175d8 <abort>:
 80175d8:	b508      	push	{r3, lr}
 80175da:	2006      	movs	r0, #6
 80175dc:	f000 fe02 	bl	80181e4 <raise>
 80175e0:	2001      	movs	r0, #1
 80175e2:	f7f4 fb2b 	bl	800bc3c <_exit>

080175e6 <_calloc_r>:
 80175e6:	b570      	push	{r4, r5, r6, lr}
 80175e8:	fba1 5402 	umull	r5, r4, r1, r2
 80175ec:	b934      	cbnz	r4, 80175fc <_calloc_r+0x16>
 80175ee:	4629      	mov	r1, r5
 80175f0:	f7ff f84a 	bl	8016688 <_malloc_r>
 80175f4:	4606      	mov	r6, r0
 80175f6:	b928      	cbnz	r0, 8017604 <_calloc_r+0x1e>
 80175f8:	4630      	mov	r0, r6
 80175fa:	bd70      	pop	{r4, r5, r6, pc}
 80175fc:	220c      	movs	r2, #12
 80175fe:	6002      	str	r2, [r0, #0]
 8017600:	2600      	movs	r6, #0
 8017602:	e7f9      	b.n	80175f8 <_calloc_r+0x12>
 8017604:	462a      	mov	r2, r5
 8017606:	4621      	mov	r1, r4
 8017608:	f7fd f9e3 	bl	80149d2 <memset>
 801760c:	e7f4      	b.n	80175f8 <_calloc_r+0x12>
	...

08017610 <__env_lock>:
 8017610:	4801      	ldr	r0, [pc, #4]	@ (8017618 <__env_lock+0x8>)
 8017612:	f7fe b8df 	b.w	80157d4 <__retarget_lock_acquire_recursive>
 8017616:	bf00      	nop
 8017618:	2000a8f9 	.word	0x2000a8f9

0801761c <__env_unlock>:
 801761c:	4801      	ldr	r0, [pc, #4]	@ (8017624 <__env_unlock+0x8>)
 801761e:	f7fe b8db 	b.w	80157d8 <__retarget_lock_release_recursive>
 8017622:	bf00      	nop
 8017624:	2000a8f9 	.word	0x2000a8f9

08017628 <__ascii_mbtowc>:
 8017628:	b082      	sub	sp, #8
 801762a:	b901      	cbnz	r1, 801762e <__ascii_mbtowc+0x6>
 801762c:	a901      	add	r1, sp, #4
 801762e:	b142      	cbz	r2, 8017642 <__ascii_mbtowc+0x1a>
 8017630:	b14b      	cbz	r3, 8017646 <__ascii_mbtowc+0x1e>
 8017632:	7813      	ldrb	r3, [r2, #0]
 8017634:	600b      	str	r3, [r1, #0]
 8017636:	7812      	ldrb	r2, [r2, #0]
 8017638:	1e10      	subs	r0, r2, #0
 801763a:	bf18      	it	ne
 801763c:	2001      	movne	r0, #1
 801763e:	b002      	add	sp, #8
 8017640:	4770      	bx	lr
 8017642:	4610      	mov	r0, r2
 8017644:	e7fb      	b.n	801763e <__ascii_mbtowc+0x16>
 8017646:	f06f 0001 	mvn.w	r0, #1
 801764a:	e7f8      	b.n	801763e <__ascii_mbtowc+0x16>

0801764c <_realloc_r>:
 801764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	4607      	mov	r7, r0
 8017652:	4614      	mov	r4, r2
 8017654:	460d      	mov	r5, r1
 8017656:	b921      	cbnz	r1, 8017662 <_realloc_r+0x16>
 8017658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801765c:	4611      	mov	r1, r2
 801765e:	f7ff b813 	b.w	8016688 <_malloc_r>
 8017662:	b92a      	cbnz	r2, 8017670 <_realloc_r+0x24>
 8017664:	f7fe ff50 	bl	8016508 <_free_r>
 8017668:	4625      	mov	r5, r4
 801766a:	4628      	mov	r0, r5
 801766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017670:	f000 fdd4 	bl	801821c <_malloc_usable_size_r>
 8017674:	4284      	cmp	r4, r0
 8017676:	4606      	mov	r6, r0
 8017678:	d802      	bhi.n	8017680 <_realloc_r+0x34>
 801767a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801767e:	d8f4      	bhi.n	801766a <_realloc_r+0x1e>
 8017680:	4621      	mov	r1, r4
 8017682:	4638      	mov	r0, r7
 8017684:	f7ff f800 	bl	8016688 <_malloc_r>
 8017688:	4680      	mov	r8, r0
 801768a:	b908      	cbnz	r0, 8017690 <_realloc_r+0x44>
 801768c:	4645      	mov	r5, r8
 801768e:	e7ec      	b.n	801766a <_realloc_r+0x1e>
 8017690:	42b4      	cmp	r4, r6
 8017692:	4622      	mov	r2, r4
 8017694:	4629      	mov	r1, r5
 8017696:	bf28      	it	cs
 8017698:	4632      	movcs	r2, r6
 801769a:	f7fe f8a6 	bl	80157ea <memcpy>
 801769e:	4629      	mov	r1, r5
 80176a0:	4638      	mov	r0, r7
 80176a2:	f7fe ff31 	bl	8016508 <_free_r>
 80176a6:	e7f1      	b.n	801768c <_realloc_r+0x40>

080176a8 <__ascii_wctomb>:
 80176a8:	4603      	mov	r3, r0
 80176aa:	4608      	mov	r0, r1
 80176ac:	b141      	cbz	r1, 80176c0 <__ascii_wctomb+0x18>
 80176ae:	2aff      	cmp	r2, #255	@ 0xff
 80176b0:	d904      	bls.n	80176bc <__ascii_wctomb+0x14>
 80176b2:	228a      	movs	r2, #138	@ 0x8a
 80176b4:	601a      	str	r2, [r3, #0]
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ba:	4770      	bx	lr
 80176bc:	700a      	strb	r2, [r1, #0]
 80176be:	2001      	movs	r0, #1
 80176c0:	4770      	bx	lr

080176c2 <_sungetc_r>:
 80176c2:	b538      	push	{r3, r4, r5, lr}
 80176c4:	1c4b      	adds	r3, r1, #1
 80176c6:	4614      	mov	r4, r2
 80176c8:	d103      	bne.n	80176d2 <_sungetc_r+0x10>
 80176ca:	f04f 35ff 	mov.w	r5, #4294967295
 80176ce:	4628      	mov	r0, r5
 80176d0:	bd38      	pop	{r3, r4, r5, pc}
 80176d2:	8993      	ldrh	r3, [r2, #12]
 80176d4:	f023 0320 	bic.w	r3, r3, #32
 80176d8:	8193      	strh	r3, [r2, #12]
 80176da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176dc:	6852      	ldr	r2, [r2, #4]
 80176de:	b2cd      	uxtb	r5, r1
 80176e0:	b18b      	cbz	r3, 8017706 <_sungetc_r+0x44>
 80176e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80176e4:	4293      	cmp	r3, r2
 80176e6:	dd08      	ble.n	80176fa <_sungetc_r+0x38>
 80176e8:	6823      	ldr	r3, [r4, #0]
 80176ea:	1e5a      	subs	r2, r3, #1
 80176ec:	6022      	str	r2, [r4, #0]
 80176ee:	f803 5c01 	strb.w	r5, [r3, #-1]
 80176f2:	6863      	ldr	r3, [r4, #4]
 80176f4:	3301      	adds	r3, #1
 80176f6:	6063      	str	r3, [r4, #4]
 80176f8:	e7e9      	b.n	80176ce <_sungetc_r+0xc>
 80176fa:	4621      	mov	r1, r4
 80176fc:	f000 fc7b 	bl	8017ff6 <__submore>
 8017700:	2800      	cmp	r0, #0
 8017702:	d0f1      	beq.n	80176e8 <_sungetc_r+0x26>
 8017704:	e7e1      	b.n	80176ca <_sungetc_r+0x8>
 8017706:	6921      	ldr	r1, [r4, #16]
 8017708:	6823      	ldr	r3, [r4, #0]
 801770a:	b151      	cbz	r1, 8017722 <_sungetc_r+0x60>
 801770c:	4299      	cmp	r1, r3
 801770e:	d208      	bcs.n	8017722 <_sungetc_r+0x60>
 8017710:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017714:	42a9      	cmp	r1, r5
 8017716:	d104      	bne.n	8017722 <_sungetc_r+0x60>
 8017718:	3b01      	subs	r3, #1
 801771a:	3201      	adds	r2, #1
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	6062      	str	r2, [r4, #4]
 8017720:	e7d5      	b.n	80176ce <_sungetc_r+0xc>
 8017722:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8017726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801772a:	6363      	str	r3, [r4, #52]	@ 0x34
 801772c:	2303      	movs	r3, #3
 801772e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017730:	4623      	mov	r3, r4
 8017732:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017736:	6023      	str	r3, [r4, #0]
 8017738:	2301      	movs	r3, #1
 801773a:	e7dc      	b.n	80176f6 <_sungetc_r+0x34>

0801773c <__ssrefill_r>:
 801773c:	b510      	push	{r4, lr}
 801773e:	460c      	mov	r4, r1
 8017740:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017742:	b169      	cbz	r1, 8017760 <__ssrefill_r+0x24>
 8017744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017748:	4299      	cmp	r1, r3
 801774a:	d001      	beq.n	8017750 <__ssrefill_r+0x14>
 801774c:	f7fe fedc 	bl	8016508 <_free_r>
 8017750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017752:	6063      	str	r3, [r4, #4]
 8017754:	2000      	movs	r0, #0
 8017756:	6360      	str	r0, [r4, #52]	@ 0x34
 8017758:	b113      	cbz	r3, 8017760 <__ssrefill_r+0x24>
 801775a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801775c:	6023      	str	r3, [r4, #0]
 801775e:	bd10      	pop	{r4, pc}
 8017760:	6923      	ldr	r3, [r4, #16]
 8017762:	6023      	str	r3, [r4, #0]
 8017764:	2300      	movs	r3, #0
 8017766:	6063      	str	r3, [r4, #4]
 8017768:	89a3      	ldrh	r3, [r4, #12]
 801776a:	f043 0320 	orr.w	r3, r3, #32
 801776e:	81a3      	strh	r3, [r4, #12]
 8017770:	f04f 30ff 	mov.w	r0, #4294967295
 8017774:	e7f3      	b.n	801775e <__ssrefill_r+0x22>
	...

08017778 <__ssvfiscanf_r>:
 8017778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801777c:	460c      	mov	r4, r1
 801777e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017782:	2100      	movs	r1, #0
 8017784:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017788:	49a6      	ldr	r1, [pc, #664]	@ (8017a24 <__ssvfiscanf_r+0x2ac>)
 801778a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801778c:	f10d 0804 	add.w	r8, sp, #4
 8017790:	49a5      	ldr	r1, [pc, #660]	@ (8017a28 <__ssvfiscanf_r+0x2b0>)
 8017792:	4fa6      	ldr	r7, [pc, #664]	@ (8017a2c <__ssvfiscanf_r+0x2b4>)
 8017794:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017798:	4606      	mov	r6, r0
 801779a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	f892 9000 	ldrb.w	r9, [r2]
 80177a2:	f1b9 0f00 	cmp.w	r9, #0
 80177a6:	f000 8158 	beq.w	8017a5a <__ssvfiscanf_r+0x2e2>
 80177aa:	f817 3009 	ldrb.w	r3, [r7, r9]
 80177ae:	f013 0308 	ands.w	r3, r3, #8
 80177b2:	f102 0501 	add.w	r5, r2, #1
 80177b6:	d019      	beq.n	80177ec <__ssvfiscanf_r+0x74>
 80177b8:	6863      	ldr	r3, [r4, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	dd0f      	ble.n	80177de <__ssvfiscanf_r+0x66>
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	781a      	ldrb	r2, [r3, #0]
 80177c2:	5cba      	ldrb	r2, [r7, r2]
 80177c4:	0712      	lsls	r2, r2, #28
 80177c6:	d401      	bmi.n	80177cc <__ssvfiscanf_r+0x54>
 80177c8:	462a      	mov	r2, r5
 80177ca:	e7e8      	b.n	801779e <__ssvfiscanf_r+0x26>
 80177cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80177ce:	3201      	adds	r2, #1
 80177d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80177d2:	6862      	ldr	r2, [r4, #4]
 80177d4:	3301      	adds	r3, #1
 80177d6:	3a01      	subs	r2, #1
 80177d8:	6062      	str	r2, [r4, #4]
 80177da:	6023      	str	r3, [r4, #0]
 80177dc:	e7ec      	b.n	80177b8 <__ssvfiscanf_r+0x40>
 80177de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80177e0:	4621      	mov	r1, r4
 80177e2:	4630      	mov	r0, r6
 80177e4:	4798      	blx	r3
 80177e6:	2800      	cmp	r0, #0
 80177e8:	d0e9      	beq.n	80177be <__ssvfiscanf_r+0x46>
 80177ea:	e7ed      	b.n	80177c8 <__ssvfiscanf_r+0x50>
 80177ec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80177f0:	f040 8085 	bne.w	80178fe <__ssvfiscanf_r+0x186>
 80177f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80177f6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80177f8:	7853      	ldrb	r3, [r2, #1]
 80177fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80177fc:	bf02      	ittt	eq
 80177fe:	2310      	moveq	r3, #16
 8017800:	1c95      	addeq	r5, r2, #2
 8017802:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017804:	220a      	movs	r2, #10
 8017806:	46aa      	mov	sl, r5
 8017808:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801780c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017810:	2b09      	cmp	r3, #9
 8017812:	d91e      	bls.n	8017852 <__ssvfiscanf_r+0xda>
 8017814:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8017a30 <__ssvfiscanf_r+0x2b8>
 8017818:	2203      	movs	r2, #3
 801781a:	4658      	mov	r0, fp
 801781c:	f7e8 fcc0 	bl	80001a0 <memchr>
 8017820:	b138      	cbz	r0, 8017832 <__ssvfiscanf_r+0xba>
 8017822:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017824:	eba0 000b 	sub.w	r0, r0, fp
 8017828:	2301      	movs	r3, #1
 801782a:	4083      	lsls	r3, r0
 801782c:	4313      	orrs	r3, r2
 801782e:	9341      	str	r3, [sp, #260]	@ 0x104
 8017830:	4655      	mov	r5, sl
 8017832:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017836:	2b78      	cmp	r3, #120	@ 0x78
 8017838:	d806      	bhi.n	8017848 <__ssvfiscanf_r+0xd0>
 801783a:	2b57      	cmp	r3, #87	@ 0x57
 801783c:	d810      	bhi.n	8017860 <__ssvfiscanf_r+0xe8>
 801783e:	2b25      	cmp	r3, #37	@ 0x25
 8017840:	d05d      	beq.n	80178fe <__ssvfiscanf_r+0x186>
 8017842:	d857      	bhi.n	80178f4 <__ssvfiscanf_r+0x17c>
 8017844:	2b00      	cmp	r3, #0
 8017846:	d075      	beq.n	8017934 <__ssvfiscanf_r+0x1bc>
 8017848:	2303      	movs	r3, #3
 801784a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801784c:	230a      	movs	r3, #10
 801784e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017850:	e088      	b.n	8017964 <__ssvfiscanf_r+0x1ec>
 8017852:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017854:	fb02 1103 	mla	r1, r2, r3, r1
 8017858:	3930      	subs	r1, #48	@ 0x30
 801785a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801785c:	4655      	mov	r5, sl
 801785e:	e7d2      	b.n	8017806 <__ssvfiscanf_r+0x8e>
 8017860:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017864:	2a20      	cmp	r2, #32
 8017866:	d8ef      	bhi.n	8017848 <__ssvfiscanf_r+0xd0>
 8017868:	a101      	add	r1, pc, #4	@ (adr r1, 8017870 <__ssvfiscanf_r+0xf8>)
 801786a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801786e:	bf00      	nop
 8017870:	08017943 	.word	0x08017943
 8017874:	08017849 	.word	0x08017849
 8017878:	08017849 	.word	0x08017849
 801787c:	0801799d 	.word	0x0801799d
 8017880:	08017849 	.word	0x08017849
 8017884:	08017849 	.word	0x08017849
 8017888:	08017849 	.word	0x08017849
 801788c:	08017849 	.word	0x08017849
 8017890:	08017849 	.word	0x08017849
 8017894:	08017849 	.word	0x08017849
 8017898:	08017849 	.word	0x08017849
 801789c:	080179b3 	.word	0x080179b3
 80178a0:	08017999 	.word	0x08017999
 80178a4:	080178fb 	.word	0x080178fb
 80178a8:	080178fb 	.word	0x080178fb
 80178ac:	080178fb 	.word	0x080178fb
 80178b0:	08017849 	.word	0x08017849
 80178b4:	08017955 	.word	0x08017955
 80178b8:	08017849 	.word	0x08017849
 80178bc:	08017849 	.word	0x08017849
 80178c0:	08017849 	.word	0x08017849
 80178c4:	08017849 	.word	0x08017849
 80178c8:	080179c3 	.word	0x080179c3
 80178cc:	0801795d 	.word	0x0801795d
 80178d0:	0801793b 	.word	0x0801793b
 80178d4:	08017849 	.word	0x08017849
 80178d8:	08017849 	.word	0x08017849
 80178dc:	080179bf 	.word	0x080179bf
 80178e0:	08017849 	.word	0x08017849
 80178e4:	08017999 	.word	0x08017999
 80178e8:	08017849 	.word	0x08017849
 80178ec:	08017849 	.word	0x08017849
 80178f0:	08017943 	.word	0x08017943
 80178f4:	3b45      	subs	r3, #69	@ 0x45
 80178f6:	2b02      	cmp	r3, #2
 80178f8:	d8a6      	bhi.n	8017848 <__ssvfiscanf_r+0xd0>
 80178fa:	2305      	movs	r3, #5
 80178fc:	e031      	b.n	8017962 <__ssvfiscanf_r+0x1ea>
 80178fe:	6863      	ldr	r3, [r4, #4]
 8017900:	2b00      	cmp	r3, #0
 8017902:	dd0d      	ble.n	8017920 <__ssvfiscanf_r+0x1a8>
 8017904:	6823      	ldr	r3, [r4, #0]
 8017906:	781a      	ldrb	r2, [r3, #0]
 8017908:	454a      	cmp	r2, r9
 801790a:	f040 80a6 	bne.w	8017a5a <__ssvfiscanf_r+0x2e2>
 801790e:	3301      	adds	r3, #1
 8017910:	6862      	ldr	r2, [r4, #4]
 8017912:	6023      	str	r3, [r4, #0]
 8017914:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8017916:	3a01      	subs	r2, #1
 8017918:	3301      	adds	r3, #1
 801791a:	6062      	str	r2, [r4, #4]
 801791c:	9345      	str	r3, [sp, #276]	@ 0x114
 801791e:	e753      	b.n	80177c8 <__ssvfiscanf_r+0x50>
 8017920:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017922:	4621      	mov	r1, r4
 8017924:	4630      	mov	r0, r6
 8017926:	4798      	blx	r3
 8017928:	2800      	cmp	r0, #0
 801792a:	d0eb      	beq.n	8017904 <__ssvfiscanf_r+0x18c>
 801792c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801792e:	2800      	cmp	r0, #0
 8017930:	f040 808b 	bne.w	8017a4a <__ssvfiscanf_r+0x2d2>
 8017934:	f04f 30ff 	mov.w	r0, #4294967295
 8017938:	e08b      	b.n	8017a52 <__ssvfiscanf_r+0x2da>
 801793a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801793c:	f042 0220 	orr.w	r2, r2, #32
 8017940:	9241      	str	r2, [sp, #260]	@ 0x104
 8017942:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017948:	9241      	str	r2, [sp, #260]	@ 0x104
 801794a:	2210      	movs	r2, #16
 801794c:	2b6e      	cmp	r3, #110	@ 0x6e
 801794e:	9242      	str	r2, [sp, #264]	@ 0x108
 8017950:	d902      	bls.n	8017958 <__ssvfiscanf_r+0x1e0>
 8017952:	e005      	b.n	8017960 <__ssvfiscanf_r+0x1e8>
 8017954:	2300      	movs	r3, #0
 8017956:	9342      	str	r3, [sp, #264]	@ 0x108
 8017958:	2303      	movs	r3, #3
 801795a:	e002      	b.n	8017962 <__ssvfiscanf_r+0x1ea>
 801795c:	2308      	movs	r3, #8
 801795e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017960:	2304      	movs	r3, #4
 8017962:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017964:	6863      	ldr	r3, [r4, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	dd39      	ble.n	80179de <__ssvfiscanf_r+0x266>
 801796a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801796c:	0659      	lsls	r1, r3, #25
 801796e:	d404      	bmi.n	801797a <__ssvfiscanf_r+0x202>
 8017970:	6823      	ldr	r3, [r4, #0]
 8017972:	781a      	ldrb	r2, [r3, #0]
 8017974:	5cba      	ldrb	r2, [r7, r2]
 8017976:	0712      	lsls	r2, r2, #28
 8017978:	d438      	bmi.n	80179ec <__ssvfiscanf_r+0x274>
 801797a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801797c:	2b02      	cmp	r3, #2
 801797e:	dc47      	bgt.n	8017a10 <__ssvfiscanf_r+0x298>
 8017980:	466b      	mov	r3, sp
 8017982:	4622      	mov	r2, r4
 8017984:	a941      	add	r1, sp, #260	@ 0x104
 8017986:	4630      	mov	r0, r6
 8017988:	f000 f9ae 	bl	8017ce8 <_scanf_chars>
 801798c:	2801      	cmp	r0, #1
 801798e:	d064      	beq.n	8017a5a <__ssvfiscanf_r+0x2e2>
 8017990:	2802      	cmp	r0, #2
 8017992:	f47f af19 	bne.w	80177c8 <__ssvfiscanf_r+0x50>
 8017996:	e7c9      	b.n	801792c <__ssvfiscanf_r+0x1b4>
 8017998:	220a      	movs	r2, #10
 801799a:	e7d7      	b.n	801794c <__ssvfiscanf_r+0x1d4>
 801799c:	4629      	mov	r1, r5
 801799e:	4640      	mov	r0, r8
 80179a0:	f000 faf0 	bl	8017f84 <__sccl>
 80179a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80179a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80179ac:	4605      	mov	r5, r0
 80179ae:	2301      	movs	r3, #1
 80179b0:	e7d7      	b.n	8017962 <__ssvfiscanf_r+0x1ea>
 80179b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80179b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80179ba:	2300      	movs	r3, #0
 80179bc:	e7d1      	b.n	8017962 <__ssvfiscanf_r+0x1ea>
 80179be:	2302      	movs	r3, #2
 80179c0:	e7cf      	b.n	8017962 <__ssvfiscanf_r+0x1ea>
 80179c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80179c4:	06c3      	lsls	r3, r0, #27
 80179c6:	f53f aeff 	bmi.w	80177c8 <__ssvfiscanf_r+0x50>
 80179ca:	9b00      	ldr	r3, [sp, #0]
 80179cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80179ce:	1d19      	adds	r1, r3, #4
 80179d0:	9100      	str	r1, [sp, #0]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	07c0      	lsls	r0, r0, #31
 80179d6:	bf4c      	ite	mi
 80179d8:	801a      	strhmi	r2, [r3, #0]
 80179da:	601a      	strpl	r2, [r3, #0]
 80179dc:	e6f4      	b.n	80177c8 <__ssvfiscanf_r+0x50>
 80179de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80179e0:	4621      	mov	r1, r4
 80179e2:	4630      	mov	r0, r6
 80179e4:	4798      	blx	r3
 80179e6:	2800      	cmp	r0, #0
 80179e8:	d0bf      	beq.n	801796a <__ssvfiscanf_r+0x1f2>
 80179ea:	e79f      	b.n	801792c <__ssvfiscanf_r+0x1b4>
 80179ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80179ee:	3201      	adds	r2, #1
 80179f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80179f2:	6862      	ldr	r2, [r4, #4]
 80179f4:	3a01      	subs	r2, #1
 80179f6:	2a00      	cmp	r2, #0
 80179f8:	6062      	str	r2, [r4, #4]
 80179fa:	dd02      	ble.n	8017a02 <__ssvfiscanf_r+0x28a>
 80179fc:	3301      	adds	r3, #1
 80179fe:	6023      	str	r3, [r4, #0]
 8017a00:	e7b6      	b.n	8017970 <__ssvfiscanf_r+0x1f8>
 8017a02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017a04:	4621      	mov	r1, r4
 8017a06:	4630      	mov	r0, r6
 8017a08:	4798      	blx	r3
 8017a0a:	2800      	cmp	r0, #0
 8017a0c:	d0b0      	beq.n	8017970 <__ssvfiscanf_r+0x1f8>
 8017a0e:	e78d      	b.n	801792c <__ssvfiscanf_r+0x1b4>
 8017a10:	2b04      	cmp	r3, #4
 8017a12:	dc0f      	bgt.n	8017a34 <__ssvfiscanf_r+0x2bc>
 8017a14:	466b      	mov	r3, sp
 8017a16:	4622      	mov	r2, r4
 8017a18:	a941      	add	r1, sp, #260	@ 0x104
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f000 f9be 	bl	8017d9c <_scanf_i>
 8017a20:	e7b4      	b.n	801798c <__ssvfiscanf_r+0x214>
 8017a22:	bf00      	nop
 8017a24:	080176c3 	.word	0x080176c3
 8017a28:	0801773d 	.word	0x0801773d
 8017a2c:	0801a2f9 	.word	0x0801a2f9
 8017a30:	0801a109 	.word	0x0801a109
 8017a34:	4b0a      	ldr	r3, [pc, #40]	@ (8017a60 <__ssvfiscanf_r+0x2e8>)
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	f43f aec6 	beq.w	80177c8 <__ssvfiscanf_r+0x50>
 8017a3c:	466b      	mov	r3, sp
 8017a3e:	4622      	mov	r2, r4
 8017a40:	a941      	add	r1, sp, #260	@ 0x104
 8017a42:	4630      	mov	r0, r6
 8017a44:	f3af 8000 	nop.w
 8017a48:	e7a0      	b.n	801798c <__ssvfiscanf_r+0x214>
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	065b      	lsls	r3, r3, #25
 8017a4e:	f53f af71 	bmi.w	8017934 <__ssvfiscanf_r+0x1bc>
 8017a52:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8017a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a5a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017a5c:	e7f9      	b.n	8017a52 <__ssvfiscanf_r+0x2da>
 8017a5e:	bf00      	nop
 8017a60:	00000000 	.word	0x00000000

08017a64 <__sfputc_r>:
 8017a64:	6893      	ldr	r3, [r2, #8]
 8017a66:	3b01      	subs	r3, #1
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	b410      	push	{r4}
 8017a6c:	6093      	str	r3, [r2, #8]
 8017a6e:	da08      	bge.n	8017a82 <__sfputc_r+0x1e>
 8017a70:	6994      	ldr	r4, [r2, #24]
 8017a72:	42a3      	cmp	r3, r4
 8017a74:	db01      	blt.n	8017a7a <__sfputc_r+0x16>
 8017a76:	290a      	cmp	r1, #10
 8017a78:	d103      	bne.n	8017a82 <__sfputc_r+0x1e>
 8017a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a7e:	f000 baf4 	b.w	801806a <__swbuf_r>
 8017a82:	6813      	ldr	r3, [r2, #0]
 8017a84:	1c58      	adds	r0, r3, #1
 8017a86:	6010      	str	r0, [r2, #0]
 8017a88:	7019      	strb	r1, [r3, #0]
 8017a8a:	4608      	mov	r0, r1
 8017a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a90:	4770      	bx	lr

08017a92 <__sfputs_r>:
 8017a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a94:	4606      	mov	r6, r0
 8017a96:	460f      	mov	r7, r1
 8017a98:	4614      	mov	r4, r2
 8017a9a:	18d5      	adds	r5, r2, r3
 8017a9c:	42ac      	cmp	r4, r5
 8017a9e:	d101      	bne.n	8017aa4 <__sfputs_r+0x12>
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	e007      	b.n	8017ab4 <__sfputs_r+0x22>
 8017aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017aa8:	463a      	mov	r2, r7
 8017aaa:	4630      	mov	r0, r6
 8017aac:	f7ff ffda 	bl	8017a64 <__sfputc_r>
 8017ab0:	1c43      	adds	r3, r0, #1
 8017ab2:	d1f3      	bne.n	8017a9c <__sfputs_r+0xa>
 8017ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017ab8 <_vfiprintf_r>:
 8017ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	460d      	mov	r5, r1
 8017abe:	b09d      	sub	sp, #116	@ 0x74
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	4698      	mov	r8, r3
 8017ac4:	4606      	mov	r6, r0
 8017ac6:	b118      	cbz	r0, 8017ad0 <_vfiprintf_r+0x18>
 8017ac8:	6a03      	ldr	r3, [r0, #32]
 8017aca:	b90b      	cbnz	r3, 8017ad0 <_vfiprintf_r+0x18>
 8017acc:	f7fc fee4 	bl	8014898 <__sinit>
 8017ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ad2:	07d9      	lsls	r1, r3, #31
 8017ad4:	d405      	bmi.n	8017ae2 <_vfiprintf_r+0x2a>
 8017ad6:	89ab      	ldrh	r3, [r5, #12]
 8017ad8:	059a      	lsls	r2, r3, #22
 8017ada:	d402      	bmi.n	8017ae2 <_vfiprintf_r+0x2a>
 8017adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ade:	f7fd fe79 	bl	80157d4 <__retarget_lock_acquire_recursive>
 8017ae2:	89ab      	ldrh	r3, [r5, #12]
 8017ae4:	071b      	lsls	r3, r3, #28
 8017ae6:	d501      	bpl.n	8017aec <_vfiprintf_r+0x34>
 8017ae8:	692b      	ldr	r3, [r5, #16]
 8017aea:	b99b      	cbnz	r3, 8017b14 <_vfiprintf_r+0x5c>
 8017aec:	4629      	mov	r1, r5
 8017aee:	4630      	mov	r0, r6
 8017af0:	f000 fafa 	bl	80180e8 <__swsetup_r>
 8017af4:	b170      	cbz	r0, 8017b14 <_vfiprintf_r+0x5c>
 8017af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017af8:	07dc      	lsls	r4, r3, #31
 8017afa:	d504      	bpl.n	8017b06 <_vfiprintf_r+0x4e>
 8017afc:	f04f 30ff 	mov.w	r0, #4294967295
 8017b00:	b01d      	add	sp, #116	@ 0x74
 8017b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b06:	89ab      	ldrh	r3, [r5, #12]
 8017b08:	0598      	lsls	r0, r3, #22
 8017b0a:	d4f7      	bmi.n	8017afc <_vfiprintf_r+0x44>
 8017b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b0e:	f7fd fe63 	bl	80157d8 <__retarget_lock_release_recursive>
 8017b12:	e7f3      	b.n	8017afc <_vfiprintf_r+0x44>
 8017b14:	2300      	movs	r3, #0
 8017b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b18:	2320      	movs	r3, #32
 8017b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b22:	2330      	movs	r3, #48	@ 0x30
 8017b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017cd4 <_vfiprintf_r+0x21c>
 8017b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b2c:	f04f 0901 	mov.w	r9, #1
 8017b30:	4623      	mov	r3, r4
 8017b32:	469a      	mov	sl, r3
 8017b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b38:	b10a      	cbz	r2, 8017b3e <_vfiprintf_r+0x86>
 8017b3a:	2a25      	cmp	r2, #37	@ 0x25
 8017b3c:	d1f9      	bne.n	8017b32 <_vfiprintf_r+0x7a>
 8017b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8017b42:	d00b      	beq.n	8017b5c <_vfiprintf_r+0xa4>
 8017b44:	465b      	mov	r3, fp
 8017b46:	4622      	mov	r2, r4
 8017b48:	4629      	mov	r1, r5
 8017b4a:	4630      	mov	r0, r6
 8017b4c:	f7ff ffa1 	bl	8017a92 <__sfputs_r>
 8017b50:	3001      	adds	r0, #1
 8017b52:	f000 80a7 	beq.w	8017ca4 <_vfiprintf_r+0x1ec>
 8017b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b58:	445a      	add	r2, fp
 8017b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f000 809f 	beq.w	8017ca4 <_vfiprintf_r+0x1ec>
 8017b66:	2300      	movs	r3, #0
 8017b68:	f04f 32ff 	mov.w	r2, #4294967295
 8017b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b70:	f10a 0a01 	add.w	sl, sl, #1
 8017b74:	9304      	str	r3, [sp, #16]
 8017b76:	9307      	str	r3, [sp, #28]
 8017b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b7e:	4654      	mov	r4, sl
 8017b80:	2205      	movs	r2, #5
 8017b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b86:	4853      	ldr	r0, [pc, #332]	@ (8017cd4 <_vfiprintf_r+0x21c>)
 8017b88:	f7e8 fb0a 	bl	80001a0 <memchr>
 8017b8c:	9a04      	ldr	r2, [sp, #16]
 8017b8e:	b9d8      	cbnz	r0, 8017bc8 <_vfiprintf_r+0x110>
 8017b90:	06d1      	lsls	r1, r2, #27
 8017b92:	bf44      	itt	mi
 8017b94:	2320      	movmi	r3, #32
 8017b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b9a:	0713      	lsls	r3, r2, #28
 8017b9c:	bf44      	itt	mi
 8017b9e:	232b      	movmi	r3, #43	@ 0x2b
 8017ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8017ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017baa:	d015      	beq.n	8017bd8 <_vfiprintf_r+0x120>
 8017bac:	9a07      	ldr	r2, [sp, #28]
 8017bae:	4654      	mov	r4, sl
 8017bb0:	2000      	movs	r0, #0
 8017bb2:	f04f 0c0a 	mov.w	ip, #10
 8017bb6:	4621      	mov	r1, r4
 8017bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bbc:	3b30      	subs	r3, #48	@ 0x30
 8017bbe:	2b09      	cmp	r3, #9
 8017bc0:	d94b      	bls.n	8017c5a <_vfiprintf_r+0x1a2>
 8017bc2:	b1b0      	cbz	r0, 8017bf2 <_vfiprintf_r+0x13a>
 8017bc4:	9207      	str	r2, [sp, #28]
 8017bc6:	e014      	b.n	8017bf2 <_vfiprintf_r+0x13a>
 8017bc8:	eba0 0308 	sub.w	r3, r0, r8
 8017bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8017bd0:	4313      	orrs	r3, r2
 8017bd2:	9304      	str	r3, [sp, #16]
 8017bd4:	46a2      	mov	sl, r4
 8017bd6:	e7d2      	b.n	8017b7e <_vfiprintf_r+0xc6>
 8017bd8:	9b03      	ldr	r3, [sp, #12]
 8017bda:	1d19      	adds	r1, r3, #4
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	9103      	str	r1, [sp, #12]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	bfbb      	ittet	lt
 8017be4:	425b      	neglt	r3, r3
 8017be6:	f042 0202 	orrlt.w	r2, r2, #2
 8017bea:	9307      	strge	r3, [sp, #28]
 8017bec:	9307      	strlt	r3, [sp, #28]
 8017bee:	bfb8      	it	lt
 8017bf0:	9204      	strlt	r2, [sp, #16]
 8017bf2:	7823      	ldrb	r3, [r4, #0]
 8017bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bf6:	d10a      	bne.n	8017c0e <_vfiprintf_r+0x156>
 8017bf8:	7863      	ldrb	r3, [r4, #1]
 8017bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bfc:	d132      	bne.n	8017c64 <_vfiprintf_r+0x1ac>
 8017bfe:	9b03      	ldr	r3, [sp, #12]
 8017c00:	1d1a      	adds	r2, r3, #4
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	9203      	str	r2, [sp, #12]
 8017c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c0a:	3402      	adds	r4, #2
 8017c0c:	9305      	str	r3, [sp, #20]
 8017c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017ce4 <_vfiprintf_r+0x22c>
 8017c12:	7821      	ldrb	r1, [r4, #0]
 8017c14:	2203      	movs	r2, #3
 8017c16:	4650      	mov	r0, sl
 8017c18:	f7e8 fac2 	bl	80001a0 <memchr>
 8017c1c:	b138      	cbz	r0, 8017c2e <_vfiprintf_r+0x176>
 8017c1e:	9b04      	ldr	r3, [sp, #16]
 8017c20:	eba0 000a 	sub.w	r0, r0, sl
 8017c24:	2240      	movs	r2, #64	@ 0x40
 8017c26:	4082      	lsls	r2, r0
 8017c28:	4313      	orrs	r3, r2
 8017c2a:	3401      	adds	r4, #1
 8017c2c:	9304      	str	r3, [sp, #16]
 8017c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c32:	4829      	ldr	r0, [pc, #164]	@ (8017cd8 <_vfiprintf_r+0x220>)
 8017c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c38:	2206      	movs	r2, #6
 8017c3a:	f7e8 fab1 	bl	80001a0 <memchr>
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	d03f      	beq.n	8017cc2 <_vfiprintf_r+0x20a>
 8017c42:	4b26      	ldr	r3, [pc, #152]	@ (8017cdc <_vfiprintf_r+0x224>)
 8017c44:	bb1b      	cbnz	r3, 8017c8e <_vfiprintf_r+0x1d6>
 8017c46:	9b03      	ldr	r3, [sp, #12]
 8017c48:	3307      	adds	r3, #7
 8017c4a:	f023 0307 	bic.w	r3, r3, #7
 8017c4e:	3308      	adds	r3, #8
 8017c50:	9303      	str	r3, [sp, #12]
 8017c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c54:	443b      	add	r3, r7
 8017c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c58:	e76a      	b.n	8017b30 <_vfiprintf_r+0x78>
 8017c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c5e:	460c      	mov	r4, r1
 8017c60:	2001      	movs	r0, #1
 8017c62:	e7a8      	b.n	8017bb6 <_vfiprintf_r+0xfe>
 8017c64:	2300      	movs	r3, #0
 8017c66:	3401      	adds	r4, #1
 8017c68:	9305      	str	r3, [sp, #20]
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	f04f 0c0a 	mov.w	ip, #10
 8017c70:	4620      	mov	r0, r4
 8017c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c76:	3a30      	subs	r2, #48	@ 0x30
 8017c78:	2a09      	cmp	r2, #9
 8017c7a:	d903      	bls.n	8017c84 <_vfiprintf_r+0x1cc>
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d0c6      	beq.n	8017c0e <_vfiprintf_r+0x156>
 8017c80:	9105      	str	r1, [sp, #20]
 8017c82:	e7c4      	b.n	8017c0e <_vfiprintf_r+0x156>
 8017c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c88:	4604      	mov	r4, r0
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	e7f0      	b.n	8017c70 <_vfiprintf_r+0x1b8>
 8017c8e:	ab03      	add	r3, sp, #12
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	462a      	mov	r2, r5
 8017c94:	4b12      	ldr	r3, [pc, #72]	@ (8017ce0 <_vfiprintf_r+0x228>)
 8017c96:	a904      	add	r1, sp, #16
 8017c98:	4630      	mov	r0, r6
 8017c9a:	f7fc f9bb 	bl	8014014 <_printf_float>
 8017c9e:	4607      	mov	r7, r0
 8017ca0:	1c78      	adds	r0, r7, #1
 8017ca2:	d1d6      	bne.n	8017c52 <_vfiprintf_r+0x19a>
 8017ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ca6:	07d9      	lsls	r1, r3, #31
 8017ca8:	d405      	bmi.n	8017cb6 <_vfiprintf_r+0x1fe>
 8017caa:	89ab      	ldrh	r3, [r5, #12]
 8017cac:	059a      	lsls	r2, r3, #22
 8017cae:	d402      	bmi.n	8017cb6 <_vfiprintf_r+0x1fe>
 8017cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017cb2:	f7fd fd91 	bl	80157d8 <__retarget_lock_release_recursive>
 8017cb6:	89ab      	ldrh	r3, [r5, #12]
 8017cb8:	065b      	lsls	r3, r3, #25
 8017cba:	f53f af1f 	bmi.w	8017afc <_vfiprintf_r+0x44>
 8017cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cc0:	e71e      	b.n	8017b00 <_vfiprintf_r+0x48>
 8017cc2:	ab03      	add	r3, sp, #12
 8017cc4:	9300      	str	r3, [sp, #0]
 8017cc6:	462a      	mov	r2, r5
 8017cc8:	4b05      	ldr	r3, [pc, #20]	@ (8017ce0 <_vfiprintf_r+0x228>)
 8017cca:	a904      	add	r1, sp, #16
 8017ccc:	4630      	mov	r0, r6
 8017cce:	f7fc fc39 	bl	8014544 <_printf_i>
 8017cd2:	e7e4      	b.n	8017c9e <_vfiprintf_r+0x1e6>
 8017cd4:	0801a103 	.word	0x0801a103
 8017cd8:	0801a10d 	.word	0x0801a10d
 8017cdc:	08014015 	.word	0x08014015
 8017ce0:	08017a93 	.word	0x08017a93
 8017ce4:	0801a109 	.word	0x0801a109

08017ce8 <_scanf_chars>:
 8017ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cec:	4615      	mov	r5, r2
 8017cee:	688a      	ldr	r2, [r1, #8]
 8017cf0:	4680      	mov	r8, r0
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	b932      	cbnz	r2, 8017d04 <_scanf_chars+0x1c>
 8017cf6:	698a      	ldr	r2, [r1, #24]
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	bf14      	ite	ne
 8017cfc:	f04f 32ff 	movne.w	r2, #4294967295
 8017d00:	2201      	moveq	r2, #1
 8017d02:	608a      	str	r2, [r1, #8]
 8017d04:	6822      	ldr	r2, [r4, #0]
 8017d06:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017d98 <_scanf_chars+0xb0>
 8017d0a:	06d1      	lsls	r1, r2, #27
 8017d0c:	bf5f      	itttt	pl
 8017d0e:	681a      	ldrpl	r2, [r3, #0]
 8017d10:	1d11      	addpl	r1, r2, #4
 8017d12:	6019      	strpl	r1, [r3, #0]
 8017d14:	6816      	ldrpl	r6, [r2, #0]
 8017d16:	2700      	movs	r7, #0
 8017d18:	69a0      	ldr	r0, [r4, #24]
 8017d1a:	b188      	cbz	r0, 8017d40 <_scanf_chars+0x58>
 8017d1c:	2801      	cmp	r0, #1
 8017d1e:	d107      	bne.n	8017d30 <_scanf_chars+0x48>
 8017d20:	682b      	ldr	r3, [r5, #0]
 8017d22:	781a      	ldrb	r2, [r3, #0]
 8017d24:	6963      	ldr	r3, [r4, #20]
 8017d26:	5c9b      	ldrb	r3, [r3, r2]
 8017d28:	b953      	cbnz	r3, 8017d40 <_scanf_chars+0x58>
 8017d2a:	2f00      	cmp	r7, #0
 8017d2c:	d031      	beq.n	8017d92 <_scanf_chars+0xaa>
 8017d2e:	e022      	b.n	8017d76 <_scanf_chars+0x8e>
 8017d30:	2802      	cmp	r0, #2
 8017d32:	d120      	bne.n	8017d76 <_scanf_chars+0x8e>
 8017d34:	682b      	ldr	r3, [r5, #0]
 8017d36:	781b      	ldrb	r3, [r3, #0]
 8017d38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d3c:	071b      	lsls	r3, r3, #28
 8017d3e:	d41a      	bmi.n	8017d76 <_scanf_chars+0x8e>
 8017d40:	6823      	ldr	r3, [r4, #0]
 8017d42:	06da      	lsls	r2, r3, #27
 8017d44:	bf5e      	ittt	pl
 8017d46:	682b      	ldrpl	r3, [r5, #0]
 8017d48:	781b      	ldrbpl	r3, [r3, #0]
 8017d4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d4e:	682a      	ldr	r2, [r5, #0]
 8017d50:	686b      	ldr	r3, [r5, #4]
 8017d52:	3201      	adds	r2, #1
 8017d54:	602a      	str	r2, [r5, #0]
 8017d56:	68a2      	ldr	r2, [r4, #8]
 8017d58:	3b01      	subs	r3, #1
 8017d5a:	3a01      	subs	r2, #1
 8017d5c:	606b      	str	r3, [r5, #4]
 8017d5e:	3701      	adds	r7, #1
 8017d60:	60a2      	str	r2, [r4, #8]
 8017d62:	b142      	cbz	r2, 8017d76 <_scanf_chars+0x8e>
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	dcd7      	bgt.n	8017d18 <_scanf_chars+0x30>
 8017d68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017d6c:	4629      	mov	r1, r5
 8017d6e:	4640      	mov	r0, r8
 8017d70:	4798      	blx	r3
 8017d72:	2800      	cmp	r0, #0
 8017d74:	d0d0      	beq.n	8017d18 <_scanf_chars+0x30>
 8017d76:	6823      	ldr	r3, [r4, #0]
 8017d78:	f013 0310 	ands.w	r3, r3, #16
 8017d7c:	d105      	bne.n	8017d8a <_scanf_chars+0xa2>
 8017d7e:	68e2      	ldr	r2, [r4, #12]
 8017d80:	3201      	adds	r2, #1
 8017d82:	60e2      	str	r2, [r4, #12]
 8017d84:	69a2      	ldr	r2, [r4, #24]
 8017d86:	b102      	cbz	r2, 8017d8a <_scanf_chars+0xa2>
 8017d88:	7033      	strb	r3, [r6, #0]
 8017d8a:	6923      	ldr	r3, [r4, #16]
 8017d8c:	443b      	add	r3, r7
 8017d8e:	6123      	str	r3, [r4, #16]
 8017d90:	2000      	movs	r0, #0
 8017d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d96:	bf00      	nop
 8017d98:	0801a2f9 	.word	0x0801a2f9

08017d9c <_scanf_i>:
 8017d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da0:	4698      	mov	r8, r3
 8017da2:	4b74      	ldr	r3, [pc, #464]	@ (8017f74 <_scanf_i+0x1d8>)
 8017da4:	460c      	mov	r4, r1
 8017da6:	4682      	mov	sl, r0
 8017da8:	4616      	mov	r6, r2
 8017daa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017dae:	b087      	sub	sp, #28
 8017db0:	ab03      	add	r3, sp, #12
 8017db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017db6:	4b70      	ldr	r3, [pc, #448]	@ (8017f78 <_scanf_i+0x1dc>)
 8017db8:	69a1      	ldr	r1, [r4, #24]
 8017dba:	4a70      	ldr	r2, [pc, #448]	@ (8017f7c <_scanf_i+0x1e0>)
 8017dbc:	2903      	cmp	r1, #3
 8017dbe:	bf08      	it	eq
 8017dc0:	461a      	moveq	r2, r3
 8017dc2:	68a3      	ldr	r3, [r4, #8]
 8017dc4:	9201      	str	r2, [sp, #4]
 8017dc6:	1e5a      	subs	r2, r3, #1
 8017dc8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017dcc:	bf88      	it	hi
 8017dce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017dd2:	4627      	mov	r7, r4
 8017dd4:	bf82      	ittt	hi
 8017dd6:	eb03 0905 	addhi.w	r9, r3, r5
 8017dda:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017dde:	60a3      	strhi	r3, [r4, #8]
 8017de0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017de4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017de8:	bf98      	it	ls
 8017dea:	f04f 0900 	movls.w	r9, #0
 8017dee:	6023      	str	r3, [r4, #0]
 8017df0:	463d      	mov	r5, r7
 8017df2:	f04f 0b00 	mov.w	fp, #0
 8017df6:	6831      	ldr	r1, [r6, #0]
 8017df8:	ab03      	add	r3, sp, #12
 8017dfa:	7809      	ldrb	r1, [r1, #0]
 8017dfc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e00:	2202      	movs	r2, #2
 8017e02:	f7e8 f9cd 	bl	80001a0 <memchr>
 8017e06:	b328      	cbz	r0, 8017e54 <_scanf_i+0xb8>
 8017e08:	f1bb 0f01 	cmp.w	fp, #1
 8017e0c:	d159      	bne.n	8017ec2 <_scanf_i+0x126>
 8017e0e:	6862      	ldr	r2, [r4, #4]
 8017e10:	b92a      	cbnz	r2, 8017e1e <_scanf_i+0x82>
 8017e12:	6822      	ldr	r2, [r4, #0]
 8017e14:	2108      	movs	r1, #8
 8017e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017e1a:	6061      	str	r1, [r4, #4]
 8017e1c:	6022      	str	r2, [r4, #0]
 8017e1e:	6822      	ldr	r2, [r4, #0]
 8017e20:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017e24:	6022      	str	r2, [r4, #0]
 8017e26:	68a2      	ldr	r2, [r4, #8]
 8017e28:	1e51      	subs	r1, r2, #1
 8017e2a:	60a1      	str	r1, [r4, #8]
 8017e2c:	b192      	cbz	r2, 8017e54 <_scanf_i+0xb8>
 8017e2e:	6832      	ldr	r2, [r6, #0]
 8017e30:	1c51      	adds	r1, r2, #1
 8017e32:	6031      	str	r1, [r6, #0]
 8017e34:	7812      	ldrb	r2, [r2, #0]
 8017e36:	f805 2b01 	strb.w	r2, [r5], #1
 8017e3a:	6872      	ldr	r2, [r6, #4]
 8017e3c:	3a01      	subs	r2, #1
 8017e3e:	2a00      	cmp	r2, #0
 8017e40:	6072      	str	r2, [r6, #4]
 8017e42:	dc07      	bgt.n	8017e54 <_scanf_i+0xb8>
 8017e44:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017e48:	4631      	mov	r1, r6
 8017e4a:	4650      	mov	r0, sl
 8017e4c:	4790      	blx	r2
 8017e4e:	2800      	cmp	r0, #0
 8017e50:	f040 8085 	bne.w	8017f5e <_scanf_i+0x1c2>
 8017e54:	f10b 0b01 	add.w	fp, fp, #1
 8017e58:	f1bb 0f03 	cmp.w	fp, #3
 8017e5c:	d1cb      	bne.n	8017df6 <_scanf_i+0x5a>
 8017e5e:	6863      	ldr	r3, [r4, #4]
 8017e60:	b90b      	cbnz	r3, 8017e66 <_scanf_i+0xca>
 8017e62:	230a      	movs	r3, #10
 8017e64:	6063      	str	r3, [r4, #4]
 8017e66:	6863      	ldr	r3, [r4, #4]
 8017e68:	4945      	ldr	r1, [pc, #276]	@ (8017f80 <_scanf_i+0x1e4>)
 8017e6a:	6960      	ldr	r0, [r4, #20]
 8017e6c:	1ac9      	subs	r1, r1, r3
 8017e6e:	f000 f889 	bl	8017f84 <__sccl>
 8017e72:	f04f 0b00 	mov.w	fp, #0
 8017e76:	68a3      	ldr	r3, [r4, #8]
 8017e78:	6822      	ldr	r2, [r4, #0]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d03d      	beq.n	8017efa <_scanf_i+0x15e>
 8017e7e:	6831      	ldr	r1, [r6, #0]
 8017e80:	6960      	ldr	r0, [r4, #20]
 8017e82:	f891 c000 	ldrb.w	ip, [r1]
 8017e86:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017e8a:	2800      	cmp	r0, #0
 8017e8c:	d035      	beq.n	8017efa <_scanf_i+0x15e>
 8017e8e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017e92:	d124      	bne.n	8017ede <_scanf_i+0x142>
 8017e94:	0510      	lsls	r0, r2, #20
 8017e96:	d522      	bpl.n	8017ede <_scanf_i+0x142>
 8017e98:	f10b 0b01 	add.w	fp, fp, #1
 8017e9c:	f1b9 0f00 	cmp.w	r9, #0
 8017ea0:	d003      	beq.n	8017eaa <_scanf_i+0x10e>
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ea8:	60a3      	str	r3, [r4, #8]
 8017eaa:	6873      	ldr	r3, [r6, #4]
 8017eac:	3b01      	subs	r3, #1
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	6073      	str	r3, [r6, #4]
 8017eb2:	dd1b      	ble.n	8017eec <_scanf_i+0x150>
 8017eb4:	6833      	ldr	r3, [r6, #0]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	6033      	str	r3, [r6, #0]
 8017eba:	68a3      	ldr	r3, [r4, #8]
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	60a3      	str	r3, [r4, #8]
 8017ec0:	e7d9      	b.n	8017e76 <_scanf_i+0xda>
 8017ec2:	f1bb 0f02 	cmp.w	fp, #2
 8017ec6:	d1ae      	bne.n	8017e26 <_scanf_i+0x8a>
 8017ec8:	6822      	ldr	r2, [r4, #0]
 8017eca:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017ece:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017ed2:	d1c4      	bne.n	8017e5e <_scanf_i+0xc2>
 8017ed4:	2110      	movs	r1, #16
 8017ed6:	6061      	str	r1, [r4, #4]
 8017ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017edc:	e7a2      	b.n	8017e24 <_scanf_i+0x88>
 8017ede:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017ee2:	6022      	str	r2, [r4, #0]
 8017ee4:	780b      	ldrb	r3, [r1, #0]
 8017ee6:	f805 3b01 	strb.w	r3, [r5], #1
 8017eea:	e7de      	b.n	8017eaa <_scanf_i+0x10e>
 8017eec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017ef0:	4631      	mov	r1, r6
 8017ef2:	4650      	mov	r0, sl
 8017ef4:	4798      	blx	r3
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	d0df      	beq.n	8017eba <_scanf_i+0x11e>
 8017efa:	6823      	ldr	r3, [r4, #0]
 8017efc:	05d9      	lsls	r1, r3, #23
 8017efe:	d50d      	bpl.n	8017f1c <_scanf_i+0x180>
 8017f00:	42bd      	cmp	r5, r7
 8017f02:	d909      	bls.n	8017f18 <_scanf_i+0x17c>
 8017f04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017f0c:	4632      	mov	r2, r6
 8017f0e:	4650      	mov	r0, sl
 8017f10:	4798      	blx	r3
 8017f12:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f16:	464d      	mov	r5, r9
 8017f18:	42bd      	cmp	r5, r7
 8017f1a:	d028      	beq.n	8017f6e <_scanf_i+0x1d2>
 8017f1c:	6822      	ldr	r2, [r4, #0]
 8017f1e:	f012 0210 	ands.w	r2, r2, #16
 8017f22:	d113      	bne.n	8017f4c <_scanf_i+0x1b0>
 8017f24:	702a      	strb	r2, [r5, #0]
 8017f26:	6863      	ldr	r3, [r4, #4]
 8017f28:	9e01      	ldr	r6, [sp, #4]
 8017f2a:	4639      	mov	r1, r7
 8017f2c:	4650      	mov	r0, sl
 8017f2e:	47b0      	blx	r6
 8017f30:	f8d8 3000 	ldr.w	r3, [r8]
 8017f34:	6821      	ldr	r1, [r4, #0]
 8017f36:	1d1a      	adds	r2, r3, #4
 8017f38:	f8c8 2000 	str.w	r2, [r8]
 8017f3c:	f011 0f20 	tst.w	r1, #32
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	d00f      	beq.n	8017f64 <_scanf_i+0x1c8>
 8017f44:	6018      	str	r0, [r3, #0]
 8017f46:	68e3      	ldr	r3, [r4, #12]
 8017f48:	3301      	adds	r3, #1
 8017f4a:	60e3      	str	r3, [r4, #12]
 8017f4c:	6923      	ldr	r3, [r4, #16]
 8017f4e:	1bed      	subs	r5, r5, r7
 8017f50:	445d      	add	r5, fp
 8017f52:	442b      	add	r3, r5
 8017f54:	6123      	str	r3, [r4, #16]
 8017f56:	2000      	movs	r0, #0
 8017f58:	b007      	add	sp, #28
 8017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5e:	f04f 0b00 	mov.w	fp, #0
 8017f62:	e7ca      	b.n	8017efa <_scanf_i+0x15e>
 8017f64:	07ca      	lsls	r2, r1, #31
 8017f66:	bf4c      	ite	mi
 8017f68:	8018      	strhmi	r0, [r3, #0]
 8017f6a:	6018      	strpl	r0, [r3, #0]
 8017f6c:	e7eb      	b.n	8017f46 <_scanf_i+0x1aa>
 8017f6e:	2001      	movs	r0, #1
 8017f70:	e7f2      	b.n	8017f58 <_scanf_i+0x1bc>
 8017f72:	bf00      	nop
 8017f74:	08019ddc 	.word	0x08019ddc
 8017f78:	08018321 	.word	0x08018321
 8017f7c:	08016f71 	.word	0x08016f71
 8017f80:	0801a12e 	.word	0x0801a12e

08017f84 <__sccl>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	780b      	ldrb	r3, [r1, #0]
 8017f88:	4604      	mov	r4, r0
 8017f8a:	2b5e      	cmp	r3, #94	@ 0x5e
 8017f8c:	bf0b      	itete	eq
 8017f8e:	784b      	ldrbeq	r3, [r1, #1]
 8017f90:	1c4a      	addne	r2, r1, #1
 8017f92:	1c8a      	addeq	r2, r1, #2
 8017f94:	2100      	movne	r1, #0
 8017f96:	bf08      	it	eq
 8017f98:	2101      	moveq	r1, #1
 8017f9a:	3801      	subs	r0, #1
 8017f9c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017fa0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fa4:	42a8      	cmp	r0, r5
 8017fa6:	d1fb      	bne.n	8017fa0 <__sccl+0x1c>
 8017fa8:	b90b      	cbnz	r3, 8017fae <__sccl+0x2a>
 8017faa:	1e50      	subs	r0, r2, #1
 8017fac:	bd70      	pop	{r4, r5, r6, pc}
 8017fae:	f081 0101 	eor.w	r1, r1, #1
 8017fb2:	54e1      	strb	r1, [r4, r3]
 8017fb4:	4610      	mov	r0, r2
 8017fb6:	4602      	mov	r2, r0
 8017fb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017fbc:	2d2d      	cmp	r5, #45	@ 0x2d
 8017fbe:	d005      	beq.n	8017fcc <__sccl+0x48>
 8017fc0:	2d5d      	cmp	r5, #93	@ 0x5d
 8017fc2:	d016      	beq.n	8017ff2 <__sccl+0x6e>
 8017fc4:	2d00      	cmp	r5, #0
 8017fc6:	d0f1      	beq.n	8017fac <__sccl+0x28>
 8017fc8:	462b      	mov	r3, r5
 8017fca:	e7f2      	b.n	8017fb2 <__sccl+0x2e>
 8017fcc:	7846      	ldrb	r6, [r0, #1]
 8017fce:	2e5d      	cmp	r6, #93	@ 0x5d
 8017fd0:	d0fa      	beq.n	8017fc8 <__sccl+0x44>
 8017fd2:	42b3      	cmp	r3, r6
 8017fd4:	dcf8      	bgt.n	8017fc8 <__sccl+0x44>
 8017fd6:	3002      	adds	r0, #2
 8017fd8:	461a      	mov	r2, r3
 8017fda:	3201      	adds	r2, #1
 8017fdc:	4296      	cmp	r6, r2
 8017fde:	54a1      	strb	r1, [r4, r2]
 8017fe0:	dcfb      	bgt.n	8017fda <__sccl+0x56>
 8017fe2:	1af2      	subs	r2, r6, r3
 8017fe4:	3a01      	subs	r2, #1
 8017fe6:	1c5d      	adds	r5, r3, #1
 8017fe8:	42b3      	cmp	r3, r6
 8017fea:	bfa8      	it	ge
 8017fec:	2200      	movge	r2, #0
 8017fee:	18ab      	adds	r3, r5, r2
 8017ff0:	e7e1      	b.n	8017fb6 <__sccl+0x32>
 8017ff2:	4610      	mov	r0, r2
 8017ff4:	e7da      	b.n	8017fac <__sccl+0x28>

08017ff6 <__submore>:
 8017ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ffa:	460c      	mov	r4, r1
 8017ffc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018002:	4299      	cmp	r1, r3
 8018004:	d11d      	bne.n	8018042 <__submore+0x4c>
 8018006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801800a:	f7fe fb3d 	bl	8016688 <_malloc_r>
 801800e:	b918      	cbnz	r0, 8018018 <__submore+0x22>
 8018010:	f04f 30ff 	mov.w	r0, #4294967295
 8018014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801801c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801801e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018022:	6360      	str	r0, [r4, #52]	@ 0x34
 8018024:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018028:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801802c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018030:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018034:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018038:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801803c:	6020      	str	r0, [r4, #0]
 801803e:	2000      	movs	r0, #0
 8018040:	e7e8      	b.n	8018014 <__submore+0x1e>
 8018042:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018044:	0077      	lsls	r7, r6, #1
 8018046:	463a      	mov	r2, r7
 8018048:	f7ff fb00 	bl	801764c <_realloc_r>
 801804c:	4605      	mov	r5, r0
 801804e:	2800      	cmp	r0, #0
 8018050:	d0de      	beq.n	8018010 <__submore+0x1a>
 8018052:	eb00 0806 	add.w	r8, r0, r6
 8018056:	4601      	mov	r1, r0
 8018058:	4632      	mov	r2, r6
 801805a:	4640      	mov	r0, r8
 801805c:	f7fd fbc5 	bl	80157ea <memcpy>
 8018060:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018064:	f8c4 8000 	str.w	r8, [r4]
 8018068:	e7e9      	b.n	801803e <__submore+0x48>

0801806a <__swbuf_r>:
 801806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801806c:	460e      	mov	r6, r1
 801806e:	4614      	mov	r4, r2
 8018070:	4605      	mov	r5, r0
 8018072:	b118      	cbz	r0, 801807c <__swbuf_r+0x12>
 8018074:	6a03      	ldr	r3, [r0, #32]
 8018076:	b90b      	cbnz	r3, 801807c <__swbuf_r+0x12>
 8018078:	f7fc fc0e 	bl	8014898 <__sinit>
 801807c:	69a3      	ldr	r3, [r4, #24]
 801807e:	60a3      	str	r3, [r4, #8]
 8018080:	89a3      	ldrh	r3, [r4, #12]
 8018082:	071a      	lsls	r2, r3, #28
 8018084:	d501      	bpl.n	801808a <__swbuf_r+0x20>
 8018086:	6923      	ldr	r3, [r4, #16]
 8018088:	b943      	cbnz	r3, 801809c <__swbuf_r+0x32>
 801808a:	4621      	mov	r1, r4
 801808c:	4628      	mov	r0, r5
 801808e:	f000 f82b 	bl	80180e8 <__swsetup_r>
 8018092:	b118      	cbz	r0, 801809c <__swbuf_r+0x32>
 8018094:	f04f 37ff 	mov.w	r7, #4294967295
 8018098:	4638      	mov	r0, r7
 801809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	6922      	ldr	r2, [r4, #16]
 80180a0:	1a98      	subs	r0, r3, r2
 80180a2:	6963      	ldr	r3, [r4, #20]
 80180a4:	b2f6      	uxtb	r6, r6
 80180a6:	4283      	cmp	r3, r0
 80180a8:	4637      	mov	r7, r6
 80180aa:	dc05      	bgt.n	80180b8 <__swbuf_r+0x4e>
 80180ac:	4621      	mov	r1, r4
 80180ae:	4628      	mov	r0, r5
 80180b0:	f7ff f946 	bl	8017340 <_fflush_r>
 80180b4:	2800      	cmp	r0, #0
 80180b6:	d1ed      	bne.n	8018094 <__swbuf_r+0x2a>
 80180b8:	68a3      	ldr	r3, [r4, #8]
 80180ba:	3b01      	subs	r3, #1
 80180bc:	60a3      	str	r3, [r4, #8]
 80180be:	6823      	ldr	r3, [r4, #0]
 80180c0:	1c5a      	adds	r2, r3, #1
 80180c2:	6022      	str	r2, [r4, #0]
 80180c4:	701e      	strb	r6, [r3, #0]
 80180c6:	6962      	ldr	r2, [r4, #20]
 80180c8:	1c43      	adds	r3, r0, #1
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d004      	beq.n	80180d8 <__swbuf_r+0x6e>
 80180ce:	89a3      	ldrh	r3, [r4, #12]
 80180d0:	07db      	lsls	r3, r3, #31
 80180d2:	d5e1      	bpl.n	8018098 <__swbuf_r+0x2e>
 80180d4:	2e0a      	cmp	r6, #10
 80180d6:	d1df      	bne.n	8018098 <__swbuf_r+0x2e>
 80180d8:	4621      	mov	r1, r4
 80180da:	4628      	mov	r0, r5
 80180dc:	f7ff f930 	bl	8017340 <_fflush_r>
 80180e0:	2800      	cmp	r0, #0
 80180e2:	d0d9      	beq.n	8018098 <__swbuf_r+0x2e>
 80180e4:	e7d6      	b.n	8018094 <__swbuf_r+0x2a>
	...

080180e8 <__swsetup_r>:
 80180e8:	b538      	push	{r3, r4, r5, lr}
 80180ea:	4b29      	ldr	r3, [pc, #164]	@ (8018190 <__swsetup_r+0xa8>)
 80180ec:	4605      	mov	r5, r0
 80180ee:	6818      	ldr	r0, [r3, #0]
 80180f0:	460c      	mov	r4, r1
 80180f2:	b118      	cbz	r0, 80180fc <__swsetup_r+0x14>
 80180f4:	6a03      	ldr	r3, [r0, #32]
 80180f6:	b90b      	cbnz	r3, 80180fc <__swsetup_r+0x14>
 80180f8:	f7fc fbce 	bl	8014898 <__sinit>
 80180fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018100:	0719      	lsls	r1, r3, #28
 8018102:	d422      	bmi.n	801814a <__swsetup_r+0x62>
 8018104:	06da      	lsls	r2, r3, #27
 8018106:	d407      	bmi.n	8018118 <__swsetup_r+0x30>
 8018108:	2209      	movs	r2, #9
 801810a:	602a      	str	r2, [r5, #0]
 801810c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018110:	81a3      	strh	r3, [r4, #12]
 8018112:	f04f 30ff 	mov.w	r0, #4294967295
 8018116:	e033      	b.n	8018180 <__swsetup_r+0x98>
 8018118:	0758      	lsls	r0, r3, #29
 801811a:	d512      	bpl.n	8018142 <__swsetup_r+0x5a>
 801811c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801811e:	b141      	cbz	r1, 8018132 <__swsetup_r+0x4a>
 8018120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018124:	4299      	cmp	r1, r3
 8018126:	d002      	beq.n	801812e <__swsetup_r+0x46>
 8018128:	4628      	mov	r0, r5
 801812a:	f7fe f9ed 	bl	8016508 <_free_r>
 801812e:	2300      	movs	r3, #0
 8018130:	6363      	str	r3, [r4, #52]	@ 0x34
 8018132:	89a3      	ldrh	r3, [r4, #12]
 8018134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018138:	81a3      	strh	r3, [r4, #12]
 801813a:	2300      	movs	r3, #0
 801813c:	6063      	str	r3, [r4, #4]
 801813e:	6923      	ldr	r3, [r4, #16]
 8018140:	6023      	str	r3, [r4, #0]
 8018142:	89a3      	ldrh	r3, [r4, #12]
 8018144:	f043 0308 	orr.w	r3, r3, #8
 8018148:	81a3      	strh	r3, [r4, #12]
 801814a:	6923      	ldr	r3, [r4, #16]
 801814c:	b94b      	cbnz	r3, 8018162 <__swsetup_r+0x7a>
 801814e:	89a3      	ldrh	r3, [r4, #12]
 8018150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018158:	d003      	beq.n	8018162 <__swsetup_r+0x7a>
 801815a:	4621      	mov	r1, r4
 801815c:	4628      	mov	r0, r5
 801815e:	f000 f907 	bl	8018370 <__smakebuf_r>
 8018162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018166:	f013 0201 	ands.w	r2, r3, #1
 801816a:	d00a      	beq.n	8018182 <__swsetup_r+0x9a>
 801816c:	2200      	movs	r2, #0
 801816e:	60a2      	str	r2, [r4, #8]
 8018170:	6962      	ldr	r2, [r4, #20]
 8018172:	4252      	negs	r2, r2
 8018174:	61a2      	str	r2, [r4, #24]
 8018176:	6922      	ldr	r2, [r4, #16]
 8018178:	b942      	cbnz	r2, 801818c <__swsetup_r+0xa4>
 801817a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801817e:	d1c5      	bne.n	801810c <__swsetup_r+0x24>
 8018180:	bd38      	pop	{r3, r4, r5, pc}
 8018182:	0799      	lsls	r1, r3, #30
 8018184:	bf58      	it	pl
 8018186:	6962      	ldrpl	r2, [r4, #20]
 8018188:	60a2      	str	r2, [r4, #8]
 801818a:	e7f4      	b.n	8018176 <__swsetup_r+0x8e>
 801818c:	2000      	movs	r0, #0
 801818e:	e7f7      	b.n	8018180 <__swsetup_r+0x98>
 8018190:	20000038 	.word	0x20000038

08018194 <_raise_r>:
 8018194:	291f      	cmp	r1, #31
 8018196:	b538      	push	{r3, r4, r5, lr}
 8018198:	4605      	mov	r5, r0
 801819a:	460c      	mov	r4, r1
 801819c:	d904      	bls.n	80181a8 <_raise_r+0x14>
 801819e:	2316      	movs	r3, #22
 80181a0:	6003      	str	r3, [r0, #0]
 80181a2:	f04f 30ff 	mov.w	r0, #4294967295
 80181a6:	bd38      	pop	{r3, r4, r5, pc}
 80181a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181aa:	b112      	cbz	r2, 80181b2 <_raise_r+0x1e>
 80181ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181b0:	b94b      	cbnz	r3, 80181c6 <_raise_r+0x32>
 80181b2:	4628      	mov	r0, r5
 80181b4:	f000 f830 	bl	8018218 <_getpid_r>
 80181b8:	4622      	mov	r2, r4
 80181ba:	4601      	mov	r1, r0
 80181bc:	4628      	mov	r0, r5
 80181be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181c2:	f000 b817 	b.w	80181f4 <_kill_r>
 80181c6:	2b01      	cmp	r3, #1
 80181c8:	d00a      	beq.n	80181e0 <_raise_r+0x4c>
 80181ca:	1c59      	adds	r1, r3, #1
 80181cc:	d103      	bne.n	80181d6 <_raise_r+0x42>
 80181ce:	2316      	movs	r3, #22
 80181d0:	6003      	str	r3, [r0, #0]
 80181d2:	2001      	movs	r0, #1
 80181d4:	e7e7      	b.n	80181a6 <_raise_r+0x12>
 80181d6:	2100      	movs	r1, #0
 80181d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80181dc:	4620      	mov	r0, r4
 80181de:	4798      	blx	r3
 80181e0:	2000      	movs	r0, #0
 80181e2:	e7e0      	b.n	80181a6 <_raise_r+0x12>

080181e4 <raise>:
 80181e4:	4b02      	ldr	r3, [pc, #8]	@ (80181f0 <raise+0xc>)
 80181e6:	4601      	mov	r1, r0
 80181e8:	6818      	ldr	r0, [r3, #0]
 80181ea:	f7ff bfd3 	b.w	8018194 <_raise_r>
 80181ee:	bf00      	nop
 80181f0:	20000038 	.word	0x20000038

080181f4 <_kill_r>:
 80181f4:	b538      	push	{r3, r4, r5, lr}
 80181f6:	4d07      	ldr	r5, [pc, #28]	@ (8018214 <_kill_r+0x20>)
 80181f8:	2300      	movs	r3, #0
 80181fa:	4604      	mov	r4, r0
 80181fc:	4608      	mov	r0, r1
 80181fe:	4611      	mov	r1, r2
 8018200:	602b      	str	r3, [r5, #0]
 8018202:	f7f3 fd0b 	bl	800bc1c <_kill>
 8018206:	1c43      	adds	r3, r0, #1
 8018208:	d102      	bne.n	8018210 <_kill_r+0x1c>
 801820a:	682b      	ldr	r3, [r5, #0]
 801820c:	b103      	cbz	r3, 8018210 <_kill_r+0x1c>
 801820e:	6023      	str	r3, [r4, #0]
 8018210:	bd38      	pop	{r3, r4, r5, pc}
 8018212:	bf00      	nop
 8018214:	2000a8f4 	.word	0x2000a8f4

08018218 <_getpid_r>:
 8018218:	f7f3 bcf8 	b.w	800bc0c <_getpid>

0801821c <_malloc_usable_size_r>:
 801821c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018220:	1f18      	subs	r0, r3, #4
 8018222:	2b00      	cmp	r3, #0
 8018224:	bfbc      	itt	lt
 8018226:	580b      	ldrlt	r3, [r1, r0]
 8018228:	18c0      	addlt	r0, r0, r3
 801822a:	4770      	bx	lr

0801822c <_strtol_l.isra.0>:
 801822c:	2b24      	cmp	r3, #36	@ 0x24
 801822e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018232:	4686      	mov	lr, r0
 8018234:	4690      	mov	r8, r2
 8018236:	d801      	bhi.n	801823c <_strtol_l.isra.0+0x10>
 8018238:	2b01      	cmp	r3, #1
 801823a:	d106      	bne.n	801824a <_strtol_l.isra.0+0x1e>
 801823c:	f7fd fa9e 	bl	801577c <__errno>
 8018240:	2316      	movs	r3, #22
 8018242:	6003      	str	r3, [r0, #0]
 8018244:	2000      	movs	r0, #0
 8018246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801824a:	4834      	ldr	r0, [pc, #208]	@ (801831c <_strtol_l.isra.0+0xf0>)
 801824c:	460d      	mov	r5, r1
 801824e:	462a      	mov	r2, r5
 8018250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018254:	5d06      	ldrb	r6, [r0, r4]
 8018256:	f016 0608 	ands.w	r6, r6, #8
 801825a:	d1f8      	bne.n	801824e <_strtol_l.isra.0+0x22>
 801825c:	2c2d      	cmp	r4, #45	@ 0x2d
 801825e:	d110      	bne.n	8018282 <_strtol_l.isra.0+0x56>
 8018260:	782c      	ldrb	r4, [r5, #0]
 8018262:	2601      	movs	r6, #1
 8018264:	1c95      	adds	r5, r2, #2
 8018266:	f033 0210 	bics.w	r2, r3, #16
 801826a:	d115      	bne.n	8018298 <_strtol_l.isra.0+0x6c>
 801826c:	2c30      	cmp	r4, #48	@ 0x30
 801826e:	d10d      	bne.n	801828c <_strtol_l.isra.0+0x60>
 8018270:	782a      	ldrb	r2, [r5, #0]
 8018272:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018276:	2a58      	cmp	r2, #88	@ 0x58
 8018278:	d108      	bne.n	801828c <_strtol_l.isra.0+0x60>
 801827a:	786c      	ldrb	r4, [r5, #1]
 801827c:	3502      	adds	r5, #2
 801827e:	2310      	movs	r3, #16
 8018280:	e00a      	b.n	8018298 <_strtol_l.isra.0+0x6c>
 8018282:	2c2b      	cmp	r4, #43	@ 0x2b
 8018284:	bf04      	itt	eq
 8018286:	782c      	ldrbeq	r4, [r5, #0]
 8018288:	1c95      	addeq	r5, r2, #2
 801828a:	e7ec      	b.n	8018266 <_strtol_l.isra.0+0x3a>
 801828c:	2b00      	cmp	r3, #0
 801828e:	d1f6      	bne.n	801827e <_strtol_l.isra.0+0x52>
 8018290:	2c30      	cmp	r4, #48	@ 0x30
 8018292:	bf14      	ite	ne
 8018294:	230a      	movne	r3, #10
 8018296:	2308      	moveq	r3, #8
 8018298:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801829c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80182a0:	2200      	movs	r2, #0
 80182a2:	fbbc f9f3 	udiv	r9, ip, r3
 80182a6:	4610      	mov	r0, r2
 80182a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80182ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80182b0:	2f09      	cmp	r7, #9
 80182b2:	d80f      	bhi.n	80182d4 <_strtol_l.isra.0+0xa8>
 80182b4:	463c      	mov	r4, r7
 80182b6:	42a3      	cmp	r3, r4
 80182b8:	dd1b      	ble.n	80182f2 <_strtol_l.isra.0+0xc6>
 80182ba:	1c57      	adds	r7, r2, #1
 80182bc:	d007      	beq.n	80182ce <_strtol_l.isra.0+0xa2>
 80182be:	4581      	cmp	r9, r0
 80182c0:	d314      	bcc.n	80182ec <_strtol_l.isra.0+0xc0>
 80182c2:	d101      	bne.n	80182c8 <_strtol_l.isra.0+0x9c>
 80182c4:	45a2      	cmp	sl, r4
 80182c6:	db11      	blt.n	80182ec <_strtol_l.isra.0+0xc0>
 80182c8:	fb00 4003 	mla	r0, r0, r3, r4
 80182cc:	2201      	movs	r2, #1
 80182ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182d2:	e7eb      	b.n	80182ac <_strtol_l.isra.0+0x80>
 80182d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80182d8:	2f19      	cmp	r7, #25
 80182da:	d801      	bhi.n	80182e0 <_strtol_l.isra.0+0xb4>
 80182dc:	3c37      	subs	r4, #55	@ 0x37
 80182de:	e7ea      	b.n	80182b6 <_strtol_l.isra.0+0x8a>
 80182e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80182e4:	2f19      	cmp	r7, #25
 80182e6:	d804      	bhi.n	80182f2 <_strtol_l.isra.0+0xc6>
 80182e8:	3c57      	subs	r4, #87	@ 0x57
 80182ea:	e7e4      	b.n	80182b6 <_strtol_l.isra.0+0x8a>
 80182ec:	f04f 32ff 	mov.w	r2, #4294967295
 80182f0:	e7ed      	b.n	80182ce <_strtol_l.isra.0+0xa2>
 80182f2:	1c53      	adds	r3, r2, #1
 80182f4:	d108      	bne.n	8018308 <_strtol_l.isra.0+0xdc>
 80182f6:	2322      	movs	r3, #34	@ 0x22
 80182f8:	f8ce 3000 	str.w	r3, [lr]
 80182fc:	4660      	mov	r0, ip
 80182fe:	f1b8 0f00 	cmp.w	r8, #0
 8018302:	d0a0      	beq.n	8018246 <_strtol_l.isra.0+0x1a>
 8018304:	1e69      	subs	r1, r5, #1
 8018306:	e006      	b.n	8018316 <_strtol_l.isra.0+0xea>
 8018308:	b106      	cbz	r6, 801830c <_strtol_l.isra.0+0xe0>
 801830a:	4240      	negs	r0, r0
 801830c:	f1b8 0f00 	cmp.w	r8, #0
 8018310:	d099      	beq.n	8018246 <_strtol_l.isra.0+0x1a>
 8018312:	2a00      	cmp	r2, #0
 8018314:	d1f6      	bne.n	8018304 <_strtol_l.isra.0+0xd8>
 8018316:	f8c8 1000 	str.w	r1, [r8]
 801831a:	e794      	b.n	8018246 <_strtol_l.isra.0+0x1a>
 801831c:	0801a2f9 	.word	0x0801a2f9

08018320 <_strtol_r>:
 8018320:	f7ff bf84 	b.w	801822c <_strtol_l.isra.0>

08018324 <__swhatbuf_r>:
 8018324:	b570      	push	{r4, r5, r6, lr}
 8018326:	460c      	mov	r4, r1
 8018328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801832c:	2900      	cmp	r1, #0
 801832e:	b096      	sub	sp, #88	@ 0x58
 8018330:	4615      	mov	r5, r2
 8018332:	461e      	mov	r6, r3
 8018334:	da0d      	bge.n	8018352 <__swhatbuf_r+0x2e>
 8018336:	89a3      	ldrh	r3, [r4, #12]
 8018338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801833c:	f04f 0100 	mov.w	r1, #0
 8018340:	bf14      	ite	ne
 8018342:	2340      	movne	r3, #64	@ 0x40
 8018344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018348:	2000      	movs	r0, #0
 801834a:	6031      	str	r1, [r6, #0]
 801834c:	602b      	str	r3, [r5, #0]
 801834e:	b016      	add	sp, #88	@ 0x58
 8018350:	bd70      	pop	{r4, r5, r6, pc}
 8018352:	466a      	mov	r2, sp
 8018354:	f000 f848 	bl	80183e8 <_fstat_r>
 8018358:	2800      	cmp	r0, #0
 801835a:	dbec      	blt.n	8018336 <__swhatbuf_r+0x12>
 801835c:	9901      	ldr	r1, [sp, #4]
 801835e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018366:	4259      	negs	r1, r3
 8018368:	4159      	adcs	r1, r3
 801836a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801836e:	e7eb      	b.n	8018348 <__swhatbuf_r+0x24>

08018370 <__smakebuf_r>:
 8018370:	898b      	ldrh	r3, [r1, #12]
 8018372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018374:	079d      	lsls	r5, r3, #30
 8018376:	4606      	mov	r6, r0
 8018378:	460c      	mov	r4, r1
 801837a:	d507      	bpl.n	801838c <__smakebuf_r+0x1c>
 801837c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018380:	6023      	str	r3, [r4, #0]
 8018382:	6123      	str	r3, [r4, #16]
 8018384:	2301      	movs	r3, #1
 8018386:	6163      	str	r3, [r4, #20]
 8018388:	b003      	add	sp, #12
 801838a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801838c:	ab01      	add	r3, sp, #4
 801838e:	466a      	mov	r2, sp
 8018390:	f7ff ffc8 	bl	8018324 <__swhatbuf_r>
 8018394:	9f00      	ldr	r7, [sp, #0]
 8018396:	4605      	mov	r5, r0
 8018398:	4639      	mov	r1, r7
 801839a:	4630      	mov	r0, r6
 801839c:	f7fe f974 	bl	8016688 <_malloc_r>
 80183a0:	b948      	cbnz	r0, 80183b6 <__smakebuf_r+0x46>
 80183a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183a6:	059a      	lsls	r2, r3, #22
 80183a8:	d4ee      	bmi.n	8018388 <__smakebuf_r+0x18>
 80183aa:	f023 0303 	bic.w	r3, r3, #3
 80183ae:	f043 0302 	orr.w	r3, r3, #2
 80183b2:	81a3      	strh	r3, [r4, #12]
 80183b4:	e7e2      	b.n	801837c <__smakebuf_r+0xc>
 80183b6:	89a3      	ldrh	r3, [r4, #12]
 80183b8:	6020      	str	r0, [r4, #0]
 80183ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183be:	81a3      	strh	r3, [r4, #12]
 80183c0:	9b01      	ldr	r3, [sp, #4]
 80183c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80183c6:	b15b      	cbz	r3, 80183e0 <__smakebuf_r+0x70>
 80183c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183cc:	4630      	mov	r0, r6
 80183ce:	f000 f81d 	bl	801840c <_isatty_r>
 80183d2:	b128      	cbz	r0, 80183e0 <__smakebuf_r+0x70>
 80183d4:	89a3      	ldrh	r3, [r4, #12]
 80183d6:	f023 0303 	bic.w	r3, r3, #3
 80183da:	f043 0301 	orr.w	r3, r3, #1
 80183de:	81a3      	strh	r3, [r4, #12]
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	431d      	orrs	r5, r3
 80183e4:	81a5      	strh	r5, [r4, #12]
 80183e6:	e7cf      	b.n	8018388 <__smakebuf_r+0x18>

080183e8 <_fstat_r>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4d07      	ldr	r5, [pc, #28]	@ (8018408 <_fstat_r+0x20>)
 80183ec:	2300      	movs	r3, #0
 80183ee:	4604      	mov	r4, r0
 80183f0:	4608      	mov	r0, r1
 80183f2:	4611      	mov	r1, r2
 80183f4:	602b      	str	r3, [r5, #0]
 80183f6:	f7f3 fc71 	bl	800bcdc <_fstat>
 80183fa:	1c43      	adds	r3, r0, #1
 80183fc:	d102      	bne.n	8018404 <_fstat_r+0x1c>
 80183fe:	682b      	ldr	r3, [r5, #0]
 8018400:	b103      	cbz	r3, 8018404 <_fstat_r+0x1c>
 8018402:	6023      	str	r3, [r4, #0]
 8018404:	bd38      	pop	{r3, r4, r5, pc}
 8018406:	bf00      	nop
 8018408:	2000a8f4 	.word	0x2000a8f4

0801840c <_isatty_r>:
 801840c:	b538      	push	{r3, r4, r5, lr}
 801840e:	4d06      	ldr	r5, [pc, #24]	@ (8018428 <_isatty_r+0x1c>)
 8018410:	2300      	movs	r3, #0
 8018412:	4604      	mov	r4, r0
 8018414:	4608      	mov	r0, r1
 8018416:	602b      	str	r3, [r5, #0]
 8018418:	f7f3 fc70 	bl	800bcfc <_isatty>
 801841c:	1c43      	adds	r3, r0, #1
 801841e:	d102      	bne.n	8018426 <_isatty_r+0x1a>
 8018420:	682b      	ldr	r3, [r5, #0]
 8018422:	b103      	cbz	r3, 8018426 <_isatty_r+0x1a>
 8018424:	6023      	str	r3, [r4, #0]
 8018426:	bd38      	pop	{r3, r4, r5, pc}
 8018428:	2000a8f4 	.word	0x2000a8f4

0801842c <_init>:
 801842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801842e:	bf00      	nop
 8018430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018432:	bc08      	pop	{r3}
 8018434:	469e      	mov	lr, r3
 8018436:	4770      	bx	lr

08018438 <_fini>:
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801843a:	bf00      	nop
 801843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801843e:	bc08      	pop	{r3}
 8018440:	469e      	mov	lr, r3
 8018442:	4770      	bx	lr
 8018444:	0000      	movs	r0, r0
	...

08018448 <__FLASH_Program_Fast_veneer>:
 8018448:	f85f f000 	ldr.w	pc, [pc]	@ 801844c <__FLASH_Program_Fast_veneer+0x4>
 801844c:	2000024d 	.word	0x2000024d

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000001                                ....

20000010 <debugMessages>:
20000010:	00000007                                ....

20000014 <environ>:
20000014:	2000a6cc                                ... 

20000018 <SystemCoreClock>:
20000018:	003d0900                                ..=.

2000001c <uwTickPrio>:
2000001c:	00000010                                ....

20000020 <uwTickFreq>:
20000020:	00000001                                ....

20000024 <__sglue>:
20000024:	00000000 00000003 2000a794              ........... 

20000030 <_tzname>:
20000030:	08019fad 08019fad                       ........

20000038 <_impure_ptr>:
20000038:	2000003c                                <.. 

2000003c <_impure_data>:
2000003c:	00000000 2000a794 2000a7fc 2000a864     ....... ... d.. 
	...

20000088 <tzinfo>:
20000088:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000b8:	0000004a 00000000 00000000 00000000     J...............
	...

200000e0 <__global_locale>:
200000e0:	00000043 00000000 00000000 00000000     C...............
	...
20000100:	00000043 00000000 00000000 00000000     C...............
	...
20000120:	00000043 00000000 00000000 00000000     C...............
	...
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	080176a9 08017629 00000000 0801a2f8     .v..)v..........
200001d0:	0801a11c 0801a033 0801a033 0801a033     ....3...3...3...
200001e0:	0801a033 0801a033 0801a033 0801a033     3...3...3...3...
200001f0:	0801a033 0801a033 ffffffff ffffffff     3...3...........
20000200:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000228:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000024c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000024c:	b480      	push	{r7}
2000024e:	b089      	sub	sp, #36	@ 0x24
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
20000254:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000256:	2380      	movs	r3, #128	@ 0x80
20000258:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000025e:	683b      	ldr	r3, [r7, #0]
20000260:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000262:	4b18      	ldr	r3, [pc, #96]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000264:	695b      	ldr	r3, [r3, #20]
20000266:	4a17      	ldr	r2, [pc, #92]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000026c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026e:	f3ef 8310 	mrs	r3, PRIMASK
20000272:	60fb      	str	r3, [r7, #12]
  return(result);
20000274:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000278:	b672      	cpsid	i
}
2000027a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	681a      	ldr	r2, [r3, #0]
20000280:	69bb      	ldr	r3, [r7, #24]
20000282:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000284:	69bb      	ldr	r3, [r7, #24]
20000286:	3304      	adds	r3, #4
20000288:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	3304      	adds	r3, #4
2000028e:	617b      	str	r3, [r7, #20]
    row_index--;
20000290:	7ffb      	ldrb	r3, [r7, #31]
20000292:	3b01      	subs	r3, #1
20000294:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000296:	7ffb      	ldrb	r3, [r7, #31]
20000298:	2b00      	cmp	r3, #0
2000029a:	d1ef      	bne.n	2000027c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
2000029c:	bf00      	nop
2000029e:	4b09      	ldr	r3, [pc, #36]	@ (200002c4 <FLASH_Program_Fast+0x78>)
200002a0:	691b      	ldr	r3, [r3, #16]
200002a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002aa:	d0f8      	beq.n	2000029e <FLASH_Program_Fast+0x52>
200002ac:	693b      	ldr	r3, [r7, #16]
200002ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b0:	68bb      	ldr	r3, [r7, #8]
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002b8:	bf00      	nop
200002ba:	3724      	adds	r7, #36	@ 0x24
200002bc:	46bd      	mov	sp, r7
200002be:	f85d 7b04 	ldr.w	r7, [sp], #4
200002c2:	4770      	bx	lr
200002c4:	58004000 	.word	0x58004000
