
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180b0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc0  080181f0  080181f0  000191f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a1b0  0801a1b0  0001b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a1b8  0801a1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a1bc  0801a1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c0  20000008  0801a1c0  0001c008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a63c  200002c8  0801a480  0001c2c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000a904  0801a480  0001c904  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001c2c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030815  00000000  00000000  0001c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005432  00000000  00000000  0004cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c10  00000000  00000000  00051f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000225d  00000000  00000000  00054b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000286a3  00000000  00000000  00056dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002dd4a  00000000  00000000  0007f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f9bff  00000000  00000000  000ad19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001a6d99  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d670  00000000  00000000  001a6e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001b4490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	080181d0 	.word	0x080181d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	080181d0 	.word	0x080181d0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d11a      	bne.n	800103e <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <DRV_CANFDSPI_Reset+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <DRV_CANFDSPI_Reset+0xdc>)
 800100e:	8811      	ldrh	r1, [r2, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00d fc04 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2264      	movs	r2, #100	@ 0x64
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	4a2a      	ldr	r2, [pc, #168]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 8001020:	4926      	ldr	r1, [pc, #152]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8001022:	482a      	ldr	r0, [pc, #168]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001024:	f00f ff7a 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <DRV_CANFDSPI_Reset+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a24      	ldr	r2, [pc, #144]	@ (80010c4 <DRV_CANFDSPI_Reset+0xdc>)
 8001032:	8811      	ldrh	r1, [r2, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f00d fbf2 	bl	800e820 <HAL_GPIO_WritePin>
 800103c:	e037      	b.n	80010ae <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11a      	bne.n	800107a <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <DRV_CANFDSPI_Reset+0xe8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <DRV_CANFDSPI_Reset+0xec>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fbe6 	bl	800e820 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 800105c:	4917      	ldr	r1, [pc, #92]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 800105e:	481b      	ldr	r0, [pc, #108]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001060:	f00f ff5c 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <DRV_CANFDSPI_Reset+0xe8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	@ (80010d4 <DRV_CANFDSPI_Reset+0xec>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f00d fbd4 	bl	800e820 <HAL_GPIO_WritePin>
 8001078:	e019      	b.n	80010ae <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <DRV_CANFDSPI_Reset+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <DRV_CANFDSPI_Reset+0xf4>)
 8001080:	8811      	ldrh	r1, [r2, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00d fbcb 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <DRV_CANFDSPI_Reset+0xe0>)
 8001092:	490a      	ldr	r1, [pc, #40]	@ (80010bc <DRV_CANFDSPI_Reset+0xd4>)
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <DRV_CANFDSPI_Reset+0xe4>)
 8001096:	f00f ff41 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <DRV_CANFDSPI_Reset+0xf0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <DRV_CANFDSPI_Reset+0xf4>)
 80010a4:	8811      	ldrh	r1, [r2, #0]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00d fbb9 	bl	800e820 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002e4 	.word	0x200002e4
 80010c0:	20000cb0 	.word	0x20000cb0
 80010c4:	20000cae 	.word	0x20000cae
 80010c8:	20000344 	.word	0x20000344
 80010cc:	20000508 	.word	0x20000508
 80010d0:	20000c90 	.word	0x20000c90
 80010d4:	20000c8e 	.word	0x20000c8e
 80010d8:	20000c70 	.word	0x20000c70
 80010dc:	20000c6e 	.word	0x20000c6e

080010e0 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	603a      	str	r2, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010f0:	2303      	movs	r3, #3
 80010f2:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3330      	adds	r3, #48	@ 0x30
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001108:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b32      	ldr	r3, [pc, #200]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001110:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001114:	2200      	movs	r2, #0
 8001116:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d11a      	bne.n	8001154 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <DRV_CANFDSPI_ReadByte+0xfc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <DRV_CANFDSPI_ReadByte+0x100>)
 8001124:	8811      	ldrh	r1, [r2, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00d fb79 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800112e:	89bb      	ldrh	r3, [r7, #12]
 8001130:	2264      	movs	r2, #100	@ 0x64
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	4a2b      	ldr	r2, [pc, #172]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 8001136:	4928      	ldr	r1, [pc, #160]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001138:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 800113a:	f00f feef 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <DRV_CANFDSPI_ReadByte+0xfc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a26      	ldr	r2, [pc, #152]	@ (80011e0 <DRV_CANFDSPI_ReadByte+0x100>)
 8001148:	8811      	ldrh	r1, [r2, #0]
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f00d fb67 	bl	800e820 <HAL_GPIO_WritePin>
 8001152:	e037      	b.n	80011c4 <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11a      	bne.n	8001190 <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <DRV_CANFDSPI_ReadByte+0x10c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a24      	ldr	r2, [pc, #144]	@ (80011f0 <DRV_CANFDSPI_ReadByte+0x110>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00d fb5b 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 8001172:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001174:	481c      	ldr	r0, [pc, #112]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 8001176:	f00f fed1 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <DRV_CANFDSPI_ReadByte+0x10c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <DRV_CANFDSPI_ReadByte+0x110>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f00d fb49 	bl	800e820 <HAL_GPIO_WritePin>
 800118e:	e019      	b.n	80011c4 <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <DRV_CANFDSPI_ReadByte+0x114>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <DRV_CANFDSPI_ReadByte+0x118>)
 8001196:	8811      	ldrh	r1, [r2, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00d fb40 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	2264      	movs	r2, #100	@ 0x64
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 80011a8:	490b      	ldr	r1, [pc, #44]	@ (80011d8 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011aa:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <DRV_CANFDSPI_ReadByte+0x108>)
 80011ac:	f00f feb6 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <DRV_CANFDSPI_ReadByte+0x114>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <DRV_CANFDSPI_ReadByte+0x118>)
 80011ba:	8811      	ldrh	r1, [r2, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f00d fb2e 	bl	800e820 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <DRV_CANFDSPI_ReadByte+0x104>)
 80011c6:	789a      	ldrb	r2, [r3, #2]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200002e4 	.word	0x200002e4
 80011dc:	20000cb0 	.word	0x20000cb0
 80011e0:	20000cae 	.word	0x20000cae
 80011e4:	20000344 	.word	0x20000344
 80011e8:	20000508 	.word	0x20000508
 80011ec:	20000c90 	.word	0x20000c90
 80011f0:	20000c8e 	.word	0x20000c8e
 80011f4:	20000c70 	.word	0x20000c70
 80011f8:	20000c6e 	.word	0x20000c6e

080011fc <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800120e:	2303      	movs	r3, #3
 8001210:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3320      	adds	r3, #32
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001226:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 800122e:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8001230:	4a2f      	ldr	r2, [pc, #188]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d11a      	bne.n	8001272 <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <DRV_CANFDSPI_WriteByte+0xf8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2d      	ldr	r2, [pc, #180]	@ (80012f8 <DRV_CANFDSPI_WriteByte+0xfc>)
 8001242:	8811      	ldrh	r1, [r2, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00d faea 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2264      	movs	r2, #100	@ 0x64
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 8001254:	4926      	ldr	r1, [pc, #152]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001256:	482a      	ldr	r0, [pc, #168]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 8001258:	f00f fe60 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <DRV_CANFDSPI_WriteByte+0xf8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a24      	ldr	r2, [pc, #144]	@ (80012f8 <DRV_CANFDSPI_WriteByte+0xfc>)
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f00d fad8 	bl	800e820 <HAL_GPIO_WritePin>
 8001270:	e037      	b.n	80012e2 <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d11a      	bne.n	80012ae <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <DRV_CANFDSPI_WriteByte+0x108>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <DRV_CANFDSPI_WriteByte+0x10c>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d facc 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 8001290:	4917      	ldr	r1, [pc, #92]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001292:	481b      	ldr	r0, [pc, #108]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 8001294:	f00f fe42 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <DRV_CANFDSPI_WriteByte+0x108>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00d faba 	bl	800e820 <HAL_GPIO_WritePin>
 80012ac:	e019      	b.n	80012e2 <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <DRV_CANFDSPI_WriteByte+0x110>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <DRV_CANFDSPI_WriteByte+0x114>)
 80012b4:	8811      	ldrh	r1, [r2, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00d fab1 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	2264      	movs	r2, #100	@ 0x64
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <DRV_CANFDSPI_WriteByte+0x100>)
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <DRV_CANFDSPI_WriteByte+0xf4>)
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <DRV_CANFDSPI_WriteByte+0x104>)
 80012ca:	f00f fe27 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <DRV_CANFDSPI_WriteByte+0x110>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <DRV_CANFDSPI_WriteByte+0x114>)
 80012d8:	8811      	ldrh	r1, [r2, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f00d fa9f 	bl	800e820 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002e4 	.word	0x200002e4
 80012f4:	20000cb0 	.word	0x20000cb0
 80012f8:	20000cae 	.word	0x20000cae
 80012fc:	20000344 	.word	0x20000344
 8001300:	20000508 	.word	0x20000508
 8001304:	20000c90 	.word	0x20000c90
 8001308:	20000c8e 	.word	0x20000c8e
 800130c:	20000c70 	.word	0x20000c70
 8001310:	20000c6e 	.word	0x20000c6e

08001314 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001324:	2306      	movs	r3, #6
 8001326:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3330      	adds	r3, #48	@ 0x30
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 800133c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 8001344:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11a      	bne.n	8001382 <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800134c:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <DRV_CANFDSPI_ReadWord+0x130>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a3d      	ldr	r2, [pc, #244]	@ (8001448 <DRV_CANFDSPI_ReadWord+0x134>)
 8001352:	8811      	ldrh	r1, [r2, #0]
 8001354:	2200      	movs	r2, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00d fa62 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	2264      	movs	r2, #100	@ 0x64
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	4a3a      	ldr	r2, [pc, #232]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 8001364:	4936      	ldr	r1, [pc, #216]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 8001366:	483a      	ldr	r0, [pc, #232]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 8001368:	f00f fdd8 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800136c:	4603      	mov	r3, r0
 800136e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001370:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <DRV_CANFDSPI_ReadWord+0x130>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <DRV_CANFDSPI_ReadWord+0x134>)
 8001376:	8811      	ldrh	r1, [r2, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f00d fa50 	bl	800e820 <HAL_GPIO_WritePin>
 8001380:	e037      	b.n	80013f2 <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11a      	bne.n	80013be <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <DRV_CANFDSPI_ReadWord+0x140>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <DRV_CANFDSPI_ReadWord+0x144>)
 800138e:	8811      	ldrh	r1, [r2, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00d fa44 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001398:	89bb      	ldrh	r3, [r7, #12]
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 80013a0:	4927      	ldr	r1, [pc, #156]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013a2:	482b      	ldr	r0, [pc, #172]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013a4:	f00f fdba 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <DRV_CANFDSPI_ReadWord+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <DRV_CANFDSPI_ReadWord+0x144>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00d fa32 	bl	800e820 <HAL_GPIO_WritePin>
 80013bc:	e019      	b.n	80013f2 <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013be:	4b27      	ldr	r3, [pc, #156]	@ (800145c <DRV_CANFDSPI_ReadWord+0x148>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a27      	ldr	r2, [pc, #156]	@ (8001460 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013c4:	8811      	ldrh	r1, [r2, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00d fa29 	bl	800e820 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	2264      	movs	r2, #100	@ 0x64
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 80013d6:	491a      	ldr	r1, [pc, #104]	@ (8001440 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013d8:	481d      	ldr	r0, [pc, #116]	@ (8001450 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013da:	f00f fd9f 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80013de:	4603      	mov	r3, r0
 80013e0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <DRV_CANFDSPI_ReadWord+0x148>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013e8:	8811      	ldrh	r1, [r2, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00d fa17 	bl	800e820 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 80013f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013fc:	e01c      	b.n	8001438 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001404:	2302      	movs	r3, #2
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e011      	b.n	800142e <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <DRV_CANFDSPI_ReadWord+0x138>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3b02      	subs	r3, #2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	441a      	add	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d9ea      	bls.n	800140a <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002e4 	.word	0x200002e4
 8001444:	20000cb0 	.word	0x20000cb0
 8001448:	20000cae 	.word	0x20000cae
 800144c:	20000344 	.word	0x20000344
 8001450:	20000508 	.word	0x20000508
 8001454:	20000c90 	.word	0x20000c90
 8001458:	20000c8e 	.word	0x20000c8e
 800145c:	20000c70 	.word	0x20000c70
 8001460:	20000c6e 	.word	0x20000c6e

08001464 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	603a      	str	r2, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	460b      	mov	r3, r1
 8001472:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8001474:	2306      	movs	r3, #6
 8001476:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001478:	88bb      	ldrh	r3, [r7, #4]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3320      	adds	r3, #32
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 800148c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 8001494:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e00b      	b.n	80014b4 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	40da      	lsrs	r2, r3
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3302      	adds	r3, #2
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 80014ac:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d9f0      	bls.n	800149c <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d11a      	bne.n	80014f6 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <DRV_CANFDSPI_WriteWord+0x114>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <DRV_CANFDSPI_WriteWord+0x118>)
 80014c6:	8811      	ldrh	r1, [r2, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d f9a8 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	2264      	movs	r2, #100	@ 0x64
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 80014d8:	4926      	ldr	r1, [pc, #152]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 80014da:	482a      	ldr	r0, [pc, #168]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 80014dc:	f00f fd1e 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <DRV_CANFDSPI_WriteWord+0x114>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a24      	ldr	r2, [pc, #144]	@ (800157c <DRV_CANFDSPI_WriteWord+0x118>)
 80014ea:	8811      	ldrh	r1, [r2, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00d f996 	bl	800e820 <HAL_GPIO_WritePin>
 80014f4:	e037      	b.n	8001566 <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d11a      	bne.n	8001532 <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <DRV_CANFDSPI_WriteWord+0x124>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <DRV_CANFDSPI_WriteWord+0x128>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00d f98a 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	2264      	movs	r2, #100	@ 0x64
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 8001514:	4917      	ldr	r1, [pc, #92]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 8001516:	481b      	ldr	r0, [pc, #108]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 8001518:	f00f fd00 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <DRV_CANFDSPI_WriteWord+0x124>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <DRV_CANFDSPI_WriteWord+0x128>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f00d f978 	bl	800e820 <HAL_GPIO_WritePin>
 8001530:	e019      	b.n	8001566 <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <DRV_CANFDSPI_WriteWord+0x12c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <DRV_CANFDSPI_WriteWord+0x130>)
 8001538:	8811      	ldrh	r1, [r2, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00d f96f 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001542:	89bb      	ldrh	r3, [r7, #12]
 8001544:	2264      	movs	r2, #100	@ 0x64
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <DRV_CANFDSPI_WriteWord+0x11c>)
 800154a:	490a      	ldr	r1, [pc, #40]	@ (8001574 <DRV_CANFDSPI_WriteWord+0x110>)
 800154c:	480d      	ldr	r0, [pc, #52]	@ (8001584 <DRV_CANFDSPI_WriteWord+0x120>)
 800154e:	f00f fce5 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001552:	4603      	mov	r3, r0
 8001554:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <DRV_CANFDSPI_WriteWord+0x12c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <DRV_CANFDSPI_WriteWord+0x130>)
 800155c:	8811      	ldrh	r1, [r2, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f00d f95d 	bl	800e820 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8001566:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002e4 	.word	0x200002e4
 8001578:	20000cb0 	.word	0x20000cb0
 800157c:	20000cae 	.word	0x20000cae
 8001580:	20000344 	.word	0x20000344
 8001584:	20000508 	.word	0x20000508
 8001588:	20000c90 	.word	0x20000c90
 800158c:	20000c8e 	.word	0x20000c8e
 8001590:	20000c70 	.word	0x20000c70
 8001594:	20000c6e 	.word	0x20000c6e

08001598 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	460b      	mov	r3, r1
 80015a6:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3330      	adds	r3, #48	@ 0x30
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b42      	ldr	r3, [pc, #264]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015c0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015c8:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d11a      	bne.n	8001606 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80015d0:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3e      	ldr	r2, [pc, #248]	@ (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 80015d6:	8811      	ldrh	r1, [r2, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00d f920 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	2264      	movs	r2, #100	@ 0x64
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	4a3b      	ldr	r2, [pc, #236]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80015e8:	4937      	ldr	r1, [pc, #220]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015ea:	483b      	ldr	r0, [pc, #236]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 80015ec:	f00f fc96 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80015f4:	4b35      	ldr	r3, [pc, #212]	@ (80016cc <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	@ (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 80015fa:	8811      	ldrh	r1, [r2, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f00d f90e 	bl	800e820 <HAL_GPIO_WritePin>
 8001604:	e037      	b.n	8001676 <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d11a      	bne.n	8001642 <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800160c:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d f902 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	4a2c      	ldr	r2, [pc, #176]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001624:	4928      	ldr	r1, [pc, #160]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001626:	482c      	ldr	r0, [pc, #176]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001628:	f00f fc78 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800162c:	4603      	mov	r3, r0
 800162e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <DRV_CANFDSPI_ReadHalfWord+0x144>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2a      	ldr	r2, [pc, #168]	@ (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f00d f8f0 	bl	800e820 <HAL_GPIO_WritePin>
 8001640:	e019      	b.n	8001676 <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a28      	ldr	r2, [pc, #160]	@ (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001648:	8811      	ldrh	r1, [r2, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00d f8e7 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001652:	89bb      	ldrh	r3, [r7, #12]
 8001654:	2264      	movs	r2, #100	@ 0x64
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 800165a:	491b      	ldr	r1, [pc, #108]	@ (80016c8 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 800165c:	481e      	ldr	r0, [pc, #120]	@ (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 800165e:	f00f fc5d 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001662:	4603      	mov	r3, r0
 8001664:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 800166c:	8811      	ldrh	r1, [r2, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f00d f8d5 	bl	800e820 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 800167c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001680:	e01e      	b.n	80016c0 <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001688:	2302      	movs	r3, #2
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e013      	b.n	80016b6 <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3b02      	subs	r3, #2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d9e8      	bls.n	800168e <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200002e4 	.word	0x200002e4
 80016cc:	20000cb0 	.word	0x20000cb0
 80016d0:	20000cae 	.word	0x20000cae
 80016d4:	20000344 	.word	0x20000344
 80016d8:	20000508 	.word	0x20000508
 80016dc:	20000c90 	.word	0x20000c90
 80016e0:	20000c8e 	.word	0x20000c8e
 80016e4:	20000c70 	.word	0x20000c70
 80016e8:	20000c6e 	.word	0x20000c6e

080016ec <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 80016fe:	2304      	movs	r3, #4
 8001700:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3320      	adds	r3, #32
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001716:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800171e:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e00b      	b.n	800173e <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	411a      	asrs	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3302      	adds	r3, #2
 8001732:	b2d1      	uxtb	r1, r2
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001736:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	3301      	adds	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d9f0      	bls.n	8001726 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d11a      	bne.n	8001780 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a2d      	ldr	r2, [pc, #180]	@ (8001804 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 8001750:	8811      	ldrh	r1, [r2, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00d f863 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800175a:	89bb      	ldrh	r3, [r7, #12]
 800175c:	2264      	movs	r2, #100	@ 0x64
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 8001762:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001764:	4829      	ldr	r0, [pc, #164]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 8001766:	f00f fbd9 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800176a:	4603      	mov	r3, r0
 800176c:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 8001774:	8811      	ldrh	r1, [r2, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f00d f851 	bl	800e820 <HAL_GPIO_WritePin>
 800177e:	e037      	b.n	80017f0 <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d11a      	bne.n	80017bc <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00d f845 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800179e:	4917      	ldr	r1, [pc, #92]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a0:	481a      	ldr	r0, [pc, #104]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017a2:	f00f fbbb 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00d f833 	bl	800e820 <HAL_GPIO_WritePin>
 80017ba:	e019      	b.n	80017f0 <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017c2:	8811      	ldrh	r1, [r2, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00d f82a 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	2264      	movs	r2, #100	@ 0x64
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017d4:	4909      	ldr	r1, [pc, #36]	@ (80017fc <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017d8:	f00f fba0 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80017dc:	4603      	mov	r3, r0
 80017de:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017e6:	8811      	ldrh	r1, [r2, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00d f818 	bl	800e820 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80017f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200002e4 	.word	0x200002e4
 8001800:	20000cb0 	.word	0x20000cb0
 8001804:	20000cae 	.word	0x20000cae
 8001808:	20000344 	.word	0x20000344
 800180c:	20000508 	.word	0x20000508
 8001810:	20000c90 	.word	0x20000c90
 8001814:	20000c8e 	.word	0x20000c8e
 8001818:	20000c70 	.word	0x20000c70
 800181c:	20000c6e 	.word	0x20000c6e

08001820 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	460b      	mov	r3, r1
 8001830:	81bb      	strh	r3, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	3302      	adds	r3, #2
 800183a:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 800183c:	8a7b      	ldrh	r3, [r7, #18]
 800183e:	2b60      	cmp	r3, #96	@ 0x60
 8001840:	d902      	bls.n	8001848 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e086      	b.n	8001956 <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3330      	adds	r3, #48	@ 0x30
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 800185c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800185e:	89bb      	ldrh	r3, [r7, #12]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001864:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001866:	2302      	movs	r3, #2
 8001868:	82fb      	strh	r3, [r7, #22]
 800186a:	e006      	b.n	800187a <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001870:	2100      	movs	r1, #0
 8001872:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	3301      	adds	r3, #1
 8001878:	82fb      	strh	r3, [r7, #22]
 800187a:	8afa      	ldrh	r2, [r7, #22]
 800187c:	8a7b      	ldrh	r3, [r7, #18]
 800187e:	429a      	cmp	r2, r3
 8001880:	d3f4      	bcc.n	800186c <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d11a      	bne.n	80018be <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <DRV_CANFDSPI_ReadByteArray+0x144>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <DRV_CANFDSPI_ReadByteArray+0x148>)
 800188e:	8811      	ldrh	r1, [r2, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00c ffc4 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001898:	8a7b      	ldrh	r3, [r7, #18]
 800189a:	2264      	movs	r2, #100	@ 0x64
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	4a33      	ldr	r2, [pc, #204]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018a0:	492f      	ldr	r1, [pc, #188]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018a2:	4833      	ldr	r0, [pc, #204]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018a4:	f00f fb3a 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018b2:	8811      	ldrh	r1, [r2, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00c ffb2 	bl	800e820 <HAL_GPIO_WritePin>
 80018bc:	e037      	b.n	800192e <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11a      	bne.n	80018fa <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018ca:	8811      	ldrh	r1, [r2, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c ffa6 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4a24      	ldr	r2, [pc, #144]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018dc:	4920      	ldr	r1, [pc, #128]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018de:	4824      	ldr	r0, [pc, #144]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e0:	f00f fb1c 	bl	8010f1c <HAL_SPI_TransmitReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00c ff94 	bl	800e820 <HAL_GPIO_WritePin>
 80018f8:	e019      	b.n	800192e <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <DRV_CANFDSPI_ReadByteArray+0x15c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a20      	ldr	r2, [pc, #128]	@ (8001980 <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001900:	8811      	ldrh	r1, [r2, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00c ff8b 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800190a:	8a7b      	ldrh	r3, [r7, #18]
 800190c:	2264      	movs	r2, #100	@ 0x64
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001912:	4913      	ldr	r1, [pc, #76]	@ (8001960 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001914:	4816      	ldr	r0, [pc, #88]	@ (8001970 <DRV_CANFDSPI_ReadByteArray+0x150>)
 8001916:	f00f fb01 	bl	8010f1c <HAL_SPI_TransmitReceive>
 800191a:	4603      	mov	r3, r0
 800191c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001924:	8811      	ldrh	r1, [r2, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f00c ff79 	bl	800e820 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	82fb      	strh	r3, [r7, #22]
 8001932:	e00a      	b.n	800194a <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001934:	8afb      	ldrh	r3, [r7, #22]
 8001936:	1c9a      	adds	r2, r3, #2
 8001938:	8afb      	ldrh	r3, [r7, #22]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	440b      	add	r3, r1
 800193e:	490b      	ldr	r1, [pc, #44]	@ (800196c <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001940:	5c8a      	ldrb	r2, [r1, r2]
 8001942:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001944:	8afb      	ldrh	r3, [r7, #22]
 8001946:	3301      	adds	r3, #1
 8001948:	82fb      	strh	r3, [r7, #22]
 800194a:	8afa      	ldrh	r2, [r7, #22]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3f0      	bcc.n	8001934 <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 8001952:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200002e4 	.word	0x200002e4
 8001964:	20000cb0 	.word	0x20000cb0
 8001968:	20000cae 	.word	0x20000cae
 800196c:	20000344 	.word	0x20000344
 8001970:	20000508 	.word	0x20000508
 8001974:	20000c90 	.word	0x20000c90
 8001978:	20000c8e 	.word	0x20000c8e
 800197c:	20000c70 	.word	0x20000c70
 8001980:	20000c6e 	.word	0x20000c6e

08001984 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	461a      	mov	r2, r3
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	460b      	mov	r3, r1
 8001994:	81bb      	strh	r3, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3302      	adds	r3, #2
 800199e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019a0:	8a7b      	ldrh	r3, [r7, #18]
 80019a2:	2b60      	cmp	r3, #96	@ 0x60
 80019a4:	d902      	bls.n	80019ac <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e078      	b.n	8001a9e <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3320      	adds	r3, #32
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019c0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019c2:	89bb      	ldrh	r3, [r7, #12]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019c8:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	82fb      	strh	r3, [r7, #22]
 80019ce:	e00a      	b.n	80019e6 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	441a      	add	r2, r3
 80019d6:	8afb      	ldrh	r3, [r7, #22]
 80019d8:	3302      	adds	r3, #2
 80019da:	7811      	ldrb	r1, [r2, #0]
 80019dc:	4a32      	ldr	r2, [pc, #200]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019de:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	3301      	adds	r3, #1
 80019e4:	82fb      	strh	r3, [r7, #22]
 80019e6:	8afa      	ldrh	r2, [r7, #22]
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3f0      	bcc.n	80019d0 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d11a      	bne.n	8001a2a <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <DRV_CANFDSPI_WriteByteArray+0x128>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 80019fa:	8811      	ldrh	r1, [r2, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00c ff0e 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a04:	8a7b      	ldrh	r3, [r7, #18]
 8001a06:	2264      	movs	r2, #100	@ 0x64
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a0c:	4926      	ldr	r1, [pc, #152]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a0e:	482a      	ldr	r0, [pc, #168]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a10:	f00f fa84 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001a14:	4603      	mov	r3, r0
 8001a16:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a1e:	8811      	ldrh	r1, [r2, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00c fefc 	bl	800e820 <HAL_GPIO_WritePin>
 8001a28:	e037      	b.n	8001a9a <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d11a      	bne.n	8001a66 <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a36:	8811      	ldrh	r1, [r2, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00c fef0 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a48:	4917      	ldr	r1, [pc, #92]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a4a:	481b      	ldr	r0, [pc, #108]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a4c:	f00f fa66 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a5a:	8811      	ldrh	r1, [r2, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00c fede 	bl	800e820 <HAL_GPIO_WritePin>
 8001a64:	e019      	b.n	8001a9a <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a6c:	8811      	ldrh	r1, [r2, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00c fed5 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a76:	8a7b      	ldrh	r3, [r7, #18]
 8001a78:	2264      	movs	r2, #100	@ 0x64
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a7e:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a82:	f00f fa4b 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a90:	8811      	ldrh	r1, [r2, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00c fec3 	bl	800e820 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001a9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002e4 	.word	0x200002e4
 8001aac:	20000cb0 	.word	0x20000cb0
 8001ab0:	20000cae 	.word	0x20000cae
 8001ab4:	20000344 	.word	0x20000344
 8001ab8:	20000508 	.word	0x20000508
 8001abc:	20000c90 	.word	0x20000c90
 8001ac0:	20000c8e 	.word	0x20000c8e
 8001ac4:	20000c70 	.word	0x20000c70
 8001ac8:	20000c6e 	.word	0x20000c6e

08001acc <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	460b      	mov	r3, r1
 8001adc:	81bb      	strh	r3, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3302      	adds	r3, #2
 8001aea:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001aec:	8afb      	ldrh	r3, [r7, #22]
 8001aee:	2b60      	cmp	r3, #96	@ 0x60
 8001af0:	d902      	bls.n	8001af8 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e0a2      	b.n	8001c3e <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3330      	adds	r3, #48	@ 0x30
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b0c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b0e:	89bb      	ldrh	r3, [r7, #12]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b14:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b16:	2302      	movs	r3, #2
 8001b18:	83fb      	strh	r3, [r7, #30]
 8001b1a:	e006      	b.n	8001b2a <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b1c:	8bfb      	ldrh	r3, [r7, #30]
 8001b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b24:	8bfb      	ldrh	r3, [r7, #30]
 8001b26:	3301      	adds	r3, #1
 8001b28:	83fb      	strh	r3, [r7, #30]
 8001b2a:	8bfa      	ldrh	r2, [r7, #30]
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3f4      	bcc.n	8001b1c <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d11a      	bne.n	8001b6e <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b38:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b3e:	8811      	ldrh	r1, [r2, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00c fe6c 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	2264      	movs	r2, #100	@ 0x64
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	4a41      	ldr	r2, [pc, #260]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b50:	493d      	ldr	r1, [pc, #244]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b52:	4841      	ldr	r0, [pc, #260]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b54:	f00f f9e2 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3b      	ldr	r2, [pc, #236]	@ (8001c50 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b62:	8811      	ldrh	r1, [r2, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00c fe5a 	bl	800e820 <HAL_GPIO_WritePin>
 8001b6c:	e037      	b.n	8001bde <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d11a      	bne.n	8001baa <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001b74:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001b7a:	8811      	ldrh	r1, [r2, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00c fe4e 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2264      	movs	r2, #100	@ 0x64
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b8c:	492e      	ldr	r1, [pc, #184]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b8e:	4832      	ldr	r0, [pc, #200]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b90:	f00f f9c4 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001b9e:	8811      	ldrh	r1, [r2, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00c fe3c 	bl	800e820 <HAL_GPIO_WritePin>
 8001ba8:	e019      	b.n	8001bde <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2e      	ldr	r2, [pc, #184]	@ (8001c68 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bb0:	8811      	ldrh	r1, [r2, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00c fe33 	bl	800e820 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bba:	8afb      	ldrh	r3, [r7, #22]
 8001bbc:	2264      	movs	r2, #100	@ 0x64
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	4a24      	ldr	r2, [pc, #144]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bc2:	4921      	ldr	r1, [pc, #132]	@ (8001c48 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bc4:	4824      	ldr	r0, [pc, #144]	@ (8001c58 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bc6:	f00f f9a9 	bl	8010f1c <HAL_SPI_TransmitReceive>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bd4:	8811      	ldrh	r1, [r2, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00c fe21 	bl	800e820 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001bde:	7e7b      	ldrb	r3, [r7, #25]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001be4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001be8:	e029      	b.n	8001c3e <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001bea:	2302      	movs	r3, #2
 8001bec:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	83fb      	strh	r3, [r7, #30]
 8001bf2:	e01e      	b.n	8001c32 <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	83bb      	strh	r3, [r7, #28]
 8001bfc:	e00d      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001bfe:	8b7a      	ldrh	r2, [r7, #26]
 8001c00:	8bbb      	ldrh	r3, [r7, #28]
 8001c02:	4914      	ldr	r1, [pc, #80]	@ (8001c54 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c04:	5c8a      	ldrb	r2, [r1, r2]
 8001c06:	3320      	adds	r3, #32
 8001c08:	443b      	add	r3, r7
 8001c0a:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c0e:	8bbb      	ldrh	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	83bb      	strh	r3, [r7, #28]
 8001c14:	8b7b      	ldrh	r3, [r7, #26]
 8001c16:	3301      	adds	r3, #1
 8001c18:	837b      	strh	r3, [r7, #26]
 8001c1a:	8bbb      	ldrh	r3, [r7, #28]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d9ee      	bls.n	8001bfe <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c20:	8bfb      	ldrh	r3, [r7, #30]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c2c:	8bfb      	ldrh	r3, [r7, #30]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	83fb      	strh	r3, [r7, #30]
 8001c32:	8bfa      	ldrh	r2, [r7, #30]
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3dc      	bcc.n	8001bf4 <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c3a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002e4 	.word	0x200002e4
 8001c4c:	20000cb0 	.word	0x20000cb0
 8001c50:	20000cae 	.word	0x20000cae
 8001c54:	20000344 	.word	0x20000344
 8001c58:	20000508 	.word	0x20000508
 8001c5c:	20000c90 	.word	0x20000c90
 8001c60:	20000c8e 	.word	0x20000c8e
 8001c64:	20000c70 	.word	0x20000c70
 8001c68:	20000c6e 	.word	0x20000c6e

08001c6c <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001c7c:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <DRV_CANFDSPI_Configure+0x118>)
 8001c7e:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	7a3b      	ldrb	r3, [r7, #8]
 8001c8c:	f362 0304 	bfi	r3, r2, #0, #5
 8001c90:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	7a3b      	ldrb	r3, [r7, #8]
 8001c9e:	f362 1345 	bfi	r3, r2, #5, #1
 8001ca2:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	7a3b      	ldrb	r3, [r7, #8]
 8001cb0:	f362 1386 	bfi	r3, r2, #6, #1
 8001cb4:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	7a7b      	ldrb	r3, [r7, #9]
 8001cc2:	f362 0300 	bfi	r3, r2, #0, #1
 8001cc6:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	7a7b      	ldrb	r3, [r7, #9]
 8001cd4:	f362 0342 	bfi	r3, r2, #1, #2
 8001cd8:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	7a7b      	ldrb	r3, [r7, #9]
 8001ce6:	f362 1304 	bfi	r3, r2, #4, #1
 8001cea:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	7abb      	ldrb	r3, [r7, #10]
 8001cf8:	f362 0300 	bfi	r3, r2, #0, #1
 8001cfc:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	7abb      	ldrb	r3, [r7, #10]
 8001d0a:	f362 0341 	bfi	r3, r2, #1, #1
 8001d0e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	f362 0382 	bfi	r3, r2, #2, #1
 8001d20:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	7abb      	ldrb	r3, [r7, #10]
 8001d2e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d32:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	7abb      	ldrb	r3, [r7, #10]
 8001d40:	f362 1304 	bfi	r3, r2, #4, #1
 8001d44:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f362 1307 	bfi	r3, r2, #4, #4
 8001d56:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fb80 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e001      	b.n	8001d7a <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	04980760 	.word	0x04980760

08001d88 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001d90:	4b3a      	ldr	r3, [pc, #232]	@ (8001e7c <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001d92:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	7813      	ldrb	r3, [r2, #0]
 8001da0:	f361 0304 	bfi	r3, r1, #0, #5
 8001da4:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001da6:	7b3b      	ldrb	r3, [r7, #12]
 8001da8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001dac:	b2d9      	uxtb	r1, r3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	7813      	ldrb	r3, [r2, #0]
 8001db2:	f361 1345 	bfi	r3, r1, #5, #1
 8001db6:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001db8:	7b3b      	ldrb	r3, [r7, #12]
 8001dba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	7813      	ldrb	r3, [r2, #0]
 8001dc4:	f361 1386 	bfi	r3, r1, #6, #1
 8001dc8:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd0:	b2d9      	uxtb	r1, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	7813      	ldrb	r3, [r2, #0]
 8001dd6:	f361 13c7 	bfi	r3, r1, #7, #1
 8001dda:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001de2:	b2d9      	uxtb	r1, r3
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	7853      	ldrb	r3, [r2, #1]
 8001de8:	f361 0301 	bfi	r3, r1, #0, #2
 8001dec:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001df4:	b2d9      	uxtb	r1, r3
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	7853      	ldrb	r3, [r2, #1]
 8001dfa:	f361 0382 	bfi	r3, r1, #2, #1
 8001dfe:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	7853      	ldrb	r3, [r2, #1]
 8001e0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e10:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e18:	b2d9      	uxtb	r1, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	7853      	ldrb	r3, [r2, #1]
 8001e1e:	f361 1304 	bfi	r3, r1, #4, #1
 8001e22:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e2a:	b2d9      	uxtb	r1, r3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	7853      	ldrb	r3, [r2, #1]
 8001e30:	f361 1345 	bfi	r3, r1, #5, #1
 8001e34:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e36:	7bbb      	ldrb	r3, [r7, #14]
 8001e38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e3c:	b2d9      	uxtb	r1, r3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	7853      	ldrb	r3, [r2, #1]
 8001e42:	f361 1386 	bfi	r3, r1, #6, #1
 8001e46:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e4e:	b2d9      	uxtb	r1, r3
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	7853      	ldrb	r3, [r2, #1]
 8001e54:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e58:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e60:	b2d9      	uxtb	r1, r3
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	7893      	ldrb	r3, [r2, #2]
 8001e66:	f361 0303 	bfi	r3, r1, #0, #4
 8001e6a:	7093      	strb	r3, [r2, #2]

    return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	04980760 	.word	0x04980760

08001e80 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001e98:	f107 020e 	add.w	r2, r7, #14
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f91d 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e01a      	b.n	8001eee <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001ec2:	7bba      	ldrb	r2, [r7, #14]
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2103      	movs	r1, #3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f992 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001ee4:	f06f 0301 	mvn.w	r3, #1
 8001ee8:	e001      	b.n	8001eee <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	603a      	str	r2, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	460b      	mov	r3, r1
 8001f06:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f12:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f1a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f362 0304 	bfi	r3, r2, #0, #5
 8001f2c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f362 1347 	bfi	r3, r2, #5, #3
 8001f3e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	7abb      	ldrb	r3, [r7, #10]
 8001f4c:	f362 1346 	bfi	r3, r2, #5, #2
 8001f50:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	7abb      	ldrb	r3, [r7, #10]
 8001f5e:	f362 0304 	bfi	r3, r2, #0, #5
 8001f62:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	7a3b      	ldrb	r3, [r7, #8]
 8001f70:	f362 1386 	bfi	r3, r2, #6, #1
 8001f74:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	0052      	lsls	r2, r2, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3350      	adds	r3, #80	@ 0x50
 8001f86:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	89b9      	ldrh	r1, [r7, #12]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fa68 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00600400 	.word	0x00600400

08001fa8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fb2:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001fb4:	7b3b      	ldrb	r3, [r7, #12]
 8001fb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fba:	b2d9      	uxtb	r1, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	7813      	ldrb	r3, [r2, #0]
 8001fc0:	f361 0300 	bfi	r3, r1, #0, #1
 8001fc4:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7813      	ldrb	r3, [r2, #0]
 8001fd2:	f361 0345 	bfi	r3, r1, #1, #5
 8001fd6:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001fde:	b2d9      	uxtb	r1, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	7813      	ldrb	r3, [r2, #0]
 8001fe4:	f361 1387 	bfi	r3, r1, #6, #2
 8001fe8:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7853      	ldrb	r3, [r2, #1]
 8001ff6:	f361 0304 	bfi	r3, r1, #0, #5
 8001ffa:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002002:	b2d9      	uxtb	r1, r3
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	7853      	ldrb	r3, [r2, #1]
 8002008:	f361 1347 	bfi	r3, r1, #5, #3
 800200c:	7053      	strb	r3, [r2, #1]

    return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	00600400 	.word	0x00600400

08002020 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0a0      	sub	sp, #128	@ 0x80
 8002024:	af00      	add	r7, sp, #0
 8002026:	60ba      	str	r2, [r7, #8]
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	460b      	mov	r3, r1
 8002030:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	0052      	lsls	r2, r2, #1
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	b29b      	uxth	r3, r3
 8002046:	3350      	adds	r3, #80	@ 0x50
 8002048:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 800204c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002050:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8002054:	7bf8      	ldrb	r0, [r7, #15]
 8002056:	2303      	movs	r3, #3
 8002058:	f7ff fd38 	bl	8001acc <DRV_CANFDSPI_ReadWordArray>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002062:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e0c5      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8002070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002072:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8002074:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002078:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8002082:	f06f 0301 	mvn.w	r3, #1
 8002086:	e0b9      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	791b      	ldrb	r3, [r3, #4]
 800208c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fc3a 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 8002098:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 800209a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d202      	bcs.n	80020aa <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020a4:	f06f 0302 	mvn.w	r3, #2
 80020a8:	e0a8      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ac:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 80020c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80020c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020c8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	789b      	ldrb	r3, [r3, #2]
 80020dc:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	791b      	ldrb	r3, [r3, #4]
 80020e8:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	795b      	ldrb	r3, [r3, #5]
 80020ee:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	799b      	ldrb	r3, [r3, #6]
 80020f4:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	79db      	ldrb	r3, [r3, #7]
 80020fa:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002102:	e010      	b.n	8002126 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002104:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	441a      	add	r2, r3
 800210c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002110:	3308      	adds	r3, #8
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	3380      	adds	r3, #128	@ 0x80
 8002116:	443b      	add	r3, r7
 8002118:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 800211c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002120:	3301      	adds	r3, #1
 8002122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002126:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800212a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800212e:	429a      	cmp	r2, r3
 8002130:	d8e8      	bhi.n	8002104 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 800213e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02b      	beq.n	80021a2 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 800214a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800214e:	b29b      	uxth	r3, r3
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	b29b      	uxth	r3, r3
 8002156:	f1c3 0304 	rsb	r3, r3, #4
 800215a:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 800215e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3308      	adds	r3, #8
 8002166:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 800216a:	2300      	movs	r3, #0
 800216c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002170:	e010      	b.n	8002194 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8002172:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800217e:	4413      	add	r3, r2
 8002180:	3380      	adds	r3, #128	@ 0x80
 8002182:	443b      	add	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 800218a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800218e:	3301      	adds	r3, #1
 8002190:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002194:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002198:	b29b      	uxth	r3, r3
 800219a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 800219e:	429a      	cmp	r2, r3
 80021a0:	d8e7      	bhi.n	8002172 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80021ac:	4413      	add	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3308      	adds	r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f107 0210 	add.w	r2, r7, #16
 80021b8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 80021bc:	7bf8      	ldrb	r0, [r7, #15]
 80021be:	f7ff fbe1 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 80021c8:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 80021d0:	f06f 0303 	mvn.w	r3, #3
 80021d4:	e012      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 80021d6:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 80021da:	7bb9      	ldrb	r1, [r7, #14]
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f83a 	bl	8002258 <DRV_CANFDSPI_TransmitChannelUpdate>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 80021ea:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 80021f2:	f06f 0304 	mvn.w	r3, #4
 80021f6:	e001      	b.n	80021fc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 80021f8:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3780      	adds	r7, #128	@ 0x80
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	b29b      	uxth	r3, r3
 800222e:	3350      	adds	r3, #80	@ 0x50
 8002230:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002238:	2302      	movs	r3, #2
 800223a:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	89b9      	ldrh	r1, [r7, #12]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffda 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 8002248:	4603      	mov	r3, r0
 800224a:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 800224c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	460b      	mov	r3, r1
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	4613      	mov	r3, r2
 8002268:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	0052      	lsls	r2, r2, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	b29b      	uxth	r3, r3
 800227c:	3351      	adds	r3, #81	@ 0x51
 800227e:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8002292:	7a7b      	ldrb	r3, [r7, #9]
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800229a:	7a7a      	ldrb	r2, [r7, #9]
 800229c:	89b9      	ldrh	r1, [r7, #12]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ffab 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e001      	b.n	80022bc <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	460b      	mov	r3, r1
 80022d2:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	333e      	adds	r3, #62	@ 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	89b9      	ldrh	r1, [r7, #12]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f8b6 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80022fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	603a      	str	r2, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	460b      	mov	r3, r1
 8002316:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	b29b      	uxth	r3, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	b29b      	uxth	r3, r3
 800232e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002332:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	89b9      	ldrh	r1, [r7, #12]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f892 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	4603      	mov	r3, r0
 8002364:	71bb      	strb	r3, [r7, #6]
 8002366:	460b      	mov	r3, r1
 8002368:	717b      	strb	r3, [r7, #5]
 800236a:	4613      	mov	r3, r2
 800236c:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 8002372:	793b      	ldrb	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 8002378:	7a3b      	ldrb	r3, [r7, #8]
 800237a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237e:	723b      	strb	r3, [r7, #8]
 8002380:	e003      	b.n	800238a <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	f36f 13c7 	bfc	r3, #7, #1
 8002388:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 800238a:	797b      	ldrb	r3, [r7, #5]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	b2da      	uxtb	r2, r3
 8002392:	7a3b      	ldrb	r3, [r7, #8]
 8002394:	f362 0304 	bfi	r3, r2, #0, #5
 8002398:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80023a2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023a4:	7a3a      	ldrb	r2, [r7, #8]
 80023a6:	89b9      	ldrh	r1, [r7, #12]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff26 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}

080023c0 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	603a      	str	r2, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	460b      	mov	r3, r1
 80023ce:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 80023de:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80023e2:	e033      	b.n	800244c <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 80023e6:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 80023e8:	7a3b      	ldrb	r3, [r7, #8]
 80023ea:	f36f 13c7 	bfc	r3, #7, #1
 80023ee:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	f362 0304 	bfi	r3, r2, #0, #5
 8002400:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800240a:	b2da      	uxtb	r2, r3
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	f362 1347 	bfi	r3, r2, #5, #3
 8002412:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	7a3b      	ldrb	r3, [r7, #8]
 8002420:	f362 1345 	bfi	r3, r2, #5, #1
 8002424:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	b29b      	uxth	r3, r3
 8002434:	3350      	adds	r3, #80	@ 0x50
 8002436:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	89b9      	ldrh	r1, [r7, #12]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f810 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	00600400 	.word	0x00600400

08002458 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8002462:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	7813      	ldrb	r3, [r2, #0]
 8002470:	f361 0345 	bfi	r3, r1, #1, #5
 8002474:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	8813      	ldrh	r3, [r2, #0]
 8002482:	f361 1388 	bfi	r3, r1, #6, #3
 8002486:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8002488:	7b3b      	ldrb	r3, [r7, #12]
 800248a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	7813      	ldrb	r3, [r2, #0]
 8002494:	f361 0300 	bfi	r3, r1, #0, #1
 8002498:	7013      	strb	r3, [r2, #0]

    return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	00600400 	.word	0x00600400

080024ac <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0a0      	sub	sp, #128	@ 0x80
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60ba      	str	r2, [r7, #8]
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	460b      	mov	r3, r1
 80024bc:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3350      	adds	r3, #80	@ 0x50
 80024e0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80024e4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80024e8:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80024ec:	7bf8      	ldrb	r0, [r7, #15]
 80024ee:	2303      	movs	r3, #3
 80024f0:	f7ff faec 	bl	8001acc <DRV_CANFDSPI_ReadWordArray>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80024fa:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e0cd      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800250a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800250c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002510:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800251a:	f06f 0301 	mvn.w	r3, #1
 800251e:	e0c1      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002522:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002528:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	b29b      	uxth	r3, r3
 8002532:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 8002536:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800253a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800253e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8002542:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002546:	3308      	adds	r3, #8
 8002548:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 800254c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 800255a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800255e:	3304      	adds	r3, #4
 8002560:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 8002564:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 8002572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3304      	adds	r3, #4
 800257e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 8002582:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002586:	2b4c      	cmp	r3, #76	@ 0x4c
 8002588:	d902      	bls.n	8002590 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 800258a:	234c      	movs	r3, #76	@ 0x4c
 800258c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8002590:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002594:	b29b      	uxth	r3, r3
 8002596:	f107 0214 	add.w	r2, r7, #20
 800259a:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 800259e:	7bf8      	ldrb	r0, [r7, #15]
 80025a0:	f7ff f93e 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80025aa:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025b2:	f06f 0302 	mvn.w	r3, #2
 80025b6:	e075      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025b8:	7d3b      	ldrb	r3, [r7, #20]
 80025ba:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025c0:	7dbb      	ldrb	r3, [r7, #22]
 80025c2:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 80025ce:	7e3b      	ldrb	r3, [r7, #24]
 80025d0:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 80025d2:	7e7b      	ldrb	r3, [r7, #25]
 80025d4:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 80025d6:	7ebb      	ldrb	r3, [r7, #26]
 80025d8:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 80025da:	7efb      	ldrb	r3, [r7, #27]
 80025dc:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80025e4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d027      	beq.n	8002642 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 80025f2:	7f3b      	ldrb	r3, [r7, #28]
 80025f4:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 80025f6:	7f7b      	ldrb	r3, [r7, #29]
 80025f8:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 80025fa:	7fbb      	ldrb	r3, [r7, #30]
 80025fc:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
 8002600:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800260e:	e011      	b.n	8002634 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002610:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002614:	f103 020c 	add.w	r2, r3, #12
 8002618:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	440b      	add	r3, r1
 8002620:	3280      	adds	r2, #128	@ 0x80
 8002622:	443a      	add	r2, r7
 8002624:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002628:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800262a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800262e:	3301      	adds	r3, #1
 8002630:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002634:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002638:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800263c:	429a      	cmp	r2, r3
 800263e:	d3e7      	bcc.n	8002610 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002640:	e01e      	b.n	8002680 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002648:	2300      	movs	r3, #0
 800264a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800264e:	e011      	b.n	8002674 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8002650:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002654:	f103 0208 	add.w	r2, r3, #8
 8002658:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	440b      	add	r3, r1
 8002660:	3280      	adds	r2, #128	@ 0x80
 8002662:	443a      	add	r2, r7
 8002664:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002668:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800266a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800266e:	3301      	adds	r3, #1
 8002670:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002674:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002678:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800267c:	429a      	cmp	r2, r3
 800267e:	d3e7      	bcc.n	8002650 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8002680:	7bba      	ldrb	r2, [r7, #14]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f810 	bl	80026ac <DRV_CANFDSPI_ReceiveChannelUpdate>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002692:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 800269a:	f06f 0303 	mvn.w	r3, #3
 800269e:	e001      	b.n	80026a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026a0:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3780      	adds	r7, #128	@ 0x80
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3351      	adds	r3, #81	@ 0x51
 80026d8:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 80026da:	7a7b      	ldrb	r3, [r7, #9]
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80026e2:	7a7a      	ldrb	r2, [r7, #9]
 80026e4:	89f9      	ldrh	r1, [r7, #14]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fd87 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80026ee:	4603      	mov	r3, r0
 80026f0:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80026f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	460a      	mov	r2, r1
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	4613      	mov	r3, r2
 800270c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002716:	231e      	movs	r3, #30
 8002718:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800271e:	f107 0208 	add.w	r2, r7, #8
 8002722:	89b9      	ldrh	r1, [r7, #12]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe ff36 	bl	8001598 <DRV_CANFDSPI_ReadHalfWord>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	e01b      	b.n	8002776 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	b21a      	sxth	r2, r3
 8002742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002746:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	89b9      	ldrh	r1, [r7, #12]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe ffc6 	bl	80016ec <DRV_CANFDSPI_WriteHalfWord>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 800276c:	f06f 0301 	mvn.w	r3, #1
 8002770:	e001      	b.n	8002776 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	0052      	lsls	r2, r2, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3354      	adds	r3, #84	@ 0x54
 80027aa:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027ac:	f107 0208 	add.w	r2, r7, #8
 80027b0:	89b9      	ldrh	r1, [r7, #12]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc93 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e007      	b.n	80027dc <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 80027cc:	7a3b      	ldrb	r3, [r7, #8]
 80027ce:	f003 0317 	and.w	r3, r3, #23
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	603a      	str	r2, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	460b      	mov	r3, r1
 80027f2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002802:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002806:	e022      	b.n	800284e <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	b29b      	uxth	r3, r3
 800281a:	3354      	adds	r3, #84	@ 0x54
 800281c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800281e:	f107 0208 	add.w	r2, r7, #8
 8002822:	89b9      	ldrh	r1, [r7, #12]
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc5a 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	e007      	b.n	800284e <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800283e:	7a3b      	ldrb	r3, [r7, #8]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	b2da      	uxtb	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
 8002860:	460b      	mov	r3, r1
 8002862:	71bb      	strb	r3, [r7, #6]
 8002864:	4613      	mov	r3, r2
 8002866:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8002876:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800287a:	e036      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800287c:	79bb      	ldrb	r3, [r7, #6]
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	b29b      	uxth	r3, r3
 800288a:	3350      	adds	r3, #80	@ 0x50
 800288c:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8002892:	f107 0208 	add.w	r2, r7, #8
 8002896:	89b9      	ldrh	r1, [r7, #12]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc20 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	e01b      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028b2:	7a3b      	ldrb	r3, [r7, #8]
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 80028c8:	7a3a      	ldrb	r2, [r7, #8]
 80028ca:	89b9      	ldrh	r1, [r7, #12]
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fc94 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 80028e0:	f06f 0301 	mvn.w	r3, #1
 80028e4:	e001      	b.n	80028ea <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800290a:	2334      	movs	r3, #52	@ 0x34
 800290c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002912:	f107 0210 	add.w	r2, r7, #16
 8002916:	8ab9      	ldrh	r1, [r7, #20]
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fcfa 	bl	8001314 <DRV_CANFDSPI_ReadWord>
 8002920:	4603      	mov	r3, r0
 8002922:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	e00d      	b.n	800294e <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002932:	7c7a      	ldrb	r2, [r7, #17]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002938:	7c3a      	ldrb	r2, [r7, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800293e:	7cbb      	ldrb	r3, [r7, #18]
 8002940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002944:	b2da      	uxtb	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 800294a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002968:	f107 020e 	add.w	r2, r7, #14
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f640 610c 	movw	r1, #3596	@ 0xe0c
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fbb4 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 8002978:	4603      	mov	r3, r0
 800297a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800297c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e015      	b.n	80029b6 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8002994:	7bba      	ldrb	r2, [r7, #14]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f640 610c 	movw	r1, #3596	@ 0xe0c
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fc2d 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029ae:	f06f 0301 	mvn.w	r3, #1
 80029b2:	e000      	b.n	80029b6 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b090      	sub	sp, #64	@ 0x40
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	460a      	mov	r2, r1
 80029c8:	71fb      	strb	r3, [r7, #7]
 80029ca:	4613      	mov	r3, r2
 80029cc:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029d4:	2300      	movs	r3, #0
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d8:	e008      	b.n	80029ec <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 80029da:	f107 0208 	add.w	r2, r7, #8
 80029de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e0:	4413      	add	r3, r2
 80029e2:	79ba      	ldrb	r2, [r7, #6]
 80029e4:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e8:	3301      	adds	r3, #1
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80029f0:	d9f3      	bls.n	80029da <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 80029f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f6:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fc:	e016      	b.n	8002a2c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 80029fe:	f107 0208 	add.w	r2, r7, #8
 8002a02:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a04:	79f8      	ldrb	r0, [r7, #7]
 8002a06:	2330      	movs	r3, #48	@ 0x30
 8002a08:	f7fe ffbc 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 8002a12:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e00a      	b.n	8002a36 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a22:	3330      	adds	r3, #48	@ 0x30
 8002a24:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	3301      	adds	r3, #1
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2e:	2b29      	cmp	r3, #41	@ 0x29
 8002a30:	d9e5      	bls.n	80029fe <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a32:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3740      	adds	r7, #64	@ 0x40
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4604      	mov	r4, r0
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	4603      	mov	r3, r0
 8002a52:	71bb      	strb	r3, [r7, #6]
 8002a54:	460b      	mov	r3, r1
 8002a56:	717b      	strb	r3, [r7, #5]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a60:	793b      	ldrb	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d036      	beq.n	8002ad4 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	dc4c      	bgt.n	8002b04 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d018      	beq.n	8002aa4 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002a72:	e047      	b.n	8002b04 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002a74:	79ba      	ldrb	r2, [r7, #6]
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f84c 	bl	8002b18 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	e03d      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	79b9      	ldrb	r1, [r7, #6]
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f8c3 	bl	8002c24 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
            break;
 8002aa2:	e032      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002aa4:	79ba      	ldrb	r2, [r7, #6]
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 faf2 	bl	8003094 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	e025      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002ac2:	797a      	ldrb	r2, [r7, #5]
 8002ac4:	79b9      	ldrb	r1, [r7, #6]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb6f 	bl	80031ac <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
            break;
 8002ad2:	e01a      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002ad4:	79ba      	ldrb	r2, [r7, #6]
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fd10 	bl	8003500 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	e00d      	b.n	8002b0e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002af2:	797a      	ldrb	r2, [r7, #5]
 8002af4:	79b9      	ldrb	r1, [r7, #6]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd8d 	bl	8003618 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
            break;
 8002b02:	e002      	b.n	8002b0a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b04:	23ff      	movs	r3, #255	@ 0xff
 8002b06:	73fb      	strb	r3, [r7, #15]
            break;
 8002b08:	bf00      	nop
    }

    return spiTransferError;
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
	...

08002b18 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460a      	mov	r2, r1
 8002b22:	71fb      	strb	r3, [r7, #7]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c20 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b2e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2b11      	cmp	r3, #17
 8002b34:	d862      	bhi.n	8002bfc <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b36:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b85 	.word	0x08002b85
 8002b40:	08002b85 	.word	0x08002b85
 8002b44:	08002b85 	.word	0x08002b85
 8002b48:	08002b85 	.word	0x08002b85
 8002b4c:	08002b85 	.word	0x08002b85
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002b85 	.word	0x08002b85
 8002b58:	08002b85 	.word	0x08002b85
 8002b5c:	08002ba3 	.word	0x08002ba3
 8002b60:	08002ba3 	.word	0x08002ba3
 8002b64:	08002ba3 	.word	0x08002ba3
 8002b68:	08002ba3 	.word	0x08002ba3
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002ba3 	.word	0x08002ba3
 8002b74:	08002ba3 	.word	0x08002ba3
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bdf 	.word	0x08002bdf
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002b88:	233e      	movs	r3, #62	@ 0x3e
 8002b8a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002b8c:	7a7b      	ldrb	r3, [r7, #9]
 8002b8e:	220f      	movs	r2, #15
 8002b90:	f362 0306 	bfi	r3, r2, #0, #7
 8002b94:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002b96:	7a3b      	ldrb	r3, [r7, #8]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	723b      	strb	r3, [r7, #8]
            break;
 8002ba0:	e02f      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002ba6:	237e      	movs	r3, #126	@ 0x7e
 8002ba8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002baa:	7a7b      	ldrb	r3, [r7, #9]
 8002bac:	221f      	movs	r2, #31
 8002bae:	f362 0306 	bfi	r3, r2, #0, #7
 8002bb2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bb4:	7a3b      	ldrb	r3, [r7, #8]
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	f362 0306 	bfi	r3, r2, #0, #7
 8002bbc:	723b      	strb	r3, [r7, #8]
            break;
 8002bbe:	e020      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002bc4:	231e      	movs	r3, #30
 8002bc6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	2207      	movs	r2, #7
 8002bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002bd2:	7a3b      	ldrb	r3, [r7, #8]
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e011      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002be2:	23fe      	movs	r3, #254	@ 0xfe
 8002be4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002be6:	7a7b      	ldrb	r3, [r7, #9]
 8002be8:	223f      	movs	r2, #63	@ 0x3f
 8002bea:	f362 0306 	bfi	r3, r2, #0, #7
 8002bee:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	223f      	movs	r2, #63	@ 0x3f
 8002bf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf8:	723b      	strb	r3, [r7, #8]
            break;
 8002bfa:	e002      	b.n	8002c02 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	e009      	b.n	8002c16 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2104      	movs	r1, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fc2b 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	003e0f0f 	.word	0x003e0f0f

08002c24 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	71bb      	strb	r3, [r7, #6]
 8002c32:	4613      	mov	r3, r2
 8002c34:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c3a:	4be2      	ldr	r3, [pc, #904]	@ (8002fc4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c3c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c42:	7abb      	ldrb	r3, [r7, #10]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f362 0301 	bfi	r3, r2, #0, #2
 8002c4a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	f200 81f6 	bhi.w	8003044 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002ca9 	.word	0x08002ca9
 8002c64:	08002ce7 	.word	0x08002ce7
 8002c68:	08002d25 	.word	0x08002d25
 8002c6c:	08002d63 	.word	0x08002d63
 8002c70:	08002da1 	.word	0x08002da1
 8002c74:	08002ddf 	.word	0x08002ddf
 8002c78:	08002e19 	.word	0x08002e19
 8002c7c:	08002e4d 	.word	0x08002e4d
 8002c80:	08002e7f 	.word	0x08002e7f
 8002c84:	08002ec5 	.word	0x08002ec5
 8002c88:	08002f0b 	.word	0x08002f0b
 8002c8c:	08002f49 	.word	0x08002f49
 8002c90:	08002f87 	.word	0x08002f87
 8002c94:	08002fc9 	.word	0x08002fc9
 8002c98:	08003007 	.word	0x08003007
 8002c9c:	08002d63 	.word	0x08002d63
 8002ca0:	08002e19 	.word	0x08002e19
 8002ca4:	08002e7f 	.word	0x08002e7f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	221e      	movs	r2, #30
 8002cb0:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	f362 0303 	bfi	r3, r2, #0, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	221f      	movs	r2, #31
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0305 	bfi	r3, r2, #0, #6
 8002ce2:	723b      	strb	r3, [r7, #8]
            break;
 8002ce4:	e1b1      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	220e      	movs	r2, #14
 8002cee:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f362 0303 	bfi	r3, r2, #0, #4
 8002d06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e192      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002d30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d3c:	7b3b      	ldrb	r3, [r7, #12]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f362 0303 	bfi	r3, r2, #0, #4
 8002d44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d46:	7a7b      	ldrb	r3, [r7, #9]
 8002d48:	2209      	movs	r2, #9
 8002d4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	7a3b      	ldrb	r3, [r7, #8]
 8002d5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5e:	723b      	strb	r3, [r7, #8]
            break;
 8002d60:	e173      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	2206      	movs	r2, #6
 8002d6a:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d70:	7b7b      	ldrb	r3, [r7, #13]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f362 0303 	bfi	r3, r2, #0, #4
 8002d78:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d7a:	7b3b      	ldrb	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d82:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d84:	7a7b      	ldrb	r3, [r7, #9]
 8002d86:	2207      	movs	r2, #7
 8002d88:	f362 0306 	bfi	r3, r2, #0, #7
 8002d8c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	7a3b      	ldrb	r3, [r7, #8]
 8002d98:	f362 0305 	bfi	r3, r2, #0, #6
 8002d9c:	723b      	strb	r3, [r7, #8]
            break;
 8002d9e:	e154      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	2204      	movs	r2, #4
 8002da8:	f362 0304 	bfi	r3, r2, #0, #5
 8002dac:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dae:	7b7b      	ldrb	r3, [r7, #13]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f362 0303 	bfi	r3, r2, #0, #4
 8002db6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002db8:	7b3b      	ldrb	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f362 0303 	bfi	r3, r2, #0, #4
 8002dc0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dc2:	7a7b      	ldrb	r3, [r7, #9]
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	f362 0306 	bfi	r3, r2, #0, #7
 8002dca:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	7a3b      	ldrb	r3, [r7, #8]
 8002dd6:	f362 0305 	bfi	r3, r2, #0, #6
 8002dda:	723b      	strb	r3, [r7, #8]
            break;
 8002ddc:	e135      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	2203      	movs	r2, #3
 8002de6:	f362 0304 	bfi	r3, r2, #0, #5
 8002dea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	f36f 0303 	bfc	r3, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	f36f 0303 	bfc	r3, #0, #4
 8002dfa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002dfc:	7a7b      	ldrb	r3, [r7, #9]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f362 0306 	bfi	r3, r2, #0, #7
 8002e04:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	7a3b      	ldrb	r3, [r7, #8]
 8002e10:	f362 0305 	bfi	r3, r2, #0, #6
 8002e14:	723b      	strb	r3, [r7, #8]
            break;
 8002e16:	e118      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f362 0304 	bfi	r3, r2, #0, #5
 8002e24:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e26:	7b7b      	ldrb	r3, [r7, #13]
 8002e28:	f36f 0303 	bfc	r3, #0, #4
 8002e2c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	f36f 0303 	bfc	r3, #0, #4
 8002e34:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e36:	7a7b      	ldrb	r3, [r7, #9]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e3e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e40:	7a3b      	ldrb	r3, [r7, #8]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f362 0305 	bfi	r3, r2, #0, #6
 8002e48:	723b      	strb	r3, [r7, #8]
            break;
 8002e4a:	e0fe      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f362 0304 	bfi	r3, r2, #0, #5
 8002e58:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f36f 0303 	bfc	r3, #0, #4
 8002e60:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e62:	7b3b      	ldrb	r3, [r7, #12]
 8002e64:	f36f 0303 	bfc	r3, #0, #4
 8002e68:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002e6a:	7a7b      	ldrb	r3, [r7, #9]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002e72:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002e74:	7a3b      	ldrb	r3, [r7, #8]
 8002e76:	f36f 0305 	bfc	r3, #0, #6
 8002e7a:	723b      	strb	r3, [r7, #8]
            break;
 8002e7c:	e0e5      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	221e      	movs	r2, #30
 8002e86:	f362 0304 	bfi	r3, r2, #0, #5
 8002e8a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002e8c:	7b7b      	ldrb	r3, [r7, #13]
 8002e8e:	2207      	movs	r2, #7
 8002e90:	f362 0303 	bfi	r3, r2, #0, #4
 8002e94:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	2207      	movs	r2, #7
 8002e9a:	f362 0303 	bfi	r3, r2, #0, #4
 8002e9e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002ea0:	7a7b      	ldrb	r3, [r7, #9]
 8002ea2:	221f      	movs	r2, #31
 8002ea4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ea8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	7a3b      	ldrb	r3, [r7, #8]
 8002eb4:	f362 0305 	bfi	r3, r2, #0, #6
 8002eb8:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002eba:	7abb      	ldrb	r3, [r7, #10]
 8002ebc:	f36f 0301 	bfc	r3, #0, #2
 8002ec0:	72bb      	strb	r3, [r7, #10]
            break;
 8002ec2:	e0c2      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	2211      	movs	r2, #17
 8002ecc:	f362 0304 	bfi	r3, r2, #0, #5
 8002ed0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f362 0303 	bfi	r3, r2, #0, #4
 8002eda:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	f362 0303 	bfi	r3, r2, #0, #4
 8002ee4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002ee6:	7a7b      	ldrb	r3, [r7, #9]
 8002ee8:	2212      	movs	r2, #18
 8002eea:	f362 0306 	bfi	r3, r2, #0, #7
 8002eee:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	7a3b      	ldrb	r3, [r7, #8]
 8002efa:	f362 0305 	bfi	r3, r2, #0, #6
 8002efe:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f00:	7abb      	ldrb	r3, [r7, #10]
 8002f02:	f36f 0301 	bfc	r3, #0, #2
 8002f06:	72bb      	strb	r3, [r7, #10]
            break;
 8002f08:	e09f      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	221e      	movs	r2, #30
 8002f12:	f362 0304 	bfi	r3, r2, #0, #5
 8002f16:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f18:	7b7b      	ldrb	r3, [r7, #13]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f20:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f22:	7b3b      	ldrb	r3, [r7, #12]
 8002f24:	2207      	movs	r2, #7
 8002f26:	f362 0303 	bfi	r3, r2, #0, #4
 8002f2a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f2c:	7a7b      	ldrb	r3, [r7, #9]
 8002f2e:	221f      	movs	r2, #31
 8002f30:	f362 0306 	bfi	r3, r2, #0, #7
 8002f34:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	7a3b      	ldrb	r3, [r7, #8]
 8002f40:	f362 0305 	bfi	r3, r2, #0, #6
 8002f44:	723b      	strb	r3, [r7, #8]
            break;
 8002f46:	e080      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	2212      	movs	r2, #18
 8002f50:	f362 0304 	bfi	r3, r2, #0, #5
 8002f54:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f56:	7b7b      	ldrb	r3, [r7, #13]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f362 0303 	bfi	r3, r2, #0, #4
 8002f5e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f60:	7b3b      	ldrb	r3, [r7, #12]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f362 0303 	bfi	r3, r2, #0, #4
 8002f68:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002f6a:	7a7b      	ldrb	r3, [r7, #9]
 8002f6c:	2213      	movs	r2, #19
 8002f6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002f72:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	7a3b      	ldrb	r3, [r7, #8]
 8002f7e:	f362 0305 	bfi	r3, r2, #0, #6
 8002f82:	723b      	strb	r3, [r7, #8]
            break;
 8002f84:	e061      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f8a:	7bbb      	ldrb	r3, [r7, #14]
 8002f8c:	220e      	movs	r2, #14
 8002f8e:	f362 0304 	bfi	r3, r2, #0, #5
 8002f92:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f94:	7b7b      	ldrb	r3, [r7, #13]
 8002f96:	2203      	movs	r2, #3
 8002f98:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002f9e:	7b3b      	ldrb	r3, [r7, #12]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fa8:	7a7b      	ldrb	r3, [r7, #9]
 8002faa:	220f      	movs	r2, #15
 8002fac:	f362 0306 	bfi	r3, r2, #0, #7
 8002fb0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	7a3b      	ldrb	r3, [r7, #8]
 8002fbc:	f362 0305 	bfi	r3, r2, #0, #6
 8002fc0:	723b      	strb	r3, [r7, #8]
            break;
 8002fc2:	e042      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002fc4:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	f362 0304 	bfi	r3, r2, #0, #5
 8002fd4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002fd6:	7b7b      	ldrb	r3, [r7, #13]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f362 0303 	bfi	r3, r2, #0, #4
 8002fde:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002fe0:	7b3b      	ldrb	r3, [r7, #12]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002fea:	7a7b      	ldrb	r3, [r7, #9]
 8002fec:	2209      	movs	r2, #9
 8002fee:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	7a3b      	ldrb	r3, [r7, #8]
 8002ffe:	f362 0305 	bfi	r3, r2, #0, #6
 8003002:	723b      	strb	r3, [r7, #8]
            break;
 8003004:	e021      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	2206      	movs	r2, #6
 800300e:	f362 0304 	bfi	r3, r2, #0, #5
 8003012:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003014:	7b7b      	ldrb	r3, [r7, #13]
 8003016:	2201      	movs	r2, #1
 8003018:	f362 0303 	bfi	r3, r2, #0, #4
 800301c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800301e:	7b3b      	ldrb	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f362 0303 	bfi	r3, r2, #0, #4
 8003026:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003028:	7a7b      	ldrb	r3, [r7, #9]
 800302a:	2207      	movs	r2, #7
 800302c:	f362 0306 	bfi	r3, r2, #0, #7
 8003030:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003038:	b2da      	uxtb	r2, r3
 800303a:	7a3b      	ldrb	r3, [r7, #8]
 800303c:	f362 0305 	bfi	r3, r2, #0, #6
 8003040:	723b      	strb	r3, [r7, #8]
            break;
 8003042:	e002      	b.n	800304a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e01f      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2108      	movs	r1, #8
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fa07 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800305a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8003062:	f06f 0301 	mvn.w	r3, #1
 8003066:	e010      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	210c      	movs	r1, #12
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f9f8 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8003080:	f06f 0302 	mvn.w	r3, #2
 8003084:	e001      	b.n	800308a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8003086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop

08003094 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	460a      	mov	r2, r1
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030aa:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030ac:	79bb      	ldrb	r3, [r7, #6]
 80030ae:	2b11      	cmp	r3, #17
 80030b0:	d862      	bhi.n	8003178 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030b2:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003101 	.word	0x08003101
 80030bc:	08003101 	.word	0x08003101
 80030c0:	08003179 	.word	0x08003179
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	08003101 	.word	0x08003101
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	0800311f 	.word	0x0800311f
 80030dc:	0800311f 	.word	0x0800311f
 80030e0:	0800311f 	.word	0x0800311f
 80030e4:	0800311f 	.word	0x0800311f
 80030e8:	0800311f 	.word	0x0800311f
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	0800311f 	.word	0x0800311f
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800315b 	.word	0x0800315b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003104:	231e      	movs	r3, #30
 8003106:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003108:	7a7b      	ldrb	r3, [r7, #9]
 800310a:	2207      	movs	r2, #7
 800310c:	f362 0306 	bfi	r3, r2, #0, #7
 8003110:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003112:	7a3b      	ldrb	r3, [r7, #8]
 8003114:	2207      	movs	r2, #7
 8003116:	f362 0306 	bfi	r3, r2, #0, #7
 800311a:	723b      	strb	r3, [r7, #8]
            break;
 800311c:	e02f      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003122:	233e      	movs	r3, #62	@ 0x3e
 8003124:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003126:	7a7b      	ldrb	r3, [r7, #9]
 8003128:	220f      	movs	r2, #15
 800312a:	f362 0306 	bfi	r3, r2, #0, #7
 800312e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003130:	7a3b      	ldrb	r3, [r7, #8]
 8003132:	220f      	movs	r2, #15
 8003134:	f362 0306 	bfi	r3, r2, #0, #7
 8003138:	723b      	strb	r3, [r7, #8]
            break;
 800313a:	e020      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003140:	230e      	movs	r3, #14
 8003142:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	2203      	movs	r2, #3
 8003148:	f362 0306 	bfi	r3, r2, #0, #7
 800314c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	2203      	movs	r2, #3
 8003152:	f362 0306 	bfi	r3, r2, #0, #7
 8003156:	723b      	strb	r3, [r7, #8]
            break;
 8003158:	e011      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800315e:	237e      	movs	r3, #126	@ 0x7e
 8003160:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8003162:	7a7b      	ldrb	r3, [r7, #9]
 8003164:	221f      	movs	r2, #31
 8003166:	f362 0306 	bfi	r3, r2, #0, #7
 800316a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 800316c:	7a3b      	ldrb	r3, [r7, #8]
 800316e:	221f      	movs	r2, #31
 8003170:	f362 0306 	bfi	r3, r2, #0, #7
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e002      	b.n	800317e <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e010      	b.n	80031a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	2104      	movs	r1, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe f96d 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8003196:	f06f 0301 	mvn.w	r3, #1
 800319a:	e001      	b.n	80031a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 800319c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	003e0f0f 	.word	0x003e0f0f

080031ac <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	460b      	mov	r3, r1
 80031b8:	71bb      	strb	r3, [r7, #6]
 80031ba:	4613      	mov	r3, r2
 80031bc:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031c2:	4bce      	ldr	r3, [pc, #824]	@ (80034fc <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 80031c4:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80031ca:	7abb      	ldrb	r3, [r7, #10]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f362 0301 	bfi	r3, r2, #0, #2
 80031d2:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80031d8:	79bb      	ldrb	r3, [r7, #6]
 80031da:	2b11      	cmp	r3, #17
 80031dc:	f200 8166 	bhi.w	80034ac <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	08003231 	.word	0x08003231
 80031ec:	0800326f 	.word	0x0800326f
 80031f0:	080034ad 	.word	0x080034ad
 80031f4:	080032ad 	.word	0x080032ad
 80031f8:	080032e7 	.word	0x080032e7
 80031fc:	08003321 	.word	0x08003321
 8003200:	08003321 	.word	0x08003321
 8003204:	08003321 	.word	0x08003321
 8003208:	08003327 	.word	0x08003327
 800320c:	0800336d 	.word	0x0800336d
 8003210:	080033b3 	.word	0x080033b3
 8003214:	080033f1 	.word	0x080033f1
 8003218:	0800342f 	.word	0x0800342f
 800321c:	0800346d 	.word	0x0800346d
 8003220:	08003473 	.word	0x08003473
 8003224:	080032ad 	.word	0x080032ad
 8003228:	08003321 	.word	0x08003321
 800322c:	08003327 	.word	0x08003327
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003234:	7bbb      	ldrb	r3, [r7, #14]
 8003236:	220e      	movs	r2, #14
 8003238:	f362 0304 	bfi	r3, r2, #0, #5
 800323c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800323e:	7b7b      	ldrb	r3, [r7, #13]
 8003240:	2203      	movs	r2, #3
 8003242:	f362 0303 	bfi	r3, r2, #0, #4
 8003246:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003248:	7b3b      	ldrb	r3, [r7, #12]
 800324a:	2203      	movs	r2, #3
 800324c:	f362 0303 	bfi	r3, r2, #0, #4
 8003250:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003252:	7a7b      	ldrb	r3, [r7, #9]
 8003254:	220f      	movs	r2, #15
 8003256:	f362 0306 	bfi	r3, r2, #0, #7
 800325a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003262:	b2da      	uxtb	r2, r3
 8003264:	7a3b      	ldrb	r3, [r7, #8]
 8003266:	f362 0305 	bfi	r3, r2, #0, #6
 800326a:	723b      	strb	r3, [r7, #8]
            break;
 800326c:	e121      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2206      	movs	r2, #6
 8003276:	f362 0304 	bfi	r3, r2, #0, #5
 800327a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800327c:	7b7b      	ldrb	r3, [r7, #13]
 800327e:	2201      	movs	r2, #1
 8003280:	f362 0303 	bfi	r3, r2, #0, #4
 8003284:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003286:	7b3b      	ldrb	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f362 0303 	bfi	r3, r2, #0, #4
 800328e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003290:	7a7b      	ldrb	r3, [r7, #9]
 8003292:	2207      	movs	r2, #7
 8003294:	f362 0306 	bfi	r3, r2, #0, #7
 8003298:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	7a3b      	ldrb	r3, [r7, #8]
 80032a4:	f362 0305 	bfi	r3, r2, #0, #6
 80032a8:	723b      	strb	r3, [r7, #8]
            break;
 80032aa:	e102      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032b0:	7bbb      	ldrb	r3, [r7, #14]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f362 0304 	bfi	r3, r2, #0, #5
 80032b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032ba:	7b7b      	ldrb	r3, [r7, #13]
 80032bc:	f36f 0303 	bfc	r3, #0, #4
 80032c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	f36f 0303 	bfc	r3, #0, #4
 80032c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80032ca:	7a7b      	ldrb	r3, [r7, #9]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f362 0306 	bfi	r3, r2, #0, #7
 80032d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	7a3b      	ldrb	r3, [r7, #8]
 80032de:	f362 0305 	bfi	r3, r2, #0, #6
 80032e2:	723b      	strb	r3, [r7, #8]
            break;
 80032e4:	e0e5      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f362 0304 	bfi	r3, r2, #0, #5
 80032f2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	f36f 0303 	bfc	r3, #0, #4
 80032fa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032fc:	7b3b      	ldrb	r3, [r7, #12]
 80032fe:	f36f 0303 	bfc	r3, #0, #4
 8003302:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003304:	7a7b      	ldrb	r3, [r7, #9]
 8003306:	2202      	movs	r2, #2
 8003308:	f362 0306 	bfi	r3, r2, #0, #7
 800330c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003314:	b2da      	uxtb	r2, r3
 8003316:	7a3b      	ldrb	r3, [r7, #8]
 8003318:	f362 0305 	bfi	r3, r2, #0, #6
 800331c:	723b      	strb	r3, [r7, #8]
            break;
 800331e:	e0c8      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e0e5      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	221e      	movs	r2, #30
 800332e:	f362 0304 	bfi	r3, r2, #0, #5
 8003332:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	2207      	movs	r2, #7
 8003338:	f362 0303 	bfi	r3, r2, #0, #4
 800333c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800333e:	7b3b      	ldrb	r3, [r7, #12]
 8003340:	2207      	movs	r2, #7
 8003342:	f362 0303 	bfi	r3, r2, #0, #4
 8003346:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003348:	7a7b      	ldrb	r3, [r7, #9]
 800334a:	221f      	movs	r2, #31
 800334c:	f362 0306 	bfi	r3, r2, #0, #7
 8003350:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003358:	b2da      	uxtb	r2, r3
 800335a:	7a3b      	ldrb	r3, [r7, #8]
 800335c:	f362 0305 	bfi	r3, r2, #0, #6
 8003360:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003362:	7abb      	ldrb	r3, [r7, #10]
 8003364:	f36f 0301 	bfc	r3, #0, #2
 8003368:	72bb      	strb	r3, [r7, #10]
            break;
 800336a:	e0a2      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	2211      	movs	r2, #17
 8003374:	f362 0304 	bfi	r3, r2, #0, #5
 8003378:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	2204      	movs	r2, #4
 800337e:	f362 0303 	bfi	r3, r2, #0, #4
 8003382:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8003384:	7b3b      	ldrb	r3, [r7, #12]
 8003386:	2204      	movs	r2, #4
 8003388:	f362 0303 	bfi	r3, r2, #0, #4
 800338c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 800338e:	7a7b      	ldrb	r3, [r7, #9]
 8003390:	2212      	movs	r2, #18
 8003392:	f362 0306 	bfi	r3, r2, #0, #7
 8003396:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	7a3b      	ldrb	r3, [r7, #8]
 80033a2:	f362 0305 	bfi	r3, r2, #0, #6
 80033a6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033a8:	7abb      	ldrb	r3, [r7, #10]
 80033aa:	f36f 0301 	bfc	r3, #0, #2
 80033ae:	72bb      	strb	r3, [r7, #10]
            break;
 80033b0:	e07f      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033b6:	7bbb      	ldrb	r3, [r7, #14]
 80033b8:	220e      	movs	r2, #14
 80033ba:	f362 0304 	bfi	r3, r2, #0, #5
 80033be:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033c0:	7b7b      	ldrb	r3, [r7, #13]
 80033c2:	2203      	movs	r2, #3
 80033c4:	f362 0303 	bfi	r3, r2, #0, #4
 80033c8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80033ca:	7b3b      	ldrb	r3, [r7, #12]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f362 0303 	bfi	r3, r2, #0, #4
 80033d2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80033d4:	7a7b      	ldrb	r3, [r7, #9]
 80033d6:	220f      	movs	r2, #15
 80033d8:	f362 0306 	bfi	r3, r2, #0, #7
 80033dc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	7a3b      	ldrb	r3, [r7, #8]
 80033e8:	f362 0305 	bfi	r3, r2, #0, #6
 80033ec:	723b      	strb	r3, [r7, #8]
            break;
 80033ee:	e060      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	2208      	movs	r2, #8
 80033f8:	f362 0304 	bfi	r3, r2, #0, #5
 80033fc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	2202      	movs	r2, #2
 8003402:	f362 0303 	bfi	r3, r2, #0, #4
 8003406:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003408:	7b3b      	ldrb	r3, [r7, #12]
 800340a:	2202      	movs	r2, #2
 800340c:	f362 0303 	bfi	r3, r2, #0, #4
 8003410:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003412:	7a7b      	ldrb	r3, [r7, #9]
 8003414:	2209      	movs	r2, #9
 8003416:	f362 0306 	bfi	r3, r2, #0, #7
 800341a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003422:	b2da      	uxtb	r2, r3
 8003424:	7a3b      	ldrb	r3, [r7, #8]
 8003426:	f362 0305 	bfi	r3, r2, #0, #6
 800342a:	723b      	strb	r3, [r7, #8]
            break;
 800342c:	e041      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	2206      	movs	r2, #6
 8003436:	f362 0304 	bfi	r3, r2, #0, #5
 800343a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	2201      	movs	r2, #1
 8003440:	f362 0303 	bfi	r3, r2, #0, #4
 8003444:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003446:	7b3b      	ldrb	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f362 0303 	bfi	r3, r2, #0, #4
 800344e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003450:	7a7b      	ldrb	r3, [r7, #9]
 8003452:	2207      	movs	r2, #7
 8003454:	f362 0306 	bfi	r3, r2, #0, #7
 8003458:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	7a3b      	ldrb	r3, [r7, #8]
 8003464:	f362 0305 	bfi	r3, r2, #0, #6
 8003468:	723b      	strb	r3, [r7, #8]
            break;
 800346a:	e022      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e03f      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	2202      	movs	r2, #2
 800347a:	f362 0304 	bfi	r3, r2, #0, #5
 800347e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003480:	7b7b      	ldrb	r3, [r7, #13]
 8003482:	f36f 0303 	bfc	r3, #0, #4
 8003486:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003488:	7b3b      	ldrb	r3, [r7, #12]
 800348a:	f36f 0303 	bfc	r3, #0, #4
 800348e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003490:	7a7b      	ldrb	r3, [r7, #9]
 8003492:	2203      	movs	r2, #3
 8003494:	f362 0306 	bfi	r3, r2, #0, #7
 8003498:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	7a3b      	ldrb	r3, [r7, #8]
 80034a4:	f362 0305 	bfi	r3, r2, #0, #6
 80034a8:	723b      	strb	r3, [r7, #8]
            break;
 80034aa:	e002      	b.n	80034b2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
 80034b0:	e01f      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2108      	movs	r1, #8
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd ffd3 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 80034ca:	f06f 0301 	mvn.w	r3, #1
 80034ce:	e010      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	210c      	movs	r1, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ffc4 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 80034e8:	f06f 0302 	mvn.w	r3, #2
 80034ec:	e001      	b.n	80034f2 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 80034ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000e0303 	.word	0x000e0303

08003500 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	460a      	mov	r2, r1
 800350a:	71fb      	strb	r3, [r7, #7]
 800350c:	4613      	mov	r3, r2
 800350e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003514:	4b3f      	ldr	r3, [pc, #252]	@ (8003614 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003516:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003518:	79bb      	ldrb	r3, [r7, #6]
 800351a:	2b11      	cmp	r3, #17
 800351c:	d862      	bhi.n	80035e4 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	0800356d 	.word	0x0800356d
 8003528:	0800356d 	.word	0x0800356d
 800352c:	080035e5 	.word	0x080035e5
 8003530:	0800356d 	.word	0x0800356d
 8003534:	0800356d 	.word	0x0800356d
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800356d 	.word	0x0800356d
 8003540:	0800356d 	.word	0x0800356d
 8003544:	0800358b 	.word	0x0800358b
 8003548:	0800358b 	.word	0x0800358b
 800354c:	0800358b 	.word	0x0800358b
 8003550:	0800358b 	.word	0x0800358b
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800358b 	.word	0x0800358b
 800355c:	0800358b 	.word	0x0800358b
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	080035c7 	.word	0x080035c7
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003570:	230e      	movs	r3, #14
 8003572:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003574:	7a7b      	ldrb	r3, [r7, #9]
 8003576:	2203      	movs	r2, #3
 8003578:	f362 0306 	bfi	r3, r2, #0, #7
 800357c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800357e:	7a3b      	ldrb	r3, [r7, #8]
 8003580:	2203      	movs	r2, #3
 8003582:	f362 0306 	bfi	r3, r2, #0, #7
 8003586:	723b      	strb	r3, [r7, #8]
            break;
 8003588:	e02f      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800358e:	231e      	movs	r3, #30
 8003590:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003592:	7a7b      	ldrb	r3, [r7, #9]
 8003594:	2207      	movs	r2, #7
 8003596:	f362 0306 	bfi	r3, r2, #0, #7
 800359a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800359c:	7a3b      	ldrb	r3, [r7, #8]
 800359e:	2207      	movs	r2, #7
 80035a0:	f362 0306 	bfi	r3, r2, #0, #7
 80035a4:	723b      	strb	r3, [r7, #8]
            break;
 80035a6:	e020      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035ac:	2307      	movs	r3, #7
 80035ae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f362 0306 	bfi	r3, r2, #0, #7
 80035b8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	2202      	movs	r2, #2
 80035be:	f362 0306 	bfi	r3, r2, #0, #7
 80035c2:	723b      	strb	r3, [r7, #8]
            break;
 80035c4:	e011      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80035ca:	233e      	movs	r3, #62	@ 0x3e
 80035cc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	220f      	movs	r2, #15
 80035d2:	f362 0306 	bfi	r3, r2, #0, #7
 80035d6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	220f      	movs	r2, #15
 80035dc:	f362 0306 	bfi	r3, r2, #0, #7
 80035e0:	723b      	strb	r3, [r7, #8]
            break;
 80035e2:	e002      	b.n	80035ea <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	e010      	b.n	800360c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2104      	movs	r1, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd ff37 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 80035f6:	4603      	mov	r3, r0
 80035f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003602:	f06f 0301 	mvn.w	r3, #1
 8003606:	e001      	b.n	800360c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	003e0f0f 	.word	0x003e0f0f

08003618 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
 8003622:	460b      	mov	r3, r1
 8003624:	71bb      	strb	r3, [r7, #6]
 8003626:	4613      	mov	r3, r2
 8003628:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800362e:	4b92      	ldr	r3, [pc, #584]	@ (8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003630:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003636:	7abb      	ldrb	r3, [r7, #10]
 8003638:	2202      	movs	r2, #2
 800363a:	f362 0301 	bfi	r3, r2, #0, #2
 800363e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	2b11      	cmp	r3, #17
 8003648:	f200 80ef 	bhi.w	800382a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	0800369d 	.word	0x0800369d
 8003658:	080036db 	.word	0x080036db
 800365c:	0800382b 	.word	0x0800382b
 8003660:	08003715 	.word	0x08003715
 8003664:	08003715 	.word	0x08003715
 8003668:	08003715 	.word	0x08003715
 800366c:	08003715 	.word	0x08003715
 8003670:	08003715 	.word	0x08003715
 8003674:	0800371b 	.word	0x0800371b
 8003678:	08003761 	.word	0x08003761
 800367c:	080037a7 	.word	0x080037a7
 8003680:	080037e5 	.word	0x080037e5
 8003684:	080037eb 	.word	0x080037eb
 8003688:	08003825 	.word	0x08003825
 800368c:	08003825 	.word	0x08003825
 8003690:	08003715 	.word	0x08003715
 8003694:	08003715 	.word	0x08003715
 8003698:	0800371b 	.word	0x0800371b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	2206      	movs	r2, #6
 80036a4:	f362 0304 	bfi	r3, r2, #0, #5
 80036a8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036aa:	7b7b      	ldrb	r3, [r7, #13]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f362 0303 	bfi	r3, r2, #0, #4
 80036b2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036b4:	7b3b      	ldrb	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f362 0303 	bfi	r3, r2, #0, #4
 80036bc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036be:	7a7b      	ldrb	r3, [r7, #9]
 80036c0:	2207      	movs	r2, #7
 80036c2:	f362 0306 	bfi	r3, r2, #0, #7
 80036c6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	7a3b      	ldrb	r3, [r7, #8]
 80036d2:	f362 0305 	bfi	r3, r2, #0, #6
 80036d6:	723b      	strb	r3, [r7, #8]
            break;
 80036d8:	e0aa      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f362 0304 	bfi	r3, r2, #0, #5
 80036e6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80036e8:	7b7b      	ldrb	r3, [r7, #13]
 80036ea:	f36f 0303 	bfc	r3, #0, #4
 80036ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	f36f 0303 	bfc	r3, #0, #4
 80036f6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80036f8:	7a7b      	ldrb	r3, [r7, #9]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f362 0306 	bfi	r3, r2, #0, #7
 8003700:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003708:	b2da      	uxtb	r2, r3
 800370a:	7a3b      	ldrb	r3, [r7, #8]
 800370c:	f362 0305 	bfi	r3, r2, #0, #6
 8003710:	723b      	strb	r3, [r7, #8]
            break;
 8003712:	e08d      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	e0aa      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	220e      	movs	r2, #14
 8003722:	f362 0304 	bfi	r3, r2, #0, #5
 8003726:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	2203      	movs	r2, #3
 800372c:	f362 0303 	bfi	r3, r2, #0, #4
 8003730:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003732:	7b3b      	ldrb	r3, [r7, #12]
 8003734:	2203      	movs	r2, #3
 8003736:	f362 0303 	bfi	r3, r2, #0, #4
 800373a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800373c:	7a7b      	ldrb	r3, [r7, #9]
 800373e:	220f      	movs	r2, #15
 8003740:	f362 0306 	bfi	r3, r2, #0, #7
 8003744:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800374c:	b2da      	uxtb	r2, r3
 800374e:	7a3b      	ldrb	r3, [r7, #8]
 8003750:	f362 0305 	bfi	r3, r2, #0, #6
 8003754:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003756:	7abb      	ldrb	r3, [r7, #10]
 8003758:	f36f 0301 	bfc	r3, #0, #2
 800375c:	72bb      	strb	r3, [r7, #10]
            break;
 800375e:	e067      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	2207      	movs	r2, #7
 8003768:	f362 0304 	bfi	r3, r2, #0, #5
 800376c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800376e:	7b7b      	ldrb	r3, [r7, #13]
 8003770:	2202      	movs	r2, #2
 8003772:	f362 0303 	bfi	r3, r2, #0, #4
 8003776:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003778:	7b3b      	ldrb	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	f362 0303 	bfi	r3, r2, #0, #4
 8003780:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8003782:	7a7b      	ldrb	r3, [r7, #9]
 8003784:	2208      	movs	r2, #8
 8003786:	f362 0306 	bfi	r3, r2, #0, #7
 800378a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003792:	b2da      	uxtb	r2, r3
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	f362 0305 	bfi	r3, r2, #0, #6
 800379a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800379c:	7abb      	ldrb	r3, [r7, #10]
 800379e:	f36f 0301 	bfc	r3, #0, #2
 80037a2:	72bb      	strb	r3, [r7, #10]
            break;
 80037a4:	e044      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037aa:	7bbb      	ldrb	r3, [r7, #14]
 80037ac:	2206      	movs	r2, #6
 80037ae:	f362 0304 	bfi	r3, r2, #0, #5
 80037b2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f362 0303 	bfi	r3, r2, #0, #4
 80037bc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037be:	7b3b      	ldrb	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f362 0303 	bfi	r3, r2, #0, #4
 80037c6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80037c8:	7a7b      	ldrb	r3, [r7, #9]
 80037ca:	2207      	movs	r2, #7
 80037cc:	f362 0306 	bfi	r3, r2, #0, #7
 80037d0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	7a3b      	ldrb	r3, [r7, #8]
 80037dc:	f362 0305 	bfi	r3, r2, #0, #6
 80037e0:	723b      	strb	r3, [r7, #8]
            break;
 80037e2:	e025      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e042      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80037ee:	7bbb      	ldrb	r3, [r7, #14]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f362 0304 	bfi	r3, r2, #0, #5
 80037f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
 80037fa:	f36f 0303 	bfc	r3, #0, #4
 80037fe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	f36f 0303 	bfc	r3, #0, #4
 8003806:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003808:	7a7b      	ldrb	r3, [r7, #9]
 800380a:	2203      	movs	r2, #3
 800380c:	f362 0306 	bfi	r3, r2, #0, #7
 8003810:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003818:	b2da      	uxtb	r2, r3
 800381a:	7a3b      	ldrb	r3, [r7, #8]
 800381c:	f362 0305 	bfi	r3, r2, #0, #6
 8003820:	723b      	strb	r3, [r7, #8]
            break;
 8003822:	e005      	b.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	e022      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e01f      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2108      	movs	r1, #8
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fe14 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003848:	f06f 0301 	mvn.w	r3, #1
 800384c:	e010      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	210c      	movs	r1, #12
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fe05 	bl	8001464 <DRV_CANFDSPI_WriteWord>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800385e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8003866:	f06f 0302 	mvn.w	r3, #2
 800386a:	e001      	b.n	8003870 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 800386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	000e0303 	.word	0x000e0303

0800387c <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
 8003886:	460b      	mov	r3, r1
 8003888:	71bb      	strb	r3, [r7, #6]
 800388a:	4613      	mov	r3, r2
 800388c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8003896:	f640 6307 	movw	r3, #3591	@ 0xe07
 800389a:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	1cda      	adds	r2, r3, #3
 80038a6:	89b9      	ldrh	r1, [r7, #12]
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fc18 	bl	80010e0 <DRV_CANFDSPI_ReadByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295
 80038c0:	e020      	b.n	8003904 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038c2:	79bb      	ldrb	r3, [r7, #6]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	f362 0300 	bfi	r3, r2, #0, #1
 80038d0:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 80038d2:	797b      	ldrb	r3, [r7, #5]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f362 0341 	bfi	r3, r2, #1, #1
 80038e0:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 80038e2:	7afa      	ldrb	r2, [r7, #11]
 80038e4:	89b9      	ldrh	r1, [r7, #12]
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fc87 	bl	80011fc <DRV_CANFDSPI_WriteByte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 80038fa:	f06f 0301 	mvn.w	r3, #1
 80038fe:	e001      	b.n	8003904 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d802      	bhi.n	8003926 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e02a      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	3b09      	subs	r3, #9
 800392a:	2b06      	cmp	r3, #6
 800392c:	d825      	bhi.n	800397a <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800392e:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003951 	.word	0x08003951
 8003938:	08003957 	.word	0x08003957
 800393c:	0800395d 	.word	0x0800395d
 8003940:	08003963 	.word	0x08003963
 8003944:	08003969 	.word	0x08003969
 8003948:	0800396f 	.word	0x0800396f
 800394c:	08003975 	.word	0x08003975
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8003950:	230c      	movs	r3, #12
 8003952:	60fb      	str	r3, [r7, #12]
                break;
 8003954:	e012      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003956:	2310      	movs	r3, #16
 8003958:	60fb      	str	r3, [r7, #12]
                break;
 800395a:	e00f      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 800395c:	2314      	movs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
                break;
 8003960:	e00c      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 8003962:	2318      	movs	r3, #24
 8003964:	60fb      	str	r3, [r7, #12]
                break;
 8003966:	e009      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003968:	2320      	movs	r3, #32
 800396a:	60fb      	str	r3, [r7, #12]
                break;
 800396c:	e006      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800396e:	2330      	movs	r3, #48	@ 0x30
 8003970:	60fb      	str	r3, [r7, #12]
                break;
 8003972:	e003      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8003974:	2340      	movs	r3, #64	@ 0x40
 8003976:	60fb      	str	r3, [r7, #12]
                break;
 8003978:	e000      	b.n	800397c <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 800397a:	bf00      	nop
        }
    }

    return dataBytesInObject;
 800397c:	68fb      	ldr	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003998:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800399a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 0218 	bic.w	r2, r3, #24
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	615a      	str	r2, [r3, #20]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	801a      	strh	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	@ 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003a82:	2305      	movs	r3, #5
 8003a84:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003a86:	2300      	movs	r3, #0
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003a92:	2300      	movs	r3, #0
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003abe:	f001 fd67 	bl	8005590 <FI_CheckBankConfig>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003ac8:	230e      	movs	r3, #14
 8003aca:	f000 bcb4 	b.w	8004436 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003ace:	f001 fcbd 	bl	800544c <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003ad2:	4b93      	ldr	r3, [pc, #588]	@ (8003d20 <EE_Init+0x2a8>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <EE_Init+0x2ac>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	029a      	lsls	r2, r3, #10
 8003ade:	4b92      	ldr	r3, [pc, #584]	@ (8003d28 <EE_Init+0x2b0>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ae6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	0b1b      	lsrs	r3, r3, #12
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af4:	e02e      	b.n	8003b54 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003afc:	031a      	lsls	r2, r3, #12
 8003afe:	4b89      	ldr	r3, [pc, #548]	@ (8003d24 <EE_Init+0x2ac>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	0299      	lsls	r1, r3, #10
 8003b04:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <EE_Init+0x2b0>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003b0c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b10:	4b84      	ldr	r3, [pc, #528]	@ (8003d24 <EE_Init+0x2ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	0298      	lsls	r0, r3, #10
 8003b16:	4b84      	ldr	r3, [pc, #528]	@ (8003d28 <EE_Init+0x2b0>)
 8003b18:	4003      	ands	r3, r0
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b22:	2300      	movs	r3, #0
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b26:	e00e      	b.n	8003b46 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d2c <EE_Init+0x2b4>)
 8003b30:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	4413      	add	r3, r2
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	3308      	adds	r3, #8
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4c:	d3ec      	bcc.n	8003b28 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	3301      	adds	r3, #1
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	4b73      	ldr	r3, [pc, #460]	@ (8003d24 <EE_Init+0x2ac>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	029a      	lsls	r2, r3, #10
 8003b5a:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <EE_Init+0x2b0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b62:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	0b1b      	lsrs	r3, r3, #12
 8003b6e:	3304      	adds	r3, #4
 8003b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3bf      	bcc.n	8003af6 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003b76:	4b6a      	ldr	r3, [pc, #424]	@ (8003d20 <EE_Init+0x2a8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b7c:	4b69      	ldr	r3, [pc, #420]	@ (8003d24 <EE_Init+0x2ac>)
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	029a      	lsls	r2, r3, #10
 8003b82:	4b69      	ldr	r3, [pc, #420]	@ (8003d28 <EE_Init+0x2b0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	0b1b      	lsrs	r3, r3, #12
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b98:	e034      	b.n	8003c04 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003ba0:	031a      	lsls	r2, r3, #12
 8003ba2:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <EE_Init+0x2ac>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	0299      	lsls	r1, r3, #10
 8003ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8003d28 <EE_Init+0x2b0>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003bb0:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <EE_Init+0x2ac>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	0298      	lsls	r0, r3, #10
 8003bba:	4b5b      	ldr	r3, [pc, #364]	@ (8003d28 <EE_Init+0x2b0>)
 8003bbc:	4003      	ands	r3, r0
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003bc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc8:	f001 fbde 	bl	8005388 <GetPageState>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003bd0:	7ebb      	ldrb	r3, [r7, #26]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d002      	beq.n	8003bdc <EE_Init+0x164>
 8003bd6:	7ebb      	ldrb	r3, [r7, #26]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d103      	bne.n	8003be4 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	3301      	adds	r3, #1
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be2:	e00c      	b.n	8003bfe <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003be4:	7ebb      	ldrb	r3, [r7, #26]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d109      	bne.n	8003bfe <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf2:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c00:	3301      	adds	r3, #1
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c04:	4b47      	ldr	r3, [pc, #284]	@ (8003d24 <EE_Init+0x2ac>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	029a      	lsls	r2, r3, #10
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <EE_Init+0x2b0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c12:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	0b1b      	lsrs	r3, r3, #12
 8003c1e:	3304      	adds	r3, #4
 8003c20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3b9      	bcc.n	8003b9a <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d16a      	bne.n	8003d02 <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d062      	beq.n	8003cf8 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <EE_Init+0x2ac>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	029a      	lsls	r2, r3, #10
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <EE_Init+0x2b0>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	0b1b      	lsrs	r3, r3, #12
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	3303      	adds	r3, #3
 8003c52:	f003 0103 	and.w	r1, r3, #3
 8003c56:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <EE_Init+0x2ac>)
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	029a      	lsls	r2, r3, #10
 8003c5c:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <EE_Init+0x2b0>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c64:	fbb2 f0f3 	udiv	r0, r2, r3
 8003c68:	fb00 f303 	mul.w	r3, r0, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	0b1b      	lsrs	r3, r3, #12
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003c76:	031a      	lsls	r2, r3, #12
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <EE_Init+0x2ac>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	0299      	lsls	r1, r3, #10
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d28 <EE_Init+0x2b0>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003c86:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c8a:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <EE_Init+0x2ac>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	0298      	lsls	r0, r3, #10
 8003c90:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <EE_Init+0x2b0>)
 8003c92:	4003      	ands	r3, r0
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fb74 	bl	8005388 <GetPageState>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d12d      	bne.n	8003d02 <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <EE_Init+0x2ac>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	029a      	lsls	r2, r3, #10
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <EE_Init+0x2b0>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	0b1b      	lsrs	r3, r3, #12
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 0103 	and.w	r1, r3, #3
 8003cca:	4b16      	ldr	r3, [pc, #88]	@ (8003d24 <EE_Init+0x2ac>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	029a      	lsls	r2, r3, #10
 8003cd0:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <EE_Init+0x2b0>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cd8:	fbb2 f0f3 	udiv	r0, r2, r3
 8003cdc:	fb00 f303 	mul.w	r3, r0, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0b1b      	lsrs	r3, r3, #12
 8003ce4:	440b      	add	r3, r1
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fa8b 	bl	8005204 <SetPageState>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e39e      	b.n	8004436 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f000 fba7 	bl	800444c <EE_Format>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	e399      	b.n	8004436 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <EE_Init+0x2ac>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	029a      	lsls	r2, r3, #10
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <EE_Init+0x2b0>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d10:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	0b1b      	lsrs	r3, r3, #12
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d1e:	e0de      	b.n	8003ede <EE_Init+0x466>
 8003d20:	200003ac 	.word	0x200003ac
 8003d24:	1fff75e0 	.word	0x1fff75e0
 8003d28:	001ffc00 	.word	0x001ffc00
 8003d2c:	200003a8 	.word	0x200003a8
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d36:	031a      	lsls	r2, r3, #12
 8003d38:	4bba      	ldr	r3, [pc, #744]	@ (8004024 <EE_Init+0x5ac>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	0299      	lsls	r1, r3, #10
 8003d3e:	4bba      	ldr	r3, [pc, #744]	@ (8004028 <EE_Init+0x5b0>)
 8003d40:	400b      	ands	r3, r1
 8003d42:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003d46:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d4a:	4bb6      	ldr	r3, [pc, #728]	@ (8004024 <EE_Init+0x5ac>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	0298      	lsls	r0, r3, #10
 8003d50:	4bb5      	ldr	r3, [pc, #724]	@ (8004028 <EE_Init+0x5b0>)
 8003d52:	4003      	ands	r3, r0
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003d5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d5e:	f001 fb13 	bl	8005388 <GetPageState>
 8003d62:	4603      	mov	r3, r0
 8003d64:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003d66:	7ebb      	ldrb	r3, [r7, #26]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80b5 	bne.w	8003ed8 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003d6e:	4bad      	ldr	r3, [pc, #692]	@ (8004024 <EE_Init+0x5ac>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	029a      	lsls	r2, r3, #10
 8003d74:	4bac      	ldr	r3, [pc, #688]	@ (8004028 <EE_Init+0x5b0>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	0b1b      	lsrs	r3, r3, #12
 8003d88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d050      	beq.n	8003e30 <EE_Init+0x3b8>
 8003d8e:	4ba5      	ldr	r3, [pc, #660]	@ (8004024 <EE_Init+0x5ac>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	029a      	lsls	r2, r3, #10
 8003d94:	4ba4      	ldr	r3, [pc, #656]	@ (8004028 <EE_Init+0x5b0>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	0b1b      	lsrs	r3, r3, #12
 8003da8:	3302      	adds	r3, #2
 8003daa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d03f      	beq.n	8003e30 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003db0:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <EE_Init+0x5ac>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	029a      	lsls	r2, r3, #10
 8003db6:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <EE_Init+0x5b0>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	0b1b      	lsrs	r3, r3, #12
 8003dca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	3303      	adds	r3, #3
 8003dd0:	f003 0103 	and.w	r1, r3, #3
 8003dd4:	4b93      	ldr	r3, [pc, #588]	@ (8004024 <EE_Init+0x5ac>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	029a      	lsls	r2, r3, #10
 8003dda:	4b93      	ldr	r3, [pc, #588]	@ (8004028 <EE_Init+0x5b0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003de2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003de6:	fb00 f303 	mul.w	r3, r0, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	0b1b      	lsrs	r3, r3, #12
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003df4:	031a      	lsls	r2, r3, #12
 8003df6:	4b8b      	ldr	r3, [pc, #556]	@ (8004024 <EE_Init+0x5ac>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	0299      	lsls	r1, r3, #10
 8003dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8004028 <EE_Init+0x5b0>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e04:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e08:	4b86      	ldr	r3, [pc, #536]	@ (8004024 <EE_Init+0x5ac>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	0298      	lsls	r0, r3, #10
 8003e0e:	4b86      	ldr	r3, [pc, #536]	@ (8004028 <EE_Init+0x5b0>)
 8003e10:	4003      	ands	r3, r0
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fab5 	bl	8005388 <GetPageState>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d102      	bne.n	8003e2a <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e28:	e041      	b.n	8003eae <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e2e:	e03e      	b.n	8003eae <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e30:	4b7c      	ldr	r3, [pc, #496]	@ (8004024 <EE_Init+0x5ac>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	029a      	lsls	r2, r3, #10
 8003e36:	4b7c      	ldr	r3, [pc, #496]	@ (8004028 <EE_Init+0x5b0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	0b1b      	lsrs	r3, r3, #12
 8003e4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 0103 	and.w	r1, r3, #3
 8003e54:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <EE_Init+0x5ac>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	029a      	lsls	r2, r3, #10
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <EE_Init+0x5b0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e62:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e66:	fb00 f303 	mul.w	r3, r0, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	0b1b      	lsrs	r3, r3, #12
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003e74:	031a      	lsls	r2, r3, #12
 8003e76:	4b6b      	ldr	r3, [pc, #428]	@ (8004024 <EE_Init+0x5ac>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	0299      	lsls	r1, r3, #10
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <EE_Init+0x5b0>)
 8003e7e:	400b      	ands	r3, r1
 8003e80:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e84:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e88:	4b66      	ldr	r3, [pc, #408]	@ (8004024 <EE_Init+0x5ac>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	0298      	lsls	r0, r3, #10
 8003e8e:	4b66      	ldr	r3, [pc, #408]	@ (8004028 <EE_Init+0x5b0>)
 8003e90:	4003      	ands	r3, r0
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fa75 	bl	8005388 <GetPageState>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e001      	b.n	8003eae <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eae:	7efb      	ldrb	r3, [r7, #27]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	@ (800402c <EE_Init+0x5b4>)
 8003eba:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f000 fef3 	bl	8004cac <PagesTransfer>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ecc:	d001      	beq.n	8003ed2 <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	e2b1      	b.n	8004436 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003ed6:	e014      	b.n	8003f02 <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	3301      	adds	r3, #1
 8003edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ede:	4b51      	ldr	r3, [pc, #324]	@ (8004024 <EE_Init+0x5ac>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	029a      	lsls	r2, r3, #10
 8003ee4:	4b50      	ldr	r3, [pc, #320]	@ (8004028 <EE_Init+0x5b0>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003eec:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	0b1b      	lsrs	r3, r3, #12
 8003ef8:	3304      	adds	r3, #4
 8003efa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f4ff af17 	bcc.w	8003d30 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f06:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <EE_Init+0x5ac>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	029a      	lsls	r2, r3, #10
 8003f0c:	4b46      	ldr	r3, [pc, #280]	@ (8004028 <EE_Init+0x5b0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	0b1b      	lsrs	r3, r3, #12
 8003f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f22:	e0dc      	b.n	80040de <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f26:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003f2a:	031a      	lsls	r2, r3, #12
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004024 <EE_Init+0x5ac>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	0299      	lsls	r1, r3, #10
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <EE_Init+0x5b0>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f3a:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <EE_Init+0x5ac>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	0298      	lsls	r0, r3, #10
 8003f44:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <EE_Init+0x5b0>)
 8003f46:	4003      	ands	r3, r0
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003f50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f52:	f001 fa19 	bl	8005388 <GetPageState>
 8003f56:	4603      	mov	r3, r0
 8003f58:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f5a:	7ebb      	ldrb	r3, [r7, #26]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f040 80b6 	bne.w	80040ce <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f62:	4b30      	ldr	r3, [pc, #192]	@ (8004024 <EE_Init+0x5ac>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	029a      	lsls	r2, r3, #10
 8003f68:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <EE_Init+0x5b0>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f70:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	0b1b      	lsrs	r3, r3, #12
 8003f7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d056      	beq.n	8004030 <EE_Init+0x5b8>
 8003f82:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <EE_Init+0x5ac>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	029a      	lsls	r2, r3, #10
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <EE_Init+0x5b0>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f90:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	0b1b      	lsrs	r3, r3, #12
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d045      	beq.n	8004030 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <EE_Init+0x5ac>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	029a      	lsls	r2, r3, #10
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <EE_Init+0x5b0>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fb2:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	0b1b      	lsrs	r3, r3, #12
 8003fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	3303      	adds	r3, #3
 8003fc4:	f003 0103 	and.w	r1, r3, #3
 8003fc8:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <EE_Init+0x5ac>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	029a      	lsls	r2, r3, #10
 8003fce:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <EE_Init+0x5b0>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fd6:	fbb2 f0f3 	udiv	r0, r2, r3
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	0b1b      	lsrs	r3, r3, #12
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003fe8:	031a      	lsls	r2, r3, #12
 8003fea:	4b0e      	ldr	r3, [pc, #56]	@ (8004024 <EE_Init+0x5ac>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	0299      	lsls	r1, r3, #10
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <EE_Init+0x5b0>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003ff8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <EE_Init+0x5ac>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	0298      	lsls	r0, r3, #10
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <EE_Init+0x5b0>)
 8004004:	4003      	ands	r3, r0
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f001 f9bb 	bl	8005388 <GetPageState>
 8004012:	4603      	mov	r3, r0
 8004014:	2b03      	cmp	r3, #3
 8004016:	d102      	bne.n	800401e <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800401c:	e047      	b.n	80040ae <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800401e:	2301      	movs	r3, #1
 8004020:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004022:	e044      	b.n	80040ae <EE_Init+0x636>
 8004024:	1fff75e0 	.word	0x1fff75e0
 8004028:	001ffc00 	.word	0x001ffc00
 800402c:	200003a6 	.word	0x200003a6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8004030:	4b98      	ldr	r3, [pc, #608]	@ (8004294 <EE_Init+0x81c>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	029a      	lsls	r2, r3, #10
 8004036:	4b98      	ldr	r3, [pc, #608]	@ (8004298 <EE_Init+0x820>)
 8004038:	4013      	ands	r3, r2
 800403a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800403e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	0b1b      	lsrs	r3, r3, #12
 800404a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f003 0103 	and.w	r1, r3, #3
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <EE_Init+0x81c>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	029a      	lsls	r2, r3, #10
 800405a:	4b8f      	ldr	r3, [pc, #572]	@ (8004298 <EE_Init+0x820>)
 800405c:	4013      	ands	r3, r2
 800405e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004062:	fbb2 f0f3 	udiv	r0, r2, r3
 8004066:	fb00 f303 	mul.w	r3, r0, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	0b1b      	lsrs	r3, r3, #12
 800406e:	440b      	add	r3, r1
 8004070:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004074:	031a      	lsls	r2, r3, #12
 8004076:	4b87      	ldr	r3, [pc, #540]	@ (8004294 <EE_Init+0x81c>)
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	0299      	lsls	r1, r3, #10
 800407c:	4b86      	ldr	r3, [pc, #536]	@ (8004298 <EE_Init+0x820>)
 800407e:	400b      	ands	r3, r1
 8004080:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004084:	fbb1 f1f3 	udiv	r1, r1, r3
 8004088:	4b82      	ldr	r3, [pc, #520]	@ (8004294 <EE_Init+0x81c>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	0298      	lsls	r0, r3, #10
 800408e:	4b82      	ldr	r3, [pc, #520]	@ (8004298 <EE_Init+0x820>)
 8004090:	4003      	ands	r3, r0
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f975 	bl	8005388 <GetPageState>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e001      	b.n	80040ae <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040aa:	2301      	movs	r3, #1
 80040ac:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040ae:	7efb      	ldrb	r3, [r7, #27]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b77      	ldr	r3, [pc, #476]	@ (800429c <EE_Init+0x824>)
 80040c0:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	3301      	adds	r3, #1
 80040c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c8:	e006      	b.n	80040d8 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 80040ca:	230a      	movs	r3, #10
 80040cc:	e1b3      	b.n	8004436 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 80040ce:	7ebb      	ldrb	r3, [r7, #26]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d101      	bne.n	80040d8 <EE_Init+0x660>
    {
      lastvalidpage = page;
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80040d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040da:	3301      	adds	r3, #1
 80040dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040de:	4b6d      	ldr	r3, [pc, #436]	@ (8004294 <EE_Init+0x81c>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	029a      	lsls	r2, r3, #10
 80040e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004298 <EE_Init+0x820>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80040ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	0b1b      	lsrs	r3, r3, #12
 80040f8:	3304      	adds	r3, #4
 80040fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f4ff af11 	bcc.w	8003f24 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d133      	bne.n	8004170 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	b2d9      	uxtb	r1, r3
 800410c:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <EE_Init+0x81c>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	029a      	lsls	r2, r3, #10
 8004112:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <EE_Init+0x820>)
 8004114:	4013      	ands	r3, r2
 8004116:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800411a:	fbb2 f0f3 	udiv	r0, r2, r3
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	0b1b      	lsrs	r3, r3, #12
 8004126:	b2db      	uxtb	r3, r3
 8004128:	1acb      	subs	r3, r1, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	4b57      	ldr	r3, [pc, #348]	@ (8004294 <EE_Init+0x81c>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	029a      	lsls	r2, r3, #10
 800413c:	4b56      	ldr	r3, [pc, #344]	@ (8004298 <EE_Init+0x820>)
 800413e:	4013      	ands	r3, r2
 8004140:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004144:	fbb2 f0f3 	udiv	r0, r2, r3
 8004148:	fb00 f303 	mul.w	r3, r0, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	0b1b      	lsrs	r3, r3, #12
 8004150:	b2db      	uxtb	r3, r3
 8004152:	440b      	add	r3, r1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b51      	ldr	r3, [pc, #324]	@ (800429c <EE_Init+0x824>)
 8004158:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800415a:	4b50      	ldr	r3, [pc, #320]	@ (800429c <EE_Init+0x824>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f84f 	bl	8005204 <SetPageState>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 800416c:	2302      	movs	r3, #2
 800416e:	e162      	b.n	8004436 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8004170:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <EE_Init+0x828>)
 8004172:	2200      	movs	r2, #0
 8004174:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004176:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <EE_Init+0x82c>)
 8004178:	2220      	movs	r2, #32
 800417a:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800417c:	2320      	movs	r3, #32
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004180:	e031      	b.n	80041e6 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004182:	4b46      	ldr	r3, [pc, #280]	@ (800429c <EE_Init+0x824>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800418a:	031a      	lsls	r2, r3, #12
 800418c:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <EE_Init+0x81c>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	0299      	lsls	r1, r3, #10
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <EE_Init+0x820>)
 8004194:	400b      	ands	r3, r1
 8004196:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800419a:	fbb1 f1f3 	udiv	r1, r1, r3
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <EE_Init+0x81c>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	0298      	lsls	r0, r3, #10
 80041a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <EE_Init+0x820>)
 80041a6:	4003      	ands	r3, r0
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	441a      	add	r2, r3
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	4413      	add	r3, r2
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	bf08      	it	eq
 80041c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80041c8:	d012      	beq.n	80041f0 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 80041ca:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <EE_Init+0x828>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <EE_Init+0x828>)
 80041d4:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <EE_Init+0x82c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <EE_Init+0x82c>)
 80041de:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	3308      	adds	r3, #8
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ec:	d3c9      	bcc.n	8004182 <EE_Init+0x70a>
 80041ee:	e000      	b.n	80041f2 <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 80041f0:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 80041f2:	4b2a      	ldr	r3, [pc, #168]	@ (800429c <EE_Init+0x824>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 80041f8:	4b28      	ldr	r3, [pc, #160]	@ (800429c <EE_Init+0x824>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80041fe:	e053      	b.n	80042a8 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8004200:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <EE_Init+0x81c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	029a      	lsls	r2, r3, #10
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <EE_Init+0x820>)
 8004208:	4013      	ands	r3, r2
 800420a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800420e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	0b1b      	lsrs	r3, r3, #12
 800421a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	3303      	adds	r3, #3
 8004220:	f003 0103 	and.w	r1, r3, #3
 8004224:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <EE_Init+0x81c>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	029a      	lsls	r2, r3, #10
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <EE_Init+0x820>)
 800422c:	4013      	ands	r3, r2
 800422e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004232:	fbb2 f0f3 	udiv	r0, r2, r3
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	0b1b      	lsrs	r3, r3, #12
 800423e:	440b      	add	r3, r1
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004248:	031a      	lsls	r2, r3, #12
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <EE_Init+0x81c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	0299      	lsls	r1, r3, #10
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <EE_Init+0x820>)
 8004252:	400b      	ands	r3, r1
 8004254:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004258:	fbb1 f1f3 	udiv	r1, r1, r3
 800425c:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <EE_Init+0x81c>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	0298      	lsls	r0, r3, #10
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <EE_Init+0x820>)
 8004264:	4003      	ands	r3, r0
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f88b 	bl	8005388 <GetPageState>
 8004272:	4603      	mov	r3, r0
 8004274:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8004276:	7ebb      	ldrb	r3, [r7, #26]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d109      	bne.n	8004290 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <EE_Init+0x828>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004284:	b29a      	uxth	r2, r3
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <EE_Init+0x828>)
 8004288:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	e00b      	b.n	80042a8 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8004290:	230a      	movs	r3, #10
 8004292:	e0d0      	b.n	8004436 <EE_Init+0x9be>
 8004294:	1fff75e0 	.word	0x1fff75e0
 8004298:	001ffc00 	.word	0x001ffc00
 800429c:	200003a6 	.word	0x200003a6
 80042a0:	200003a4 	.word	0x200003a4
 80042a4:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042a8:	4b65      	ldr	r3, [pc, #404]	@ (8004440 <EE_Init+0x9c8>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	029a      	lsls	r2, r3, #10
 80042ae:	4b65      	ldr	r3, [pc, #404]	@ (8004444 <EE_Init+0x9cc>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	0b1b      	lsrs	r3, r3, #12
 80042c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d010      	beq.n	80042ea <EE_Init+0x872>
 80042c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004440 <EE_Init+0x9c8>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	029a      	lsls	r2, r3, #10
 80042ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004444 <EE_Init+0x9cc>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	0b1b      	lsrs	r3, r3, #12
 80042e2:	3302      	adds	r3, #2
 80042e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d18a      	bne.n	8004200 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 80042ea:	4b57      	ldr	r3, [pc, #348]	@ (8004448 <EE_Init+0x9d0>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <EE_Init+0x9c8>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	029a      	lsls	r2, r3, #10
 80042f6:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <EE_Init+0x9cc>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	0b1b      	lsrs	r3, r3, #12
 800430a:	1ac3      	subs	r3, r0, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f003 0103 	and.w	r1, r3, #3
 8004312:	4b4b      	ldr	r3, [pc, #300]	@ (8004440 <EE_Init+0x9c8>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	029a      	lsls	r2, r3, #10
 8004318:	4b4a      	ldr	r3, [pc, #296]	@ (8004444 <EE_Init+0x9cc>)
 800431a:	4013      	ands	r3, r2
 800431c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004320:	fbb2 f0f3 	udiv	r0, r2, r3
 8004324:	fb00 f303 	mul.w	r3, r0, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	0b1b      	lsrs	r3, r3, #12
 800432c:	440b      	add	r3, r1
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004332:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004336:	031a      	lsls	r2, r3, #12
 8004338:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <EE_Init+0x9c8>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	0299      	lsls	r1, r3, #10
 800433e:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <EE_Init+0x9cc>)
 8004340:	400b      	ands	r3, r1
 8004342:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004346:	fbb1 f1f3 	udiv	r1, r1, r3
 800434a:	4b3d      	ldr	r3, [pc, #244]	@ (8004440 <EE_Init+0x9c8>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	0298      	lsls	r0, r3, #10
 8004350:	4b3c      	ldr	r3, [pc, #240]	@ (8004444 <EE_Init+0x9cc>)
 8004352:	4003      	ands	r3, r0
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 800435c:	e053      	b.n	8004406 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8004364:	2101      	movs	r1, #1
 8004366:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004368:	f001 f8b1 	bl	80054ce <FI_PageErase>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e05f      	b.n	8004436 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 8004376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800437a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800437c:	f000 fb5d 	bl	8004a3a <VerifyPageFullyErased>
 8004380:	4603      	mov	r3, r0
 8004382:	2b10      	cmp	r3, #16
 8004384:	d108      	bne.n	8004398 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004386:	2101      	movs	r1, #1
 8004388:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800438a:	f001 f8a0 	bl	80054ce <FI_PageErase>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e04e      	b.n	8004436 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 8004398:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <EE_Init+0x9c8>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	029a      	lsls	r2, r3, #10
 800439e:	4b29      	ldr	r3, [pc, #164]	@ (8004444 <EE_Init+0x9cc>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	0b1b      	lsrs	r3, r3, #12
 80043b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f003 0103 	and.w	r1, r3, #3
 80043bc:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <EE_Init+0x9c8>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	029a      	lsls	r2, r3, #10
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <EE_Init+0x9cc>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043ca:	fbb2 f0f3 	udiv	r0, r2, r3
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	0b1b      	lsrs	r3, r3, #12
 80043d6:	440b      	add	r3, r1
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80043e0:	031a      	lsls	r2, r3, #12
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <EE_Init+0x9c8>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	0299      	lsls	r1, r3, #10
 80043e8:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <EE_Init+0x9cc>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80043f0:	fbb1 f1f3 	udiv	r1, r1, r3
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <EE_Init+0x9c8>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0298      	lsls	r0, r3, #10
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <EE_Init+0x9cc>)
 80043fc:	4003      	ands	r3, r0
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8004406:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	429a      	cmp	r2, r3
 800440c:	d1a7      	bne.n	800435e <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800440e:	f001 f89d 	bl	800554c <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004418:	2100      	movs	r1, #0
 800441a:	2000      	movs	r0, #0
 800441c:	f000 fe6c 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8004420:	4603      	mov	r3, r0
 8004422:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <EE_Init+0x9bc>
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	2b12      	cmp	r3, #18
 800442e:	d001      	beq.n	8004434 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004430:	2302      	movs	r3, #2
 8004432:	e000      	b.n	8004436 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3740      	adds	r7, #64	@ 0x40
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	1fff75e0 	.word	0x1fff75e0
 8004444:	001ffc00 	.word	0x001ffc00
 8004448:	200003a6 	.word	0x200003a6

0800444c <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800445a:	f001 f899 	bl	8005590 <FI_CheckBankConfig>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 8004464:	230e      	movs	r3, #14
 8004466:	e083      	b.n	8004570 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004468:	4b43      	ldr	r3, [pc, #268]	@ (8004578 <EE_Format+0x12c>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	029a      	lsls	r2, r3, #10
 800446e:	4b43      	ldr	r3, [pc, #268]	@ (800457c <EE_Format+0x130>)
 8004470:	4013      	ands	r3, r2
 8004472:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004476:	fbb2 f1f3 	udiv	r1, r2, r3
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	0b1b      	lsrs	r3, r3, #12
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e034      	b.n	80044f0 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800448c:	2101      	movs	r1, #1
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 f81d 	bl	80054ce <FI_PageErase>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d027      	beq.n	80044ea <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e068      	b.n	8004570 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80044a4:	031a      	lsls	r2, r3, #12
 80044a6:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <EE_Format+0x12c>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	0299      	lsls	r1, r3, #10
 80044ac:	4b33      	ldr	r3, [pc, #204]	@ (800457c <EE_Format+0x130>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80044b4:	fbb1 f1f3 	udiv	r1, r1, r3
 80044b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004578 <EE_Format+0x12c>)
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	0298      	lsls	r0, r3, #10
 80044be:	4b2f      	ldr	r3, [pc, #188]	@ (800457c <EE_Format+0x130>)
 80044c0:	4003      	ands	r3, r0
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fab4 	bl	8004a3a <VerifyPageFullyErased>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d108      	bne.n	80044ea <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 80044d8:	2101      	movs	r1, #1
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fff7 	bl	80054ce <FI_PageErase>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e042      	b.n	8004570 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <EE_Format+0x12c>)
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	029a      	lsls	r2, r3, #10
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <EE_Format+0x130>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	0b1b      	lsrs	r3, r3, #12
 800450a:	3304      	adds	r3, #4
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3b9      	bcc.n	8004486 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004512:	f001 f81b 	bl	800554c <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <EE_Format+0x12c>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	029a      	lsls	r2, r3, #10
 800451c:	4b17      	ldr	r3, [pc, #92]	@ (800457c <EE_Format+0x130>)
 800451e:	4013      	ands	r3, r2
 8004520:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004524:	fbb2 f1f3 	udiv	r1, r2, r3
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	0b1b      	lsrs	r3, r3, #12
 8004530:	2102      	movs	r1, #2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fe66 	bl	8005204 <SetPageState>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800453e:	2302      	movs	r3, #2
 8004540:	e016      	b.n	8004570 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 8004542:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <EE_Format+0x134>)
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <EE_Format+0x12c>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	029a      	lsls	r2, r3, #10
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <EE_Format+0x130>)
 8004550:	4013      	ands	r3, r2
 8004552:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004556:	fbb2 f1f3 	udiv	r1, r2, r3
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	0b1b      	lsrs	r3, r3, #12
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <EE_Format+0x138>)
 8004566:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <EE_Format+0x13c>)
 800456a:	2220      	movs	r2, #32
 800456c:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	1fff75e0 	.word	0x1fff75e0
 800457c:	001ffc00 	.word	0x001ffc00
 8004580:	200003a4 	.word	0x200003a4
 8004584:	200003a6 	.word	0x200003a6
 8004588:	20000008 	.word	0x20000008

0800458c <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <EE_ReadVariable32bits+0x40>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d011      	beq.n	80045cc <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f94b 	bl	8004854 <ReadVariable>
 80045be:	4603      	mov	r3, r0
 80045c0:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]

    return status;
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	e000      	b.n	80045ce <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80045cc:	2308      	movs	r3, #8
  } 
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	6039      	str	r1, [r7, #0]
 80045e0:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <EE_WriteVariable32bits+0x2a>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d006      	beq.n	8004600 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa00 	bl	80049fc <WriteVariable>
 80045fc:	4603      	mov	r3, r0
 80045fe:	e000      	b.n	8004602 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004600:	2308      	movs	r3, #8
  } 
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004622:	2305      	movs	r3, #5
 8004624:	71fb      	strb	r3, [r7, #7]
 8004626:	2305      	movs	r3, #5
 8004628:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800462a:	4b3f      	ldr	r3, [pc, #252]	@ (8004728 <EE_CleanUp+0x11c>)
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	029a      	lsls	r2, r3, #10
 8004630:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <EE_CleanUp+0x120>)
 8004632:	4013      	ands	r3, r2
 8004634:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004638:	fbb2 f1f3 	udiv	r1, r2, r3
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	0b1b      	lsrs	r3, r3, #12
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e059      	b.n	80046fc <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800464e:	031a      	lsls	r2, r3, #12
 8004650:	4b35      	ldr	r3, [pc, #212]	@ (8004728 <EE_CleanUp+0x11c>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	0299      	lsls	r1, r3, #10
 8004656:	4b35      	ldr	r3, [pc, #212]	@ (800472c <EE_CleanUp+0x120>)
 8004658:	400b      	ands	r3, r1
 800465a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800465e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004662:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <EE_CleanUp+0x11c>)
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	0298      	lsls	r0, r3, #10
 8004668:	4b30      	ldr	r3, [pc, #192]	@ (800472c <EE_CleanUp+0x120>)
 800466a:	4003      	ands	r3, r0
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fe87 	bl	8005388 <GetPageState>
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d138      	bne.n	80046f6 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e022      	b.n	80046d2 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004692:	031a      	lsls	r2, r3, #12
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <EE_CleanUp+0x11c>)
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	0299      	lsls	r1, r3, #10
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <EE_CleanUp+0x120>)
 800469c:	400b      	ands	r3, r1
 800469e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80046a2:	fbb1 f1f3 	udiv	r1, r1, r3
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <EE_CleanUp+0x11c>)
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	0298      	lsls	r0, r3, #10
 80046ac:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <EE_CleanUp+0x120>)
 80046ae:	4003      	ands	r3, r0
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f000 fe65 	bl	8005388 <GetPageState>
 80046be:	4603      	mov	r3, r0
 80046c0:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d001      	beq.n	80046cc <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80046c8:	2305      	movs	r3, #5
 80046ca:	e029      	b.n	8004720 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3301      	adds	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3302      	adds	r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3d7      	bcc.n	800468c <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 80046dc:	2102      	movs	r1, #2
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f000 fef5 	bl	80054ce <FI_PageErase>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e018      	b.n	8004720 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 80046ee:	f000 ff2d 	bl	800554c <FI_CacheFlush>
        
        return EE_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e014      	b.n	8004720 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3302      	adds	r3, #2
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <EE_CleanUp+0x11c>)
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	029a      	lsls	r2, r3, #10
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <EE_CleanUp+0x120>)
 8004704:	4013      	ands	r3, r2
 8004706:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800470a:	fbb2 f1f3 	udiv	r1, r2, r3
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	0b1b      	lsrs	r3, r3, #12
 8004716:	3304      	adds	r3, #4
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	429a      	cmp	r2, r3
 800471c:	d394      	bcc.n	8004648 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800471e:	2305      	movs	r3, #5
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	1fff75e0 	.word	0x1fff75e0
 800472c:	001ffc00 	.word	0x001ffc00

08004730 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004746:	2305      	movs	r3, #5
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	2305      	movs	r3, #5
 800474c:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800474e:	4b3f      	ldr	r3, [pc, #252]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	029a      	lsls	r2, r3, #10
 8004754:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <EE_CleanUp_IT+0x120>)
 8004756:	4013      	ands	r3, r2
 8004758:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800475c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	0b1b      	lsrs	r3, r3, #12
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e059      	b.n	8004820 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004772:	031a      	lsls	r2, r3, #12
 8004774:	4b35      	ldr	r3, [pc, #212]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	0299      	lsls	r1, r3, #10
 800477a:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <EE_CleanUp_IT+0x120>)
 800477c:	400b      	ands	r3, r1
 800477e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004782:	fbb1 f1f3 	udiv	r1, r1, r3
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	0298      	lsls	r0, r3, #10
 800478c:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <EE_CleanUp_IT+0x120>)
 800478e:	4003      	ands	r3, r0
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fdf5 	bl	8005388 <GetPageState>
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d138      	bne.n	800481a <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3301      	adds	r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e022      	b.n	80047f6 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047b6:	031a      	lsls	r2, r3, #12
 80047b8:	4b24      	ldr	r3, [pc, #144]	@ (800484c <EE_CleanUp_IT+0x11c>)
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	0299      	lsls	r1, r3, #10
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <EE_CleanUp_IT+0x120>)
 80047c0:	400b      	ands	r3, r1
 80047c2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80047c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80047ca:	4b20      	ldr	r3, [pc, #128]	@ (800484c <EE_CleanUp_IT+0x11c>)
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	0298      	lsls	r0, r3, #10
 80047d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004850 <EE_CleanUp_IT+0x120>)
 80047d2:	4003      	ands	r3, r0
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80047dc:	68b8      	ldr	r0, [r7, #8]
 80047de:	f000 fdd3 	bl	8005388 <GetPageState>
 80047e2:	4603      	mov	r3, r0
 80047e4:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d001      	beq.n	80047f0 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80047ec:	2305      	movs	r3, #5
 80047ee:	e029      	b.n	8004844 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3301      	adds	r3, #1
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3302      	adds	r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3d7      	bcc.n	80047b0 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004800:	2102      	movs	r1, #2
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f000 fe85 	bl	8005512 <FI_PageErase_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e018      	b.n	8004844 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8004812:	f000 fe9b 	bl	800554c <FI_CacheFlush>
        return EE_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e014      	b.n	8004844 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3302      	adds	r3, #2
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <EE_CleanUp_IT+0x11c>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	029a      	lsls	r2, r3, #10
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <EE_CleanUp_IT+0x120>)
 8004828:	4013      	ands	r3, r2
 800482a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800482e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	0b1b      	lsrs	r3, r3, #12
 800483a:	3304      	adds	r3, #4
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	429a      	cmp	r2, r3
 8004840:	d394      	bcc.n	800476c <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 8004842:	2305      	movs	r3, #5
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	1fff75e0 	.word	0x1fff75e0
 8004850:	001ffc00 	.word	0x001ffc00

08004854 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	@ 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800487c:	2305      	movs	r3, #5
 800487e:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8004880:	2000      	movs	r0, #0
 8004882:	f000 f8ff 	bl	8004a84 <FindPage>
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d101      	bne.n	8004894 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004890:	2303      	movs	r3, #3
 8004892:	e0ab      	b.n	80049ec <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800489a:	031a      	lsls	r2, r3, #12
 800489c:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <ReadVariable+0x1a0>)
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	0299      	lsls	r1, r3, #10
 80048a2:	4b55      	ldr	r3, [pc, #340]	@ (80049f8 <ReadVariable+0x1a4>)
 80048a4:	400b      	ands	r3, r1
 80048a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80048aa:	fbb1 f1f3 	udiv	r1, r1, r3
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <ReadVariable+0x1a0>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	0298      	lsls	r0, r3, #10
 80048b4:	4b50      	ldr	r3, [pc, #320]	@ (80049f8 <ReadVariable+0x1a4>)
 80048b6:	4003      	ands	r3, r0
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048c0:	6a38      	ldr	r0, [r7, #32]
 80048c2:	f000 fd61 	bl	8005388 <GetPageState>
 80048c6:	4603      	mov	r3, r0
 80048c8:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80048ca:	e082      	b.n	80049d2 <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 80048cc:	f640 73f8 	movw	r3, #4088	@ 0xff8
 80048d0:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 80048d2:	e03f      	b.n	8004954 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 80048e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	bf08      	it	eq
 80048ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80048f0:	d02d      	beq.n	800494e <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 80048f2:	8a3b      	ldrh	r3, [r7, #16]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d129      	bne.n	800494e <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 80048fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	000a      	movs	r2, r1
 8004908:	2300      	movs	r3, #0
 800490a:	8a3b      	ldrh	r3, [r7, #16]
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fdb0 	bl	8005474 <CalculateCrc>
 8004914:	4603      	mov	r3, r0
 8004916:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	0c02      	lsrs	r2, r0, #16
 8004926:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800492a:	0c0b      	lsrs	r3, r1, #16
 800492c:	b293      	uxth	r3, r2
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4293      	cmp	r3, r2
 8004934:	d10b      	bne.n	800494e <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	000a      	movs	r2, r1
 8004944:	2300      	movs	r3, #0
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e04e      	b.n	80049ec <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b08      	subs	r3, #8
 8004952:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b1f      	cmp	r3, #31
 8004958:	d8bc      	bhi.n	80048d4 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800495a:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <ReadVariable+0x1a0>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	029a      	lsls	r2, r3, #10
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <ReadVariable+0x1a4>)
 8004962:	4013      	ands	r3, r2
 8004964:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004968:	fbb2 f1f3 	udiv	r1, r2, r3
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	0b1b      	lsrs	r3, r3, #12
 8004974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	3303      	adds	r3, #3
 800497a:	f003 0103 	and.w	r1, r3, #3
 800497e:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <ReadVariable+0x1a0>)
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	029a      	lsls	r2, r3, #10
 8004984:	4b1c      	ldr	r3, [pc, #112]	@ (80049f8 <ReadVariable+0x1a4>)
 8004986:	4013      	ands	r3, r2
 8004988:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800498c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004990:	fb00 f303 	mul.w	r3, r0, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	0b1b      	lsrs	r3, r3, #12
 8004998:	440b      	add	r3, r1
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049a2:	031a      	lsls	r2, r3, #12
 80049a4:	4b13      	ldr	r3, [pc, #76]	@ (80049f4 <ReadVariable+0x1a0>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	0299      	lsls	r1, r3, #10
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <ReadVariable+0x1a4>)
 80049ac:	400b      	ands	r3, r1
 80049ae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049b2:	fbb1 f1f3 	udiv	r1, r1, r3
 80049b6:	4b0f      	ldr	r3, [pc, #60]	@ (80049f4 <ReadVariable+0x1a0>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	0298      	lsls	r0, r3, #10
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <ReadVariable+0x1a4>)
 80049be:	4003      	ands	r3, r0
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 80049c8:	6a38      	ldr	r0, [r7, #32]
 80049ca:	f000 fcdd 	bl	8005388 <GetPageState>
 80049ce:	4603      	mov	r3, r0
 80049d0:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f43f af79 	beq.w	80048cc <ReadVariable+0x78>
 80049da:	7efb      	ldrb	r3, [r7, #27]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	f43f af75 	beq.w	80048cc <ReadVariable+0x78>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	f43f af71 	beq.w	80048cc <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 80049ea:	2307      	movs	r3, #7
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3728      	adds	r7, #40	@ 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	1fff75e0 	.word	0x1fff75e0
 80049f8:	001ffc00 	.word	0x001ffc00

080049fc <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fb71 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	2b12      	cmp	r3, #18
 8004a1e:	d107      	bne.n	8004a30 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2200      	movs	r2, #0
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f940 	bl	8004cac <PagesTransfer>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e000      	b.n	8004a32 <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a30:	89fb      	ldrh	r3, [r7, #14]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a44:	2311      	movs	r3, #17
 8004a46:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a4c:	e00f      	b.n	8004a6e <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4413      	add	r3, r2
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	bf08      	it	eq
 8004a5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a62:	d001      	beq.n	8004a68 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004a64:	2310      	movs	r3, #16
 8004a66:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d3eb      	bcc.n	8004a4e <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004a76:	89fb      	ldrh	r3, [r7, #14]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004a8e:	2305      	movs	r3, #5
 8004a90:	75fb      	strb	r3, [r7, #23]
 8004a92:	2305      	movs	r3, #5
 8004a94:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8004c9c <FindPage+0x218>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004aae:	031a      	lsls	r2, r3, #12
 8004ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca0 <FindPage+0x21c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	0299      	lsls	r1, r3, #10
 8004ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca4 <FindPage+0x220>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004abe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ac2:	4b77      	ldr	r3, [pc, #476]	@ (8004ca0 <FindPage+0x21c>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	0298      	lsls	r0, r3, #10
 8004ac8:	4b76      	ldr	r3, [pc, #472]	@ (8004ca4 <FindPage+0x220>)
 8004aca:	4003      	ands	r3, r0
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fc58 	bl	8005388 <GetPageState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004adc:	4b70      	ldr	r3, [pc, #448]	@ (8004ca0 <FindPage+0x21c>)
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	029a      	lsls	r2, r3, #10
 8004ae2:	4b70      	ldr	r3, [pc, #448]	@ (8004ca4 <FindPage+0x220>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004aea:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	0b1b      	lsrs	r3, r3, #12
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	3301      	adds	r3, #1
 8004afc:	f003 0103 	and.w	r1, r3, #3
 8004b00:	4b67      	ldr	r3, [pc, #412]	@ (8004ca0 <FindPage+0x21c>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	029a      	lsls	r2, r3, #10
 8004b06:	4b67      	ldr	r3, [pc, #412]	@ (8004ca4 <FindPage+0x220>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b0e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	0b1b      	lsrs	r3, r3, #12
 8004b1a:	440b      	add	r3, r1
 8004b1c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004b24:	031a      	lsls	r2, r3, #12
 8004b26:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <FindPage+0x21c>)
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	0299      	lsls	r1, r3, #10
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <FindPage+0x220>)
 8004b2e:	400b      	ands	r3, r1
 8004b30:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004b34:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b38:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <FindPage+0x21c>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	0298      	lsls	r0, r3, #10
 8004b3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ca4 <FindPage+0x220>)
 8004b40:	4003      	ands	r3, r0
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fc1d 	bl	8005388 <GetPageState>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b52:	4b53      	ldr	r3, [pc, #332]	@ (8004ca0 <FindPage+0x21c>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	029a      	lsls	r2, r3, #10
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <FindPage+0x220>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	0b1b      	lsrs	r3, r3, #12
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	3303      	adds	r3, #3
 8004b72:	f003 0103 	and.w	r1, r3, #3
 8004b76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca0 <FindPage+0x21c>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	029a      	lsls	r2, r3, #10
 8004b7c:	4b49      	ldr	r3, [pc, #292]	@ (8004ca4 <FindPage+0x220>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b84:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	0b1b      	lsrs	r3, r3, #12
 8004b90:	440b      	add	r3, r1
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d071      	beq.n	8004c7e <FindPage+0x1fa>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	dc77      	bgt.n	8004c8e <FindPage+0x20a>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d060      	beq.n	8004c64 <FindPage+0x1e0>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d173      	bne.n	8004c8e <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d12a      	bne.n	8004c02 <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004bac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <FindPage+0x224>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb4:	d201      	bcs.n	8004bba <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	e06b      	b.n	8004c92 <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bba:	7dbb      	ldrb	r3, [r7, #22]
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d107      	bne.n	8004bd0 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bc0:	f7ff fd24 	bl	800460c <EE_CleanUp>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e060      	b.n	8004c92 <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004bd0:	2103      	movs	r1, #3
 8004bd2:	6938      	ldr	r0, [r7, #16]
 8004bd4:	f000 fb16 	bl	8005204 <SetPageState>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	e056      	b.n	8004c92 <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004be4:	2102      	movs	r1, #2
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb0c 	bl	8005204 <SetPageState>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	e04c      	b.n	8004c92 <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <FindPage+0x224>)
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	e047      	b.n	8004c92 <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d12a      	bne.n	8004c5e <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <FindPage+0x224>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c10:	d201      	bcs.n	8004c16 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	e03d      	b.n	8004c92 <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c16:	7dbb      	ldrb	r3, [r7, #22]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c1c:	f7ff fcf6 	bl	800460c <EE_CleanUp>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e032      	b.n	8004c92 <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c2c:	2103      	movs	r1, #3
 8004c2e:	6938      	ldr	r0, [r7, #16]
 8004c30:	f000 fae8 	bl	8005204 <SetPageState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e028      	b.n	8004c92 <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c40:	2101      	movs	r1, #1
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fade 	bl	8005204 <SetPageState>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e01e      	b.n	8004c92 <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <FindPage+0x224>)
 8004c56:	2220      	movs	r2, #32
 8004c58:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	e019      	b.n	8004c92 <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	e016      	b.n	8004c92 <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <FindPage+0x1ea>
      {
        return currentpage;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	e011      	b.n	8004c92 <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <FindPage+0x1f4>
        {
          return previouspage;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	e00c      	b.n	8004c92 <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	e009      	b.n	8004c92 <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004c7e:	7dbb      	ldrb	r3, [r7, #22]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <FindPage+0x204>
      {
        return followingpage;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e004      	b.n	8004c92 <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e001      	b.n	8004c92 <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200003a6 	.word	0x200003a6
 8004ca0:	1fff75e0 	.word	0x1fff75e0
 8004ca4:	001ffc00 	.word	0x001ffc00
 8004ca8:	20000008 	.word	0x20000008

08004cac <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cbc:	2305      	movs	r3, #5
 8004cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004ce2:	797b      	ldrb	r3, [r7, #5]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <PagesTransfer+0x40>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e000      	b.n	8004cee <PagesTransfer+0x42>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fec8 	bl	8004a84 <FindPage>
 8004cf4:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d101      	bne.n	8004d02 <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004cfe:	2304      	movs	r3, #4
 8004d00:	e1ed      	b.n	80050de <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d02:	4ba4      	ldr	r3, [pc, #656]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004d0e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d10:	4ba2      	ldr	r3, [pc, #648]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004d12:	2220      	movs	r2, #32
 8004d14:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d16:	797b      	ldrb	r3, [r7, #5]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	6a38      	ldr	r0, [r7, #32]
 8004d20:	f000 fa70 	bl	8005204 <SetPageState>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e1d7      	b.n	80050de <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	029a      	lsls	r2, r3, #10
 8004d34:	4b9b      	ldr	r3, [pc, #620]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	0b1b      	lsrs	r3, r3, #12
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	3303      	adds	r3, #3
 8004d4e:	f003 0103 	and.w	r1, r3, #3
 8004d52:	4b93      	ldr	r3, [pc, #588]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	029a      	lsls	r2, r3, #10
 8004d58:	4b92      	ldr	r3, [pc, #584]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d60:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d64:	fb00 f303 	mul.w	r3, r0, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	0b1b      	lsrs	r3, r3, #12
 8004d6c:	440b      	add	r3, r1
 8004d6e:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004d76:	031a      	lsls	r2, r3, #12
 8004d78:	4b89      	ldr	r3, [pc, #548]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	0299      	lsls	r1, r3, #10
 8004d7e:	4b89      	ldr	r3, [pc, #548]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d80:	400b      	ands	r3, r1
 8004d82:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004d86:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d8a:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	0298      	lsls	r0, r3, #10
 8004d90:	4b84      	ldr	r3, [pc, #528]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004d92:	4003      	ands	r3, r0
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	f000 faf3 	bl	8005388 <GetPageState>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d004      	beq.n	8004dba <PagesTransfer+0x10e>
 8004db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	f040 809e 	bne.w	8004ef6 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d108      	bne.n	8004dd4 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	6a38      	ldr	r0, [r7, #32]
 8004dc6:	f000 fa1d 	bl	8005204 <SetPageState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e184      	b.n	80050de <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004dd4:	4b72      	ldr	r3, [pc, #456]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	029a      	lsls	r2, r3, #10
 8004dda:	4b72      	ldr	r3, [pc, #456]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004de2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	0b1b      	lsrs	r3, r3, #12
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	3303      	adds	r3, #3
 8004df4:	f003 0103 	and.w	r1, r3, #3
 8004df8:	4b69      	ldr	r3, [pc, #420]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	029a      	lsls	r2, r3, #10
 8004dfe:	4b69      	ldr	r3, [pc, #420]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e06:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	0b1b      	lsrs	r3, r3, #12
 8004e12:	440b      	add	r3, r1
 8004e14:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e1c:	031a      	lsls	r2, r3, #12
 8004e1e:	4b60      	ldr	r3, [pc, #384]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	0299      	lsls	r1, r3, #10
 8004e24:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004e2c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e30:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	0298      	lsls	r0, r3, #10
 8004e36:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e38:	4003      	ands	r3, r0
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f000 faa0 	bl	8005388 <GetPageState>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e4e:	e049      	b.n	8004ee4 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d108      	bne.n	8004e6a <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e58:	2104      	movs	r1, #4
 8004e5a:	6a38      	ldr	r0, [r7, #32]
 8004e5c:	f000 f9d2 	bl	8005204 <SetPageState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004e66:	2302      	movs	r3, #2
 8004e68:	e139      	b.n	80050de <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	029a      	lsls	r2, r3, #10
 8004e70:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	0b1b      	lsrs	r3, r3, #12
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	3303      	adds	r3, #3
 8004e8a:	f003 0103 	and.w	r1, r3, #3
 8004e8e:	4b44      	ldr	r3, [pc, #272]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	029a      	lsls	r2, r3, #10
 8004e94:	4b43      	ldr	r3, [pc, #268]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e9c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ea0:	fb00 f303 	mul.w	r3, r0, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	0b1b      	lsrs	r3, r3, #12
 8004ea8:	440b      	add	r3, r1
 8004eaa:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004eb2:	031a      	lsls	r2, r3, #12
 8004eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	0299      	lsls	r1, r3, #10
 8004eba:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ebc:	400b      	ands	r3, r1
 8004ebe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004ec2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ec6:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	0298      	lsls	r0, r3, #10
 8004ecc:	4b35      	ldr	r3, [pc, #212]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004ece:	4003      	ands	r3, r0
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004ed8:	69b8      	ldr	r0, [r7, #24]
 8004eda:	f000 fa55 	bl	8005388 <GetPageState>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d0b1      	beq.n	8004e50 <PagesTransfer+0x1a4>
 8004eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d0ad      	beq.n	8004e50 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004ef4:	e008      	b.n	8004f08 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004ef6:	797b      	ldrb	r3, [r7, #5]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d103      	bne.n	8004f04 <PagesTransfer+0x258>
 8004efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d001      	beq.n	8004f08 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f04:	230a      	movs	r3, #10
 8004f06:	e0ea      	b.n	80050de <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f08:	797b      	ldrb	r3, [r7, #5]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f040 809b 	bne.w	8005046 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f10:	2320      	movs	r3, #32
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e031      	b.n	8004f7a <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f16:	4b20      	ldr	r3, [pc, #128]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004f1e:	031a      	lsls	r2, r3, #12
 8004f20:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	0299      	lsls	r1, r3, #10
 8004f26:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004f28:	400b      	ands	r3, r1
 8004f2a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f2e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <PagesTransfer+0x2f4>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	0298      	lsls	r0, r3, #10
 8004f38:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <PagesTransfer+0x2f8>)
 8004f3a:	4003      	ands	r3, r0
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	441a      	add	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	bf08      	it	eq
 8004f58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f5c:	d012      	beq.n	8004f84 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <PagesTransfer+0x2e8>)
 8004f68:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <PagesTransfer+0x2f0>)
 8004f72:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3308      	adds	r3, #8
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f80:	d3c9      	bcc.n	8004f16 <PagesTransfer+0x26a>
 8004f82:	e000      	b.n	8004f86 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004f84:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004f86:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <PagesTransfer+0x2ec>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e054      	b.n	800503c <PagesTransfer+0x390>
 8004f92:	bf00      	nop
 8004f94:	200003a4 	.word	0x200003a4
 8004f98:	200003a6 	.word	0x200003a6
 8004f9c:	20000008 	.word	0x20000008
 8004fa0:	1fff75e0 	.word	0x1fff75e0
 8004fa4:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <PagesTransfer+0x43c>)
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	029a      	lsls	r2, r3, #10
 8004fae:	4b4f      	ldr	r3, [pc, #316]	@ (80050ec <PagesTransfer+0x440>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004fb6:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	0b1b      	lsrs	r3, r3, #12
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	f003 0103 	and.w	r1, r3, #3
 8004fcc:	4b46      	ldr	r3, [pc, #280]	@ (80050e8 <PagesTransfer+0x43c>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	029a      	lsls	r2, r3, #10
 8004fd2:	4b46      	ldr	r3, [pc, #280]	@ (80050ec <PagesTransfer+0x440>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004fda:	fbb2 f0f3 	udiv	r0, r2, r3
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	0b1b      	lsrs	r3, r3, #12
 8004fe6:	440b      	add	r3, r1
 8004fe8:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004ff0:	031a      	lsls	r2, r3, #12
 8004ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80050e8 <PagesTransfer+0x43c>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	0299      	lsls	r1, r3, #10
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80050ec <PagesTransfer+0x440>)
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005000:	fbb1 f1f3 	udiv	r1, r1, r3
 8005004:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <PagesTransfer+0x43c>)
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	0298      	lsls	r0, r3, #10
 800500a:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <PagesTransfer+0x440>)
 800500c:	4003      	ands	r3, r0
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f9b7 	bl	8005388 <GetPageState>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8005020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005024:	2b03      	cmp	r3, #3
 8005026:	d10d      	bne.n	8005044 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005028:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <PagesTransfer+0x444>)
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8005030:	b29a      	uxth	r2, r3
 8005032:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <PagesTransfer+0x444>)
 8005034:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d9b2      	bls.n	8004fa8 <PagesTransfer+0x2fc>
 8005042:	e000      	b.n	8005046 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8005044:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f854 	bl	80050f8 <VerifyPagesFullWriteVariable>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8005056:	2302      	movs	r3, #2
 8005058:	e041      	b.n	80050de <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <PagesTransfer+0x444>)
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d903      	bls.n	800506a <PagesTransfer+0x3be>
 8005062:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <PagesTransfer+0x444>)
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	3b02      	subs	r3, #2
 8005068:	e000      	b.n	800506c <PagesTransfer+0x3c0>
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e026      	b.n	80050be <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d01f      	beq.n	80050b8 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f107 0208 	add.w	r2, r7, #8
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fbe6 	bl	8004854 <ReadVariable>
 8005088:	4603      	mov	r3, r0
 800508a:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	b29b      	uxth	r3, r3
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f82c 	bl	80050f8 <VerifyPagesFullWriteVariable>
 80050a0:	4603      	mov	r3, r0
 80050a2:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <PagesTransfer+0x40c>
        {
          return status;
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	e017      	b.n	80050de <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	2b07      	cmp	r3, #7
 80050b2:	d001      	beq.n	80050b8 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	e012      	b.n	80050de <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b32      	cmp	r3, #50	@ 0x32
 80050c2:	d9d5      	bls.n	8005070 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <PagesTransfer+0x448>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f89a 	bl	8005204 <SetPageState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 80050d6:	2302      	movs	r3, #2
 80050d8:	e001      	b.n	80050de <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 80050da:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	@ 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	1fff75e0 	.word	0x1fff75e0
 80050ec:	001ffc00 	.word	0x001ffc00
 80050f0:	200003a4 	.word	0x200003a4
 80050f4:	200003a6 	.word	0x200003a6

080050f8 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	b08b      	sub	sp, #44	@ 0x2c
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	6139      	str	r1, [r7, #16]
 8005104:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800510a:	4b3a      	ldr	r3, [pc, #232]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 8005112:	d301      	bcc.n	8005118 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8005114:	2312      	movs	r3, #18
 8005116:	e068      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005118:	2001      	movs	r0, #1
 800511a:	f7ff fcb3 	bl	8004a84 <FindPage>
 800511e:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d101      	bne.n	8005130 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800512c:	2303      	movs	r3, #3
 800512e:	e05c      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005136:	0319      	lsls	r1, r3, #12
 8005138:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <VerifyPagesFullWriteVariable+0x100>)
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	029a      	lsls	r2, r3, #10
 800513e:	4b2f      	ldr	r3, [pc, #188]	@ (80051fc <VerifyPagesFullWriteVariable+0x104>)
 8005140:	4013      	ands	r3, r2
 8005142:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005146:	fbb2 f2f3 	udiv	r2, r2, r3
 800514a:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <VerifyPagesFullWriteVariable+0x100>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	0298      	lsls	r0, r3, #10
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <VerifyPagesFullWriteVariable+0x104>)
 8005152:	4003      	ands	r3, r0
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	440b      	add	r3, r1
 800515a:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <VerifyPagesFullWriteVariable+0x76>
 8005162:	8afb      	ldrh	r3, [r7, #22]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
 800516c:	e006      	b.n	800517c <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800516e:	8afb      	ldrh	r3, [r7, #22]
 8005170:	4619      	mov	r1, r3
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f000 f97e 	bl	8005474 <CalculateCrc>
 8005178:	4603      	mov	r3, r0
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800517c:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	18d0      	adds	r0, r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2200      	movs	r2, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	000b      	movs	r3, r1
 8005198:	2200      	movs	r2, #0
 800519a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800519c:	0409      	lsls	r1, r1, #16
 800519e:	2600      	movs	r6, #0
 80051a0:	468a      	mov	sl, r1
 80051a2:	46b3      	mov	fp, r6
 80051a4:	ea42 040a 	orr.w	r4, r2, sl
 80051a8:	ea43 050b 	orr.w	r5, r3, fp
 80051ac:	8afb      	ldrh	r3, [r7, #22]
 80051ae:	2200      	movs	r2, #0
 80051b0:	4698      	mov	r8, r3
 80051b2:	4691      	mov	r9, r2
 80051b4:	ea44 0308 	orr.w	r3, r4, r8
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	ea45 0309 	orr.w	r3, r5, r9
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c4:	f000 f972 	bl	80054ac <FI_WriteDoubleWord>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 80051ce:	2302      	movs	r3, #2
 80051d0:	e00b      	b.n	80051ea <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 80051d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <VerifyPagesFullWriteVariable+0x108>)
 80051da:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 80051dc:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <VerifyPagesFullWriteVariable+0xfc>)
 80051e6:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	372c      	adds	r7, #44	@ 0x2c
 80051ee:	46bd      	mov	sp, r7
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	200003a4 	.word	0x200003a4
 80051f8:	1fff75e0 	.word	0x1fff75e0
 80051fc:	001ffc00 	.word	0x001ffc00
 8005200:	20000008 	.word	0x20000008

08005204 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005226:	031a      	lsls	r2, r3, #12
 8005228:	4b54      	ldr	r3, [pc, #336]	@ (800537c <SetPageState+0x178>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	0299      	lsls	r1, r3, #10
 800522e:	4b54      	ldr	r3, [pc, #336]	@ (8005380 <SetPageState+0x17c>)
 8005230:	400b      	ands	r3, r1
 8005232:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005236:	fbb1 f1f3 	udiv	r1, r1, r3
 800523a:	4b50      	ldr	r3, [pc, #320]	@ (800537c <SetPageState+0x178>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	0298      	lsls	r0, r3, #10
 8005240:	4b4f      	ldr	r3, [pc, #316]	@ (8005380 <SetPageState+0x17c>)
 8005242:	4003      	ands	r3, r0
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005252:	031a      	lsls	r2, r3, #12
 8005254:	4b49      	ldr	r3, [pc, #292]	@ (800537c <SetPageState+0x178>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	0299      	lsls	r1, r3, #10
 800525a:	4b49      	ldr	r3, [pc, #292]	@ (8005380 <SetPageState+0x17c>)
 800525c:	400b      	ands	r3, r1
 800525e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005262:	fbb1 f1f3 	udiv	r1, r1, r3
 8005266:	4b45      	ldr	r3, [pc, #276]	@ (800537c <SetPageState+0x178>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	0298      	lsls	r0, r3, #10
 800526c:	4b44      	ldr	r3, [pc, #272]	@ (8005380 <SetPageState+0x17c>)
 800526e:	4003      	ands	r3, r0
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	4413      	add	r3, r2
 8005276:	3308      	adds	r3, #8
 8005278:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005280:	031a      	lsls	r2, r3, #12
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <SetPageState+0x178>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	0299      	lsls	r1, r3, #10
 8005288:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <SetPageState+0x17c>)
 800528a:	400b      	ands	r3, r1
 800528c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005290:	fbb1 f1f3 	udiv	r1, r1, r3
 8005294:	4b39      	ldr	r3, [pc, #228]	@ (800537c <SetPageState+0x178>)
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	0298      	lsls	r0, r3, #10
 800529a:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <SetPageState+0x17c>)
 800529c:	4003      	ands	r3, r0
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	3310      	adds	r3, #16
 80052a6:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052ae:	031a      	lsls	r2, r3, #12
 80052b0:	4b32      	ldr	r3, [pc, #200]	@ (800537c <SetPageState+0x178>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	0299      	lsls	r1, r3, #10
 80052b6:	4b32      	ldr	r3, [pc, #200]	@ (8005380 <SetPageState+0x17c>)
 80052b8:	400b      	ands	r3, r1
 80052ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052be:	fbb1 f1f3 	udiv	r1, r1, r3
 80052c2:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <SetPageState+0x178>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	0298      	lsls	r0, r3, #10
 80052c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <SetPageState+0x17c>)
 80052ca:	4003      	ands	r3, r0
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3318      	adds	r3, #24
 80052d4:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	3b01      	subs	r3, #1
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d844      	bhi.n	8005368 <SetPageState+0x164>
 80052de:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <SetPageState+0xe0>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005317 	.word	0x08005317
 80052ec:	08005339 	.word	0x08005339
 80052f0:	08005351 	.word	0x08005351
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 80052f4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80052f8:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80052fc:	6978      	ldr	r0, [r7, #20]
 80052fe:	f000 f8d5 	bl	80054ac <FI_WriteDoubleWord>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005308:	2302      	movs	r3, #2
 800530a:	e033      	b.n	8005374 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <SetPageState+0x180>)
 8005312:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005314:	e02d      	b.n	8005372 <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005316:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800531a:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f000 f8c4 	bl	80054ac <FI_WriteDoubleWord>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 800532a:	2302      	movs	r3, #2
 800532c:	e022      	b.n	8005374 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <SetPageState+0x180>)
 8005334:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005336:	e01c      	b.n	8005372 <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005338:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800533c:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f8b3 	bl	80054ac <FI_WriteDoubleWord>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00f      	beq.n	800536c <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 800534c:	2302      	movs	r3, #2
 800534e:	e011      	b.n	8005374 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 8005350:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005354:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f000 f8a7 	bl	80054ac <FI_WriteDoubleWord>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 8005364:	2302      	movs	r3, #2
 8005366:	e005      	b.n	8005374 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 8005368:	bf00      	nop
 800536a:	e002      	b.n	8005372 <SetPageState+0x16e>
    break;
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <SetPageState+0x16e>
    break;
 8005370:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	1fff75e0 	.word	0x1fff75e0
 8005380:	001ffc00 	.word	0x001ffc00
 8005384:	200003a6 	.word	0x200003a6

08005388 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8005388:	b480      	push	{r7}
 800538a:	b08b      	sub	sp, #44	@ 0x2c
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3308      	adds	r3, #8
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3310      	adds	r3, #16
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3318      	adds	r3, #24
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80053ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	bf08      	it	eq
 80053f8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80053fc:	d001      	beq.n	8005402 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 80053fe:	2304      	movs	r3, #4
 8005400:	e01e      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 8005402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	bf08      	it	eq
 800540c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005410:	d001      	beq.n	8005416 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 8005412:	2303      	movs	r3, #3
 8005414:	e014      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	bf08      	it	eq
 8005420:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005424:	d001      	beq.n	800542a <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005426:	2302      	movs	r3, #2
 8005428:	e00a      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800542a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	bf08      	it	eq
 8005434:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005438:	d001      	beq.n	800543e <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	372c      	adds	r7, #44	@ 0x2c
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8005450:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005454:	f7fe fa9a 	bl	800398c <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005458:	f248 0105 	movw	r1, #32773	@ 0x8005
 800545c:	4804      	ldr	r0, [pc, #16]	@ (8005470 <ConfigureCrc+0x24>)
 800545e:	f7fe fad1 	bl	8003a04 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 8005462:	2108      	movs	r1, #8
 8005464:	4802      	ldr	r0, [pc, #8]	@ (8005470 <ConfigureCrc+0x24>)
 8005466:	f7fe faba 	bl	80039de <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023000 	.word	0x40023000

08005474 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 8005480:	4809      	ldr	r0, [pc, #36]	@ (80054a8 <CalculateCrc+0x34>)
 8005482:	f7fe fa9c 	bl	80039be <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4807      	ldr	r0, [pc, #28]	@ (80054a8 <CalculateCrc+0x34>)
 800548a:	f7fe fac9 	bl	8003a20 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	4619      	mov	r1, r3
 8005492:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <CalculateCrc+0x34>)
 8005494:	f7fe fad2 	bl	8003a3c <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <CalculateCrc+0x34>)
 800549a:	f7fe fae0 	bl	8003a5e <LL_CRC_ReadData16>
 800549e:	4603      	mov	r3, r0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023000 	.word	0x40023000

080054ac <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	2001      	movs	r0, #1
 80054c0:	f008 fe0c 	bl	800e0dc <HAL_FLASH_Program>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80054e2:	2302      	movs	r3, #2
 80054e4:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 80054ee:	f107 020c 	add.w	r2, r7, #12
 80054f2:	f107 0310 	add.w	r3, r7, #16
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f008 ff03 	bl	800e304 <HAL_FLASHEx_Erase>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005508:	8bfb      	ldrh	r3, [r7, #30]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005522:	2302      	movs	r3, #2
 8005524:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f008 ff36 	bl	800e3a4 <HAL_FLASHEx_Erase_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 8005542:	8afb      	ldrh	r3, [r7, #22]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8005550:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <FI_CacheFlush+0x40>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0d      	ldr	r2, [pc, #52]	@ (800558c <FI_CacheFlush+0x40>)
 8005556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800555a:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <FI_CacheFlush+0x40>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <FI_CacheFlush+0x40>)
 8005562:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b08      	ldr	r3, [pc, #32]	@ (800558c <FI_CacheFlush+0x40>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a07      	ldr	r2, [pc, #28]	@ (800558c <FI_CacheFlush+0x40>)
 800556e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005572:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <FI_CacheFlush+0x40>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a04      	ldr	r2, [pc, #16]	@ (800558c <FI_CacheFlush+0x40>)
 800557a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	58004000 	.word	0x58004000

08005590 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 8005594:	2300      	movs	r3, #0
#endif
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f023 0218 	bic.w	r2, r3, #24
 80055b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005608:	f000 f834 	bl	8005674 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <serialOut+0x58>)
 8005610:	4912      	ldr	r1, [pc, #72]	@ (800565c <serialOut+0x5c>)
 8005612:	4813      	ldr	r0, [pc, #76]	@ (8005660 <serialOut+0x60>)
 8005614:	f00f f868 	bl	80146e8 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005618:	4811      	ldr	r0, [pc, #68]	@ (8005660 <serialOut+0x60>)
 800561a:	f7fa fe11 	bl	8000240 <strlen>
 800561e:	4603      	mov	r3, r0
 8005620:	b29a      	uxth	r2, r3
 8005622:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005626:	490e      	ldr	r1, [pc, #56]	@ (8005660 <serialOut+0x60>)
 8005628:	480e      	ldr	r0, [pc, #56]	@ (8005664 <serialOut+0x64>)
 800562a:	f00d f953 	bl	80128d4 <HAL_UART_Transmit>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005634:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <serialOut+0x68>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <serialOut+0x4e>
 8005640:	490a      	ldr	r1, [pc, #40]	@ (800566c <serialOut+0x6c>)
 8005642:	480b      	ldr	r0, [pc, #44]	@ (8005670 <serialOut+0x70>)
 8005644:	f00f f850 	bl	80146e8 <siprintf>
 8005648:	4809      	ldr	r0, [pc, #36]	@ (8005670 <serialOut+0x70>)
 800564a:	f7ff ffd9 	bl	8005600 <serialOut>
  }
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000a54 	.word	0x20000a54
 800565c:	080181f0 	.word	0x080181f0
 8005660:	20000a60 	.word	0x20000a60
 8005664:	20000444 	.word	0x20000444
 8005668:	2000000c 	.word	0x2000000c
 800566c:	080181f8 	.word	0x080181f8
 8005670:	20000b5c 	.word	0x20000b5c

08005674 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	2201      	movs	r2, #1
 8005694:	4619      	mov	r1, r3
 8005696:	480e      	ldr	r0, [pc, #56]	@ (80056d0 <getTimeBCD+0x5c>)
 8005698:	f00b f9a2 	bl	80109e0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	2201      	movs	r2, #1
 80056a0:	4619      	mov	r1, r3
 80056a2:	480b      	ldr	r0, [pc, #44]	@ (80056d0 <getTimeBCD+0x5c>)
 80056a4:	f00b faa6 	bl	8010bf4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056a8:	7abb      	ldrb	r3, [r7, #10]
 80056aa:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056ac:	7a7b      	ldrb	r3, [r7, #9]
 80056ae:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056b0:	7a3b      	ldrb	r3, [r7, #8]
 80056b2:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056b4:	7f7a      	ldrb	r2, [r7, #29]
 80056b6:	7fb9      	ldrb	r1, [r7, #30]
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	460b      	mov	r3, r1
 80056be:	4905      	ldr	r1, [pc, #20]	@ (80056d4 <getTimeBCD+0x60>)
 80056c0:	4805      	ldr	r0, [pc, #20]	@ (80056d8 <getTimeBCD+0x64>)
 80056c2:	f00f f811 	bl	80146e8 <siprintf>
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200004e4 	.word	0x200004e4
 80056d4:	0801821c 	.word	0x0801821c
 80056d8:	20000a54 	.word	0x20000a54

080056dc <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b092      	sub	sp, #72	@ 0x48
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 80056e6:	463b      	mov	r3, r7
 80056e8:	4618      	mov	r0, r3
 80056ea:	f00f f86b 	bl	80147c4 <localtime>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f107 040c 	add.w	r4, r7, #12
 80056f4:	461d      	mov	r5, r3
 80056f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800571a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800571e:	2200      	movs	r2, #0
 8005720:	4619      	mov	r1, r3
 8005722:	4826      	ldr	r0, [pc, #152]	@ (80057bc <writeRTC+0xe0>)
 8005724:	f00b f898 	bl	8010858 <HAL_RTC_SetTime>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <writeRTC+0xe4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <writeRTC+0x6c>
 800573a:	4922      	ldr	r1, [pc, #136]	@ (80057c4 <writeRTC+0xe8>)
 800573c:	4822      	ldr	r0, [pc, #136]	@ (80057c8 <writeRTC+0xec>)
 800573e:	f00e ffd3 	bl	80146e8 <siprintf>
 8005742:	4821      	ldr	r0, [pc, #132]	@ (80057c8 <writeRTC+0xec>)
 8005744:	f7ff ff5c 	bl	8005600 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <writeRTC+0x76>
 800574e:	2307      	movs	r3, #7
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3301      	adds	r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	3b64      	subs	r3, #100	@ 0x64
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800577a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	480e      	ldr	r0, [pc, #56]	@ (80057bc <writeRTC+0xe0>)
 8005784:	f00b f988 	bl	8010a98 <HAL_RTC_SetDate>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 800578e:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <writeRTC+0xe4>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <writeRTC+0xcc>
 800579a:	490c      	ldr	r1, [pc, #48]	@ (80057cc <writeRTC+0xf0>)
 800579c:	480a      	ldr	r0, [pc, #40]	@ (80057c8 <writeRTC+0xec>)
 800579e:	f00e ffa3 	bl	80146e8 <siprintf>
 80057a2:	4809      	ldr	r0, [pc, #36]	@ (80057c8 <writeRTC+0xec>)
 80057a4:	f7ff ff2c 	bl	8005600 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057a8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80057ac:	2100      	movs	r1, #0
 80057ae:	4803      	ldr	r0, [pc, #12]	@ (80057bc <writeRTC+0xe0>)
 80057b0:	f00b faf9 	bl	8010da6 <HAL_RTCEx_BKUPWrite>

}
 80057b4:	bf00      	nop
 80057b6:	3748      	adds	r7, #72	@ 0x48
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdb0      	pop	{r4, r5, r7, pc}
 80057bc:	200004e4 	.word	0x200004e4
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	0801822c 	.word	0x0801822c
 80057c8:	20000b5c 	.word	0x20000b5c
 80057cc:	08018254 	.word	0x08018254

080057d0 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b094      	sub	sp, #80	@ 0x50
 80057d4:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 80057e2:	463b      	mov	r3, r7
 80057e4:	2224      	movs	r2, #36	@ 0x24
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f00e ffe2 	bl	80147b2 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80057ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	4619      	mov	r1, r3
 80057f6:	4822      	ldr	r0, [pc, #136]	@ (8005880 <readRTC+0xb0>)
 80057f8:	f00b f8f2 	bl	80109e0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80057fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005800:	2200      	movs	r2, #0
 8005802:	4619      	mov	r1, r3
 8005804:	481e      	ldr	r0, [pc, #120]	@ (8005880 <readRTC+0xb0>)
 8005806:	f00b f9f5 	bl	8010bf4 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800580a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800580e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 8005812:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005816:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 800581a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800581e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 8005822:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005826:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 800582a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 8005832:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005836:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800583a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800583e:	3364      	adds	r3, #100	@ 0x64
 8005840:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 8005842:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005844:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 8005846:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800584a:	3b01      	subs	r3, #1
 800584c:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 800584e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8005852:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8005854:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005858:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 800585a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800585e:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 8005860:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005864:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 8005866:	463b      	mov	r3, r7
 8005868:	4618      	mov	r0, r3
 800586a:	f00f f98b 	bl	8014b84 <mktime>
 800586e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 8005872:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	3750      	adds	r7, #80	@ 0x50
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200004e4 	.word	0x200004e4

08005884 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 800588e:	2301      	movs	r3, #1
 8005890:	80fb      	strh	r3, [r7, #6]
 8005892:	e010      	b.n	80058b6 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4a0b      	ldr	r2, [pc, #44]	@ (80058c8 <LoadAllEEPROM+0x44>)
 800589a:	441a      	add	r2, r3
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe73 	bl	800458c <EE_ReadVariable32bits>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	3301      	adds	r3, #1
 80058b4:	80fb      	strh	r3, [r7, #6]
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	2b32      	cmp	r3, #50	@ 0x32
 80058ba:	d9eb      	bls.n	8005894 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058bc:	88bb      	ldrh	r3, [r7, #4]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000984 	.word	0x20000984

080058cc <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 80058dc:	f008 fc42 	bl	800e164 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <StoreEEPROM+0x88>)
 80058e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80058e6:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 80058e8:	bf00      	nop
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <StoreEEPROM+0x88>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f6:	d0f8      	beq.n	80058ea <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 80058f8:	bf00      	nop
 80058fa:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <StoreEEPROM+0x8c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d0fb      	beq.n	80058fa <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fe64 	bl	80045d6 <EE_WriteVariable32bits>
 800590e:	4603      	mov	r3, r0
 8005910:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 8005912:	463a      	mov	r2, r7
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fe37 	bl	800458c <EE_ReadVariable32bits>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	89fb      	ldrh	r3, [r7, #14]
 8005924:	4313      	orrs	r3, r2
 8005926:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <StoreEEPROM+0x7a>
 8005932:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <StoreEEPROM+0x8c>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f7fe fefa 	bl	8004730 <EE_CleanUp_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	4313      	orrs	r3, r2
 8005944:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005946:	f008 fc2f 	bl	800e1a8 <HAL_FLASH_Lock>

  return eeStatus;
 800594a:	89fb      	ldrh	r3, [r7, #14]

    */



}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	58004000 	.word	0x58004000
 8005958:	20000980 	.word	0x20000980

0800595c <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d82f      	bhi.n	80059cc <switchLedOn+0x70>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <switchLedOn+0x18>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005997 	.word	0x08005997
 800597c:	080059a9 	.word	0x080059a9
 8005980:	080059bb 	.word	0x080059bb
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 8005984:	4b14      	ldr	r3, [pc, #80]	@ (80059d8 <switchLedOn+0x7c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a14      	ldr	r2, [pc, #80]	@ (80059dc <switchLedOn+0x80>)
 800598a:	8811      	ldrh	r1, [r2, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	4618      	mov	r0, r3
 8005990:	f008 ff46 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 8005994:	e01b      	b.n	80059ce <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 8005996:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <switchLedOn+0x84>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	@ (80059e4 <switchLedOn+0x88>)
 800599c:	8811      	ldrh	r1, [r2, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	4618      	mov	r0, r3
 80059a2:	f008 ff3d 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 80059a6:	e012      	b.n	80059ce <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <switchLedOn+0x8c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	@ (80059ec <switchLedOn+0x90>)
 80059ae:	8811      	ldrh	r1, [r2, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 ff34 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 80059b8:	e009      	b.n	80059ce <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <switchLedOn+0x94>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0d      	ldr	r2, [pc, #52]	@ (80059f4 <switchLedOn+0x98>)
 80059c0:	8811      	ldrh	r1, [r2, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f008 ff2b 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 80059ca:	e000      	b.n	80059ce <switchLedOn+0x72>
      default: break;
 80059cc:	bf00      	nop
  }
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000ce8 	.word	0x20000ce8
 80059dc:	20000ce6 	.word	0x20000ce6
 80059e0:	20000cf0 	.word	0x20000cf0
 80059e4:	20000cec 	.word	0x20000cec
 80059e8:	20000cf8 	.word	0x20000cf8
 80059ec:	20000cf4 	.word	0x20000cf4
 80059f0:	20000d00 	.word	0x20000d00
 80059f4:	20000cfc 	.word	0x20000cfc

080059f8 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d82f      	bhi.n	8005a68 <switchLedOff+0x70>
 8005a08:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <switchLedOff+0x18>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a33 	.word	0x08005a33
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a57 	.word	0x08005a57
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a20:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <switchLedOff+0x7c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a14      	ldr	r2, [pc, #80]	@ (8005a78 <switchLedOff+0x80>)
 8005a26:	8811      	ldrh	r1, [r2, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f008 fef8 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 8005a30:	e01b      	b.n	8005a6a <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a32:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <switchLedOff+0x84>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <switchLedOff+0x88>)
 8005a38:	8811      	ldrh	r1, [r2, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f008 feef 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 8005a42:	e012      	b.n	8005a6a <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <switchLedOff+0x8c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0f      	ldr	r2, [pc, #60]	@ (8005a88 <switchLedOff+0x90>)
 8005a4a:	8811      	ldrh	r1, [r2, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f008 fee6 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 8005a54:	e009      	b.n	8005a6a <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <switchLedOff+0x94>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <switchLedOff+0x98>)
 8005a5c:	8811      	ldrh	r1, [r2, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f008 fedd 	bl	800e820 <HAL_GPIO_WritePin>
          break;
 8005a66:	e000      	b.n	8005a6a <switchLedOff+0x72>
      default: break;
 8005a68:	bf00      	nop
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000ce8 	.word	0x20000ce8
 8005a78:	20000ce6 	.word	0x20000ce6
 8005a7c:	20000cf0 	.word	0x20000cf0
 8005a80:	20000cec 	.word	0x20000cec
 8005a84:	20000cf8 	.word	0x20000cf8
 8005a88:	20000cf4 	.word	0x20000cf4
 8005a8c:	20000d00 	.word	0x20000d00
 8005a90:	20000cfc 	.word	0x20000cfc

08005a94 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005a9e:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d068      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005aa8:	4b37      	ldr	r3, [pc, #220]	@ (8005b88 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d103      	bne.n	8005aba <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005ab2:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005ab8:	e05f      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005aba:	4b35      	ldr	r3, [pc, #212]	@ (8005b90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d11c      	bne.n	8005afe <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005ac4:	4b33      	ldr	r3, [pc, #204]	@ (8005b94 <HAL_GPIO_EXTI_Callback+0x100>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a31      	ldr	r2, [pc, #196]	@ (8005b90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f008 fe8e 	bl	800e7f0 <HAL_GPIO_ReadPin>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b98 <HAL_GPIO_EXTI_Callback+0x104>)
 8005ae4:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b98 <HAL_GPIO_EXTI_Callback+0x104>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_EXTI_Callback+0x62>
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7ff ff34 	bl	800595c <switchLedOn>
}
 8005af4:	e041      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005af6:	2000      	movs	r0, #0
 8005af8:	f7ff ff7e 	bl	80059f8 <switchLedOff>
}
 8005afc:	e03d      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <HAL_GPIO_EXTI_Callback+0x108>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d038      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b08:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d103      	bne.n	8005b1a <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b12:	4b24      	ldr	r3, [pc, #144]	@ (8005ba4 <HAL_GPIO_EXTI_Callback+0x110>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
}
 8005b18:	e02f      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d11c      	bne.n	8005b5e <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b24:	4b21      	ldr	r3, [pc, #132]	@ (8005bac <HAL_GPIO_EXTI_Callback+0x118>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f008 fe5e 	bl	800e7f0 <HAL_GPIO_ReadPin>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b44:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b46:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_EXTI_Callback+0xc2>
 8005b4e:	2001      	movs	r0, #1
 8005b50:	f7ff ff04 	bl	800595c <switchLedOn>
}
 8005b54:	e011      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f7ff ff4e 	bl	80059f8 <switchLedOff>
}
 8005b5c:	e00d      	b.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b5e:	4b15      	ldr	r3, [pc, #84]	@ (8005bb4 <HAL_GPIO_EXTI_Callback+0x120>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d008      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005b68:	4b13      	ldr	r3, [pc, #76]	@ (8005bb8 <HAL_GPIO_EXTI_Callback+0x124>)
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005b72:	4b12      	ldr	r3, [pc, #72]	@ (8005bbc <HAL_GPIO_EXTI_Callback+0x128>)
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	429a      	cmp	r2, r3
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000c56 	.word	0x20000c56
 8005b88:	20000c5e 	.word	0x20000c5e
 8005b8c:	20000d1f 	.word	0x20000d1f
 8005b90:	20000c66 	.word	0x20000c66
 8005b94:	20000c68 	.word	0x20000c68
 8005b98:	20000d1e 	.word	0x20000d1e
 8005b9c:	20000c74 	.word	0x20000c74
 8005ba0:	20000c7e 	.word	0x20000c7e
 8005ba4:	20000d1d 	.word	0x20000d1d
 8005ba8:	20000c86 	.word	0x20000c86
 8005bac:	20000c88 	.word	0x20000c88
 8005bb0:	20000d1c 	.word	0x20000d1c
 8005bb4:	20000cc4 	.word	0x20000cc4
 8005bb8:	20000cce 	.word	0x20000cce
 8005bbc:	20000cd6 	.word	0x20000cd6

08005bc0 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d140      	bne.n	8005c56 <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005bd4:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005bdc:	6013      	str	r3, [r2, #0]
    decSec++;
 8005bde:	4b22      	ldr	r3, [pc, #136]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b20      	ldr	r3, [pc, #128]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005be8:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005bea:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b0a      	cmp	r3, #10
 8005bf0:	d117      	bne.n	8005c22 <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c6c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c00:	4b1b      	ldr	r3, [pc, #108]	@ (8005c70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	@ (8005c74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c06:	8812      	ldrh	r2, [r2, #0]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f008 fe20 	bl	800e850 <HAL_GPIO_TogglePin>
 8005c10:	e007      	b.n	8005c22 <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f008 fe17 	bl	800e850 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c22:	4b11      	ldr	r3, [pc, #68]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c36:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	0899      	lsrs	r1, r3, #2
 8005c42:	460b      	mov	r3, r1
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c50:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200005d0 	.word	0x200005d0
 8005c64:	20000d20 	.word	0x20000d20
 8005c68:	20000d24 	.word	0x20000d24
 8005c6c:	20000a50 	.word	0x20000a50
 8005c70:	20000cf8 	.word	0x20000cf8
 8005c74:	20000cf4 	.word	0x20000cf4
 8005c78:	20000d00 	.word	0x20000d00
 8005c7c:	20000cfc 	.word	0x20000cfc
 8005c80:	20000d25 	.word	0x20000d25
 8005c84:	cccccccd 	.word	0xcccccccd
 8005c88:	20000d26 	.word	0x20000d26

08005c8c <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005c96:	f008 fa65 	bl	800e164 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005c9a:	492f      	ldr	r1, [pc, #188]	@ (8005d58 <eepromDefaults+0xcc>)
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7fe fc9a 	bl	80045d6 <EE_WriteVariable32bits>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <eepromDefaults+0x3e>
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f7fe fd38 	bl	8004730 <EE_CleanUp_IT>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005cca:	bf00      	nop
 8005ccc:	4b23      	ldr	r3, [pc, #140]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1fb      	bne.n	8005ccc <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005cd4:	4922      	ldr	r1, [pc, #136]	@ (8005d60 <eepromDefaults+0xd4>)
 8005cd6:	2002      	movs	r0, #2
 8005cd8:	f7fe fc7d 	bl	80045d6 <EE_WriteVariable32bits>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <eepromDefaults+0x78>
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <eepromDefaults+0xd0>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f7fe fd1b 	bl	8004730 <EE_CleanUp_IT>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d04:	bf00      	nop
 8005d06:	4b15      	ldr	r3, [pc, #84]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1fb      	bne.n	8005d06 <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2003      	movs	r0, #3
 8005d12:	f7fe fc60 	bl	80045d6 <EE_WriteVariable32bits>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <eepromDefaults+0xb2>
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f7fe fcfe 	bl	8004730 <EE_CleanUp_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d3e:	bf00      	nop
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <eepromDefaults+0xd0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1fb      	bne.n	8005d40 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d48:	f008 fa2e 	bl	800e1a8 <HAL_FLASH_Lock>

  return eeStatus;
 8005d4c:	88fb      	ldrh	r3, [r7, #6]

}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	50616c61 	.word	0x50616c61
 8005d5c:	20000980 	.word	0x20000980
 8005d60:	746f7621 	.word	0x746f7621

08005d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d6e:	f007 ff3d 	bl	800dbec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d72:	f000 f8bb 	bl	8005eec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005d76:	f000 f925 	bl	8005fc4 <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d7a:	f000 fb67 	bl	800644c <MX_GPIO_Init>
  MX_SPI1_Init();
 8005d7e:	f000 fa13 	bl	80061a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d82:	f000 fa4f 	bl	8006224 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005d86:	f000 f987 	bl	8006098 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005d8a:	f000 fb37 	bl	80063fc <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005d8e:	f000 f9cf 	bl	8006130 <MX_PKA_Init>
  MX_RTC_Init();
 8005d92:	f000 f9e1 	bl	8006158 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005d96:	f000 f933 	bl	8006000 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005d9a:	f000 fa81 	bl	80062a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2100      	movs	r1, #0
 8005da2:	2004      	movs	r0, #4
 8005da4:	f008 f8a7 	bl	800def6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005da8:	2004      	movs	r0, #4
 8005daa:	f008 f8be 	bl	800df2a <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005dae:	f008 f9d9 	bl	800e164 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005db2:	4b45      	ldr	r3, [pc, #276]	@ (8005ec8 <main+0x164>)
 8005db4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005db8:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005dba:	bf00      	nop
 8005dbc:	4b42      	ldr	r3, [pc, #264]	@ (8005ec8 <main+0x164>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d0f8      	beq.n	8005dbc <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005dca:	4b40      	ldr	r3, [pc, #256]	@ (8005ecc <main+0x168>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f7fd fe4d 	bl	8003a78 <EE_Init>
 8005dde:	4603      	mov	r3, r0
 8005de0:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <main+0xb8>
 8005de8:	f000 ffbe 	bl	8006d68 <Error_Handler>
 8005dec:	e016      	b.n	8005e1c <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005dee:	4b37      	ldr	r3, [pc, #220]	@ (8005ecc <main+0x168>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005df6:	4b35      	ldr	r3, [pc, #212]	@ (8005ecc <main+0x168>)
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e02:	4b32      	ldr	r3, [pc, #200]	@ (8005ecc <main+0x168>)
 8005e04:	2204      	movs	r2, #4
 8005e06:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f7fd fe35 	bl	8003a78 <EE_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <main+0xb8>
 8005e18:	f000 ffa6 	bl	8006d68 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e1c:	f7ff fd32 	bl	8005884 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e20:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed0 <main+0x16c>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed4 <main+0x170>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d104      	bne.n	8005e34 <main+0xd0>
 8005e2a:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <main+0x16c>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <main+0x174>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d005      	beq.n	8005e40 <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e34:	f7ff ff2a 	bl	8005c8c <eepromDefaults>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e3c:	f7ff fd22 	bl	8005884 <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e40:	f008 f9b2 	bl	800e1a8 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fd89 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e4a:	20fa      	movs	r0, #250	@ 0xfa
 8005e4c:	f007 ff54 	bl	800dcf8 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e50:	2000      	movs	r0, #0
 8005e52:	f7ff fdd1 	bl	80059f8 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e56:	2001      	movs	r0, #1
 8005e58:	f7ff fd80 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e5c:	20fa      	movs	r0, #250	@ 0xfa
 8005e5e:	f007 ff4b 	bl	800dcf8 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7ff fdc8 	bl	80059f8 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005e68:	2002      	movs	r0, #2
 8005e6a:	f7ff fd77 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e6e:	20fa      	movs	r0, #250	@ 0xfa
 8005e70:	f007 ff42 	bl	800dcf8 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005e74:	2002      	movs	r0, #2
 8005e76:	f7ff fdbf 	bl	80059f8 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005e7a:	2003      	movs	r0, #3
 8005e7c:	f7ff fd6e 	bl	800595c <switchLedOn>
  HAL_Delay(250);
 8005e80:	20fa      	movs	r0, #250	@ 0xfa
 8005e82:	f007 ff39 	bl	800dcf8 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005e86:	2003      	movs	r0, #3
 8005e88:	f7ff fdb6 	bl	80059f8 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005e8c:	4813      	ldr	r0, [pc, #76]	@ (8005edc <main+0x178>)
 8005e8e:	f00b fc21 	bl	80116d4 <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005e92:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <main+0x17c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <main+0x180>)
 8005e98:	8811      	ldrh	r1, [r2, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f008 fcbf 	bl	800e820 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fb f8a0 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f7fb f89d 	bl	8000fe8 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <main+0x184>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005eb6:	2002      	movs	r0, #2
 8005eb8:	f7fb f896 	bl	8000fe8 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ebc:	f000 ff64 	bl	8006d88 <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005ec0:	f001 f92e 	bl	8007120 <PCU_Tasks>
 8005ec4:	e7fc      	b.n	8005ec0 <main+0x15c>
 8005ec6:	bf00      	nop
 8005ec8:	58004000 	.word	0x58004000
 8005ecc:	58000400 	.word	0x58000400
 8005ed0:	20000984 	.word	0x20000984
 8005ed4:	50616c61 	.word	0x50616c61
 8005ed8:	746f7621 	.word	0x746f7621
 8005edc:	200005d0 	.word	0x200005d0
 8005ee0:	20000d10 	.word	0x20000d10
 8005ee4:	20000d0c 	.word	0x20000d0c
 8005ee8:	20000a50 	.word	0x20000a50

08005eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b09a      	sub	sp, #104	@ 0x68
 8005ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ef2:	f107 0320 	add.w	r3, r7, #32
 8005ef6:	2248      	movs	r2, #72	@ 0x48
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00e fc59 	bl	80147b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	609a      	str	r2, [r3, #8]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	611a      	str	r2, [r3, #16]
 8005f0e:	615a      	str	r2, [r3, #20]
 8005f10:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f12:	f008 fe25 	bl	800eb60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f16:	2010      	movs	r0, #16
 8005f18:	f7ff fb42 	bl	80055a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f24:	4a26      	ldr	r2, [pc, #152]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <SystemClock_Config+0xd4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f38:	2307      	movs	r3, #7
 8005f3a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f42:	2301      	movs	r3, #1
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f50:	2302      	movs	r3, #2
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f54:	2303      	movs	r3, #3
 8005f56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f58:	2310      	movs	r3, #16
 8005f5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005f6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f72:	f107 0320 	add.w	r3, r7, #32
 8005f76:	4618      	mov	r0, r3
 8005f78:	f009 f986 	bl	800f288 <HAL_RCC_OscConfig>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005f82:	f000 fef1 	bl	8006d68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005f86:	236f      	movs	r3, #111	@ 0x6f
 8005f88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f009 fce2 	bl	800f970 <HAL_RCC_ClockConfig>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fb2:	f000 fed9 	bl	8006d68 <Error_Handler>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3768      	adds	r7, #104	@ 0x68
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	58000400 	.word	0x58000400

08005fc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b094      	sub	sp, #80	@ 0x50
 8005fc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fca:	463b      	mov	r3, r7
 8005fcc:	2250      	movs	r2, #80	@ 0x50
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00e fbee 	bl	80147b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fda:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f00a f8ff 	bl	80101ea <HAL_RCCEx_PeriphCLKConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005ff2:	f000 feb9 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005ff6:	bf00      	nop
 8005ff8:	3750      	adds	r7, #80	@ 0x50
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006004:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006006:	4a23      	ldr	r2, [pc, #140]	@ (8006094 <MX_LPUART1_UART_Init+0x94>)
 8006008:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800600a:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800600c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006010:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006012:	4b1f      	ldr	r3, [pc, #124]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006014:	2200      	movs	r2, #0
 8006016:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800601a:	2200      	movs	r2, #0
 800601c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800601e:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006020:	2200      	movs	r2, #0
 8006022:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006024:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006026:	220c      	movs	r2, #12
 8006028:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800602a:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800602c:	2200      	movs	r2, #0
 800602e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006030:	4b17      	ldr	r3, [pc, #92]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006032:	2200      	movs	r2, #0
 8006034:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006036:	4b16      	ldr	r3, [pc, #88]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006038:	2200      	movs	r2, #0
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800603c:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 8006044:	2200      	movs	r2, #0
 8006046:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006048:	4811      	ldr	r0, [pc, #68]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800604a:	f00c fbf3 	bl	8012834 <HAL_UART_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006054:	f000 fe88 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006058:	2100      	movs	r1, #0
 800605a:	480d      	ldr	r0, [pc, #52]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800605c:	f00d fce5 	bl	8013a2a <HAL_UARTEx_SetTxFifoThreshold>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006066:	f000 fe7f 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800606a:	2100      	movs	r1, #0
 800606c:	4808      	ldr	r0, [pc, #32]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800606e:	f00d fd1a 	bl	8013aa6 <HAL_UARTEx_SetRxFifoThreshold>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006078:	f000 fe76 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800607c:	4804      	ldr	r0, [pc, #16]	@ (8006090 <MX_LPUART1_UART_Init+0x90>)
 800607e:	f00d fc9b 	bl	80139b8 <HAL_UARTEx_DisableFifoMode>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006088:	f000 fe6e 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800608c:	bf00      	nop
 800608e:	bd80      	pop	{r7, pc}
 8006090:	200003b0 	.word	0x200003b0
 8006094:	40008000 	.word	0x40008000

08006098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800609c:	4b22      	ldr	r3, [pc, #136]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 800609e:	4a23      	ldr	r2, [pc, #140]	@ (800612c <MX_USART1_UART_Init+0x94>)
 80060a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060a2:	4b21      	ldr	r3, [pc, #132]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060be:	220c      	movs	r2, #12
 80060c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060c2:	4b19      	ldr	r3, [pc, #100]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060c8:	4b17      	ldr	r3, [pc, #92]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060ce:	4b16      	ldr	r3, [pc, #88]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060d4:	4b14      	ldr	r3, [pc, #80]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060da:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060e0:	4811      	ldr	r0, [pc, #68]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060e2:	f00c fba7 	bl	8012834 <HAL_UART_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80060ec:	f000 fe3c 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f0:	2100      	movs	r1, #0
 80060f2:	480d      	ldr	r0, [pc, #52]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 80060f4:	f00d fc99 	bl	8013a2a <HAL_UARTEx_SetTxFifoThreshold>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060fe:	f000 fe33 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006102:	2100      	movs	r1, #0
 8006104:	4808      	ldr	r0, [pc, #32]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 8006106:	f00d fcce 	bl	8013aa6 <HAL_UARTEx_SetRxFifoThreshold>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006110:	f000 fe2a 	bl	8006d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006114:	4804      	ldr	r0, [pc, #16]	@ (8006128 <MX_USART1_UART_Init+0x90>)
 8006116:	f00d fc4f 	bl	80139b8 <HAL_UARTEx_DisableFifoMode>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006120:	f000 fe22 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000444 	.word	0x20000444
 800612c:	40013800 	.word	0x40013800

08006130 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8006134:	4b06      	ldr	r3, [pc, #24]	@ (8006150 <MX_PKA_Init+0x20>)
 8006136:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <MX_PKA_Init+0x24>)
 8006138:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 800613a:	4805      	ldr	r0, [pc, #20]	@ (8006150 <MX_PKA_Init+0x20>)
 800613c:	f008 fce1 	bl	800eb02 <HAL_PKA_Init>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8006146:	f000 fe0f 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200004d8 	.word	0x200004d8
 8006154:	58002000 	.word	0x58002000

08006158 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800615c:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <MX_RTC_Init+0x48>)
 800615e:	4a11      	ldr	r2, [pc, #68]	@ (80061a4 <MX_RTC_Init+0x4c>)
 8006160:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006162:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006168:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <MX_RTC_Init+0x48>)
 800616a:	227f      	movs	r2, #127	@ 0x7f
 800616c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800616e:	4b0c      	ldr	r3, [pc, #48]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006170:	22ff      	movs	r2, #255	@ 0xff
 8006172:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006174:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <MX_RTC_Init+0x48>)
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006182:	2200      	movs	r2, #0
 8006184:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006186:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <MX_RTC_Init+0x48>)
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800618c:	4804      	ldr	r0, [pc, #16]	@ (80061a0 <MX_RTC_Init+0x48>)
 800618e:	f00a fab3 	bl	80106f8 <HAL_RTC_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006198:	f000 fde6 	bl	8006d68 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200004e4 	.word	0x200004e4
 80061a4:	40002800 	.word	0x40002800

080061a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006220 <MX_SPI1_Init+0x78>)
 80061b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061b2:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <MX_SPI1_Init+0x74>)
 80061b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061ba:	4b18      	ldr	r3, [pc, #96]	@ (800621c <MX_SPI1_Init+0x74>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061c0:	4b16      	ldr	r3, [pc, #88]	@ (800621c <MX_SPI1_Init+0x74>)
 80061c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80061c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061ce:	4b13      	ldr	r3, [pc, #76]	@ (800621c <MX_SPI1_Init+0x74>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061d4:	4b11      	ldr	r3, [pc, #68]	@ (800621c <MX_SPI1_Init+0x74>)
 80061d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80061dc:	4b0f      	ldr	r3, [pc, #60]	@ (800621c <MX_SPI1_Init+0x74>)
 80061de:	2208      	movs	r2, #8
 80061e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061e2:	4b0e      	ldr	r3, [pc, #56]	@ (800621c <MX_SPI1_Init+0x74>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <MX_SPI1_Init+0x74>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <MX_SPI1_Init+0x74>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80061f4:	4b09      	ldr	r3, [pc, #36]	@ (800621c <MX_SPI1_Init+0x74>)
 80061f6:	2207      	movs	r2, #7
 80061f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061fa:	4b08      	ldr	r3, [pc, #32]	@ (800621c <MX_SPI1_Init+0x74>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <MX_SPI1_Init+0x74>)
 8006202:	2200      	movs	r2, #0
 8006204:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006206:	4805      	ldr	r0, [pc, #20]	@ (800621c <MX_SPI1_Init+0x74>)
 8006208:	f00a fde5 	bl	8010dd6 <HAL_SPI_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006212:	f000 fda9 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006216:	bf00      	nop
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000508 	.word	0x20000508
 8006220:	40013000 	.word	0x40013000

08006224 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006228:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <MX_SPI2_Init+0x74>)
 800622a:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <MX_SPI2_Init+0x78>)
 800622c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006234:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006236:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800623c:	4b16      	ldr	r3, [pc, #88]	@ (8006298 <MX_SPI2_Init+0x74>)
 800623e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006242:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006244:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <MX_SPI2_Init+0x74>)
 800624c:	2200      	movs	r2, #0
 800624e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006250:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006256:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006258:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <MX_SPI2_Init+0x74>)
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800625e:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006260:	2200      	movs	r2, #0
 8006262:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006266:	2200      	movs	r2, #0
 8006268:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626a:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <MX_SPI2_Init+0x74>)
 800626c:	2200      	movs	r2, #0
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006270:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006272:	2207      	movs	r2, #7
 8006274:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800627c:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <MX_SPI2_Init+0x74>)
 800627e:	2208      	movs	r2, #8
 8006280:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006282:	4805      	ldr	r0, [pc, #20]	@ (8006298 <MX_SPI2_Init+0x74>)
 8006284:	f00a fda7 	bl	8010dd6 <HAL_SPI_Init>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800628e:	f000 fd6b 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006292:	bf00      	nop
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2000056c 	.word	0x2000056c
 800629c:	40003800 	.word	0x40003800

080062a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b09c      	sub	sp, #112	@ 0x70
 80062a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	609a      	str	r2, [r3, #8]
 80062b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
 80062d0:	615a      	str	r2, [r3, #20]
 80062d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	2234      	movs	r2, #52	@ 0x34
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f00e fa69 	bl	80147b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062e0:	4b44      	ldr	r3, [pc, #272]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062e2:	4a45      	ldr	r2, [pc, #276]	@ (80063f8 <MX_TIM1_Init+0x158>)
 80062e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80062e6:	4b43      	ldr	r3, [pc, #268]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062e8:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80062ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ee:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80062f4:	4b3f      	ldr	r3, [pc, #252]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062f6:	2263      	movs	r2, #99	@ 0x63
 80062f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062fa:	4b3e      	ldr	r3, [pc, #248]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006300:	4b3c      	ldr	r3, [pc, #240]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006302:	2200      	movs	r2, #0
 8006304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006306:	4b3b      	ldr	r3, [pc, #236]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006308:	2200      	movs	r2, #0
 800630a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800630c:	4839      	ldr	r0, [pc, #228]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800630e:	f00b f97d 	bl	801160c <HAL_TIM_Base_Init>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006318:	f000 fd26 	bl	8006d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800631c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006320:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006322:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006326:	4619      	mov	r1, r3
 8006328:	4832      	ldr	r0, [pc, #200]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800632a:	f00b fc4b 	bl	8011bc4 <HAL_TIM_ConfigClockSource>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006334:	f000 fd18 	bl	8006d68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006338:	482e      	ldr	r0, [pc, #184]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800633a:	f00b fa19 	bl	8011770 <HAL_TIM_OC_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006344:	f000 fd10 	bl	8006d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006348:	2300      	movs	r3, #0
 800634a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800634c:	2300      	movs	r3, #0
 800634e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006350:	2300      	movs	r3, #0
 8006352:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006358:	4619      	mov	r1, r3
 800635a:	4826      	ldr	r0, [pc, #152]	@ (80063f4 <MX_TIM1_Init+0x154>)
 800635c:	f00c f932 	bl	80125c4 <HAL_TIMEx_MasterConfigSynchronization>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8006366:	f000 fcff 	bl	8006d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800636a:	2300      	movs	r3, #0
 800636c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006372:	2300      	movs	r3, #0
 8006374:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006376:	2300      	movs	r3, #0
 8006378:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800637a:	2300      	movs	r3, #0
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800637e:	2300      	movs	r3, #0
 8006380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006386:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800638a:	2200      	movs	r2, #0
 800638c:	4619      	mov	r1, r3
 800638e:	4819      	ldr	r0, [pc, #100]	@ (80063f4 <MX_TIM1_Init+0x154>)
 8006390:	f00b fb9e 	bl	8011ad0 <HAL_TIM_OC_ConfigChannel>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800639a:	f000 fce5 	bl	8006d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063bc:	2300      	movs	r3, #0
 80063be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80063c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80063ce:	2300      	movs	r3, #0
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <MX_TIM1_Init+0x154>)
 80063dc:	f00c f952 	bl	8012684 <HAL_TIMEx_ConfigBreakDeadTime>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80063e6:	f000 fcbf 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80063ea:	bf00      	nop
 80063ec:	3770      	adds	r7, #112	@ 0x70
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200005d0 	.word	0x200005d0
 80063f8:	40012c00 	.word	0x40012c00

080063fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006400:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006402:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <MX_USB_PCD_Init+0x4c>)
 8006404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006406:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006408:	2208      	movs	r2, #8
 800640a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800640e:	2202      	movs	r2, #2
 8006410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006412:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006414:	2202      	movs	r2, #2
 8006416:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800641a:	2200      	movs	r2, #0
 800641c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800641e:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006424:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 800642c:	2200      	movs	r2, #0
 800642e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006430:	4804      	ldr	r0, [pc, #16]	@ (8006444 <MX_USB_PCD_Init+0x48>)
 8006432:	f008 fa63 	bl	800e8fc <HAL_PCD_Init>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800643c:	f000 fc94 	bl	8006d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006440:	bf00      	nop
 8006442:	bd80      	pop	{r7, pc}
 8006444:	2000068c 	.word	0x2000068c
 8006448:	40006800 	.word	0x40006800

0800644c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 8006460:	4b9d      	ldr	r3, [pc, #628]	@ (80066d8 <MX_GPIO_Init+0x28c>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 81c5 	bne.w	80067f4 <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 800646a:	4b9c      	ldr	r3, [pc, #624]	@ (80066dc <MX_GPIO_Init+0x290>)
 800646c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006470:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 8006472:	4b9b      	ldr	r3, [pc, #620]	@ (80066e0 <MX_GPIO_Init+0x294>)
 8006474:	4a9b      	ldr	r2, [pc, #620]	@ (80066e4 <MX_GPIO_Init+0x298>)
 8006476:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006478:	4b9b      	ldr	r3, [pc, #620]	@ (80066e8 <MX_GPIO_Init+0x29c>)
 800647a:	2217      	movs	r2, #23
 800647c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 800647e:	4b9b      	ldr	r3, [pc, #620]	@ (80066ec <MX_GPIO_Init+0x2a0>)
 8006480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 8006486:	4b9a      	ldr	r3, [pc, #616]	@ (80066f0 <MX_GPIO_Init+0x2a4>)
 8006488:	4a96      	ldr	r2, [pc, #600]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800648a:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 800648c:	4b99      	ldr	r3, [pc, #612]	@ (80066f4 <MX_GPIO_Init+0x2a8>)
 800648e:	2217      	movs	r2, #23
 8006490:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006492:	4b99      	ldr	r3, [pc, #612]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 8006494:	2201      	movs	r2, #1
 8006496:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 8006498:	4b98      	ldr	r3, [pc, #608]	@ (80066fc <MX_GPIO_Init+0x2b0>)
 800649a:	4a99      	ldr	r2, [pc, #612]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 800649c:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 800649e:	4b99      	ldr	r3, [pc, #612]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 80064a0:	2208      	movs	r2, #8
 80064a2:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064a4:	4b98      	ldr	r3, [pc, #608]	@ (8006708 <MX_GPIO_Init+0x2bc>)
 80064a6:	4a96      	ldr	r2, [pc, #600]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064a8:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064aa:	4b98      	ldr	r3, [pc, #608]	@ (800670c <MX_GPIO_Init+0x2c0>)
 80064ac:	2220      	movs	r2, #32
 80064ae:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064b0:	4b97      	ldr	r3, [pc, #604]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 80064b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80064b6:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064b8:	4b96      	ldr	r3, [pc, #600]	@ (8006714 <MX_GPIO_Init+0x2c8>)
 80064ba:	2210      	movs	r2, #16
 80064bc:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064be:	4b96      	ldr	r3, [pc, #600]	@ (8006718 <MX_GPIO_Init+0x2cc>)
 80064c0:	4a8f      	ldr	r2, [pc, #572]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064c2:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 80064c4:	4b95      	ldr	r3, [pc, #596]	@ (800671c <MX_GPIO_Init+0x2d0>)
 80064c6:	220a      	movs	r2, #10
 80064c8:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 80064ca:	4b95      	ldr	r3, [pc, #596]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 80064cc:	2220      	movs	r2, #32
 80064ce:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064d0:	4b94      	ldr	r3, [pc, #592]	@ (8006724 <MX_GPIO_Init+0x2d8>)
 80064d2:	4a8b      	ldr	r2, [pc, #556]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80064d4:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 80064d6:	4b94      	ldr	r3, [pc, #592]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 80064d8:	2201      	movs	r2, #1
 80064da:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 80064dc:	4b93      	ldr	r3, [pc, #588]	@ (800672c <MX_GPIO_Init+0x2e0>)
 80064de:	4a81      	ldr	r2, [pc, #516]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064e0:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 80064e2:	4b93      	ldr	r3, [pc, #588]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 80064e4:	2202      	movs	r2, #2
 80064e6:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 80064e8:	4b92      	ldr	r3, [pc, #584]	@ (8006734 <MX_GPIO_Init+0x2e8>)
 80064ea:	4a7e      	ldr	r2, [pc, #504]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064ec:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 80064ee:	4b92      	ldr	r3, [pc, #584]	@ (8006738 <MX_GPIO_Init+0x2ec>)
 80064f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064f4:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 80064f6:	4b91      	ldr	r3, [pc, #580]	@ (800673c <MX_GPIO_Init+0x2f0>)
 80064f8:	4a7a      	ldr	r2, [pc, #488]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80064fa:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 80064fc:	4b90      	ldr	r3, [pc, #576]	@ (8006740 <MX_GPIO_Init+0x2f4>)
 80064fe:	2228      	movs	r2, #40	@ 0x28
 8006500:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 8006502:	4b90      	ldr	r3, [pc, #576]	@ (8006744 <MX_GPIO_Init+0x2f8>)
 8006504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006508:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 800650a:	4b8f      	ldr	r3, [pc, #572]	@ (8006748 <MX_GPIO_Init+0x2fc>)
 800650c:	4a75      	ldr	r2, [pc, #468]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800650e:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006510:	4b8e      	ldr	r3, [pc, #568]	@ (800674c <MX_GPIO_Init+0x300>)
 8006512:	2228      	movs	r2, #40	@ 0x28
 8006514:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 8006516:	4b8e      	ldr	r3, [pc, #568]	@ (8006750 <MX_GPIO_Init+0x304>)
 8006518:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800651c:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 800651e:	4b8d      	ldr	r3, [pc, #564]	@ (8006754 <MX_GPIO_Init+0x308>)
 8006520:	4a70      	ldr	r2, [pc, #448]	@ (80066e4 <MX_GPIO_Init+0x298>)
 8006522:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006524:	4b8c      	ldr	r3, [pc, #560]	@ (8006758 <MX_GPIO_Init+0x30c>)
 8006526:	2228      	movs	r2, #40	@ 0x28
 8006528:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 800652a:	4b8c      	ldr	r3, [pc, #560]	@ (800675c <MX_GPIO_Init+0x310>)
 800652c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006530:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 8006532:	4b8b      	ldr	r3, [pc, #556]	@ (8006760 <MX_GPIO_Init+0x314>)
 8006534:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006538:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800653a:	4b8a      	ldr	r3, [pc, #552]	@ (8006764 <MX_GPIO_Init+0x318>)
 800653c:	2228      	movs	r2, #40	@ 0x28
 800653e:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 8006540:	4b89      	ldr	r3, [pc, #548]	@ (8006768 <MX_GPIO_Init+0x31c>)
 8006542:	2201      	movs	r2, #1
 8006544:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 8006546:	4b89      	ldr	r3, [pc, #548]	@ (800676c <MX_GPIO_Init+0x320>)
 8006548:	4a89      	ldr	r2, [pc, #548]	@ (8006770 <MX_GPIO_Init+0x324>)
 800654a:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 800654c:	4b89      	ldr	r3, [pc, #548]	@ (8006774 <MX_GPIO_Init+0x328>)
 800654e:	2206      	movs	r2, #6
 8006550:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 8006552:	4b89      	ldr	r3, [pc, #548]	@ (8006778 <MX_GPIO_Init+0x32c>)
 8006554:	2202      	movs	r2, #2
 8006556:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006558:	4b88      	ldr	r3, [pc, #544]	@ (800677c <MX_GPIO_Init+0x330>)
 800655a:	4a85      	ldr	r2, [pc, #532]	@ (8006770 <MX_GPIO_Init+0x324>)
 800655c:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 800655e:	4b88      	ldr	r3, [pc, #544]	@ (8006780 <MX_GPIO_Init+0x334>)
 8006560:	2207      	movs	r2, #7
 8006562:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 8006564:	4b87      	ldr	r3, [pc, #540]	@ (8006784 <MX_GPIO_Init+0x338>)
 8006566:	2220      	movs	r2, #32
 8006568:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 800656a:	4b87      	ldr	r3, [pc, #540]	@ (8006788 <MX_GPIO_Init+0x33c>)
 800656c:	4a5d      	ldr	r2, [pc, #372]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800656e:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006570:	2004      	movs	r0, #4
 8006572:	f7ff f82b 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006576:	2002      	movs	r0, #2
 8006578:	f7ff f828 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657c:	2001      	movs	r0, #1
 800657e:	f7ff f825 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006582:	2008      	movs	r0, #8
 8006584:	f7ff f822 	bl	80055cc <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8006588:	4b5b      	ldr	r3, [pc, #364]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 800658a:	881a      	ldrh	r2, [r3, #0]
 800658c:	4b5d      	ldr	r3, [pc, #372]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	4313      	orrs	r3, r2
 8006592:	b29a      	uxth	r2, r3
 8006594:	4b62      	ldr	r3, [pc, #392]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	2200      	movs	r2, #0
 800659e:	4619      	mov	r1, r3
 80065a0:	4857      	ldr	r0, [pc, #348]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 80065a2:	f008 f93d 	bl	800e820 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065a6:	4b5a      	ldr	r3, [pc, #360]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a58      	ldr	r2, [pc, #352]	@ (800670c <MX_GPIO_Init+0x2c0>)
 80065ac:	8811      	ldrh	r1, [r2, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f008 f935 	bl	800e820 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 80065b8:	881a      	ldrh	r2, [r3, #0]
 80065ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	4b70      	ldr	r3, [pc, #448]	@ (8006784 <MX_GPIO_Init+0x338>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2200      	movs	r2, #0
 80065cc:	4619      	mov	r1, r3
 80065ce:	4845      	ldr	r0, [pc, #276]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80065d0:	f008 f926 	bl	800e820 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 80065d4:	4b41      	ldr	r3, [pc, #260]	@ (80066dc <MX_GPIO_Init+0x290>)
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <MX_GPIO_Init+0x2a0>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b55      	ldr	r3, [pc, #340]	@ (8006738 <MX_GPIO_Init+0x2ec>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	4b56      	ldr	r3, [pc, #344]	@ (8006744 <MX_GPIO_Init+0x2f8>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	4b57      	ldr	r3, [pc, #348]	@ (8006750 <MX_GPIO_Init+0x304>)
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 80065f8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80065fa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80065fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4836      	ldr	r0, [pc, #216]	@ (80066e4 <MX_GPIO_Init+0x298>)
 800660a:	f007 ff81 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800660e:	4b3a      	ldr	r3, [pc, #232]	@ (80066f8 <MX_GPIO_Init+0x2ac>)
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	4b3c      	ldr	r3, [pc, #240]	@ (8006704 <MX_GPIO_Init+0x2b8>)
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	4b41      	ldr	r3, [pc, #260]	@ (8006720 <MX_GPIO_Init+0x2d4>)
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	b29b      	uxth	r3, r3
 8006622:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006624:	2301      	movs	r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4832      	ldr	r0, [pc, #200]	@ (8006700 <MX_GPIO_Init+0x2b4>)
 8006636:	f007 ff6b 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 800663a:	4b34      	ldr	r3, [pc, #208]	@ (800670c <MX_GPIO_Init+0x2c0>)
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006640:	2301      	movs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <MX_GPIO_Init+0x2c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1d3a      	adds	r2, r7, #4
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f007 ff5b 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 800665a:	4b2e      	ldr	r3, [pc, #184]	@ (8006714 <MX_GPIO_Init+0x2c8>)
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006660:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006664:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006666:	2301      	movs	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800666a:	4b2b      	ldr	r3, [pc, #172]	@ (8006718 <MX_GPIO_Init+0x2cc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1d3a      	adds	r2, r7, #4
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f007 ff4c 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8006678:	4b2b      	ldr	r3, [pc, #172]	@ (8006728 <MX_GPIO_Init+0x2dc>)
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	4b2c      	ldr	r3, [pc, #176]	@ (8006730 <MX_GPIO_Init+0x2e4>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	4b3f      	ldr	r3, [pc, #252]	@ (8006784 <MX_GPIO_Init+0x338>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	4313      	orrs	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800668e:	2301      	movs	r3, #1
 8006690:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4811      	ldr	r0, [pc, #68]	@ (80066e4 <MX_GPIO_Init+0x298>)
 80066a0:	f007 ff36 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066a4:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <MX_GPIO_Init+0x310>)
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066ae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <MX_GPIO_Init+0x314>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1d3a      	adds	r2, r7, #4
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f007 ff27 	bl	800e510 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066c2:	4b29      	ldr	r3, [pc, #164]	@ (8006768 <MX_GPIO_Init+0x31c>)
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006778 <MX_GPIO_Init+0x32c>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80066d4:	e05a      	b.n	800678c <MX_GPIO_Init+0x340>
 80066d6:	bf00      	nop
 80066d8:	20000a50 	.word	0x20000a50
 80066dc:	20000c5e 	.word	0x20000c5e
 80066e0:	20000c60 	.word	0x20000c60
 80066e4:	48000400 	.word	0x48000400
 80066e8:	20000c64 	.word	0x20000c64
 80066ec:	20000c66 	.word	0x20000c66
 80066f0:	20000c68 	.word	0x20000c68
 80066f4:	20000c6c 	.word	0x20000c6c
 80066f8:	20000cb4 	.word	0x20000cb4
 80066fc:	20000cb8 	.word	0x20000cb8
 8006700:	48000800 	.word	0x48000800
 8006704:	20000cbc 	.word	0x20000cbc
 8006708:	20000cc0 	.word	0x20000cc0
 800670c:	20000c6e 	.word	0x20000c6e
 8006710:	20000c70 	.word	0x20000c70
 8006714:	20000cc4 	.word	0x20000cc4
 8006718:	20000cc8 	.word	0x20000cc8
 800671c:	20000ccc 	.word	0x20000ccc
 8006720:	20000c8e 	.word	0x20000c8e
 8006724:	20000c90 	.word	0x20000c90
 8006728:	20000ce6 	.word	0x20000ce6
 800672c:	20000ce8 	.word	0x20000ce8
 8006730:	20000cec 	.word	0x20000cec
 8006734:	20000cf0 	.word	0x20000cf0
 8006738:	20000c74 	.word	0x20000c74
 800673c:	20000c78 	.word	0x20000c78
 8006740:	20000c7c 	.word	0x20000c7c
 8006744:	20000c7e 	.word	0x20000c7e
 8006748:	20000c80 	.word	0x20000c80
 800674c:	20000c84 	.word	0x20000c84
 8006750:	20000c86 	.word	0x20000c86
 8006754:	20000c88 	.word	0x20000c88
 8006758:	20000c8c 	.word	0x20000c8c
 800675c:	20000c56 	.word	0x20000c56
 8006760:	20000c58 	.word	0x20000c58
 8006764:	20000c5c 	.word	0x20000c5c
 8006768:	20000cce 	.word	0x20000cce
 800676c:	20000cd0 	.word	0x20000cd0
 8006770:	48000c00 	.word	0x48000c00
 8006774:	20000cd4 	.word	0x20000cd4
 8006778:	20000cd6 	.word	0x20000cd6
 800677c:	20000cd8 	.word	0x20000cd8
 8006780:	20000cdc 	.word	0x20000cdc
 8006784:	20000cf4 	.word	0x20000cf4
 8006788:	20000cf8 	.word	0x20000cf8
 800678c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800678e:	2301      	movs	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4816      	ldr	r0, [pc, #88]	@ (80067f0 <MX_GPIO_Init+0x3a4>)
 8006798:	f007 feba 	bl	800e510 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	2006      	movs	r0, #6
 80067a2:	f007 fba8 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067a6:	2006      	movs	r0, #6
 80067a8:	f007 fbbf 	bl	800df2a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	2007      	movs	r0, #7
 80067b2:	f007 fba0 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067b6:	2007      	movs	r0, #7
 80067b8:	f007 fbb7 	bl	800df2a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	200a      	movs	r0, #10
 80067c2:	f007 fb98 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067c6:	200a      	movs	r0, #10
 80067c8:	f007 fbaf 	bl	800df2a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	2017      	movs	r0, #23
 80067d2:	f007 fb90 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067d6:	2017      	movs	r0, #23
 80067d8:	f007 fba7 	bl	800df2a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80067dc:	2200      	movs	r2, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	2028      	movs	r0, #40	@ 0x28
 80067e2:	f007 fb88 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80067e6:	2028      	movs	r0, #40	@ 0x28
 80067e8:	f007 fb9f 	bl	800df2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 80067ec:	e290      	b.n	8006d10 <MX_GPIO_Init+0x8c4>
 80067ee:	bf00      	nop
 80067f0:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 80067f4:	4b9d      	ldr	r3, [pc, #628]	@ (8006a6c <MX_GPIO_Init+0x620>)
 80067f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80067fa:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 80067fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a70 <MX_GPIO_Init+0x624>)
 80067fe:	4a9d      	ldr	r2, [pc, #628]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006800:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006802:	4b9d      	ldr	r3, [pc, #628]	@ (8006a78 <MX_GPIO_Init+0x62c>)
 8006804:	2228      	movs	r2, #40	@ 0x28
 8006806:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006808:	4b9c      	ldr	r3, [pc, #624]	@ (8006a7c <MX_GPIO_Init+0x630>)
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800680e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a80 <MX_GPIO_Init+0x634>)
 8006810:	4a9c      	ldr	r2, [pc, #624]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006812:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006814:	4b9c      	ldr	r3, [pc, #624]	@ (8006a88 <MX_GPIO_Init+0x63c>)
 8006816:	2217      	movs	r2, #23
 8006818:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 800681a:	4b9c      	ldr	r3, [pc, #624]	@ (8006a8c <MX_GPIO_Init+0x640>)
 800681c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006820:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 8006822:	4b9b      	ldr	r3, [pc, #620]	@ (8006a90 <MX_GPIO_Init+0x644>)
 8006824:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006828:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 800682a:	4b9a      	ldr	r3, [pc, #616]	@ (8006a94 <MX_GPIO_Init+0x648>)
 800682c:	2228      	movs	r2, #40	@ 0x28
 800682e:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 8006830:	4b99      	ldr	r3, [pc, #612]	@ (8006a98 <MX_GPIO_Init+0x64c>)
 8006832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006838:	4b98      	ldr	r3, [pc, #608]	@ (8006a9c <MX_GPIO_Init+0x650>)
 800683a:	4a8e      	ldr	r2, [pc, #568]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800683c:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800683e:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <MX_GPIO_Init+0x654>)
 8006840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006844:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006846:	4b97      	ldr	r3, [pc, #604]	@ (8006aa4 <MX_GPIO_Init+0x658>)
 8006848:	4a8e      	ldr	r2, [pc, #568]	@ (8006a84 <MX_GPIO_Init+0x638>)
 800684a:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800684c:	4b96      	ldr	r3, [pc, #600]	@ (8006aa8 <MX_GPIO_Init+0x65c>)
 800684e:	2228      	movs	r2, #40	@ 0x28
 8006850:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 8006852:	4b96      	ldr	r3, [pc, #600]	@ (8006aac <MX_GPIO_Init+0x660>)
 8006854:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006858:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 800685a:	4b95      	ldr	r3, [pc, #596]	@ (8006ab0 <MX_GPIO_Init+0x664>)
 800685c:	4a89      	ldr	r2, [pc, #548]	@ (8006a84 <MX_GPIO_Init+0x638>)
 800685e:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006860:	4b94      	ldr	r3, [pc, #592]	@ (8006ab4 <MX_GPIO_Init+0x668>)
 8006862:	2228      	movs	r2, #40	@ 0x28
 8006864:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 8006866:	4b94      	ldr	r3, [pc, #592]	@ (8006ab8 <MX_GPIO_Init+0x66c>)
 8006868:	2201      	movs	r2, #1
 800686a:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 800686c:	4b93      	ldr	r3, [pc, #588]	@ (8006abc <MX_GPIO_Init+0x670>)
 800686e:	4a94      	ldr	r2, [pc, #592]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 8006870:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 8006872:	4b94      	ldr	r3, [pc, #592]	@ (8006ac4 <MX_GPIO_Init+0x678>)
 8006874:	2206      	movs	r2, #6
 8006876:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 8006878:	4b93      	ldr	r3, [pc, #588]	@ (8006ac8 <MX_GPIO_Init+0x67c>)
 800687a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800687e:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 8006880:	4b92      	ldr	r3, [pc, #584]	@ (8006acc <MX_GPIO_Init+0x680>)
 8006882:	4a80      	ldr	r2, [pc, #512]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006884:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 8006886:	4b92      	ldr	r3, [pc, #584]	@ (8006ad0 <MX_GPIO_Init+0x684>)
 8006888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800688c:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 800688e:	4b91      	ldr	r3, [pc, #580]	@ (8006ad4 <MX_GPIO_Init+0x688>)
 8006890:	4a78      	ldr	r2, [pc, #480]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006892:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 8006894:	4b90      	ldr	r3, [pc, #576]	@ (8006ad8 <MX_GPIO_Init+0x68c>)
 8006896:	2217      	movs	r2, #23
 8006898:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 800689a:	4b90      	ldr	r3, [pc, #576]	@ (8006adc <MX_GPIO_Init+0x690>)
 800689c:	2210      	movs	r2, #16
 800689e:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068a0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae0 <MX_GPIO_Init+0x694>)
 80068a2:	4a74      	ldr	r2, [pc, #464]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068a4:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068a6:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae4 <MX_GPIO_Init+0x698>)
 80068a8:	220a      	movs	r2, #10
 80068aa:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068ac:	4b8e      	ldr	r3, [pc, #568]	@ (8006ae8 <MX_GPIO_Init+0x69c>)
 80068ae:	2220      	movs	r2, #32
 80068b0:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068b2:	4b8e      	ldr	r3, [pc, #568]	@ (8006aec <MX_GPIO_Init+0x6a0>)
 80068b4:	4a6f      	ldr	r2, [pc, #444]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068b6:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068b8:	4b8d      	ldr	r3, [pc, #564]	@ (8006af0 <MX_GPIO_Init+0x6a4>)
 80068ba:	2217      	movs	r2, #23
 80068bc:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068be:	4b8d      	ldr	r3, [pc, #564]	@ (8006af4 <MX_GPIO_Init+0x6a8>)
 80068c0:	2202      	movs	r2, #2
 80068c2:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 80068c4:	4b8c      	ldr	r3, [pc, #560]	@ (8006af8 <MX_GPIO_Init+0x6ac>)
 80068c6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 80068c8:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80068ca:	4b8c      	ldr	r3, [pc, #560]	@ (8006afc <MX_GPIO_Init+0x6b0>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80068d0:	4b8b      	ldr	r3, [pc, #556]	@ (8006b00 <MX_GPIO_Init+0x6b4>)
 80068d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80068d4:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80068d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006b04 <MX_GPIO_Init+0x6b8>)
 80068d8:	2208      	movs	r2, #8
 80068da:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80068dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006b08 <MX_GPIO_Init+0x6bc>)
 80068de:	4a69      	ldr	r2, [pc, #420]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80068e0:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 80068e2:	4b8a      	ldr	r3, [pc, #552]	@ (8006b0c <MX_GPIO_Init+0x6c0>)
 80068e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068e8:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 80068ea:	4b89      	ldr	r3, [pc, #548]	@ (8006b10 <MX_GPIO_Init+0x6c4>)
 80068ec:	4a61      	ldr	r2, [pc, #388]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80068ee:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 80068f0:	4b88      	ldr	r3, [pc, #544]	@ (8006b14 <MX_GPIO_Init+0x6c8>)
 80068f2:	2228      	movs	r2, #40	@ 0x28
 80068f4:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 80068f6:	4b88      	ldr	r3, [pc, #544]	@ (8006b18 <MX_GPIO_Init+0x6cc>)
 80068f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068fc:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 80068fe:	4b87      	ldr	r3, [pc, #540]	@ (8006b1c <MX_GPIO_Init+0x6d0>)
 8006900:	4a5c      	ldr	r2, [pc, #368]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006902:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 8006904:	4b86      	ldr	r3, [pc, #536]	@ (8006b20 <MX_GPIO_Init+0x6d4>)
 8006906:	2228      	movs	r2, #40	@ 0x28
 8006908:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 800690a:	4b86      	ldr	r3, [pc, #536]	@ (8006b24 <MX_GPIO_Init+0x6d8>)
 800690c:	2204      	movs	r2, #4
 800690e:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 8006910:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <MX_GPIO_Init+0x6dc>)
 8006912:	4a58      	ldr	r2, [pc, #352]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006914:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006916:	4b85      	ldr	r3, [pc, #532]	@ (8006b2c <MX_GPIO_Init+0x6e0>)
 8006918:	2208      	movs	r2, #8
 800691a:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 800691c:	4b84      	ldr	r3, [pc, #528]	@ (8006b30 <MX_GPIO_Init+0x6e4>)
 800691e:	2220      	movs	r2, #32
 8006920:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 8006922:	4b84      	ldr	r3, [pc, #528]	@ (8006b34 <MX_GPIO_Init+0x6e8>)
 8006924:	4a57      	ldr	r2, [pc, #348]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006926:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006928:	4b83      	ldr	r3, [pc, #524]	@ (8006b38 <MX_GPIO_Init+0x6ec>)
 800692a:	2217      	movs	r2, #23
 800692c:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 800692e:	4b83      	ldr	r3, [pc, #524]	@ (8006b3c <MX_GPIO_Init+0x6f0>)
 8006930:	2201      	movs	r2, #1
 8006932:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006934:	4b82      	ldr	r3, [pc, #520]	@ (8006b40 <MX_GPIO_Init+0x6f4>)
 8006936:	4a4f      	ldr	r2, [pc, #316]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006938:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 800693a:	4b82      	ldr	r3, [pc, #520]	@ (8006b44 <MX_GPIO_Init+0x6f8>)
 800693c:	2202      	movs	r2, #2
 800693e:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006940:	4b81      	ldr	r3, [pc, #516]	@ (8006b48 <MX_GPIO_Init+0x6fc>)
 8006942:	4a4c      	ldr	r2, [pc, #304]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006944:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 8006946:	4b81      	ldr	r3, [pc, #516]	@ (8006b4c <MX_GPIO_Init+0x700>)
 8006948:	2210      	movs	r2, #16
 800694a:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 800694c:	4b80      	ldr	r3, [pc, #512]	@ (8006b50 <MX_GPIO_Init+0x704>)
 800694e:	4a81      	ldr	r2, [pc, #516]	@ (8006b54 <MX_GPIO_Init+0x708>)
 8006950:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 8006952:	4b81      	ldr	r3, [pc, #516]	@ (8006b58 <MX_GPIO_Init+0x70c>)
 8006954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006958:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 800695a:	4b80      	ldr	r3, [pc, #512]	@ (8006b5c <MX_GPIO_Init+0x710>)
 800695c:	4a45      	ldr	r2, [pc, #276]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800695e:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 8006960:	4b7f      	ldr	r3, [pc, #508]	@ (8006b60 <MX_GPIO_Init+0x714>)
 8006962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006966:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 8006968:	4b7e      	ldr	r3, [pc, #504]	@ (8006b64 <MX_GPIO_Init+0x718>)
 800696a:	4a42      	ldr	r2, [pc, #264]	@ (8006a74 <MX_GPIO_Init+0x628>)
 800696c:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 800696e:	4b7e      	ldr	r3, [pc, #504]	@ (8006b68 <MX_GPIO_Init+0x71c>)
 8006970:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006974:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 8006976:	4b7d      	ldr	r3, [pc, #500]	@ (8006b6c <MX_GPIO_Init+0x720>)
 8006978:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800697c:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 800697e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b70 <MX_GPIO_Init+0x724>)
 8006980:	2210      	movs	r2, #16
 8006982:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 8006984:	4b7b      	ldr	r3, [pc, #492]	@ (8006b74 <MX_GPIO_Init+0x728>)
 8006986:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800698a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698c:	2001      	movs	r0, #1
 800698e:	f7fe fe1d 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006992:	2002      	movs	r0, #2
 8006994:	f7fe fe1a 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006998:	2004      	movs	r0, #4
 800699a:	f7fe fe17 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800699e:	2008      	movs	r0, #8
 80069a0:	f7fe fe14 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069a4:	2010      	movs	r0, #16
 80069a6:	f7fe fe11 	bl	80055cc <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069aa:	4b54      	ldr	r3, [pc, #336]	@ (8006afc <MX_GPIO_Init+0x6b0>)
 80069ac:	881a      	ldrh	r2, [r3, #0]
 80069ae:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <MX_GPIO_Init+0x6b8>)
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2201      	movs	r2, #1
 80069b8:	4619      	mov	r1, r3
 80069ba:	4832      	ldr	r0, [pc, #200]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80069bc:	f007 ff30 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069c0:	4b35      	ldr	r3, [pc, #212]	@ (8006a98 <MX_GPIO_Init+0x64c>)
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	4619      	mov	r1, r3
 80069c8:	482a      	ldr	r0, [pc, #168]	@ (8006a74 <MX_GPIO_Init+0x628>)
 80069ca:	f007 ff29 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 80069ce:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac8 <MX_GPIO_Init+0x67c>)
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	4619      	mov	r1, r3
 80069d6:	482b      	ldr	r0, [pc, #172]	@ (8006a84 <MX_GPIO_Init+0x638>)
 80069d8:	f007 ff22 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 80069dc:	4b45      	ldr	r3, [pc, #276]	@ (8006af4 <MX_GPIO_Init+0x6a8>)
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	4619      	mov	r1, r3
 80069e4:	4836      	ldr	r0, [pc, #216]	@ (8006ac0 <MX_GPIO_Init+0x674>)
 80069e6:	f007 ff1b 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 80069ea:	4b54      	ldr	r3, [pc, #336]	@ (8006b3c <MX_GPIO_Init+0x6f0>)
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	4b55      	ldr	r3, [pc, #340]	@ (8006b44 <MX_GPIO_Init+0x6f8>)
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	4b58      	ldr	r3, [pc, #352]	@ (8006b58 <MX_GPIO_Init+0x70c>)
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2200      	movs	r2, #0
 8006a00:	4619      	mov	r1, r3
 8006a02:	481c      	ldr	r0, [pc, #112]	@ (8006a74 <MX_GPIO_Init+0x628>)
 8006a04:	f007 ff0c 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a08:	4b50      	ldr	r3, [pc, #320]	@ (8006b4c <MX_GPIO_Init+0x700>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4850      	ldr	r0, [pc, #320]	@ (8006b54 <MX_GPIO_Init+0x708>)
 8006a12:	f007 ff05 	bl	800e820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a16:	4b56      	ldr	r3, [pc, #344]	@ (8006b70 <MX_GPIO_Init+0x724>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a22:	f007 fefd 	bl	800e820 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <MX_GPIO_Init+0x630>)
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <MX_GPIO_Init+0x654>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <MX_GPIO_Init+0x660>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a3c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a42:	2301      	movs	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	480e      	ldr	r0, [pc, #56]	@ (8006a84 <MX_GPIO_Init+0x638>)
 8006a4c:	f007 fd60 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a50:	4b0e      	ldr	r3, [pc, #56]	@ (8006a8c <MX_GPIO_Init+0x640>)
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a5a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a68:	e086      	b.n	8006b78 <MX_GPIO_Init+0x72c>
 8006a6a:	bf00      	nop
 8006a6c:	20000c56 	.word	0x20000c56
 8006a70:	20000c58 	.word	0x20000c58
 8006a74:	48000400 	.word	0x48000400
 8006a78:	20000c5c 	.word	0x20000c5c
 8006a7c:	20000c5e 	.word	0x20000c5e
 8006a80:	20000c60 	.word	0x20000c60
 8006a84:	48000800 	.word	0x48000800
 8006a88:	20000c64 	.word	0x20000c64
 8006a8c:	20000c66 	.word	0x20000c66
 8006a90:	20000c68 	.word	0x20000c68
 8006a94:	20000c6c 	.word	0x20000c6c
 8006a98:	20000c6e 	.word	0x20000c6e
 8006a9c:	20000c70 	.word	0x20000c70
 8006aa0:	20000c74 	.word	0x20000c74
 8006aa4:	20000c78 	.word	0x20000c78
 8006aa8:	20000c7c 	.word	0x20000c7c
 8006aac:	20000c7e 	.word	0x20000c7e
 8006ab0:	20000c80 	.word	0x20000c80
 8006ab4:	20000c84 	.word	0x20000c84
 8006ab8:	20000c86 	.word	0x20000c86
 8006abc:	20000c88 	.word	0x20000c88
 8006ac0:	48000c00 	.word	0x48000c00
 8006ac4:	20000c8c 	.word	0x20000c8c
 8006ac8:	20000c8e 	.word	0x20000c8e
 8006acc:	20000c90 	.word	0x20000c90
 8006ad0:	20000c94 	.word	0x20000c94
 8006ad4:	20000c98 	.word	0x20000c98
 8006ad8:	20000c9c 	.word	0x20000c9c
 8006adc:	20000c9e 	.word	0x20000c9e
 8006ae0:	20000ca0 	.word	0x20000ca0
 8006ae4:	20000ca4 	.word	0x20000ca4
 8006ae8:	20000ca6 	.word	0x20000ca6
 8006aec:	20000ca8 	.word	0x20000ca8
 8006af0:	20000cac 	.word	0x20000cac
 8006af4:	20000cae 	.word	0x20000cae
 8006af8:	20000cb0 	.word	0x20000cb0
 8006afc:	20000cb4 	.word	0x20000cb4
 8006b00:	20000cb8 	.word	0x20000cb8
 8006b04:	20000cbc 	.word	0x20000cbc
 8006b08:	20000cc0 	.word	0x20000cc0
 8006b0c:	20000cc4 	.word	0x20000cc4
 8006b10:	20000cc8 	.word	0x20000cc8
 8006b14:	20000ccc 	.word	0x20000ccc
 8006b18:	20000cce 	.word	0x20000cce
 8006b1c:	20000cd0 	.word	0x20000cd0
 8006b20:	20000cd4 	.word	0x20000cd4
 8006b24:	20000cd6 	.word	0x20000cd6
 8006b28:	20000cd8 	.word	0x20000cd8
 8006b2c:	20000cdc 	.word	0x20000cdc
 8006b30:	20000cde 	.word	0x20000cde
 8006b34:	20000ce0 	.word	0x20000ce0
 8006b38:	20000ce4 	.word	0x20000ce4
 8006b3c:	20000ce6 	.word	0x20000ce6
 8006b40:	20000ce8 	.word	0x20000ce8
 8006b44:	20000cec 	.word	0x20000cec
 8006b48:	20000cf0 	.word	0x20000cf0
 8006b4c:	20000cf4 	.word	0x20000cf4
 8006b50:	20000cf8 	.word	0x20000cf8
 8006b54:	48001000 	.word	0x48001000
 8006b58:	20000cfc 	.word	0x20000cfc
 8006b5c:	20000d00 	.word	0x20000d00
 8006b60:	20000d04 	.word	0x20000d04
 8006b64:	20000d08 	.word	0x20000d08
 8006b68:	20000d0c 	.word	0x20000d0c
 8006b6c:	20000d10 	.word	0x20000d10
 8006b70:	20000d14 	.word	0x20000d14
 8006b74:	20000d18 	.word	0x20000d18
 8006b78:	f007 fcca 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006b7c:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <MX_GPIO_Init+0x8cc>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006b86:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4862      	ldr	r0, [pc, #392]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006b92:	f007 fcbd 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006b96:	4b62      	ldr	r3, [pc, #392]	@ (8006d20 <MX_GPIO_Init+0x8d4>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006b9c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006ba0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	485e      	ldr	r0, [pc, #376]	@ (8006d24 <MX_GPIO_Init+0x8d8>)
 8006bac:	f007 fcb0 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d28 <MX_GPIO_Init+0x8dc>)
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <MX_GPIO_Init+0x8e0>)
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d30 <MX_GPIO_Init+0x8e4>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4857      	ldr	r0, [pc, #348]	@ (8006d34 <MX_GPIO_Init+0x8e8>)
 8006bd8:	f007 fc9a 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006bdc:	4b56      	ldr	r3, [pc, #344]	@ (8006d38 <MX_GPIO_Init+0x8ec>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006be2:	2301      	movs	r3, #1
 8006be4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	484a      	ldr	r0, [pc, #296]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006bf4:	f007 fc8c 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006bf8:	4b50      	ldr	r3, [pc, #320]	@ (8006d3c <MX_GPIO_Init+0x8f0>)
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <MX_GPIO_Init+0x8f4>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	4b4f      	ldr	r3, [pc, #316]	@ (8006d44 <MX_GPIO_Init+0x8f8>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c12:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c14:	2301      	movs	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	483f      	ldr	r0, [pc, #252]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006c1e:	f007 fc77 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c22:	4b49      	ldr	r3, [pc, #292]	@ (8006d48 <MX_GPIO_Init+0x8fc>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c2c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	483f      	ldr	r0, [pc, #252]	@ (8006d34 <MX_GPIO_Init+0x8e8>)
 8006c38:	f007 fc6a 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c3c:	4b43      	ldr	r3, [pc, #268]	@ (8006d4c <MX_GPIO_Init+0x900>)
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	4b43      	ldr	r3, [pc, #268]	@ (8006d50 <MX_GPIO_Init+0x904>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b42      	ldr	r3, [pc, #264]	@ (8006d54 <MX_GPIO_Init+0x908>)
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c52:	2301      	movs	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	482e      	ldr	r0, [pc, #184]	@ (8006d1c <MX_GPIO_Init+0x8d0>)
 8006c64:	f007 fc54 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006c68:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <MX_GPIO_Init+0x90c>)
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4837      	ldr	r0, [pc, #220]	@ (8006d5c <MX_GPIO_Init+0x910>)
 8006c80:	f007 fc46 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006c84:	4b36      	ldr	r3, [pc, #216]	@ (8006d60 <MX_GPIO_Init+0x914>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c9e:	f007 fc37 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006ca2:	4b30      	ldr	r3, [pc, #192]	@ (8006d64 <MX_GPIO_Init+0x918>)
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb4:	1d3b      	adds	r3, r7, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cbc:	f007 fc28 	bl	800e510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2006      	movs	r0, #6
 8006cc6:	f007 f916 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006cca:	2006      	movs	r0, #6
 8006ccc:	f007 f92d 	bl	800df2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2008      	movs	r0, #8
 8006cd6:	f007 f90e 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006cda:	2008      	movs	r0, #8
 8006cdc:	f007 f925 	bl	800df2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	200a      	movs	r0, #10
 8006ce6:	f007 f906 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006cea:	200a      	movs	r0, #10
 8006cec:	f007 f91d 	bl	800df2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2017      	movs	r0, #23
 8006cf6:	f007 f8fe 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cfa:	2017      	movs	r0, #23
 8006cfc:	f007 f915 	bl	800df2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	2028      	movs	r0, #40	@ 0x28
 8006d06:	f007 f8f6 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d0a:	2028      	movs	r0, #40	@ 0x28
 8006d0c:	f007 f90d 	bl	800df2a <HAL_NVIC_EnableIRQ>
}
 8006d10:	bf00      	nop
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000c56 	.word	0x20000c56
 8006d1c:	48000400 	.word	0x48000400
 8006d20:	20000c86 	.word	0x20000c86
 8006d24:	48000c00 	.word	0x48000c00
 8006d28:	20000cb4 	.word	0x20000cb4
 8006d2c:	20000cbc 	.word	0x20000cbc
 8006d30:	20000c8e 	.word	0x20000c8e
 8006d34:	48000800 	.word	0x48000800
 8006d38:	20000c6e 	.word	0x20000c6e
 8006d3c:	20000cc4 	.word	0x20000cc4
 8006d40:	20000cce 	.word	0x20000cce
 8006d44:	20000cd6 	.word	0x20000cd6
 8006d48:	20000cde 	.word	0x20000cde
 8006d4c:	20000ce6 	.word	0x20000ce6
 8006d50:	20000cec 	.word	0x20000cec
 8006d54:	20000cfc 	.word	0x20000cfc
 8006d58:	20000cf4 	.word	0x20000cf4
 8006d5c:	48001000 	.word	0x48001000
 8006d60:	20000d0c 	.word	0x20000d0c
 8006d64:	20000d14 	.word	0x20000d14

08006d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006d6c:	4904      	ldr	r1, [pc, #16]	@ (8006d80 <Error_Handler+0x18>)
 8006d6e:	4805      	ldr	r0, [pc, #20]	@ (8006d84 <Error_Handler+0x1c>)
 8006d70:	f00d fcba 	bl	80146e8 <siprintf>
 8006d74:	4803      	ldr	r0, [pc, #12]	@ (8006d84 <Error_Handler+0x1c>)
 8006d76:	f7fe fc43 	bl	8005600 <serialOut>
  return;
 8006d7a:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	0801827c 	.word	0x0801827c
 8006d84:	20000b5c 	.word	0x20000b5c

08006d88 <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8006d8e:	f7fe fd79 	bl	8005884 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8006d92:	2254      	movs	r2, #84	@ 0x54
 8006d94:	2100      	movs	r1, #0
 8006d96:	48ac      	ldr	r0, [pc, #688]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006d98:	f00d fd0b 	bl	80147b2 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8006d9c:	4bab      	ldr	r3, [pc, #684]	@ (800704c <PCU_Initialize+0x2c4>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4ba9      	ldr	r3, [pc, #676]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006da4:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8006da6:	4ba8      	ldr	r3, [pc, #672]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8006dac:	4ba6      	ldr	r3, [pc, #664]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8006db2:	4ba5      	ldr	r3, [pc, #660]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8006db8:	4ba3      	ldr	r3, [pc, #652]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8006dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	815a      	strh	r2, [r3, #10]
 8006dc6:	e007      	b.n	8006dd8 <PCU_Initialize+0x50>
  else if (pack.id == 1)
 8006dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d103      	bne.n	8006dd8 <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8006dd0:	4b9d      	ldr	r3, [pc, #628]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dd6:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8006dd8:	4b9b      	ldr	r3, [pc, #620]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006dde:	4b9a      	ldr	r3, [pc, #616]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006de4:	4b98      	ldr	r3, [pc, #608]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 8006dea:	4b97      	ldr	r3, [pc, #604]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006df0:	4b95      	ldr	r3, [pc, #596]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 8006df6:	4b94      	ldr	r3, [pc, #592]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006dfc:	4b92      	ldr	r3, [pc, #584]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006e02:	4b91      	ldr	r3, [pc, #580]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 8006e08:	4b8f      	ldr	r3, [pc, #572]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 8006e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 8006e14:	4b8c      	ldr	r3, [pc, #560]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 8006e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 8006e20:	4b89      	ldr	r3, [pc, #548]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 8006e26:	4b88      	ldr	r3, [pc, #544]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 8006e2e:	4b86      	ldr	r3, [pc, #536]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 8006e36:	4b84      	ldr	r3, [pc, #528]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 8006e3e:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 8006e46:	4b80      	ldr	r3, [pc, #512]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 8006e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 8006e56:	4b7c      	ldr	r3, [pc, #496]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 8006e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 8006e62:	4b79      	ldr	r3, [pc, #484]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 8006e68:	4b77      	ldr	r3, [pc, #476]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006e6e:	4b76      	ldr	r3, [pc, #472]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 8006e74:	4b74      	ldr	r3, [pc, #464]	@ (8007048 <PCU_Initialize+0x2c0>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	71fb      	strb	r3, [r7, #7]
 8006e80:	e00f      	b.n	8006ea2 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	4a70      	ldr	r2, [pc, #448]	@ (8007050 <PCU_Initialize+0x2c8>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f00d fc8b 	bl	80147b2 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	71fb      	strb	r3, [r7, #7]
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	d9ec      	bls.n	8006e82 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 8006ea8:	486a      	ldr	r0, [pc, #424]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eaa:	f7fe fba9 	bl	8005600 <serialOut>
  serialOut("");
 8006eae:	4869      	ldr	r0, [pc, #420]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eb0:	f7fe fba6 	bl	8005600 <serialOut>
  serialOut("        ██    ██");
 8006eb4:	4868      	ldr	r0, [pc, #416]	@ (8007058 <PCU_Initialize+0x2d0>)
 8006eb6:	f7fe fba3 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8006eba:	4868      	ldr	r0, [pc, #416]	@ (800705c <PCU_Initialize+0x2d4>)
 8006ebc:	f7fe fba0 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8006ec0:	4867      	ldr	r0, [pc, #412]	@ (8007060 <PCU_Initialize+0x2d8>)
 8006ec2:	f7fe fb9d 	bl	8005600 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8006ec6:	4867      	ldr	r0, [pc, #412]	@ (8007064 <PCU_Initialize+0x2dc>)
 8006ec8:	f7fe fb9a 	bl	8005600 <serialOut>
  serialOut("     ██    ██    ██");
 8006ecc:	4866      	ldr	r0, [pc, #408]	@ (8007068 <PCU_Initialize+0x2e0>)
 8006ece:	f7fe fb97 	bl	8005600 <serialOut>
  serialOut("     m o d b a t t");
 8006ed2:	4866      	ldr	r0, [pc, #408]	@ (800706c <PCU_Initialize+0x2e4>)
 8006ed4:	f7fe fb94 	bl	8005600 <serialOut>
  serialOut("");
 8006ed8:	485e      	ldr	r0, [pc, #376]	@ (8007054 <PCU_Initialize+0x2cc>)
 8006eda:	f7fe fb91 	bl	8005600 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f004 f9b0 	bl	800b244 <CAN_TestRamAccess>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8006ee8:	79bb      	ldrb	r3, [r7, #6]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <PCU_Initialize+0x176>
 8006eee:	4960      	ldr	r1, [pc, #384]	@ (8007070 <PCU_Initialize+0x2e8>)
 8006ef0:	4860      	ldr	r0, [pc, #384]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ef2:	f00d fbf9 	bl	80146e8 <siprintf>
 8006ef6:	485f      	ldr	r0, [pc, #380]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ef8:	f7fe fb82 	bl	8005600 <serialOut>
 8006efc:	e006      	b.n	8006f0c <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006efe:	495e      	ldr	r1, [pc, #376]	@ (8007078 <PCU_Initialize+0x2f0>)
 8006f00:	485c      	ldr	r0, [pc, #368]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f02:	f00d fbf1 	bl	80146e8 <siprintf>
 8006f06:	485b      	ldr	r0, [pc, #364]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f08:	f7fe fb7a 	bl	8005600 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f004 f91f 	bl	800b150 <CAN_TestRegisterAccess>
 8006f12:	4603      	mov	r3, r0
 8006f14:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 8006f16:	79bb      	ldrb	r3, [r7, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <PCU_Initialize+0x1a4>
 8006f1c:	4957      	ldr	r1, [pc, #348]	@ (800707c <PCU_Initialize+0x2f4>)
 8006f1e:	4855      	ldr	r0, [pc, #340]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f20:	f00d fbe2 	bl	80146e8 <siprintf>
 8006f24:	4853      	ldr	r0, [pc, #332]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f26:	f7fe fb6b 	bl	8005600 <serialOut>
 8006f2a:	e006      	b.n	8006f3a <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006f2c:	4954      	ldr	r1, [pc, #336]	@ (8007080 <PCU_Initialize+0x2f8>)
 8006f2e:	4851      	ldr	r0, [pc, #324]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f30:	f00d fbda 	bl	80146e8 <siprintf>
 8006f34:	484f      	ldr	r0, [pc, #316]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f36:	f7fe fb63 	bl	8005600 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006f3a:	4952      	ldr	r1, [pc, #328]	@ (8007084 <PCU_Initialize+0x2fc>)
 8006f3c:	484d      	ldr	r0, [pc, #308]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f3e:	f00d fbd3 	bl	80146e8 <siprintf>
 8006f42:	484c      	ldr	r0, [pc, #304]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f44:	f7fe fb5c 	bl	8005600 <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 8006f48:	4b4f      	ldr	r3, [pc, #316]	@ (8007088 <PCU_Initialize+0x300>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d135      	bne.n	8006fbc <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 8006f50:	2001      	movs	r0, #1
 8006f52:	f004 f977 	bl	800b244 <CAN_TestRamAccess>
 8006f56:	4603      	mov	r3, r0
 8006f58:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 8006f5a:	79bb      	ldrb	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <PCU_Initialize+0x1e8>
 8006f60:	494a      	ldr	r1, [pc, #296]	@ (800708c <PCU_Initialize+0x304>)
 8006f62:	4844      	ldr	r0, [pc, #272]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f64:	f00d fbc0 	bl	80146e8 <siprintf>
 8006f68:	4842      	ldr	r0, [pc, #264]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f6a:	f7fe fb49 	bl	8005600 <serialOut>
 8006f6e:	e006      	b.n	8006f7e <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006f70:	4947      	ldr	r1, [pc, #284]	@ (8007090 <PCU_Initialize+0x308>)
 8006f72:	4840      	ldr	r0, [pc, #256]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f74:	f00d fbb8 	bl	80146e8 <siprintf>
 8006f78:	483e      	ldr	r0, [pc, #248]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f7a:	f7fe fb41 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f004 f8e6 	bl	800b150 <CAN_TestRegisterAccess>
 8006f84:	4603      	mov	r3, r0
 8006f86:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <PCU_Initialize+0x216>
 8006f8e:	4941      	ldr	r1, [pc, #260]	@ (8007094 <PCU_Initialize+0x30c>)
 8006f90:	4838      	ldr	r0, [pc, #224]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f92:	f00d fba9 	bl	80146e8 <siprintf>
 8006f96:	4837      	ldr	r0, [pc, #220]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006f98:	f7fe fb32 	bl	8005600 <serialOut>
 8006f9c:	e006      	b.n	8006fac <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006f9e:	493e      	ldr	r1, [pc, #248]	@ (8007098 <PCU_Initialize+0x310>)
 8006fa0:	4834      	ldr	r0, [pc, #208]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fa2:	f00d fba1 	bl	80146e8 <siprintf>
 8006fa6:	4833      	ldr	r0, [pc, #204]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fa8:	f7fe fb2a 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006fac:	4935      	ldr	r1, [pc, #212]	@ (8007084 <PCU_Initialize+0x2fc>)
 8006fae:	4831      	ldr	r0, [pc, #196]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fb0:	f00d fb9a 	bl	80146e8 <siprintf>
 8006fb4:	482f      	ldr	r0, [pc, #188]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fb6:	f7fe fb23 	bl	8005600 <serialOut>
 8006fba:	e09e      	b.n	80070fa <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f004 f941 	bl	800b244 <CAN_TestRamAccess>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8006fc6:	79bb      	ldrb	r3, [r7, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <PCU_Initialize+0x254>
 8006fcc:	4933      	ldr	r1, [pc, #204]	@ (800709c <PCU_Initialize+0x314>)
 8006fce:	4829      	ldr	r0, [pc, #164]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fd0:	f00d fb8a 	bl	80146e8 <siprintf>
 8006fd4:	4827      	ldr	r0, [pc, #156]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fd6:	f7fe fb13 	bl	8005600 <serialOut>
 8006fda:	e006      	b.n	8006fea <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006fdc:	4930      	ldr	r1, [pc, #192]	@ (80070a0 <PCU_Initialize+0x318>)
 8006fde:	4825      	ldr	r0, [pc, #148]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fe0:	f00d fb82 	bl	80146e8 <siprintf>
 8006fe4:	4823      	ldr	r0, [pc, #140]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006fe6:	f7fe fb0b 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006fea:	2001      	movs	r0, #1
 8006fec:	f004 f8b0 	bl	800b150 <CAN_TestRegisterAccess>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8006ff4:	79bb      	ldrb	r3, [r7, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <PCU_Initialize+0x282>
 8006ffa:	492a      	ldr	r1, [pc, #168]	@ (80070a4 <PCU_Initialize+0x31c>)
 8006ffc:	481d      	ldr	r0, [pc, #116]	@ (8007074 <PCU_Initialize+0x2ec>)
 8006ffe:	f00d fb73 	bl	80146e8 <siprintf>
 8007002:	481c      	ldr	r0, [pc, #112]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007004:	f7fe fafc 	bl	8005600 <serialOut>
 8007008:	e006      	b.n	8007018 <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 800700a:	4927      	ldr	r1, [pc, #156]	@ (80070a8 <PCU_Initialize+0x320>)
 800700c:	4819      	ldr	r0, [pc, #100]	@ (8007074 <PCU_Initialize+0x2ec>)
 800700e:	f00d fb6b 	bl	80146e8 <siprintf>
 8007012:	4818      	ldr	r0, [pc, #96]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007014:	f7fe faf4 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007018:	491a      	ldr	r1, [pc, #104]	@ (8007084 <PCU_Initialize+0x2fc>)
 800701a:	4816      	ldr	r0, [pc, #88]	@ (8007074 <PCU_Initialize+0x2ec>)
 800701c:	f00d fb64 	bl	80146e8 <siprintf>
 8007020:	4814      	ldr	r0, [pc, #80]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007022:	f7fe faed 	bl	8005600 <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 8007026:	2002      	movs	r0, #2
 8007028:	f004 f90c 	bl	800b244 <CAN_TestRamAccess>
 800702c:	4603      	mov	r3, r0
 800702e:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 8007030:	79bb      	ldrb	r3, [r7, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d03c      	beq.n	80070b0 <PCU_Initialize+0x328>
 8007036:	491d      	ldr	r1, [pc, #116]	@ (80070ac <PCU_Initialize+0x324>)
 8007038:	480e      	ldr	r0, [pc, #56]	@ (8007074 <PCU_Initialize+0x2ec>)
 800703a:	f00d fb55 	bl	80146e8 <siprintf>
 800703e:	480d      	ldr	r0, [pc, #52]	@ (8007074 <PCU_Initialize+0x2ec>)
 8007040:	f7fe fade 	bl	8005600 <serialOut>
 8007044:	e03b      	b.n	80070be <PCU_Initialize+0x336>
 8007046:	bf00      	nop
 8007048:	2000a66c 	.word	0x2000a66c
 800704c:	20000984 	.word	0x20000984
 8007050:	20000dec 	.word	0x20000dec
 8007054:	0801828c 	.word	0x0801828c
 8007058:	08018290 	.word	0x08018290
 800705c:	080182ac 	.word	0x080182ac
 8007060:	080182d4 	.word	0x080182d4
 8007064:	08018324 	.word	0x08018324
 8007068:	08018374 	.word	0x08018374
 800706c:	08018394 	.word	0x08018394
 8007070:	080183a8 	.word	0x080183a8
 8007074:	20000b5c 	.word	0x20000b5c
 8007078:	080183d8 	.word	0x080183d8
 800707c:	08018410 	.word	0x08018410
 8007080:	08018440 	.word	0x08018440
 8007084:	08018478 	.word	0x08018478
 8007088:	20000a50 	.word	0x20000a50
 800708c:	0801847c 	.word	0x0801847c
 8007090:	080184ac 	.word	0x080184ac
 8007094:	080184e4 	.word	0x080184e4
 8007098:	08018514 	.word	0x08018514
 800709c:	0801854c 	.word	0x0801854c
 80070a0:	0801857c 	.word	0x0801857c
 80070a4:	080185b4 	.word	0x080185b4
 80070a8:	080185e4 	.word	0x080185e4
 80070ac:	0801861c 	.word	0x0801861c
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070b0:	4915      	ldr	r1, [pc, #84]	@ (8007108 <PCU_Initialize+0x380>)
 80070b2:	4816      	ldr	r0, [pc, #88]	@ (800710c <PCU_Initialize+0x384>)
 80070b4:	f00d fb18 	bl	80146e8 <siprintf>
 80070b8:	4814      	ldr	r0, [pc, #80]	@ (800710c <PCU_Initialize+0x384>)
 80070ba:	f7fe faa1 	bl	8005600 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 80070be:	2002      	movs	r0, #2
 80070c0:	f004 f846 	bl	800b150 <CAN_TestRegisterAccess>
 80070c4:	4603      	mov	r3, r0
 80070c6:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 80070c8:	79bb      	ldrb	r3, [r7, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <PCU_Initialize+0x356>
 80070ce:	4910      	ldr	r1, [pc, #64]	@ (8007110 <PCU_Initialize+0x388>)
 80070d0:	480e      	ldr	r0, [pc, #56]	@ (800710c <PCU_Initialize+0x384>)
 80070d2:	f00d fb09 	bl	80146e8 <siprintf>
 80070d6:	480d      	ldr	r0, [pc, #52]	@ (800710c <PCU_Initialize+0x384>)
 80070d8:	f7fe fa92 	bl	8005600 <serialOut>
 80070dc:	e006      	b.n	80070ec <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070de:	490d      	ldr	r1, [pc, #52]	@ (8007114 <PCU_Initialize+0x38c>)
 80070e0:	480a      	ldr	r0, [pc, #40]	@ (800710c <PCU_Initialize+0x384>)
 80070e2:	f00d fb01 	bl	80146e8 <siprintf>
 80070e6:	4809      	ldr	r0, [pc, #36]	@ (800710c <PCU_Initialize+0x384>)
 80070e8:	f7fe fa8a 	bl	8005600 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 80070ec:	490a      	ldr	r1, [pc, #40]	@ (8007118 <PCU_Initialize+0x390>)
 80070ee:	4807      	ldr	r0, [pc, #28]	@ (800710c <PCU_Initialize+0x384>)
 80070f0:	f00d fafa 	bl	80146e8 <siprintf>
 80070f4:	4805      	ldr	r0, [pc, #20]	@ (800710c <PCU_Initialize+0x384>)
 80070f6:	f7fe fa83 	bl	8005600 <serialOut>

  }
  appData.state = PC_STATE_INIT;
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <PCU_Initialize+0x394>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	0801864c 	.word	0x0801864c
 800710c:	20000b5c 	.word	0x20000b5c
 8007110:	08018684 	.word	0x08018684
 8007114:	080186b4 	.word	0x080186b4
 8007118:	08018478 	.word	0x08018478
 800711c:	20000d28 	.word	0x20000d28

08007120 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007122:	b08d      	sub	sp, #52	@ 0x34
 8007124:	af04      	add	r7, sp, #16
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;
  static uint8_t nextModuleToPoll = 0;
  static lastContact lastStatusPoll = {0, 0};

  if(appData.state == PC_STATE_INIT){  // Application initialization
 8007126:	4b67      	ldr	r3, [pc, #412]	@ (80072c4 <PCU_Tasks+0x1a4>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d125      	bne.n	800717a <PCU_Tasks+0x5a>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 800712e:	2000      	movs	r0, #0
 8007130:	f000 ff5e 	bl	8007ff0 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8007134:	2001      	movs	r0, #1
 8007136:	f000 ff5b 	bl	8007ff0 <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 800713a:	f002 f8ff 	bl	800933c <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 800713e:	f002 f8a9 	bl	8009294 <MCU_DeRegisterAllModules>
    
    // Request module announcements on startup
    MCU_RequestModuleAnnouncement();
 8007142:	f002 f955 	bl	80093f0 <MCU_RequestModuleAnnouncement>
    lastAnnounceRequest.ticks = htim1.Instance->CNT;
 8007146:	4b60      	ldr	r3, [pc, #384]	@ (80072c8 <PCU_Tasks+0x1a8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	4a5f      	ldr	r2, [pc, #380]	@ (80072cc <PCU_Tasks+0x1ac>)
 800714e:	6013      	str	r3, [r2, #0]
    lastAnnounceRequest.overflows = etTimerOverflows;
 8007150:	4b5f      	ldr	r3, [pc, #380]	@ (80072d0 <PCU_Tasks+0x1b0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5d      	ldr	r2, [pc, #372]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007156:	6053      	str	r3, [r2, #4]

    pack.vcuRequestedState = packOff;
 8007158:	4b5e      	ldr	r3, [pc, #376]	@ (80072d4 <PCU_Tasks+0x1b4>)
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 8007160:	4b5b      	ldr	r3, [pc, #364]	@ (80072d0 <PCU_Tasks+0x1b0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5b      	ldr	r2, [pc, #364]	@ (80072d4 <PCU_Tasks+0x1b4>)
 8007166:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8007168:	4b57      	ldr	r3, [pc, #348]	@ (80072c8 <PCU_Tasks+0x1a8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	4a59      	ldr	r2, [pc, #356]	@ (80072d4 <PCU_Tasks+0x1b4>)
 8007170:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 8007172:	4b54      	ldr	r3, [pc, #336]	@ (80072c4 <PCU_Tasks+0x1a4>)
 8007174:	2201      	movs	r2, #1
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e33b      	b.n	80077f2 <PCU_Tasks+0x6d2>

  }else if (appData.state == PC_STATE_RUN){
 800717a:	4b52      	ldr	r3, [pc, #328]	@ (80072c4 <PCU_Tasks+0x1a4>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b01      	cmp	r3, #1
 8007180:	f040 8337 	bne.w	80077f2 <PCU_Tasks+0x6d2>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 8007184:	4b54      	ldr	r3, [pc, #336]	@ (80072d8 <PCU_Tasks+0x1b8>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <PCU_Tasks+0x70>
      VCU_ReceiveMessages();
 800718c:	f004 fd4a 	bl	800bc24 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 8007190:	4b52      	ldr	r3, [pc, #328]	@ (80072dc <PCU_Tasks+0x1bc>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <PCU_Tasks+0x7c>
      MCU_ReceiveMessages();
 8007198:	f001 fcca 	bl	8008b30 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 800719c:	f005 fa3a 	bl	800c614 <VCU_TicksSinceLastMessage>
 80071a0:	60f8      	str	r0, [r7, #12]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80071a8:	d920      	bls.n	80071ec <PCU_Tasks+0xcc>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 80071aa:	4b4a      	ldr	r3, [pc, #296]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80071ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d009      	beq.n	80071c8 <PCU_Tasks+0xa8>
 80071b4:	4b47      	ldr	r3, [pc, #284]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80071b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d004      	beq.n	80071c8 <PCU_Tasks+0xa8>
 80071be:	4b45      	ldr	r3, [pc, #276]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80071c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d130      	bne.n	800722a <PCU_Tasks+0x10a>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80071c8:	4b45      	ldr	r3, [pc, #276]	@ (80072e0 <PCU_Tasks+0x1c0>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0311 	and.w	r3, r3, #17
 80071d0:	2b11      	cmp	r3, #17
 80071d2:	d106      	bne.n	80071e2 <PCU_Tasks+0xc2>
 80071d4:	4943      	ldr	r1, [pc, #268]	@ (80072e4 <PCU_Tasks+0x1c4>)
 80071d6:	4844      	ldr	r0, [pc, #272]	@ (80072e8 <PCU_Tasks+0x1c8>)
 80071d8:	f00d fa86 	bl	80146e8 <siprintf>
 80071dc:	4842      	ldr	r0, [pc, #264]	@ (80072e8 <PCU_Tasks+0x1c8>)
 80071de:	f7fe fa0f 	bl	8005600 <serialOut>
        pack.vcuRequestedState = packOff;
 80071e2:	4b3c      	ldr	r3, [pc, #240]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071ea:	e01e      	b.n	800722a <PCU_Tasks+0x10a>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80071f2:	d91a      	bls.n	800722a <PCU_Tasks+0x10a>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 80071f4:	4b37      	ldr	r3, [pc, #220]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80071f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d004      	beq.n	8007208 <PCU_Tasks+0xe8>
 80071fe:	4b35      	ldr	r3, [pc, #212]	@ (80072d4 <PCU_Tasks+0x1b4>)
 8007200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007204:	2b02      	cmp	r3, #2
 8007206:	d110      	bne.n	800722a <PCU_Tasks+0x10a>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8007208:	4b35      	ldr	r3, [pc, #212]	@ (80072e0 <PCU_Tasks+0x1c0>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 0311 	and.w	r3, r3, #17
 8007210:	2b11      	cmp	r3, #17
 8007212:	d106      	bne.n	8007222 <PCU_Tasks+0x102>
 8007214:	4935      	ldr	r1, [pc, #212]	@ (80072ec <PCU_Tasks+0x1cc>)
 8007216:	4834      	ldr	r0, [pc, #208]	@ (80072e8 <PCU_Tasks+0x1c8>)
 8007218:	f00d fa66 	bl	80146e8 <siprintf>
 800721c:	4832      	ldr	r0, [pc, #200]	@ (80072e8 <PCU_Tasks+0x1c8>)
 800721e:	f7fe f9ef 	bl	8005600 <serialOut>
        pack.vcuRequestedState = packStandby;
 8007222:	4b2c      	ldr	r3, [pc, #176]	@ (80072d4 <PCU_Tasks+0x1b4>)
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }
    
    // Send periodic announcement requests
    uint32_t timeSinceLastAnnounce = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
    if ((etTimerOverflows - lastAnnounceRequest.overflows) == 0){
 800722e:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4b27      	ldr	r3, [pc, #156]	@ (80072d0 <PCU_Tasks+0x1b0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d107      	bne.n	800724a <PCU_Tasks+0x12a>
      timeSinceLastAnnounce = htim1.Instance->CNT - lastAnnounceRequest.ticks;
 800723a:	4b23      	ldr	r3, [pc, #140]	@ (80072c8 <PCU_Tasks+0x1a8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007240:	4b22      	ldr	r3, [pc, #136]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e016      	b.n	8007278 <PCU_Tasks+0x158>
    } else {
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 800724a:	4b1f      	ldr	r3, [pc, #124]	@ (80072c8 <PCU_Tasks+0x1a8>)
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	4b1f      	ldr	r3, [pc, #124]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	1ad2      	subs	r2, r2, r3
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 8007254:	4b1c      	ldr	r3, [pc, #112]	@ (80072c8 <PCU_Tasks+0x1a8>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	491d      	ldr	r1, [pc, #116]	@ (80072d0 <PCU_Tasks+0x1b0>)
 800725c:	6808      	ldr	r0, [r1, #0]
 800725e:	491b      	ldr	r1, [pc, #108]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007260:	6849      	ldr	r1, [r1, #4]
 8007262:	1a41      	subs	r1, r0, r1
 8007264:	3901      	subs	r1, #1
 8007266:	fb01 f303 	mul.w	r3, r1, r3
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 800726a:	441a      	add	r2, r3
                              (htim1.Instance->CNT);
 800726c:	4b16      	ldr	r3, [pc, #88]	@ (80072c8 <PCU_Tasks+0x1a8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 8007272:	4413      	add	r3, r2
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 8007274:	3301      	adds	r3, #1
 8007276:	61bb      	str	r3, [r7, #24]
    }
    
    if(timeSinceLastAnnounce > MCU_ANNOUNCE_REQUEST_INTERVAL){
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800727e:	d90a      	bls.n	8007296 <PCU_Tasks+0x176>
      MCU_RequestModuleAnnouncement();
 8007280:	f002 f8b6 	bl	80093f0 <MCU_RequestModuleAnnouncement>
      lastAnnounceRequest.ticks = htim1.Instance->CNT;
 8007284:	4b10      	ldr	r3, [pc, #64]	@ (80072c8 <PCU_Tasks+0x1a8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	4a10      	ldr	r2, [pc, #64]	@ (80072cc <PCU_Tasks+0x1ac>)
 800728c:	6013      	str	r3, [r2, #0]
      lastAnnounceRequest.overflows = etTimerOverflows;
 800728e:	4b10      	ldr	r3, [pc, #64]	@ (80072d0 <PCU_Tasks+0x1b0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a0e      	ldr	r2, [pc, #56]	@ (80072cc <PCU_Tasks+0x1ac>)
 8007294:	6053      	str	r3, [r2, #4]
    }

    //Check for expired last contact from module
    if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007296:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <PCU_Tasks+0x1c0>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <PCU_Tasks+0x19e>
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80072a4:	7d1b      	ldrb	r3, [r3, #20]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d909      	bls.n	80072be <PCU_Tasks+0x19e>
      sprintf(tempBuffer,"MCU DEBUG - Checking %d modules", pack.moduleCount); 
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <PCU_Tasks+0x1b4>)
 80072ac:	7d1b      	ldrb	r3, [r3, #20]
 80072ae:	461a      	mov	r2, r3
 80072b0:	490f      	ldr	r1, [pc, #60]	@ (80072f0 <PCU_Tasks+0x1d0>)
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <PCU_Tasks+0x1c8>)
 80072b4:	f00d fa18 	bl	80146e8 <siprintf>
      serialOut(tempBuffer);
 80072b8:	480b      	ldr	r0, [pc, #44]	@ (80072e8 <PCU_Tasks+0x1c8>)
 80072ba:	f7fe f9a1 	bl	8005600 <serialOut>
    }
    for (index =0;index < pack.moduleCount;index++){
 80072be:	2300      	movs	r3, #0
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e1f2      	b.n	80076aa <PCU_Tasks+0x58a>
 80072c4:	20000d28 	.word	0x20000d28
 80072c8:	200005d0 	.word	0x200005d0
 80072cc:	20000d2c 	.word	0x20000d2c
 80072d0:	20000d20 	.word	0x20000d20
 80072d4:	2000a66c 	.word	0x2000a66c
 80072d8:	20000d1e 	.word	0x20000d1e
 80072dc:	20000d1c 	.word	0x20000d1c
 80072e0:	2000000c 	.word	0x2000000c
 80072e4:	080186ec 	.word	0x080186ec
 80072e8:	20000b5c 	.word	0x20000b5c
 80072ec:	08018710 	.word	0x08018710
 80072f0:	08018734 	.word	0x08018734
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 80072f4:	7ffb      	ldrb	r3, [r7, #31]
 80072f6:	4ab7      	ldr	r2, [pc, #732]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80072f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	4413      	add	r3, r2
 8007302:	3308      	adds	r3, #8
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f003 fdfc 	bl	800af04 <MCU_TicksSinceLastMessage>
 800730c:	60f8      	str	r0, [r7, #12]
      if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 800730e:	4bb2      	ldr	r3, [pc, #712]	@ (80075d8 <PCU_Tasks+0x4b8>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d023      	beq.n	8007362 <PCU_Tasks+0x242>
 800731a:	4bb0      	ldr	r3, [pc, #704]	@ (80075dc <PCU_Tasks+0x4bc>)
 800731c:	7d1b      	ldrb	r3, [r3, #20]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d91f      	bls.n	8007362 <PCU_Tasks+0x242>
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
 8007322:	7ffa      	ldrb	r2, [r7, #31]
                index, module[index].moduleId, elapsedTicks, module[index].statusPending); 
 8007324:	7ffb      	ldrb	r3, [r7, #31]
 8007326:	49ab      	ldr	r1, [pc, #684]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007328:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800732c:	fb00 f303 	mul.w	r3, r0, r3
 8007330:	440b      	add	r3, r1
 8007332:	3308      	adds	r3, #8
 8007334:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
 8007336:	461c      	mov	r4, r3
                index, module[index].moduleId, elapsedTicks, module[index].statusPending); 
 8007338:	7ffb      	ldrb	r3, [r7, #31]
 800733a:	49a6      	ldr	r1, [pc, #664]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800733c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007340:	fb00 f303 	mul.w	r3, r0, r3
 8007344:	440b      	add	r3, r1
 8007346:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800734a:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4623      	mov	r3, r4
 8007354:	49a2      	ldr	r1, [pc, #648]	@ (80075e0 <PCU_Tasks+0x4c0>)
 8007356:	48a3      	ldr	r0, [pc, #652]	@ (80075e4 <PCU_Tasks+0x4c4>)
 8007358:	f00d f9c6 	bl	80146e8 <siprintf>
        serialOut(tempBuffer);
 800735c:	48a1      	ldr	r0, [pc, #644]	@ (80075e4 <PCU_Tasks+0x4c4>)
 800735e:	f7fe f94f 	bl	8005600 <serialOut>
      }
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007368:	f240 80df 	bls.w	800752a <PCU_Tasks+0x40a>
 800736c:	7ffb      	ldrb	r3, [r7, #31]
 800736e:	4a99      	ldr	r2, [pc, #612]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007370:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80d2 	beq.w	800752a <PCU_Tasks+0x40a>
        // Increment consecutive timeout counter
        module[index].consecutiveTimeouts++;
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	4992      	ldr	r1, [pc, #584]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800738a:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800738e:	fb03 f202 	mul.w	r2, r3, r2
 8007392:	440a      	add	r2, r1
 8007394:	f202 42c3 	addw	r2, r2, #1219	@ 0x4c3
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	3201      	adds	r2, #1
 800739c:	b2d0      	uxtb	r0, r2
 800739e:	4a8d      	ldr	r2, [pc, #564]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80073a0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80073ae:	4602      	mov	r2, r0
 80073b0:	701a      	strb	r2, [r3, #0]
        
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	4a87      	ldr	r2, [pc, #540]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80073b6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d94e      	bls.n	8007468 <PCU_Tasks+0x348>
          // Max timeouts reached - deregister the module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 80073ca:	4b83      	ldr	r3, [pc, #524]	@ (80075d8 <PCU_Tasks+0x4b8>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 0309 	and.w	r3, r3, #9
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	d111      	bne.n	80073fa <PCU_Tasks+0x2da>
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
                    module[index].moduleId, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 80073d6:	7ffb      	ldrb	r3, [r7, #31]
 80073d8:	4a7e      	ldr	r2, [pc, #504]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80073da:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	3308      	adds	r3, #8
 80073e6:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
 80073e8:	461a      	mov	r2, r3
 80073ea:	2303      	movs	r3, #3
 80073ec:	497e      	ldr	r1, [pc, #504]	@ (80075e8 <PCU_Tasks+0x4c8>)
 80073ee:	487d      	ldr	r0, [pc, #500]	@ (80075e4 <PCU_Tasks+0x4c4>)
 80073f0:	f00d f97a 	bl	80146e8 <siprintf>
            serialOut(tempBuffer);
 80073f4:	487b      	ldr	r0, [pc, #492]	@ (80075e4 <PCU_Tasks+0x4c4>)
 80073f6:	f7fe f903 	bl	8005600 <serialOut>
          }
          
          // Send deregister message to the module
          MCU_DeRegisterModule(module[index].moduleId);
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	4a75      	ldr	r2, [pc, #468]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80073fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	4413      	add	r3, r2
 8007408:	3308      	adds	r3, #8
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fee7 	bl	80091e0 <MCU_DeRegisterModule>
          
          // Remove module from pack
          // Shift remaining modules down
          for(int j = index; j < pack.moduleCount - 1; j++){
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e017      	b.n	8007448 <PCU_Tasks+0x328>
            module[j] = module[j + 1];
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	3301      	adds	r3, #1
 800741c:	496d      	ldr	r1, [pc, #436]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007424:	fb00 f202 	mul.w	r2, r0, r2
 8007428:	1888      	adds	r0, r1, r2
 800742a:	4a6a      	ldr	r2, [pc, #424]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800742c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	4619      	mov	r1, r3
 8007438:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 800743c:	461a      	mov	r2, r3
 800743e:	f00e f8b0 	bl	80155a2 <memcpy>
          for(int j = index; j < pack.moduleCount - 1; j++){
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3301      	adds	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	4b64      	ldr	r3, [pc, #400]	@ (80075dc <PCU_Tasks+0x4bc>)
 800744a:	7d1b      	ldrb	r3, [r3, #20]
 800744c:	3b01      	subs	r3, #1
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	429a      	cmp	r2, r3
 8007452:	dbe1      	blt.n	8007418 <PCU_Tasks+0x2f8>
          }
          pack.moduleCount--;
 8007454:	4b61      	ldr	r3, [pc, #388]	@ (80075dc <PCU_Tasks+0x4bc>)
 8007456:	7d1b      	ldrb	r3, [r3, #20]
 8007458:	3b01      	subs	r3, #1
 800745a:	b2da      	uxtb	r2, r3
 800745c:	4b5f      	ldr	r3, [pc, #380]	@ (80075dc <PCU_Tasks+0x4bc>)
 800745e:	751a      	strb	r2, [r3, #20]
          
          // Adjust index since we removed a module
          index--;  // Always decrement to recheck this index
 8007460:	7ffb      	ldrb	r3, [r7, #31]
 8007462:	3b01      	subs	r3, #1
 8007464:	77fb      	strb	r3, [r7, #31]
          continue;  // Skip to next iteration
 8007466:	e11d      	b.n	80076a4 <PCU_Tasks+0x584>
        }
        else if( module[index].faultCode.commsError == false){
 8007468:	7ffb      	ldrb	r3, [r7, #31]
 800746a:	4a5a      	ldr	r2, [pc, #360]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800746c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800747a:	789b      	ldrb	r3, [r3, #2]
 800747c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	f040 810d 	bne.w	80076a2 <PCU_Tasks+0x582>
          // First timeout or still under limit - isolate module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 8007488:	4b53      	ldr	r3, [pc, #332]	@ (80075d8 <PCU_Tasks+0x4b8>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f003 0309 	and.w	r3, r3, #9
 8007490:	2b09      	cmp	r3, #9
 8007492:	d11f      	bne.n	80074d4 <PCU_Tasks+0x3b4>
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007494:	7ffb      	ldrb	r3, [r7, #31]
 8007496:	4a4f      	ldr	r2, [pc, #316]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007498:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	3308      	adds	r3, #8
 80074a4:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 80074a6:	4618      	mov	r0, r3
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 80074a8:	7ffb      	ldrb	r3, [r7, #31]
 80074aa:	4a4a      	ldr	r2, [pc, #296]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80074ac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80074ba:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 80074bc:	461a      	mov	r2, r3
 80074be:	2303      	movs	r3, #3
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	4602      	mov	r2, r0
 80074c6:	4949      	ldr	r1, [pc, #292]	@ (80075ec <PCU_Tasks+0x4cc>)
 80074c8:	4846      	ldr	r0, [pc, #280]	@ (80075e4 <PCU_Tasks+0x4c4>)
 80074ca:	f00d f90d 	bl	80146e8 <siprintf>
            serialOut(tempBuffer);
 80074ce:	4845      	ldr	r0, [pc, #276]	@ (80075e4 <PCU_Tasks+0x4c4>)
 80074d0:	f7fe f896 	bl	8005600 <serialOut>
          }
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 80074d4:	4b41      	ldr	r3, [pc, #260]	@ (80075dc <PCU_Tasks+0x4bc>)
 80074d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d10d      	bne.n	80074fa <PCU_Tasks+0x3da>
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	4a3c      	ldr	r2, [pc, #240]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80074e2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	3327      	adds	r3, #39	@ 0x27
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d102      	bne.n	80074fa <PCU_Tasks+0x3da>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 80074f4:	4b39      	ldr	r3, [pc, #228]	@ (80075dc <PCU_Tasks+0x4bc>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 80074fa:	7ffb      	ldrb	r3, [r7, #31]
 80074fc:	4a35      	ldr	r2, [pc, #212]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80074fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	3328      	adds	r3, #40	@ 0x28
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 800750e:	7ffb      	ldrb	r3, [r7, #31]
 8007510:	4a30      	ldr	r2, [pc, #192]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007512:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007520:	7893      	ldrb	r3, [r2, #2]
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	7093      	strb	r3, [r2, #2]
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007528:	e0bb      	b.n	80076a2 <PCU_Tasks+0x582>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007530:	d960      	bls.n	80075f4 <PCU_Tasks+0x4d4>
 8007532:	7ffb      	ldrb	r3, [r7, #31]
 8007534:	4a27      	ldr	r2, [pc, #156]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007536:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	4413      	add	r3, r2
 8007540:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f083 0301 	eor.w	r3, r3, #1
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d051      	beq.n	80075f4 <PCU_Tasks+0x4d4>
        // Send State
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007550:	4b21      	ldr	r3, [pc, #132]	@ (80075d8 <PCU_Tasks+0x4b8>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d015      	beq.n	8007588 <PCU_Tasks+0x468>
 800755c:	4b1f      	ldr	r3, [pc, #124]	@ (80075dc <PCU_Tasks+0x4bc>)
 800755e:	7d1b      	ldrb	r3, [r3, #20]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d911      	bls.n	8007588 <PCU_Tasks+0x468>
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
                  module[index].moduleId, index); 
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	4a1b      	ldr	r2, [pc, #108]	@ (80075d4 <PCU_Tasks+0x4b4>)
 8007568:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	4413      	add	r3, r2
 8007572:	3308      	adds	r3, #8
 8007574:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
 8007576:	461a      	mov	r2, r3
 8007578:	7ffb      	ldrb	r3, [r7, #31]
 800757a:	491d      	ldr	r1, [pc, #116]	@ (80075f0 <PCU_Tasks+0x4d0>)
 800757c:	4819      	ldr	r0, [pc, #100]	@ (80075e4 <PCU_Tasks+0x4c4>)
 800757e:	f00d f8b3 	bl	80146e8 <siprintf>
          serialOut(tempBuffer);
 8007582:	4818      	ldr	r0, [pc, #96]	@ (80075e4 <PCU_Tasks+0x4c4>)
 8007584:	f7fe f83c 	bl	8005600 <serialOut>
        }
        MCU_RequestModuleStatus(module[index].moduleId);
 8007588:	7ffb      	ldrb	r3, [r7, #31]
 800758a:	4a12      	ldr	r2, [pc, #72]	@ (80075d4 <PCU_Tasks+0x4b4>)
 800758c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	4413      	add	r3, r2
 8007596:	3308      	adds	r3, #8
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f002 fb52 	bl	8009c44 <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 80075a0:	7ffb      	ldrb	r3, [r7, #31]
 80075a2:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80075a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d075      	beq.n	80076a4 <PCU_Tasks+0x584>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 80075b8:	7ffb      	ldrb	r3, [r7, #31]
 80075ba:	4a06      	ldr	r2, [pc, #24]	@ (80075d4 <PCU_Tasks+0x4b4>)
 80075bc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	4413      	add	r3, r2
 80075c6:	3308      	adds	r3, #8
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 ffde 	bl	800958c <MCU_RequestHardware>
        if(module[index].hardwarePending)
 80075d0:	e068      	b.n	80076a4 <PCU_Tasks+0x584>
 80075d2:	bf00      	nop
 80075d4:	20000dec 	.word	0x20000dec
 80075d8:	2000000c 	.word	0x2000000c
 80075dc:	2000a66c 	.word	0x2000a66c
 80075e0:	08018754 	.word	0x08018754
 80075e4:	20000b5c 	.word	0x20000b5c
 80075e8:	0801878c 	.word	0x0801878c
 80075ec:	080187d8 	.word	0x080187d8
 80075f0:	08018810 	.word	0x08018810
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 80075f4:	7ffb      	ldrb	r3, [r7, #31]
 80075f6:	4a9d      	ldr	r2, [pc, #628]	@ (800786c <PCU_Tasks+0x74c>)
 80075f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007606:	789b      	ldrb	r3, [r3, #2]
 8007608:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	d10c      	bne.n	800762c <PCU_Tasks+0x50c>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8007612:	7ffb      	ldrb	r3, [r7, #31]
 8007614:	4a95      	ldr	r2, [pc, #596]	@ (800786c <PCU_Tasks+0x74c>)
 8007616:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007624:	7893      	ldrb	r3, [r2, #2]
 8007626:	f36f 0300 	bfc	r3, #0, #1
 800762a:	7093      	strb	r3, [r2, #2]
        }
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1 && index == 0){ 
 800762c:	4b90      	ldr	r3, [pc, #576]	@ (8007870 <PCU_Tasks+0x750>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d035      	beq.n	80076a4 <PCU_Tasks+0x584>
 8007638:	4b8e      	ldr	r3, [pc, #568]	@ (8007874 <PCU_Tasks+0x754>)
 800763a:	7d1b      	ldrb	r3, [r3, #20]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d931      	bls.n	80076a4 <PCU_Tasks+0x584>
 8007640:	7ffb      	ldrb	r3, [r7, #31]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d12e      	bne.n	80076a4 <PCU_Tasks+0x584>
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 8007646:	7ffb      	ldrb	r3, [r7, #31]
 8007648:	4a88      	ldr	r2, [pc, #544]	@ (800786c <PCU_Tasks+0x74c>)
 800764a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	3308      	adds	r3, #8
 8007656:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 8007658:	461c      	mov	r4, r3
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 800765a:	7ffb      	ldrb	r3, [r7, #31]
 800765c:	4a83      	ldr	r2, [pc, #524]	@ (800786c <PCU_Tasks+0x74c>)
 800765e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	4413      	add	r3, r2
 8007668:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800766c:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 800766e:	4618      	mov	r0, r3
                  module[index].faultCode.commsError); 
 8007670:	7ffb      	ldrb	r3, [r7, #31]
 8007672:	4a7e      	ldr	r2, [pc, #504]	@ (800786c <PCU_Tasks+0x74c>)
 8007674:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	4413      	add	r3, r2
 800767e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007682:	789b      	ldrb	r3, [r3, #2]
 8007684:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007688:	b2db      	uxtb	r3, r3
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	9000      	str	r0, [sp, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4622      	mov	r2, r4
 8007692:	4979      	ldr	r1, [pc, #484]	@ (8007878 <PCU_Tasks+0x758>)
 8007694:	4879      	ldr	r0, [pc, #484]	@ (800787c <PCU_Tasks+0x75c>)
 8007696:	f00d f827 	bl	80146e8 <siprintf>
          serialOut(tempBuffer);
 800769a:	4878      	ldr	r0, [pc, #480]	@ (800787c <PCU_Tasks+0x75c>)
 800769c:	f7fd ffb0 	bl	8005600 <serialOut>
 80076a0:	e000      	b.n	80076a4 <PCU_Tasks+0x584>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 80076a2:	bf00      	nop
    for (index =0;index < pack.moduleCount;index++){
 80076a4:	7ffb      	ldrb	r3, [r7, #31]
 80076a6:	3301      	adds	r3, #1
 80076a8:	77fb      	strb	r3, [r7, #31]
 80076aa:	4b72      	ldr	r3, [pc, #456]	@ (8007874 <PCU_Tasks+0x754>)
 80076ac:	7d1b      	ldrb	r3, [r3, #20]
 80076ae:	7ffa      	ldrb	r2, [r7, #31]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	f4ff ae1f 	bcc.w	80072f4 <PCU_Tasks+0x1d4>
        }
      }
    }
    
    // Round-robin polling of modules
    if(pack.moduleCount > 0){
 80076b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007874 <PCU_Tasks+0x754>)
 80076b8:	7d1b      	ldrb	r3, [r3, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8099 	beq.w	80077f2 <PCU_Tasks+0x6d2>
      uint32_t timeSinceLastPoll = MCU_ElapsedTicks(&lastStatusPoll);
 80076c0:	486f      	ldr	r0, [pc, #444]	@ (8007880 <PCU_Tasks+0x760>)
 80076c2:	f003 fd0f 	bl	800b0e4 <MCU_ElapsedTicks>
 80076c6:	60b8      	str	r0, [r7, #8]
      
      // Poll one module every 100ms to distribute the load
      if(timeSinceLastPoll > 100){
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b64      	cmp	r3, #100	@ 0x64
 80076cc:	f240 8091 	bls.w	80077f2 <PCU_Tasks+0x6d2>
        // Find the next valid module to poll
        uint8_t modulesToCheck = pack.moduleCount;
 80076d0:	4b68      	ldr	r3, [pc, #416]	@ (8007874 <PCU_Tasks+0x754>)
 80076d2:	7d1b      	ldrb	r3, [r3, #20]
 80076d4:	74fb      	strb	r3, [r7, #19]
        while(modulesToCheck > 0){
 80076d6:	e088      	b.n	80077ea <PCU_Tasks+0x6ca>
          if(nextModuleToPoll >= pack.moduleCount){
 80076d8:	4b66      	ldr	r3, [pc, #408]	@ (8007874 <PCU_Tasks+0x754>)
 80076da:	7d1a      	ldrb	r2, [r3, #20]
 80076dc:	4b69      	ldr	r3, [pc, #420]	@ (8007884 <PCU_Tasks+0x764>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d802      	bhi.n	80076ea <PCU_Tasks+0x5ca>
            nextModuleToPoll = 0;
 80076e4:	4b67      	ldr	r3, [pc, #412]	@ (8007884 <PCU_Tasks+0x764>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
          }
          
          // Only poll modules that are not in timeout/error state
          if(module[nextModuleToPoll].statusPending == false && 
 80076ea:	4b66      	ldr	r3, [pc, #408]	@ (8007884 <PCU_Tasks+0x764>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	4619      	mov	r1, r3
 80076f0:	4a5e      	ldr	r2, [pc, #376]	@ (800786c <PCU_Tasks+0x74c>)
 80076f2:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f083 0301 	eor.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d065      	beq.n	80077d8 <PCU_Tasks+0x6b8>
             module[nextModuleToPoll].faultCode.commsError == false){
 800770c:	4b5d      	ldr	r3, [pc, #372]	@ (8007884 <PCU_Tasks+0x764>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	4a56      	ldr	r2, [pc, #344]	@ (800786c <PCU_Tasks+0x74c>)
 8007714:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	4413      	add	r3, r2
 800771e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007722:	789b      	ldrb	r3, [r3, #2]
 8007724:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007728:	b2db      	uxtb	r3, r3
          if(module[nextModuleToPoll].statusPending == false && 
 800772a:	2b00      	cmp	r3, #0
 800772c:	d154      	bne.n	80077d8 <PCU_Tasks+0x6b8>
            if(((debugLevel & DBG_MCU) == DBG_MCU)){ 
 800772e:	4b50      	ldr	r3, [pc, #320]	@ (8007870 <PCU_Tasks+0x750>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <PCU_Tasks+0x644>
              sprintf(tempBuffer,"MCU DEBUG - Round-robin polling module ID=%02x (index=%d)", 
                      module[nextModuleToPoll].moduleId, nextModuleToPoll); 
 800773a:	4b52      	ldr	r3, [pc, #328]	@ (8007884 <PCU_Tasks+0x764>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	4a4a      	ldr	r2, [pc, #296]	@ (800786c <PCU_Tasks+0x74c>)
 8007742:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007746:	fb01 f303 	mul.w	r3, r1, r3
 800774a:	4413      	add	r3, r2
 800774c:	3308      	adds	r3, #8
 800774e:	781b      	ldrb	r3, [r3, #0]
              sprintf(tempBuffer,"MCU DEBUG - Round-robin polling module ID=%02x (index=%d)", 
 8007750:	461a      	mov	r2, r3
 8007752:	4b4c      	ldr	r3, [pc, #304]	@ (8007884 <PCU_Tasks+0x764>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	494c      	ldr	r1, [pc, #304]	@ (8007888 <PCU_Tasks+0x768>)
 8007758:	4848      	ldr	r0, [pc, #288]	@ (800787c <PCU_Tasks+0x75c>)
 800775a:	f00c ffc5 	bl	80146e8 <siprintf>
              serialOut(tempBuffer);
 800775e:	4847      	ldr	r0, [pc, #284]	@ (800787c <PCU_Tasks+0x75c>)
 8007760:	f7fd ff4e 	bl	8005600 <serialOut>
            }
            MCU_RequestModuleStatus(module[nextModuleToPoll].moduleId);
 8007764:	4b47      	ldr	r3, [pc, #284]	@ (8007884 <PCU_Tasks+0x764>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	4a40      	ldr	r2, [pc, #256]	@ (800786c <PCU_Tasks+0x74c>)
 800776c:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	3308      	adds	r3, #8
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f002 fa62 	bl	8009c44 <MCU_RequestModuleStatus>
            
            // Have we received the hardware info?
            if(module[nextModuleToPoll].hardwarePending){
 8007780:	4b40      	ldr	r3, [pc, #256]	@ (8007884 <PCU_Tasks+0x764>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	4a39      	ldr	r2, [pc, #228]	@ (800786c <PCU_Tasks+0x74c>)
 8007788:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <PCU_Tasks+0x698>
              MCU_RequestHardware(module[nextModuleToPoll].moduleId);
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <PCU_Tasks+0x764>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	4619      	mov	r1, r3
 80077a2:	4a32      	ldr	r2, [pc, #200]	@ (800786c <PCU_Tasks+0x74c>)
 80077a4:	f240 43c4 	movw	r3, #1220	@ 0x4c4
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	3308      	adds	r3, #8
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 feea 	bl	800958c <MCU_RequestHardware>
            }
            
            // Move to next module for next poll
            nextModuleToPoll++;
 80077b8:	4b32      	ldr	r3, [pc, #200]	@ (8007884 <PCU_Tasks+0x764>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	4b30      	ldr	r3, [pc, #192]	@ (8007884 <PCU_Tasks+0x764>)
 80077c2:	701a      	strb	r2, [r3, #0]
            
            // Update last poll time
            lastStatusPoll.ticks = htim1.Instance->CNT;
 80077c4:	4b31      	ldr	r3, [pc, #196]	@ (800788c <PCU_Tasks+0x76c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007880 <PCU_Tasks+0x760>)
 80077cc:	6013      	str	r3, [r2, #0]
            lastStatusPoll.overflows = etTimerOverflows;
 80077ce:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <PCU_Tasks+0x770>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007880 <PCU_Tasks+0x760>)
 80077d4:	6053      	str	r3, [r2, #4]
            break;
 80077d6:	e00c      	b.n	80077f2 <PCU_Tasks+0x6d2>
          }
          
          nextModuleToPoll++;
 80077d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007884 <PCU_Tasks+0x764>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <PCU_Tasks+0x764>)
 80077e2:	701a      	strb	r2, [r3, #0]
          modulesToCheck--;
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	74fb      	strb	r3, [r7, #19]
        while(modulesToCheck > 0){
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f47f af73 	bne.w	80076d8 <PCU_Tasks+0x5b8>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 80077f2:	4b20      	ldr	r3, [pc, #128]	@ (8007874 <PCU_Tasks+0x754>)
 80077f4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 812a 	bne.w	8007a52 <PCU_Tasks+0x932>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 80077fe:	2300      	movs	r3, #0
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e10d      	b.n	8007a20 <PCU_Tasks+0x900>
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 8007804:	7ffb      	ldrb	r3, [r7, #31]
 8007806:	4a19      	ldr	r2, [pc, #100]	@ (800786c <PCU_Tasks+0x74c>)
 8007808:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007816:	789b      	ldrb	r3, [r3, #2]
 8007818:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	d138      	bne.n	8007894 <PCU_Tasks+0x774>
        if (module[index].currentState != moduleOff){
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	4a11      	ldr	r2, [pc, #68]	@ (800786c <PCU_Tasks+0x74c>)
 8007826:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	4413      	add	r3, r2
 8007830:	3327      	adds	r3, #39	@ 0x27
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80f0 	beq.w	8007a1a <PCU_Tasks+0x8fa>
          // Turn off the module
          module[index].nextState = moduleOff;
 800783a:	7ffb      	ldrb	r3, [r7, #31]
 800783c:	4a0b      	ldr	r2, [pc, #44]	@ (800786c <PCU_Tasks+0x74c>)
 800783e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	4413      	add	r3, r2
 8007848:	3328      	adds	r3, #40	@ 0x28
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 800784e:	7ffb      	ldrb	r3, [r7, #31]
 8007850:	4a06      	ldr	r2, [pc, #24]	@ (800786c <PCU_Tasks+0x74c>)
 8007852:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	4413      	add	r3, r2
 800785c:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007860:	7893      	ldrb	r3, [r2, #2]
 8007862:	f36f 0382 	bfc	r3, #2, #1
 8007866:	7093      	strb	r3, [r2, #2]
 8007868:	e0d7      	b.n	8007a1a <PCU_Tasks+0x8fa>
 800786a:	bf00      	nop
 800786c:	20000dec 	.word	0x20000dec
 8007870:	2000000c 	.word	0x2000000c
 8007874:	2000a66c 	.word	0x2000a66c
 8007878:	08018850 	.word	0x08018850
 800787c:	20000b5c 	.word	0x20000b5c
 8007880:	2000a6c0 	.word	0x2000a6c0
 8007884:	2000a6c8 	.word	0x2000a6c8
 8007888:	08018890 	.word	0x08018890
 800788c:	200005d0 	.word	0x200005d0
 8007890:	20000d20 	.word	0x20000d20
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007894:	7ffb      	ldrb	r3, [r7, #31]
 8007896:	4aa3      	ldr	r2, [pc, #652]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007898:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078a6:	789b      	ldrb	r3, [r3, #2]
 80078a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 80b3 	bne.w	8007a1a <PCU_Tasks+0x8fa>
 80078b4:	7ffb      	ldrb	r3, [r7, #31]
 80078b6:	4a9b      	ldr	r2, [pc, #620]	@ (8007b24 <PCU_Tasks+0xa04>)
 80078b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 80a3 	bne.w	8007a1a <PCU_Tasks+0x8fa>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 80078d4:	7ffb      	ldrb	r3, [r7, #31]
 80078d6:	4a93      	ldr	r2, [pc, #588]	@ (8007b24 <PCU_Tasks+0xa04>)
 80078d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	4413      	add	r3, r2
 80078e2:	332a      	adds	r3, #42	@ 0x2a
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d13a      	bne.n	8007960 <PCU_Tasks+0x840>
 80078ea:	7ffb      	ldrb	r3, [r7, #31]
 80078ec:	4a8d      	ldr	r2, [pc, #564]	@ (8007b24 <PCU_Tasks+0xa04>)
 80078ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	3329      	adds	r3, #41	@ 0x29
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	7ffb      	ldrb	r3, [r7, #31]
 80078fe:	4989      	ldr	r1, [pc, #548]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007900:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007904:	fb00 f303 	mul.w	r3, r0, r3
 8007908:	440b      	add	r3, r1
 800790a:	3328      	adds	r3, #40	@ 0x28
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d126      	bne.n	8007960 <PCU_Tasks+0x840>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007912:	7ffb      	ldrb	r3, [r7, #31]
 8007914:	4a83      	ldr	r2, [pc, #524]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007916:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
 8007920:	3308      	adds	r3, #8
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f003 fb65 	bl	800aff4 <MCU_TicksSinceLastStateTx>
 800792a:	4603      	mov	r3, r0
 800792c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007930:	d973      	bls.n	8007a1a <PCU_Tasks+0x8fa>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007932:	7ffb      	ldrb	r3, [r7, #31]
 8007934:	4a7b      	ldr	r2, [pc, #492]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007936:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	3308      	adds	r3, #8
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	7ffb      	ldrb	r3, [r7, #31]
 8007946:	4977      	ldr	r1, [pc, #476]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007948:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800794c:	fb00 f303 	mul.w	r3, r0, r3
 8007950:	440b      	add	r3, r1
 8007952:	3328      	adds	r3, #40	@ 0x28
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f003 f865 	bl	800aa28 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 800795e:	e05c      	b.n	8007a1a <PCU_Tasks+0x8fa>
          }
        }else {
          if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007960:	4b71      	ldr	r3, [pc, #452]	@ (8007b28 <PCU_Tasks+0xa08>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d040      	beq.n	80079ee <PCU_Tasks+0x8ce>
 800796c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b2c <PCU_Tasks+0xa0c>)
 800796e:	7d1b      	ldrb	r3, [r3, #20]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d93c      	bls.n	80079ee <PCU_Tasks+0x8ce>
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007974:	7ffb      	ldrb	r3, [r7, #31]
 8007976:	4a6b      	ldr	r2, [pc, #428]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007978:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3308      	adds	r3, #8
 8007984:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007986:	461d      	mov	r5, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007988:	7ffb      	ldrb	r3, [r7, #31]
 800798a:	4a66      	ldr	r2, [pc, #408]	@ (8007b24 <PCU_Tasks+0xa04>)
 800798c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	3327      	adds	r3, #39	@ 0x27
 8007998:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 800799a:	461e      	mov	r6, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 800799c:	7ffb      	ldrb	r3, [r7, #31]
 800799e:	4a61      	ldr	r2, [pc, #388]	@ (8007b24 <PCU_Tasks+0xa04>)
 80079a0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	4413      	add	r3, r2
 80079aa:	3328      	adds	r3, #40	@ 0x28
 80079ac:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 80079ae:	4618      	mov	r0, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 80079b0:	7ffb      	ldrb	r3, [r7, #31]
 80079b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007b24 <PCU_Tasks+0xa04>)
 80079b4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	4413      	add	r3, r2
 80079be:	3329      	adds	r3, #41	@ 0x29
 80079c0:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 80079c2:	461c      	mov	r4, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 80079c4:	7ffb      	ldrb	r3, [r7, #31]
 80079c6:	4a57      	ldr	r2, [pc, #348]	@ (8007b24 <PCU_Tasks+0xa04>)
 80079c8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	332a      	adds	r3, #42	@ 0x2a
 80079d4:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	9401      	str	r4, [sp, #4]
 80079da:	9000      	str	r0, [sp, #0]
 80079dc:	4633      	mov	r3, r6
 80079de:	462a      	mov	r2, r5
 80079e0:	4953      	ldr	r1, [pc, #332]	@ (8007b30 <PCU_Tasks+0xa10>)
 80079e2:	4854      	ldr	r0, [pc, #336]	@ (8007b34 <PCU_Tasks+0xa14>)
 80079e4:	f00c fe80 	bl	80146e8 <siprintf>
            serialOut(tempBuffer);
 80079e8:	4852      	ldr	r0, [pc, #328]	@ (8007b34 <PCU_Tasks+0xa14>)
 80079ea:	f7fd fe09 	bl	8005600 <serialOut>
          }
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80079ee:	7ffb      	ldrb	r3, [r7, #31]
 80079f0:	4a4c      	ldr	r2, [pc, #304]	@ (8007b24 <PCU_Tasks+0xa04>)
 80079f2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	3308      	adds	r3, #8
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	7ffb      	ldrb	r3, [r7, #31]
 8007a02:	4948      	ldr	r1, [pc, #288]	@ (8007b24 <PCU_Tasks+0xa04>)
 8007a04:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007a08:	fb00 f303 	mul.w	r3, r0, r3
 8007a0c:	440b      	add	r3, r1
 8007a0e:	3328      	adds	r3, #40	@ 0x28
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f003 f807 	bl	800aa28 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	4b42      	ldr	r3, [pc, #264]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a22:	7d1b      	ldrb	r3, [r3, #20]
 8007a24:	7ffa      	ldrb	r2, [r7, #31]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	f4ff aeec 	bcc.w	8007804 <PCU_Tasks+0x6e4>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007a2c:	4b42      	ldr	r3, [pc, #264]	@ (8007b38 <PCU_Tasks+0xa18>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 82d0 	beq.w	8007fd6 <PCU_Tasks+0xeb6>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8007a36:	f005 fcc1 	bl	800d3bc <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8007a3a:	f005 fded 	bl	800d618 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8007a3e:	f005 fe8b 	bl	800d758 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8007a42:	f005 ff1d 	bl	800d880 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8007a46:	f005 ffaf 	bl	800d9a8 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8007a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b38 <PCU_Tasks+0xa18>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8007a50:	e2c1      	b.n	8007fd6 <PCU_Tasks+0xeb6>
  } else if(pack.controlMode == packMode){
 8007a52:	4b36      	ldr	r3, [pc, #216]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a54:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 82bc 	bne.w	8007fd6 <PCU_Tasks+0xeb6>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8007a5e:	4b33      	ldr	r3, [pc, #204]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d005      	beq.n	8007a74 <PCU_Tasks+0x954>
 8007a68:	4b30      	ldr	r3, [pc, #192]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	f040 813c 	bne.w	8007cec <PCU_Tasks+0xbcc>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8007a74:	4b2d      	ldr	r3, [pc, #180]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a76:	7e9b      	ldrb	r3, [r3, #26]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 80a1 	bne.w	8007bc0 <PCU_Tasks+0xaa0>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8007a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b28 <PCU_Tasks+0xa08>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8007a86:	2b88      	cmp	r3, #136	@ 0x88
 8007a88:	d115      	bne.n	8007ab6 <PCU_Tasks+0x996>
 8007a8a:	4b28      	ldr	r3, [pc, #160]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007a8c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007a90:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <PCU_Tasks+0xa1c>)
 8007a92:	fba2 1203 	umull	r1, r2, r2, r3
 8007a96:	0b12      	lsrs	r2, r2, #12
 8007a98:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007a9c:	fb01 f202 	mul.w	r2, r1, r2
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <PCU_Tasks+0x996>
 8007aa8:	4925      	ldr	r1, [pc, #148]	@ (8007b40 <PCU_Tasks+0xa20>)
 8007aaa:	4822      	ldr	r0, [pc, #136]	@ (8007b34 <PCU_Tasks+0xa14>)
 8007aac:	f00c fe1c 	bl	80146e8 <siprintf>
 8007ab0:	4820      	ldr	r0, [pc, #128]	@ (8007b34 <PCU_Tasks+0xa14>)
 8007ab2:	f7fd fda5 	bl	8005600 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8007ab6:	f002 f95d 	bl	8009d74 <MCU_FindMaxVoltageModule>
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d141      	bne.n	8007b48 <PCU_Tasks+0xa28>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8007ac4:	4b18      	ldr	r3, [pc, #96]	@ (8007b28 <PCU_Tasks+0xa08>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	f003 0309 	and.w	r3, r3, #9
 8007acc:	2b09      	cmp	r3, #9
 8007ace:	d115      	bne.n	8007afc <PCU_Tasks+0x9dc>
 8007ad0:	4b16      	ldr	r3, [pc, #88]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007ad2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007ad6:	4a19      	ldr	r2, [pc, #100]	@ (8007b3c <PCU_Tasks+0xa1c>)
 8007ad8:	fba2 1203 	umull	r1, r2, r2, r3
 8007adc:	0b12      	lsrs	r2, r2, #12
 8007ade:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007ae2:	fb01 f202 	mul.w	r2, r1, r2
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <PCU_Tasks+0x9dc>
 8007aee:	4915      	ldr	r1, [pc, #84]	@ (8007b44 <PCU_Tasks+0xa24>)
 8007af0:	4810      	ldr	r0, [pc, #64]	@ (8007b34 <PCU_Tasks+0xa14>)
 8007af2:	f00c fdf9 	bl	80146e8 <siprintf>
 8007af6:	480f      	ldr	r0, [pc, #60]	@ (8007b34 <PCU_Tasks+0xa14>)
 8007af8:	f7fd fd82 	bl	8005600 <serialOut>
          pack.errorCounts.firstModule ++;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007afe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007b02:	3301      	adds	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007b08:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007b0c:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007b0e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007b12:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d952      	bls.n	8007bc0 <PCU_Tasks+0xaa0>
 8007b1a:	4b04      	ldr	r3, [pc, #16]	@ (8007b2c <PCU_Tasks+0xa0c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007b22:	e04d      	b.n	8007bc0 <PCU_Tasks+0xaa0>
 8007b24:	20000dec 	.word	0x20000dec
 8007b28:	2000000c 	.word	0x2000000c
 8007b2c:	2000a66c 	.word	0x2000a66c
 8007b30:	080188cc 	.word	0x080188cc
 8007b34:	20000b5c 	.word	0x20000b5c
 8007b38:	20000d26 	.word	0x20000d26
 8007b3c:	d1b71759 	.word	0xd1b71759
 8007b40:	08018910 	.word	0x08018910
 8007b44:	08018944 	.word	0x08018944
        }else if (moduleId == pack.moduleCount +1 ){
 8007b48:	79fa      	ldrb	r2, [r7, #7]
 8007b4a:	4bb2      	ldr	r3, [pc, #712]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d12f      	bne.n	8007bb4 <PCU_Tasks+0xa94>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8007b54:	4bb0      	ldr	r3, [pc, #704]	@ (8007e18 <PCU_Tasks+0xcf8>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 0309 	and.w	r3, r3, #9
 8007b5c:	2b09      	cmp	r3, #9
 8007b5e:	d115      	bne.n	8007b8c <PCU_Tasks+0xa6c>
 8007b60:	4bac      	ldr	r3, [pc, #688]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007b62:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007b66:	4aad      	ldr	r2, [pc, #692]	@ (8007e1c <PCU_Tasks+0xcfc>)
 8007b68:	fba2 1203 	umull	r1, r2, r2, r3
 8007b6c:	0b12      	lsrs	r2, r2, #12
 8007b6e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007b72:	fb01 f202 	mul.w	r2, r1, r2
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <PCU_Tasks+0xa6c>
 8007b7e:	49a8      	ldr	r1, [pc, #672]	@ (8007e20 <PCU_Tasks+0xd00>)
 8007b80:	48a8      	ldr	r0, [pc, #672]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007b82:	f00c fdb1 	bl	80146e8 <siprintf>
 8007b86:	48a7      	ldr	r0, [pc, #668]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007b88:	f7fd fd3a 	bl	8005600 <serialOut>
          pack.errorCounts.firstModule ++;
 8007b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007b8e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007b92:	3301      	adds	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	4b9f      	ldr	r3, [pc, #636]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007b98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007b9c:	4b9d      	ldr	r3, [pc, #628]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007b9e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007ba2:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d90a      	bls.n	8007bc0 <PCU_Tasks+0xaa0>
 8007baa:	4b9a      	ldr	r3, [pc, #616]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007bb2:	e005      	b.n	8007bc0 <PCU_Tasks+0xaa0>
          pack.powerStatus.firstModuleId = moduleId;
 8007bb4:	4a97      	ldr	r2, [pc, #604]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8007bba:	4b96      	ldr	r3, [pc, #600]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8007bc0:	4b94      	ldr	r3, [pc, #592]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bc2:	7e9b      	ldrb	r3, [r3, #26]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	f040 8091 	bne.w	8007cec <PCU_Tasks+0xbcc>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8007bca:	4b92      	ldr	r3, [pc, #584]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bcc:	7e5b      	ldrb	r3, [r3, #25]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f003 f964 	bl	800ae9c <MCU_ModuleIndexFromId>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	77bb      	strb	r3, [r7, #30]
        if (firstModuleIndex != pack.moduleCount){
 8007bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007bda:	7d1b      	ldrb	r3, [r3, #20]
 8007bdc:	7fba      	ldrb	r2, [r7, #30]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d077      	beq.n	8007cd2 <PCU_Tasks+0xbb2>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8007be2:	7fbb      	ldrb	r3, [r7, #30]
 8007be4:	4a90      	ldr	r2, [pc, #576]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007be6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007bf4:	789b      	ldrb	r3, [r3, #2]
 8007bf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d00e      	beq.n	8007c1e <PCU_Tasks+0xafe>
 8007c00:	7fbb      	ldrb	r3, [r7, #30]
 8007c02:	4a89      	ldr	r2, [pc, #548]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007c04:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007c12:	789b      	ldrb	r3, [r3, #2]
 8007c14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d113      	bne.n	8007c46 <PCU_Tasks+0xb26>
             pack.powerStatus.powerStage = stageSelectModule;
 8007c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007c24:	4b7c      	ldr	r3, [pc, #496]	@ (8007e18 <PCU_Tasks+0xcf8>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 0309 	and.w	r3, r3, #9
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d15d      	bne.n	8007cec <PCU_Tasks+0xbcc>
 8007c30:	4b78      	ldr	r3, [pc, #480]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c32:	7e5b      	ldrb	r3, [r3, #25]
 8007c34:	461a      	mov	r2, r3
 8007c36:	497d      	ldr	r1, [pc, #500]	@ (8007e2c <PCU_Tasks+0xd0c>)
 8007c38:	487a      	ldr	r0, [pc, #488]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007c3a:	f00c fd55 	bl	80146e8 <siprintf>
 8007c3e:	4879      	ldr	r0, [pc, #484]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007c40:	f7fd fcde 	bl	8005600 <serialOut>
 8007c44:	e052      	b.n	8007cec <PCU_Tasks+0xbcc>
          } else if (pack.vcuRequestedState == packOn){
 8007c46:	4b73      	ldr	r3, [pc, #460]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d11d      	bne.n	8007c8c <PCU_Tasks+0xb6c>
            if (module[firstModuleIndex].currentState == moduleOn){
 8007c50:	7fbb      	ldrb	r3, [r7, #30]
 8007c52:	4a75      	ldr	r2, [pc, #468]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007c54:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007c58:	fb01 f303 	mul.w	r3, r1, r3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3327      	adds	r3, #39	@ 0x27
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d107      	bne.n	8007c76 <PCU_Tasks+0xb56>
              pack.state = packOn;
 8007c66:	4b6b      	ldr	r3, [pc, #428]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007c6e:	4b69      	ldr	r3, [pc, #420]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	769a      	strb	r2, [r3, #26]
 8007c74:	e03a      	b.n	8007cec <PCU_Tasks+0xbcc>
                module[firstModuleIndex].nextState = moduleOn;
 8007c76:	7fbb      	ldrb	r3, [r7, #30]
 8007c78:	4a6b      	ldr	r2, [pc, #428]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007c7a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	4413      	add	r3, r2
 8007c84:	3328      	adds	r3, #40	@ 0x28
 8007c86:	2203      	movs	r2, #3
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e02f      	b.n	8007cec <PCU_Tasks+0xbcc>
          } else if (pack.vcuRequestedState == packPrecharge){
 8007c8c:	4b61      	ldr	r3, [pc, #388]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d12a      	bne.n	8007cec <PCU_Tasks+0xbcc>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8007c96:	7fbb      	ldrb	r3, [r7, #30]
 8007c98:	4a63      	ldr	r2, [pc, #396]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007c9a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3327      	adds	r3, #39	@ 0x27
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d107      	bne.n	8007cbc <PCU_Tasks+0xb9c>
              pack.state = packPrecharge;
 8007cac:	4b59      	ldr	r3, [pc, #356]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007cb4:	4b57      	ldr	r3, [pc, #348]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	769a      	strb	r2, [r3, #26]
 8007cba:	e017      	b.n	8007cec <PCU_Tasks+0xbcc>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007cbc:	7fbb      	ldrb	r3, [r7, #30]
 8007cbe:	4a5a      	ldr	r2, [pc, #360]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007cc0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	4413      	add	r3, r2
 8007cca:	3328      	adds	r3, #40	@ 0x28
 8007ccc:	2202      	movs	r2, #2
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	e00c      	b.n	8007cec <PCU_Tasks+0xbcc>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007cd2:	4b51      	ldr	r3, [pc, #324]	@ (8007e18 <PCU_Tasks+0xcf8>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0309 	and.w	r3, r3, #9
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d106      	bne.n	8007cec <PCU_Tasks+0xbcc>
 8007cde:	4954      	ldr	r1, [pc, #336]	@ (8007e30 <PCU_Tasks+0xd10>)
 8007ce0:	4850      	ldr	r0, [pc, #320]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007ce2:	f00c fd01 	bl	80146e8 <siprintf>
 8007ce6:	484f      	ldr	r0, [pc, #316]	@ (8007e24 <PCU_Tasks+0xd04>)
 8007ce8:	f7fd fc8a 	bl	8005600 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007cec:	2300      	movs	r3, #0
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e13e      	b.n	8007f70 <PCU_Tasks+0xe50>
      if(module[index].faultCode.overCurrent == true){
 8007cf2:	7ffb      	ldrb	r3, [r7, #31]
 8007cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007cf6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d04:	789b      	ldrb	r3, [r3, #2]
 8007d06:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d127      	bne.n	8007d60 <PCU_Tasks+0xc40>
        if (pack.vcuRequestedState != packOff){
 8007d10:	4b40      	ldr	r3, [pc, #256]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <PCU_Tasks+0xc10>
          module[index].nextState = moduleStandby;
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	4a42      	ldr	r2, [pc, #264]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007d1e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d22:	fb01 f303 	mul.w	r3, r1, r3
 8007d26:	4413      	add	r3, r2
 8007d28:	3328      	adds	r3, #40	@ 0x28
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e0c0      	b.n	8007eb2 <PCU_Tasks+0xd92>
          module[index].nextState = moduleOff;
 8007d30:	7ffb      	ldrb	r3, [r7, #31]
 8007d32:	4a3d      	ldr	r2, [pc, #244]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007d34:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3328      	adds	r3, #40	@ 0x28
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007d44:	7ffb      	ldrb	r3, [r7, #31]
 8007d46:	4a38      	ldr	r2, [pc, #224]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007d48:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007d56:	7893      	ldrb	r3, [r2, #2]
 8007d58:	f36f 0382 	bfc	r3, #2, #1
 8007d5c:	7093      	strb	r3, [r2, #2]
 8007d5e:	e0a8      	b.n	8007eb2 <PCU_Tasks+0xd92>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007d60:	7ffb      	ldrb	r3, [r7, #31]
 8007d62:	4a31      	ldr	r2, [pc, #196]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007d64:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d72:	789b      	ldrb	r3, [r3, #2]
 8007d74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 8099 	bne.w	8007eb2 <PCU_Tasks+0xd92>
 8007d80:	7ffb      	ldrb	r3, [r7, #31]
 8007d82:	4a29      	ldr	r2, [pc, #164]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007d84:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007d92:	789b      	ldrb	r3, [r3, #2]
 8007d94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 8089 	bne.w	8007eb2 <PCU_Tasks+0xd92>
        switch (pack.vcuRequestedState){
 8007da0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	f200 8082 	bhi.w	8007eb0 <PCU_Tasks+0xd90>
 8007dac:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <PCU_Tasks+0xc94>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007e8b 	.word	0x08007e8b
 8007db8:	08007e65 	.word	0x08007e65
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007dc5 	.word	0x08007dc5
            if(pack.state == packOn){
 8007dc4:	4b13      	ldr	r3, [pc, #76]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d109      	bne.n	8007de2 <PCU_Tasks+0xcc2>
              module[index].nextState = moduleOn;
 8007dce:	7ffb      	ldrb	r3, [r7, #31]
 8007dd0:	4a15      	ldr	r2, [pc, #84]	@ (8007e28 <PCU_Tasks+0xd08>)
 8007dd2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	3328      	adds	r3, #40	@ 0x28
 8007dde:	2203      	movs	r2, #3
 8007de0:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8007de2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007de4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	d804      	bhi.n	8007df6 <PCU_Tasks+0xcd6>
 8007dec:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007df4:	e05d      	b.n	8007eb2 <PCU_Tasks+0xd92>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8007df6:	4b07      	ldr	r3, [pc, #28]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007df8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dfc:	2bbe      	cmp	r3, #190	@ 0xbe
 8007dfe:	d904      	bls.n	8007e0a <PCU_Tasks+0xcea>
 8007e00:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007e08:	e053      	b.n	8007eb2 <PCU_Tasks+0xd92>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 8007e0a:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <PCU_Tasks+0xcf4>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007e12:	e04e      	b.n	8007eb2 <PCU_Tasks+0xd92>
 8007e14:	2000a66c 	.word	0x2000a66c
 8007e18:	2000000c 	.word	0x2000000c
 8007e1c:	d1b71759 	.word	0xd1b71759
 8007e20:	08018968 	.word	0x08018968
 8007e24:	20000b5c 	.word	0x20000b5c
 8007e28:	20000dec 	.word	0x20000dec
 8007e2c:	0801898c 	.word	0x0801898c
 8007e30:	080189cc 	.word	0x080189cc
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8007e34:	4b6a      	ldr	r3, [pc, #424]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d10d      	bne.n	8007e5a <PCU_Tasks+0xd3a>
 8007e3e:	7ffa      	ldrb	r2, [r7, #31]
 8007e40:	7fbb      	ldrb	r3, [r7, #30]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d009      	beq.n	8007e5a <PCU_Tasks+0xd3a>
              module[index].nextState = moduleStandby;
 8007e46:	7ffb      	ldrb	r3, [r7, #31]
 8007e48:	4a66      	ldr	r2, [pc, #408]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007e4a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	3328      	adds	r3, #40	@ 0x28
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 8007e5a:	4b61      	ldr	r3, [pc, #388]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007e62:	e026      	b.n	8007eb2 <PCU_Tasks+0xd92>
            module[index].nextState = moduleStandby;
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
 8007e66:	4a5f      	ldr	r2, [pc, #380]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007e68:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	4413      	add	r3, r2
 8007e72:	3328      	adds	r3, #40	@ 0x28
 8007e74:	2201      	movs	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8007e78:	4b59      	ldr	r3, [pc, #356]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8007e80:	4b57      	ldr	r3, [pc, #348]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007e88:	e013      	b.n	8007eb2 <PCU_Tasks+0xd92>
            module[index].nextState = moduleOff;
 8007e8a:	7ffb      	ldrb	r3, [r7, #31]
 8007e8c:	4a55      	ldr	r2, [pc, #340]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007e8e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	3328      	adds	r3, #40	@ 0x28
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 8007e9e:	4b50      	ldr	r3, [pc, #320]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8007ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8007eae:	e000      	b.n	8007eb2 <PCU_Tasks+0xd92>
            break;
 8007eb0:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
 8007eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007eb6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	332a      	adds	r3, #42	@ 0x2a
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d13a      	bne.n	8007f3e <PCU_Tasks+0xe1e>
 8007ec8:	7ffb      	ldrb	r3, [r7, #31]
 8007eca:	4a46      	ldr	r2, [pc, #280]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007ecc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3329      	adds	r3, #41	@ 0x29
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	7ffb      	ldrb	r3, [r7, #31]
 8007edc:	4941      	ldr	r1, [pc, #260]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007ede:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007ee2:	fb00 f303 	mul.w	r3, r0, r3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3328      	adds	r3, #40	@ 0x28
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d126      	bne.n	8007f3e <PCU_Tasks+0xe1e>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007ef0:	7ffb      	ldrb	r3, [r7, #31]
 8007ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007ef4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	4413      	add	r3, r2
 8007efe:	3308      	adds	r3, #8
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f003 f876 	bl	800aff4 <MCU_TicksSinceLastStateTx>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f0e:	d92c      	bls.n	8007f6a <PCU_Tasks+0xe4a>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
 8007f12:	4a34      	ldr	r2, [pc, #208]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007f14:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3308      	adds	r3, #8
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	7ffb      	ldrb	r3, [r7, #31]
 8007f24:	492f      	ldr	r1, [pc, #188]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007f26:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007f2a:	fb00 f303 	mul.w	r3, r0, r3
 8007f2e:	440b      	add	r3, r1
 8007f30:	3328      	adds	r3, #40	@ 0x28
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f002 fd76 	bl	800aa28 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007f3c:	e015      	b.n	8007f6a <PCU_Tasks+0xe4a>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	4a28      	ldr	r2, [pc, #160]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007f42:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	7ffb      	ldrb	r3, [r7, #31]
 8007f52:	4924      	ldr	r1, [pc, #144]	@ (8007fe4 <PCU_Tasks+0xec4>)
 8007f54:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8007f58:	fb00 f303 	mul.w	r3, r0, r3
 8007f5c:	440b      	add	r3, r1
 8007f5e:	3328      	adds	r3, #40	@ 0x28
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f002 fd5f 	bl	800aa28 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007f72:	7d1b      	ldrb	r3, [r3, #20]
 8007f74:	7ffa      	ldrb	r2, [r7, #31]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	f4ff aebb 	bcc.w	8007cf2 <PCU_Tasks+0xbd2>
    MCU_UpdateStats();
 8007f7c:	f000 f8ec 	bl	8008158 <MCU_UpdateStats>
    if(sendMaxState >0){
 8007f80:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <PCU_Tasks+0xec8>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <PCU_Tasks+0xe74>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8007f88:	4b15      	ldr	r3, [pc, #84]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 fe0c 	bl	800abac <MCU_TransmitMaxState>
    if(sendState > 0){
 8007f94:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <PCU_Tasks+0xecc>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01c      	beq.n	8007fd6 <PCU_Tasks+0xeb6>
      if (pack.rtcValid == false) VCU_RequestTime();
 8007f9c:	4b10      	ldr	r3, [pc, #64]	@ (8007fe0 <PCU_Tasks+0xec0>)
 8007f9e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007fa2:	f083 0301 	eor.w	r3, r3, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <PCU_Tasks+0xe90>
 8007fac:	f005 fd90 	bl	800dad0 <VCU_RequestTime>
      VCU_TransmitBmsState();
 8007fb0:	f004 fb66 	bl	800c680 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8007fb4:	f004 fc4c 	bl	800c850 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007fb8:	f004 fd2e 	bl	800ca18 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007fbc:	f004 fe70 	bl	800cca0 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 8007fc0:	f004 ff9a 	bl	800cef8 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8007fc4:	f005 f8b8 	bl	800d138 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007fc8:	f005 f924 	bl	800d214 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007fcc:	f005 f990 	bl	800d2f0 <VCU_TransmitBmsData10>
      sendState=0;
 8007fd0:	4b06      	ldr	r3, [pc, #24]	@ (8007fec <PCU_Tasks+0xecc>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	3724      	adds	r7, #36	@ 0x24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000a66c 	.word	0x2000a66c
 8007fe4:	20000dec 	.word	0x20000dec
 8007fe8:	20000d25 	.word	0x20000d25
 8007fec:	20000d26 	.word	0x20000d26

08007ff0 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7f8 fff3 	bl	8000fe8 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa fca6 	bl	8002956 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	21ff      	movs	r1, #255	@ 0xff
 800800e:	4618      	mov	r0, r3
 8008010:	f7fa fcd5 	bl	80029be <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8008014:	484a      	ldr	r0, [pc, #296]	@ (8008140 <DRV_CANFDSPI_Init+0x150>)
 8008016:	f7f9 feb7 	bl	8001d88 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 800801a:	4a49      	ldr	r2, [pc, #292]	@ (8008140 <DRV_CANFDSPI_Init+0x150>)
 800801c:	7813      	ldrb	r3, [r2, #0]
 800801e:	f043 0320 	orr.w	r3, r3, #32
 8008022:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8008024:	4a46      	ldr	r2, [pc, #280]	@ (8008140 <DRV_CANFDSPI_Init+0x150>)
 8008026:	7853      	ldrb	r3, [r2, #1]
 8008028:	f36f 1386 	bfc	r3, #6, #1
 800802c:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	4943      	ldr	r1, [pc, #268]	@ (8008140 <DRV_CANFDSPI_Init+0x150>)
 8008032:	4618      	mov	r0, r3
 8008034:	f7f9 fe1a 	bl	8001c6c <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8008038:	4842      	ldr	r0, [pc, #264]	@ (8008144 <DRV_CANFDSPI_Init+0x154>)
 800803a:	f7f9 ffb5 	bl	8001fa8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 800803e:	4a41      	ldr	r2, [pc, #260]	@ (8008144 <DRV_CANFDSPI_Init+0x154>)
 8008040:	7853      	ldrb	r3, [r2, #1]
 8008042:	2107      	movs	r1, #7
 8008044:	f361 0304 	bfi	r3, r1, #0, #5
 8008048:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 800804a:	4a3e      	ldr	r2, [pc, #248]	@ (8008144 <DRV_CANFDSPI_Init+0x154>)
 800804c:	7853      	ldrb	r3, [r2, #1]
 800804e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8008052:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8008054:	4a3b      	ldr	r2, [pc, #236]	@ (8008144 <DRV_CANFDSPI_Init+0x154>)
 8008056:	7813      	ldrb	r3, [r2, #0]
 8008058:	2101      	movs	r1, #1
 800805a:	f361 0345 	bfi	r3, r1, #1, #5
 800805e:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	4a38      	ldr	r2, [pc, #224]	@ (8008144 <DRV_CANFDSPI_Init+0x154>)
 8008064:	2102      	movs	r1, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f7f9 ff46 	bl	8001ef8 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 800806c:	4836      	ldr	r0, [pc, #216]	@ (8008148 <DRV_CANFDSPI_Init+0x158>)
 800806e:	f7fa f9f3 	bl	8002458 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 8008072:	4a35      	ldr	r2, [pc, #212]	@ (8008148 <DRV_CANFDSPI_Init+0x158>)
 8008074:	7813      	ldrb	r3, [r2, #0]
 8008076:	210f      	movs	r1, #15
 8008078:	f361 0345 	bfi	r3, r1, #1, #5
 800807c:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 800807e:	4a32      	ldr	r2, [pc, #200]	@ (8008148 <DRV_CANFDSPI_Init+0x158>)
 8008080:	8813      	ldrh	r3, [r2, #0]
 8008082:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8008086:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	4a2f      	ldr	r2, [pc, #188]	@ (8008148 <DRV_CANFDSPI_Init+0x158>)
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f7fa f996 	bl	80023c0 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8008094:	4b2d      	ldr	r3, [pc, #180]	@ (800814c <DRV_CANFDSPI_Init+0x15c>)
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 800809a:	4a2c      	ldr	r2, [pc, #176]	@ (800814c <DRV_CANFDSPI_Init+0x15c>)
 800809c:	8813      	ldrh	r3, [r2, #0]
 800809e:	f36f 030a 	bfc	r3, #0, #11
 80080a2:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 80080a4:	4a29      	ldr	r2, [pc, #164]	@ (800814c <DRV_CANFDSPI_Init+0x15c>)
 80080a6:	78d3      	ldrb	r3, [r2, #3]
 80080a8:	f36f 1386 	bfc	r3, #6, #1
 80080ac:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 80080ae:	4a27      	ldr	r2, [pc, #156]	@ (800814c <DRV_CANFDSPI_Init+0x15c>)
 80080b0:	6813      	ldr	r3, [r2, #0]
 80080b2:	f36f 23dc 	bfc	r3, #11, #18
 80080b6:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	4a24      	ldr	r2, [pc, #144]	@ (800814c <DRV_CANFDSPI_Init+0x15c>)
 80080bc:	2100      	movs	r1, #0
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fa f900 	bl	80022c4 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 80080c4:	4b22      	ldr	r3, [pc, #136]	@ (8008150 <DRV_CANFDSPI_Init+0x160>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 80080ca:	4a21      	ldr	r2, [pc, #132]	@ (8008150 <DRV_CANFDSPI_Init+0x160>)
 80080cc:	8813      	ldrh	r3, [r2, #0]
 80080ce:	f36f 030a 	bfc	r3, #0, #11
 80080d2:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 80080d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008150 <DRV_CANFDSPI_Init+0x160>)
 80080d6:	78d3      	ldrb	r3, [r2, #3]
 80080d8:	f36f 1386 	bfc	r3, #6, #1
 80080dc:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 80080de:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <DRV_CANFDSPI_Init+0x160>)
 80080e0:	6813      	ldr	r3, [r2, #0]
 80080e2:	f36f 23dc 	bfc	r3, #11, #18
 80080e6:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	4a19      	ldr	r2, [pc, #100]	@ (8008150 <DRV_CANFDSPI_Init+0x160>)
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fa f90a 	bl	8002308 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 80080f4:	79f8      	ldrb	r0, [r7, #7]
 80080f6:	2301      	movs	r3, #1
 80080f8:	2201      	movs	r2, #1
 80080fa:	2100      	movs	r1, #0
 80080fc:	f7fa f928 	bl	8002350 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8008100:	79f8      	ldrb	r0, [r7, #7]
 8008102:	2300      	movs	r3, #0
 8008104:	2202      	movs	r2, #2
 8008106:	2101      	movs	r1, #1
 8008108:	f7fa fc99 	bl	8002a3e <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f7fb fbb2 	bl	800387c <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2201      	movs	r2, #1
 800811c:	2101      	movs	r1, #1
 800811e:	4618      	mov	r0, r3
 8008120:	f7fa fb99 	bl	8002856 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2103      	movs	r1, #3
 8008128:	4618      	mov	r0, r3
 800812a:	f7fa fae8 	bl	80026fe <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f7f9 fea4 	bl	8001e80 <DRV_CANFDSPI_OperationModeSelect>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000d34 	.word	0x20000d34
 8008144:	20000d38 	.word	0x20000d38
 8008148:	20000d8c 	.word	0x20000d8c
 800814c:	20000d90 	.word	0x20000d90
 8008150:	20000d94 	.word	0x20000d94
 8008154:	00000000 	.word	0x00000000

08008158 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8008158:	b5b0      	push	{r4, r5, r7, lr}
 800815a:	b094      	sub	sp, #80	@ 0x50
 800815c:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8008180:	23ff      	movs	r3, #255	@ 0xff
 8008182:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 8008184:	23ff      	movs	r3, #255	@ 0xff
 8008186:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8008190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008194:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 800819e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081a2:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 80081ce:	2300      	movs	r3, #0
 80081d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80081d4:	e275      	b.n	80086c2 <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 80081d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80081da:	4a85      	ldr	r2, [pc, #532]	@ (80083f0 <MCU_UpdateStats+0x298>)
 80081dc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80081ea:	789b      	ldrb	r3, [r3, #2]
 80081ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8260 	bne.w	80086b8 <MCU_UpdateStats+0x560>
 80081f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80081fc:	4a7c      	ldr	r2, [pc, #496]	@ (80083f0 <MCU_UpdateStats+0x298>)
 80081fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008202:	fb01 f303 	mul.w	r3, r1, r3
 8008206:	4413      	add	r3, r2
 8008208:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	f040 824f 	bne.w	80086b8 <MCU_UpdateStats+0x560>
 800821a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800821e:	4a74      	ldr	r2, [pc, #464]	@ (80083f0 <MCU_UpdateStats+0x298>)
 8008220:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800822e:	789b      	ldrb	r3, [r3, #2]
 8008230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 823e 	bne.w	80086b8 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 800823c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008240:	4a6b      	ldr	r2, [pc, #428]	@ (80083f0 <MCU_UpdateStats+0x298>)
 8008242:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	4413      	add	r3, r2
 800824c:	3327      	adds	r3, #39	@ 0x27
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b03      	cmp	r3, #3
 8008252:	f040 8146 	bne.w	80084e2 <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 8008256:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800825a:	4a65      	ldr	r2, [pc, #404]	@ (80083f0 <MCU_UpdateStats+0x298>)
 800825c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	4413      	add	r3, r2
 8008266:	330e      	adds	r3, #14
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7f8 f942 	bl	80004f4 <__aeabi_i2d>
 8008270:	a359      	add	r3, pc, #356	@ (adr r3, 80083d8 <MCU_UpdateStats+0x280>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 f9a7 	bl	80005c8 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	a357      	add	r3, pc, #348	@ (adr r3, 80083e0 <MCU_UpdateStats+0x288>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f7 ffe6 	bl	8000258 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	f7f8 fc90 	bl	8000bb8 <__aeabi_d2f>
 8008298:	4603      	mov	r3, r0
 800829a:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 800829c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082a0:	4a53      	ldr	r2, [pc, #332]	@ (80083f0 <MCU_UpdateStats+0x298>)
 80082a2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	3310      	adds	r3, #16
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7f8 f91f 	bl	80004f4 <__aeabi_i2d>
 80082b6:	a348      	add	r3, pc, #288	@ (adr r3, 80083d8 <MCU_UpdateStats+0x280>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f8 f984 	bl	80005c8 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4610      	mov	r0, r2
 80082c6:	4619      	mov	r1, r3
 80082c8:	a345      	add	r3, pc, #276	@ (adr r3, 80083e0 <MCU_UpdateStats+0x288>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 ffc3 	bl	8000258 <__aeabi_dsub>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	f7f8 fc6d 	bl	8000bb8 <__aeabi_d2f>
 80082de:	4603      	mov	r3, r0
 80082e0:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 80082e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082e6:	4a42      	ldr	r2, [pc, #264]	@ (80083f0 <MCU_UpdateStats+0x298>)
 80082e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	3314      	adds	r3, #20
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082fa:	4413      	add	r3, r2
 80082fc:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 80082fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008302:	3301      	adds	r3, #1
 8008304:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8008308:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800830c:	4a38      	ldr	r2, [pc, #224]	@ (80083f0 <MCU_UpdateStats+0x298>)
 800830e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	3316      	adds	r3, #22
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f7f8 f8e9 	bl	80004f4 <__aeabi_i2d>
 8008322:	a32d      	add	r3, pc, #180	@ (adr r3, 80083d8 <MCU_UpdateStats+0x280>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 f94e 	bl	80005c8 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4610      	mov	r0, r2
 8008332:	4619      	mov	r1, r3
 8008334:	a32a      	add	r3, pc, #168	@ (adr r3, 80083e0 <MCU_UpdateStats+0x288>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ff8d 	bl	8000258 <__aeabi_dsub>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	f7f8 fc37 	bl	8000bb8 <__aeabi_d2f>
 800834a:	4603      	mov	r3, r0
 800834c:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 800834e:	6938      	ldr	r0, [r7, #16]
 8008350:	f7f8 f8e2 	bl	8000518 <__aeabi_f2d>
 8008354:	a324      	add	r3, pc, #144	@ (adr r3, 80083e8 <MCU_UpdateStats+0x290>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ff7d 	bl	8000258 <__aeabi_dsub>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4614      	mov	r4, r2
 8008364:	461d      	mov	r5, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7f8 f8d6 	bl	8000518 <__aeabi_f2d>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4620      	mov	r0, r4
 8008372:	4629      	mov	r1, r5
 8008374:	f7f8 fbb8 	bl	8000ae8 <__aeabi_dcmpgt>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d040      	beq.n	8008400 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 800837e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008382:	4a1b      	ldr	r2, [pc, #108]	@ (80083f0 <MCU_UpdateStats+0x298>)
 8008384:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	4413      	add	r3, r2
 800838e:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008392:	7893      	ldrb	r3, [r2, #2]
 8008394:	f043 0304 	orr.w	r3, r3, #4
 8008398:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 800839a:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <MCU_UpdateStats+0x29c>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0309 	and.w	r3, r3, #9
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d16d      	bne.n	8008482 <MCU_UpdateStats+0x32a>
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	f7f8 f8b6 	bl	8000518 <__aeabi_f2d>
 80083ac:	4604      	mov	r4, r0
 80083ae:	460d      	mov	r5, r1
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7f8 f8b1 	bl	8000518 <__aeabi_f2d>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	e9cd 2300 	strd	r2, r3, [sp]
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	490d      	ldr	r1, [pc, #52]	@ (80083f8 <MCU_UpdateStats+0x2a0>)
 80083c4:	480d      	ldr	r0, [pc, #52]	@ (80083fc <MCU_UpdateStats+0x2a4>)
 80083c6:	f00c f98f 	bl	80146e8 <siprintf>
 80083ca:	480c      	ldr	r0, [pc, #48]	@ (80083fc <MCU_UpdateStats+0x2a4>)
 80083cc:	f7fd f918 	bl	8005600 <serialOut>
 80083d0:	e057      	b.n	8008482 <MCU_UpdateStats+0x32a>
 80083d2:	bf00      	nop
 80083d4:	f3af 8000 	nop.w
 80083d8:	47ae147b 	.word	0x47ae147b
 80083dc:	3f947ae1 	.word	0x3f947ae1
 80083e0:	47ae147b 	.word	0x47ae147b
 80083e4:	40847ae1 	.word	0x40847ae1
 80083e8:	33333333 	.word	0x33333333
 80083ec:	3fd33333 	.word	0x3fd33333
 80083f0:	20000dec 	.word	0x20000dec
 80083f4:	2000000c 	.word	0x2000000c
 80083f8:	080189f0 	.word	0x080189f0
 80083fc:	20000b5c 	.word	0x20000b5c
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8008400:	6938      	ldr	r0, [r7, #16]
 8008402:	f7f8 f889 	bl	8000518 <__aeabi_f2d>
 8008406:	a3d7      	add	r3, pc, #860	@ (adr r3, 8008764 <MCU_UpdateStats+0x60c>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f7f7 ff26 	bl	800025c <__adddf3>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4614      	mov	r4, r2
 8008416:	461d      	mov	r5, r3
 8008418:	68b8      	ldr	r0, [r7, #8]
 800841a:	f7f8 f87d 	bl	8000518 <__aeabi_f2d>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f8 fb41 	bl	8000aac <__aeabi_dcmplt>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d028      	beq.n	8008482 <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8008430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008434:	4ac4      	ldr	r2, [pc, #784]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008436:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800843a:	fb01 f303 	mul.w	r3, r1, r3
 800843e:	4413      	add	r3, r2
 8008440:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008444:	7893      	ldrb	r3, [r2, #2]
 8008446:	f043 0304 	orr.w	r3, r3, #4
 800844a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 800844c:	4bbf      	ldr	r3, [pc, #764]	@ (800874c <MCU_UpdateStats+0x5f4>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 0309 	and.w	r3, r3, #9
 8008454:	2b09      	cmp	r3, #9
 8008456:	d114      	bne.n	8008482 <MCU_UpdateStats+0x32a>
 8008458:	6938      	ldr	r0, [r7, #16]
 800845a:	f7f8 f85d 	bl	8000518 <__aeabi_f2d>
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	68b8      	ldr	r0, [r7, #8]
 8008464:	f7f8 f858 	bl	8000518 <__aeabi_f2d>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9cd 2300 	strd	r2, r3, [sp]
 8008470:	4622      	mov	r2, r4
 8008472:	462b      	mov	r3, r5
 8008474:	49b6      	ldr	r1, [pc, #728]	@ (8008750 <MCU_UpdateStats+0x5f8>)
 8008476:	48b7      	ldr	r0, [pc, #732]	@ (8008754 <MCU_UpdateStats+0x5fc>)
 8008478:	f00c f936 	bl	80146e8 <siprintf>
 800847c:	48b5      	ldr	r0, [pc, #724]	@ (8008754 <MCU_UpdateStats+0x5fc>)
 800847e:	f7fd f8bf 	bl	8005600 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 8008482:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008486:	4ab0      	ldr	r2, [pc, #704]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008488:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	4413      	add	r3, r2
 8008492:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008496:	789b      	ldrb	r3, [r3, #2]
 8008498:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d107      	bne.n	80084b2 <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 80084a2:	4bad      	ldr	r3, [pc, #692]	@ (8008758 <MCU_UpdateStats+0x600>)
 80084a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d102      	bne.n	80084b2 <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 80084ac:	4baa      	ldr	r3, [pc, #680]	@ (8008758 <MCU_UpdateStats+0x600>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 80084b2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80084b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80084ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084be:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 80084c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80084c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80084ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084ce:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 80084d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80084d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80084da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 80084e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084e6:	4a98      	ldr	r2, [pc, #608]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80084e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	3312      	adds	r3, #18
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 80084fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008502:	4a91      	ldr	r2, [pc, #580]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008504:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008508:	fb01 f303 	mul.w	r3, r1, r3
 800850c:	4413      	add	r3, r2
 800850e:	3322      	adds	r3, #34	@ 0x22
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	4413      	add	r3, r2
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 800851a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800851e:	4a8a      	ldr	r2, [pc, #552]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008520:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008524:	fb01 f303 	mul.w	r3, r1, r3
 8008528:	4413      	add	r3, r2
 800852a:	331c      	adds	r3, #28
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	4413      	add	r3, r2
 8008534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8008536:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800853a:	4a83      	ldr	r2, [pc, #524]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800853c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	332b      	adds	r3, #43	@ 0x2b
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800854e:	4293      	cmp	r3, r2
 8008550:	d90a      	bls.n	8008568 <MCU_UpdateStats+0x410>
 8008552:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008556:	4a7c      	ldr	r2, [pc, #496]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008558:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	4413      	add	r3, r2
 8008562:	332b      	adds	r3, #43	@ 0x2b
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800856c:	4a76      	ldr	r2, [pc, #472]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800856e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	332c      	adds	r3, #44	@ 0x2c
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008580:	4293      	cmp	r3, r2
 8008582:	d90a      	bls.n	800859a <MCU_UpdateStats+0x442>
 8008584:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008588:	4a6f      	ldr	r2, [pc, #444]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800858a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	332c      	adds	r3, #44	@ 0x2c
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 800859a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800859e:	4a6a      	ldr	r2, [pc, #424]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80085a0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	4413      	add	r3, r2
 80085aa:	3320      	adds	r3, #32
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d915      	bls.n	80085e0 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 80085b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085b8:	4a63      	ldr	r2, [pc, #396]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80085ba:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	4413      	add	r3, r2
 80085c4:	3320      	adds	r3, #32
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 80085ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80085d0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	4413      	add	r3, r2
 80085da:	3308      	adds	r3, #8
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 80085e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085e4:	4a58      	ldr	r2, [pc, #352]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80085e6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	331e      	adds	r3, #30
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d215      	bcs.n	8008626 <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 80085fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085fe:	4a52      	ldr	r2, [pc, #328]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008600:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008604:	fb01 f303 	mul.w	r3, r1, r3
 8008608:	4413      	add	r3, r2
 800860a:	331e      	adds	r3, #30
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 8008610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008614:	4a4c      	ldr	r2, [pc, #304]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008616:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	4413      	add	r3, r2
 8008620:	3308      	adds	r3, #8
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 8008626:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800862a:	4a47      	ldr	r2, [pc, #284]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800862c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008630:	fb01 f303 	mul.w	r3, r1, r3
 8008634:	4413      	add	r3, r2
 8008636:	3318      	adds	r3, #24
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800863c:	429a      	cmp	r2, r3
 800863e:	d215      	bcs.n	800866c <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8008640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008644:	4a40      	ldr	r2, [pc, #256]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008646:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	4413      	add	r3, r2
 8008650:	3318      	adds	r3, #24
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 8008656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800865a:	4a3b      	ldr	r2, [pc, #236]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800865c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008660:	fb01 f303 	mul.w	r3, r1, r3
 8008664:	4413      	add	r3, r2
 8008666:	3308      	adds	r3, #8
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 800866c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008670:	4a35      	ldr	r2, [pc, #212]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 8008672:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	4413      	add	r3, r2
 800867c:	331a      	adds	r3, #26
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008682:	429a      	cmp	r2, r3
 8008684:	d915      	bls.n	80086b2 <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 8008686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800868a:	4a2f      	ldr	r2, [pc, #188]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 800868c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	4413      	add	r3, r2
 8008696:	331a      	adds	r3, #26
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 800869c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086a0:	4a29      	ldr	r2, [pc, #164]	@ (8008748 <MCU_UpdateStats+0x5f0>)
 80086a2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3308      	adds	r3, #8
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 80086b2:	7efb      	ldrb	r3, [r7, #27]
 80086b4:	3301      	adds	r3, #1
 80086b6:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 80086b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086bc:	3301      	adds	r3, #1
 80086be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80086c2:	4b25      	ldr	r3, [pc, #148]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086c4:	7d1b      	ldrb	r3, [r3, #20]
 80086c6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80086ca:	429a      	cmp	r2, r3
 80086cc:	f4ff ad83 	bcc.w	80081d6 <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 80086d0:	4a21      	ldr	r2, [pc, #132]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086d2:	7efb      	ldrb	r3, [r7, #27]
 80086d4:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 80086d6:	4b20      	ldr	r3, [pc, #128]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086d8:	7d1a      	ldrb	r2, [r3, #20]
 80086da:	4b1f      	ldr	r3, [pc, #124]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086dc:	7ddb      	ldrb	r3, [r3, #23]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086e4:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 80086e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8087 	beq.w	80087fe <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 80086f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80086f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	4b16      	ldr	r3, [pc, #88]	@ (8008758 <MCU_UpdateStats+0x600>)
 80086fe:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008700:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8008704:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800875c <MCU_UpdateStats+0x604>
 8008708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800870c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008710:	dd32      	ble.n	8008778 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008712:	4b0e      	ldr	r3, [pc, #56]	@ (800874c <MCU_UpdateStats+0x5f4>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 0309 	and.w	r3, r3, #9
 800871a:	2b09      	cmp	r3, #9
 800871c:	d129      	bne.n	8008772 <MCU_UpdateStats+0x61a>
 800871e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008720:	f7f7 fefa 	bl	8000518 <__aeabi_f2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	a105      	add	r1, pc, #20	@ (adr r1, 8008740 <MCU_UpdateStats+0x5e8>)
 800872a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872e:	e9cd 0100 	strd	r0, r1, [sp]
 8008732:	490b      	ldr	r1, [pc, #44]	@ (8008760 <MCU_UpdateStats+0x608>)
 8008734:	4807      	ldr	r0, [pc, #28]	@ (8008754 <MCU_UpdateStats+0x5fc>)
 8008736:	f00b ffd7 	bl	80146e8 <siprintf>
 800873a:	e017      	b.n	800876c <MCU_UpdateStats+0x614>
 800873c:	f3af 8000 	nop.w
 8008740:	00000000 	.word	0x00000000
 8008744:	409a3300 	.word	0x409a3300
 8008748:	20000dec 	.word	0x20000dec
 800874c:	2000000c 	.word	0x2000000c
 8008750:	08018a3c 	.word	0x08018a3c
 8008754:	20000b5c 	.word	0x20000b5c
 8008758:	2000a66c 	.word	0x2000a66c
 800875c:	44d19800 	.word	0x44d19800
 8008760:	08018a8c 	.word	0x08018a8c
 8008764:	33333333 	.word	0x33333333
 8008768:	3fd33333 	.word	0x3fd33333
 800876c:	48b0      	ldr	r0, [pc, #704]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 800876e:	f7fc ff47 	bl	8005600 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008772:	4bb0      	ldr	r3, [pc, #704]	@ (8008a34 <MCU_UpdateStats+0x8dc>)
 8008774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008776:	e01e      	b.n	80087b6 <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8008778:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800877c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8008a38 <MCU_UpdateStats+0x8e0>
 8008780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008788:	d515      	bpl.n	80087b6 <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 800878a:	4bac      	ldr	r3, [pc, #688]	@ (8008a3c <MCU_UpdateStats+0x8e4>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f003 0309 	and.w	r3, r3, #9
 8008792:	2b09      	cmp	r3, #9
 8008794:	d10d      	bne.n	80087b2 <MCU_UpdateStats+0x65a>
 8008796:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008798:	f7f7 febe 	bl	8000518 <__aeabi_f2d>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	49a7      	ldr	r1, [pc, #668]	@ (8008a40 <MCU_UpdateStats+0x8e8>)
 80087a2:	9100      	str	r1, [sp, #0]
 80087a4:	49a7      	ldr	r1, [pc, #668]	@ (8008a44 <MCU_UpdateStats+0x8ec>)
 80087a6:	48a2      	ldr	r0, [pc, #648]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 80087a8:	f00b ff9e 	bl	80146e8 <siprintf>
 80087ac:	48a0      	ldr	r0, [pc, #640]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 80087ae:	f7fc ff27 	bl	8005600 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 80087b2:	4ba5      	ldr	r3, [pc, #660]	@ (8008a48 <MCU_UpdateStats+0x8f0>)
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80087b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80087b8:	f7f7 feae 	bl	8000518 <__aeabi_f2d>
 80087bc:	a398      	add	r3, pc, #608	@ (adr r3, 8008a20 <MCU_UpdateStats+0x8c8>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f8 f82b 	bl	800081c <__aeabi_ddiv>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	4b9e      	ldr	r3, [pc, #632]	@ (8008a4c <MCU_UpdateStats+0x8f4>)
 80087d4:	f7f7 fd42 	bl	800025c <__adddf3>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f7f8 f9ea 	bl	8000bb8 <__aeabi_d2f>
 80087e4:	4603      	mov	r3, r0
 80087e6:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 80087e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80087ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f0:	ee17 3a90 	vmov	r3, s15
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	4b95      	ldr	r3, [pc, #596]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80087fa:	611a      	str	r2, [r3, #16]
 80087fc:	e00e      	b.n	800881c <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 80087fe:	4b94      	ldr	r3, [pc, #592]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 8008800:	2200      	movs	r2, #0
 8008802:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8008804:	4b93      	ldr	r3, [pc, #588]	@ (8008a54 <MCU_UpdateStats+0x8fc>)
 8008806:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008808:	edd7 7a01 	vldr	s15, [r7, #4]
 800880c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008810:	ee17 3a90 	vmov	r3, s15
 8008814:	b29b      	uxth	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	4b8d      	ldr	r3, [pc, #564]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 800881a:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 800881c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008820:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8008a58 <MCU_UpdateStats+0x900>
 8008824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882c:	dd19      	ble.n	8008862 <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 800882e:	4b83      	ldr	r3, [pc, #524]	@ (8008a3c <MCU_UpdateStats+0x8e4>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 0309 	and.w	r3, r3, #9
 8008836:	2b09      	cmp	r3, #9
 8008838:	d110      	bne.n	800885c <MCU_UpdateStats+0x704>
 800883a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800883c:	f7f7 fe6c 	bl	8000518 <__aeabi_f2d>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	a178      	add	r1, pc, #480	@ (adr r1, 8008a28 <MCU_UpdateStats+0x8d0>)
 8008846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884a:	e9cd 0100 	strd	r0, r1, [sp]
 800884e:	4983      	ldr	r1, [pc, #524]	@ (8008a5c <MCU_UpdateStats+0x904>)
 8008850:	4877      	ldr	r0, [pc, #476]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008852:	f00b ff49 	bl	80146e8 <siprintf>
 8008856:	4876      	ldr	r0, [pc, #472]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008858:	f7fc fed2 	bl	8005600 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 800885c:	4b75      	ldr	r3, [pc, #468]	@ (8008a34 <MCU_UpdateStats+0x8dc>)
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008860:	e01e      	b.n	80088a0 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8008862:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008866:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008a38 <MCU_UpdateStats+0x8e0>
 800886a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800886e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008872:	d515      	bpl.n	80088a0 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008874:	4b71      	ldr	r3, [pc, #452]	@ (8008a3c <MCU_UpdateStats+0x8e4>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 0309 	and.w	r3, r3, #9
 800887c:	2b09      	cmp	r3, #9
 800887e:	d10d      	bne.n	800889c <MCU_UpdateStats+0x744>
 8008880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008882:	f7f7 fe49 	bl	8000518 <__aeabi_f2d>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	496d      	ldr	r1, [pc, #436]	@ (8008a40 <MCU_UpdateStats+0x8e8>)
 800888c:	9100      	str	r1, [sp, #0]
 800888e:	4974      	ldr	r1, [pc, #464]	@ (8008a60 <MCU_UpdateStats+0x908>)
 8008890:	4867      	ldr	r0, [pc, #412]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008892:	f00b ff29 	bl	80146e8 <siprintf>
 8008896:	4866      	ldr	r0, [pc, #408]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008898:	f7fc feb2 	bl	8005600 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 800889c:	4b6a      	ldr	r3, [pc, #424]	@ (8008a48 <MCU_UpdateStats+0x8f0>)
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80088a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088a2:	f7f7 fe39 	bl	8000518 <__aeabi_f2d>
 80088a6:	a35e      	add	r3, pc, #376	@ (adr r3, 8008a20 <MCU_UpdateStats+0x8c8>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 ffb6 	bl	800081c <__aeabi_ddiv>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4610      	mov	r0, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	4b63      	ldr	r3, [pc, #396]	@ (8008a4c <MCU_UpdateStats+0x8f4>)
 80088be:	f7f7 fccd 	bl	800025c <__adddf3>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7f8 f955 	bl	8000b78 <__aeabi_d2uiz>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4a5f      	ldr	r2, [pc, #380]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80088d2:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80088d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80088d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8008a58 <MCU_UpdateStats+0x900>
 80088dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e4:	dd19      	ble.n	800891a <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 80088e6:	4b55      	ldr	r3, [pc, #340]	@ (8008a3c <MCU_UpdateStats+0x8e4>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	f003 0309 	and.w	r3, r3, #9
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d110      	bne.n	8008914 <MCU_UpdateStats+0x7bc>
 80088f2:	6a38      	ldr	r0, [r7, #32]
 80088f4:	f7f7 fe10 	bl	8000518 <__aeabi_f2d>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	a14a      	add	r1, pc, #296	@ (adr r1, 8008a28 <MCU_UpdateStats+0x8d0>)
 80088fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008902:	e9cd 0100 	strd	r0, r1, [sp]
 8008906:	4957      	ldr	r1, [pc, #348]	@ (8008a64 <MCU_UpdateStats+0x90c>)
 8008908:	4849      	ldr	r0, [pc, #292]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 800890a:	f00b feed 	bl	80146e8 <siprintf>
 800890e:	4848      	ldr	r0, [pc, #288]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008910:	f7fc fe76 	bl	8005600 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008914:	4b47      	ldr	r3, [pc, #284]	@ (8008a34 <MCU_UpdateStats+0x8dc>)
 8008916:	623b      	str	r3, [r7, #32]
 8008918:	e01e      	b.n	8008958 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 800891a:	edd7 7a08 	vldr	s15, [r7, #32]
 800891e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8008a38 <MCU_UpdateStats+0x8e0>
 8008922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892a:	d515      	bpl.n	8008958 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 800892c:	4b43      	ldr	r3, [pc, #268]	@ (8008a3c <MCU_UpdateStats+0x8e4>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 0309 	and.w	r3, r3, #9
 8008934:	2b09      	cmp	r3, #9
 8008936:	d10d      	bne.n	8008954 <MCU_UpdateStats+0x7fc>
 8008938:	6a38      	ldr	r0, [r7, #32]
 800893a:	f7f7 fded 	bl	8000518 <__aeabi_f2d>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	493f      	ldr	r1, [pc, #252]	@ (8008a40 <MCU_UpdateStats+0x8e8>)
 8008944:	9100      	str	r1, [sp, #0]
 8008946:	4948      	ldr	r1, [pc, #288]	@ (8008a68 <MCU_UpdateStats+0x910>)
 8008948:	4839      	ldr	r0, [pc, #228]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 800894a:	f00b fecd 	bl	80146e8 <siprintf>
 800894e:	4838      	ldr	r0, [pc, #224]	@ (8008a30 <MCU_UpdateStats+0x8d8>)
 8008950:	f7fc fe56 	bl	8005600 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8008954:	4b3c      	ldr	r3, [pc, #240]	@ (8008a48 <MCU_UpdateStats+0x8f0>)
 8008956:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800895a:	f7f7 fddd 	bl	8000518 <__aeabi_f2d>
 800895e:	a330      	add	r3, pc, #192	@ (adr r3, 8008a20 <MCU_UpdateStats+0x8c8>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f7f7 ff5a 	bl	800081c <__aeabi_ddiv>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4610      	mov	r0, r2
 800896e:	4619      	mov	r1, r3
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	4b35      	ldr	r3, [pc, #212]	@ (8008a4c <MCU_UpdateStats+0x8f4>)
 8008976:	f7f7 fc71 	bl	800025c <__adddf3>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4610      	mov	r0, r2
 8008980:	4619      	mov	r1, r3
 8008982:	f7f8 f8f9 	bl	8000b78 <__aeabi_d2uiz>
 8008986:	4603      	mov	r3, r0
 8008988:	4a31      	ldr	r2, [pc, #196]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 800898a:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 800898c:	6a38      	ldr	r0, [r7, #32]
 800898e:	f7f7 fdc3 	bl	8000518 <__aeabi_f2d>
 8008992:	a323      	add	r3, pc, #140	@ (adr r3, 8008a20 <MCU_UpdateStats+0x8c8>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 ff40 	bl	800081c <__aeabi_ddiv>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4610      	mov	r0, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	4b28      	ldr	r3, [pc, #160]	@ (8008a4c <MCU_UpdateStats+0x8f4>)
 80089aa:	f7f7 fc57 	bl	800025c <__adddf3>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	f7f8 f8df 	bl	8000b78 <__aeabi_d2uiz>
 80089ba:	4603      	mov	r3, r0
 80089bc:	4a24      	ldr	r2, [pc, #144]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089be:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 80089c0:	4b23      	ldr	r3, [pc, #140]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089c2:	7ddb      	ldrb	r3, [r3, #23]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <MCU_UpdateStats+0x884>
 80089c8:	4b21      	ldr	r3, [pc, #132]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089ca:	7ddb      	ldrb	r3, [r3, #23]
 80089cc:	461a      	mov	r2, r3
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80089da:	e002      	b.n	80089e2 <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 80089dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089de:	2200      	movs	r2, #0
 80089e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 80089e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089e4:	7ddb      	ldrb	r3, [r3, #23]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <MCU_UpdateStats+0x8a4>
 80089ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80089ec:	2bfe      	cmp	r3, #254	@ 0xfe
 80089ee:	d805      	bhi.n	80089fc <MCU_UpdateStats+0x8a4>
 80089f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	4b16      	ldr	r3, [pc, #88]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089fa:	e003      	b.n	8008a04 <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 80089fc:	4b14      	ldr	r3, [pc, #80]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 8008a06:	7ddb      	ldrb	r3, [r3, #23]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d02f      	beq.n	8008a6c <MCU_UpdateStats+0x914>
 8008a0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008a0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a10:	d82c      	bhi.n	8008a6c <MCU_UpdateStats+0x914>
 8008a12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	4b0e      	ldr	r3, [pc, #56]	@ (8008a50 <MCU_UpdateStats+0x8f8>)
 8008a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a1c:	e02a      	b.n	8008a74 <MCU_UpdateStats+0x91c>
 8008a1e:	bf00      	nop
 8008a20:	9999999a 	.word	0x9999999a
 8008a24:	3fa99999 	.word	0x3fa99999
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	409a3300 	.word	0x409a3300
 8008a30:	20000b5c 	.word	0x20000b5c
 8008a34:	44d19800 	.word	0x44d19800
 8008a38:	c4c80000 	.word	0xc4c80000
 8008a3c:	2000000c 	.word	0x2000000c
 8008a40:	fffff9c0 	.word	0xfffff9c0
 8008a44:	08018ad0 	.word	0x08018ad0
 8008a48:	c4c80000 	.word	0xc4c80000
 8008a4c:	40df4000 	.word	0x40df4000
 8008a50:	2000a66c 	.word	0x2000a66c
 8008a54:	46fa0000 	.word	0x46fa0000
 8008a58:	44d19800 	.word	0x44d19800
 8008a5c:	08018b14 	.word	0x08018b14
 8008a60:	08018b5c 	.word	0x08018b5c
 8008a64:	08018ba4 	.word	0x08018ba4
 8008a68:	08018bf0 	.word	0x08018bf0
  else pack.soh = 0;
 8008a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8008a74:	4b2d      	ldr	r3, [pc, #180]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a76:	7ddb      	ldrb	r3, [r3, #23]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <MCU_UpdateStats+0x938>
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a7e:	7ddb      	ldrb	r3, [r3, #23]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	4b28      	ldr	r3, [pc, #160]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a8c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008a8e:	e002      	b.n	8008a96 <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8008a90:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8008a96:	4a25      	ldr	r2, [pc, #148]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a98:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008a9a:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8008a9c:	4a23      	ldr	r2, [pc, #140]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008a9e:	7e7b      	ldrb	r3, [r7, #25]
 8008aa0:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 8008aa4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ab0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008ab2:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ab6:	7ebb      	ldrb	r3, [r7, #26]
 8008ab8:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8008abc:	e006      	b.n	8008acc <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8008abe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 8008ac4:	4b19      	ldr	r3, [pc, #100]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8008acc:	4b17      	ldr	r3, [pc, #92]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ace:	7ddb      	ldrb	r3, [r3, #23]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <MCU_UpdateStats+0x990>
 8008ad4:	4b15      	ldr	r3, [pc, #84]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ad6:	7ddb      	ldrb	r3, [r3, #23]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	4b12      	ldr	r3, [pc, #72]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008ae4:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008ae6:	e002      	b.n	8008aee <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008ae8:	4b10      	ldr	r3, [pc, #64]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8008aee:	4a0f      	ldr	r2, [pc, #60]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008af0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008af2:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8008af4:	4a0d      	ldr	r2, [pc, #52]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8008afc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d007      	beq.n	8008b16 <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8008b06:	4a09      	ldr	r2, [pc, #36]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008b08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b0a:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8008b0c:	4a07      	ldr	r2, [pc, #28]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008b0e:	7e3b      	ldrb	r3, [r7, #24]
 8008b10:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8008b14:	e006      	b.n	8008b24 <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8008b16:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8008b1c:	4b03      	ldr	r3, [pc, #12]	@ (8008b2c <MCU_UpdateStats+0x9d4>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8008b24:	bf00      	nop
 8008b26:	3748      	adds	r7, #72	@ 0x48
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b2c:	2000a66c 	.word	0x2000a66c

08008b30 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b32:	b08b      	sub	sp, #44	@ 0x2c
 8008b34:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008b36:	4a64      	ldr	r2, [pc, #400]	@ (8008cc8 <MCU_ReceiveMessages+0x198>)
 8008b38:	2101      	movs	r1, #1
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	f7f9 fe52 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008b40:	e0b6      	b.n	8008cb0 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8008b42:	2340      	movs	r3, #64	@ 0x40
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4b61      	ldr	r3, [pc, #388]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b48:	4a61      	ldr	r2, [pc, #388]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	f7f9 fcad 	bl	80024ac <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_COMMS)) == (DBG_MCU + DBG_COMMS) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008b52:	4b60      	ldr	r3, [pc, #384]	@ (8008cd4 <MCU_ReceiveMessages+0x1a4>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 030a 	and.w	r3, r3, #10
 8008b5a:	2b0a      	cmp	r3, #10
 8008b5c:	d133      	bne.n	8008bc6 <MCU_ReceiveMessages+0x96>
 8008b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	469c      	mov	ip, r3
 8008b6a:	4b59      	ldr	r3, [pc, #356]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008b72:	469e      	mov	lr, r3
 8008b74:	4b55      	ldr	r3, [pc, #340]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4b54      	ldr	r3, [pc, #336]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4b52      	ldr	r3, [pc, #328]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b82:	789b      	ldrb	r3, [r3, #2]
 8008b84:	4618      	mov	r0, r3
 8008b86:	4b51      	ldr	r3, [pc, #324]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b8e:	791b      	ldrb	r3, [r3, #4]
 8008b90:	461d      	mov	r5, r3
 8008b92:	4b4e      	ldr	r3, [pc, #312]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b94:	795b      	ldrb	r3, [r3, #5]
 8008b96:	461e      	mov	r6, r3
 8008b98:	4b4c      	ldr	r3, [pc, #304]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008b9a:	799b      	ldrb	r3, [r3, #6]
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008ba0:	79db      	ldrb	r3, [r3, #7]
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	9605      	str	r6, [sp, #20]
 8008baa:	9504      	str	r5, [sp, #16]
 8008bac:	9403      	str	r4, [sp, #12]
 8008bae:	9002      	str	r0, [sp, #8]
 8008bb0:	9101      	str	r1, [sp, #4]
 8008bb2:	9200      	str	r2, [sp, #0]
 8008bb4:	4673      	mov	r3, lr
 8008bb6:	4662      	mov	r2, ip
 8008bb8:	4947      	ldr	r1, [pc, #284]	@ (8008cd8 <MCU_ReceiveMessages+0x1a8>)
 8008bba:	4848      	ldr	r0, [pc, #288]	@ (8008cdc <MCU_ReceiveMessages+0x1ac>)
 8008bbc:	f00b fd94 	bl	80146e8 <siprintf>
 8008bc0:	4846      	ldr	r0, [pc, #280]	@ (8008cdc <MCU_ReceiveMessages+0x1ac>)
 8008bc2:	f7fc fd1d 	bl	8005600 <serialOut>

    switch (rxObj.bF.id.SID) {
 8008bc6:	4b42      	ldr	r3, [pc, #264]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8008bd4:	2b07      	cmp	r3, #7
 8008bd6:	d82b      	bhi.n	8008c30 <MCU_ReceiveMessages+0x100>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <MCU_ReceiveMessages+0xb0>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c01 	.word	0x08008c01
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c13 	.word	0x08008c13
 8008bec:	08008c19 	.word	0x08008c19
 8008bf0:	08008c1f 	.word	0x08008c1f
 8008bf4:	08008c07 	.word	0x08008c07
 8008bf8:	08008c25 	.word	0x08008c25
 8008bfc:	08008c2b 	.word	0x08008c2b
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008c00:	f000 f912 	bl	8008e28 <MCU_RegisterModule>
        break;
 8008c04:	e04f      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8008c06:	f002 f821 	bl	800ac4c <MCU_ProcessCellDetail>
        break;
 8008c0a:	e04c      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8008c0c:	f000 fd58 	bl	80096c0 <MCU_ProcessModuleHardware>
        break;
 8008c10:	e049      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8008c12:	f001 f929 	bl	8009e68 <MCU_ProcessModuleStatus1>
        break;
 8008c16:	e046      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008c18:	f001 fbba 	bl	800a390 <MCU_ProcessModuleStatus2>
        break;
 8008c1c:	e043      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8008c1e:	f001 fd37 	bl	800a690 <MCU_ProcessModuleStatus3>
        break;
 8008c22:	e040      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8008c24:	f000 fc38 	bl	8009498 <MCU_ProcessModuleTime>
        break;
 8008c28:	e03d      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8008c2a:	f001 fe79 	bl	800a920 <MCU_ProcessCellCommStatus1>
        break;
 8008c2e:	e03a      	b.n	8008ca6 <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008c30:	4b28      	ldr	r3, [pc, #160]	@ (8008cd4 <MCU_ReceiveMessages+0x1a4>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 0309 	and.w	r3, r3, #9
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	d133      	bne.n	8008ca4 <MCU_ReceiveMessages+0x174>
 8008c3c:	4b24      	ldr	r3, [pc, #144]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	469c      	mov	ip, r3
 8008c48:	4b21      	ldr	r3, [pc, #132]	@ (8008cd0 <MCU_ReceiveMessages+0x1a0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008c50:	469e      	mov	lr, r3
 8008c52:	4b1e      	ldr	r3, [pc, #120]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	4b1c      	ldr	r3, [pc, #112]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c60:	789b      	ldrb	r3, [r3, #2]
 8008c62:	4618      	mov	r0, r3
 8008c64:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c66:	78db      	ldrb	r3, [r3, #3]
 8008c68:	461c      	mov	r4, r3
 8008c6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c6c:	791b      	ldrb	r3, [r3, #4]
 8008c6e:	461d      	mov	r5, r3
 8008c70:	4b16      	ldr	r3, [pc, #88]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c72:	795b      	ldrb	r3, [r3, #5]
 8008c74:	461e      	mov	r6, r3
 8008c76:	4b15      	ldr	r3, [pc, #84]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	607b      	str	r3, [r7, #4]
 8008c7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ccc <MCU_ReceiveMessages+0x19c>)
 8008c7e:	79db      	ldrb	r3, [r3, #7]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	9306      	str	r3, [sp, #24]
 8008c86:	9605      	str	r6, [sp, #20]
 8008c88:	9504      	str	r5, [sp, #16]
 8008c8a:	9403      	str	r4, [sp, #12]
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	9101      	str	r1, [sp, #4]
 8008c90:	9200      	str	r2, [sp, #0]
 8008c92:	4673      	mov	r3, lr
 8008c94:	4662      	mov	r2, ip
 8008c96:	4912      	ldr	r1, [pc, #72]	@ (8008ce0 <MCU_ReceiveMessages+0x1b0>)
 8008c98:	4810      	ldr	r0, [pc, #64]	@ (8008cdc <MCU_ReceiveMessages+0x1ac>)
 8008c9a:	f00b fd25 	bl	80146e8 <siprintf>
 8008c9e:	480f      	ldr	r0, [pc, #60]	@ (8008cdc <MCU_ReceiveMessages+0x1ac>)
 8008ca0:	f7fc fcae 	bl	8005600 <serialOut>
        break;
 8008ca4:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008ca6:	4a08      	ldr	r2, [pc, #32]	@ (8008cc8 <MCU_ReceiveMessages+0x198>)
 8008ca8:	2101      	movs	r1, #1
 8008caa:	2001      	movs	r0, #1
 8008cac:	f7f9 fd9a 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008cb0:	4b05      	ldr	r3, [pc, #20]	@ (8008cc8 <MCU_ReceiveMessages+0x198>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f af42 	bne.w	8008b42 <MCU_ReceiveMessages+0x12>
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc8:	20000d98 	.word	0x20000d98
 8008ccc:	20000da8 	.word	0x20000da8
 8008cd0:	20000d9c 	.word	0x20000d9c
 8008cd4:	2000000c 	.word	0x2000000c
 8008cd8:	08018c38 	.word	0x08018c38
 8008cdc:	20000b5c 	.word	0x20000b5c
 8008ce0:	08018c9c 	.word	0x08018c9c

08008ce4 <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce6:	b08d      	sub	sp, #52	@ 0x34
 8008ce8:	af08      	add	r7, sp, #32
 8008cea:	4603      	mov	r3, r0
 8008cec:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008cee:	2332      	movs	r3, #50	@ 0x32
 8008cf0:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	4a42      	ldr	r2, [pc, #264]	@ (8008e00 <MCU_TransmitMessageQueue+0x11c>)
 8008cf6:	2102      	movs	r1, #2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7f9 fd40 	bl	800277e <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d11a      	bne.n	8008d3a <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008d04:	bf00      	nop
        Nop();
 8008d06:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008d08:	79f8      	ldrb	r0, [r7, #7]
 8008d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e04 <MCU_TransmitMessageQueue+0x120>)
 8008d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008e08 <MCU_TransmitMessageQueue+0x124>)
 8008d0e:	493f      	ldr	r1, [pc, #252]	@ (8008e0c <MCU_TransmitMessageQueue+0x128>)
 8008d10:	f7f9 fdef 	bl	80028f2 <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008d14:	4b3e      	ldr	r3, [pc, #248]	@ (8008e10 <MCU_TransmitMessageQueue+0x12c>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 0309 	and.w	r3, r3, #9
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d106      	bne.n	8008d2e <MCU_TransmitMessageQueue+0x4a>
 8008d20:	493c      	ldr	r1, [pc, #240]	@ (8008e14 <MCU_TransmitMessageQueue+0x130>)
 8008d22:	483d      	ldr	r0, [pc, #244]	@ (8008e18 <MCU_TransmitMessageQueue+0x134>)
 8008d24:	f00b fce0 	bl	80146e8 <siprintf>
 8008d28:	483b      	ldr	r0, [pc, #236]	@ (8008e18 <MCU_TransmitMessageQueue+0x134>)
 8008d2a:	f7fc fc69 	bl	8005600 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2102      	movs	r1, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f9 fa66 	bl	8002204 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008d38:	e05f      	b.n	8008dfa <MCU_TransmitMessageQueue+0x116>
      }
      attempts--;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008d40:	4b2f      	ldr	r3, [pc, #188]	@ (8008e00 <MCU_TransmitMessageQueue+0x11c>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0d2      	beq.n	8008cf2 <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8008d4c:	4b33      	ldr	r3, [pc, #204]	@ (8008e1c <MCU_TransmitMessageQueue+0x138>)
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fa fdd8 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73bb      	strb	r3, [r7, #14]
    
    // Log TX message if DBG_COMMS is enabled (exclude 0x517 to prevent flooding)
    if((debugLevel & (DBG_MCU + DBG_COMMS)) == (DBG_MCU + DBG_COMMS) && txObj.bF.id.SID != ID_MODULE_MAX_STATE){
 8008d60:	4b2b      	ldr	r3, [pc, #172]	@ (8008e10 <MCU_TransmitMessageQueue+0x12c>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 030a 	and.w	r3, r3, #10
 8008d68:	2b0a      	cmp	r3, #10
 8008d6a:	d13c      	bne.n	8008de6 <MCU_TransmitMessageQueue+0x102>
 8008d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e1c <MCU_TransmitMessageQueue+0x138>)
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f240 5217 	movw	r2, #1303	@ 0x517
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d033      	beq.n	8008de6 <MCU_TransmitMessageQueue+0x102>
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008d7e:	4b27      	ldr	r3, [pc, #156]	@ (8008e1c <MCU_TransmitMessageQueue+0x138>)
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d86:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d88:	469c      	mov	ip, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008d8a:	4b24      	ldr	r3, [pc, #144]	@ (8008e1c <MCU_TransmitMessageQueue+0x138>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d92:	469e      	mov	lr, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008d94:	4b22      	ldr	r3, [pc, #136]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d98:	461a      	mov	r2, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008d9a:	4b21      	ldr	r3, [pc, #132]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008d9c:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008d9e:	4619      	mov	r1, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008da0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008da2:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008da4:	4618      	mov	r0, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008da6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008da8:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008daa:	461c      	mov	r4, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008dac:	4b1c      	ldr	r3, [pc, #112]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008dae:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008db0:	461d      	mov	r5, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008db4:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008db6:	461e      	mov	r6, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008db8:	4b19      	ldr	r3, [pc, #100]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008dba:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008dbc:	603b      	str	r3, [r7, #0]
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8008dbe:	4b18      	ldr	r3, [pc, #96]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008dc0:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	9306      	str	r3, [sp, #24]
 8008dc8:	9605      	str	r6, [sp, #20]
 8008dca:	9504      	str	r5, [sp, #16]
 8008dcc:	9403      	str	r4, [sp, #12]
 8008dce:	9002      	str	r0, [sp, #8]
 8008dd0:	9101      	str	r1, [sp, #4]
 8008dd2:	9200      	str	r2, [sp, #0]
 8008dd4:	4673      	mov	r3, lr
 8008dd6:	4662      	mov	r2, ip
 8008dd8:	4912      	ldr	r1, [pc, #72]	@ (8008e24 <MCU_TransmitMessageQueue+0x140>)
 8008dda:	480f      	ldr	r0, [pc, #60]	@ (8008e18 <MCU_TransmitMessageQueue+0x134>)
 8008ddc:	f00b fc84 	bl	80146e8 <siprintf>
        serialOut(tempBuffer);
 8008de0:	480d      	ldr	r0, [pc, #52]	@ (8008e18 <MCU_TransmitMessageQueue+0x134>)
 8008de2:	f7fc fc0d 	bl	8005600 <serialOut>
    }

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	79f8      	ldrb	r0, [r7, #7]
 8008dea:	2201      	movs	r2, #1
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e20 <MCU_TransmitMessageQueue+0x13c>)
 8008df2:	4a0a      	ldr	r2, [pc, #40]	@ (8008e1c <MCU_TransmitMessageQueue+0x138>)
 8008df4:	2102      	movs	r1, #2
 8008df6:	f7f9 f913 	bl	8002020 <DRV_CANFDSPI_TransmitChannelLoad>
}
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e00:	20000d3c 	.word	0x20000d3c
 8008e04:	20000deb 	.word	0x20000deb
 8008e08:	20000dea 	.word	0x20000dea
 8008e0c:	20000de9 	.word	0x20000de9
 8008e10:	2000000c 	.word	0x2000000c
 8008e14:	08018d08 	.word	0x08018d08
 8008e18:	20000b5c 	.word	0x20000b5c
 8008e1c:	20000d40 	.word	0x20000d40
 8008e20:	20000d4c 	.word	0x20000d4c
 8008e24:	08018d38 	.word	0x08018d38

08008e28 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b08b      	sub	sp, #44	@ 0x2c
 8008e2c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8008e32:	4a12      	ldr	r2, [pc, #72]	@ (8008e7c <MCU_RegisterModule+0x54>)
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e3c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 8008e40:	4b0f      	ldr	r3, [pc, #60]	@ (8008e80 <MCU_RegisterModule+0x58>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d010      	beq.n	8008e6e <MCU_RegisterModule+0x46>
 8008e4c:	89bb      	ldrh	r3, [r7, #12]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	4618      	mov	r0, r3
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	9201      	str	r2, [sp, #4]
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	460a      	mov	r2, r1
 8008e60:	4908      	ldr	r1, [pc, #32]	@ (8008e84 <MCU_RegisterModule+0x5c>)
 8008e62:	4809      	ldr	r0, [pc, #36]	@ (8008e88 <MCU_RegisterModule+0x60>)
 8008e64:	f00b fc40 	bl	80146e8 <siprintf>
 8008e68:	4807      	ldr	r0, [pc, #28]	@ (8008e88 <MCU_RegisterModule+0x60>)
 8008e6a:	f7fc fbc9 	bl	8005600 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8008e6e:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <MCU_RegisterModule+0x64>)
 8008e70:	7d1b      	ldrb	r3, [r3, #20]
 8008e72:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008e74:	2300      	movs	r3, #0
 8008e76:	75bb      	strb	r3, [r7, #22]
 8008e78:	e07a      	b.n	8008f70 <MCU_RegisterModule+0x148>
 8008e7a:	bf00      	nop
 8008e7c:	20000da8 	.word	0x20000da8
 8008e80:	2000000c 	.word	0x2000000c
 8008e84:	08018d9c 	.word	0x08018d9c
 8008e88:	20000b5c 	.word	0x20000b5c
 8008e8c:	2000a66c 	.word	0x2000a66c
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8008e90:	7bba      	ldrb	r2, [r7, #14]
 8008e92:	7dbb      	ldrb	r3, [r7, #22]
 8008e94:	49b3      	ldr	r1, [pc, #716]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008e96:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008e9a:	fb00 f303 	mul.w	r3, r0, r3
 8008e9e:	440b      	add	r3, r1
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d161      	bne.n	8008f6a <MCU_RegisterModule+0x142>
 8008ea6:	7bfa      	ldrb	r2, [r7, #15]
 8008ea8:	7dbb      	ldrb	r3, [r7, #22]
 8008eaa:	49ae      	ldr	r1, [pc, #696]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008eac:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008eb0:	fb00 f303 	mul.w	r3, r0, r3
 8008eb4:	440b      	add	r3, r1
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d155      	bne.n	8008f6a <MCU_RegisterModule+0x142>
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	7dbb      	ldrb	r3, [r7, #22]
 8008ec2:	49a8      	ldr	r1, [pc, #672]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008ec4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008ec8:	fb00 f303 	mul.w	r3, r0, r3
 8008ecc:	440b      	add	r3, r1
 8008ece:	3304      	adds	r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d149      	bne.n	8008f6a <MCU_RegisterModule+0x142>
      moduleIndex = index; // module is already registered, save the index
 8008ed6:	7dbb      	ldrb	r3, [r7, #22]
 8008ed8:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	4aa1      	ldr	r2, [pc, #644]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008ede:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008ee2:	fb01 f303 	mul.w	r3, r1, r3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008eec:	7893      	ldrb	r3, [r2, #2]
 8008eee:	f36f 0300 	bfc	r3, #0, #1
 8008ef2:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8009168 <MCU_RegisterModule+0x340>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008efc:	4999      	ldr	r1, [pc, #612]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008efe:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008f02:	fb00 f303 	mul.w	r3, r0, r3
 8008f06:	440b      	add	r3, r1
 8008f08:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8008f0c:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	4a96      	ldr	r2, [pc, #600]	@ (800916c <MCU_RegisterModule+0x344>)
 8008f12:	6812      	ldr	r2, [r2, #0]
 8008f14:	4993      	ldr	r1, [pc, #588]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008f16:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008f1a:	fb00 f303 	mul.w	r3, r0, r3
 8008f1e:	440b      	add	r3, r1
 8008f20:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8008f24:	601a      	str	r2, [r3, #0]
      module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on re-registration
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	4a8e      	ldr	r2, [pc, #568]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008f2a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 8008f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8009170 <MCU_RegisterModule+0x348>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 0309 	and.w	r3, r3, #9
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d110      	bne.n	8008f6a <MCU_RegisterModule+0x142>
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	4a86      	ldr	r2, [pc, #536]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008f4c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008f50:	fb01 f303 	mul.w	r3, r1, r3
 8008f54:	4413      	add	r3, r2
 8008f56:	3308      	adds	r3, #8
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4985      	ldr	r1, [pc, #532]	@ (8009174 <MCU_RegisterModule+0x34c>)
 8008f5e:	4886      	ldr	r0, [pc, #536]	@ (8009178 <MCU_RegisterModule+0x350>)
 8008f60:	f00b fbc2 	bl	80146e8 <siprintf>
 8008f64:	4884      	ldr	r0, [pc, #528]	@ (8009178 <MCU_RegisterModule+0x350>)
 8008f66:	f7fc fb4b 	bl	8005600 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 8008f6a:	7dbb      	ldrb	r3, [r7, #22]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75bb      	strb	r3, [r7, #22]
 8008f70:	4b82      	ldr	r3, [pc, #520]	@ (800917c <MCU_RegisterModule+0x354>)
 8008f72:	7d1b      	ldrb	r3, [r3, #20]
 8008f74:	7dba      	ldrb	r2, [r7, #22]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d38a      	bcc.n	8008e90 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 8008f7a:	4b80      	ldr	r3, [pc, #512]	@ (800917c <MCU_RegisterModule+0x354>)
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	7dfa      	ldrb	r2, [r7, #23]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d16a      	bne.n	800905a <MCU_RegisterModule+0x232>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	89b8      	ldrh	r0, [r7, #12]
 8008f88:	4a76      	ldr	r2, [pc, #472]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008f8a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	4413      	add	r3, r2
 8008f94:	330a      	adds	r3, #10
 8008f96:	4602      	mov	r2, r0
 8008f98:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	7bf8      	ldrb	r0, [r7, #15]
 8008f9e:	4a71      	ldr	r2, [pc, #452]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008fa0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	3301      	adds	r3, #1
 8008fac:	4602      	mov	r2, r0
 8008fae:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	7bb8      	ldrb	r0, [r7, #14]
 8008fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008fb6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8008fba:	fb01 f303 	mul.w	r3, r1, r3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4966      	ldr	r1, [pc, #408]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008fca:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008fce:	fb00 f303 	mul.w	r3, r0, r3
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008fd8:	4b63      	ldr	r3, [pc, #396]	@ (8009168 <MCU_RegisterModule+0x340>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fe0:	4960      	ldr	r1, [pc, #384]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008fe2:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008fe6:	fb00 f303 	mul.w	r3, r0, r3
 8008fea:	440b      	add	r3, r1
 8008fec:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8008ff0:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800916c <MCU_RegisterModule+0x344>)
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	495a      	ldr	r1, [pc, #360]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8008ffa:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8008ffe:	fb00 f303 	mul.w	r3, r0, r3
 8009002:	440b      	add	r3, r1
 8009004:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8009008:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	4a55      	ldr	r2, [pc, #340]	@ (8009164 <MCU_RegisterModule+0x33c>)
 800900e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	4413      	add	r3, r2
 8009018:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800901c:	2201      	movs	r2, #1
 800901e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Initialize timeout counter for new module
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	4a50      	ldr	r2, [pc, #320]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8009024:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	4413      	add	r3, r2
 800902e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 8009036:	4b51      	ldr	r3, [pc, #324]	@ (800917c <MCU_RegisterModule+0x354>)
 8009038:	7d1b      	ldrb	r3, [r3, #20]
 800903a:	3301      	adds	r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	4b4f      	ldr	r3, [pc, #316]	@ (800917c <MCU_RegisterModule+0x354>)
 8009040:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	4a4d      	ldr	r2, [pc, #308]	@ (800917c <MCU_RegisterModule+0x354>)
 8009046:	7d10      	ldrb	r0, [r2, #20]
 8009048:	4a46      	ldr	r2, [pc, #280]	@ (8009164 <MCU_RegisterModule+0x33c>)
 800904a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	3308      	adds	r3, #8
 8009056:	4602      	mov	r2, r0
 8009058:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	4a41      	ldr	r2, [pc, #260]	@ (8009164 <MCU_RegisterModule+0x33c>)
 800905e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800906c:	2201      	movs	r2, #1
 800906e:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	4a3c      	ldr	r2, [pc, #240]	@ (8009164 <MCU_RegisterModule+0x33c>)
 8009074:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	4413      	add	r3, r2
 800907e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009082:	2201      	movs	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	4a36      	ldr	r2, [pc, #216]	@ (8009164 <MCU_RegisterModule+0x33c>)
 800908a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3308      	adds	r3, #8
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 800909a:	4b38      	ldr	r3, [pc, #224]	@ (800917c <MCU_RegisterModule+0x354>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	4a30      	ldr	r2, [pc, #192]	@ (8009164 <MCU_RegisterModule+0x33c>)
 80090a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090a8:	fb01 f303 	mul.w	r3, r1, r3
 80090ac:	4413      	add	r3, r2
 80090ae:	3301      	adds	r3, #1
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009164 <MCU_RegisterModule+0x33c>)
 80090b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090bc:	fb01 f303 	mul.w	r3, r1, r3
 80090c0:	4413      	add	r3, r2
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	4a26      	ldr	r2, [pc, #152]	@ (8009164 <MCU_RegisterModule+0x33c>)
 80090ca:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80090da:	4b29      	ldr	r3, [pc, #164]	@ (8009180 <MCU_RegisterModule+0x358>)
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80090e0:	4b27      	ldr	r3, [pc, #156]	@ (8009180 <MCU_RegisterModule+0x358>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80090e6:	4b26      	ldr	r3, [pc, #152]	@ (8009180 <MCU_RegisterModule+0x358>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 80090ec:	4b25      	ldr	r3, [pc, #148]	@ (8009184 <MCU_RegisterModule+0x35c>)
 80090ee:	461a      	mov	r2, r3
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090f6:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 80090fa:	4a21      	ldr	r2, [pc, #132]	@ (8009180 <MCU_RegisterModule+0x358>)
 80090fc:	8813      	ldrh	r3, [r2, #0]
 80090fe:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8009102:	f361 030a 	bfi	r3, r1, #0, #11
 8009106:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	4a16      	ldr	r2, [pc, #88]	@ (8009164 <MCU_RegisterModule+0x33c>)
 800910c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	4413      	add	r3, r2
 8009116:	3308      	adds	r3, #8
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009120:	4917      	ldr	r1, [pc, #92]	@ (8009180 <MCU_RegisterModule+0x358>)
 8009122:	680b      	ldr	r3, [r1, #0]
 8009124:	f362 23dc 	bfi	r3, r2, #11, #18
 8009128:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800912a:	4a15      	ldr	r2, [pc, #84]	@ (8009180 <MCU_RegisterModule+0x358>)
 800912c:	7913      	ldrb	r3, [r2, #4]
 800912e:	f36f 1386 	bfc	r3, #6, #1
 8009132:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009134:	4a12      	ldr	r2, [pc, #72]	@ (8009180 <MCU_RegisterModule+0x358>)
 8009136:	7913      	ldrb	r3, [r2, #4]
 8009138:	2108      	movs	r1, #8
 800913a:	f361 0303 	bfi	r3, r1, #0, #4
 800913e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009140:	4a0f      	ldr	r2, [pc, #60]	@ (8009180 <MCU_RegisterModule+0x358>)
 8009142:	7913      	ldrb	r3, [r2, #4]
 8009144:	f36f 13c7 	bfc	r3, #7, #1
 8009148:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800914a:	4a0d      	ldr	r2, [pc, #52]	@ (8009180 <MCU_RegisterModule+0x358>)
 800914c:	7913      	ldrb	r3, [r2, #4]
 800914e:	f043 0310 	orr.w	r3, r3, #16
 8009152:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8009154:	4b06      	ldr	r3, [pc, #24]	@ (8009170 <MCU_RegisterModule+0x348>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d026      	beq.n	80091ae <MCU_RegisterModule+0x386>
 8009160:	e012      	b.n	8009188 <MCU_RegisterModule+0x360>
 8009162:	bf00      	nop
 8009164:	20000dec 	.word	0x20000dec
 8009168:	200005d0 	.word	0x200005d0
 800916c:	20000d20 	.word	0x20000d20
 8009170:	2000000c 	.word	0x2000000c
 8009174:	08018ddc 	.word	0x08018ddc
 8009178:	20000b5c 	.word	0x20000b5c
 800917c:	2000a66c 	.word	0x2000a66c
 8009180:	20000d40 	.word	0x20000d40
 8009184:	20000d4c 	.word	0x20000d4c
 8009188:	793b      	ldrb	r3, [r7, #4]
 800918a:	4618      	mov	r0, r3
 800918c:	797b      	ldrb	r3, [r7, #5]
 800918e:	461c      	mov	r4, r3
 8009190:	79bb      	ldrb	r3, [r7, #6]
 8009192:	79fa      	ldrb	r2, [r7, #7]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	9102      	str	r1, [sp, #8]
 8009198:	9201      	str	r2, [sp, #4]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	4623      	mov	r3, r4
 800919e:	4602      	mov	r2, r0
 80091a0:	490c      	ldr	r1, [pc, #48]	@ (80091d4 <MCU_RegisterModule+0x3ac>)
 80091a2:	480d      	ldr	r0, [pc, #52]	@ (80091d8 <MCU_RegisterModule+0x3b0>)
 80091a4:	f00b faa0 	bl	80146e8 <siprintf>
 80091a8:	480b      	ldr	r0, [pc, #44]	@ (80091d8 <MCU_RegisterModule+0x3b0>)
 80091aa:	f7fc fa29 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80091ae:	2001      	movs	r0, #1
 80091b0:	f7ff fd98 	bl	8008ce4 <MCU_TransmitMessageQueue>
  
  // Request initial status from newly registered module
  MCU_RequestModuleStatus(module[moduleIndex].moduleId);
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	4a09      	ldr	r2, [pc, #36]	@ (80091dc <MCU_RegisterModule+0x3b4>)
 80091b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	4413      	add	r3, r2
 80091c2:	3308      	adds	r3, #8
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fd3c 	bl	8009c44 <MCU_RequestModuleStatus>
}
 80091cc:	bf00      	nop
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd90      	pop	{r4, r7, pc}
 80091d4:	08018e10 	.word	0x08018e10
 80091d8:	20000b5c 	.word	0x20000b5c
 80091dc:	20000dec 	.word	0x20000dec

080091e0 <MCU_DeRegisterModule>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r M o d u l e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterModule(uint8_t moduleId){
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 80091ea:	4b24      	ldr	r3, [pc, #144]	@ (800927c <MCU_DeRegisterModule+0x9c>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	733b      	strb	r3, [r7, #12]

    // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 80091f0:	4b23      	ldr	r3, [pc, #140]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80091f6:	4b22      	ldr	r3, [pc, #136]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80091fc:	4b20      	ldr	r3, [pc, #128]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8009202:	7b3a      	ldrb	r2, [r7, #12]
 8009204:	4b1f      	ldr	r3, [pc, #124]	@ (8009284 <MCU_DeRegisterModule+0xa4>)
 8009206:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8009208:	4a1d      	ldr	r2, [pc, #116]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 800920a:	8813      	ldrh	r3, [r2, #0]
 800920c:	f240 511e 	movw	r1, #1310	@ 0x51e
 8009210:	f361 030a 	bfi	r3, r1, #0, #11
 8009214:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                     // Extended ID - specific module
 8009216:	79fa      	ldrb	r2, [r7, #7]
 8009218:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800921c:	4918      	ldr	r1, [pc, #96]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 800921e:	680b      	ldr	r3, [r1, #0]
 8009220:	f362 23dc 	bfi	r3, r2, #11, #18
 8009224:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009226:	4a16      	ldr	r2, [pc, #88]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 8009228:	7913      	ldrb	r3, [r2, #4]
 800922a:	f36f 1386 	bfc	r3, #6, #1
 800922e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 bytes to transmit
 8009230:	4a13      	ldr	r2, [pc, #76]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 8009232:	7913      	ldrb	r3, [r2, #4]
 8009234:	2101      	movs	r1, #1
 8009236:	f361 0303 	bfi	r3, r1, #0, #4
 800923a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800923c:	4a10      	ldr	r2, [pc, #64]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 800923e:	7913      	ldrb	r3, [r2, #4]
 8009240:	f36f 13c7 	bfc	r3, #7, #1
 8009244:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009246:	4a0e      	ldr	r2, [pc, #56]	@ (8009280 <MCU_DeRegisterModule+0xa0>)
 8009248:	7913      	ldrb	r3, [r2, #4]
 800924a:	f043 0310 	orr.w	r3, r3, #16
 800924e:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register module ID=%02x", moduleId); serialOut(tempBuffer);}
 8009250:	4b0d      	ldr	r3, [pc, #52]	@ (8009288 <MCU_DeRegisterModule+0xa8>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d008      	beq.n	800926e <MCU_DeRegisterModule+0x8e>
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	461a      	mov	r2, r3
 8009260:	490a      	ldr	r1, [pc, #40]	@ (800928c <MCU_DeRegisterModule+0xac>)
 8009262:	480b      	ldr	r0, [pc, #44]	@ (8009290 <MCU_DeRegisterModule+0xb0>)
 8009264:	f00b fa40 	bl	80146e8 <siprintf>
 8009268:	4809      	ldr	r0, [pc, #36]	@ (8009290 <MCU_DeRegisterModule+0xb0>)
 800926a:	f7fc f9c9 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                  // Send it
 800926e:	2001      	movs	r0, #1
 8009270:	f7ff fd38 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	2000a66c 	.word	0x2000a66c
 8009280:	20000d40 	.word	0x20000d40
 8009284:	20000d4c 	.word	0x20000d4c
 8009288:	2000000c 	.word	0x2000000c
 800928c:	08018e5c 	.word	0x08018e5c
 8009290:	20000b5c 	.word	0x20000b5c

08009294 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 800929a:	4b22      	ldr	r3, [pc, #136]	@ (8009324 <MCU_DeRegisterAllModules+0x90>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 80092a0:	4b21      	ldr	r3, [pc, #132]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80092a6:	4b20      	ldr	r3, [pc, #128]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80092ac:	4b1e      	ldr	r3, [pc, #120]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80092b2:	793a      	ldrb	r2, [r7, #4]
 80092b4:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <MCU_DeRegisterAllModules+0x98>)
 80092b6:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 80092b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092ba:	8813      	ldrh	r3, [r2, #0]
 80092bc:	f240 511e 	movw	r1, #1310	@ 0x51e
 80092c0:	f361 030a 	bfi	r3, r1, #0, #11
 80092c4:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 80092c6:	4a18      	ldr	r2, [pc, #96]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092c8:	6813      	ldr	r3, [r2, #0]
 80092ca:	f36f 23dc 	bfc	r3, #11, #18
 80092ce:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80092d0:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092d2:	7913      	ldrb	r3, [r2, #4]
 80092d4:	f36f 1386 	bfc	r3, #6, #1
 80092d8:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80092da:	4a13      	ldr	r2, [pc, #76]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092dc:	7913      	ldrb	r3, [r2, #4]
 80092de:	2101      	movs	r1, #1
 80092e0:	f361 0303 	bfi	r3, r1, #0, #4
 80092e4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80092e6:	4a10      	ldr	r2, [pc, #64]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092e8:	7913      	ldrb	r3, [r2, #4]
 80092ea:	f36f 13c7 	bfc	r3, #7, #1
 80092ee:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80092f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009328 <MCU_DeRegisterAllModules+0x94>)
 80092f2:	7913      	ldrb	r3, [r2, #4]
 80092f4:	f043 0310 	orr.w	r3, r3, #16
 80092f8:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <MCU_DeRegisterAllModules+0x9c>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d006      	beq.n	8009314 <MCU_DeRegisterAllModules+0x80>
 8009306:	490b      	ldr	r1, [pc, #44]	@ (8009334 <MCU_DeRegisterAllModules+0xa0>)
 8009308:	480b      	ldr	r0, [pc, #44]	@ (8009338 <MCU_DeRegisterAllModules+0xa4>)
 800930a:	f00b f9ed 	bl	80146e8 <siprintf>
 800930e:	480a      	ldr	r0, [pc, #40]	@ (8009338 <MCU_DeRegisterAllModules+0xa4>)
 8009310:	f7fc f976 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009314:	2001      	movs	r0, #1
 8009316:	f7ff fce5 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2000a66c 	.word	0x2000a66c
 8009328:	20000d40 	.word	0x20000d40
 800932c:	20000d4c 	.word	0x20000d4c
 8009330:	2000000c 	.word	0x2000000c
 8009334:	08018e84 	.word	0x08018e84
 8009338:	20000b5c 	.word	0x20000b5c

0800933c <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8009342:	1d3b      	adds	r3, r7, #4
 8009344:	2201      	movs	r2, #1
 8009346:	2100      	movs	r1, #0
 8009348:	4618      	mov	r0, r3
 800934a:	f00b fa32 	bl	80147b2 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 800934e:	4b22      	ldr	r3, [pc, #136]	@ (80093d8 <MCU_IsolateAllModules+0x9c>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8009354:	4b21      	ldr	r3, [pc, #132]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800935a:	4b20      	ldr	r3, [pc, #128]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 800935c:	2200      	movs	r2, #0
 800935e:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009360:	4b1e      	ldr	r3, [pc, #120]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 8009362:	2200      	movs	r2, #0
 8009364:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 8009366:	793a      	ldrb	r2, [r7, #4]
 8009368:	4b1d      	ldr	r3, [pc, #116]	@ (80093e0 <MCU_IsolateAllModules+0xa4>)
 800936a:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 800936c:	4a1b      	ldr	r2, [pc, #108]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 800936e:	8813      	ldrh	r3, [r2, #0]
 8009370:	f240 511f 	movw	r1, #1311	@ 0x51f
 8009374:	f361 030a 	bfi	r3, r1, #0, #11
 8009378:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800937a:	4a18      	ldr	r2, [pc, #96]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 800937c:	6813      	ldr	r3, [r2, #0]
 800937e:	f36f 23dc 	bfc	r3, #11, #18
 8009382:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009384:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 8009386:	7913      	ldrb	r3, [r2, #4]
 8009388:	f36f 1386 	bfc	r3, #6, #1
 800938c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800938e:	4a13      	ldr	r2, [pc, #76]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 8009390:	7913      	ldrb	r3, [r2, #4]
 8009392:	2101      	movs	r1, #1
 8009394:	f361 0303 	bfi	r3, r1, #0, #4
 8009398:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800939a:	4a10      	ldr	r2, [pc, #64]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 800939c:	7913      	ldrb	r3, [r2, #4]
 800939e:	f36f 13c7 	bfc	r3, #7, #1
 80093a2:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80093a4:	4a0d      	ldr	r2, [pc, #52]	@ (80093dc <MCU_IsolateAllModules+0xa0>)
 80093a6:	7913      	ldrb	r3, [r2, #4]
 80093a8:	f043 0310 	orr.w	r3, r3, #16
 80093ac:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <MCU_IsolateAllModules+0xa8>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d006      	beq.n	80093c8 <MCU_IsolateAllModules+0x8c>
 80093ba:	490b      	ldr	r1, [pc, #44]	@ (80093e8 <MCU_IsolateAllModules+0xac>)
 80093bc:	480b      	ldr	r0, [pc, #44]	@ (80093ec <MCU_IsolateAllModules+0xb0>)
 80093be:	f00b f993 	bl	80146e8 <siprintf>
 80093c2:	480a      	ldr	r0, [pc, #40]	@ (80093ec <MCU_IsolateAllModules+0xb0>)
 80093c4:	f7fc f91c 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80093c8:	2001      	movs	r0, #1
 80093ca:	f7ff fc8b 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	2000a66c 	.word	0x2000a66c
 80093dc:	20000d40 	.word	0x20000d40
 80093e0:	20000d4c 	.word	0x20000d4c
 80093e4:	2000000c 	.word	0x2000000c
 80093e8:	08018eac 	.word	0x08018eac
 80093ec:	20000b5c 	.word	0x20000b5c

080093f0 <MCU_RequestModuleAnnouncement>:

/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e A n n o u n c e m e n t                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleAnnouncement(void){
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ANNOUNCE_REQUEST announceRequest;
  
  // configure the packet
  announceRequest.controllerId = pack.id;
 80093f6:	4b22      	ldr	r3, [pc, #136]	@ (8009480 <MCU_RequestModuleAnnouncement+0x90>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	713b      	strb	r3, [r7, #4]
  
  // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80093fc:	4b21      	ldr	r3, [pc, #132]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8009402:	4b20      	ldr	r3, [pc, #128]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 8009404:	2200      	movs	r2, #0
 8009406:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009408:	4b1e      	ldr	r3, [pc, #120]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 800940a:	2200      	movs	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
  
  // copy announcement request packet to txd structure
  memcpy(txd, &announceRequest, sizeof(announceRequest));
 800940e:	793a      	ldrb	r2, [r7, #4]
 8009410:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <MCU_RequestModuleAnnouncement+0x98>)
 8009412:	701a      	strb	r2, [r3, #0]
  
  txObj.bF.id.SID = ID_MODULE_ANNOUNCE_REQUEST;   // Standard ID
 8009414:	4a1b      	ldr	r2, [pc, #108]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 8009416:	8813      	ldrh	r3, [r2, #0]
 8009418:	f240 511d 	movw	r1, #1309	@ 0x51d
 800941c:	f361 030a 	bfi	r3, r1, #0, #11
 8009420:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID - broadcast to all
 8009422:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 8009424:	6813      	ldr	r3, [r2, #0]
 8009426:	f36f 23dc 	bfc	r3, #11, #18
 800942a:	6013      	str	r3, [r2, #0]
  
  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800942c:	4a15      	ldr	r2, [pc, #84]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 800942e:	7913      	ldrb	r3, [r2, #4]
 8009430:	f36f 1386 	bfc	r3, #6, #1
 8009434:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 byte to transmit
 8009436:	4a13      	ldr	r2, [pc, #76]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 8009438:	7913      	ldrb	r3, [r2, #4]
 800943a:	2101      	movs	r1, #1
 800943c:	f361 0303 	bfi	r3, r1, #0, #4
 8009440:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009442:	4a10      	ldr	r2, [pc, #64]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 8009444:	7913      	ldrb	r3, [r2, #4]
 8009446:	f36f 13c7 	bfc	r3, #7, #1
 800944a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800944c:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <MCU_RequestModuleAnnouncement+0x94>)
 800944e:	7913      	ldrb	r3, [r2, #4]
 8009450:	f043 0310 	orr.w	r3, r3, #16
 8009454:	7113      	strb	r3, [r2, #4]
  
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51D Request module announcements"); serialOut(tempBuffer);}
 8009456:	4b0d      	ldr	r3, [pc, #52]	@ (800948c <MCU_RequestModuleAnnouncement+0x9c>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d006      	beq.n	8009470 <MCU_RequestModuleAnnouncement+0x80>
 8009462:	490b      	ldr	r1, [pc, #44]	@ (8009490 <MCU_RequestModuleAnnouncement+0xa0>)
 8009464:	480b      	ldr	r0, [pc, #44]	@ (8009494 <MCU_RequestModuleAnnouncement+0xa4>)
 8009466:	f00b f93f 	bl	80146e8 <siprintf>
 800946a:	480a      	ldr	r0, [pc, #40]	@ (8009494 <MCU_RequestModuleAnnouncement+0xa4>)
 800946c:	f7fc f8c8 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                  // Send it
 8009470:	2001      	movs	r0, #1
 8009472:	f7ff fc37 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	2000a66c 	.word	0x2000a66c
 8009484:	20000d40 	.word	0x20000d40
 8009488:	20000d4c 	.word	0x20000d4c
 800948c:	2000000c 	.word	0x2000000c
 8009490:	08018ed0 	.word	0x08018ed0
 8009494:	20000b5c 	.word	0x20000b5c

08009498 <MCU_ProcessModuleTime>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 8009498:	b5b0      	push	{r4, r5, r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 800949e:	4b34      	ldr	r3, [pc, #208]	@ (8009570 <MCU_ProcessModuleTime+0xd8>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <MCU_ProcessModuleTime+0x20>
 80094aa:	4932      	ldr	r1, [pc, #200]	@ (8009574 <MCU_ProcessModuleTime+0xdc>)
 80094ac:	4832      	ldr	r0, [pc, #200]	@ (8009578 <MCU_ProcessModuleTime+0xe0>)
 80094ae:	f00b f91b 	bl	80146e8 <siprintf>
 80094b2:	4831      	ldr	r0, [pc, #196]	@ (8009578 <MCU_ProcessModuleTime+0xe0>)
 80094b4:	f7fc f8a4 	bl	8005600 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80094b8:	f7fc f98a 	bl	80057d0 <readRTC>
 80094bc:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80094c0:	4b2e      	ldr	r3, [pc, #184]	@ (800957c <MCU_ProcessModuleTime+0xe4>)
 80094c2:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80094cc:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80094ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094d2:	4614      	mov	r4, r2
 80094d4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80094d8:	4623      	mov	r3, r4
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	462a      	mov	r2, r5
 80094e0:	f362 031e 	bfi	r3, r2, #0, #31
 80094e4:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80094e6:	4b26      	ldr	r3, [pc, #152]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80094ec:	4b24      	ldr	r3, [pc, #144]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80094f2:	4b23      	ldr	r3, [pc, #140]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 80094f8:	463b      	mov	r3, r7
 80094fa:	2208      	movs	r2, #8
 80094fc:	4619      	mov	r1, r3
 80094fe:	4821      	ldr	r0, [pc, #132]	@ (8009584 <MCU_ProcessModuleTime+0xec>)
 8009500:	f00c f84f 	bl	80155a2 <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8009504:	4a1e      	ldr	r2, [pc, #120]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 8009506:	8813      	ldrh	r3, [r2, #0]
 8009508:	f240 5116 	movw	r1, #1302	@ 0x516
 800950c:	f361 030a 	bfi	r3, r1, #0, #11
 8009510:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8009512:	4a1b      	ldr	r2, [pc, #108]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 8009514:	6813      	ldr	r3, [r2, #0]
 8009516:	f36f 23dc 	bfc	r3, #11, #18
 800951a:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800951c:	4a18      	ldr	r2, [pc, #96]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 800951e:	7913      	ldrb	r3, [r2, #4]
 8009520:	f36f 1386 	bfc	r3, #6, #1
 8009524:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8009526:	4a16      	ldr	r2, [pc, #88]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 8009528:	7913      	ldrb	r3, [r2, #4]
 800952a:	2108      	movs	r1, #8
 800952c:	f361 0303 	bfi	r3, r1, #0, #4
 8009530:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009532:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 8009534:	7913      	ldrb	r3, [r2, #4]
 8009536:	f36f 13c7 	bfc	r3, #7, #1
 800953a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800953c:	4a10      	ldr	r2, [pc, #64]	@ (8009580 <MCU_ProcessModuleTime+0xe8>)
 800953e:	7913      	ldrb	r3, [r2, #4]
 8009540:	f043 0310 	orr.w	r3, r3, #16
 8009544:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 8009546:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <MCU_ProcessModuleTime+0xd8>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <MCU_ProcessModuleTime+0xc8>
 8009552:	490d      	ldr	r1, [pc, #52]	@ (8009588 <MCU_ProcessModuleTime+0xf0>)
 8009554:	4808      	ldr	r0, [pc, #32]	@ (8009578 <MCU_ProcessModuleTime+0xe0>)
 8009556:	f00b f8c7 	bl	80146e8 <siprintf>
 800955a:	4807      	ldr	r0, [pc, #28]	@ (8009578 <MCU_ProcessModuleTime+0xe0>)
 800955c:	f7fc f850 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009560:	2001      	movs	r0, #1
 8009562:	f7ff fbbf 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bdb0      	pop	{r4, r5, r7, pc}
 800956e:	bf00      	nop
 8009570:	2000000c 	.word	0x2000000c
 8009574:	08018efc 	.word	0x08018efc
 8009578:	20000b5c 	.word	0x20000b5c
 800957c:	2000a66c 	.word	0x2000a66c
 8009580:	20000d40 	.word	0x20000d40
 8009584:	20000d4c 	.word	0x20000d4c
 8009588:	08018f18 	.word	0x08018f18

0800958c <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8009596:	4b41      	ldr	r3, [pc, #260]	@ (800969c <MCU_RequestHardware+0x110>)
 8009598:	7d1b      	ldrb	r3, [r3, #20]
 800959a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800959c:	2300      	movs	r3, #0
 800959e:	73bb      	strb	r3, [r7, #14]
 80095a0:	e010      	b.n	80095c4 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	4a3e      	ldr	r2, [pc, #248]	@ (80096a0 <MCU_RequestHardware+0x114>)
 80095a6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	3308      	adds	r3, #8
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	79fa      	ldrb	r2, [r7, #7]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d101      	bne.n	80095be <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	3301      	adds	r3, #1
 80095c2:	73bb      	strb	r3, [r7, #14]
 80095c4:	4b35      	ldr	r3, [pc, #212]	@ (800969c <MCU_RequestHardware+0x110>)
 80095c6:	7d1b      	ldrb	r3, [r3, #20]
 80095c8:	7bba      	ldrb	r2, [r7, #14]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d3e9      	bcc.n	80095a2 <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 80095ce:	4b33      	ldr	r3, [pc, #204]	@ (800969c <MCU_RequestHardware+0x110>)
 80095d0:	7d1b      	ldrb	r3, [r3, #20]
 80095d2:	7bfa      	ldrb	r2, [r7, #15]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d10d      	bne.n	80095f4 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 80095d8:	4b32      	ldr	r3, [pc, #200]	@ (80096a4 <MCU_RequestHardware+0x118>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 0309 	and.w	r3, r3, #9
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d156      	bne.n	8009692 <MCU_RequestHardware+0x106>
 80095e4:	4930      	ldr	r1, [pc, #192]	@ (80096a8 <MCU_RequestHardware+0x11c>)
 80095e6:	4831      	ldr	r0, [pc, #196]	@ (80096ac <MCU_RequestHardware+0x120>)
 80095e8:	f00b f87e 	bl	80146e8 <siprintf>
 80095ec:	482f      	ldr	r0, [pc, #188]	@ (80096ac <MCU_RequestHardware+0x120>)
 80095ee:	f7fc f807 	bl	8005600 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 80095f2:	e04e      	b.n	8009692 <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	4a2a      	ldr	r2, [pc, #168]	@ (80096a0 <MCU_RequestHardware+0x114>)
 80095f8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80095fc:	fb01 f303 	mul.w	r3, r1, r3
 8009600:	4413      	add	r3, r2
 8009602:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009606:	2201      	movs	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 800960e:	4b28      	ldr	r3, [pc, #160]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009614:	4b26      	ldr	r3, [pc, #152]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009616:	2200      	movs	r2, #0
 8009618:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800961a:	4b25      	ldr	r3, [pc, #148]	@ (80096b0 <MCU_RequestHardware+0x124>)
 800961c:	2200      	movs	r2, #0
 800961e:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8009620:	7b3a      	ldrb	r2, [r7, #12]
 8009622:	4b24      	ldr	r3, [pc, #144]	@ (80096b4 <MCU_RequestHardware+0x128>)
 8009624:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8009626:	4a22      	ldr	r2, [pc, #136]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009628:	8813      	ldrh	r3, [r2, #0]
 800962a:	f240 5111 	movw	r1, #1297	@ 0x511
 800962e:	f361 030a 	bfi	r3, r1, #0, #11
 8009632:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8009634:	79fa      	ldrb	r2, [r7, #7]
 8009636:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800963a:	491d      	ldr	r1, [pc, #116]	@ (80096b0 <MCU_RequestHardware+0x124>)
 800963c:	680b      	ldr	r3, [r1, #0]
 800963e:	f362 23dc 	bfi	r3, r2, #11, #18
 8009642:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009644:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009646:	7913      	ldrb	r3, [r2, #4]
 8009648:	f36f 1386 	bfc	r3, #6, #1
 800964c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800964e:	4a18      	ldr	r2, [pc, #96]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009650:	7913      	ldrb	r3, [r2, #4]
 8009652:	2101      	movs	r1, #1
 8009654:	f361 0303 	bfi	r3, r1, #0, #4
 8009658:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800965a:	4a15      	ldr	r2, [pc, #84]	@ (80096b0 <MCU_RequestHardware+0x124>)
 800965c:	7913      	ldrb	r3, [r2, #4]
 800965e:	f36f 13c7 	bfc	r3, #7, #1
 8009662:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009664:	4a12      	ldr	r2, [pc, #72]	@ (80096b0 <MCU_RequestHardware+0x124>)
 8009666:	7913      	ldrb	r3, [r2, #4]
 8009668:	f043 0310 	orr.w	r3, r3, #16
 800966c:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 800966e:	4b0d      	ldr	r3, [pc, #52]	@ (80096a4 <MCU_RequestHardware+0x118>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d008      	beq.n	800968c <MCU_RequestHardware+0x100>
 800967a:	79fb      	ldrb	r3, [r7, #7]
 800967c:	461a      	mov	r2, r3
 800967e:	490e      	ldr	r1, [pc, #56]	@ (80096b8 <MCU_RequestHardware+0x12c>)
 8009680:	480a      	ldr	r0, [pc, #40]	@ (80096ac <MCU_RequestHardware+0x120>)
 8009682:	f00b f831 	bl	80146e8 <siprintf>
 8009686:	4809      	ldr	r0, [pc, #36]	@ (80096ac <MCU_RequestHardware+0x120>)
 8009688:	f7fb ffba 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 800968c:	2001      	movs	r0, #1
 800968e:	f7ff fb29 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	2000a66c 	.word	0x2000a66c
 80096a0:	20000dec 	.word	0x20000dec
 80096a4:	2000000c 	.word	0x2000000c
 80096a8:	08018f30 	.word	0x08018f30
 80096ac:	20000b5c 	.word	0x20000b5c
 80096b0:	20000d40 	.word	0x20000d40
 80096b4:	20000d4c 	.word	0x20000d4c
 80096b8:	08018f6c 	.word	0x08018f6c
 80096bc:	00000000 	.word	0x00000000

080096c0 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	b08e      	sub	sp, #56	@ 0x38
 80096c6:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 80096c8:	463b      	mov	r3, r7
 80096ca:	2208      	movs	r2, #8
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f00b f86f 	bl	80147b2 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 80096d4:	4a94      	ldr	r2, [pc, #592]	@ (8009928 <MCU_ProcessModuleHardware+0x268>)
 80096d6:	463b      	mov	r3, r7
 80096d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096dc:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80096e0:	4b92      	ldr	r3, [pc, #584]	@ (800992c <MCU_ProcessModuleHardware+0x26c>)
 80096e2:	7d1b      	ldrb	r3, [r3, #20]
 80096e4:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80096e6:	2300      	movs	r3, #0
 80096e8:	75bb      	strb	r3, [r7, #22]
 80096ea:	e015      	b.n	8009718 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80096ec:	4b90      	ldr	r3, [pc, #576]	@ (8009930 <MCU_ProcessModuleHardware+0x270>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80096f4:	7dbb      	ldrb	r3, [r7, #22]
 80096f6:	498f      	ldr	r1, [pc, #572]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80096f8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80096fc:	fb00 f303 	mul.w	r3, r0, r3
 8009700:	440b      	add	r3, r1
 8009702:	3308      	adds	r3, #8
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800970a:	429a      	cmp	r2, r3
 800970c:	d101      	bne.n	8009712 <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 800970e:	7dbb      	ldrb	r3, [r7, #22]
 8009710:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009712:	7dbb      	ldrb	r3, [r7, #22]
 8009714:	3301      	adds	r3, #1
 8009716:	75bb      	strb	r3, [r7, #22]
 8009718:	4b84      	ldr	r3, [pc, #528]	@ (800992c <MCU_ProcessModuleHardware+0x26c>)
 800971a:	7d1b      	ldrb	r3, [r3, #20]
 800971c:	7dba      	ldrb	r2, [r7, #22]
 800971e:	429a      	cmp	r2, r3
 8009720:	d3e4      	bcc.n	80096ec <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 8009722:	4b82      	ldr	r3, [pc, #520]	@ (800992c <MCU_ProcessModuleHardware+0x26c>)
 8009724:	7d1b      	ldrb	r3, [r3, #20]
 8009726:	7dfa      	ldrb	r2, [r7, #23]
 8009728:	429a      	cmp	r2, r3
 800972a:	d10e      	bne.n	800974a <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 800972c:	4b82      	ldr	r3, [pc, #520]	@ (8009938 <MCU_ProcessModuleHardware+0x278>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	f003 0309 	and.w	r3, r3, #9
 8009734:	2b09      	cmp	r3, #9
 8009736:	f040 825d 	bne.w	8009bf4 <MCU_ProcessModuleHardware+0x534>
 800973a:	4980      	ldr	r1, [pc, #512]	@ (800993c <MCU_ProcessModuleHardware+0x27c>)
 800973c:	4880      	ldr	r0, [pc, #512]	@ (8009940 <MCU_ProcessModuleHardware+0x280>)
 800973e:	f00a ffd3 	bl	80146e8 <siprintf>
 8009742:	487f      	ldr	r0, [pc, #508]	@ (8009940 <MCU_ProcessModuleHardware+0x280>)
 8009744:	f7fb ff5c 	bl	8005600 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009748:	e254      	b.n	8009bf4 <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	8838      	ldrh	r0, [r7, #0]
 800974e:	4a79      	ldr	r2, [pc, #484]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 8009750:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	4413      	add	r3, r2
 800975a:	330e      	adds	r3, #14
 800975c:	4602      	mov	r2, r0
 800975e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	8878      	ldrh	r0, [r7, #2]
 8009764:	4a73      	ldr	r2, [pc, #460]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 8009766:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	4413      	add	r3, r2
 8009770:	3310      	adds	r3, #16
 8009772:	4602      	mov	r2, r0
 8009774:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	88b8      	ldrh	r0, [r7, #4]
 800977a:	4a6e      	ldr	r2, [pc, #440]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 800977c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	4413      	add	r3, r2
 8009786:	3312      	adds	r3, #18
 8009788:	4602      	mov	r2, r0
 800978a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	88f8      	ldrh	r0, [r7, #6]
 8009790:	4a68      	ldr	r2, [pc, #416]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 8009792:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	330c      	adds	r3, #12
 800979e:	4602      	mov	r2, r0
 80097a0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80097a2:	4b68      	ldr	r3, [pc, #416]	@ (8009944 <MCU_ProcessModuleHardware+0x284>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80097aa:	4962      	ldr	r1, [pc, #392]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80097ac:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80097b0:	fb00 f303 	mul.w	r3, r0, r3
 80097b4:	440b      	add	r3, r1
 80097b6:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80097ba:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	4a62      	ldr	r2, [pc, #392]	@ (8009948 <MCU_ProcessModuleHardware+0x288>)
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	495c      	ldr	r1, [pc, #368]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80097c4:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 80097c8:	fb00 f303 	mul.w	r3, r0, r3
 80097cc:	440b      	add	r3, r1
 80097ce:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80097d2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	4a57      	ldr	r2, [pc, #348]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80097d8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	4a51      	ldr	r2, [pc, #324]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80097ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80097f2:	fb01 f303 	mul.w	r3, r1, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	330e      	adds	r3, #14
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f6 fe79 	bl	80004f4 <__aeabi_i2d>
 8009802:	a345      	add	r3, pc, #276	@ (adr r3, 8009918 <MCU_ProcessModuleHardware+0x258>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 fede 	bl	80005c8 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4610      	mov	r0, r2
 8009812:	4619      	mov	r1, r3
 8009814:	a342      	add	r3, pc, #264	@ (adr r3, 8009920 <MCU_ProcessModuleHardware+0x260>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fd1d 	bl	8000258 <__aeabi_dsub>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4610      	mov	r0, r2
 8009824:	4619      	mov	r1, r3
 8009826:	f7f7 f9c7 	bl	8000bb8 <__aeabi_d2f>
 800982a:	4603      	mov	r3, r0
 800982c:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	4a40      	ldr	r2, [pc, #256]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 8009832:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	3310      	adds	r3, #16
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7f6 fe57 	bl	80004f4 <__aeabi_i2d>
 8009846:	a334      	add	r3, pc, #208	@ (adr r3, 8009918 <MCU_ProcessModuleHardware+0x258>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 febc 	bl	80005c8 <__aeabi_dmul>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4610      	mov	r0, r2
 8009856:	4619      	mov	r1, r3
 8009858:	a331      	add	r3, pc, #196	@ (adr r3, 8009920 <MCU_ProcessModuleHardware+0x260>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fcfb 	bl	8000258 <__aeabi_dsub>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4610      	mov	r0, r2
 8009868:	4619      	mov	r1, r3
 800986a:	f7f7 f9a5 	bl	8000bb8 <__aeabi_d2f>
 800986e:	4603      	mov	r3, r0
 8009870:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8009872:	edd7 7a04 	vldr	s15, [r7, #16]
 8009876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d567      	bpl.n	8009950 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009880:	4b2d      	ldr	r3, [pc, #180]	@ (8009938 <MCU_ProcessModuleHardware+0x278>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	f003 0309 	and.w	r3, r3, #9
 8009888:	2b09      	cmp	r3, #9
 800988a:	d113      	bne.n	80098b4 <MCU_ProcessModuleHardware+0x1f4>
 800988c:	4b28      	ldr	r3, [pc, #160]	@ (8009930 <MCU_ProcessModuleHardware+0x270>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009894:	461c      	mov	r4, r3
 8009896:	6938      	ldr	r0, [r7, #16]
 8009898:	f7f6 fe3e 	bl	8000518 <__aeabi_f2d>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	e9cd 2300 	strd	r2, r3, [sp]
 80098a4:	4622      	mov	r2, r4
 80098a6:	4929      	ldr	r1, [pc, #164]	@ (800994c <MCU_ProcessModuleHardware+0x28c>)
 80098a8:	4825      	ldr	r0, [pc, #148]	@ (8009940 <MCU_ProcessModuleHardware+0x280>)
 80098aa:	f00a ff1d 	bl	80146e8 <siprintf>
 80098ae:	4824      	ldr	r0, [pc, #144]	@ (8009940 <MCU_ProcessModuleHardware+0x280>)
 80098b0:	f7fb fea6 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80098b8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80098bc:	fb01 f303 	mul.w	r3, r1, r3
 80098c0:	4413      	add	r3, r2
 80098c2:	330e      	adds	r3, #14
 80098c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80098c8:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	4a19      	ldr	r2, [pc, #100]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80098ce:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	4413      	add	r3, r2
 80098d8:	3310      	adds	r3, #16
 80098da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80098de:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	4a14      	ldr	r2, [pc, #80]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80098e4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80098e8:	fb01 f303 	mul.w	r3, r1, r3
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80098f2:	7893      	ldrb	r3, [r2, #2]
 80098f4:	f043 0302 	orr.w	r3, r3, #2
 80098f8:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009934 <MCU_ProcessModuleHardware+0x274>)
 80098fe:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	4413      	add	r3, r2
 8009908:	3308      	adds	r3, #8
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f88a 	bl	800aa28 <MCU_TransmitState>
 8009914:	e04f      	b.n	80099b6 <MCU_ProcessModuleHardware+0x2f6>
 8009916:	bf00      	nop
 8009918:	47ae147b 	.word	0x47ae147b
 800991c:	3f947ae1 	.word	0x3f947ae1
 8009920:	47ae147b 	.word	0x47ae147b
 8009924:	40847ae1 	.word	0x40847ae1
 8009928:	20000da8 	.word	0x20000da8
 800992c:	2000a66c 	.word	0x2000a66c
 8009930:	20000d9c 	.word	0x20000d9c
 8009934:	20000dec 	.word	0x20000dec
 8009938:	2000000c 	.word	0x2000000c
 800993c:	08018f94 	.word	0x08018f94
 8009940:	20000b5c 	.word	0x20000b5c
 8009944:	200005d0 	.word	0x200005d0
 8009948:	20000d20 	.word	0x20000d20
 800994c:	08018fd4 	.word	0x08018fd4
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009950:	edd7 7a04 	vldr	s15, [r7, #16]
 8009954:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	dd29      	ble.n	80099b6 <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8009962:	4bad      	ldr	r3, [pc, #692]	@ (8009c18 <MCU_ProcessModuleHardware+0x558>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <MCU_ProcessModuleHardware+0x2e0>
 800996e:	4bab      	ldr	r3, [pc, #684]	@ (8009c1c <MCU_ProcessModuleHardware+0x55c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009976:	461c      	mov	r4, r3
 8009978:	6938      	ldr	r0, [r7, #16]
 800997a:	f7f6 fdcd 	bl	8000518 <__aeabi_f2d>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	49a6      	ldr	r1, [pc, #664]	@ (8009c20 <MCU_ProcessModuleHardware+0x560>)
 8009988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800998c:	e9cd 2300 	strd	r2, r3, [sp]
 8009990:	4622      	mov	r2, r4
 8009992:	49a4      	ldr	r1, [pc, #656]	@ (8009c24 <MCU_ProcessModuleHardware+0x564>)
 8009994:	48a4      	ldr	r0, [pc, #656]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 8009996:	f00a fea7 	bl	80146e8 <siprintf>
 800999a:	48a3      	ldr	r0, [pc, #652]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 800999c:	f7fb fe30 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	4aa2      	ldr	r2, [pc, #648]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 80099a4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 80099a8:	fb01 f303 	mul.w	r3, r1, r3
 80099ac:	4413      	add	r3, r2
 80099ae:	330e      	adds	r3, #14
 80099b0:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 80099b4:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 80099b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80099ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c2:	dd4a      	ble.n	8009a5a <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 80099c4:	4b94      	ldr	r3, [pc, #592]	@ (8009c18 <MCU_ProcessModuleHardware+0x558>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 0309 	and.w	r3, r3, #9
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d113      	bne.n	80099f8 <MCU_ProcessModuleHardware+0x338>
 80099d0:	4b92      	ldr	r3, [pc, #584]	@ (8009c1c <MCU_ProcessModuleHardware+0x55c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80099d8:	461c      	mov	r4, r3
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7f6 fd9c 	bl	8000518 <__aeabi_f2d>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	e9cd 2300 	strd	r2, r3, [sp]
 80099e8:	4622      	mov	r2, r4
 80099ea:	4991      	ldr	r1, [pc, #580]	@ (8009c30 <MCU_ProcessModuleHardware+0x570>)
 80099ec:	488e      	ldr	r0, [pc, #568]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 80099ee:	f00a fe7b 	bl	80146e8 <siprintf>
 80099f2:	488d      	ldr	r0, [pc, #564]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 80099f4:	f7fb fe04 	bl	8005600 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	4a8c      	ldr	r2, [pc, #560]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 80099fc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	330e      	adds	r3, #14
 8009a08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009a0c:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	4a86      	ldr	r2, [pc, #536]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009a12:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3310      	adds	r3, #16
 8009a1e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009a22:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	4a81      	ldr	r2, [pc, #516]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009a28:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009a36:	7893      	ldrb	r3, [r2, #2]
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	4a7a      	ldr	r2, [pc, #488]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009a42:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009a46:	fb01 f303 	mul.w	r3, r1, r3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 ffe8 	bl	800aa28 <MCU_TransmitState>
 8009a58:	e032      	b.n	8009ac0 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8009a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a5e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8009c34 <MCU_ProcessModuleHardware+0x574>
 8009a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6a:	d529      	bpl.n	8009ac0 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8009a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8009c18 <MCU_ProcessModuleHardware+0x558>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d018      	beq.n	8009aaa <MCU_ProcessModuleHardware+0x3ea>
 8009a78:	4b68      	ldr	r3, [pc, #416]	@ (8009c1c <MCU_ProcessModuleHardware+0x55c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009a80:	461c      	mov	r4, r3
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7f6 fd48 	bl	8000518 <__aeabi_f2d>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	f04f 0000 	mov.w	r0, #0
 8009a90:	4969      	ldr	r1, [pc, #420]	@ (8009c38 <MCU_ProcessModuleHardware+0x578>)
 8009a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a96:	e9cd 2300 	strd	r2, r3, [sp]
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4967      	ldr	r1, [pc, #412]	@ (8009c3c <MCU_ProcessModuleHardware+0x57c>)
 8009a9e:	4862      	ldr	r0, [pc, #392]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 8009aa0:	f00a fe22 	bl	80146e8 <siprintf>
 8009aa4:	4860      	ldr	r0, [pc, #384]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 8009aa6:	f7fb fdab 	bl	8005600 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	4a5f      	ldr	r2, [pc, #380]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009aae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3310      	adds	r3, #16
 8009aba:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8009abe:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009ac0:	4b55      	ldr	r3, [pc, #340]	@ (8009c18 <MCU_ProcessModuleHardware+0x558>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8093 	beq.w	8009bf4 <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	4a56      	ldr	r2, [pc, #344]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009ad2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	4413      	add	r3, r2
 8009adc:	330e      	adds	r3, #14
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7f6 fd07 	bl	80004f4 <__aeabi_i2d>
 8009ae6:	a346      	add	r3, pc, #280	@ (adr r3, 8009c00 <MCU_ProcessModuleHardware+0x540>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fd6c 	bl	80005c8 <__aeabi_dmul>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	a343      	add	r3, pc, #268	@ (adr r3, 8009c08 <MCU_ProcessModuleHardware+0x548>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fbab 	bl	8000258 <__aeabi_dsub>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4610      	mov	r0, r2
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7f7 f855 	bl	8000bb8 <__aeabi_d2f>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	4a45      	ldr	r2, [pc, #276]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009b16:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	3310      	adds	r3, #16
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f6 fce5 	bl	80004f4 <__aeabi_i2d>
 8009b2a:	a335      	add	r3, pc, #212	@ (adr r3, 8009c00 <MCU_ProcessModuleHardware+0x540>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fd4a 	bl	80005c8 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	a332      	add	r3, pc, #200	@ (adr r3, 8009c08 <MCU_ProcessModuleHardware+0x548>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb89 	bl	8000258 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f7f7 f833 	bl	8000bb8 <__aeabi_d2f>
 8009b52:	4603      	mov	r3, r0
 8009b54:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	4a34      	ldr	r2, [pc, #208]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009b5a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	3312      	adds	r3, #18
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7f6 fcc3 	bl	80004f4 <__aeabi_i2d>
 8009b6e:	a328      	add	r3, pc, #160	@ (adr r3, 8009c10 <MCU_ProcessModuleHardware+0x550>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fd28 	bl	80005c8 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4619      	mov	r1, r3
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	f7f6 fb68 	bl	800025c <__adddf3>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4610      	mov	r0, r2
 8009b92:	4619      	mov	r1, r3
 8009b94:	f7f7 f810 	bl	8000bb8 <__aeabi_d2f>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8009c1c <MCU_ProcessModuleHardware+0x55c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	6938      	ldr	r0, [r7, #16]
 8009ba8:	f7f6 fcb6 	bl	8000518 <__aeabi_f2d>
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7f6 fcb1 	bl	8000518 <__aeabi_f2d>
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	4689      	mov	r9, r1
 8009bba:	68b8      	ldr	r0, [r7, #8]
 8009bbc:	f7f6 fcac 	bl	8000518 <__aeabi_f2d>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009bc4:	7df9      	ldrb	r1, [r7, #23]
 8009bc6:	4819      	ldr	r0, [pc, #100]	@ (8009c2c <MCU_ProcessModuleHardware+0x56c>)
 8009bc8:	f240 46c4 	movw	r6, #1220	@ 0x4c4
 8009bcc:	fb06 f101 	mul.w	r1, r6, r1
 8009bd0:	4401      	add	r1, r0
 8009bd2:	310c      	adds	r1, #12
 8009bd4:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009bd6:	9106      	str	r1, [sp, #24]
 8009bd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bdc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009be0:	e9cd 4500 	strd	r4, r5, [sp]
 8009be4:	4652      	mov	r2, sl
 8009be6:	4916      	ldr	r1, [pc, #88]	@ (8009c40 <MCU_ProcessModuleHardware+0x580>)
 8009be8:	480f      	ldr	r0, [pc, #60]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 8009bea:	f00a fd7d 	bl	80146e8 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009bee:	480e      	ldr	r0, [pc, #56]	@ (8009c28 <MCU_ProcessModuleHardware+0x568>)
 8009bf0:	f7fb fd06 	bl	8005600 <serialOut>
}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	bf00      	nop
 8009c00:	47ae147b 	.word	0x47ae147b
 8009c04:	3f947ae1 	.word	0x3f947ae1
 8009c08:	47ae147b 	.word	0x47ae147b
 8009c0c:	40847ae1 	.word	0x40847ae1
 8009c10:	eb851eb8 	.word	0xeb851eb8
 8009c14:	3f8eb851 	.word	0x3f8eb851
 8009c18:	2000000c 	.word	0x2000000c
 8009c1c:	20000d9c 	.word	0x20000d9c
 8009c20:	40240000 	.word	0x40240000
 8009c24:	0801901c 	.word	0x0801901c
 8009c28:	20000b5c 	.word	0x20000b5c
 8009c2c:	20000dec 	.word	0x20000dec
 8009c30:	08019064 	.word	0x08019064
 8009c34:	c2280000 	.word	0xc2280000
 8009c38:	c0450000 	.word	0xc0450000
 8009c3c:	080190ac 	.word	0x080190ac
 8009c40:	080190f8 	.word	0x080190f8

08009c44 <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8009c4e:	4b41      	ldr	r3, [pc, #260]	@ (8009d54 <MCU_RequestModuleStatus+0x110>)
 8009c50:	7d1b      	ldrb	r3, [r3, #20]
 8009c52:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009c54:	2300      	movs	r3, #0
 8009c56:	73bb      	strb	r3, [r7, #14]
 8009c58:	e010      	b.n	8009c7c <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8009d58 <MCU_RequestModuleStatus+0x114>)
 8009c5e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009c62:	fb01 f303 	mul.w	r3, r1, r3
 8009c66:	4413      	add	r3, r2
 8009c68:	3308      	adds	r3, #8
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	79fa      	ldrb	r2, [r7, #7]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d101      	bne.n	8009c76 <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	73bb      	strb	r3, [r7, #14]
 8009c7c:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <MCU_RequestModuleStatus+0x110>)
 8009c7e:	7d1b      	ldrb	r3, [r3, #20]
 8009c80:	7bba      	ldrb	r2, [r7, #14]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3e9      	bcc.n	8009c5a <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8009c86:	4b33      	ldr	r3, [pc, #204]	@ (8009d54 <MCU_RequestModuleStatus+0x110>)
 8009c88:	7d1b      	ldrb	r3, [r3, #20]
 8009c8a:	7bfa      	ldrb	r2, [r7, #15]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d10d      	bne.n	8009cac <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8009c90:	4b32      	ldr	r3, [pc, #200]	@ (8009d5c <MCU_RequestModuleStatus+0x118>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 0309 	and.w	r3, r3, #9
 8009c98:	2b09      	cmp	r3, #9
 8009c9a:	d156      	bne.n	8009d4a <MCU_RequestModuleStatus+0x106>
 8009c9c:	4930      	ldr	r1, [pc, #192]	@ (8009d60 <MCU_RequestModuleStatus+0x11c>)
 8009c9e:	4831      	ldr	r0, [pc, #196]	@ (8009d64 <MCU_RequestModuleStatus+0x120>)
 8009ca0:	f00a fd22 	bl	80146e8 <siprintf>
 8009ca4:	482f      	ldr	r0, [pc, #188]	@ (8009d64 <MCU_RequestModuleStatus+0x120>)
 8009ca6:	f7fb fcab 	bl	8005600 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8009caa:	e04e      	b.n	8009d4a <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4a2a      	ldr	r2, [pc, #168]	@ (8009d58 <MCU_RequestModuleStatus+0x114>)
 8009cb0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009cb4:	fb01 f303 	mul.w	r3, r1, r3
 8009cb8:	4413      	add	r3, r2
 8009cba:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8009cc6:	4b28      	ldr	r3, [pc, #160]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009ccc:	4b26      	ldr	r3, [pc, #152]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009cd2:	4b25      	ldr	r3, [pc, #148]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8009cd8:	7b3a      	ldrb	r2, [r7, #12]
 8009cda:	4b24      	ldr	r3, [pc, #144]	@ (8009d6c <MCU_RequestModuleStatus+0x128>)
 8009cdc:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8009cde:	4a22      	ldr	r2, [pc, #136]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009ce0:	8813      	ldrh	r3, [r2, #0]
 8009ce2:	f240 5112 	movw	r1, #1298	@ 0x512
 8009ce6:	f361 030a 	bfi	r3, r1, #0, #11
 8009cea:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8009cec:	79fa      	ldrb	r2, [r7, #7]
 8009cee:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009cf2:	491d      	ldr	r1, [pc, #116]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009cf4:	680b      	ldr	r3, [r1, #0]
 8009cf6:	f362 23dc 	bfi	r3, r2, #11, #18
 8009cfa:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009cfe:	7913      	ldrb	r3, [r2, #4]
 8009d00:	f36f 1386 	bfc	r3, #6, #1
 8009d04:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8009d06:	4a18      	ldr	r2, [pc, #96]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009d08:	7913      	ldrb	r3, [r2, #4]
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	f361 0303 	bfi	r3, r1, #0, #4
 8009d10:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009d12:	4a15      	ldr	r2, [pc, #84]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009d14:	7913      	ldrb	r3, [r2, #4]
 8009d16:	f36f 13c7 	bfc	r3, #7, #1
 8009d1a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009d1c:	4a12      	ldr	r2, [pc, #72]	@ (8009d68 <MCU_RequestModuleStatus+0x124>)
 8009d1e:	7913      	ldrb	r3, [r2, #4]
 8009d20:	f043 0310 	orr.w	r3, r3, #16
 8009d24:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009d26:	4b0d      	ldr	r3, [pc, #52]	@ (8009d5c <MCU_RequestModuleStatus+0x118>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f003 0308 	and.w	r3, r3, #8
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <MCU_RequestModuleStatus+0x100>
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	461a      	mov	r2, r3
 8009d36:	490e      	ldr	r1, [pc, #56]	@ (8009d70 <MCU_RequestModuleStatus+0x12c>)
 8009d38:	480a      	ldr	r0, [pc, #40]	@ (8009d64 <MCU_RequestModuleStatus+0x120>)
 8009d3a:	f00a fcd5 	bl	80146e8 <siprintf>
 8009d3e:	4809      	ldr	r0, [pc, #36]	@ (8009d64 <MCU_RequestModuleStatus+0x120>)
 8009d40:	f7fb fc5e 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009d44:	2001      	movs	r0, #1
 8009d46:	f7fe ffcd 	bl	8008ce4 <MCU_TransmitMessageQueue>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2000a66c 	.word	0x2000a66c
 8009d58:	20000dec 	.word	0x20000dec
 8009d5c:	2000000c 	.word	0x2000000c
 8009d60:	08019164 	.word	0x08019164
 8009d64:	20000b5c 	.word	0x20000b5c
 8009d68:	20000d40 	.word	0x20000d40
 8009d6c:	20000d4c 	.word	0x20000d4c
 8009d70:	080191a4 	.word	0x080191a4

08009d74 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8009d82:	4b37      	ldr	r3, [pc, #220]	@ (8009e60 <MCU_FindMaxVoltageModule+0xec>)
 8009d84:	7d1b      	ldrb	r3, [r3, #20]
 8009d86:	3301      	adds	r3, #1
 8009d88:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	71fb      	strb	r3, [r7, #7]
 8009d8e:	e052      	b.n	8009e36 <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	4a34      	ldr	r2, [pc, #208]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009d94:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3314      	adds	r3, #20
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	88ba      	ldrh	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d243      	bcs.n	8009e30 <MCU_FindMaxVoltageModule+0xbc>
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	4a2e      	ldr	r2, [pc, #184]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009dac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009dba:	789b      	ldrb	r3, [r3, #2]
 8009dbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d134      	bne.n	8009e30 <MCU_FindMaxVoltageModule+0xbc>
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4a26      	ldr	r2, [pc, #152]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009dca:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009dce:	fb01 f303 	mul.w	r3, r1, r3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009dd8:	789b      	ldrb	r3, [r3, #2]
 8009dda:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d125      	bne.n	8009e30 <MCU_FindMaxVoltageModule+0xbc>
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	4a1f      	ldr	r2, [pc, #124]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009de8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009df6:	789b      	ldrb	r3, [r3, #2]
 8009df8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d116      	bne.n	8009e30 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	4a17      	ldr	r2, [pc, #92]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009e06:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009e0a:	fb01 f303 	mul.w	r3, r1, r3
 8009e0e:	4413      	add	r3, r2
 8009e10:	3314      	adds	r3, #20
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	4a12      	ldr	r2, [pc, #72]	@ (8009e64 <MCU_FindMaxVoltageModule+0xf0>)
 8009e1a:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009e1e:	fb01 f303 	mul.w	r3, r1, r3
 8009e22:	4413      	add	r3, r2
 8009e24:	3308      	adds	r3, #8
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8009e2a:	79bb      	ldrb	r3, [r7, #6]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	3301      	adds	r3, #1
 8009e34:	71fb      	strb	r3, [r7, #7]
 8009e36:	4b0a      	ldr	r3, [pc, #40]	@ (8009e60 <MCU_FindMaxVoltageModule+0xec>)
 8009e38:	7d1b      	ldrb	r3, [r3, #20]
 8009e3a:	79fa      	ldrb	r2, [r7, #7]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d3a7      	bcc.n	8009d90 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8009e40:	88bb      	ldrh	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d104      	bne.n	8009e50 <MCU_FindMaxVoltageModule+0xdc>
 8009e46:	79bb      	ldrb	r3, [r7, #6]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <MCU_FindMaxVoltageModule+0xdc>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e000      	b.n	8009e52 <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	2000a66c 	.word	0x2000a66c
 8009e64:	20000dec 	.word	0x20000dec

08009e68 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	b09d      	sub	sp, #116	@ 0x74
 8009e6e:	af0a      	add	r7, sp, #40	@ 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8009e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e74:	2208      	movs	r2, #8
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00a fc9a 	bl	80147b2 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8009e7e:	4ab7      	ldr	r2, [pc, #732]	@ (800a15c <MCU_ProcessModuleStatus1+0x2f4>)
 8009e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e88:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009e8c:	4bb4      	ldr	r3, [pc, #720]	@ (800a160 <MCU_ProcessModuleStatus1+0x2f8>)
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8009e9a:	e01a      	b.n	8009ed2 <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009e9c:	4bb1      	ldr	r3, [pc, #708]	@ (800a164 <MCU_ProcessModuleStatus1+0x2fc>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009ea4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ea8:	49af      	ldr	r1, [pc, #700]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009eaa:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8009eae:	fb00 f303 	mul.w	r3, r0, r3
 8009eb2:	440b      	add	r3, r1
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d103      	bne.n	8009ec8 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 8009ec0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ec4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8009ec8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8009ed2:	4ba3      	ldr	r3, [pc, #652]	@ (800a160 <MCU_ProcessModuleStatus1+0x2f8>)
 8009ed4:	7d1b      	ldrb	r3, [r3, #20]
 8009ed6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d3de      	bcc.n	8009e9c <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 8009ede:	4ba0      	ldr	r3, [pc, #640]	@ (800a160 <MCU_ProcessModuleStatus1+0x2f8>)
 8009ee0:	7d1b      	ldrb	r3, [r3, #20]
 8009ee2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d10e      	bne.n	8009f08 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 8009eea:	4ba0      	ldr	r3, [pc, #640]	@ (800a16c <MCU_ProcessModuleStatus1+0x304>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	f003 0309 	and.w	r3, r3, #9
 8009ef2:	2b09      	cmp	r3, #9
 8009ef4:	f040 822e 	bne.w	800a354 <MCU_ProcessModuleStatus1+0x4ec>
 8009ef8:	499d      	ldr	r1, [pc, #628]	@ (800a170 <MCU_ProcessModuleStatus1+0x308>)
 8009efa:	489e      	ldr	r0, [pc, #632]	@ (800a174 <MCU_ProcessModuleStatus1+0x30c>)
 8009efc:	f00a fbf4 	bl	80146e8 <siprintf>
 8009f00:	489c      	ldr	r0, [pc, #624]	@ (800a174 <MCU_ProcessModuleStatus1+0x30c>)
 8009f02:	f7fb fb7d 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 8009f06:	e225      	b.n	800a354 <MCU_ProcessModuleStatus1+0x4ec>
    module[moduleIndex].statusPending = false;
 8009f08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f0c:	4a96      	ldr	r2, [pc, #600]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f0e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 8009f20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f24:	4a90      	ldr	r2, [pc, #576]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f26:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8009f38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f3c:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 8009f3e:	4a8a      	ldr	r2, [pc, #552]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f40:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	4413      	add	r3, r2
 8009f4a:	3316      	adds	r3, #22
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8009f50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f54:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8009f56:	4a84      	ldr	r2, [pc, #528]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f58:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f5c:	fb01 f303 	mul.w	r3, r1, r3
 8009f60:	4413      	add	r3, r2
 8009f62:	3314      	adds	r3, #20
 8009f64:	4602      	mov	r2, r0
 8009f66:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8009f68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f6c:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 8009f70:	4a7d      	ldr	r2, [pc, #500]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f72:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f76:	fb01 f303 	mul.w	r3, r1, r3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	332b      	adds	r3, #43	@ 0x2b
 8009f7e:	4602      	mov	r2, r0
 8009f80:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8009f82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f86:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 8009f8a:	4a77      	ldr	r2, [pc, #476]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009f8c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	4413      	add	r3, r2
 8009f96:	332c      	adds	r3, #44	@ 0x2c
 8009f98:	4602      	mov	r2, r0
 8009f9a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 8009f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009fa0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009faa:	4610      	mov	r0, r2
 8009fac:	4a6e      	ldr	r2, [pc, #440]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009fae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fb2:	fb01 f303 	mul.w	r3, r1, r3
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3327      	adds	r3, #39	@ 0x27
 8009fba:	4602      	mov	r2, r0
 8009fbc:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 8009fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009fc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4a66      	ldr	r2, [pc, #408]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009fd0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fd4:	fb01 f303 	mul.w	r3, r1, r3
 8009fd8:	4413      	add	r3, r2
 8009fda:	3326      	adds	r3, #38	@ 0x26
 8009fdc:	4602      	mov	r2, r0
 8009fde:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 8009fe0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009fe4:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 8009fe8:	4a5f      	ldr	r2, [pc, #380]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 8009fea:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 8009fee:	fb01 f303 	mul.w	r3, r1, r3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	332d      	adds	r3, #45	@ 0x2d
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009ffa:	4b5f      	ldr	r3, [pc, #380]	@ (800a178 <MCU_ProcessModuleStatus1+0x310>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a004:	4958      	ldr	r1, [pc, #352]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a006:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a00a:	fb00 f303 	mul.w	r3, r0, r3
 800a00e:	440b      	add	r3, r1
 800a010:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a014:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a016:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a01a:	4a58      	ldr	r2, [pc, #352]	@ (800a17c <MCU_ProcessModuleStatus1+0x314>)
 800a01c:	6812      	ldr	r2, [r2, #0]
 800a01e:	4952      	ldr	r1, [pc, #328]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a020:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a024:	fb00 f303 	mul.w	r3, r0, r3
 800a028:	440b      	add	r3, r1
 800a02a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a02e:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 800a030:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a034:	4a4c      	ldr	r2, [pc, #304]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a036:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a03a:	fb01 f303 	mul.w	r3, r1, r3
 800a03e:	4413      	add	r3, r2
 800a040:	3327      	adds	r3, #39	@ 0x27
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a048:	4947      	ldr	r1, [pc, #284]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a04a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a04e:	fb00 f303 	mul.w	r3, r0, r3
 800a052:	440b      	add	r3, r1
 800a054:	3329      	adds	r3, #41	@ 0x29
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10a      	bne.n	800a072 <MCU_ProcessModuleStatus1+0x20a>
     module[moduleIndex].command.commandStatus = commandActive;
 800a05c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a060:	4a41      	ldr	r2, [pc, #260]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a062:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	4413      	add	r3, r2
 800a06c:	332a      	adds	r3, #42	@ 0x2a
 800a06e:	2201      	movs	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a072:	4b3e      	ldr	r3, [pc, #248]	@ (800a16c <MCU_ProcessModuleStatus1+0x304>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 816a 	beq.w	800a354 <MCU_ProcessModuleStatus1+0x4ec>
      switch (module[moduleIndex].currentState){
 800a080:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a084:	4a38      	ldr	r2, [pc, #224]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a086:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a08a:	fb01 f303 	mul.w	r3, r1, r3
 800a08e:	4413      	add	r3, r2
 800a090:	3327      	adds	r3, #39	@ 0x27
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d014      	beq.n	800a0c2 <MCU_ProcessModuleStatus1+0x25a>
 800a098:	2b03      	cmp	r3, #3
 800a09a:	dc19      	bgt.n	800a0d0 <MCU_ProcessModuleStatus1+0x268>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <MCU_ProcessModuleStatus1+0x23e>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d007      	beq.n	800a0b4 <MCU_ProcessModuleStatus1+0x24c>
 800a0a4:	e014      	b.n	800a0d0 <MCU_ProcessModuleStatus1+0x268>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800a0a6:	f107 031c 	add.w	r3, r7, #28
 800a0aa:	4935      	ldr	r1, [pc, #212]	@ (800a180 <MCU_ProcessModuleStatus1+0x318>)
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f00a fb1b 	bl	80146e8 <siprintf>
 800a0b2:	e01f      	b.n	800a0f4 <MCU_ProcessModuleStatus1+0x28c>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800a0b4:	f107 031c 	add.w	r3, r7, #28
 800a0b8:	4932      	ldr	r1, [pc, #200]	@ (800a184 <MCU_ProcessModuleStatus1+0x31c>)
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f00a fb14 	bl	80146e8 <siprintf>
 800a0c0:	e018      	b.n	800a0f4 <MCU_ProcessModuleStatus1+0x28c>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800a0c2:	f107 031c 	add.w	r3, r7, #28
 800a0c6:	4930      	ldr	r1, [pc, #192]	@ (800a188 <MCU_ProcessModuleStatus1+0x320>)
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f00a fb0d 	bl	80146e8 <siprintf>
 800a0ce:	e011      	b.n	800a0f4 <MCU_ProcessModuleStatus1+0x28c>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 800a0d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0d4:	4a24      	ldr	r2, [pc, #144]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a0d6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a0da:	fb01 f303 	mul.w	r3, r1, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	3327      	adds	r3, #39	@ 0x27
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f107 031c 	add.w	r3, r7, #28
 800a0ea:	4928      	ldr	r1, [pc, #160]	@ (800a18c <MCU_ProcessModuleStatus1+0x324>)
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f00a fafb 	bl	80146e8 <siprintf>
 800a0f2:	bf00      	nop
      switch (module[moduleIndex].status){
 800a0f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a168 <MCU_ProcessModuleStatus1+0x300>)
 800a0fa:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a0fe:	fb01 f303 	mul.w	r3, r1, r3
 800a102:	4413      	add	r3, r2
 800a104:	3326      	adds	r3, #38	@ 0x26
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d847      	bhi.n	800a19c <MCU_ProcessModuleStatus1+0x334>
 800a10c:	a201      	add	r2, pc, #4	@ (adr r2, 800a114 <MCU_ProcessModuleStatus1+0x2ac>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a125 	.word	0x0800a125
 800a118:	0800a133 	.word	0x0800a133
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a14f 	.word	0x0800a14f
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800a124:	f107 030c 	add.w	r3, r7, #12
 800a128:	4915      	ldr	r1, [pc, #84]	@ (800a180 <MCU_ProcessModuleStatus1+0x318>)
 800a12a:	4618      	mov	r0, r3
 800a12c:	f00a fadc 	bl	80146e8 <siprintf>
 800a130:	e046      	b.n	800a1c0 <MCU_ProcessModuleStatus1+0x358>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 800a132:	f107 030c 	add.w	r3, r7, #12
 800a136:	4916      	ldr	r1, [pc, #88]	@ (800a190 <MCU_ProcessModuleStatus1+0x328>)
 800a138:	4618      	mov	r0, r3
 800a13a:	f00a fad5 	bl	80146e8 <siprintf>
 800a13e:	e03f      	b.n	800a1c0 <MCU_ProcessModuleStatus1+0x358>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 800a140:	f107 030c 	add.w	r3, r7, #12
 800a144:	4913      	ldr	r1, [pc, #76]	@ (800a194 <MCU_ProcessModuleStatus1+0x32c>)
 800a146:	4618      	mov	r0, r3
 800a148:	f00a face 	bl	80146e8 <siprintf>
 800a14c:	e038      	b.n	800a1c0 <MCU_ProcessModuleStatus1+0x358>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800a14e:	f107 030c 	add.w	r3, r7, #12
 800a152:	4911      	ldr	r1, [pc, #68]	@ (800a198 <MCU_ProcessModuleStatus1+0x330>)
 800a154:	4618      	mov	r0, r3
 800a156:	f00a fac7 	bl	80146e8 <siprintf>
 800a15a:	e031      	b.n	800a1c0 <MCU_ProcessModuleStatus1+0x358>
 800a15c:	20000da8 	.word	0x20000da8
 800a160:	2000a66c 	.word	0x2000a66c
 800a164:	20000d9c 	.word	0x20000d9c
 800a168:	20000dec 	.word	0x20000dec
 800a16c:	2000000c 	.word	0x2000000c
 800a170:	080191cc 	.word	0x080191cc
 800a174:	20000b5c 	.word	0x20000b5c
 800a178:	200005d0 	.word	0x200005d0
 800a17c:	20000d20 	.word	0x20000d20
 800a180:	0801920c 	.word	0x0801920c
 800a184:	08019214 	.word	0x08019214
 800a188:	08019220 	.word	0x08019220
 800a18c:	08019228 	.word	0x08019228
 800a190:	08019234 	.word	0x08019234
 800a194:	08019240 	.word	0x08019240
 800a198:	0801924c 	.word	0x0801924c
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800a19c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a1a0:	4a75      	ldr	r2, [pc, #468]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a1a2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a1a6:	fb01 f303 	mul.w	r3, r1, r3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3326      	adds	r3, #38	@ 0x26
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	4971      	ldr	r1, [pc, #452]	@ (800a37c <MCU_ProcessModuleStatus1+0x514>)
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f00a fa95 	bl	80146e8 <siprintf>
 800a1be:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 800a1c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a1c4:	4a6c      	ldr	r2, [pc, #432]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a1c6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a1ca:	fb01 f303 	mul.w	r3, r1, r3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	3314      	adds	r3, #20
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7f6 f98d 	bl	80004f4 <__aeabi_i2d>
 800a1da:	a361      	add	r3, pc, #388	@ (adr r3, 800a360 <MCU_ProcessModuleStatus1+0x4f8>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 f9f2 	bl	80005c8 <__aeabi_dmul>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	f7f6 f832 	bl	800025c <__adddf3>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4619      	mov	r1, r3
 800a200:	f7f6 fcda 	bl	8000bb8 <__aeabi_d2f>
 800a204:	4603      	mov	r3, r0
 800a206:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 800a208:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a20c:	4a5a      	ldr	r2, [pc, #360]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a20e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a212:	fb01 f303 	mul.w	r3, r1, r3
 800a216:	4413      	add	r3, r2
 800a218:	3316      	adds	r3, #22
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f6 f969 	bl	80004f4 <__aeabi_i2d>
 800a222:	a351      	add	r3, pc, #324	@ (adr r3, 800a368 <MCU_ProcessModuleStatus1+0x500>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f6 f9ce 	bl	80005c8 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4610      	mov	r0, r2
 800a232:	4619      	mov	r1, r3
 800a234:	a34e      	add	r3, pc, #312	@ (adr r3, 800a370 <MCU_ProcessModuleStatus1+0x508>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f6 f80d 	bl	8000258 <__aeabi_dsub>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4610      	mov	r0, r2
 800a244:	4619      	mov	r1, r3
 800a246:	f7f6 fcb7 	bl	8000bb8 <__aeabi_d2f>
 800a24a:	4603      	mov	r3, r0
 800a24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800a24e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a252:	4a49      	ldr	r2, [pc, #292]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a254:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a258:	fb01 f303 	mul.w	r3, r1, r3
 800a25c:	4413      	add	r3, r2
 800a25e:	332b      	adds	r3, #43	@ 0x2b
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f6 f946 	bl	80004f4 <__aeabi_i2d>
 800a268:	f04f 0200 	mov.w	r2, #0
 800a26c:	4b44      	ldr	r3, [pc, #272]	@ (800a380 <MCU_ProcessModuleStatus1+0x518>)
 800a26e:	f7f6 f9ab 	bl	80005c8 <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4610      	mov	r0, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	f7f5 ffeb 	bl	800025c <__adddf3>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4610      	mov	r0, r2
 800a28c:	4619      	mov	r1, r3
 800a28e:	f7f6 fc93 	bl	8000bb8 <__aeabi_d2f>
 800a292:	4603      	mov	r3, r0
 800a294:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 800a296:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a29a:	4a37      	ldr	r2, [pc, #220]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a29c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	332c      	adds	r3, #44	@ 0x2c
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f6 f922 	bl	80004f4 <__aeabi_i2d>
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	4b32      	ldr	r3, [pc, #200]	@ (800a380 <MCU_ProcessModuleStatus1+0x518>)
 800a2b6:	f7f6 f987 	bl	80005c8 <__aeabi_dmul>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f04f 0200 	mov.w	r2, #0
 800a2c6:	f04f 0300 	mov.w	r3, #0
 800a2ca:	f7f5 ffc7 	bl	800025c <__adddf3>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f7f6 fc6f 	bl	8000bb8 <__aeabi_d2f>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a2de:	4b29      	ldr	r3, [pc, #164]	@ (800a384 <MCU_ProcessModuleStatus1+0x51c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a2e6:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a2e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a2ec:	4a22      	ldr	r2, [pc, #136]	@ (800a378 <MCU_ProcessModuleStatus1+0x510>)
 800a2ee:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	332d      	adds	r3, #45	@ 0x2d
 800a2fa:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a2fc:	461e      	mov	r6, r3
 800a2fe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a300:	f7f6 f90a 	bl	8000518 <__aeabi_f2d>
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a30a:	f7f6 f905 	bl	8000518 <__aeabi_f2d>
 800a30e:	4680      	mov	r8, r0
 800a310:	4689      	mov	r9, r1
 800a312:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a314:	f7f6 f900 	bl	8000518 <__aeabi_f2d>
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a31e:	f7f6 f8fb 	bl	8000518 <__aeabi_f2d>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	f107 011c 	add.w	r1, r7, #28
 800a32a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a32e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a332:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a336:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a33a:	9601      	str	r6, [sp, #4]
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	460b      	mov	r3, r1
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	4910      	ldr	r1, [pc, #64]	@ (800a388 <MCU_ProcessModuleStatus1+0x520>)
 800a348:	4810      	ldr	r0, [pc, #64]	@ (800a38c <MCU_ProcessModuleStatus1+0x524>)
 800a34a:	f00a f9cd 	bl	80146e8 <siprintf>
      serialOut(tempBuffer);
 800a34e:	480f      	ldr	r0, [pc, #60]	@ (800a38c <MCU_ProcessModuleStatus1+0x524>)
 800a350:	f7fb f956 	bl	8005600 <serialOut>
}
 800a354:	bf00      	nop
 800a356:	374c      	adds	r7, #76	@ 0x4c
 800a358:	46bd      	mov	sp, r7
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	bf00      	nop
 800a360:	eb851eb8 	.word	0xeb851eb8
 800a364:	3f8eb851 	.word	0x3f8eb851
 800a368:	47ae147b 	.word	0x47ae147b
 800a36c:	3f947ae1 	.word	0x3f947ae1
 800a370:	47ae147b 	.word	0x47ae147b
 800a374:	40847ae1 	.word	0x40847ae1
 800a378:	20000dec 	.word	0x20000dec
 800a37c:	08019228 	.word	0x08019228
 800a380:	3fe00000 	.word	0x3fe00000
 800a384:	20000d9c 	.word	0x20000d9c
 800a388:	08019254 	.word	0x08019254
 800a38c:	20000b5c 	.word	0x20000b5c

0800a390 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	b091      	sub	sp, #68	@ 0x44
 800a396:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 800a398:	1d3b      	adds	r3, r7, #4
 800a39a:	2208      	movs	r2, #8
 800a39c:	2100      	movs	r1, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f00a fa07 	bl	80147b2 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 800a3a4:	4ab0      	ldr	r2, [pc, #704]	@ (800a668 <MCU_ProcessModuleStatus2+0x2d8>)
 800a3a6:	1d3b      	adds	r3, r7, #4
 800a3a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3ac:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800a3b0:	4bae      	ldr	r3, [pc, #696]	@ (800a66c <MCU_ProcessModuleStatus2+0x2dc>)
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
 800a3b4:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	77bb      	strb	r3, [r7, #30]
 800a3ba:	e015      	b.n	800a3e8 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a3bc:	4bac      	ldr	r3, [pc, #688]	@ (800a670 <MCU_ProcessModuleStatus2+0x2e0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a3c4:	7fbb      	ldrb	r3, [r7, #30]
 800a3c6:	49ab      	ldr	r1, [pc, #684]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a3c8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a3cc:	fb00 f303 	mul.w	r3, r0, r3
 800a3d0:	440b      	add	r3, r1
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d101      	bne.n	800a3e2 <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 800a3de:	7fbb      	ldrb	r3, [r7, #30]
 800a3e0:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800a3e2:	7fbb      	ldrb	r3, [r7, #30]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	77bb      	strb	r3, [r7, #30]
 800a3e8:	4ba0      	ldr	r3, [pc, #640]	@ (800a66c <MCU_ProcessModuleStatus2+0x2dc>)
 800a3ea:	7d1b      	ldrb	r3, [r3, #20]
 800a3ec:	7fba      	ldrb	r2, [r7, #30]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d3e4      	bcc.n	800a3bc <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800a3f2:	4b9e      	ldr	r3, [pc, #632]	@ (800a66c <MCU_ProcessModuleStatus2+0x2dc>)
 800a3f4:	7d1b      	ldrb	r3, [r3, #20]
 800a3f6:	7ffa      	ldrb	r2, [r7, #31]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d10e      	bne.n	800a41a <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 800a3fc:	4b9e      	ldr	r3, [pc, #632]	@ (800a678 <MCU_ProcessModuleStatus2+0x2e8>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f003 0309 	and.w	r3, r3, #9
 800a404:	2b09      	cmp	r3, #9
 800a406:	f040 811f 	bne.w	800a648 <MCU_ProcessModuleStatus2+0x2b8>
 800a40a:	499c      	ldr	r1, [pc, #624]	@ (800a67c <MCU_ProcessModuleStatus2+0x2ec>)
 800a40c:	489c      	ldr	r0, [pc, #624]	@ (800a680 <MCU_ProcessModuleStatus2+0x2f0>)
 800a40e:	f00a f96b 	bl	80146e8 <siprintf>
 800a412:	489b      	ldr	r0, [pc, #620]	@ (800a680 <MCU_ProcessModuleStatus2+0x2f0>)
 800a414:	f7fb f8f4 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 800a418:	e116      	b.n	800a648 <MCU_ProcessModuleStatus2+0x2b8>
    module[moduleIndex].statusPending = false;
 800a41a:	7ffb      	ldrb	r3, [r7, #31]
 800a41c:	4a95      	ldr	r2, [pc, #596]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a41e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	4413      	add	r3, r2
 800a428:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a42c:	2200      	movs	r2, #0
 800a42e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a430:	7ffb      	ldrb	r3, [r7, #31]
 800a432:	4a90      	ldr	r2, [pc, #576]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a434:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a438:	fb01 f303 	mul.w	r3, r1, r3
 800a43c:	4413      	add	r3, r2
 800a43e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 800a446:	7ffb      	ldrb	r3, [r7, #31]
 800a448:	8938      	ldrh	r0, [r7, #8]
 800a44a:	4a8a      	ldr	r2, [pc, #552]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a44c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a450:	fb01 f303 	mul.w	r3, r1, r3
 800a454:	4413      	add	r3, r2
 800a456:	3322      	adds	r3, #34	@ 0x22
 800a458:	4602      	mov	r2, r0
 800a45a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 800a45c:	7ffb      	ldrb	r3, [r7, #31]
 800a45e:	88f8      	ldrh	r0, [r7, #6]
 800a460:	4a84      	ldr	r2, [pc, #528]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a462:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a466:	fb01 f303 	mul.w	r3, r1, r3
 800a46a:	4413      	add	r3, r2
 800a46c:	331e      	adds	r3, #30
 800a46e:	4602      	mov	r2, r0
 800a470:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	88b8      	ldrh	r0, [r7, #4]
 800a476:	4a7f      	ldr	r2, [pc, #508]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a478:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	3320      	adds	r3, #32
 800a484:	4602      	mov	r2, r0
 800a486:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 800a488:	7ffb      	ldrb	r3, [r7, #31]
 800a48a:	8978      	ldrh	r0, [r7, #10]
 800a48c:	4a79      	ldr	r2, [pc, #484]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a48e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a492:	fb01 f303 	mul.w	r3, r1, r3
 800a496:	4413      	add	r3, r2
 800a498:	3324      	adds	r3, #36	@ 0x24
 800a49a:	4602      	mov	r2, r0
 800a49c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a49e:	4b79      	ldr	r3, [pc, #484]	@ (800a684 <MCU_ProcessModuleStatus2+0x2f4>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	7ffb      	ldrb	r3, [r7, #31]
 800a4a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a4a6:	4973      	ldr	r1, [pc, #460]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a4a8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a4ac:	fb00 f303 	mul.w	r3, r0, r3
 800a4b0:	440b      	add	r3, r1
 800a4b2:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a4b6:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a4b8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ba:	4a73      	ldr	r2, [pc, #460]	@ (800a688 <MCU_ProcessModuleStatus2+0x2f8>)
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	496d      	ldr	r1, [pc, #436]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a4c0:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a4c4:	fb00 f303 	mul.w	r3, r0, r3
 800a4c8:	440b      	add	r3, r1
 800a4ca:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a4ce:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a4d0:	4b69      	ldr	r3, [pc, #420]	@ (800a678 <MCU_ProcessModuleStatus2+0x2e8>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 80b5 	beq.w	800a648 <MCU_ProcessModuleStatus2+0x2b8>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 800a4de:	7ffb      	ldrb	r3, [r7, #31]
 800a4e0:	4a64      	ldr	r2, [pc, #400]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a4e2:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a4e6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ea:	4413      	add	r3, r2
 800a4ec:	3322      	adds	r3, #34	@ 0x22
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f5 ffff 	bl	80004f4 <__aeabi_i2d>
 800a4f6:	a358      	add	r3, pc, #352	@ (adr r3, 800a658 <MCU_ProcessModuleStatus2+0x2c8>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f6 f864 	bl	80005c8 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4610      	mov	r0, r2
 800a506:	4619      	mov	r1, r3
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	f7f5 fea4 	bl	800025c <__adddf3>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4610      	mov	r0, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	f7f6 fb4c 	bl	8000bb8 <__aeabi_d2f>
 800a520:	4603      	mov	r3, r0
 800a522:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 800a524:	7ffb      	ldrb	r3, [r7, #31]
 800a526:	4a53      	ldr	r2, [pc, #332]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a528:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	4413      	add	r3, r2
 800a532:	331e      	adds	r3, #30
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f7f5 ffdc 	bl	80004f4 <__aeabi_i2d>
 800a53c:	a346      	add	r3, pc, #280	@ (adr r3, 800a658 <MCU_ProcessModuleStatus2+0x2c8>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f6 f841 	bl	80005c8 <__aeabi_dmul>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4610      	mov	r0, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	f7f5 fe81 	bl	800025c <__adddf3>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f7f6 fb29 	bl	8000bb8 <__aeabi_d2f>
 800a566:	4603      	mov	r3, r0
 800a568:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 800a56a:	7ffb      	ldrb	r3, [r7, #31]
 800a56c:	4a41      	ldr	r2, [pc, #260]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a56e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a572:	fb01 f303 	mul.w	r3, r1, r3
 800a576:	4413      	add	r3, r2
 800a578:	3320      	adds	r3, #32
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7f5 ffb9 	bl	80004f4 <__aeabi_i2d>
 800a582:	a335      	add	r3, pc, #212	@ (adr r3, 800a658 <MCU_ProcessModuleStatus2+0x2c8>)
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f7f6 f81e 	bl	80005c8 <__aeabi_dmul>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4610      	mov	r0, r2
 800a592:	4619      	mov	r1, r3
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	f7f5 fe5e 	bl	800025c <__adddf3>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	f7f6 fb06 	bl	8000bb8 <__aeabi_d2f>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800a5b0:	7ffb      	ldrb	r3, [r7, #31]
 800a5b2:	4a30      	ldr	r2, [pc, #192]	@ (800a674 <MCU_ProcessModuleStatus2+0x2e4>)
 800a5b4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a5b8:	fb01 f303 	mul.w	r3, r1, r3
 800a5bc:	4413      	add	r3, r2
 800a5be:	3324      	adds	r3, #36	@ 0x24
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f5 ff96 	bl	80004f4 <__aeabi_i2d>
 800a5c8:	a325      	add	r3, pc, #148	@ (adr r3, 800a660 <MCU_ProcessModuleStatus2+0x2d0>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 fffb 	bl	80005c8 <__aeabi_dmul>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	4619      	mov	r1, r3
 800a5da:	f04f 0200 	mov.w	r2, #0
 800a5de:	f04f 0300 	mov.w	r3, #0
 800a5e2:	f7f5 fe3b 	bl	800025c <__adddf3>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f7f6 fae3 	bl	8000bb8 <__aeabi_d2f>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 800a5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a670 <MCU_ProcessModuleStatus2+0x2e0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 800a5fe:	461e      	mov	r6, r3
 800a600:	69b8      	ldr	r0, [r7, #24]
 800a602:	f7f5 ff89 	bl	8000518 <__aeabi_f2d>
 800a606:	4604      	mov	r4, r0
 800a608:	460d      	mov	r5, r1
 800a60a:	6978      	ldr	r0, [r7, #20]
 800a60c:	f7f5 ff84 	bl	8000518 <__aeabi_f2d>
 800a610:	4680      	mov	r8, r0
 800a612:	4689      	mov	r9, r1
 800a614:	6938      	ldr	r0, [r7, #16]
 800a616:	f7f5 ff7f 	bl	8000518 <__aeabi_f2d>
 800a61a:	4682      	mov	sl, r0
 800a61c:	468b      	mov	fp, r1
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7f5 ff7a 	bl	8000518 <__aeabi_f2d>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a62c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a630:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a634:	e9cd 4500 	strd	r4, r5, [sp]
 800a638:	4632      	mov	r2, r6
 800a63a:	4914      	ldr	r1, [pc, #80]	@ (800a68c <MCU_ProcessModuleStatus2+0x2fc>)
 800a63c:	4810      	ldr	r0, [pc, #64]	@ (800a680 <MCU_ProcessModuleStatus2+0x2f0>)
 800a63e:	f00a f853 	bl	80146e8 <siprintf>
      serialOut(tempBuffer);
 800a642:	480f      	ldr	r0, [pc, #60]	@ (800a680 <MCU_ProcessModuleStatus2+0x2f0>)
 800a644:	f7fa ffdc 	bl	8005600 <serialOut>
}
 800a648:	bf00      	nop
 800a64a:	3724      	adds	r7, #36	@ 0x24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	bf00      	nop
 800a654:	f3af 8000 	nop.w
 800a658:	d2f1a9fc 	.word	0xd2f1a9fc
 800a65c:	3f50624d 	.word	0x3f50624d
 800a660:	eb851eb8 	.word	0xeb851eb8
 800a664:	3f8eb851 	.word	0x3f8eb851
 800a668:	20000da8 	.word	0x20000da8
 800a66c:	2000a66c 	.word	0x2000a66c
 800a670:	20000d9c 	.word	0x20000d9c
 800a674:	20000dec 	.word	0x20000dec
 800a678:	2000000c 	.word	0x2000000c
 800a67c:	080192d4 	.word	0x080192d4
 800a680:	20000b5c 	.word	0x20000b5c
 800a684:	200005d0 	.word	0x200005d0
 800a688:	20000d20 	.word	0x20000d20
 800a68c:	08019314 	.word	0x08019314

0800a690 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 800a690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a694:	b08d      	sub	sp, #52	@ 0x34
 800a696:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 800a698:	463b      	mov	r3, r7
 800a69a:	2208      	movs	r2, #8
 800a69c:	2100      	movs	r1, #0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f00a f887 	bl	80147b2 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800a6a4:	4a94      	ldr	r2, [pc, #592]	@ (800a8f8 <MCU_ProcessModuleStatus3+0x268>)
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6ac:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 800a6b0:	4b92      	ldr	r3, [pc, #584]	@ (800a8fc <MCU_ProcessModuleStatus3+0x26c>)
 800a6b2:	7d1b      	ldrb	r3, [r3, #20]
 800a6b4:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75bb      	strb	r3, [r7, #22]
 800a6ba:	e015      	b.n	800a6e8 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a6bc:	4b90      	ldr	r3, [pc, #576]	@ (800a900 <MCU_ProcessModuleStatus3+0x270>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a6c4:	7dbb      	ldrb	r3, [r7, #22]
 800a6c6:	498f      	ldr	r1, [pc, #572]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a6c8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a6cc:	fb00 f303 	mul.w	r3, r0, r3
 800a6d0:	440b      	add	r3, r1
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d101      	bne.n	800a6e2 <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 800a6de:	7dbb      	ldrb	r3, [r7, #22]
 800a6e0:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a6e2:	7dbb      	ldrb	r3, [r7, #22]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	75bb      	strb	r3, [r7, #22]
 800a6e8:	4b84      	ldr	r3, [pc, #528]	@ (800a8fc <MCU_ProcessModuleStatus3+0x26c>)
 800a6ea:	7d1b      	ldrb	r3, [r3, #20]
 800a6ec:	7dba      	ldrb	r2, [r7, #22]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d3e4      	bcc.n	800a6bc <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800a6f2:	4b82      	ldr	r3, [pc, #520]	@ (800a8fc <MCU_ProcessModuleStatus3+0x26c>)
 800a6f4:	7d1b      	ldrb	r3, [r3, #20]
 800a6f6:	7dfa      	ldrb	r2, [r7, #23]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d10e      	bne.n	800a71a <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800a6fc:	4b82      	ldr	r3, [pc, #520]	@ (800a908 <MCU_ProcessModuleStatus3+0x278>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 0309 	and.w	r3, r3, #9
 800a704:	2b09      	cmp	r3, #9
 800a706:	f040 80e7 	bne.w	800a8d8 <MCU_ProcessModuleStatus3+0x248>
 800a70a:	4980      	ldr	r1, [pc, #512]	@ (800a90c <MCU_ProcessModuleStatus3+0x27c>)
 800a70c:	4880      	ldr	r0, [pc, #512]	@ (800a910 <MCU_ProcessModuleStatus3+0x280>)
 800a70e:	f009 ffeb 	bl	80146e8 <siprintf>
 800a712:	487f      	ldr	r0, [pc, #508]	@ (800a910 <MCU_ProcessModuleStatus3+0x280>)
 800a714:	f7fa ff74 	bl	8005600 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 800a718:	e0de      	b.n	800a8d8 <MCU_ProcessModuleStatus3+0x248>
    module[moduleIndex].statusPending = false;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	4a79      	ldr	r2, [pc, #484]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a71e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a72c:	2200      	movs	r2, #0
 800a72e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	4a74      	ldr	r2, [pc, #464]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a734:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	88b8      	ldrh	r0, [r7, #4]
 800a74a:	4a6e      	ldr	r2, [pc, #440]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a74c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	4413      	add	r3, r2
 800a756:	331c      	adds	r3, #28
 800a758:	4602      	mov	r2, r0
 800a75a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	8878      	ldrh	r0, [r7, #2]
 800a760:	4a68      	ldr	r2, [pc, #416]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a762:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	4413      	add	r3, r2
 800a76c:	3318      	adds	r3, #24
 800a76e:	4602      	mov	r2, r0
 800a770:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	8838      	ldrh	r0, [r7, #0]
 800a776:	4a63      	ldr	r2, [pc, #396]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a778:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	4413      	add	r3, r2
 800a782:	331a      	adds	r3, #26
 800a784:	4602      	mov	r2, r0
 800a786:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a788:	4b62      	ldr	r3, [pc, #392]	@ (800a914 <MCU_ProcessModuleStatus3+0x284>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a790:	495c      	ldr	r1, [pc, #368]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a792:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a796:	fb00 f303 	mul.w	r3, r0, r3
 800a79a:	440b      	add	r3, r1
 800a79c:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a7a0:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	4a5c      	ldr	r2, [pc, #368]	@ (800a918 <MCU_ProcessModuleStatus3+0x288>)
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	4956      	ldr	r1, [pc, #344]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a7aa:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800a7ae:	fb00 f303 	mul.w	r3, r0, r3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a7b8:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a7ba:	4b53      	ldr	r3, [pc, #332]	@ (800a908 <MCU_ProcessModuleStatus3+0x278>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 8088 	beq.w	800a8d8 <MCU_ProcessModuleStatus3+0x248>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a7cc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a7d0:	fb01 f303 	mul.w	r3, r1, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	331c      	adds	r3, #28
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7f5 fe8a 	bl	80004f4 <__aeabi_i2d>
 800a7e0:	a341      	add	r3, pc, #260	@ (adr r3, 800a8e8 <MCU_ProcessModuleStatus3+0x258>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 feef 	bl	80005c8 <__aeabi_dmul>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	a33f      	add	r3, pc, #252	@ (adr r3, 800a8f0 <MCU_ProcessModuleStatus3+0x260>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f5 fd2e 	bl	8000258 <__aeabi_dsub>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4610      	mov	r0, r2
 800a802:	4619      	mov	r1, r3
 800a804:	f7f6 f9d8 	bl	8000bb8 <__aeabi_d2f>
 800a808:	4603      	mov	r3, r0
 800a80a:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	4a3d      	ldr	r2, [pc, #244]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a810:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	4413      	add	r3, r2
 800a81a:	3318      	adds	r3, #24
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f5 fe68 	bl	80004f4 <__aeabi_i2d>
 800a824:	a330      	add	r3, pc, #192	@ (adr r3, 800a8e8 <MCU_ProcessModuleStatus3+0x258>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fecd 	bl	80005c8 <__aeabi_dmul>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4610      	mov	r0, r2
 800a834:	4619      	mov	r1, r3
 800a836:	a32e      	add	r3, pc, #184	@ (adr r3, 800a8f0 <MCU_ProcessModuleStatus3+0x260>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fd0c 	bl	8000258 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4610      	mov	r0, r2
 800a846:	4619      	mov	r1, r3
 800a848:	f7f6 f9b6 	bl	8000bb8 <__aeabi_d2f>
 800a84c:	4603      	mov	r3, r0
 800a84e:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	4a2c      	ldr	r2, [pc, #176]	@ (800a904 <MCU_ProcessModuleStatus3+0x274>)
 800a854:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800a858:	fb01 f303 	mul.w	r3, r1, r3
 800a85c:	4413      	add	r3, r2
 800a85e:	331a      	adds	r3, #26
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	f7f5 fe46 	bl	80004f4 <__aeabi_i2d>
 800a868:	a31f      	add	r3, pc, #124	@ (adr r3, 800a8e8 <MCU_ProcessModuleStatus3+0x258>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f5 feab 	bl	80005c8 <__aeabi_dmul>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4610      	mov	r0, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	a31d      	add	r3, pc, #116	@ (adr r3, 800a8f0 <MCU_ProcessModuleStatus3+0x260>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fcea 	bl	8000258 <__aeabi_dsub>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4610      	mov	r0, r2
 800a88a:	4619      	mov	r1, r3
 800a88c:	f7f6 f994 	bl	8000bb8 <__aeabi_d2f>
 800a890:	4603      	mov	r3, r0
 800a892:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800a894:	4b1a      	ldr	r3, [pc, #104]	@ (800a900 <MCU_ProcessModuleStatus3+0x270>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800a89c:	461e      	mov	r6, r3
 800a89e:	6938      	ldr	r0, [r7, #16]
 800a8a0:	f7f5 fe3a 	bl	8000518 <__aeabi_f2d>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7f5 fe35 	bl	8000518 <__aeabi_f2d>
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	4689      	mov	r9, r1
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f7f5 fe30 	bl	8000518 <__aeabi_f2d>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a8c4:	e9cd 4500 	strd	r4, r5, [sp]
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	4914      	ldr	r1, [pc, #80]	@ (800a91c <MCU_ProcessModuleStatus3+0x28c>)
 800a8cc:	4810      	ldr	r0, [pc, #64]	@ (800a910 <MCU_ProcessModuleStatus3+0x280>)
 800a8ce:	f009 ff0b 	bl	80146e8 <siprintf>
      serialOut(tempBuffer);
 800a8d2:	480f      	ldr	r0, [pc, #60]	@ (800a910 <MCU_ProcessModuleStatus3+0x280>)
 800a8d4:	f7fa fe94 	bl	8005600 <serialOut>
}
 800a8d8:	bf00      	nop
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	bf00      	nop
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	47ae147b 	.word	0x47ae147b
 800a8ec:	3f847ae1 	.word	0x3f847ae1
 800a8f0:	cccccccd 	.word	0xcccccccd
 800a8f4:	404baccc 	.word	0x404baccc
 800a8f8:	20000da8 	.word	0x20000da8
 800a8fc:	2000a66c 	.word	0x2000a66c
 800a900:	20000d9c 	.word	0x20000d9c
 800a904:	20000dec 	.word	0x20000dec
 800a908:	2000000c 	.word	0x2000000c
 800a90c:	080193a4 	.word	0x080193a4
 800a910:	20000b5c 	.word	0x20000b5c
 800a914:	200005d0 	.word	0x200005d0
 800a918:	20000d20 	.word	0x20000d20
 800a91c:	080193e4 	.word	0x080193e4

0800a920 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800a920:	b580      	push	{r7, lr}
 800a922:	b094      	sub	sp, #80	@ 0x50
 800a924:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800a926:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a92a:	2208      	movs	r2, #8
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f009 ff3f 	bl	80147b2 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800a934:	4a31      	ldr	r2, [pc, #196]	@ (800a9fc <MCU_ProcessCellCommStatus1+0xdc>)
 800a936:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a93a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a93e:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800a942:	4b2f      	ldr	r3, [pc, #188]	@ (800aa00 <MCU_ProcessCellCommStatus1+0xe0>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f003 0308 	and.w	r3, r3, #8
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d052      	beq.n	800a9f4 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a94e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a952:	2bff      	cmp	r3, #255	@ 0xff
 800a954:	d10a      	bne.n	800a96c <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800a956:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800a95e:	f107 0318 	add.w	r3, r7, #24
 800a962:	4928      	ldr	r1, [pc, #160]	@ (800aa04 <MCU_ProcessCellCommStatus1+0xe4>)
 800a964:	4618      	mov	r0, r3
 800a966:	f009 febf 	bl	80146e8 <siprintf>
 800a96a:	e019      	b.n	800a9a0 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800a96c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a970:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a974:	429a      	cmp	r2, r3
 800a976:	d109      	bne.n	800a98c <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800a978:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a97c:	461a      	mov	r2, r3
 800a97e:	f107 0318 	add.w	r3, r7, #24
 800a982:	4921      	ldr	r1, [pc, #132]	@ (800aa08 <MCU_ProcessCellCommStatus1+0xe8>)
 800a984:	4618      	mov	r0, r3
 800a986:	f009 feaf 	bl	80146e8 <siprintf>
 800a98a:	e009      	b.n	800a9a0 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800a98c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a990:	461a      	mov	r2, r3
 800a992:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a996:	f107 0018 	add.w	r0, r7, #24
 800a99a:	491c      	ldr	r1, [pc, #112]	@ (800aa0c <MCU_ProcessCellCommStatus1+0xec>)
 800a99c:	f009 fea4 	bl	80146e8 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800a9a0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800a9a4:	2bff      	cmp	r3, #255	@ 0xff
 800a9a6:	d105      	bne.n	800a9b4 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800a9a8:	1d3b      	adds	r3, r7, #4
 800a9aa:	4919      	ldr	r1, [pc, #100]	@ (800aa10 <MCU_ProcessCellCommStatus1+0xf0>)
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f009 fe9b 	bl	80146e8 <siprintf>
 800a9b2:	e007      	b.n	800a9c4 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800a9b4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	1d3b      	adds	r3, r7, #4
 800a9bc:	4915      	ldr	r1, [pc, #84]	@ (800aa14 <MCU_ProcessCellCommStatus1+0xf4>)
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f009 fe92 	bl	80146e8 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a9c4:	4b14      	ldr	r3, [pc, #80]	@ (800aa18 <MCU_ProcessCellCommStatus1+0xf8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a9cc:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a9ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a9d0:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a9d2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a9d6:	f107 0218 	add.w	r2, r7, #24
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	1d3b      	adds	r3, r7, #4
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	9100      	str	r1, [sp, #0]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	490d      	ldr	r1, [pc, #52]	@ (800aa1c <MCU_ProcessCellCommStatus1+0xfc>)
 800a9e8:	480d      	ldr	r0, [pc, #52]	@ (800aa20 <MCU_ProcessCellCommStatus1+0x100>)
 800a9ea:	f009 fe7d 	bl	80146e8 <siprintf>

    serialOut(tempBuffer);
 800a9ee:	480c      	ldr	r0, [pc, #48]	@ (800aa20 <MCU_ProcessCellCommStatus1+0x100>)
 800a9f0:	f7fa fe06 	bl	8005600 <serialOut>
  }
}
 800a9f4:	bf00      	nop
 800a9f6:	3740      	adds	r7, #64	@ 0x40
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20000da8 	.word	0x20000da8
 800aa00:	2000000c 	.word	0x2000000c
 800aa04:	08019450 	.word	0x08019450
 800aa08:	0801945c 	.word	0x0801945c
 800aa0c:	08019468 	.word	0x08019468
 800aa10:	08019474 	.word	0x08019474
 800aa14:	0801947c 	.word	0x0801947c
 800aa18:	20000d9c 	.word	0x20000d9c
 800aa1c:	08019490 	.word	0x08019490
 800aa20:	20000b5c 	.word	0x20000b5c
 800aa24:	00000000 	.word	0x00000000

0800aa28 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800aa28:	b5b0      	push	{r4, r5, r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	4603      	mov	r3, r0
 800aa30:	460a      	mov	r2, r1
 800aa32:	71fb      	strb	r3, [r7, #7]
 800aa34:	4613      	mov	r3, r2
 800aa36:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800aa3c:	79bb      	ldrb	r3, [r7, #6]
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	7a7b      	ldrb	r3, [r7, #9]
 800aa46:	f362 0303 	bfi	r3, r2, #0, #4
 800aa4a:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800aa4c:	7a7b      	ldrb	r3, [r7, #9]
 800aa4e:	f36f 1307 	bfc	r3, #4, #4
 800aa52:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800aa54:	4b4c      	ldr	r3, [pc, #304]	@ (800ab88 <MCU_TransmitState+0x160>)
 800aa56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa5a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800aa5c:	4b4b      	ldr	r3, [pc, #300]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800aa62:	4b4a      	ldr	r3, [pc, #296]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800aa68:	4b48      	ldr	r3, [pc, #288]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	4a47      	ldr	r2, [pc, #284]	@ (800ab90 <MCU_TransmitState+0x168>)
 800aa72:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800aa74:	4a45      	ldr	r2, [pc, #276]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa76:	8813      	ldrh	r3, [r2, #0]
 800aa78:	f240 5114 	movw	r1, #1300	@ 0x514
 800aa7c:	f361 030a 	bfi	r3, r1, #0, #11
 800aa80:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800aa82:	79fa      	ldrb	r2, [r7, #7]
 800aa84:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800aa88:	4940      	ldr	r1, [pc, #256]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa8a:	680b      	ldr	r3, [r1, #0]
 800aa8c:	f362 23dc 	bfi	r3, r2, #11, #18
 800aa90:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800aa92:	4a3e      	ldr	r2, [pc, #248]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa94:	7913      	ldrb	r3, [r2, #4]
 800aa96:	f36f 1386 	bfc	r3, #6, #1
 800aa9a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800aa9c:	4a3b      	ldr	r2, [pc, #236]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aa9e:	7913      	ldrb	r3, [r2, #4]
 800aaa0:	2104      	movs	r1, #4
 800aaa2:	f361 0303 	bfi	r3, r1, #0, #4
 800aaa6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800aaa8:	4a38      	ldr	r2, [pc, #224]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aaaa:	7913      	ldrb	r3, [r2, #4]
 800aaac:	f36f 13c7 	bfc	r3, #7, #1
 800aab0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800aab2:	4a36      	ldr	r2, [pc, #216]	@ (800ab8c <MCU_TransmitState+0x164>)
 800aab4:	7913      	ldrb	r3, [r2, #4]
 800aab6:	f043 0310 	orr.w	r3, r3, #16
 800aaba:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800aabc:	4b35      	ldr	r3, [pc, #212]	@ (800ab94 <MCU_TransmitState+0x16c>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d019      	beq.n	800aafc <MCU_TransmitState+0xd4>
 800aac8:	79fc      	ldrb	r4, [r7, #7]
 800aaca:	79bd      	ldrb	r5, [r7, #6]
 800aacc:	4b2e      	ldr	r3, [pc, #184]	@ (800ab88 <MCU_TransmitState+0x160>)
 800aace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7f5 fd0e 	bl	80004f4 <__aeabi_i2d>
 800aad8:	a329      	add	r3, pc, #164	@ (adr r3, 800ab80 <MCU_TransmitState+0x158>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fd73 	bl	80005c8 <__aeabi_dmul>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	e9cd 2300 	strd	r2, r3, [sp]
 800aaea:	462b      	mov	r3, r5
 800aaec:	4622      	mov	r2, r4
 800aaee:	492a      	ldr	r1, [pc, #168]	@ (800ab98 <MCU_TransmitState+0x170>)
 800aaf0:	482a      	ldr	r0, [pc, #168]	@ (800ab9c <MCU_TransmitState+0x174>)
 800aaf2:	f009 fdf9 	bl	80146e8 <siprintf>
 800aaf6:	4829      	ldr	r0, [pc, #164]	@ (800ab9c <MCU_TransmitState+0x174>)
 800aaf8:	f7fa fd82 	bl	8005600 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800aafc:	2001      	movs	r0, #1
 800aafe:	f7fe f8f1 	bl	8008ce4 <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 f9c9 	bl	800ae9c <MCU_ModuleIndexFromId>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 800ab0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ab88 <MCU_TransmitState+0x160>)
 800ab10:	7d1b      	ldrb	r3, [r3, #20]
 800ab12:	7bfa      	ldrb	r2, [r7, #15]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d02c      	beq.n	800ab72 <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	4a21      	ldr	r2, [pc, #132]	@ (800aba0 <MCU_TransmitState+0x178>)
 800ab1c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ab20:	fb01 f303 	mul.w	r3, r1, r3
 800ab24:	4413      	add	r3, r2
 800ab26:	3329      	adds	r3, #41	@ 0x29
 800ab28:	79ba      	ldrb	r2, [r7, #6]
 800ab2a:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	4a1c      	ldr	r2, [pc, #112]	@ (800aba0 <MCU_TransmitState+0x178>)
 800ab30:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	4413      	add	r3, r2
 800ab3a:	332a      	adds	r3, #42	@ 0x2a
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800ab40:	4b18      	ldr	r3, [pc, #96]	@ (800aba4 <MCU_TransmitState+0x17c>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab48:	4915      	ldr	r1, [pc, #84]	@ (800aba0 <MCU_TransmitState+0x178>)
 800ab4a:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ab4e:	fb00 f303 	mul.w	r3, r0, r3
 800ab52:	440b      	add	r3, r1
 800ab54:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ab58:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	4a12      	ldr	r2, [pc, #72]	@ (800aba8 <MCU_TransmitState+0x180>)
 800ab5e:	6812      	ldr	r2, [r2, #0]
 800ab60:	490f      	ldr	r1, [pc, #60]	@ (800aba0 <MCU_TransmitState+0x178>)
 800ab62:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ab66:	fb00 f303 	mul.w	r3, r0, r3
 800ab6a:	440b      	add	r3, r1
 800ab6c:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800ab70:	601a      	str	r2, [r3, #0]
  }
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bdb0      	pop	{r4, r5, r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	f3af 8000 	nop.w
 800ab80:	eb851eb8 	.word	0xeb851eb8
 800ab84:	3f8eb851 	.word	0x3f8eb851
 800ab88:	2000a66c 	.word	0x2000a66c
 800ab8c:	20000d40 	.word	0x20000d40
 800ab90:	20000d4c 	.word	0x20000d4c
 800ab94:	2000000c 	.word	0x2000000c
 800ab98:	08019514 	.word	0x08019514
 800ab9c:	20000b5c 	.word	0x20000b5c
 800aba0:	20000dec 	.word	0x20000dec
 800aba4:	200005d0 	.word	0x200005d0
 800aba8:	20000d20 	.word	0x20000d20

0800abac <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	7b3b      	ldrb	r3, [r7, #12]
 800abc0:	f362 0303 	bfi	r3, r2, #0, #4
 800abc4:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800abc6:	7b3b      	ldrb	r3, [r7, #12]
 800abc8:	f36f 1307 	bfc	r3, #4, #4
 800abcc:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800abce:	4b1c      	ldr	r3, [pc, #112]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800abd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800abda:	4b19      	ldr	r3, [pc, #100]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800abdc:	2200      	movs	r2, #0
 800abde:	609a      	str	r2, [r3, #8]

  memcpy(txd, &maxState, sizeof(maxState));
 800abe0:	7b3a      	ldrb	r2, [r7, #12]
 800abe2:	4b18      	ldr	r3, [pc, #96]	@ (800ac44 <MCU_TransmitMaxState+0x98>)
 800abe4:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800abe6:	4a16      	ldr	r2, [pc, #88]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800abe8:	8813      	ldrh	r3, [r2, #0]
 800abea:	f240 5117 	movw	r1, #1303	@ 0x517
 800abee:	f361 030a 	bfi	r3, r1, #0, #11
 800abf2:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800abf4:	4b14      	ldr	r3, [pc, #80]	@ (800ac48 <MCU_TransmitMaxState+0x9c>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	461a      	mov	r2, r3
 800abfa:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800abfe:	4910      	ldr	r1, [pc, #64]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800ac00:	680b      	ldr	r3, [r1, #0]
 800ac02:	f362 23dc 	bfi	r3, r2, #11, #18
 800ac06:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800ac08:	4a0d      	ldr	r2, [pc, #52]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800ac0a:	7913      	ldrb	r3, [r2, #4]
 800ac0c:	f36f 1386 	bfc	r3, #6, #1
 800ac10:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800ac12:	4a0b      	ldr	r2, [pc, #44]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800ac14:	7913      	ldrb	r3, [r2, #4]
 800ac16:	2101      	movs	r1, #1
 800ac18:	f361 0303 	bfi	r3, r1, #0, #4
 800ac1c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ac1e:	4a08      	ldr	r2, [pc, #32]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800ac20:	7913      	ldrb	r3, [r2, #4]
 800ac22:	f36f 13c7 	bfc	r3, #7, #1
 800ac26:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800ac28:	4a05      	ldr	r2, [pc, #20]	@ (800ac40 <MCU_TransmitMaxState+0x94>)
 800ac2a:	7913      	ldrb	r3, [r2, #4]
 800ac2c:	f043 0310 	orr.w	r3, r3, #16
 800ac30:	7113      	strb	r3, [r2, #4]

//  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800ac32:	2001      	movs	r0, #1
 800ac34:	f7fe f856 	bl	8008ce4 <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	20000d40 	.word	0x20000d40
 800ac44:	20000d4c 	.word	0x20000d4c
 800ac48:	2000a66c 	.word	0x2000a66c

0800ac4c <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800ac4c:	b5b0      	push	{r4, r5, r7, lr}
 800ac4e:	b08a      	sub	sp, #40	@ 0x28
 800ac50:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800ac56:	4a85      	ldr	r2, [pc, #532]	@ (800ae6c <MCU_ProcessCellDetail+0x220>)
 800ac58:	1d3b      	adds	r3, r7, #4
 800ac5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac5e:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800ac62:	4b83      	ldr	r3, [pc, #524]	@ (800ae70 <MCU_ProcessCellDetail+0x224>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f003 0308 	and.w	r3, r3, #8
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d017      	beq.n	800ac9e <MCU_ProcessCellDetail+0x52>
 800ac6e:	4b81      	ldr	r3, [pc, #516]	@ (800ae74 <MCU_ProcessCellDetail+0x228>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800ac76:	461c      	mov	r4, r3
 800ac78:	797b      	ldrb	r3, [r7, #5]
 800ac7a:	461d      	mov	r5, r3
 800ac7c:	793b      	ldrb	r3, [r7, #4]
 800ac7e:	7aba      	ldrb	r2, [r7, #10]
 800ac80:	88f9      	ldrh	r1, [r7, #6]
 800ac82:	8938      	ldrh	r0, [r7, #8]
 800ac84:	9003      	str	r0, [sp, #12]
 800ac86:	9102      	str	r1, [sp, #8]
 800ac88:	9201      	str	r2, [sp, #4]
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	4622      	mov	r2, r4
 800ac90:	4979      	ldr	r1, [pc, #484]	@ (800ae78 <MCU_ProcessCellDetail+0x22c>)
 800ac92:	487a      	ldr	r0, [pc, #488]	@ (800ae7c <MCU_ProcessCellDetail+0x230>)
 800ac94:	f009 fd28 	bl	80146e8 <siprintf>
 800ac98:	4878      	ldr	r0, [pc, #480]	@ (800ae7c <MCU_ProcessCellDetail+0x230>)
 800ac9a:	f7fa fcb1 	bl	8005600 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800ac9e:	4b78      	ldr	r3, [pc, #480]	@ (800ae80 <MCU_ProcessCellDetail+0x234>)
 800aca0:	7d1b      	ldrb	r3, [r3, #20]
 800aca2:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800aca4:	2300      	movs	r3, #0
 800aca6:	75bb      	strb	r3, [r7, #22]
 800aca8:	e015      	b.n	800acd6 <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800acaa:	4b72      	ldr	r3, [pc, #456]	@ (800ae74 <MCU_ProcessCellDetail+0x228>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800acb2:	7dbb      	ldrb	r3, [r7, #22]
 800acb4:	4973      	ldr	r1, [pc, #460]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800acb6:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800acba:	fb00 f303 	mul.w	r3, r0, r3
 800acbe:	440b      	add	r3, r1
 800acc0:	3308      	adds	r3, #8
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800acc8:	429a      	cmp	r2, r3
 800acca:	d101      	bne.n	800acd0 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 800accc:	7dbb      	ldrb	r3, [r7, #22]
 800acce:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800acd0:	7dbb      	ldrb	r3, [r7, #22]
 800acd2:	3301      	adds	r3, #1
 800acd4:	75bb      	strb	r3, [r7, #22]
 800acd6:	4b6a      	ldr	r3, [pc, #424]	@ (800ae80 <MCU_ProcessCellDetail+0x234>)
 800acd8:	7d1b      	ldrb	r3, [r3, #20]
 800acda:	7dba      	ldrb	r2, [r7, #22]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d3e4      	bcc.n	800acaa <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
 800ace2:	7978      	ldrb	r0, [r7, #5]
 800ace4:	4a67      	ldr	r2, [pc, #412]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ace6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800acea:	fb01 f303 	mul.w	r3, r1, r3
 800acee:	4413      	add	r3, r2
 800acf0:	332d      	adds	r3, #45	@ 0x2d
 800acf2:	4602      	mov	r2, r0
 800acf4:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800acf6:	7dfa      	ldrb	r2, [r7, #23]
 800acf8:	793b      	ldrb	r3, [r7, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	7abc      	ldrb	r4, [r7, #10]
 800acfe:	4961      	ldr	r1, [pc, #388]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ad00:	4603      	mov	r3, r0
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	4403      	add	r3, r0
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad0c:	fb00 f202 	mul.w	r2, r0, r2
 800ad10:	4413      	add	r3, r2
 800ad12:	440b      	add	r3, r1
 800ad14:	3332      	adds	r3, #50	@ 0x32
 800ad16:	4622      	mov	r2, r4
 800ad18:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800ad1a:	7dfa      	ldrb	r2, [r7, #23]
 800ad1c:	793b      	ldrb	r3, [r7, #4]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	7afc      	ldrb	r4, [r7, #11]
 800ad22:	4958      	ldr	r1, [pc, #352]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ad24:	4603      	mov	r3, r0
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	4403      	add	r3, r0
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad30:	fb00 f202 	mul.w	r2, r0, r2
 800ad34:	4413      	add	r3, r2
 800ad36:	440b      	add	r3, r1
 800ad38:	3333      	adds	r3, #51	@ 0x33
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800ad3e:	7dfa      	ldrb	r2, [r7, #23]
 800ad40:	793b      	ldrb	r3, [r7, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	88fc      	ldrh	r4, [r7, #6]
 800ad46:	494f      	ldr	r1, [pc, #316]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ad48:	4603      	mov	r3, r0
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	4403      	add	r3, r0
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad54:	fb00 f202 	mul.w	r2, r0, r2
 800ad58:	4413      	add	r3, r2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	3330      	adds	r3, #48	@ 0x30
 800ad5e:	4622      	mov	r2, r4
 800ad60:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800ad62:	7dfa      	ldrb	r2, [r7, #23]
 800ad64:	793b      	ldrb	r3, [r7, #4]
 800ad66:	4618      	mov	r0, r3
 800ad68:	893c      	ldrh	r4, [r7, #8]
 800ad6a:	4946      	ldr	r1, [pc, #280]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4403      	add	r3, r0
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad78:	fb00 f202 	mul.w	r2, r0, r2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	440b      	add	r3, r1
 800ad80:	332e      	adds	r3, #46	@ 0x2e
 800ad82:	4622      	mov	r2, r4
 800ad84:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800ad86:	4b40      	ldr	r3, [pc, #256]	@ (800ae88 <MCU_ProcessCellDetail+0x23c>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ad8e:	493d      	ldr	r1, [pc, #244]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ad90:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800ad94:	fb00 f303 	mul.w	r3, r0, r3
 800ad98:	440b      	add	r3, r1
 800ad9a:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800ad9e:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
 800ada2:	4a3a      	ldr	r2, [pc, #232]	@ (800ae8c <MCU_ProcessCellDetail+0x240>)
 800ada4:	6812      	ldr	r2, [r2, #0]
 800ada6:	4937      	ldr	r1, [pc, #220]	@ (800ae84 <MCU_ProcessCellDetail+0x238>)
 800ada8:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800adac:	fb00 f303 	mul.w	r3, r0, r3
 800adb0:	440b      	add	r3, r1
 800adb2:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800adb6:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800adb8:	793b      	ldrb	r3, [r7, #4]
 800adba:	461a      	mov	r2, r3
 800adbc:	797b      	ldrb	r3, [r7, #5]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	429a      	cmp	r2, r3
 800adc2:	da4f      	bge.n	800ae64 <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 800adc4:	793b      	ldrb	r3, [r7, #4]
 800adc6:	3301      	adds	r3, #1
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800adcc:	4b30      	ldr	r3, [pc, #192]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800add2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800add4:	2200      	movs	r2, #0
 800add6:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800add8:	4b2d      	ldr	r3, [pc, #180]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800adda:	2200      	movs	r2, #0
 800addc:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800adde:	4b2d      	ldr	r3, [pc, #180]	@ (800ae94 <MCU_ProcessCellDetail+0x248>)
 800ade0:	461a      	mov	r2, r3
 800ade2:	f107 030c 	add.w	r3, r7, #12
 800ade6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adea:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800adee:	4a28      	ldr	r2, [pc, #160]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800adf0:	8813      	ldrh	r3, [r2, #0]
 800adf2:	f240 5115 	movw	r1, #1301	@ 0x515
 800adf6:	f361 030a 	bfi	r3, r1, #0, #11
 800adfa:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800adfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ae74 <MCU_ProcessCellDetail+0x228>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800ae04:	4a22      	ldr	r2, [pc, #136]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800ae06:	6813      	ldr	r3, [r2, #0]
 800ae08:	f361 23dc 	bfi	r3, r1, #11, #18
 800ae0c:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ae0e:	4a20      	ldr	r2, [pc, #128]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800ae10:	7913      	ldrb	r3, [r2, #4]
 800ae12:	f36f 1386 	bfc	r3, #6, #1
 800ae16:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800ae18:	4a1d      	ldr	r2, [pc, #116]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800ae1a:	7913      	ldrb	r3, [r2, #4]
 800ae1c:	2102      	movs	r1, #2
 800ae1e:	f361 0303 	bfi	r3, r1, #0, #4
 800ae22:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ae24:	4a1a      	ldr	r2, [pc, #104]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800ae26:	7913      	ldrb	r3, [r2, #4]
 800ae28:	f36f 13c7 	bfc	r3, #7, #1
 800ae2c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ae2e:	4a18      	ldr	r2, [pc, #96]	@ (800ae90 <MCU_ProcessCellDetail+0x244>)
 800ae30:	7913      	ldrb	r3, [r2, #4]
 800ae32:	f043 0310 	orr.w	r3, r3, #16
 800ae36:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800ae38:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <MCU_ProcessCellDetail+0x224>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00c      	beq.n	800ae5e <MCU_ProcessCellDetail+0x212>
 800ae44:	4b0b      	ldr	r3, [pc, #44]	@ (800ae74 <MCU_ProcessCellDetail+0x228>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	7b7b      	ldrb	r3, [r7, #13]
 800ae50:	4911      	ldr	r1, [pc, #68]	@ (800ae98 <MCU_ProcessCellDetail+0x24c>)
 800ae52:	480a      	ldr	r0, [pc, #40]	@ (800ae7c <MCU_ProcessCellDetail+0x230>)
 800ae54:	f009 fc48 	bl	80146e8 <siprintf>
 800ae58:	4808      	ldr	r0, [pc, #32]	@ (800ae7c <MCU_ProcessCellDetail+0x230>)
 800ae5a:	f7fa fbd1 	bl	8005600 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800ae5e:	2001      	movs	r0, #1
 800ae60:	f7fd ff40 	bl	8008ce4 <MCU_TransmitMessageQueue>
  }
}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae6c:	20000da8 	.word	0x20000da8
 800ae70:	2000000c 	.word	0x2000000c
 800ae74:	20000d9c 	.word	0x20000d9c
 800ae78:	0801954c 	.word	0x0801954c
 800ae7c:	20000b5c 	.word	0x20000b5c
 800ae80:	2000a66c 	.word	0x2000a66c
 800ae84:	20000dec 	.word	0x20000dec
 800ae88:	200005d0 	.word	0x200005d0
 800ae8c:	20000d20 	.word	0x20000d20
 800ae90:	20000d40 	.word	0x20000d40
 800ae94:	20000d4c 	.word	0x20000d4c
 800ae98:	080195a8 	.word	0x080195a8

0800ae9c <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 800aea6:	4b15      	ldr	r3, [pc, #84]	@ (800aefc <MCU_ModuleIndexFromId+0x60>)
 800aea8:	7d1b      	ldrb	r3, [r3, #20]
 800aeaa:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800aeac:	2300      	movs	r3, #0
 800aeae:	73bb      	strb	r3, [r7, #14]
 800aeb0:	e010      	b.n	800aed4 <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	4a12      	ldr	r2, [pc, #72]	@ (800af00 <MCU_ModuleIndexFromId+0x64>)
 800aeb6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800aeba:	fb01 f303 	mul.w	r3, r1, r3
 800aebe:	4413      	add	r3, r2
 800aec0:	3308      	adds	r3, #8
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	79fa      	ldrb	r2, [r7, #7]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d101      	bne.n	800aece <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
 800aecc:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	3301      	adds	r3, #1
 800aed2:	73bb      	strb	r3, [r7, #14]
 800aed4:	4b09      	ldr	r3, [pc, #36]	@ (800aefc <MCU_ModuleIndexFromId+0x60>)
 800aed6:	7d1b      	ldrb	r3, [r3, #20]
 800aed8:	7bba      	ldrb	r2, [r7, #14]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d3e9      	bcc.n	800aeb2 <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 800aede:	4b07      	ldr	r3, [pc, #28]	@ (800aefc <MCU_ModuleIndexFromId+0x60>)
 800aee0:	7d1b      	ldrb	r3, [r3, #20]
 800aee2:	7bfa      	ldrb	r2, [r7, #15]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d001      	beq.n	800aeec <MCU_ModuleIndexFromId+0x50>
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	e001      	b.n	800aef0 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 800aeec:	4b03      	ldr	r3, [pc, #12]	@ (800aefc <MCU_ModuleIndexFromId+0x60>)
 800aeee:	7d1b      	ldrb	r3, [r3, #20]

}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	2000a66c 	.word	0x2000a66c
 800af00:	20000dec 	.word	0x20000dec

0800af04 <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800af04:	b590      	push	{r4, r7, lr}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800af0e:	4b32      	ldr	r3, [pc, #200]	@ (800afd8 <MCU_TicksSinceLastMessage+0xd4>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af14:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800af16:	4b31      	ldr	r3, [pc, #196]	@ (800afdc <MCU_TicksSinceLastMessage+0xd8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff ffbc 	bl	800ae9c <MCU_ModuleIndexFromId>
 800af24:	4603      	mov	r3, r0
 800af26:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800af28:	4b2d      	ldr	r3, [pc, #180]	@ (800afe0 <MCU_TicksSinceLastMessage+0xdc>)
 800af2a:	7d1b      	ldrb	r3, [r3, #20]
 800af2c:	7afa      	ldrb	r2, [r7, #11]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d040      	beq.n	800afb4 <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	4a2b      	ldr	r2, [pc, #172]	@ (800afe4 <MCU_TicksSinceLastMessage+0xe0>)
 800af36:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	4413      	add	r3, r2
 800af40:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d10d      	bne.n	800af68 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	4a25      	ldr	r2, [pc, #148]	@ (800afe4 <MCU_TicksSinceLastMessage+0xe0>)
 800af50:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	e023      	b.n	800afb0 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800af68:	4b1b      	ldr	r3, [pc, #108]	@ (800afd8 <MCU_TicksSinceLastMessage+0xd4>)
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	491d      	ldr	r1, [pc, #116]	@ (800afe4 <MCU_TicksSinceLastMessage+0xe0>)
 800af70:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800af74:	fb00 f303 	mul.w	r3, r0, r3
 800af78:	440b      	add	r3, r1
 800af7a:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	1ad2      	subs	r2, r2, r3
 800af82:	4b15      	ldr	r3, [pc, #84]	@ (800afd8 <MCU_TicksSinceLastMessage+0xd4>)
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	3301      	adds	r3, #1
 800af88:	7af9      	ldrb	r1, [r7, #11]
 800af8a:	4816      	ldr	r0, [pc, #88]	@ (800afe4 <MCU_TicksSinceLastMessage+0xe0>)
 800af8c:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800af90:	fb04 f101 	mul.w	r1, r4, r1
 800af94:	4401      	add	r1, r0
 800af96:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 800af9a:	6809      	ldr	r1, [r1, #0]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	1a41      	subs	r1, r0, r1
 800afa0:	3901      	subs	r1, #1
 800afa2:	fb01 f303 	mul.w	r3, r1, r3
 800afa6:	441a      	add	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	4413      	add	r3, r2
 800afac:	3301      	adds	r3, #1
 800afae:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	e00d      	b.n	800afd0 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800afb4:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <MCU_TicksSinceLastMessage+0xe4>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f003 0309 	and.w	r3, r3, #9
 800afbc:	2b09      	cmp	r3, #9
 800afbe:	d106      	bne.n	800afce <MCU_TicksSinceLastMessage+0xca>
 800afc0:	490a      	ldr	r1, [pc, #40]	@ (800afec <MCU_TicksSinceLastMessage+0xe8>)
 800afc2:	480b      	ldr	r0, [pc, #44]	@ (800aff0 <MCU_TicksSinceLastMessage+0xec>)
 800afc4:	f009 fb90 	bl	80146e8 <siprintf>
 800afc8:	4809      	ldr	r0, [pc, #36]	@ (800aff0 <MCU_TicksSinceLastMessage+0xec>)
 800afca:	f7fa fb19 	bl	8005600 <serialOut>
    return 0; // TODO Handle this error
 800afce:	2300      	movs	r3, #0
  }
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	371c      	adds	r7, #28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}
 800afd8:	200005d0 	.word	0x200005d0
 800afdc:	20000d20 	.word	0x20000d20
 800afe0:	2000a66c 	.word	0x2000a66c
 800afe4:	20000dec 	.word	0x20000dec
 800afe8:	2000000c 	.word	0x2000000c
 800afec:	080195d8 	.word	0x080195d8
 800aff0:	20000b5c 	.word	0x20000b5c

0800aff4 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800affe:	4b32      	ldr	r3, [pc, #200]	@ (800b0c8 <MCU_TicksSinceLastStateTx+0xd4>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b004:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b006:	4b31      	ldr	r3, [pc, #196]	@ (800b0cc <MCU_TicksSinceLastStateTx+0xd8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff ff44 	bl	800ae9c <MCU_ModuleIndexFromId>
 800b014:	4603      	mov	r3, r0
 800b016:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800b018:	4b2d      	ldr	r3, [pc, #180]	@ (800b0d0 <MCU_TicksSinceLastStateTx+0xdc>)
 800b01a:	7d1b      	ldrb	r3, [r3, #20]
 800b01c:	7afa      	ldrb	r2, [r7, #11]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d040      	beq.n	800b0a4 <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	4a2b      	ldr	r2, [pc, #172]	@ (800b0d4 <MCU_TicksSinceLastStateTx+0xe0>)
 800b026:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b02a:	fb01 f303 	mul.w	r3, r1, r3
 800b02e:	4413      	add	r3, r2
 800b030:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d10d      	bne.n	800b058 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	4a25      	ldr	r2, [pc, #148]	@ (800b0d4 <MCU_TicksSinceLastStateTx+0xe0>)
 800b040:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	617b      	str	r3, [r7, #20]
 800b056:	e023      	b.n	800b0a0 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800b058:	4b1b      	ldr	r3, [pc, #108]	@ (800b0c8 <MCU_TicksSinceLastStateTx+0xd4>)
 800b05a:	68da      	ldr	r2, [r3, #12]
 800b05c:	7afb      	ldrb	r3, [r7, #11]
 800b05e:	491d      	ldr	r1, [pc, #116]	@ (800b0d4 <MCU_TicksSinceLastStateTx+0xe0>)
 800b060:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800b064:	fb00 f303 	mul.w	r3, r0, r3
 800b068:	440b      	add	r3, r1
 800b06a:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	1ad2      	subs	r2, r2, r3
 800b072:	4b15      	ldr	r3, [pc, #84]	@ (800b0c8 <MCU_TicksSinceLastStateTx+0xd4>)
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	7af9      	ldrb	r1, [r7, #11]
 800b07a:	4816      	ldr	r0, [pc, #88]	@ (800b0d4 <MCU_TicksSinceLastStateTx+0xe0>)
 800b07c:	f240 44c4 	movw	r4, #1220	@ 0x4c4
 800b080:	fb04 f101 	mul.w	r1, r4, r1
 800b084:	4401      	add	r1, r0
 800b086:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 800b08a:	6809      	ldr	r1, [r1, #0]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	1a41      	subs	r1, r0, r1
 800b090:	3901      	subs	r1, #1
 800b092:	fb01 f303 	mul.w	r3, r1, r3
 800b096:	441a      	add	r2, r3
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	4413      	add	r3, r2
 800b09c:	3301      	adds	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	e00d      	b.n	800b0c0 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800b0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d8 <MCU_TicksSinceLastStateTx+0xe4>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0309 	and.w	r3, r3, #9
 800b0ac:	2b09      	cmp	r3, #9
 800b0ae:	d106      	bne.n	800b0be <MCU_TicksSinceLastStateTx+0xca>
 800b0b0:	490a      	ldr	r1, [pc, #40]	@ (800b0dc <MCU_TicksSinceLastStateTx+0xe8>)
 800b0b2:	480b      	ldr	r0, [pc, #44]	@ (800b0e0 <MCU_TicksSinceLastStateTx+0xec>)
 800b0b4:	f009 fb18 	bl	80146e8 <siprintf>
 800b0b8:	4809      	ldr	r0, [pc, #36]	@ (800b0e0 <MCU_TicksSinceLastStateTx+0xec>)
 800b0ba:	f7fa faa1 	bl	8005600 <serialOut>
    return 0; // TODO Handle this error
 800b0be:	2300      	movs	r3, #0
  }
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd90      	pop	{r4, r7, pc}
 800b0c8:	200005d0 	.word	0x200005d0
 800b0cc:	20000d20 	.word	0x20000d20
 800b0d0:	2000a66c 	.word	0x2000a66c
 800b0d4:	20000dec 	.word	0x20000dec
 800b0d8:	2000000c 	.word	0x2000000c
 800b0dc:	08019618 	.word	0x08019618
 800b0e0:	20000b5c 	.word	0x20000b5c

0800b0e4 <MCU_ElapsedTicks>:

/***************************************************************************************************************
*     M C U _ E l a p s e d T i c k s                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_ElapsedTicks(lastContact* pLastContact)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b0ec:	4b16      	ldr	r3, [pc, #88]	@ (800b148 <MCU_ElapsedTicks+0x64>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f2:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b0f4:	4b15      	ldr	r3, [pc, #84]	@ (800b14c <MCU_ElapsedTicks+0x68>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	60fb      	str	r3, [r7, #12]

  if ((overFlows - pLastContact->overflows) == 0){
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	429a      	cmp	r2, r3
 800b102:	d105      	bne.n	800b110 <MCU_ElapsedTicks+0x2c>
    elapsedTicks = timerCNT - pLastContact->ticks;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	e013      	b.n	800b138 <MCU_ElapsedTicks+0x54>
  } else {
    //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pLastContact->ticks) + ( (htim1.Init.Period +1) * (overFlows - (pLastContact->overflows +1))) + (timerCNT);
 800b110:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <MCU_ElapsedTicks+0x64>)
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	1ad2      	subs	r2, r2, r3
 800b11a:	4b0b      	ldr	r3, [pc, #44]	@ (800b148 <MCU_ElapsedTicks+0x64>)
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	6849      	ldr	r1, [r1, #4]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	1a41      	subs	r1, r0, r1
 800b128:	3901      	subs	r1, #1
 800b12a:	fb01 f303 	mul.w	r3, r1, r3
 800b12e:	441a      	add	r2, r3
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	4413      	add	r3, r2
 800b134:	3301      	adds	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
  }
  return elapsedTicks;
 800b138:	697b      	ldr	r3, [r7, #20]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	200005d0 	.word	0x200005d0
 800b14c:	20000d20 	.word	0x20000d20

0800b150 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73bb      	strb	r3, [r7, #14]
  Nop();
 800b15e:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800b160:	2301      	movs	r3, #1
 800b162:	73fb      	strb	r3, [r7, #15]
 800b164:	e05d      	b.n	800b222 <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800b166:	4b34      	ldr	r3, [pc, #208]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b168:	2200      	movs	r2, #0
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	e016      	b.n	800b19c <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800b16e:	f008 fd63 	bl	8013c38 <rand>
 800b172:	4603      	mov	r3, r0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	4a30      	ldr	r2, [pc, #192]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b178:	7812      	ldrb	r2, [r2, #0]
 800b17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17e:	b2d9      	uxtb	r1, r3
 800b180:	4b2e      	ldr	r3, [pc, #184]	@ (800b23c <CAN_TestRegisterAccess+0xec>)
 800b182:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800b184:	4b2c      	ldr	r3, [pc, #176]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	4b2d      	ldr	r3, [pc, #180]	@ (800b240 <CAN_TestRegisterAccess+0xf0>)
 800b18c:	21ff      	movs	r1, #255	@ 0xff
 800b18e:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800b190:	4b29      	ldr	r3, [pc, #164]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	4b26      	ldr	r3, [pc, #152]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	7bfa      	ldrb	r2, [r7, #15]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d8e3      	bhi.n	800b16e <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800b1a6:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	79f8      	ldrb	r0, [r7, #7]
 800b1ae:	4a23      	ldr	r2, [pc, #140]	@ (800b23c <CAN_TestRegisterAccess+0xec>)
 800b1b0:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800b1b4:	f7f6 fbe6 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	79f8      	ldrb	r0, [r7, #7]
 800b1be:	4a20      	ldr	r2, [pc, #128]	@ (800b240 <CAN_TestRegisterAccess+0xf0>)
 800b1c0:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800b1c4:	f7f6 fb2c 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	701a      	strb	r2, [r3, #0]
 800b1d2:	e01e      	b.n	800b212 <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800b1d4:	4b18      	ldr	r3, [pc, #96]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4b18      	ldr	r3, [pc, #96]	@ (800b23c <CAN_TestRegisterAccess+0xec>)
 800b1dc:	5c9a      	ldrb	r2, [r3, r2]
 800b1de:	4b16      	ldr	r3, [pc, #88]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4b16      	ldr	r3, [pc, #88]	@ (800b240 <CAN_TestRegisterAccess+0xf0>)
 800b1e6:	5c5b      	ldrb	r3, [r3, r1]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	bf0c      	ite	eq
 800b1ec:	2301      	moveq	r3, #1
 800b1ee:	2300      	movne	r3, #0
 800b1f0:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	f083 0301 	eor.w	r3, r3, #1
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <CAN_TestRegisterAccess+0xb6>
        Nop();
 800b1fe:	bf00      	nop
        Nop();
 800b200:	bf00      	nop

        // Data mismatch
        return false;
 800b202:	2300      	movs	r3, #0
 800b204:	e013      	b.n	800b22e <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800b206:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	3301      	adds	r3, #1
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	4b0a      	ldr	r3, [pc, #40]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	4b09      	ldr	r3, [pc, #36]	@ (800b238 <CAN_TestRegisterAccess+0xe8>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	7bfa      	ldrb	r2, [r7, #15]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d8db      	bhi.n	800b1d4 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	3301      	adds	r3, #1
 800b220:	73fb      	strb	r3, [r7, #15]
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	2b40      	cmp	r3, #64	@ 0x40
 800b226:	d99e      	bls.n	800b166 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800b228:	bf00      	nop
  Nop();
 800b22a:	bf00      	nop
  return true;
 800b22c:	2301      	movs	r3, #1
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000de8 	.word	0x20000de8
 800b23c:	20000d4c 	.word	0x20000d4c
 800b240:	20000da8 	.word	0x20000da8

0800b244 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800b24e:	2300      	movs	r3, #0
 800b250:	73bb      	strb	r3, [r7, #14]
  Nop();
 800b252:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800b254:	2304      	movs	r3, #4
 800b256:	73fb      	strb	r3, [r7, #15]
 800b258:	e05b      	b.n	800b312 <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800b25a:	4b32      	ldr	r3, [pc, #200]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
 800b260:	e014      	b.n	800b28c <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800b262:	f008 fce9 	bl	8013c38 <rand>
 800b266:	4601      	mov	r1, r0
 800b268:	4b2e      	ldr	r3, [pc, #184]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	b2c9      	uxtb	r1, r1
 800b270:	4b2d      	ldr	r3, [pc, #180]	@ (800b328 <CAN_TestRamAccess+0xe4>)
 800b272:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800b274:	4b2b      	ldr	r3, [pc, #172]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	4b2c      	ldr	r3, [pc, #176]	@ (800b32c <CAN_TestRamAccess+0xe8>)
 800b27c:	21ff      	movs	r1, #255	@ 0xff
 800b27e:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800b280:	4b28      	ldr	r3, [pc, #160]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	3301      	adds	r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	4b26      	ldr	r3, [pc, #152]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	4b25      	ldr	r3, [pc, #148]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	7bfa      	ldrb	r2, [r7, #15]
 800b292:	429a      	cmp	r2, r3
 800b294:	d8e5      	bhi.n	800b262 <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800b296:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	79f8      	ldrb	r0, [r7, #7]
 800b29e:	4a22      	ldr	r2, [pc, #136]	@ (800b328 <CAN_TestRamAccess+0xe4>)
 800b2a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b2a4:	f7f6 fb6e 	bl	8001984 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	79f8      	ldrb	r0, [r7, #7]
 800b2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b32c <CAN_TestRamAccess+0xe8>)
 800b2b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b2b4:	f7f6 fab4 	bl	8001820 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800b2bc:	4b19      	ldr	r3, [pc, #100]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
 800b2c2:	e01e      	b.n	800b302 <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800b2c4:	4b17      	ldr	r3, [pc, #92]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4b17      	ldr	r3, [pc, #92]	@ (800b328 <CAN_TestRamAccess+0xe4>)
 800b2cc:	5c9a      	ldrb	r2, [r3, r2]
 800b2ce:	4b15      	ldr	r3, [pc, #84]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4b15      	ldr	r3, [pc, #84]	@ (800b32c <CAN_TestRamAccess+0xe8>)
 800b2d6:	5c5b      	ldrb	r3, [r3, r1]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	bf0c      	ite	eq
 800b2dc:	2301      	moveq	r3, #1
 800b2de:	2300      	movne	r3, #0
 800b2e0:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	f083 0301 	eor.w	r3, r3, #1
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d003      	beq.n	800b2f6 <CAN_TestRamAccess+0xb2>
        Nop();
 800b2ee:	bf00      	nop
        Nop();
 800b2f0:	bf00      	nop

        // Data mismatch
        return false;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e011      	b.n	800b31a <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	4b09      	ldr	r3, [pc, #36]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	4b08      	ldr	r3, [pc, #32]	@ (800b324 <CAN_TestRamAccess+0xe0>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	7bfa      	ldrb	r2, [r7, #15]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d8db      	bhi.n	800b2c4 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	3304      	adds	r3, #4
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b40      	cmp	r3, #64	@ 0x40
 800b316:	d9a0      	bls.n	800b25a <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800b318:	2301      	movs	r3, #1
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000de8 	.word	0x20000de8
 800b328:	20000d4c 	.word	0x20000d4c
 800b32c:	20000da8 	.word	0x20000da8

0800b330 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800b334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b33c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b348:	bf00      	nop
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <LL_AHB2_GRP1_EnableClock>:
{
 800b352:	b480      	push	{r7}
 800b354:	b085      	sub	sp, #20
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b35e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4313      	orrs	r3, r2
 800b368:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b36a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b36e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4013      	ands	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b376:	68fb      	ldr	r3, [r7, #12]
}
 800b378:	bf00      	nop
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b38c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4313      	orrs	r3, r2
 800b39a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b39c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b3be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b3c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b3ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3da:	68fb      	ldr	r3, [r7, #12]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800b3f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b3f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800b400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4013      	ands	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b40c:	68fb      	ldr	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b085      	sub	sp, #20
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800b422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b426:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b428:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4313      	orrs	r3, r2
 800b430:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b436:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4013      	ands	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b43e:	68fb      	ldr	r3, [r7, #12]
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800b450:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b454:	f7ff ff96 	bl	800b384 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	202e      	movs	r0, #46	@ 0x2e
 800b45e:	f002 fd4a 	bl	800def6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800b462:	202e      	movs	r0, #46	@ 0x2e
 800b464:	f002 fd61 	bl	800df2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b468:	bf00      	nop
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b09c      	sub	sp, #112	@ 0x70
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b474:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	605a      	str	r2, [r3, #4]
 800b47e:	609a      	str	r2, [r3, #8]
 800b480:	60da      	str	r2, [r3, #12]
 800b482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	2250      	movs	r2, #80	@ 0x50
 800b48a:	2100      	movs	r1, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f009 f990 	bl	80147b2 <memset>
  if(huart->Instance==LPUART1)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a2f      	ldr	r2, [pc, #188]	@ (800b554 <HAL_UART_MspInit+0xe8>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d125      	bne.n	800b4e8 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800b49c:	2302      	movs	r3, #2
 800b49e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b4a4:	f107 030c 	add.w	r3, r7, #12
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f004 fe9e 	bl	80101ea <HAL_RCCEx_PeriphCLKConfig>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b4b4:	f7fb fc58 	bl	8006d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b4b8:	2001      	movs	r0, #1
 800b4ba:	f7ff ff95 	bl	800b3e8 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4be:	2001      	movs	r0, #1
 800b4c0:	f7ff ff47 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b4c4:	230c      	movs	r3, #12
 800b4c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b4e2:	f003 f815 	bl	800e510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b4e6:	e031      	b.n	800b54c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800b558 <HAL_UART_MspInit+0xec>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d12c      	bne.n	800b54c <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b4fa:	f107 030c 	add.w	r3, r7, #12
 800b4fe:	4618      	mov	r0, r3
 800b500:	f004 fe73 	bl	80101ea <HAL_RCCEx_PeriphCLKConfig>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800b50a:	f7fb fc2d 	bl	8006d68 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b50e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b512:	f7ff ff82 	bl	800b41a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b516:	2002      	movs	r0, #2
 800b518:	f7ff ff1b 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b51c:	23c0      	movs	r3, #192	@ 0xc0
 800b51e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b520:	2302      	movs	r3, #2
 800b522:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b524:	2300      	movs	r3, #0
 800b526:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b528:	2300      	movs	r3, #0
 800b52a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b52c:	2307      	movs	r3, #7
 800b52e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b530:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b534:	4619      	mov	r1, r3
 800b536:	4809      	ldr	r0, [pc, #36]	@ (800b55c <HAL_UART_MspInit+0xf0>)
 800b538:	f002 ffea 	bl	800e510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	2024      	movs	r0, #36	@ 0x24
 800b542:	f002 fcd8 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b546:	2024      	movs	r0, #36	@ 0x24
 800b548:	f002 fcef 	bl	800df2a <HAL_NVIC_EnableIRQ>
}
 800b54c:	bf00      	nop
 800b54e:	3770      	adds	r7, #112	@ 0x70
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	40008000 	.word	0x40008000
 800b558:	40013800 	.word	0x40013800
 800b55c:	48000400 	.word	0x48000400

0800b560 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a05      	ldr	r2, [pc, #20]	@ (800b584 <HAL_PKA_MspInit+0x24>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d103      	bne.n	800b57a <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800b572:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b576:	f7ff ff05 	bl	800b384 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	58002000 	.word	0x58002000

0800b588 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b096      	sub	sp, #88	@ 0x58
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b590:	f107 0308 	add.w	r3, r7, #8
 800b594:	2250      	movs	r2, #80	@ 0x50
 800b596:	2100      	movs	r1, #0
 800b598:	4618      	mov	r0, r3
 800b59a:	f009 f90a 	bl	80147b2 <memset>
  if(hrtc->Instance==RTC)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a0e      	ldr	r2, [pc, #56]	@ (800b5dc <HAL_RTC_MspInit+0x54>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d115      	bne.n	800b5d4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b5a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b5ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f004 fe16 	bl	80101ea <HAL_RCCEx_PeriphCLKConfig>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800b5c4:	f7fb fbd0 	bl	8006d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b5c8:	f7ff feb2 	bl	800b330 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800b5cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b5d0:	f7ff fef1 	bl	800b3b6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b5d4:	bf00      	nop
 800b5d6:	3758      	adds	r7, #88	@ 0x58
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	40002800 	.word	0x40002800

0800b5e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5e8:	f107 030c 	add.w	r3, r7, #12
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
 800b5f4:	60da      	str	r2, [r3, #12]
 800b5f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a30      	ldr	r2, [pc, #192]	@ (800b6c0 <HAL_SPI_MspInit+0xe0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d118      	bne.n	800b634 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b602:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b606:	f7ff ff08 	bl	800b41a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b60a:	2001      	movs	r0, #1
 800b60c:	f7ff fea1 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800b610:	23c2      	movs	r3, #194	@ 0xc2
 800b612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b614:	2302      	movs	r3, #2
 800b616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b620:	2305      	movs	r3, #5
 800b622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b624:	f107 030c 	add.w	r3, r7, #12
 800b628:	4619      	mov	r1, r3
 800b62a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b62e:	f002 ff6f 	bl	800e510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b632:	e040      	b.n	800b6b6 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a22      	ldr	r2, [pc, #136]	@ (800b6c4 <HAL_SPI_MspInit+0xe4>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d13b      	bne.n	800b6b6 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b63e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b642:	f7ff feb8 	bl	800b3b6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b646:	2004      	movs	r0, #4
 800b648:	f7ff fe83 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b64c:	2001      	movs	r0, #1
 800b64e:	f7ff fe80 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b652:	2302      	movs	r3, #2
 800b654:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b656:	2302      	movs	r3, #2
 800b658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800b662:	2303      	movs	r3, #3
 800b664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b666:	f107 030c 	add.w	r3, r7, #12
 800b66a:	4619      	mov	r1, r3
 800b66c:	4816      	ldr	r0, [pc, #88]	@ (800b6c8 <HAL_SPI_MspInit+0xe8>)
 800b66e:	f002 ff4f 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b672:	2304      	movs	r3, #4
 800b674:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b676:	2302      	movs	r3, #2
 800b678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b67e:	2300      	movs	r3, #0
 800b680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b682:	2305      	movs	r3, #5
 800b684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b686:	f107 030c 	add.w	r3, r7, #12
 800b68a:	4619      	mov	r1, r3
 800b68c:	480e      	ldr	r0, [pc, #56]	@ (800b6c8 <HAL_SPI_MspInit+0xe8>)
 800b68e:	f002 ff3f 	bl	800e510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b696:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b698:	2302      	movs	r3, #2
 800b69a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6a4:	2305      	movs	r3, #5
 800b6a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6a8:	f107 030c 	add.w	r3, r7, #12
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b6b2:	f002 ff2d 	bl	800e510 <HAL_GPIO_Init>
}
 800b6b6:	bf00      	nop
 800b6b8:	3720      	adds	r7, #32
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	40013000 	.word	0x40013000
 800b6c4:	40003800 	.word	0x40003800
 800b6c8:	48000800 	.word	0x48000800

0800b6cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a09      	ldr	r2, [pc, #36]	@ (800b700 <HAL_TIM_Base_MspInit+0x34>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d10b      	bne.n	800b6f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b6de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b6e2:	f7ff fe9a 	bl	800b41a <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	2019      	movs	r0, #25
 800b6ec:	f002 fc03 	bl	800def6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b6f0:	2019      	movs	r0, #25
 800b6f2:	f002 fc1a 	bl	800df2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	40012c00 	.word	0x40012c00

0800b704 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b09c      	sub	sp, #112	@ 0x70
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b70c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	605a      	str	r2, [r3, #4]
 800b716:	609a      	str	r2, [r3, #8]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	2250      	movs	r2, #80	@ 0x50
 800b722:	2100      	movs	r1, #0
 800b724:	4618      	mov	r0, r3
 800b726:	f009 f844 	bl	80147b2 <memset>
  if(hpcd->Instance==USB)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7ac <HAL_PCD_MspInit+0xa8>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d136      	bne.n	800b7a2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b738:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800b73a:	2306      	movs	r3, #6
 800b73c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b73e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b742:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b74a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800b74e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b754:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b756:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b75a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b75c:	f107 030c 	add.w	r3, r7, #12
 800b760:	4618      	mov	r0, r3
 800b762:	f004 fd42 	bl	80101ea <HAL_RCCEx_PeriphCLKConfig>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b76c:	f7fb fafc 	bl	8006d68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b770:	2001      	movs	r0, #1
 800b772:	f7ff fdee 	bl	800b352 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b776:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b77a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b77c:	2302      	movs	r3, #2
 800b77e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b780:	2300      	movs	r3, #0
 800b782:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b784:	2300      	movs	r3, #0
 800b786:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b788:	230a      	movs	r3, #10
 800b78a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b78c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b790:	4619      	mov	r1, r3
 800b792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b796:	f002 febb 	bl	800e510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b79a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800b79e:	f7ff fe0a 	bl	800b3b6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800b7a2:	bf00      	nop
 800b7a4:	3770      	adds	r7, #112	@ 0x70
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40006800 	.word	0x40006800

0800b7b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <NMI_Handler+0x4>

0800b7b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b7bc:	bf00      	nop
 800b7be:	e7fd      	b.n	800b7bc <HardFault_Handler+0x4>

0800b7c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <MemManage_Handler+0x4>

0800b7c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <BusFault_Handler+0x4>

0800b7d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <UsageFault_Handler+0x4>

0800b7d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b7dc:	bf00      	nop
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b7ea:	bf00      	nop
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7f8:	bf00      	nop
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b806:	f002 fa4b 	bl	800dca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b80a:	bf00      	nop
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b814:	4b08      	ldr	r3, [pc, #32]	@ (800b838 <EXTI0_IRQHandler+0x28>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b81c:	4b07      	ldr	r3, [pc, #28]	@ (800b83c <EXTI0_IRQHandler+0x2c>)
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	f003 f82f 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800b826:	e004      	b.n	800b832 <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b828:	4b05      	ldr	r3, [pc, #20]	@ (800b840 <EXTI0_IRQHandler+0x30>)
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f003 f829 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
}
 800b832:	bf00      	nop
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20000a50 	.word	0x20000a50
 800b83c:	20000cce 	.word	0x20000cce
 800b840:	20000c86 	.word	0x20000c86

0800b844 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <EXTI1_IRQHandler+0x1c>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b850:	4b04      	ldr	r3, [pc, #16]	@ (800b864 <EXTI1_IRQHandler+0x20>)
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f003 f815 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b85a:	bf00      	nop
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000a50 	.word	0x20000a50
 800b864:	20000cd6 	.word	0x20000cd6

0800b868 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b86c:	4b05      	ldr	r3, [pc, #20]	@ (800b884 <EXTI2_IRQHandler+0x1c>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d004      	beq.n	800b87e <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b874:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <EXTI2_IRQHandler+0x20>)
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	4618      	mov	r0, r3
 800b87a:	f003 f803 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b87e:	bf00      	nop
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000a50 	.word	0x20000a50
 800b888:	20000cd6 	.word	0x20000cd6

0800b88c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b890:	4b08      	ldr	r3, [pc, #32]	@ (800b8b4 <EXTI4_IRQHandler+0x28>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d105      	bne.n	800b8a4 <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b898:	4b07      	ldr	r3, [pc, #28]	@ (800b8b8 <EXTI4_IRQHandler+0x2c>)
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f002 fff1 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800b8a2:	e004      	b.n	800b8ae <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800b8a4:	4b05      	ldr	r3, [pc, #20]	@ (800b8bc <EXTI4_IRQHandler+0x30>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f002 ffeb 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
}
 800b8ae:	bf00      	nop
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000a50 	.word	0x20000a50
 800b8b8:	20000cc4 	.word	0x20000cc4
 800b8bc:	20000c9e 	.word	0x20000c9e

0800b8c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b8c4:	4b12      	ldr	r3, [pc, #72]	@ (800b910 <EXTI9_5_IRQHandler+0x50>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b8cc:	4b11      	ldr	r3, [pc, #68]	@ (800b914 <EXTI9_5_IRQHandler+0x54>)
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f002 ffd7 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b8d6:	4b10      	ldr	r3, [pc, #64]	@ (800b918 <EXTI9_5_IRQHandler+0x58>)
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f002 ffd2 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b8e0:	e013      	b.n	800b90a <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b914 <EXTI9_5_IRQHandler+0x54>)
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f002 ffcc 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b91c <EXTI9_5_IRQHandler+0x5c>)
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f002 ffc7 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800b8f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b920 <EXTI9_5_IRQHandler+0x60>)
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f002 ffc2 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800b900:	4b08      	ldr	r3, [pc, #32]	@ (800b924 <EXTI9_5_IRQHandler+0x64>)
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f002 ffbd 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
}
 800b90a:	bf00      	nop
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20000a50 	.word	0x20000a50
 800b914:	20000c5e 	.word	0x20000c5e
 800b918:	20000c66 	.word	0x20000c66
 800b91c:	20000c94 	.word	0x20000c94
 800b920:	20000ca6 	.word	0x20000ca6
 800b924:	20000cde 	.word	0x20000cde

0800b928 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b92c:	4802      	ldr	r0, [pc, #8]	@ (800b938 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b92e:	f005 ff8d 	bl	801184c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b932:	bf00      	nop
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	200005d0 	.word	0x200005d0

0800b93c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b940:	4802      	ldr	r0, [pc, #8]	@ (800b94c <USART1_IRQHandler+0x10>)
 800b942:	f007 f855 	bl	80129f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b946:	bf00      	nop
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000444 	.word	0x20000444

0800b950 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b954:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c8 <EXTI15_10_IRQHandler+0x78>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d114      	bne.n	800b986 <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b95c:	4b1b      	ldr	r3, [pc, #108]	@ (800b9cc <EXTI15_10_IRQHandler+0x7c>)
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	4618      	mov	r0, r3
 800b962:	f002 ff8f 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b966:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d0 <EXTI15_10_IRQHandler+0x80>)
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f002 ff8a 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b970:	4b18      	ldr	r3, [pc, #96]	@ (800b9d4 <EXTI15_10_IRQHandler+0x84>)
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	4618      	mov	r0, r3
 800b976:	f002 ff85 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b97a:	4b17      	ldr	r3, [pc, #92]	@ (800b9d8 <EXTI15_10_IRQHandler+0x88>)
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f002 ff80 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b984:	e01d      	b.n	800b9c2 <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b986:	4b11      	ldr	r3, [pc, #68]	@ (800b9cc <EXTI15_10_IRQHandler+0x7c>)
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f002 ff7a 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b990:	4b12      	ldr	r3, [pc, #72]	@ (800b9dc <EXTI15_10_IRQHandler+0x8c>)
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f002 ff75 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b99a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d0 <EXTI15_10_IRQHandler+0x80>)
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f002 ff70 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d4 <EXTI15_10_IRQHandler+0x84>)
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f002 ff6b 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e0 <EXTI15_10_IRQHandler+0x90>)
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f002 ff66 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e4 <EXTI15_10_IRQHandler+0x94>)
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f002 ff61 	bl	800e884 <HAL_GPIO_EXTI_IRQHandler>
}
 800b9c2:	bf00      	nop
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000a50 	.word	0x20000a50
 800b9cc:	20000c56 	.word	0x20000c56
 800b9d0:	20000c74 	.word	0x20000c74
 800b9d4:	20000c7e 	.word	0x20000c7e
 800b9d8:	20000c86 	.word	0x20000c86
 800b9dc:	20000c66 	.word	0x20000c66
 800b9e0:	20000cc4 	.word	0x20000cc4
 800b9e4:	20000cce 	.word	0x20000cce

0800b9e8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800b9ec:	f002 ff62 	bl	800e8b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800b9f0:	bf00      	nop
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  return 1;
 800b9f8:	2301      	movs	r3, #1
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <_kill>:

int _kill(int pid, int sig)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ba0e:	f009 fd91 	bl	8015534 <__errno>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2216      	movs	r2, #22
 800ba16:	601a      	str	r2, [r3, #0]
  return -1;
 800ba18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <_exit>:

void _exit (int status)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ba2c:	f04f 31ff 	mov.w	r1, #4294967295
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff ffe7 	bl	800ba04 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ba36:	bf00      	nop
 800ba38:	e7fd      	b.n	800ba36 <_exit+0x12>

0800ba3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b086      	sub	sp, #24
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
 800ba4a:	e00a      	b.n	800ba62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ba4c:	f3af 8000 	nop.w
 800ba50:	4601      	mov	r1, r0
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	60ba      	str	r2, [r7, #8]
 800ba58:	b2ca      	uxtb	r2, r1
 800ba5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	dbf0      	blt.n	800ba4c <_read+0x12>
  }

  return len;
 800ba6a:	687b      	ldr	r3, [r7, #4]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e009      	b.n	800ba9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	60ba      	str	r2, [r7, #8]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3301      	adds	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	dbf1      	blt.n	800ba86 <_write+0x12>
  }
  return len;
 800baa2:	687b      	ldr	r3, [r7, #4]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_close>:

int _close(int file)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bad4:	605a      	str	r2, [r3, #4]
  return 0;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <_isatty>:

int _isatty(int file)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800baec:	2301      	movs	r3, #1
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b085      	sub	sp, #20
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb1c:	4a14      	ldr	r2, [pc, #80]	@ (800bb70 <_sbrk+0x5c>)
 800bb1e:	4b15      	ldr	r3, [pc, #84]	@ (800bb74 <_sbrk+0x60>)
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb28:	4b13      	ldr	r3, [pc, #76]	@ (800bb78 <_sbrk+0x64>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb30:	4b11      	ldr	r3, [pc, #68]	@ (800bb78 <_sbrk+0x64>)
 800bb32:	4a12      	ldr	r2, [pc, #72]	@ (800bb7c <_sbrk+0x68>)
 800bb34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb36:	4b10      	ldr	r3, [pc, #64]	@ (800bb78 <_sbrk+0x64>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d207      	bcs.n	800bb54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb44:	f009 fcf6 	bl	8015534 <__errno>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	220c      	movs	r2, #12
 800bb4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb52:	e009      	b.n	800bb68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bb54:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <_sbrk+0x64>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb5a:	4b07      	ldr	r3, [pc, #28]	@ (800bb78 <_sbrk+0x64>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	4a05      	ldr	r2, [pc, #20]	@ (800bb78 <_sbrk+0x64>)
 800bb64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb66:	68fb      	ldr	r3, [r7, #12]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20030000 	.word	0x20030000
 800bb74:	00000400 	.word	0x00000400
 800bb78:	2000a6d0 	.word	0x2000a6d0
 800bb7c:	2000a908 	.word	0x2000a908

0800bb80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800bb84:	4b24      	ldr	r3, [pc, #144]	@ (800bc18 <SystemInit+0x98>)
 800bb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb8a:	4a23      	ldr	r2, [pc, #140]	@ (800bc18 <SystemInit+0x98>)
 800bb8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800bb94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800bba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bba8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800bbac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800bbae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbb8:	4b18      	ldr	r3, [pc, #96]	@ (800bc1c <SystemInit+0x9c>)
 800bbba:	4013      	ands	r3, r2
 800bbbc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800bbbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbca:	f023 0305 	bic.w	r3, r3, #5
 800bbce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800bbd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbde:	f023 0301 	bic.w	r3, r3, #1
 800bbe2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800bbe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbea:	4a0d      	ldr	r2, [pc, #52]	@ (800bc20 <SystemInit+0xa0>)
 800bbec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800bbee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf2:	4a0b      	ldr	r2, [pc, #44]	@ (800bc20 <SystemInit+0xa0>)
 800bbf4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bbf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bc06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	619a      	str	r2, [r3, #24]
}
 800bc0e:	bf00      	nop
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	e000ed00 	.word	0xe000ed00
 800bc1c:	faf6fefb 	.word	0xfaf6fefb
 800bc20:	22041000 	.word	0x22041000

0800bc24 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc26:	b08b      	sub	sp, #44	@ 0x2c
 800bc28:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800bc2a:	4a7a      	ldr	r2, [pc, #488]	@ (800be14 <VCU_ReceiveMessages+0x1f0>)
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f7f6 fdd8 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800bc34:	e0e2      	b.n	800bdfc <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800bc36:	2340      	movs	r3, #64	@ 0x40
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4b77      	ldr	r3, [pc, #476]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc3c:	4a77      	ldr	r2, [pc, #476]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bc3e:	2101      	movs	r1, #1
 800bc40:	2000      	movs	r0, #0
 800bc42:	f7f6 fc33 	bl	80024ac <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800bc46:	4b76      	ldr	r3, [pc, #472]	@ (800be20 <VCU_ReceiveMessages+0x1fc>)
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	f003 0312 	and.w	r3, r3, #18
 800bc4e:	2b12      	cmp	r3, #18
 800bc50:	d12c      	bne.n	800bcac <VCU_ReceiveMessages+0x88>
 800bc52:	4b72      	ldr	r3, [pc, #456]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	469c      	mov	ip, r3
 800bc5e:	4b6e      	ldr	r3, [pc, #440]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	469e      	mov	lr, r3
 800bc64:	4b6c      	ldr	r3, [pc, #432]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc66:	785b      	ldrb	r3, [r3, #1]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b6b      	ldr	r3, [pc, #428]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc6c:	789b      	ldrb	r3, [r3, #2]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4b69      	ldr	r3, [pc, #420]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc72:	78db      	ldrb	r3, [r3, #3]
 800bc74:	4618      	mov	r0, r3
 800bc76:	4b68      	ldr	r3, [pc, #416]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc78:	791b      	ldrb	r3, [r3, #4]
 800bc7a:	461c      	mov	r4, r3
 800bc7c:	4b66      	ldr	r3, [pc, #408]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc7e:	795b      	ldrb	r3, [r3, #5]
 800bc80:	461d      	mov	r5, r3
 800bc82:	4b65      	ldr	r3, [pc, #404]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc84:	799b      	ldrb	r3, [r3, #6]
 800bc86:	461e      	mov	r6, r3
 800bc88:	4b63      	ldr	r3, [pc, #396]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bc8a:	79db      	ldrb	r3, [r3, #7]
 800bc8c:	9306      	str	r3, [sp, #24]
 800bc8e:	9605      	str	r6, [sp, #20]
 800bc90:	9504      	str	r5, [sp, #16]
 800bc92:	9403      	str	r4, [sp, #12]
 800bc94:	9002      	str	r0, [sp, #8]
 800bc96:	9101      	str	r1, [sp, #4]
 800bc98:	9200      	str	r2, [sp, #0]
 800bc9a:	4673      	mov	r3, lr
 800bc9c:	4662      	mov	r2, ip
 800bc9e:	4961      	ldr	r1, [pc, #388]	@ (800be24 <VCU_ReceiveMessages+0x200>)
 800bca0:	4861      	ldr	r0, [pc, #388]	@ (800be28 <VCU_ReceiveMessages+0x204>)
 800bca2:	f008 fd21 	bl	80146e8 <siprintf>
 800bca6:	4860      	ldr	r0, [pc, #384]	@ (800be28 <VCU_ReceiveMessages+0x204>)
 800bca8:	f7f9 fcaa 	bl	8005600 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800bcac:	4b5b      	ldr	r3, [pc, #364]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	4b5c      	ldr	r3, [pc, #368]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bcba:	895b      	ldrh	r3, [r3, #10]
 800bcbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d102      	bne.n	800bcca <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800bcc4:	f000 f950 	bl	800bf68 <VCU_ProcessVcuCommand>
 800bcc8:	e093      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800bcca:	4b54      	ldr	r3, [pc, #336]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b55      	ldr	r3, [pc, #340]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bcd8:	895b      	ldrh	r3, [r3, #10]
 800bcda:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d102      	bne.n	800bce8 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800bce2:	f000 fac7 	bl	800c274 <VCU_ProcessVcuTime>
 800bce6:	e084      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800bce8:	4b4c      	ldr	r3, [pc, #304]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	4b4d      	ldr	r3, [pc, #308]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bcf6:	895b      	ldrh	r3, [r3, #10]
 800bcf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d102      	bne.n	800bd06 <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800bd00:	f000 fb04 	bl	800c30c <VCU_ProcessReadEeprom>
 800bd04:	e075      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800bd06:	4b45      	ldr	r3, [pc, #276]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b46      	ldr	r3, [pc, #280]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bd14:	895b      	ldrh	r3, [r3, #10]
 800bd16:	f203 4303 	addw	r3, r3, #1027	@ 0x403
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d102      	bne.n	800bd24 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800bd1e:	f000 fbb1 	bl	800c484 <VCU_ProcessWriteEeprom>
 800bd22:	e066      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800bd24:	4b3d      	ldr	r3, [pc, #244]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4b3e      	ldr	r3, [pc, #248]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bd32:	895b      	ldrh	r3, [r3, #10]
 800bd34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d102      	bne.n	800bd42 <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800bd3c:	f000 f9be 	bl	800c0bc <VCU_ProcessVcuModuleCommand>
 800bd40:	e057      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800bd42:	4b36      	ldr	r3, [pc, #216]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4b37      	ldr	r3, [pc, #220]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bd50:	895b      	ldrh	r3, [r3, #10]
 800bd52:	f203 4305 	addw	r3, r3, #1029	@ 0x405
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d102      	bne.n	800bd60 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800bd5a:	f000 fa3b 	bl	800c1d4 <VCU_ProcessVcuKeepAlive>
 800bd5e:	e048      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800bd60:	4b2e      	ldr	r3, [pc, #184]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	4b2f      	ldr	r3, [pc, #188]	@ (800be2c <VCU_ReceiveMessages+0x208>)
 800bd6e:	895b      	ldrh	r3, [r3, #10]
 800bd70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d102      	bne.n	800bd7e <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800bd78:	f000 fc44 	bl	800c604 <VCU_ProcessVcuRequestModuleList>
 800bd7c:	e039      	b.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800bd7e:	4b28      	ldr	r3, [pc, #160]	@ (800be20 <VCU_ReceiveMessages+0x1fc>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 0311 	and.w	r3, r3, #17
 800bd86:	2b11      	cmp	r3, #17
 800bd88:	d133      	bne.n	800bdf2 <VCU_ReceiveMessages+0x1ce>
 800bd8a:	4b24      	ldr	r3, [pc, #144]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	469c      	mov	ip, r3
 800bd96:	4b21      	ldr	r3, [pc, #132]	@ (800be1c <VCU_ReceiveMessages+0x1f8>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800bd9e:	469e      	mov	lr, r3
 800bda0:	4b1d      	ldr	r3, [pc, #116]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b1c      	ldr	r3, [pc, #112]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	4b1a      	ldr	r3, [pc, #104]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdae:	789b      	ldrb	r3, [r3, #2]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	4b19      	ldr	r3, [pc, #100]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdb4:	78db      	ldrb	r3, [r3, #3]
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdba:	791b      	ldrb	r3, [r3, #4]
 800bdbc:	461d      	mov	r5, r3
 800bdbe:	4b16      	ldr	r3, [pc, #88]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdc0:	795b      	ldrb	r3, [r3, #5]
 800bdc2:	461e      	mov	r6, r3
 800bdc4:	4b14      	ldr	r3, [pc, #80]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdc6:	799b      	ldrb	r3, [r3, #6]
 800bdc8:	607b      	str	r3, [r7, #4]
 800bdca:	4b13      	ldr	r3, [pc, #76]	@ (800be18 <VCU_ReceiveMessages+0x1f4>)
 800bdcc:	79db      	ldrb	r3, [r3, #7]
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	9306      	str	r3, [sp, #24]
 800bdd4:	9605      	str	r6, [sp, #20]
 800bdd6:	9504      	str	r5, [sp, #16]
 800bdd8:	9403      	str	r4, [sp, #12]
 800bdda:	9002      	str	r0, [sp, #8]
 800bddc:	9101      	str	r1, [sp, #4]
 800bdde:	9200      	str	r2, [sp, #0]
 800bde0:	4673      	mov	r3, lr
 800bde2:	4662      	mov	r2, ip
 800bde4:	4912      	ldr	r1, [pc, #72]	@ (800be30 <VCU_ReceiveMessages+0x20c>)
 800bde6:	4810      	ldr	r0, [pc, #64]	@ (800be28 <VCU_ReceiveMessages+0x204>)
 800bde8:	f008 fc7e 	bl	80146e8 <siprintf>
 800bdec:	480e      	ldr	r0, [pc, #56]	@ (800be28 <VCU_ReceiveMessages+0x204>)
 800bdee:	f7f9 fc07 	bl	8005600 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800bdf2:	4a08      	ldr	r2, [pc, #32]	@ (800be14 <VCU_ReceiveMessages+0x1f0>)
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	f7f6 fcf4 	bl	80027e4 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800bdfc:	4b05      	ldr	r3, [pc, #20]	@ (800be14 <VCU_ReceiveMessages+0x1f0>)
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	f47f af16 	bne.w	800bc36 <VCU_ReceiveMessages+0x12>
  }
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be14:	2000a724 	.word	0x2000a724
 800be18:	2000a734 	.word	0x2000a734
 800be1c:	2000a728 	.word	0x2000a728
 800be20:	2000000c 	.word	0x2000000c
 800be24:	08019654 	.word	0x08019654
 800be28:	20000b5c 	.word	0x20000b5c
 800be2c:	2000a66c 	.word	0x2000a66c
 800be30:	080196ac 	.word	0x080196ac

0800be34 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800be34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be36:	b08d      	sub	sp, #52	@ 0x34
 800be38:	af08      	add	r7, sp, #32
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800be3e:	2332      	movs	r3, #50	@ 0x32
 800be40:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	4a3e      	ldr	r2, [pc, #248]	@ (800bf40 <VCU_TransmitMessageQueue+0x10c>)
 800be46:	2102      	movs	r1, #2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f6 fc98 	bl	800277e <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11a      	bne.n	800be8a <VCU_TransmitMessageQueue+0x56>
      Nop();
 800be54:	bf00      	nop
      Nop();
 800be56:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800be58:	79f8      	ldrb	r0, [r7, #7]
 800be5a:	4b3a      	ldr	r3, [pc, #232]	@ (800bf44 <VCU_TransmitMessageQueue+0x110>)
 800be5c:	4a3a      	ldr	r2, [pc, #232]	@ (800bf48 <VCU_TransmitMessageQueue+0x114>)
 800be5e:	493b      	ldr	r1, [pc, #236]	@ (800bf4c <VCU_TransmitMessageQueue+0x118>)
 800be60:	f7f6 fd47 	bl	80028f2 <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800be64:	4b3a      	ldr	r3, [pc, #232]	@ (800bf50 <VCU_TransmitMessageQueue+0x11c>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 0311 	and.w	r3, r3, #17
 800be6c:	2b11      	cmp	r3, #17
 800be6e:	d106      	bne.n	800be7e <VCU_TransmitMessageQueue+0x4a>
 800be70:	4938      	ldr	r1, [pc, #224]	@ (800bf54 <VCU_TransmitMessageQueue+0x120>)
 800be72:	4839      	ldr	r0, [pc, #228]	@ (800bf58 <VCU_TransmitMessageQueue+0x124>)
 800be74:	f008 fc38 	bl	80146e8 <siprintf>
 800be78:	4837      	ldr	r0, [pc, #220]	@ (800bf58 <VCU_TransmitMessageQueue+0x124>)
 800be7a:	f7f9 fbc1 	bl	8005600 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	2102      	movs	r1, #2
 800be82:	4618      	mov	r0, r3
 800be84:	f7f6 f9be 	bl	8002204 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800be88:	e056      	b.n	800bf38 <VCU_TransmitMessageQueue+0x104>
    }
    attempts--;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800be90:	4b2b      	ldr	r3, [pc, #172]	@ (800bf40 <VCU_TransmitMessageQueue+0x10c>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0d2      	beq.n	800be42 <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800be9c:	4b2f      	ldr	r3, [pc, #188]	@ (800bf5c <VCU_TransmitMessageQueue+0x128>)
 800be9e:	791b      	ldrb	r3, [r3, #4]
 800bea0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f7 fd30 	bl	800390c <DRV_CANFDSPI_DlcToDataBytes>
 800beac:	4603      	mov	r3, r0
 800beae:	73bb      	strb	r3, [r7, #14]
  
  // Log TX message if DBG_COMMS is enabled
  if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){
 800beb0:	4b27      	ldr	r3, [pc, #156]	@ (800bf50 <VCU_TransmitMessageQueue+0x11c>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 0312 	and.w	r3, r3, #18
 800beb8:	2b12      	cmp	r3, #18
 800beba:	d133      	bne.n	800bf24 <VCU_TransmitMessageQueue+0xf0>
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bebc:	4b27      	ldr	r3, [pc, #156]	@ (800bf5c <VCU_TransmitMessageQueue+0x128>)
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bec4:	b29b      	uxth	r3, r3
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bec6:	469c      	mov	ip, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bec8:	4b24      	ldr	r3, [pc, #144]	@ (800bf5c <VCU_TransmitMessageQueue+0x128>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bed0:	469e      	mov	lr, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bed2:	4b23      	ldr	r3, [pc, #140]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bed6:	461a      	mov	r2, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bed8:	4b21      	ldr	r3, [pc, #132]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800beda:	785b      	ldrb	r3, [r3, #1]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bedc:	4619      	mov	r1, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bede:	4b20      	ldr	r3, [pc, #128]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bee0:	789b      	ldrb	r3, [r3, #2]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bee2:	4618      	mov	r0, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bee4:	4b1e      	ldr	r3, [pc, #120]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bee6:	78db      	ldrb	r3, [r3, #3]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bee8:	461c      	mov	r4, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800beea:	4b1d      	ldr	r3, [pc, #116]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800beec:	791b      	ldrb	r3, [r3, #4]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800beee:	461d      	mov	r5, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bef0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bef2:	795b      	ldrb	r3, [r3, #5]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bef4:	461e      	mov	r6, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800bef6:	4b1a      	ldr	r3, [pc, #104]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bef8:	799b      	ldrb	r3, [r3, #6]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800befa:	603b      	str	r3, [r7, #0]
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800befc:	4b18      	ldr	r3, [pc, #96]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800befe:	79db      	ldrb	r3, [r3, #7]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800bf00:	9307      	str	r3, [sp, #28]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	9306      	str	r3, [sp, #24]
 800bf06:	9605      	str	r6, [sp, #20]
 800bf08:	9504      	str	r5, [sp, #16]
 800bf0a:	9403      	str	r4, [sp, #12]
 800bf0c:	9002      	str	r0, [sp, #8]
 800bf0e:	9101      	str	r1, [sp, #4]
 800bf10:	9200      	str	r2, [sp, #0]
 800bf12:	4673      	mov	r3, lr
 800bf14:	4662      	mov	r2, ip
 800bf16:	4913      	ldr	r1, [pc, #76]	@ (800bf64 <VCU_TransmitMessageQueue+0x130>)
 800bf18:	480f      	ldr	r0, [pc, #60]	@ (800bf58 <VCU_TransmitMessageQueue+0x124>)
 800bf1a:	f008 fbe5 	bl	80146e8 <siprintf>
      serialOut(tempBuffer);
 800bf1e:	480e      	ldr	r0, [pc, #56]	@ (800bf58 <VCU_TransmitMessageQueue+0x124>)
 800bf20:	f7f9 fb6e 	bl	8005600 <serialOut>
  }

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	79f8      	ldrb	r0, [r7, #7]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	9201      	str	r2, [sp, #4]
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf60 <VCU_TransmitMessageQueue+0x12c>)
 800bf30:	4a0a      	ldr	r2, [pc, #40]	@ (800bf5c <VCU_TransmitMessageQueue+0x128>)
 800bf32:	2102      	movs	r1, #2
 800bf34:	f7f6 f874 	bl	8002020 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000a6d4 	.word	0x2000a6d4
 800bf44:	2000a776 	.word	0x2000a776
 800bf48:	2000a775 	.word	0x2000a775
 800bf4c:	2000a774 	.word	0x2000a774
 800bf50:	2000000c 	.word	0x2000000c
 800bf54:	08019718 	.word	0x08019718
 800bf58:	20000b5c 	.word	0x20000b5c
 800bf5c:	2000a6d8 	.word	0x2000a6d8
 800bf60:	2000a6e4 	.word	0x2000a6e4
 800bf64:	08019748 	.word	0x08019748

0800bf68 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800bf68:	b5b0      	push	{r4, r5, r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800bf6e:	4b4a      	ldr	r3, [pc, #296]	@ (800c098 <VCU_ProcessVcuCommand+0x130>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a4a      	ldr	r2, [pc, #296]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bf74:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800bf76:	4b4a      	ldr	r3, [pc, #296]	@ (800c0a0 <VCU_ProcessVcuCommand+0x138>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf7c:	4a47      	ldr	r2, [pc, #284]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bf7e:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800bf80:	4b46      	ldr	r3, [pc, #280]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800bf88:	463b      	mov	r3, r7
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f008 fc0f 	bl	80147b2 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800bf94:	4a43      	ldr	r2, [pc, #268]	@ (800c0a4 <VCU_ProcessVcuCommand+0x13c>)
 800bf96:	463b      	mov	r3, r7
 800bf98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf9c:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800bfa0:	887a      	ldrh	r2, [r7, #2]
 800bfa2:	4b3e      	ldr	r3, [pc, #248]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bfa4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800bfa8:	4b3c      	ldr	r3, [pc, #240]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bfaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfae:	783a      	ldrb	r2, [r7, #0]
 800bfb0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d03d      	beq.n	800c036 <VCU_ProcessVcuCommand+0xce>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800bfba:	783b      	ldrb	r3, [r7, #0]
 800bfbc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	4b35      	ldr	r3, [pc, #212]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bfc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 800bfca:	4b34      	ldr	r3, [pc, #208]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bfcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d81b      	bhi.n	800c00c <VCU_ProcessVcuCommand+0xa4>
 800bfd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <VCU_ProcessVcuCommand+0x74>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800c031 	.word	0x0800c031
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800bffd 	.word	0x0800bffd
 800bfe8:	0800bfed 	.word	0x0800bfed
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800bfec:	4b2b      	ldr	r3, [pc, #172]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800bff2:	4b2a      	ldr	r3, [pc, #168]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800bffa:	e01c      	b.n	800c036 <VCU_ProcessVcuCommand+0xce>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800bffc:	4b27      	ldr	r3, [pc, #156]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800bffe:	2200      	movs	r2, #0
 800c000:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800c002:	4b26      	ldr	r3, [pc, #152]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800c004:	2200      	movs	r2, #0
 800c006:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c00a:	e014      	b.n	800c036 <VCU_ProcessVcuCommand+0xce>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800c00c:	4b26      	ldr	r3, [pc, #152]	@ (800c0a8 <VCU_ProcessVcuCommand+0x140>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0311 	and.w	r3, r3, #17
 800c014:	2b11      	cmp	r3, #17
 800c016:	d10d      	bne.n	800c034 <VCU_ProcessVcuCommand+0xcc>
 800c018:	4b20      	ldr	r3, [pc, #128]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800c01a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c01e:	461a      	mov	r2, r3
 800c020:	4922      	ldr	r1, [pc, #136]	@ (800c0ac <VCU_ProcessVcuCommand+0x144>)
 800c022:	4823      	ldr	r0, [pc, #140]	@ (800c0b0 <VCU_ProcessVcuCommand+0x148>)
 800c024:	f008 fb60 	bl	80146e8 <siprintf>
 800c028:	4821      	ldr	r0, [pc, #132]	@ (800c0b0 <VCU_ProcessVcuCommand+0x148>)
 800c02a:	f7f9 fae9 	bl	8005600 <serialOut>
        break;
 800c02e:	e001      	b.n	800c034 <VCU_ProcessVcuCommand+0xcc>
        break;
 800c030:	bf00      	nop
 800c032:	e000      	b.n	800c036 <VCU_ProcessVcuCommand+0xce>
        break;
 800c034:	bf00      	nop
    }
  }
  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800c036:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a8 <VCU_ProcessVcuCommand+0x140>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0310 	and.w	r3, r3, #16
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d021      	beq.n	800c086 <VCU_ProcessVcuCommand+0x11e>
 800c042:	4b1c      	ldr	r3, [pc, #112]	@ (800c0b4 <VCU_ProcessVcuCommand+0x14c>)
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	461c      	mov	r4, r3
 800c04e:	4b13      	ldr	r3, [pc, #76]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800c050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c054:	461d      	mov	r5, r3
 800c056:	4b11      	ldr	r3, [pc, #68]	@ (800c09c <VCU_ProcessVcuCommand+0x134>)
 800c058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f4 fa49 	bl	80004f4 <__aeabi_i2d>
 800c062:	a30b      	add	r3, pc, #44	@ (adr r3, 800c090 <VCU_ProcessVcuCommand+0x128>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 faae 	bl	80005c8 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	e9cd 2300 	strd	r2, r3, [sp]
 800c074:	462b      	mov	r3, r5
 800c076:	4622      	mov	r2, r4
 800c078:	490f      	ldr	r1, [pc, #60]	@ (800c0b8 <VCU_ProcessVcuCommand+0x150>)
 800c07a:	480d      	ldr	r0, [pc, #52]	@ (800c0b0 <VCU_ProcessVcuCommand+0x148>)
 800c07c:	f008 fb34 	bl	80146e8 <siprintf>
 800c080:	480b      	ldr	r0, [pc, #44]	@ (800c0b0 <VCU_ProcessVcuCommand+0x148>)
 800c082:	f7f9 fabd 	bl	8005600 <serialOut>
}
 800c086:	bf00      	nop
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bdb0      	pop	{r4, r5, r7, pc}
 800c08e:	bf00      	nop
 800c090:	eb851eb8 	.word	0xeb851eb8
 800c094:	3f8eb851 	.word	0x3f8eb851
 800c098:	20000d20 	.word	0x20000d20
 800c09c:	2000a66c 	.word	0x2000a66c
 800c0a0:	200005d0 	.word	0x200005d0
 800c0a4:	2000a734 	.word	0x2000a734
 800c0a8:	2000000c 	.word	0x2000000c
 800c0ac:	080197ac 	.word	0x080197ac
 800c0b0:	20000b5c 	.word	0x20000b5c
 800c0b4:	2000a6d8 	.word	0x2000a6d8
 800c0b8:	080197d4 	.word	0x080197d4

0800c0bc <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c0c2:	4b3a      	ldr	r3, [pc, #232]	@ (800c1ac <VCU_ProcessVcuModuleCommand+0xf0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a3a      	ldr	r2, [pc, #232]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c0c8:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c0ca:	4b3a      	ldr	r3, [pc, #232]	@ (800c1b4 <VCU_ProcessVcuModuleCommand+0xf8>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d0:	4a37      	ldr	r2, [pc, #220]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c0d2:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800c0d4:	4b36      	ldr	r3, [pc, #216]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800c0dc:	463b      	mov	r3, r7
 800c0de:	220c      	movs	r2, #12
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f008 fb65 	bl	80147b2 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800c0e8:	4a33      	ldr	r2, [pc, #204]	@ (800c1b8 <VCU_ProcessVcuModuleCommand+0xfc>)
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800c0f2:	783a      	ldrb	r2, [r7, #0]
 800c0f4:	4b2e      	ldr	r3, [pc, #184]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c0f6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800c0fa:	4b2d      	ldr	r3, [pc, #180]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c0fc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe fecb 	bl	800ae9c <MCU_ModuleIndexFromId>
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800c10a:	4b29      	ldr	r3, [pc, #164]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c10c:	7d1b      	ldrb	r3, [r3, #20]
 800c10e:	7bfa      	ldrb	r2, [r7, #15]
 800c110:	429a      	cmp	r2, r3
 800c112:	d111      	bne.n	800c138 <VCU_ProcessVcuModuleCommand+0x7c>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800c114:	4b29      	ldr	r3, [pc, #164]	@ (800c1bc <VCU_ProcessVcuModuleCommand+0x100>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 0311 	and.w	r3, r3, #17
 800c11c:	2b11      	cmp	r3, #17
 800c11e:	d140      	bne.n	800c1a2 <VCU_ProcessVcuModuleCommand+0xe6>
 800c120:	4b23      	ldr	r3, [pc, #140]	@ (800c1b0 <VCU_ProcessVcuModuleCommand+0xf4>)
 800c122:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800c126:	461a      	mov	r2, r3
 800c128:	4925      	ldr	r1, [pc, #148]	@ (800c1c0 <VCU_ProcessVcuModuleCommand+0x104>)
 800c12a:	4826      	ldr	r0, [pc, #152]	@ (800c1c4 <VCU_ProcessVcuModuleCommand+0x108>)
 800c12c:	f008 fadc 	bl	80146e8 <siprintf>
 800c130:	4824      	ldr	r0, [pc, #144]	@ (800c1c4 <VCU_ProcessVcuModuleCommand+0x108>)
 800c132:	f7f9 fa65 	bl	8005600 <serialOut>
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
  }
}
 800c136:	e034      	b.n	800c1a2 <VCU_ProcessVcuModuleCommand+0xe6>
    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	4a23      	ldr	r2, [pc, #140]	@ (800c1c8 <VCU_ProcessVcuModuleCommand+0x10c>)
 800c13c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800c140:	fb01 f303 	mul.w	r3, r1, r3
 800c144:	4413      	add	r3, r2
 800c146:	3327      	adds	r3, #39	@ 0x27
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	787a      	ldrb	r2, [r7, #1]
 800c14c:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800c150:	b2d2      	uxtb	r2, r2
 800c152:	4293      	cmp	r3, r2
 800c154:	d00e      	beq.n	800c174 <VCU_ProcessVcuModuleCommand+0xb8>
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800c156:	787b      	ldrb	r3, [r7, #1]
 800c158:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	4610      	mov	r0, r2
 800c162:	4a19      	ldr	r2, [pc, #100]	@ (800c1c8 <VCU_ProcessVcuModuleCommand+0x10c>)
 800c164:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800c168:	fb01 f303 	mul.w	r3, r1, r3
 800c16c:	4413      	add	r3, r2
 800c16e:	3328      	adds	r3, #40	@ 0x28
 800c170:	4602      	mov	r2, r0
 800c172:	701a      	strb	r2, [r3, #0]
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800c174:	4b11      	ldr	r3, [pc, #68]	@ (800c1bc <VCU_ProcessVcuModuleCommand+0x100>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 0310 	and.w	r3, r3, #16
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d010      	beq.n	800c1a2 <VCU_ProcessVcuModuleCommand+0xe6>
 800c180:	4b12      	ldr	r3, [pc, #72]	@ (800c1cc <VCU_ProcessVcuModuleCommand+0x110>)
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c188:	b29b      	uxth	r3, r3
 800c18a:	461a      	mov	r2, r3
 800c18c:	787b      	ldrb	r3, [r7, #1]
 800c18e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c192:	b2db      	uxtb	r3, r3
 800c194:	490e      	ldr	r1, [pc, #56]	@ (800c1d0 <VCU_ProcessVcuModuleCommand+0x114>)
 800c196:	480b      	ldr	r0, [pc, #44]	@ (800c1c4 <VCU_ProcessVcuModuleCommand+0x108>)
 800c198:	f008 faa6 	bl	80146e8 <siprintf>
 800c19c:	4809      	ldr	r0, [pc, #36]	@ (800c1c4 <VCU_ProcessVcuModuleCommand+0x108>)
 800c19e:	f7f9 fa2f 	bl	8005600 <serialOut>
}
 800c1a2:	bf00      	nop
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000d20 	.word	0x20000d20
 800c1b0:	2000a66c 	.word	0x2000a66c
 800c1b4:	200005d0 	.word	0x200005d0
 800c1b8:	2000a734 	.word	0x2000a734
 800c1bc:	2000000c 	.word	0x2000000c
 800c1c0:	08019804 	.word	0x08019804
 800c1c4:	20000b5c 	.word	0x20000b5c
 800c1c8:	20000dec 	.word	0x20000dec
 800c1cc:	2000a6d8 	.word	0x2000a6d8
 800c1d0:	08019844 	.word	0x08019844

0800c1d4 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c1da:	4b1e      	ldr	r3, [pc, #120]	@ (800c254 <VCU_ProcessVcuKeepAlive+0x80>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a1e      	ldr	r2, [pc, #120]	@ (800c258 <VCU_ProcessVcuKeepAlive+0x84>)
 800c1e0:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c25c <VCU_ProcessVcuKeepAlive+0x88>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c258 <VCU_ProcessVcuKeepAlive+0x84>)
 800c1ea:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800c1ec:	463b      	mov	r3, r7
 800c1ee:	2208      	movs	r2, #8
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f008 fadd 	bl	80147b2 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800c1f8:	4a19      	ldr	r2, [pc, #100]	@ (800c260 <VCU_ProcessVcuKeepAlive+0x8c>)
 800c1fa:	463b      	mov	r3, r7
 800c1fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c200:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800c204:	783b      	ldrb	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d008      	beq.n	800c21c <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800c20a:	4b13      	ldr	r3, [pc, #76]	@ (800c258 <VCU_ProcessVcuKeepAlive+0x84>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800c212:	783a      	ldrb	r2, [r7, #0]
 800c214:	4b10      	ldr	r3, [pc, #64]	@ (800c258 <VCU_ProcessVcuKeepAlive+0x84>)
 800c216:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800c21a:	e003      	b.n	800c224 <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800c21c:	4b0e      	ldr	r3, [pc, #56]	@ (800c258 <VCU_ProcessVcuKeepAlive+0x84>)
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c224:	4b0f      	ldr	r3, [pc, #60]	@ (800c264 <VCU_ProcessVcuKeepAlive+0x90>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	f003 0310 	and.w	r3, r3, #16
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00c      	beq.n	800c24a <VCU_ProcessVcuKeepAlive+0x76>
 800c230:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <VCU_ProcessVcuKeepAlive+0x94>)
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c238:	b29b      	uxth	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	490b      	ldr	r1, [pc, #44]	@ (800c26c <VCU_ProcessVcuKeepAlive+0x98>)
 800c23e:	480c      	ldr	r0, [pc, #48]	@ (800c270 <VCU_ProcessVcuKeepAlive+0x9c>)
 800c240:	f008 fa52 	bl	80146e8 <siprintf>
 800c244:	480a      	ldr	r0, [pc, #40]	@ (800c270 <VCU_ProcessVcuKeepAlive+0x9c>)
 800c246:	f7f9 f9db 	bl	8005600 <serialOut>
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20000d20 	.word	0x20000d20
 800c258:	2000a66c 	.word	0x2000a66c
 800c25c:	200005d0 	.word	0x200005d0
 800c260:	2000a734 	.word	0x2000a734
 800c264:	2000000c 	.word	0x2000000c
 800c268:	2000a6d8 	.word	0x2000a6d8
 800c26c:	08019874 	.word	0x08019874
 800c270:	20000b5c 	.word	0x20000b5c

0800c274 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c27a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2ec <VCU_ProcessVcuTime+0x78>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	f003 0310 	and.w	r3, r3, #16
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00c      	beq.n	800c2a0 <VCU_ProcessVcuTime+0x2c>
 800c286:	4b1a      	ldr	r3, [pc, #104]	@ (800c2f0 <VCU_ProcessVcuTime+0x7c>)
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c28e:	b29b      	uxth	r3, r3
 800c290:	461a      	mov	r2, r3
 800c292:	4918      	ldr	r1, [pc, #96]	@ (800c2f4 <VCU_ProcessVcuTime+0x80>)
 800c294:	4818      	ldr	r0, [pc, #96]	@ (800c2f8 <VCU_ProcessVcuTime+0x84>)
 800c296:	f008 fa27 	bl	80146e8 <siprintf>
 800c29a:	4817      	ldr	r0, [pc, #92]	@ (800c2f8 <VCU_ProcessVcuTime+0x84>)
 800c29c:	f7f9 f9b0 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c2a0:	4b16      	ldr	r3, [pc, #88]	@ (800c2fc <VCU_ProcessVcuTime+0x88>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a16      	ldr	r2, [pc, #88]	@ (800c300 <VCU_ProcessVcuTime+0x8c>)
 800c2a6:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c2a8:	4b16      	ldr	r3, [pc, #88]	@ (800c304 <VCU_ProcessVcuTime+0x90>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ae:	4a14      	ldr	r2, [pc, #80]	@ (800c300 <VCU_ProcessVcuTime+0x8c>)
 800c2b0:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f008 fa7a 	bl	80147b2 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800c2be:	463b      	mov	r3, r7
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	4911      	ldr	r1, [pc, #68]	@ (800c308 <VCU_ProcessVcuTime+0x94>)
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f009 f96c 	bl	80155a2 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800c2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ce:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800c2d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2d6:	f7f9 fa01 	bl	80056dc <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800c2da:	4b09      	ldr	r3, [pc, #36]	@ (800c300 <VCU_ProcessVcuTime+0x8c>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 800c2e2:	bf00      	nop
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000000c 	.word	0x2000000c
 800c2f0:	2000a6d8 	.word	0x2000a6d8
 800c2f4:	08019894 	.word	0x08019894
 800c2f8:	20000b5c 	.word	0x20000b5c
 800c2fc:	20000d20 	.word	0x20000d20
 800c300:	2000a66c 	.word	0x2000a66c
 800c304:	200005d0 	.word	0x200005d0
 800c308:	2000a734 	.word	0x2000a734

0800c30c <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c316:	4b50      	ldr	r3, [pc, #320]	@ (800c458 <VCU_ProcessReadEeprom+0x14c>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00c      	beq.n	800c33c <VCU_ProcessReadEeprom+0x30>
 800c322:	4b4e      	ldr	r3, [pc, #312]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	494c      	ldr	r1, [pc, #304]	@ (800c460 <VCU_ProcessReadEeprom+0x154>)
 800c330:	484c      	ldr	r0, [pc, #304]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c332:	f008 f9d9 	bl	80146e8 <siprintf>
 800c336:	484b      	ldr	r0, [pc, #300]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c338:	f7f9 f962 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c33c:	4b4a      	ldr	r3, [pc, #296]	@ (800c468 <VCU_ProcessReadEeprom+0x15c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a4a      	ldr	r2, [pc, #296]	@ (800c46c <VCU_ProcessReadEeprom+0x160>)
 800c342:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c344:	4b4a      	ldr	r3, [pc, #296]	@ (800c470 <VCU_ProcessReadEeprom+0x164>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	4a48      	ldr	r2, [pc, #288]	@ (800c46c <VCU_ProcessReadEeprom+0x160>)
 800c34c:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800c34e:	f107 030c 	add.w	r3, r7, #12
 800c352:	2208      	movs	r2, #8
 800c354:	2100      	movs	r1, #0
 800c356:	4618      	mov	r0, r3
 800c358:	f008 fa2b 	bl	80147b2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800c35c:	4a45      	ldr	r2, [pc, #276]	@ (800c474 <VCU_ProcessReadEeprom+0x168>)
 800c35e:	f107 030c 	add.w	r3, r7, #12
 800c362:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c366:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800c36a:	7b3b      	ldrb	r3, [r7, #12]
 800c36c:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800c36e:	463a      	mov	r2, r7
 800c370:	8afb      	ldrh	r3, [r7, #22]
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f7f8 f909 	bl	800458c <EE_ReadVariable32bits>
 800c37a:	4603      	mov	r3, r0
 800c37c:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800c37e:	8abb      	ldrh	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d156      	bne.n	800c432 <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f36f 231f 	bfc	r3, #8, #24
 800c38a:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800c390:	8afb      	ldrh	r3, [r7, #22]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c396:	4b31      	ldr	r3, [pc, #196]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c39c:	4b2f      	ldr	r3, [pc, #188]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c3a2:	4b2e      	ldr	r3, [pc, #184]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800c3a8:	4b33      	ldr	r3, [pc, #204]	@ (800c478 <VCU_ProcessReadEeprom+0x16c>)
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	1d3b      	adds	r3, r7, #4
 800c3ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3b2:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c3b6:	4b2d      	ldr	r3, [pc, #180]	@ (800c46c <VCU_ProcessReadEeprom+0x160>)
 800c3b8:	895b      	ldrh	r3, [r3, #10]
 800c3ba:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3c4:	b299      	uxth	r1, r3
 800c3c6:	4a25      	ldr	r2, [pc, #148]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3c8:	8813      	ldrh	r3, [r2, #0]
 800c3ca:	f361 030a 	bfi	r3, r1, #0, #11
 800c3ce:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c3d0:	4a22      	ldr	r2, [pc, #136]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	f36f 23dc 	bfc	r3, #11, #18
 800c3d8:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c3da:	4a20      	ldr	r2, [pc, #128]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3dc:	7913      	ldrb	r3, [r2, #4]
 800c3de:	f36f 1386 	bfc	r3, #6, #1
 800c3e2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c3e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3e6:	7913      	ldrb	r3, [r2, #4]
 800c3e8:	2108      	movs	r1, #8
 800c3ea:	f361 0303 	bfi	r3, r1, #0, #4
 800c3ee:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c3f0:	4a1a      	ldr	r2, [pc, #104]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3f2:	7913      	ldrb	r3, [r2, #4]
 800c3f4:	f36f 13c7 	bfc	r3, #7, #1
 800c3f8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c3fa:	4a18      	ldr	r2, [pc, #96]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c3fc:	7913      	ldrb	r3, [r2, #4]
 800c3fe:	f36f 1304 	bfc	r3, #4, #1
 800c402:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c404:	4b14      	ldr	r3, [pc, #80]	@ (800c458 <VCU_ProcessReadEeprom+0x14c>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 0310 	and.w	r3, r3, #16
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00c      	beq.n	800c42a <VCU_ProcessReadEeprom+0x11e>
 800c410:	4b12      	ldr	r3, [pc, #72]	@ (800c45c <VCU_ProcessReadEeprom+0x150>)
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c418:	b29b      	uxth	r3, r3
 800c41a:	461a      	mov	r2, r3
 800c41c:	4917      	ldr	r1, [pc, #92]	@ (800c47c <VCU_ProcessReadEeprom+0x170>)
 800c41e:	4811      	ldr	r0, [pc, #68]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c420:	f008 f962 	bl	80146e8 <siprintf>
 800c424:	480f      	ldr	r0, [pc, #60]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c426:	f7f9 f8eb 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c42a:	2000      	movs	r0, #0
 800c42c:	f7ff fd02 	bl	800be34 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800c430:	e00e      	b.n	800c450 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800c432:	4b09      	ldr	r3, [pc, #36]	@ (800c458 <VCU_ProcessReadEeprom+0x14c>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d008      	beq.n	800c450 <VCU_ProcessReadEeprom+0x144>
 800c43e:	8abb      	ldrh	r3, [r7, #20]
 800c440:	461a      	mov	r2, r3
 800c442:	490f      	ldr	r1, [pc, #60]	@ (800c480 <VCU_ProcessReadEeprom+0x174>)
 800c444:	4807      	ldr	r0, [pc, #28]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c446:	f008 f94f 	bl	80146e8 <siprintf>
 800c44a:	4806      	ldr	r0, [pc, #24]	@ (800c464 <VCU_ProcessReadEeprom+0x158>)
 800c44c:	f7f9 f8d8 	bl	8005600 <serialOut>
}
 800c450:	bf00      	nop
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	2000000c 	.word	0x2000000c
 800c45c:	2000a6d8 	.word	0x2000a6d8
 800c460:	080198ac 	.word	0x080198ac
 800c464:	20000b5c 	.word	0x20000b5c
 800c468:	20000d20 	.word	0x20000d20
 800c46c:	2000a66c 	.word	0x2000a66c
 800c470:	200005d0 	.word	0x200005d0
 800c474:	2000a734 	.word	0x2000a734
 800c478:	2000a6e4 	.word	0x2000a6e4
 800c47c:	080198cc 	.word	0x080198cc
 800c480:	080198ec 	.word	0x080198ec

0800c484 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c48e:	4b52      	ldr	r3, [pc, #328]	@ (800c5d8 <VCU_ProcessWriteEeprom+0x154>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f003 0310 	and.w	r3, r3, #16
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00c      	beq.n	800c4b4 <VCU_ProcessWriteEeprom+0x30>
 800c49a:	4b50      	ldr	r3, [pc, #320]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	494e      	ldr	r1, [pc, #312]	@ (800c5e0 <VCU_ProcessWriteEeprom+0x15c>)
 800c4a8:	484e      	ldr	r0, [pc, #312]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c4aa:	f008 f91d 	bl	80146e8 <siprintf>
 800c4ae:	484d      	ldr	r0, [pc, #308]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c4b0:	f7f9 f8a6 	bl	8005600 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c4b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c5e8 <VCU_ProcessWriteEeprom+0x164>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a4c      	ldr	r2, [pc, #304]	@ (800c5ec <VCU_ProcessWriteEeprom+0x168>)
 800c4ba:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c4bc:	4b4c      	ldr	r3, [pc, #304]	@ (800c5f0 <VCU_ProcessWriteEeprom+0x16c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	4a4a      	ldr	r2, [pc, #296]	@ (800c5ec <VCU_ProcessWriteEeprom+0x168>)
 800c4c4:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800c4c6:	f107 0308 	add.w	r3, r7, #8
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f008 f96f 	bl	80147b2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800c4d4:	4a47      	ldr	r2, [pc, #284]	@ (800c5f4 <VCU_ProcessWriteEeprom+0x170>)
 800c4d6:	f107 0308 	add.w	r3, r7, #8
 800c4da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4de:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800c4e2:	7a3b      	ldrb	r3, [r7, #8]
 800c4e4:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800c4ea:	8a7b      	ldrh	r3, [r7, #18]
 800c4ec:	6979      	ldr	r1, [r7, #20]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7f9 f9ec 	bl	80058cc <StoreEEPROM>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800c4f8:	8a3b      	ldrh	r3, [r7, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d156      	bne.n	800c5ac <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	f36f 231f 	bfc	r3, #8, #24
 800c504:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800c50a:	8a7b      	ldrh	r3, [r7, #18]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c510:	4b32      	ldr	r3, [pc, #200]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800c516:	4b31      	ldr	r3, [pc, #196]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c518:	2200      	movs	r2, #0
 800c51a:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800c51c:	4b2f      	ldr	r3, [pc, #188]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c51e:	2200      	movs	r2, #0
 800c520:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800c522:	4b35      	ldr	r3, [pc, #212]	@ (800c5f8 <VCU_ProcessWriteEeprom+0x174>)
 800c524:	461a      	mov	r2, r3
 800c526:	463b      	mov	r3, r7
 800c528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c52c:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c530:	4b2e      	ldr	r3, [pc, #184]	@ (800c5ec <VCU_ProcessWriteEeprom+0x168>)
 800c532:	895b      	ldrh	r3, [r3, #10]
 800c534:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c53e:	b299      	uxth	r1, r3
 800c540:	4a26      	ldr	r2, [pc, #152]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c542:	8813      	ldrh	r3, [r2, #0]
 800c544:	f361 030a 	bfi	r3, r1, #0, #11
 800c548:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c54a:	4a24      	ldr	r2, [pc, #144]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c54c:	6813      	ldr	r3, [r2, #0]
 800c54e:	f36f 23dc 	bfc	r3, #11, #18
 800c552:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c554:	4a21      	ldr	r2, [pc, #132]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c556:	7913      	ldrb	r3, [r2, #4]
 800c558:	f36f 1386 	bfc	r3, #6, #1
 800c55c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c55e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c560:	7913      	ldrb	r3, [r2, #4]
 800c562:	2108      	movs	r1, #8
 800c564:	f361 0303 	bfi	r3, r1, #0, #4
 800c568:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c56a:	4a1c      	ldr	r2, [pc, #112]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c56c:	7913      	ldrb	r3, [r2, #4]
 800c56e:	f36f 13c7 	bfc	r3, #7, #1
 800c572:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c574:	4a19      	ldr	r2, [pc, #100]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c576:	7913      	ldrb	r3, [r2, #4]
 800c578:	f36f 1304 	bfc	r3, #4, #1
 800c57c:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c57e:	4b16      	ldr	r3, [pc, #88]	@ (800c5d8 <VCU_ProcessWriteEeprom+0x154>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 0310 	and.w	r3, r3, #16
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00c      	beq.n	800c5a4 <VCU_ProcessWriteEeprom+0x120>
 800c58a:	4b14      	ldr	r3, [pc, #80]	@ (800c5dc <VCU_ProcessWriteEeprom+0x158>)
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c592:	b29b      	uxth	r3, r3
 800c594:	461a      	mov	r2, r3
 800c596:	4919      	ldr	r1, [pc, #100]	@ (800c5fc <VCU_ProcessWriteEeprom+0x178>)
 800c598:	4812      	ldr	r0, [pc, #72]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c59a:	f008 f8a5 	bl	80146e8 <siprintf>
 800c59e:	4811      	ldr	r0, [pc, #68]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c5a0:	f7f9 f82e 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	f7ff fc45 	bl	800be34 <VCU_TransmitMessageQueue>
 800c5aa:	e00e      	b.n	800c5ca <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800c5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d8 <VCU_ProcessWriteEeprom+0x154>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d008      	beq.n	800c5ca <VCU_ProcessWriteEeprom+0x146>
 800c5b8:	8a3b      	ldrh	r3, [r7, #16]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4910      	ldr	r1, [pc, #64]	@ (800c600 <VCU_ProcessWriteEeprom+0x17c>)
 800c5be:	4809      	ldr	r0, [pc, #36]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c5c0:	f008 f892 	bl	80146e8 <siprintf>
 800c5c4:	4807      	ldr	r0, [pc, #28]	@ (800c5e4 <VCU_ProcessWriteEeprom+0x160>)
 800c5c6:	f7f9 f81b 	bl	8005600 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800c5ca:	f7fa fbdd 	bl	8006d88 <PCU_Initialize>
}
 800c5ce:	bf00      	nop
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	2000000c 	.word	0x2000000c
 800c5dc:	2000a6d8 	.word	0x2000a6d8
 800c5e0:	08019910 	.word	0x08019910
 800c5e4:	20000b5c 	.word	0x20000b5c
 800c5e8:	20000d20 	.word	0x20000d20
 800c5ec:	2000a66c 	.word	0x2000a66c
 800c5f0:	200005d0 	.word	0x200005d0
 800c5f4:	2000a734 	.word	0x2000a734
 800c5f8:	2000a6e4 	.word	0x2000a6e4
 800c5fc:	080198cc 	.word	0x080198cc
 800c600:	08019930 	.word	0x08019930

0800c604 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800c604:	b480      	push	{r7}
 800c606:	af00      	add	r7, sp, #0

}
 800c608:	bf00      	nop
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
	...

0800c614 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800c61a:	4b16      	ldr	r3, [pc, #88]	@ (800c674 <VCU_TicksSinceLastMessage+0x60>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c620:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800c622:	4b15      	ldr	r3, [pc, #84]	@ (800c678 <VCU_TicksSinceLastMessage+0x64>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800c628:	4b14      	ldr	r3, [pc, #80]	@ (800c67c <VCU_TicksSinceLastMessage+0x68>)
 800c62a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d105      	bne.n	800c63e <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800c632:	4b12      	ldr	r3, [pc, #72]	@ (800c67c <VCU_TicksSinceLastMessage+0x68>)
 800c634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	e013      	b.n	800c666 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800c63e:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <VCU_TicksSinceLastMessage+0x60>)
 800c640:	68da      	ldr	r2, [r3, #12]
 800c642:	4b0e      	ldr	r3, [pc, #56]	@ (800c67c <VCU_TicksSinceLastMessage+0x68>)
 800c644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	4b0a      	ldr	r3, [pc, #40]	@ (800c674 <VCU_TicksSinceLastMessage+0x60>)
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	3301      	adds	r3, #1
 800c64e:	490b      	ldr	r1, [pc, #44]	@ (800c67c <VCU_TicksSinceLastMessage+0x68>)
 800c650:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	1a41      	subs	r1, r0, r1
 800c656:	3901      	subs	r1, #1
 800c658:	fb01 f303 	mul.w	r3, r1, r3
 800c65c:	441a      	add	r2, r3
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	4413      	add	r3, r2
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800c666:	68fb      	ldr	r3, [r7, #12]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	200005d0 	.word	0x200005d0
 800c678:	20000d20 	.word	0x20000d20
 800c67c:	2000a66c 	.word	0x2000a66c

0800c680 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800c68c:	f04f 0300 	mov.w	r3, #0
 800c690:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800c692:	4b67      	ldr	r3, [pc, #412]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c694:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c698:	4618      	mov	r0, r3
 800c69a:	f7f3 ff2b 	bl	80004f4 <__aeabi_i2d>
 800c69e:	f04f 0200 	mov.w	r2, #0
 800c6a2:	4b64      	ldr	r3, [pc, #400]	@ (800c834 <VCU_TransmitBmsState+0x1b4>)
 800c6a4:	f7f3 ff90 	bl	80005c8 <__aeabi_dmul>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f04f 0200 	mov.w	r2, #0
 800c6b4:	f04f 0300 	mov.w	r3, #0
 800c6b8:	f7f3 fdd0 	bl	800025c <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	f7f4 fa78 	bl	8000bb8 <__aeabi_d2f>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800c6cc:	6978      	ldr	r0, [r7, #20]
 800c6ce:	f7f3 ff23 	bl	8000518 <__aeabi_f2d>
 800c6d2:	a355      	add	r3, pc, #340	@ (adr r3, 800c828 <VCU_TransmitBmsState+0x1a8>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f7f4 f8a0 	bl	800081c <__aeabi_ddiv>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	f7f4 fa68 	bl	8000bb8 <__aeabi_d2f>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800c6ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6f4:	edc7 7a01 	vstr	s15, [r7, #4]
 800c6f8:	793b      	ldrb	r3, [r7, #4]
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	893b      	ldrh	r3, [r7, #8]
 800c6fe:	f362 0389 	bfi	r3, r2, #2, #8
 800c702:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800c704:	4b4a      	ldr	r3, [pc, #296]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	7a3b      	ldrb	r3, [r7, #8]
 800c712:	f362 0301 	bfi	r3, r2, #0, #2
 800c716:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800c718:	4b45      	ldr	r3, [pc, #276]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c71a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	b2da      	uxtb	r2, r3
 800c724:	7a7b      	ldrb	r3, [r7, #9]
 800c726:	f362 0383 	bfi	r3, r2, #2, #2
 800c72a:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800c72c:	4b40      	ldr	r3, [pc, #256]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c72e:	7d9b      	ldrb	r3, [r3, #22]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	b2da      	uxtb	r2, r3
 800c736:	7a7b      	ldrb	r3, [r7, #9]
 800c738:	f362 1304 	bfi	r3, r2, #4, #1
 800c73c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800c73e:	4b3c      	ldr	r3, [pc, #240]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c740:	7d5b      	ldrb	r3, [r3, #21]
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	7a7b      	ldrb	r3, [r7, #9]
 800c74a:	f362 1345 	bfi	r3, r2, #5, #1
 800c74e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800c750:	4b37      	ldr	r3, [pc, #220]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c752:	7ddb      	ldrb	r3, [r3, #23]
 800c754:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800c756:	4b36      	ldr	r3, [pc, #216]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c758:	7e1b      	ldrb	r3, [r3, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800c75e:	7a7b      	ldrb	r3, [r7, #9]
 800c760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c764:	727b      	strb	r3, [r7, #9]
 800c766:	e003      	b.n	800c770 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800c768:	7a7b      	ldrb	r3, [r7, #9]
 800c76a:	f36f 1386 	bfc	r3, #6, #1
 800c76e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800c770:	4b2f      	ldr	r3, [pc, #188]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c772:	7d1b      	ldrb	r3, [r3, #20]
 800c774:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800c776:	7a7b      	ldrb	r3, [r7, #9]
 800c778:	f36f 13c7 	bfc	r3, #7, #1
 800c77c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c782:	4b2d      	ldr	r3, [pc, #180]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c784:	2200      	movs	r2, #0
 800c786:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c788:	4b2b      	ldr	r3, [pc, #172]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c78e:	4b2a      	ldr	r3, [pc, #168]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c790:	2200      	movs	r2, #0
 800c792:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800c794:	4b29      	ldr	r3, [pc, #164]	@ (800c83c <VCU_TransmitBmsState+0x1bc>)
 800c796:	461a      	mov	r2, r3
 800c798:	f107 0308 	add.w	r3, r7, #8
 800c79c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7a0:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c7a4:	4b22      	ldr	r3, [pc, #136]	@ (800c830 <VCU_TransmitBmsState+0x1b0>)
 800c7a6:	895b      	ldrh	r3, [r3, #10]
 800c7a8:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7b2:	b299      	uxth	r1, r3
 800c7b4:	4a20      	ldr	r2, [pc, #128]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7b6:	8813      	ldrh	r3, [r2, #0]
 800c7b8:	f361 030a 	bfi	r3, r1, #0, #11
 800c7bc:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c7be:	4a1e      	ldr	r2, [pc, #120]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7c0:	6813      	ldr	r3, [r2, #0]
 800c7c2:	f36f 23dc 	bfc	r3, #11, #18
 800c7c6:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c7c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7ca:	7913      	ldrb	r3, [r2, #4]
 800c7cc:	f36f 1386 	bfc	r3, #6, #1
 800c7d0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c7d2:	4a19      	ldr	r2, [pc, #100]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7d4:	7913      	ldrb	r3, [r2, #4]
 800c7d6:	2108      	movs	r1, #8
 800c7d8:	f361 0303 	bfi	r3, r1, #0, #4
 800c7dc:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c7de:	4a16      	ldr	r2, [pc, #88]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7e0:	7913      	ldrb	r3, [r2, #4]
 800c7e2:	f36f 13c7 	bfc	r3, #7, #1
 800c7e6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c7e8:	4a13      	ldr	r2, [pc, #76]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c7ea:	7913      	ldrb	r3, [r2, #4]
 800c7ec:	f36f 1304 	bfc	r3, #4, #1
 800c7f0:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c7f2:	4b13      	ldr	r3, [pc, #76]	@ (800c840 <VCU_TransmitBmsState+0x1c0>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	f003 0310 	and.w	r3, r3, #16
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00c      	beq.n	800c818 <VCU_TransmitBmsState+0x198>
 800c7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c838 <VCU_TransmitBmsState+0x1b8>)
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c806:	b29b      	uxth	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	490e      	ldr	r1, [pc, #56]	@ (800c844 <VCU_TransmitBmsState+0x1c4>)
 800c80c:	480e      	ldr	r0, [pc, #56]	@ (800c848 <VCU_TransmitBmsState+0x1c8>)
 800c80e:	f007 ff6b 	bl	80146e8 <siprintf>
 800c812:	480d      	ldr	r0, [pc, #52]	@ (800c848 <VCU_TransmitBmsState+0x1c8>)
 800c814:	f7f8 fef4 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c818:	2000      	movs	r0, #0
 800c81a:	f7ff fb0b 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800c81e:	bf00      	nop
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	9999999a 	.word	0x9999999a
 800c82c:	3fd99999 	.word	0x3fd99999
 800c830:	2000a66c 	.word	0x2000a66c
 800c834:	3fe00000 	.word	0x3fe00000
 800c838:	2000a6d8 	.word	0x2000a6d8
 800c83c:	2000a6e4 	.word	0x2000a6e4
 800c840:	2000000c 	.word	0x2000000c
 800c844:	08019954 	.word	0x08019954
 800c848:	20000b5c 	.word	0x20000b5c
 800c84c:	00000000 	.word	0x00000000

0800c850 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800c856:	f04f 0300 	mov.w	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c85c:	f04f 0300 	mov.w	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800c862:	4b65      	ldr	r3, [pc, #404]	@ (800c9f8 <VCU_TransmitBmsData1+0x1a8>)
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	4618      	mov	r0, r3
 800c868:	f7f3 fe34 	bl	80004d4 <__aeabi_ui2d>
 800c86c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c9e8 <VCU_TransmitBmsData1+0x198>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f3 fea9 	bl	80005c8 <__aeabi_dmul>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4610      	mov	r0, r2
 800c87c:	4619      	mov	r1, r3
 800c87e:	f04f 0200 	mov.w	r2, #0
 800c882:	4b5e      	ldr	r3, [pc, #376]	@ (800c9fc <VCU_TransmitBmsData1+0x1ac>)
 800c884:	f7f3 fce8 	bl	8000258 <__aeabi_dsub>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4610      	mov	r0, r2
 800c88e:	4619      	mov	r1, r3
 800c890:	f7f4 f992 	bl	8000bb8 <__aeabi_d2f>
 800c894:	4603      	mov	r3, r0
 800c896:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7f3 fe3d 	bl	8000518 <__aeabi_f2d>
 800c89e:	a352      	add	r3, pc, #328	@ (adr r3, 800c9e8 <VCU_TransmitBmsData1+0x198>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f7f3 ffba 	bl	800081c <__aeabi_ddiv>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	f04f 0200 	mov.w	r2, #0
 800c8b4:	4b52      	ldr	r3, [pc, #328]	@ (800ca00 <VCU_TransmitBmsData1+0x1b0>)
 800c8b6:	f7f3 fcd1 	bl	800025c <__adddf3>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4610      	mov	r0, r2
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	f7f4 f979 	bl	8000bb8 <__aeabi_d2f>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800c8ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d2:	ee17 3a90 	vmov	r3, s15
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800c8da:	4b47      	ldr	r3, [pc, #284]	@ (800c9f8 <VCU_TransmitBmsData1+0x1a8>)
 800c8dc:	899b      	ldrh	r3, [r3, #12]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f3 fe08 	bl	80004f4 <__aeabi_i2d>
 800c8e4:	a342      	add	r3, pc, #264	@ (adr r3, 800c9f0 <VCU_TransmitBmsData1+0x1a0>)
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f7f3 fe6d 	bl	80005c8 <__aeabi_dmul>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	f04f 0300 	mov.w	r3, #0
 800c8fe:	f7f3 fcad 	bl	800025c <__adddf3>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4610      	mov	r0, r2
 800c908:	4619      	mov	r1, r3
 800c90a:	f7f4 f955 	bl	8000bb8 <__aeabi_d2f>
 800c90e:	4603      	mov	r3, r0
 800c910:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7f3 fe00 	bl	8000518 <__aeabi_f2d>
 800c918:	a333      	add	r3, pc, #204	@ (adr r3, 800c9e8 <VCU_TransmitBmsData1+0x198>)
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	f7f3 ff7d 	bl	800081c <__aeabi_ddiv>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4610      	mov	r0, r2
 800c928:	4619      	mov	r1, r3
 800c92a:	f7f4 f945 	bl	8000bb8 <__aeabi_d2f>
 800c92e:	4603      	mov	r3, r0
 800c930:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800c932:	edd7 7a02 	vldr	s15, [r7, #8]
 800c936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c93a:	ee17 3a90 	vmov	r3, s15
 800c93e:	b29b      	uxth	r3, r3
 800c940:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c946:	4b2f      	ldr	r3, [pc, #188]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c94c:	4b2d      	ldr	r3, [pc, #180]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c94e:	2200      	movs	r2, #0
 800c950:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c952:	4b2c      	ldr	r3, [pc, #176]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c954:	2200      	movs	r2, #0
 800c956:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800c958:	4b2b      	ldr	r3, [pc, #172]	@ (800ca08 <VCU_TransmitBmsData1+0x1b8>)
 800c95a:	461a      	mov	r2, r3
 800c95c:	463b      	mov	r3, r7
 800c95e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c962:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c966:	4b24      	ldr	r3, [pc, #144]	@ (800c9f8 <VCU_TransmitBmsData1+0x1a8>)
 800c968:	895b      	ldrh	r3, [r3, #10]
 800c96a:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c974:	b299      	uxth	r1, r3
 800c976:	4a23      	ldr	r2, [pc, #140]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c978:	8813      	ldrh	r3, [r2, #0]
 800c97a:	f361 030a 	bfi	r3, r1, #0, #11
 800c97e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c980:	4a20      	ldr	r2, [pc, #128]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c982:	6813      	ldr	r3, [r2, #0]
 800c984:	f36f 23dc 	bfc	r3, #11, #18
 800c988:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c98a:	4a1e      	ldr	r2, [pc, #120]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c98c:	7913      	ldrb	r3, [r2, #4]
 800c98e:	f36f 1386 	bfc	r3, #6, #1
 800c992:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c994:	4a1b      	ldr	r2, [pc, #108]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c996:	7913      	ldrb	r3, [r2, #4]
 800c998:	2108      	movs	r1, #8
 800c99a:	f361 0303 	bfi	r3, r1, #0, #4
 800c99e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c9a0:	4a18      	ldr	r2, [pc, #96]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c9a2:	7913      	ldrb	r3, [r2, #4]
 800c9a4:	f36f 13c7 	bfc	r3, #7, #1
 800c9a8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c9aa:	4a16      	ldr	r2, [pc, #88]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c9ac:	7913      	ldrb	r3, [r2, #4]
 800c9ae:	f36f 1304 	bfc	r3, #4, #1
 800c9b2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c9b4:	4b15      	ldr	r3, [pc, #84]	@ (800ca0c <VCU_TransmitBmsData1+0x1bc>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 0310 	and.w	r3, r3, #16
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00c      	beq.n	800c9da <VCU_TransmitBmsData1+0x18a>
 800c9c0:	4b10      	ldr	r3, [pc, #64]	@ (800ca04 <VCU_TransmitBmsData1+0x1b4>)
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4910      	ldr	r1, [pc, #64]	@ (800ca10 <VCU_TransmitBmsData1+0x1c0>)
 800c9ce:	4811      	ldr	r0, [pc, #68]	@ (800ca14 <VCU_TransmitBmsData1+0x1c4>)
 800c9d0:	f007 fe8a 	bl	80146e8 <siprintf>
 800c9d4:	480f      	ldr	r0, [pc, #60]	@ (800ca14 <VCU_TransmitBmsData1+0x1c4>)
 800c9d6:	f7f8 fe13 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f7ff fa2a 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800c9e0:	bf00      	nop
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	9999999a 	.word	0x9999999a
 800c9ec:	3fa99999 	.word	0x3fa99999
 800c9f0:	eb851eb8 	.word	0xeb851eb8
 800c9f4:	3f8eb851 	.word	0x3f8eb851
 800c9f8:	2000a66c 	.word	0x2000a66c
 800c9fc:	40990000 	.word	0x40990000
 800ca00:	40df4000 	.word	0x40df4000
 800ca04:	2000a6d8 	.word	0x2000a6d8
 800ca08:	2000a6e4 	.word	0x2000a6e4
 800ca0c:	2000000c 	.word	0x2000000c
 800ca10:	0801996c 	.word	0x0801996c
 800ca14:	20000b5c 	.word	0x20000b5c

0800ca18 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800ca1e:	f04f 0300 	mov.w	r3, #0
 800ca22:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800ca24:	f04f 0300 	mov.w	r3, #0
 800ca28:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800ca2a:	4b95      	ldr	r3, [pc, #596]	@ (800cc80 <VCU_TransmitBmsData2+0x268>)
 800ca2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7f3 fd5f 	bl	80004f4 <__aeabi_i2d>
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	4b92      	ldr	r3, [pc, #584]	@ (800cc84 <VCU_TransmitBmsData2+0x26c>)
 800ca3c:	f7f3 fdc4 	bl	80005c8 <__aeabi_dmul>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	f7f3 fc04 	bl	800025c <__adddf3>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	f7f4 f8ac 	bl	8000bb8 <__aeabi_d2f>
 800ca60:	4603      	mov	r3, r0
 800ca62:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7f3 fd57 	bl	8000518 <__aeabi_f2d>
 800ca6a:	a381      	add	r3, pc, #516	@ (adr r3, 800cc70 <VCU_TransmitBmsData2+0x258>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f7f3 fed4 	bl	800081c <__aeabi_ddiv>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f7f4 f89c 	bl	8000bb8 <__aeabi_d2f>
 800ca80:	4603      	mov	r3, r0
 800ca82:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800ca84:	edd7 7a02 	vldr	s15, [r7, #8]
 800ca88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca8c:	ee17 3a90 	vmov	r3, s15
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800ca94:	4b7a      	ldr	r3, [pc, #488]	@ (800cc80 <VCU_TransmitBmsData2+0x268>)
 800ca96:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f3 fd2b 	bl	80004f4 <__aeabi_i2d>
 800ca9e:	a376      	add	r3, pc, #472	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	f7f3 fd90 	bl	80005c8 <__aeabi_dmul>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	4610      	mov	r0, r2
 800caae:	4619      	mov	r1, r3
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	f7f3 fbd0 	bl	800025c <__adddf3>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4610      	mov	r0, r2
 800cac2:	4619      	mov	r1, r3
 800cac4:	f7f4 f878 	bl	8000bb8 <__aeabi_d2f>
 800cac8:	4603      	mov	r3, r0
 800caca:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f7f3 fd23 	bl	8000518 <__aeabi_f2d>
 800cad2:	a369      	add	r3, pc, #420	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fea0 	bl	800081c <__aeabi_ddiv>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4610      	mov	r0, r2
 800cae2:	4619      	mov	r1, r3
 800cae4:	f7f4 f868 	bl	8000bb8 <__aeabi_d2f>
 800cae8:	4603      	mov	r3, r0
 800caea:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800caec:	edd7 7a02 	vldr	s15, [r7, #8]
 800caf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf4:	ee17 3a90 	vmov	r3, s15
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800cafc:	4b60      	ldr	r3, [pc, #384]	@ (800cc80 <VCU_TransmitBmsData2+0x268>)
 800cafe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f3 fcf7 	bl	80004f4 <__aeabi_i2d>
 800cb06:	a35c      	add	r3, pc, #368	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	f7f3 fd5c 	bl	80005c8 <__aeabi_dmul>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4610      	mov	r0, r2
 800cb16:	4619      	mov	r1, r3
 800cb18:	f04f 0200 	mov.w	r2, #0
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	f7f3 fb9c 	bl	800025c <__adddf3>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f7f4 f844 	bl	8000bb8 <__aeabi_d2f>
 800cb30:	4603      	mov	r3, r0
 800cb32:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7f3 fcef 	bl	8000518 <__aeabi_f2d>
 800cb3a:	a34f      	add	r3, pc, #316	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fe6c 	bl	800081c <__aeabi_ddiv>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f7f4 f834 	bl	8000bb8 <__aeabi_d2f>
 800cb50:	4603      	mov	r3, r0
 800cb52:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800cb54:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb5c:	ee17 3a90 	vmov	r3, s15
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800cb64:	4b46      	ldr	r3, [pc, #280]	@ (800cc80 <VCU_TransmitBmsData2+0x268>)
 800cb66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7f3 fcc3 	bl	80004f4 <__aeabi_i2d>
 800cb6e:	a342      	add	r3, pc, #264	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fd28 	bl	80005c8 <__aeabi_dmul>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f04f 0200 	mov.w	r2, #0
 800cb84:	f04f 0300 	mov.w	r3, #0
 800cb88:	f7f3 fb68 	bl	800025c <__adddf3>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4610      	mov	r0, r2
 800cb92:	4619      	mov	r1, r3
 800cb94:	f7f4 f810 	bl	8000bb8 <__aeabi_d2f>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7f3 fcbb 	bl	8000518 <__aeabi_f2d>
 800cba2:	a335      	add	r3, pc, #212	@ (adr r3, 800cc78 <VCU_TransmitBmsData2+0x260>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fe38 	bl	800081c <__aeabi_ddiv>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	f7f4 f800 	bl	8000bb8 <__aeabi_d2f>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800cbbc:	edd7 7a02 	vldr	s15, [r7, #8]
 800cbc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc4:	ee17 3a90 	vmov	r3, s15
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cbcc:	4b2e      	ldr	r3, [pc, #184]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800cbd2:	4b2d      	ldr	r3, [pc, #180]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800cbd8:	4b2b      	ldr	r3, [pc, #172]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800cbde:	4b2b      	ldr	r3, [pc, #172]	@ (800cc8c <VCU_TransmitBmsData2+0x274>)
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	463b      	mov	r3, r7
 800cbe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbe8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cbec:	4b24      	ldr	r3, [pc, #144]	@ (800cc80 <VCU_TransmitBmsData2+0x268>)
 800cbee:	895b      	ldrh	r3, [r3, #10]
 800cbf0:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbfa:	b299      	uxth	r1, r3
 800cbfc:	4a22      	ldr	r2, [pc, #136]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cbfe:	8813      	ldrh	r3, [r2, #0]
 800cc00:	f361 030a 	bfi	r3, r1, #0, #11
 800cc04:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cc06:	4a20      	ldr	r2, [pc, #128]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	f36f 23dc 	bfc	r3, #11, #18
 800cc0e:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cc10:	4a1d      	ldr	r2, [pc, #116]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc12:	7913      	ldrb	r3, [r2, #4]
 800cc14:	f36f 1386 	bfc	r3, #6, #1
 800cc18:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cc1a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc1c:	7913      	ldrb	r3, [r2, #4]
 800cc1e:	2108      	movs	r1, #8
 800cc20:	f361 0303 	bfi	r3, r1, #0, #4
 800cc24:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cc26:	4a18      	ldr	r2, [pc, #96]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc28:	7913      	ldrb	r3, [r2, #4]
 800cc2a:	f36f 13c7 	bfc	r3, #7, #1
 800cc2e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cc30:	4a15      	ldr	r2, [pc, #84]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc32:	7913      	ldrb	r3, [r2, #4]
 800cc34:	f36f 1304 	bfc	r3, #4, #1
 800cc38:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cc3a:	4b15      	ldr	r3, [pc, #84]	@ (800cc90 <VCU_TransmitBmsData2+0x278>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	f003 0310 	and.w	r3, r3, #16
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00c      	beq.n	800cc60 <VCU_TransmitBmsData2+0x248>
 800cc46:	4b10      	ldr	r3, [pc, #64]	@ (800cc88 <VCU_TransmitBmsData2+0x270>)
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	461a      	mov	r2, r3
 800cc52:	4910      	ldr	r1, [pc, #64]	@ (800cc94 <VCU_TransmitBmsData2+0x27c>)
 800cc54:	4810      	ldr	r0, [pc, #64]	@ (800cc98 <VCU_TransmitBmsData2+0x280>)
 800cc56:	f007 fd47 	bl	80146e8 <siprintf>
 800cc5a:	480f      	ldr	r0, [pc, #60]	@ (800cc98 <VCU_TransmitBmsData2+0x280>)
 800cc5c:	f7f8 fcd0 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cc60:	2000      	movs	r0, #0
 800cc62:	f7ff f8e7 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	9999999a 	.word	0x9999999a
 800cc74:	3f599999 	.word	0x3f599999
 800cc78:	d2f1a9fc 	.word	0xd2f1a9fc
 800cc7c:	3f50624d 	.word	0x3f50624d
 800cc80:	2000a66c 	.word	0x2000a66c
 800cc84:	3fe00000 	.word	0x3fe00000
 800cc88:	2000a6d8 	.word	0x2000a6d8
 800cc8c:	2000a6e4 	.word	0x2000a6e4
 800cc90:	2000000c 	.word	0x2000000c
 800cc94:	08019988 	.word	0x08019988
 800cc98:	20000b5c 	.word	0x20000b5c
 800cc9c:	00000000 	.word	0x00000000

0800cca0 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800ccac:	f04f 0300 	mov.w	r3, #0
 800ccb0:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800ccb2:	4b89      	ldr	r3, [pc, #548]	@ (800ced8 <VCU_TransmitBmsData3+0x238>)
 800ccb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f3 fc1c 	bl	80004f4 <__aeabi_i2d>
 800ccbc:	a380      	add	r3, pc, #512	@ (adr r3, 800cec0 <VCU_TransmitBmsData3+0x220>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	f7f3 fc81 	bl	80005c8 <__aeabi_dmul>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4610      	mov	r0, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	a37e      	add	r3, pc, #504	@ (adr r3, 800cec8 <VCU_TransmitBmsData3+0x228>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f7f3 fac0 	bl	8000258 <__aeabi_dsub>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4610      	mov	r0, r2
 800ccde:	4619      	mov	r1, r3
 800cce0:	f7f3 ff6a 	bl	8000bb8 <__aeabi_d2f>
 800cce4:	4603      	mov	r3, r0
 800cce6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7f3 fc15 	bl	8000518 <__aeabi_f2d>
 800ccee:	f04f 0200 	mov.w	r2, #0
 800ccf2:	4b7a      	ldr	r3, [pc, #488]	@ (800cedc <VCU_TransmitBmsData3+0x23c>)
 800ccf4:	f7f3 fd92 	bl	800081c <__aeabi_ddiv>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4619      	mov	r1, r3
 800cd00:	a373      	add	r3, pc, #460	@ (adr r3, 800ced0 <VCU_TransmitBmsData3+0x230>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7f3 faa9 	bl	800025c <__adddf3>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4610      	mov	r0, r2
 800cd10:	4619      	mov	r1, r3
 800cd12:	f7f3 ff51 	bl	8000bb8 <__aeabi_d2f>
 800cd16:	4603      	mov	r3, r0
 800cd18:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800cd1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd22:	ee17 3a90 	vmov	r3, s15
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800cd2a:	4b6b      	ldr	r3, [pc, #428]	@ (800ced8 <VCU_TransmitBmsData3+0x238>)
 800cd2c:	8bdb      	ldrh	r3, [r3, #30]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f3 fbe0 	bl	80004f4 <__aeabi_i2d>
 800cd34:	a362      	add	r3, pc, #392	@ (adr r3, 800cec0 <VCU_TransmitBmsData3+0x220>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f7f3 fc45 	bl	80005c8 <__aeabi_dmul>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4610      	mov	r0, r2
 800cd44:	4619      	mov	r1, r3
 800cd46:	a360      	add	r3, pc, #384	@ (adr r3, 800cec8 <VCU_TransmitBmsData3+0x228>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	f7f3 fa84 	bl	8000258 <__aeabi_dsub>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4610      	mov	r0, r2
 800cd56:	4619      	mov	r1, r3
 800cd58:	f7f3 ff2e 	bl	8000bb8 <__aeabi_d2f>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7f3 fbd9 	bl	8000518 <__aeabi_f2d>
 800cd66:	f04f 0200 	mov.w	r2, #0
 800cd6a:	4b5c      	ldr	r3, [pc, #368]	@ (800cedc <VCU_TransmitBmsData3+0x23c>)
 800cd6c:	f7f3 fd56 	bl	800081c <__aeabi_ddiv>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4610      	mov	r0, r2
 800cd76:	4619      	mov	r1, r3
 800cd78:	a355      	add	r3, pc, #340	@ (adr r3, 800ced0 <VCU_TransmitBmsData3+0x230>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 fa6d 	bl	800025c <__adddf3>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4610      	mov	r0, r2
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7f3 ff15 	bl	8000bb8 <__aeabi_d2f>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800cd92:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd9a:	ee17 3a90 	vmov	r3, s15
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800cda2:	4b4d      	ldr	r3, [pc, #308]	@ (800ced8 <VCU_TransmitBmsData3+0x238>)
 800cda4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f3 fba4 	bl	80004f4 <__aeabi_i2d>
 800cdac:	a344      	add	r3, pc, #272	@ (adr r3, 800cec0 <VCU_TransmitBmsData3+0x220>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	f7f3 fc09 	bl	80005c8 <__aeabi_dmul>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	4610      	mov	r0, r2
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	a342      	add	r3, pc, #264	@ (adr r3, 800cec8 <VCU_TransmitBmsData3+0x228>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	f7f3 fa48 	bl	8000258 <__aeabi_dsub>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4610      	mov	r0, r2
 800cdce:	4619      	mov	r1, r3
 800cdd0:	f7f3 fef2 	bl	8000bb8 <__aeabi_d2f>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7f3 fb9d 	bl	8000518 <__aeabi_f2d>
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	4b3e      	ldr	r3, [pc, #248]	@ (800cedc <VCU_TransmitBmsData3+0x23c>)
 800cde4:	f7f3 fd1a 	bl	800081c <__aeabi_ddiv>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4610      	mov	r0, r2
 800cdee:	4619      	mov	r1, r3
 800cdf0:	a337      	add	r3, pc, #220	@ (adr r3, 800ced0 <VCU_TransmitBmsData3+0x230>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa31 	bl	800025c <__adddf3>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	4610      	mov	r0, r2
 800ce00:	4619      	mov	r1, r3
 800ce02:	f7f3 fed9 	bl	8000bb8 <__aeabi_d2f>
 800ce06:	4603      	mov	r3, r0
 800ce08:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800ce0a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce12:	ee17 3a90 	vmov	r3, s15
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800ce1e:	4b30      	ldr	r3, [pc, #192]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800ce24:	4b2e      	ldr	r3, [pc, #184]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800ce2a:	4b2d      	ldr	r3, [pc, #180]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800ce30:	4b2c      	ldr	r3, [pc, #176]	@ (800cee4 <VCU_TransmitBmsData3+0x244>)
 800ce32:	461a      	mov	r2, r3
 800ce34:	463b      	mov	r3, r7
 800ce36:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce3a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ce3e:	4b26      	ldr	r3, [pc, #152]	@ (800ced8 <VCU_TransmitBmsData3+0x238>)
 800ce40:	895b      	ldrh	r3, [r3, #10]
 800ce42:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce4c:	b299      	uxth	r1, r3
 800ce4e:	4a24      	ldr	r2, [pc, #144]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce50:	8813      	ldrh	r3, [r2, #0]
 800ce52:	f361 030a 	bfi	r3, r1, #0, #11
 800ce56:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800ce58:	4a21      	ldr	r2, [pc, #132]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce5a:	6813      	ldr	r3, [r2, #0]
 800ce5c:	f36f 23dc 	bfc	r3, #11, #18
 800ce60:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ce62:	4a1f      	ldr	r2, [pc, #124]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce64:	7913      	ldrb	r3, [r2, #4]
 800ce66:	f36f 1386 	bfc	r3, #6, #1
 800ce6a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ce6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce6e:	7913      	ldrb	r3, [r2, #4]
 800ce70:	2108      	movs	r1, #8
 800ce72:	f361 0303 	bfi	r3, r1, #0, #4
 800ce76:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ce78:	4a19      	ldr	r2, [pc, #100]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce7a:	7913      	ldrb	r3, [r2, #4]
 800ce7c:	f36f 13c7 	bfc	r3, #7, #1
 800ce80:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ce82:	4a17      	ldr	r2, [pc, #92]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce84:	7913      	ldrb	r3, [r2, #4]
 800ce86:	f36f 1304 	bfc	r3, #4, #1
 800ce8a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce8c:	4b16      	ldr	r3, [pc, #88]	@ (800cee8 <VCU_TransmitBmsData3+0x248>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	f003 0310 	and.w	r3, r3, #16
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <VCU_TransmitBmsData3+0x212>
 800ce98:	4b11      	ldr	r3, [pc, #68]	@ (800cee0 <VCU_TransmitBmsData3+0x240>)
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	461a      	mov	r2, r3
 800cea4:	4911      	ldr	r1, [pc, #68]	@ (800ceec <VCU_TransmitBmsData3+0x24c>)
 800cea6:	4812      	ldr	r0, [pc, #72]	@ (800cef0 <VCU_TransmitBmsData3+0x250>)
 800cea8:	f007 fc1e 	bl	80146e8 <siprintf>
 800ceac:	4810      	ldr	r0, [pc, #64]	@ (800cef0 <VCU_TransmitBmsData3+0x250>)
 800ceae:	f7f8 fba7 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	f7fe ffbe 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800ceb8:	bf00      	nop
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	47ae147b 	.word	0x47ae147b
 800cec4:	3f847ae1 	.word	0x3f847ae1
 800cec8:	cccccccd 	.word	0xcccccccd
 800cecc:	404baccc 	.word	0x404baccc
 800ced0:	00000000 	.word	0x00000000
 800ced4:	40c11000 	.word	0x40c11000
 800ced8:	2000a66c 	.word	0x2000a66c
 800cedc:	3fa00000 	.word	0x3fa00000
 800cee0:	2000a6d8 	.word	0x2000a6d8
 800cee4:	2000a6e4 	.word	0x2000a6e4
 800cee8:	2000000c 	.word	0x2000000c
 800ceec:	080199a4 	.word	0x080199a4
 800cef0:	20000b5c 	.word	0x20000b5c
 800cef4:	00000000 	.word	0x00000000

0800cef8 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800cf04:	f04f 0300 	mov.w	r3, #0
 800cf08:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800cf0a:	4b83      	ldr	r3, [pc, #524]	@ (800d118 <VCU_TransmitBmsData5+0x220>)
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f3 fae0 	bl	80004d4 <__aeabi_ui2d>
 800cf14:	a37c      	add	r3, pc, #496	@ (adr r3, 800d108 <VCU_TransmitBmsData5+0x210>)
 800cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1a:	f7f3 fb55 	bl	80005c8 <__aeabi_dmul>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4610      	mov	r0, r2
 800cf24:	4619      	mov	r1, r3
 800cf26:	f04f 0200 	mov.w	r2, #0
 800cf2a:	4b7c      	ldr	r3, [pc, #496]	@ (800d11c <VCU_TransmitBmsData5+0x224>)
 800cf2c:	f7f3 f994 	bl	8000258 <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4610      	mov	r0, r2
 800cf36:	4619      	mov	r1, r3
 800cf38:	f7f3 fe3e 	bl	8000bb8 <__aeabi_d2f>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7f3 fae9 	bl	8000518 <__aeabi_f2d>
 800cf46:	a370      	add	r3, pc, #448	@ (adr r3, 800d108 <VCU_TransmitBmsData5+0x210>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 fc66 	bl	800081c <__aeabi_ddiv>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	4610      	mov	r0, r2
 800cf56:	4619      	mov	r1, r3
 800cf58:	f04f 0200 	mov.w	r2, #0
 800cf5c:	4b70      	ldr	r3, [pc, #448]	@ (800d120 <VCU_TransmitBmsData5+0x228>)
 800cf5e:	f7f3 f97d 	bl	800025c <__adddf3>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4610      	mov	r0, r2
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f7f3 fe25 	bl	8000bb8 <__aeabi_d2f>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800cf72:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf7a:	ee17 3a90 	vmov	r3, s15
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800cf82:	4b65      	ldr	r3, [pc, #404]	@ (800d118 <VCU_TransmitBmsData5+0x220>)
 800cf84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7f3 faa4 	bl	80004d4 <__aeabi_ui2d>
 800cf8c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d108 <VCU_TransmitBmsData5+0x210>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 fb19 	bl	80005c8 <__aeabi_dmul>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	4b5e      	ldr	r3, [pc, #376]	@ (800d11c <VCU_TransmitBmsData5+0x224>)
 800cfa4:	f7f3 f958 	bl	8000258 <__aeabi_dsub>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4610      	mov	r0, r2
 800cfae:	4619      	mov	r1, r3
 800cfb0:	f7f3 fe02 	bl	8000bb8 <__aeabi_d2f>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7f3 faad 	bl	8000518 <__aeabi_f2d>
 800cfbe:	a352      	add	r3, pc, #328	@ (adr r3, 800d108 <VCU_TransmitBmsData5+0x210>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 fc2a 	bl	800081c <__aeabi_ddiv>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	f04f 0200 	mov.w	r2, #0
 800cfd4:	4b52      	ldr	r3, [pc, #328]	@ (800d120 <VCU_TransmitBmsData5+0x228>)
 800cfd6:	f7f3 f941 	bl	800025c <__adddf3>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4610      	mov	r0, r2
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f7f3 fde9 	bl	8000bb8 <__aeabi_d2f>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800cfea:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff2:	ee17 3a90 	vmov	r3, s15
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800cffa:	4b47      	ldr	r3, [pc, #284]	@ (800d118 <VCU_TransmitBmsData5+0x220>)
 800cffc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f3 fa78 	bl	80004f4 <__aeabi_i2d>
 800d004:	a342      	add	r3, pc, #264	@ (adr r3, 800d110 <VCU_TransmitBmsData5+0x218>)
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f7f3 fadd 	bl	80005c8 <__aeabi_dmul>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4610      	mov	r0, r2
 800d014:	4619      	mov	r1, r3
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	f7f3 f91d 	bl	800025c <__adddf3>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4610      	mov	r0, r2
 800d028:	4619      	mov	r1, r3
 800d02a:	f7f3 fdc5 	bl	8000bb8 <__aeabi_d2f>
 800d02e:	4603      	mov	r3, r0
 800d030:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7f3 fa70 	bl	8000518 <__aeabi_f2d>
 800d038:	a333      	add	r3, pc, #204	@ (adr r3, 800d108 <VCU_TransmitBmsData5+0x210>)
 800d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03e:	f7f3 fbed 	bl	800081c <__aeabi_ddiv>
 800d042:	4602      	mov	r2, r0
 800d044:	460b      	mov	r3, r1
 800d046:	4610      	mov	r0, r2
 800d048:	4619      	mov	r1, r3
 800d04a:	f7f3 fdb5 	bl	8000bb8 <__aeabi_d2f>
 800d04e:	4603      	mov	r3, r0
 800d050:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800d052:	edd7 7a02 	vldr	s15, [r7, #8]
 800d056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d05a:	ee17 3a90 	vmov	r3, s15
 800d05e:	b29b      	uxth	r3, r3
 800d060:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d066:	4b2f      	ldr	r3, [pc, #188]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d06c:	4b2d      	ldr	r3, [pc, #180]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d06e:	2200      	movs	r2, #0
 800d070:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d072:	4b2c      	ldr	r3, [pc, #176]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d074:	2200      	movs	r2, #0
 800d076:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800d078:	4b2b      	ldr	r3, [pc, #172]	@ (800d128 <VCU_TransmitBmsData5+0x230>)
 800d07a:	461a      	mov	r2, r3
 800d07c:	463b      	mov	r3, r7
 800d07e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d082:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d086:	4b24      	ldr	r3, [pc, #144]	@ (800d118 <VCU_TransmitBmsData5+0x220>)
 800d088:	895b      	ldrh	r3, [r3, #10]
 800d08a:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d094:	b299      	uxth	r1, r3
 800d096:	4a23      	ldr	r2, [pc, #140]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d098:	8813      	ldrh	r3, [r2, #0]
 800d09a:	f361 030a 	bfi	r3, r1, #0, #11
 800d09e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d0a0:	4a20      	ldr	r2, [pc, #128]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0a2:	6813      	ldr	r3, [r2, #0]
 800d0a4:	f36f 23dc 	bfc	r3, #11, #18
 800d0a8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d0aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0ac:	7913      	ldrb	r3, [r2, #4]
 800d0ae:	f36f 1386 	bfc	r3, #6, #1
 800d0b2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0b6:	7913      	ldrb	r3, [r2, #4]
 800d0b8:	2108      	movs	r1, #8
 800d0ba:	f361 0303 	bfi	r3, r1, #0, #4
 800d0be:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d0c0:	4a18      	ldr	r2, [pc, #96]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0c2:	7913      	ldrb	r3, [r2, #4]
 800d0c4:	f36f 13c7 	bfc	r3, #7, #1
 800d0c8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d0ca:	4a16      	ldr	r2, [pc, #88]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0cc:	7913      	ldrb	r3, [r2, #4]
 800d0ce:	f36f 1304 	bfc	r3, #4, #1
 800d0d2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d0d4:	4b15      	ldr	r3, [pc, #84]	@ (800d12c <VCU_TransmitBmsData5+0x234>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00c      	beq.n	800d0fa <VCU_TransmitBmsData5+0x202>
 800d0e0:	4b10      	ldr	r3, [pc, #64]	@ (800d124 <VCU_TransmitBmsData5+0x22c>)
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	4910      	ldr	r1, [pc, #64]	@ (800d130 <VCU_TransmitBmsData5+0x238>)
 800d0ee:	4811      	ldr	r0, [pc, #68]	@ (800d134 <VCU_TransmitBmsData5+0x23c>)
 800d0f0:	f007 fafa 	bl	80146e8 <siprintf>
 800d0f4:	480f      	ldr	r0, [pc, #60]	@ (800d134 <VCU_TransmitBmsData5+0x23c>)
 800d0f6:	f7f8 fa83 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	f7fe fe9a 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800d100:	bf00      	nop
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	9999999a 	.word	0x9999999a
 800d10c:	3fa99999 	.word	0x3fa99999
 800d110:	eb851eb8 	.word	0xeb851eb8
 800d114:	3f8eb851 	.word	0x3f8eb851
 800d118:	2000a66c 	.word	0x2000a66c
 800d11c:	40990000 	.word	0x40990000
 800d120:	40df4000 	.word	0x40df4000
 800d124:	2000a6d8 	.word	0x2000a6d8
 800d128:	2000a6e4 	.word	0x2000a6e4
 800d12c:	2000000c 	.word	0x2000000c
 800d130:	080199c0 	.word	0x080199c0
 800d134:	20000b5c 	.word	0x20000b5c

0800d138 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800d142:	2300      	movs	r3, #0
 800d144:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800d146:	4b2d      	ldr	r3, [pc, #180]	@ (800d1fc <VCU_TransmitBmsData8+0xc4>)
 800d148:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800d14c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800d14e:	2300      	movs	r3, #0
 800d150:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800d152:	4b2a      	ldr	r3, [pc, #168]	@ (800d1fc <VCU_TransmitBmsData8+0xc4>)
 800d154:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d158:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d15a:	4b29      	ldr	r3, [pc, #164]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d160:	4b27      	ldr	r3, [pc, #156]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d162:	2200      	movs	r2, #0
 800d164:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d166:	4b26      	ldr	r3, [pc, #152]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d168:	2200      	movs	r2, #0
 800d16a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800d16c:	4b25      	ldr	r3, [pc, #148]	@ (800d204 <VCU_TransmitBmsData8+0xcc>)
 800d16e:	461a      	mov	r2, r3
 800d170:	463b      	mov	r3, r7
 800d172:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d176:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d17a:	4b20      	ldr	r3, [pc, #128]	@ (800d1fc <VCU_TransmitBmsData8+0xc4>)
 800d17c:	895b      	ldrh	r3, [r3, #10]
 800d17e:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800d182:	b29b      	uxth	r3, r3
 800d184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d188:	b299      	uxth	r1, r3
 800d18a:	4a1d      	ldr	r2, [pc, #116]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d18c:	8813      	ldrh	r3, [r2, #0]
 800d18e:	f361 030a 	bfi	r3, r1, #0, #11
 800d192:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d194:	4a1a      	ldr	r2, [pc, #104]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d196:	6813      	ldr	r3, [r2, #0]
 800d198:	f36f 23dc 	bfc	r3, #11, #18
 800d19c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d19e:	4a18      	ldr	r2, [pc, #96]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d1a0:	7913      	ldrb	r3, [r2, #4]
 800d1a2:	f36f 1386 	bfc	r3, #6, #1
 800d1a6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d1a8:	4a15      	ldr	r2, [pc, #84]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d1aa:	7913      	ldrb	r3, [r2, #4]
 800d1ac:	2108      	movs	r1, #8
 800d1ae:	f361 0303 	bfi	r3, r1, #0, #4
 800d1b2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d1b4:	4a12      	ldr	r2, [pc, #72]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d1b6:	7913      	ldrb	r3, [r2, #4]
 800d1b8:	f36f 13c7 	bfc	r3, #7, #1
 800d1bc:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d1be:	4a10      	ldr	r2, [pc, #64]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d1c0:	7913      	ldrb	r3, [r2, #4]
 800d1c2:	f36f 1304 	bfc	r3, #4, #1
 800d1c6:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d208 <VCU_TransmitBmsData8+0xd0>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	f003 0310 	and.w	r3, r3, #16
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00c      	beq.n	800d1ee <VCU_TransmitBmsData8+0xb6>
 800d1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d200 <VCU_TransmitBmsData8+0xc8>)
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	490a      	ldr	r1, [pc, #40]	@ (800d20c <VCU_TransmitBmsData8+0xd4>)
 800d1e2:	480b      	ldr	r0, [pc, #44]	@ (800d210 <VCU_TransmitBmsData8+0xd8>)
 800d1e4:	f007 fa80 	bl	80146e8 <siprintf>
 800d1e8:	4809      	ldr	r0, [pc, #36]	@ (800d210 <VCU_TransmitBmsData8+0xd8>)
 800d1ea:	f7f8 fa09 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	f7fe fe20 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	2000a66c 	.word	0x2000a66c
 800d200:	2000a6d8 	.word	0x2000a6d8
 800d204:	2000a6e4 	.word	0x2000a6e4
 800d208:	2000000c 	.word	0x2000000c
 800d20c:	080199dc 	.word	0x080199dc
 800d210:	20000b5c 	.word	0x20000b5c

0800d214 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800d21e:	2300      	movs	r3, #0
 800d220:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800d222:	4b2d      	ldr	r3, [pc, #180]	@ (800d2d8 <VCU_TransmitBmsData9+0xc4>)
 800d224:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d228:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800d22a:	2300      	movs	r3, #0
 800d22c:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800d22e:	4b2a      	ldr	r3, [pc, #168]	@ (800d2d8 <VCU_TransmitBmsData9+0xc4>)
 800d230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d234:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d236:	4b29      	ldr	r3, [pc, #164]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d23c:	4b27      	ldr	r3, [pc, #156]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d23e:	2200      	movs	r2, #0
 800d240:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d242:	4b26      	ldr	r3, [pc, #152]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d244:	2200      	movs	r2, #0
 800d246:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800d248:	4b25      	ldr	r3, [pc, #148]	@ (800d2e0 <VCU_TransmitBmsData9+0xcc>)
 800d24a:	461a      	mov	r2, r3
 800d24c:	463b      	mov	r3, r7
 800d24e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d252:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d256:	4b20      	ldr	r3, [pc, #128]	@ (800d2d8 <VCU_TransmitBmsData9+0xc4>)
 800d258:	895b      	ldrh	r3, [r3, #10]
 800d25a:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 800d25e:	b29b      	uxth	r3, r3
 800d260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d264:	b299      	uxth	r1, r3
 800d266:	4a1d      	ldr	r2, [pc, #116]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d268:	8813      	ldrh	r3, [r2, #0]
 800d26a:	f361 030a 	bfi	r3, r1, #0, #11
 800d26e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d270:	4a1a      	ldr	r2, [pc, #104]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d272:	6813      	ldr	r3, [r2, #0]
 800d274:	f36f 23dc 	bfc	r3, #11, #18
 800d278:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d27a:	4a18      	ldr	r2, [pc, #96]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d27c:	7913      	ldrb	r3, [r2, #4]
 800d27e:	f36f 1386 	bfc	r3, #6, #1
 800d282:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d284:	4a15      	ldr	r2, [pc, #84]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d286:	7913      	ldrb	r3, [r2, #4]
 800d288:	2108      	movs	r1, #8
 800d28a:	f361 0303 	bfi	r3, r1, #0, #4
 800d28e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d290:	4a12      	ldr	r2, [pc, #72]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d292:	7913      	ldrb	r3, [r2, #4]
 800d294:	f36f 13c7 	bfc	r3, #7, #1
 800d298:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d29a:	4a10      	ldr	r2, [pc, #64]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d29c:	7913      	ldrb	r3, [r2, #4]
 800d29e:	f36f 1304 	bfc	r3, #4, #1
 800d2a2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d2e4 <VCU_TransmitBmsData9+0xd0>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 0310 	and.w	r3, r3, #16
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00c      	beq.n	800d2ca <VCU_TransmitBmsData9+0xb6>
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d2dc <VCU_TransmitBmsData9+0xc8>)
 800d2b2:	881b      	ldrh	r3, [r3, #0]
 800d2b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	490a      	ldr	r1, [pc, #40]	@ (800d2e8 <VCU_TransmitBmsData9+0xd4>)
 800d2be:	480b      	ldr	r0, [pc, #44]	@ (800d2ec <VCU_TransmitBmsData9+0xd8>)
 800d2c0:	f007 fa12 	bl	80146e8 <siprintf>
 800d2c4:	4809      	ldr	r0, [pc, #36]	@ (800d2ec <VCU_TransmitBmsData9+0xd8>)
 800d2c6:	f7f8 f99b 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f7fe fdb2 	bl	800be34 <VCU_TransmitMessageQueue>

}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	2000a66c 	.word	0x2000a66c
 800d2dc:	2000a6d8 	.word	0x2000a6d8
 800d2e0:	2000a6e4 	.word	0x2000a6e4
 800d2e4:	2000000c 	.word	0x2000000c
 800d2e8:	080199f8 	.word	0x080199f8
 800d2ec:	20000b5c 	.word	0x20000b5c

0800d2f0 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800d2fe:	2300      	movs	r3, #0
 800d300:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d302:	4b28      	ldr	r3, [pc, #160]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d308:	4b26      	ldr	r3, [pc, #152]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d30e:	4b25      	ldr	r3, [pc, #148]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d310:	2200      	movs	r2, #0
 800d312:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800d314:	4b24      	ldr	r3, [pc, #144]	@ (800d3a8 <VCU_TransmitBmsData10+0xb8>)
 800d316:	461a      	mov	r2, r3
 800d318:	463b      	mov	r3, r7
 800d31a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d31e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d322:	4b22      	ldr	r3, [pc, #136]	@ (800d3ac <VCU_TransmitBmsData10+0xbc>)
 800d324:	895b      	ldrh	r3, [r3, #10]
 800d326:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d330:	b299      	uxth	r1, r3
 800d332:	4a1c      	ldr	r2, [pc, #112]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d334:	8813      	ldrh	r3, [r2, #0]
 800d336:	f361 030a 	bfi	r3, r1, #0, #11
 800d33a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d33c:	4a19      	ldr	r2, [pc, #100]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d33e:	6813      	ldr	r3, [r2, #0]
 800d340:	f36f 23dc 	bfc	r3, #11, #18
 800d344:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d346:	4a17      	ldr	r2, [pc, #92]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d348:	7913      	ldrb	r3, [r2, #4]
 800d34a:	f36f 1386 	bfc	r3, #6, #1
 800d34e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d350:	4a14      	ldr	r2, [pc, #80]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d352:	7913      	ldrb	r3, [r2, #4]
 800d354:	2108      	movs	r1, #8
 800d356:	f361 0303 	bfi	r3, r1, #0, #4
 800d35a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d35c:	4a11      	ldr	r2, [pc, #68]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d35e:	7913      	ldrb	r3, [r2, #4]
 800d360:	f36f 13c7 	bfc	r3, #7, #1
 800d364:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d366:	4a0f      	ldr	r2, [pc, #60]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d368:	7913      	ldrb	r3, [r2, #4]
 800d36a:	f36f 1304 	bfc	r3, #4, #1
 800d36e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d370:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <VCU_TransmitBmsData10+0xc0>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00c      	beq.n	800d396 <VCU_TransmitBmsData10+0xa6>
 800d37c:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <VCU_TransmitBmsData10+0xb4>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d384:	b29b      	uxth	r3, r3
 800d386:	461a      	mov	r2, r3
 800d388:	490a      	ldr	r1, [pc, #40]	@ (800d3b4 <VCU_TransmitBmsData10+0xc4>)
 800d38a:	480b      	ldr	r0, [pc, #44]	@ (800d3b8 <VCU_TransmitBmsData10+0xc8>)
 800d38c:	f007 f9ac 	bl	80146e8 <siprintf>
 800d390:	4809      	ldr	r0, [pc, #36]	@ (800d3b8 <VCU_TransmitBmsData10+0xc8>)
 800d392:	f7f8 f935 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d396:	2000      	movs	r0, #0
 800d398:	f7fe fd4c 	bl	800be34 <VCU_TransmitMessageQueue>

}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	2000a6d8 	.word	0x2000a6d8
 800d3a8:	2000a6e4 	.word	0x2000a6e4
 800d3ac:	2000a66c 	.word	0x2000a66c
 800d3b0:	2000000c 	.word	0x2000000c
 800d3b4:	08019a14 	.word	0x08019a14
 800d3b8:	20000b5c 	.word	0x20000b5c

0800d3bc <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d3c2:	4b8d      	ldr	r3, [pc, #564]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d3c4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fd fd67 	bl	800ae9c <MCU_ModuleIndexFromId>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d3d2:	4b89      	ldr	r3, [pc, #548]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d3d4:	7d1b      	ldrb	r3, [r3, #20]
 800d3d6:	7bfa      	ldrb	r2, [r7, #15]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d112      	bne.n	800d402 <VCU_TransmitModuleState+0x46>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800d3dc:	4b87      	ldr	r3, [pc, #540]	@ (800d5fc <VCU_TransmitModuleState+0x240>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	f003 0311 	and.w	r3, r3, #17
 800d3e4:	2b11      	cmp	r3, #17
 800d3e6:	f040 8103 	bne.w	800d5f0 <VCU_TransmitModuleState+0x234>
 800d3ea:	4b83      	ldr	r3, [pc, #524]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d3ec:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	4983      	ldr	r1, [pc, #524]	@ (800d600 <VCU_TransmitModuleState+0x244>)
 800d3f4:	4883      	ldr	r0, [pc, #524]	@ (800d604 <VCU_TransmitModuleState+0x248>)
 800d3f6:	f007 f977 	bl	80146e8 <siprintf>
 800d3fa:	4882      	ldr	r0, [pc, #520]	@ (800d604 <VCU_TransmitModuleState+0x248>)
 800d3fc:	f7f8 f900 	bl	8005600 <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800d400:	e0f6      	b.n	800d5f0 <VCU_TransmitModuleState+0x234>
    moduleState.module_id                   = pack.dmcModuleId;
 800d402:	4b7d      	ldr	r3, [pc, #500]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d404:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d408:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	4a7e      	ldr	r2, [pc, #504]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d40e:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d412:	fb01 f303 	mul.w	r3, r1, r3
 800d416:	4413      	add	r3, r2
 800d418:	332b      	adds	r3, #43	@ 0x2b
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
 800d420:	4a79      	ldr	r2, [pc, #484]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d422:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d426:	fb01 f303 	mul.w	r3, r1, r3
 800d42a:	4413      	add	r3, r2
 800d42c:	3327      	adds	r3, #39	@ 0x27
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	b2da      	uxtb	r2, r3
 800d436:	797b      	ldrb	r3, [r7, #5]
 800d438:	f362 0301 	bfi	r3, r2, #0, #2
 800d43c:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	4a71      	ldr	r2, [pc, #452]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d442:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d446:	fb01 f303 	mul.w	r3, r1, r3
 800d44a:	4413      	add	r3, r2
 800d44c:	3326      	adds	r3, #38	@ 0x26
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	f003 0303 	and.w	r3, r3, #3
 800d454:	b2da      	uxtb	r2, r3
 800d456:	79bb      	ldrb	r3, [r7, #6]
 800d458:	f362 0383 	bfi	r3, r2, #2, #2
 800d45c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	4a69      	ldr	r2, [pc, #420]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d462:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d466:	fb01 f303 	mul.w	r3, r1, r3
 800d46a:	4413      	add	r3, r2
 800d46c:	332c      	adds	r3, #44	@ 0x2c
 800d46e:	781a      	ldrb	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f362 2391 	bfi	r3, r2, #10, #8
 800d476:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	4a63      	ldr	r2, [pc, #396]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d47c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d480:	fb01 f303 	mul.w	r3, r1, r3
 800d484:	4413      	add	r3, r2
 800d486:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d48a:	789b      	ldrb	r3, [r3, #2]
 800d48c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d490:	b2db      	uxtb	r3, r3
 800d492:	b25a      	sxtb	r2, r3
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	495c      	ldr	r1, [pc, #368]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d498:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d49c:	fb00 f303 	mul.w	r3, r0, r3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d4a6:	789b      	ldrb	r3, [r3, #2]
 800d4a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	b25a      	sxtb	r2, r3
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
 800d4b8:	4953      	ldr	r1, [pc, #332]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d4ba:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d4be:	fb00 f303 	mul.w	r3, r0, r3
 800d4c2:	440b      	add	r3, r1
 800d4c4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d4c8:	789b      	ldrb	r3, [r3, #2]
 800d4ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	b25b      	sxtb	r3, r3
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	b25a      	sxtb	r2, r3
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	494b      	ldr	r1, [pc, #300]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d4dc:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d4e0:	fb00 f303 	mul.w	r3, r0, r3
 800d4e4:	440b      	add	r3, r1
 800d4e6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d4ea:	789b      	ldrb	r3, [r3, #2]
 800d4ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	b25b      	sxtb	r3, r3
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	b25a      	sxtb	r2, r3
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	4942      	ldr	r1, [pc, #264]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d4fe:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 800d502:	fb00 f303 	mul.w	r3, r0, r3
 800d506:	440b      	add	r3, r1
 800d508:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800d50c:	789b      	ldrb	r3, [r3, #2]
 800d50e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d512:	b2db      	uxtb	r3, r3
 800d514:	011b      	lsls	r3, r3, #4
 800d516:	b25b      	sxtb	r3, r3
 800d518:	4313      	orrs	r3, r2
 800d51a:	b25b      	sxtb	r3, r3
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	88fb      	ldrh	r3, [r7, #6]
 800d520:	f362 138d 	bfi	r3, r2, #6, #8
 800d524:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800d526:	79bb      	ldrb	r3, [r7, #6]
 800d528:	f36f 1345 	bfc	r3, #5, #1
 800d52c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800d52e:	79bb      	ldrb	r3, [r7, #6]
 800d530:	f36f 1304 	bfc	r3, #4, #1
 800d534:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800d536:	4b30      	ldr	r3, [pc, #192]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d538:	7d1b      	ldrb	r3, [r3, #20]
 800d53a:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800d53c:	4b2e      	ldr	r3, [pc, #184]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d53e:	7ddb      	ldrb	r3, [r3, #23]
 800d540:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800d542:	7bfb      	ldrb	r3, [r7, #15]
 800d544:	4a30      	ldr	r2, [pc, #192]	@ (800d608 <VCU_TransmitModuleState+0x24c>)
 800d546:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d54a:	fb01 f303 	mul.w	r3, r1, r3
 800d54e:	4413      	add	r3, r2
 800d550:	332d      	adds	r3, #45	@ 0x2d
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	72fb      	strb	r3, [r7, #11]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d556:	4b2d      	ldr	r3, [pc, #180]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d55c:	4b2b      	ldr	r3, [pc, #172]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d55e:	2200      	movs	r2, #0
 800d560:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d562:	4b2a      	ldr	r3, [pc, #168]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d564:	2200      	movs	r2, #0
 800d566:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800d568:	4b29      	ldr	r3, [pc, #164]	@ (800d610 <VCU_TransmitModuleState+0x254>)
 800d56a:	461a      	mov	r2, r3
 800d56c:	1d3b      	adds	r3, r7, #4
 800d56e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d572:	e882 0003 	stmia.w	r2, {r0, r1}
    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d576:	4b20      	ldr	r3, [pc, #128]	@ (800d5f8 <VCU_TransmitModuleState+0x23c>)
 800d578:	895b      	ldrh	r3, [r3, #10]
 800d57a:	f203 4311 	addw	r3, r3, #1041	@ 0x411
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d584:	b299      	uxth	r1, r3
 800d586:	4a21      	ldr	r2, [pc, #132]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d588:	8813      	ldrh	r3, [r2, #0]
 800d58a:	f361 030a 	bfi	r3, r1, #0, #11
 800d58e:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d590:	4a1e      	ldr	r2, [pc, #120]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d592:	6813      	ldr	r3, [r2, #0]
 800d594:	f36f 23dc 	bfc	r3, #11, #18
 800d598:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d59a:	4a1c      	ldr	r2, [pc, #112]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d59c:	7913      	ldrb	r3, [r2, #4]
 800d59e:	f36f 1386 	bfc	r3, #6, #1
 800d5a2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d5a4:	4a19      	ldr	r2, [pc, #100]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d5a6:	7913      	ldrb	r3, [r2, #4]
 800d5a8:	2108      	movs	r1, #8
 800d5aa:	f361 0303 	bfi	r3, r1, #0, #4
 800d5ae:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d5b0:	4a16      	ldr	r2, [pc, #88]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d5b2:	7913      	ldrb	r3, [r2, #4]
 800d5b4:	f36f 13c7 	bfc	r3, #7, #1
 800d5b8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d5ba:	4a14      	ldr	r2, [pc, #80]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d5bc:	7913      	ldrb	r3, [r2, #4]
 800d5be:	f36f 1304 	bfc	r3, #4, #1
 800d5c2:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d5fc <VCU_TransmitModuleState+0x240>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	f003 0310 	and.w	r3, r3, #16
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00c      	beq.n	800d5ea <VCU_TransmitModuleState+0x22e>
 800d5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <VCU_TransmitModuleState+0x250>)
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	461a      	mov	r2, r3
 800d5dc:	490d      	ldr	r1, [pc, #52]	@ (800d614 <VCU_TransmitModuleState+0x258>)
 800d5de:	4809      	ldr	r0, [pc, #36]	@ (800d604 <VCU_TransmitModuleState+0x248>)
 800d5e0:	f007 f882 	bl	80146e8 <siprintf>
 800d5e4:	4807      	ldr	r0, [pc, #28]	@ (800d604 <VCU_TransmitModuleState+0x248>)
 800d5e6:	f7f8 f80b 	bl	8005600 <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	f7fe fc22 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800d5f0:	bf00      	nop
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	2000a66c 	.word	0x2000a66c
 800d5fc:	2000000c 	.word	0x2000000c
 800d600:	08019a30 	.word	0x08019a30
 800d604:	20000b5c 	.word	0x20000b5c
 800d608:	20000dec 	.word	0x20000dec
 800d60c:	2000a6d8 	.word	0x2000a6d8
 800d610:	2000a6e4 	.word	0x2000a6e4
 800d614:	08019a6c 	.word	0x08019a6c

0800d618 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800d618:	b590      	push	{r4, r7, lr}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d61e:	4b46      	ldr	r3, [pc, #280]	@ (800d738 <VCU_TransmitModulePower+0x120>)
 800d620:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d624:	4618      	mov	r0, r3
 800d626:	f7fd fc39 	bl	800ae9c <MCU_ModuleIndexFromId>
 800d62a:	4603      	mov	r3, r0
 800d62c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d62e:	4b42      	ldr	r3, [pc, #264]	@ (800d738 <VCU_TransmitModulePower+0x120>)
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	7bfa      	ldrb	r2, [r7, #15]
 800d634:	429a      	cmp	r2, r3
 800d636:	d111      	bne.n	800d65c <VCU_TransmitModulePower+0x44>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800d638:	4b40      	ldr	r3, [pc, #256]	@ (800d73c <VCU_TransmitModulePower+0x124>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f003 0311 	and.w	r3, r3, #17
 800d640:	2b11      	cmp	r3, #17
 800d642:	d175      	bne.n	800d730 <VCU_TransmitModulePower+0x118>
 800d644:	4b3c      	ldr	r3, [pc, #240]	@ (800d738 <VCU_TransmitModulePower+0x120>)
 800d646:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d64a:	461a      	mov	r2, r3
 800d64c:	493c      	ldr	r1, [pc, #240]	@ (800d740 <VCU_TransmitModulePower+0x128>)
 800d64e:	483d      	ldr	r0, [pc, #244]	@ (800d744 <VCU_TransmitModulePower+0x12c>)
 800d650:	f007 f84a 	bl	80146e8 <siprintf>
 800d654:	483b      	ldr	r0, [pc, #236]	@ (800d744 <VCU_TransmitModulePower+0x12c>)
 800d656:	f7f7 ffd3 	bl	8005600 <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800d65a:	e069      	b.n	800d730 <VCU_TransmitModulePower+0x118>
    modulePower.module_id       = pack.dmcModuleId;
 800d65c:	4b36      	ldr	r3, [pc, #216]	@ (800d738 <VCU_TransmitModulePower+0x120>)
 800d65e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d662:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	4a38      	ldr	r2, [pc, #224]	@ (800d748 <VCU_TransmitModulePower+0x130>)
 800d668:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d66c:	fb01 f303 	mul.w	r3, r1, r3
 800d670:	4413      	add	r3, r2
 800d672:	3316      	adds	r3, #22
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	4a33      	ldr	r2, [pc, #204]	@ (800d748 <VCU_TransmitModulePower+0x130>)
 800d67c:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d680:	fb01 f303 	mul.w	r3, r1, r3
 800d684:	4413      	add	r3, r2
 800d686:	3314      	adds	r3, #20
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	813b      	strh	r3, [r7, #8]
 800d692:	2300      	movs	r3, #0
 800d694:	72bb      	strb	r3, [r7, #10]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d696:	4b2d      	ldr	r3, [pc, #180]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d698:	2200      	movs	r2, #0
 800d69a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d69c:	4b2b      	ldr	r3, [pc, #172]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d6a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800d6a8:	4b29      	ldr	r3, [pc, #164]	@ (800d750 <VCU_TransmitModulePower+0x138>)
 800d6aa:	461c      	mov	r4, r3
 800d6ac:	463b      	mov	r3, r7
 800d6ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d6b6:	4b20      	ldr	r3, [pc, #128]	@ (800d738 <VCU_TransmitModulePower+0x120>)
 800d6b8:	895b      	ldrh	r3, [r3, #10]
 800d6ba:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6c4:	b299      	uxth	r1, r3
 800d6c6:	4a21      	ldr	r2, [pc, #132]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6c8:	8813      	ldrh	r3, [r2, #0]
 800d6ca:	f361 030a 	bfi	r3, r1, #0, #11
 800d6ce:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d6d0:	4a1e      	ldr	r2, [pc, #120]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	f36f 23dc 	bfc	r3, #11, #18
 800d6d8:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d6da:	4a1c      	ldr	r2, [pc, #112]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6dc:	7913      	ldrb	r3, [r2, #4]
 800d6de:	f36f 1386 	bfc	r3, #6, #1
 800d6e2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d6e4:	4a19      	ldr	r2, [pc, #100]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6e6:	7913      	ldrb	r3, [r2, #4]
 800d6e8:	2108      	movs	r1, #8
 800d6ea:	f361 0303 	bfi	r3, r1, #0, #4
 800d6ee:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d6f0:	4a16      	ldr	r2, [pc, #88]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6f2:	7913      	ldrb	r3, [r2, #4]
 800d6f4:	f36f 13c7 	bfc	r3, #7, #1
 800d6f8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d6fa:	4a14      	ldr	r2, [pc, #80]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d6fc:	7913      	ldrb	r3, [r2, #4]
 800d6fe:	f36f 1304 	bfc	r3, #4, #1
 800d702:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d704:	4b0d      	ldr	r3, [pc, #52]	@ (800d73c <VCU_TransmitModulePower+0x124>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	f003 0310 	and.w	r3, r3, #16
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00c      	beq.n	800d72a <VCU_TransmitModulePower+0x112>
 800d710:	4b0e      	ldr	r3, [pc, #56]	@ (800d74c <VCU_TransmitModulePower+0x134>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d718:	b29b      	uxth	r3, r3
 800d71a:	461a      	mov	r2, r3
 800d71c:	490d      	ldr	r1, [pc, #52]	@ (800d754 <VCU_TransmitModulePower+0x13c>)
 800d71e:	4809      	ldr	r0, [pc, #36]	@ (800d744 <VCU_TransmitModulePower+0x12c>)
 800d720:	f006 ffe2 	bl	80146e8 <siprintf>
 800d724:	4807      	ldr	r0, [pc, #28]	@ (800d744 <VCU_TransmitModulePower+0x12c>)
 800d726:	f7f7 ff6b 	bl	8005600 <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d72a:	2000      	movs	r0, #0
 800d72c:	f7fe fb82 	bl	800be34 <VCU_TransmitMessageQueue>
}
 800d730:	bf00      	nop
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	bd90      	pop	{r4, r7, pc}
 800d738:	2000a66c 	.word	0x2000a66c
 800d73c:	2000000c 	.word	0x2000000c
 800d740:	08019a88 	.word	0x08019a88
 800d744:	20000b5c 	.word	0x20000b5c
 800d748:	20000dec 	.word	0x20000dec
 800d74c:	2000a6d8 	.word	0x2000a6d8
 800d750:	2000a6e4 	.word	0x2000a6e4
 800d754:	08019ac4 	.word	0x08019ac4

0800d758 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d75e:	4b41      	ldr	r3, [pc, #260]	@ (800d864 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d760:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd fb99 	bl	800ae9c <MCU_ModuleIndexFromId>
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d76e:	4b3d      	ldr	r3, [pc, #244]	@ (800d864 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d770:	7d1b      	ldrb	r3, [r3, #20]
 800d772:	7bfa      	ldrb	r2, [r7, #15]
 800d774:	429a      	cmp	r2, r3
 800d776:	d071      	beq.n	800d85c <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800d778:	4b3a      	ldr	r3, [pc, #232]	@ (800d864 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d77a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d77e:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800d780:	7bfb      	ldrb	r3, [r7, #15]
 800d782:	4a39      	ldr	r2, [pc, #228]	@ (800d868 <VCU_TransmitModuleCellVoltage+0x110>)
 800d784:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d788:	fb01 f303 	mul.w	r3, r1, r3
 800d78c:	4413      	add	r3, r2
 800d78e:	3322      	adds	r3, #34	@ 0x22
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
 800d796:	4a34      	ldr	r2, [pc, #208]	@ (800d868 <VCU_TransmitModuleCellVoltage+0x110>)
 800d798:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d79c:	fb01 f303 	mul.w	r3, r1, r3
 800d7a0:	4413      	add	r3, r2
 800d7a2:	331e      	adds	r3, #30
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	4a2e      	ldr	r2, [pc, #184]	@ (800d868 <VCU_TransmitModuleCellVoltage+0x110>)
 800d7ae:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d7b2:	fb01 f303 	mul.w	r3, r1, r3
 800d7b6:	4413      	add	r3, r2
 800d7b8:	3320      	adds	r3, #32
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d7c2:	4b2a      	ldr	r3, [pc, #168]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d7c8:	4b28      	ldr	r3, [pc, #160]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d7ce:	4b27      	ldr	r3, [pc, #156]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800d7d4:	4b26      	ldr	r3, [pc, #152]	@ (800d870 <VCU_TransmitModuleCellVoltage+0x118>)
 800d7d6:	461c      	mov	r4, r3
 800d7d8:	463b      	mov	r3, r7
 800d7da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d7e2:	4b20      	ldr	r3, [pc, #128]	@ (800d864 <VCU_TransmitModuleCellVoltage+0x10c>)
 800d7e4:	895b      	ldrh	r3, [r3, #10]
 800d7e6:	f203 4313 	addw	r3, r3, #1043	@ 0x413
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7f0:	b299      	uxth	r1, r3
 800d7f2:	4a1e      	ldr	r2, [pc, #120]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d7f4:	8813      	ldrh	r3, [r2, #0]
 800d7f6:	f361 030a 	bfi	r3, r1, #0, #11
 800d7fa:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d7fe:	6813      	ldr	r3, [r2, #0]
 800d800:	f36f 23dc 	bfc	r3, #11, #18
 800d804:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d806:	4a19      	ldr	r2, [pc, #100]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d808:	7913      	ldrb	r3, [r2, #4]
 800d80a:	f36f 1386 	bfc	r3, #6, #1
 800d80e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d810:	4a16      	ldr	r2, [pc, #88]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d812:	7913      	ldrb	r3, [r2, #4]
 800d814:	2108      	movs	r1, #8
 800d816:	f361 0303 	bfi	r3, r1, #0, #4
 800d81a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d81c:	4a13      	ldr	r2, [pc, #76]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d81e:	7913      	ldrb	r3, [r2, #4]
 800d820:	f36f 13c7 	bfc	r3, #7, #1
 800d824:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d826:	4a11      	ldr	r2, [pc, #68]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d828:	7913      	ldrb	r3, [r2, #4]
 800d82a:	f36f 1304 	bfc	r3, #4, #1
 800d82e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d830:	4b10      	ldr	r3, [pc, #64]	@ (800d874 <VCU_TransmitModuleCellVoltage+0x11c>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00c      	beq.n	800d856 <VCU_TransmitModuleCellVoltage+0xfe>
 800d83c:	4b0b      	ldr	r3, [pc, #44]	@ (800d86c <VCU_TransmitModuleCellVoltage+0x114>)
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d844:	b29b      	uxth	r3, r3
 800d846:	461a      	mov	r2, r3
 800d848:	490b      	ldr	r1, [pc, #44]	@ (800d878 <VCU_TransmitModuleCellVoltage+0x120>)
 800d84a:	480c      	ldr	r0, [pc, #48]	@ (800d87c <VCU_TransmitModuleCellVoltage+0x124>)
 800d84c:	f006 ff4c 	bl	80146e8 <siprintf>
 800d850:	480a      	ldr	r0, [pc, #40]	@ (800d87c <VCU_TransmitModuleCellVoltage+0x124>)
 800d852:	f7f7 fed5 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d856:	2000      	movs	r0, #0
 800d858:	f7fe faec 	bl	800be34 <VCU_TransmitMessageQueue>
  }
}
 800d85c:	bf00      	nop
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	bd90      	pop	{r4, r7, pc}
 800d864:	2000a66c 	.word	0x2000a66c
 800d868:	20000dec 	.word	0x20000dec
 800d86c:	2000a6d8 	.word	0x2000a6d8
 800d870:	2000a6e4 	.word	0x2000a6e4
 800d874:	2000000c 	.word	0x2000000c
 800d878:	08019ae0 	.word	0x08019ae0
 800d87c:	20000b5c 	.word	0x20000b5c

0800d880 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d886:	4b41      	ldr	r3, [pc, #260]	@ (800d98c <VCU_TransmitModuleCellTemp+0x10c>)
 800d888:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fd fb05 	bl	800ae9c <MCU_ModuleIndexFromId>
 800d892:	4603      	mov	r3, r0
 800d894:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d896:	4b3d      	ldr	r3, [pc, #244]	@ (800d98c <VCU_TransmitModuleCellTemp+0x10c>)
 800d898:	7d1b      	ldrb	r3, [r3, #20]
 800d89a:	7bfa      	ldrb	r2, [r7, #15]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d071      	beq.n	800d984 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800d8a0:	4b3a      	ldr	r3, [pc, #232]	@ (800d98c <VCU_TransmitModuleCellTemp+0x10c>)
 800d8a2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d8a6:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	4a39      	ldr	r2, [pc, #228]	@ (800d990 <VCU_TransmitModuleCellTemp+0x110>)
 800d8ac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d8b0:	fb01 f303 	mul.w	r3, r1, r3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	331c      	adds	r3, #28
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	4a34      	ldr	r2, [pc, #208]	@ (800d990 <VCU_TransmitModuleCellTemp+0x110>)
 800d8c0:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d8c4:	fb01 f303 	mul.w	r3, r1, r3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3318      	adds	r3, #24
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	4a2e      	ldr	r2, [pc, #184]	@ (800d990 <VCU_TransmitModuleCellTemp+0x110>)
 800d8d6:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d8da:	fb01 f303 	mul.w	r3, r1, r3
 800d8de:	4413      	add	r3, r2
 800d8e0:	331a      	adds	r3, #26
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d8f0:	4b28      	ldr	r3, [pc, #160]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d8f6:	4b27      	ldr	r3, [pc, #156]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800d8fc:	4b26      	ldr	r3, [pc, #152]	@ (800d998 <VCU_TransmitModuleCellTemp+0x118>)
 800d8fe:	461c      	mov	r4, r3
 800d900:	463b      	mov	r3, r7
 800d902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d906:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d90a:	4b20      	ldr	r3, [pc, #128]	@ (800d98c <VCU_TransmitModuleCellTemp+0x10c>)
 800d90c:	895b      	ldrh	r3, [r3, #10]
 800d90e:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800d912:	b29b      	uxth	r3, r3
 800d914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d918:	b299      	uxth	r1, r3
 800d91a:	4a1e      	ldr	r2, [pc, #120]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d91c:	8813      	ldrh	r3, [r2, #0]
 800d91e:	f361 030a 	bfi	r3, r1, #0, #11
 800d922:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d924:	4a1b      	ldr	r2, [pc, #108]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d926:	6813      	ldr	r3, [r2, #0]
 800d928:	f36f 23dc 	bfc	r3, #11, #18
 800d92c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d92e:	4a19      	ldr	r2, [pc, #100]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d930:	7913      	ldrb	r3, [r2, #4]
 800d932:	f36f 1386 	bfc	r3, #6, #1
 800d936:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d938:	4a16      	ldr	r2, [pc, #88]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d93a:	7913      	ldrb	r3, [r2, #4]
 800d93c:	2108      	movs	r1, #8
 800d93e:	f361 0303 	bfi	r3, r1, #0, #4
 800d942:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d944:	4a13      	ldr	r2, [pc, #76]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d946:	7913      	ldrb	r3, [r2, #4]
 800d948:	f36f 13c7 	bfc	r3, #7, #1
 800d94c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d94e:	4a11      	ldr	r2, [pc, #68]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d950:	7913      	ldrb	r3, [r2, #4]
 800d952:	f36f 1304 	bfc	r3, #4, #1
 800d956:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d958:	4b10      	ldr	r3, [pc, #64]	@ (800d99c <VCU_TransmitModuleCellTemp+0x11c>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	f003 0310 	and.w	r3, r3, #16
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00c      	beq.n	800d97e <VCU_TransmitModuleCellTemp+0xfe>
 800d964:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <VCU_TransmitModuleCellTemp+0x114>)
 800d966:	881b      	ldrh	r3, [r3, #0]
 800d968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	461a      	mov	r2, r3
 800d970:	490b      	ldr	r1, [pc, #44]	@ (800d9a0 <VCU_TransmitModuleCellTemp+0x120>)
 800d972:	480c      	ldr	r0, [pc, #48]	@ (800d9a4 <VCU_TransmitModuleCellTemp+0x124>)
 800d974:	f006 feb8 	bl	80146e8 <siprintf>
 800d978:	480a      	ldr	r0, [pc, #40]	@ (800d9a4 <VCU_TransmitModuleCellTemp+0x124>)
 800d97a:	f7f7 fe41 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d97e:	2000      	movs	r0, #0
 800d980:	f7fe fa58 	bl	800be34 <VCU_TransmitMessageQueue>
  }
}
 800d984:	bf00      	nop
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd90      	pop	{r4, r7, pc}
 800d98c:	2000a66c 	.word	0x2000a66c
 800d990:	20000dec 	.word	0x20000dec
 800d994:	2000a6d8 	.word	0x2000a6d8
 800d998:	2000a6e4 	.word	0x2000a6e4
 800d99c:	2000000c 	.word	0x2000000c
 800d9a0:	08019b04 	.word	0x08019b04
 800d9a4:	20000b5c 	.word	0x20000b5c

0800d9a8 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d9ae:	4b41      	ldr	r3, [pc, #260]	@ (800dab4 <VCU_TransmitModuleLimits+0x10c>)
 800d9b0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fd fa71 	bl	800ae9c <MCU_ModuleIndexFromId>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d9be:	4b3d      	ldr	r3, [pc, #244]	@ (800dab4 <VCU_TransmitModuleLimits+0x10c>)
 800d9c0:	7d1b      	ldrb	r3, [r3, #20]
 800d9c2:	7bfa      	ldrb	r2, [r7, #15]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d071      	beq.n	800daac <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800d9c8:	4b3a      	ldr	r3, [pc, #232]	@ (800dab4 <VCU_TransmitModuleLimits+0x10c>)
 800d9ca:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800d9ce:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	4a39      	ldr	r2, [pc, #228]	@ (800dab8 <VCU_TransmitModuleLimits+0x110>)
 800d9d4:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d9d8:	fb01 f303 	mul.w	r3, r1, r3
 800d9dc:	4413      	add	r3, r2
 800d9de:	3312      	adds	r3, #18
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	4a34      	ldr	r2, [pc, #208]	@ (800dab8 <VCU_TransmitModuleLimits+0x110>)
 800d9e8:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800d9ec:	fb01 f303 	mul.w	r3, r1, r3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	330e      	adds	r3, #14
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
 800d9fa:	4a2f      	ldr	r2, [pc, #188]	@ (800dab8 <VCU_TransmitModuleLimits+0x110>)
 800d9fc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
 800da00:	fb01 f303 	mul.w	r3, r1, r3
 800da04:	4413      	add	r3, r2
 800da06:	3310      	adds	r3, #16
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800da12:	4b2a      	ldr	r3, [pc, #168]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800da18:	4b28      	ldr	r3, [pc, #160]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800da1e:	4b27      	ldr	r3, [pc, #156]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da20:	2200      	movs	r2, #0
 800da22:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800da24:	4b26      	ldr	r3, [pc, #152]	@ (800dac0 <VCU_TransmitModuleLimits+0x118>)
 800da26:	461c      	mov	r4, r3
 800da28:	463b      	mov	r3, r7
 800da2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800da32:	4b20      	ldr	r3, [pc, #128]	@ (800dab4 <VCU_TransmitModuleLimits+0x10c>)
 800da34:	895b      	ldrh	r3, [r3, #10]
 800da36:	f203 4316 	addw	r3, r3, #1046	@ 0x416
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da40:	b299      	uxth	r1, r3
 800da42:	4a1e      	ldr	r2, [pc, #120]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da44:	8813      	ldrh	r3, [r2, #0]
 800da46:	f361 030a 	bfi	r3, r1, #0, #11
 800da4a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800da4c:	4a1b      	ldr	r2, [pc, #108]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da4e:	6813      	ldr	r3, [r2, #0]
 800da50:	f36f 23dc 	bfc	r3, #11, #18
 800da54:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800da56:	4a19      	ldr	r2, [pc, #100]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da58:	7913      	ldrb	r3, [r2, #4]
 800da5a:	f36f 1386 	bfc	r3, #6, #1
 800da5e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800da60:	4a16      	ldr	r2, [pc, #88]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da62:	7913      	ldrb	r3, [r2, #4]
 800da64:	2108      	movs	r1, #8
 800da66:	f361 0303 	bfi	r3, r1, #0, #4
 800da6a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800da6c:	4a13      	ldr	r2, [pc, #76]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da6e:	7913      	ldrb	r3, [r2, #4]
 800da70:	f36f 13c7 	bfc	r3, #7, #1
 800da74:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800da76:	4a11      	ldr	r2, [pc, #68]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da78:	7913      	ldrb	r3, [r2, #4]
 800da7a:	f36f 1304 	bfc	r3, #4, #1
 800da7e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800da80:	4b10      	ldr	r3, [pc, #64]	@ (800dac4 <VCU_TransmitModuleLimits+0x11c>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	f003 0310 	and.w	r3, r3, #16
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00c      	beq.n	800daa6 <VCU_TransmitModuleLimits+0xfe>
 800da8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dabc <VCU_TransmitModuleLimits+0x114>)
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da94:	b29b      	uxth	r3, r3
 800da96:	461a      	mov	r2, r3
 800da98:	490b      	ldr	r1, [pc, #44]	@ (800dac8 <VCU_TransmitModuleLimits+0x120>)
 800da9a:	480c      	ldr	r0, [pc, #48]	@ (800dacc <VCU_TransmitModuleLimits+0x124>)
 800da9c:	f006 fe24 	bl	80146e8 <siprintf>
 800daa0:	480a      	ldr	r0, [pc, #40]	@ (800dacc <VCU_TransmitModuleLimits+0x124>)
 800daa2:	f7f7 fdad 	bl	8005600 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800daa6:	2000      	movs	r0, #0
 800daa8:	f7fe f9c4 	bl	800be34 <VCU_TransmitMessageQueue>
  }

}
 800daac:	bf00      	nop
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd90      	pop	{r4, r7, pc}
 800dab4:	2000a66c 	.word	0x2000a66c
 800dab8:	20000dec 	.word	0x20000dec
 800dabc:	2000a6d8 	.word	0x2000a6d8
 800dac0:	2000a6e4 	.word	0x2000a6e4
 800dac4:	2000000c 	.word	0x2000000c
 800dac8:	08019b24 	.word	0x08019b24
 800dacc:	20000b5c 	.word	0x20000b5c

0800dad0 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dad4:	4b23      	ldr	r3, [pc, #140]	@ (800db64 <VCU_RequestTime+0x94>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dada:	4b22      	ldr	r3, [pc, #136]	@ (800db64 <VCU_RequestTime+0x94>)
 800dadc:	2200      	movs	r2, #0
 800dade:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dae0:	4b20      	ldr	r3, [pc, #128]	@ (800db64 <VCU_RequestTime+0x94>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dae6:	4b20      	ldr	r3, [pc, #128]	@ (800db68 <VCU_RequestTime+0x98>)
 800dae8:	895b      	ldrh	r3, [r3, #10]
 800daea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800daee:	b29b      	uxth	r3, r3
 800daf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daf4:	b299      	uxth	r1, r3
 800daf6:	4a1b      	ldr	r2, [pc, #108]	@ (800db64 <VCU_RequestTime+0x94>)
 800daf8:	8813      	ldrh	r3, [r2, #0]
 800dafa:	f361 030a 	bfi	r3, r1, #0, #11
 800dafe:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800db00:	4a18      	ldr	r2, [pc, #96]	@ (800db64 <VCU_RequestTime+0x94>)
 800db02:	6813      	ldr	r3, [r2, #0]
 800db04:	f36f 23dc 	bfc	r3, #11, #18
 800db08:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800db0a:	4a16      	ldr	r2, [pc, #88]	@ (800db64 <VCU_RequestTime+0x94>)
 800db0c:	7913      	ldrb	r3, [r2, #4]
 800db0e:	f36f 1386 	bfc	r3, #6, #1
 800db12:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800db14:	4a13      	ldr	r2, [pc, #76]	@ (800db64 <VCU_RequestTime+0x94>)
 800db16:	7913      	ldrb	r3, [r2, #4]
 800db18:	2108      	movs	r1, #8
 800db1a:	f361 0303 	bfi	r3, r1, #0, #4
 800db1e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800db20:	4a10      	ldr	r2, [pc, #64]	@ (800db64 <VCU_RequestTime+0x94>)
 800db22:	7913      	ldrb	r3, [r2, #4]
 800db24:	f36f 13c7 	bfc	r3, #7, #1
 800db28:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800db2a:	4a0e      	ldr	r2, [pc, #56]	@ (800db64 <VCU_RequestTime+0x94>)
 800db2c:	7913      	ldrb	r3, [r2, #4]
 800db2e:	f36f 1304 	bfc	r3, #4, #1
 800db32:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800db34:	4b0d      	ldr	r3, [pc, #52]	@ (800db6c <VCU_RequestTime+0x9c>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	f003 0310 	and.w	r3, r3, #16
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00c      	beq.n	800db5a <VCU_RequestTime+0x8a>
 800db40:	4b08      	ldr	r3, [pc, #32]	@ (800db64 <VCU_RequestTime+0x94>)
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db48:	b29b      	uxth	r3, r3
 800db4a:	461a      	mov	r2, r3
 800db4c:	4908      	ldr	r1, [pc, #32]	@ (800db70 <VCU_RequestTime+0xa0>)
 800db4e:	4809      	ldr	r0, [pc, #36]	@ (800db74 <VCU_RequestTime+0xa4>)
 800db50:	f006 fdca 	bl	80146e8 <siprintf>
 800db54:	4807      	ldr	r0, [pc, #28]	@ (800db74 <VCU_RequestTime+0xa4>)
 800db56:	f7f7 fd53 	bl	8005600 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800db5a:	2000      	movs	r0, #0
 800db5c:	f7fe f96a 	bl	800be34 <VCU_TransmitMessageQueue>

}
 800db60:	bf00      	nop
 800db62:	bd80      	pop	{r7, pc}
 800db64:	2000a6d8 	.word	0x2000a6d8
 800db68:	2000a66c 	.word	0x2000a66c
 800db6c:	2000000c 	.word	0x2000000c
 800db70:	08019b40 	.word	0x08019b40
 800db74:	20000b5c 	.word	0x20000b5c

0800db78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800db78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800db7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800db7c:	3304      	adds	r3, #4

0800db7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800db7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800db80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800db82:	d3f9      	bcc.n	800db78 <CopyDataInit>
  bx lr
 800db84:	4770      	bx	lr

0800db86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800db86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800db88:	3004      	adds	r0, #4

0800db8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800db8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800db8c:	d3fb      	bcc.n	800db86 <FillZerobss>
  bx lr
 800db8e:	4770      	bx	lr

0800db90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800db90:	480c      	ldr	r0, [pc, #48]	@ (800dbc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800db92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800db94:	f7fd fff4 	bl	800bb80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800db98:	480b      	ldr	r0, [pc, #44]	@ (800dbc8 <LoopForever+0x6>)
 800db9a:	490c      	ldr	r1, [pc, #48]	@ (800dbcc <LoopForever+0xa>)
 800db9c:	4a0c      	ldr	r2, [pc, #48]	@ (800dbd0 <LoopForever+0xe>)
 800db9e:	2300      	movs	r3, #0
 800dba0:	f7ff ffed 	bl	800db7e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800dba4:	480b      	ldr	r0, [pc, #44]	@ (800dbd4 <LoopForever+0x12>)
 800dba6:	490c      	ldr	r1, [pc, #48]	@ (800dbd8 <LoopForever+0x16>)
 800dba8:	4a0c      	ldr	r2, [pc, #48]	@ (800dbdc <LoopForever+0x1a>)
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f7ff ffe7 	bl	800db7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800dbb0:	480b      	ldr	r0, [pc, #44]	@ (800dbe0 <LoopForever+0x1e>)
 800dbb2:	490c      	ldr	r1, [pc, #48]	@ (800dbe4 <LoopForever+0x22>)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f7ff ffe8 	bl	800db8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800dbba:	f007 fcc1 	bl	8015540 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800dbbe:	f7f8 f8d1 	bl	8005d64 <main>

0800dbc2 <LoopForever>:

LoopForever:
  b LoopForever
 800dbc2:	e7fe      	b.n	800dbc2 <LoopForever>
  ldr   r0, =_estack
 800dbc4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800dbc8:	20000008 	.word	0x20000008
 800dbcc:	200002c8 	.word	0x200002c8
 800dbd0:	0801a1c0 	.word	0x0801a1c0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800dbd4:	20030000 	.word	0x20030000
 800dbd8:	20030000 	.word	0x20030000
 800dbdc:	0801a480 	.word	0x0801a480
  INIT_BSS _sbss, _ebss
 800dbe0:	200002c8 	.word	0x200002c8
 800dbe4:	2000a904 	.word	0x2000a904

0800dbe8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dbe8:	e7fe      	b.n	800dbe8 <ADC1_IRQHandler>
	...

0800dbec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <HAL_Init+0x3c>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a0b      	ldr	r2, [pc, #44]	@ (800dc28 <HAL_Init+0x3c>)
 800dbfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dc02:	2003      	movs	r0, #3
 800dc04:	f000 f96c 	bl	800dee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dc08:	200f      	movs	r0, #15
 800dc0a:	f000 f80f 	bl	800dc2c <HAL_InitTick>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800dc14:	2301      	movs	r3, #1
 800dc16:	71fb      	strb	r3, [r7, #7]
 800dc18:	e001      	b.n	800dc1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800dc1a:	f7fd fc17 	bl	800b44c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	58004000 	.word	0x58004000

0800dc2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800dc38:	4b17      	ldr	r3, [pc, #92]	@ (800dc98 <HAL_InitTick+0x6c>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d024      	beq.n	800dc8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800dc40:	f002 f842 	bl	800fcc8 <HAL_RCC_GetHCLKFreq>
 800dc44:	4602      	mov	r2, r0
 800dc46:	4b14      	ldr	r3, [pc, #80]	@ (800dc98 <HAL_InitTick+0x6c>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc50:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 f974 	bl	800df46 <HAL_SYSTICK_Config>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10f      	bne.n	800dc84 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b0f      	cmp	r3, #15
 800dc68:	d809      	bhi.n	800dc7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc72:	f000 f940 	bl	800def6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800dc76:	4a09      	ldr	r2, [pc, #36]	@ (800dc9c <HAL_InitTick+0x70>)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	e007      	b.n	800dc8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	73fb      	strb	r3, [r7, #15]
 800dc82:	e004      	b.n	800dc8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	73fb      	strb	r3, [r7, #15]
 800dc88:	e001      	b.n	800dc8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	2000001c 	.word	0x2000001c
 800dc9c:	20000018 	.word	0x20000018

0800dca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800dca4:	4b06      	ldr	r3, [pc, #24]	@ (800dcc0 <HAL_IncTick+0x20>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	4b06      	ldr	r3, [pc, #24]	@ (800dcc4 <HAL_IncTick+0x24>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4413      	add	r3, r2
 800dcb0:	4a04      	ldr	r2, [pc, #16]	@ (800dcc4 <HAL_IncTick+0x24>)
 800dcb2:	6013      	str	r3, [r2, #0]
}
 800dcb4:	bf00      	nop
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	2000001c 	.word	0x2000001c
 800dcc4:	2000a778 	.word	0x2000a778

0800dcc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0
  return uwTick;
 800dccc:	4b03      	ldr	r3, [pc, #12]	@ (800dcdc <HAL_GetTick+0x14>)
 800dcce:	681b      	ldr	r3, [r3, #0]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	2000a778 	.word	0x2000a778

0800dce0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800dce0:	b480      	push	{r7}
 800dce2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800dce4:	4b03      	ldr	r3, [pc, #12]	@ (800dcf4 <HAL_GetTickPrio+0x14>)
 800dce6:	681b      	ldr	r3, [r3, #0]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20000018 	.word	0x20000018

0800dcf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dd00:	f7ff ffe2 	bl	800dcc8 <HAL_GetTick>
 800dd04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d005      	beq.n	800dd1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800dd12:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <HAL_Delay+0x44>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800dd1e:	bf00      	nop
 800dd20:	f7ff ffd2 	bl	800dcc8 <HAL_GetTick>
 800dd24:	4602      	mov	r2, r0
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d8f7      	bhi.n	800dd20 <HAL_Delay+0x28>
  {
  }
}
 800dd30:	bf00      	nop
 800dd32:	bf00      	nop
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	2000001c 	.word	0x2000001c

0800dd40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f003 0307 	and.w	r3, r3, #7
 800dd4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd50:	4b0c      	ldr	r3, [pc, #48]	@ (800dd84 <__NVIC_SetPriorityGrouping+0x44>)
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dd68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800dd6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dd72:	4a04      	ldr	r2, [pc, #16]	@ (800dd84 <__NVIC_SetPriorityGrouping+0x44>)
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	60d3      	str	r3, [r2, #12]
}
 800dd78:	bf00      	nop
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr
 800dd84:	e000ed00 	.word	0xe000ed00

0800dd88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd8c:	4b04      	ldr	r3, [pc, #16]	@ (800dda0 <__NVIC_GetPriorityGrouping+0x18>)
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	0a1b      	lsrs	r3, r3, #8
 800dd92:	f003 0307 	and.w	r3, r3, #7
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr
 800dda0:	e000ed00 	.word	0xe000ed00

0800dda4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ddae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	db0b      	blt.n	800ddce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ddb6:	79fb      	ldrb	r3, [r7, #7]
 800ddb8:	f003 021f 	and.w	r2, r3, #31
 800ddbc:	4907      	ldr	r1, [pc, #28]	@ (800dddc <__NVIC_EnableIRQ+0x38>)
 800ddbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddc2:	095b      	lsrs	r3, r3, #5
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	fa00 f202 	lsl.w	r2, r0, r2
 800ddca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ddce:	bf00      	nop
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	e000e100 	.word	0xe000e100

0800dde0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	6039      	str	r1, [r7, #0]
 800ddea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ddec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	db0a      	blt.n	800de0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	490c      	ldr	r1, [pc, #48]	@ (800de2c <__NVIC_SetPriority+0x4c>)
 800ddfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddfe:	0112      	lsls	r2, r2, #4
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	440b      	add	r3, r1
 800de04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800de08:	e00a      	b.n	800de20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	4908      	ldr	r1, [pc, #32]	@ (800de30 <__NVIC_SetPriority+0x50>)
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	f003 030f 	and.w	r3, r3, #15
 800de16:	3b04      	subs	r3, #4
 800de18:	0112      	lsls	r2, r2, #4
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	440b      	add	r3, r1
 800de1e:	761a      	strb	r2, [r3, #24]
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	e000e100 	.word	0xe000e100
 800de30:	e000ed00 	.word	0xe000ed00

0800de34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de34:	b480      	push	{r7}
 800de36:	b089      	sub	sp, #36	@ 0x24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	f1c3 0307 	rsb	r3, r3, #7
 800de4e:	2b04      	cmp	r3, #4
 800de50:	bf28      	it	cs
 800de52:	2304      	movcs	r3, #4
 800de54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	3304      	adds	r3, #4
 800de5a:	2b06      	cmp	r3, #6
 800de5c:	d902      	bls.n	800de64 <NVIC_EncodePriority+0x30>
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	3b03      	subs	r3, #3
 800de62:	e000      	b.n	800de66 <NVIC_EncodePriority+0x32>
 800de64:	2300      	movs	r3, #0
 800de66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de68:	f04f 32ff 	mov.w	r2, #4294967295
 800de6c:	69bb      	ldr	r3, [r7, #24]
 800de6e:	fa02 f303 	lsl.w	r3, r2, r3
 800de72:	43da      	mvns	r2, r3
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	401a      	ands	r2, r3
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800de7c:	f04f 31ff 	mov.w	r1, #4294967295
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	fa01 f303 	lsl.w	r3, r1, r3
 800de86:	43d9      	mvns	r1, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de8c:	4313      	orrs	r3, r2
         );
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3724      	adds	r7, #36	@ 0x24
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
	...

0800de9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3b01      	subs	r3, #1
 800dea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800deac:	d301      	bcc.n	800deb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800deae:	2301      	movs	r3, #1
 800deb0:	e00f      	b.n	800ded2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800deb2:	4a0a      	ldr	r2, [pc, #40]	@ (800dedc <SysTick_Config+0x40>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800deba:	210f      	movs	r1, #15
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	f7ff ff8e 	bl	800dde0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dec4:	4b05      	ldr	r3, [pc, #20]	@ (800dedc <SysTick_Config+0x40>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800deca:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <SysTick_Config+0x40>)
 800decc:	2207      	movs	r2, #7
 800dece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	e000e010 	.word	0xe000e010

0800dee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff ff29 	bl	800dd40 <__NVIC_SetPriorityGrouping>
}
 800deee:	bf00      	nop
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b086      	sub	sp, #24
 800defa:	af00      	add	r7, sp, #0
 800defc:	4603      	mov	r3, r0
 800defe:	60b9      	str	r1, [r7, #8]
 800df00:	607a      	str	r2, [r7, #4]
 800df02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800df04:	f7ff ff40 	bl	800dd88 <__NVIC_GetPriorityGrouping>
 800df08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	68b9      	ldr	r1, [r7, #8]
 800df0e:	6978      	ldr	r0, [r7, #20]
 800df10:	f7ff ff90 	bl	800de34 <NVIC_EncodePriority>
 800df14:	4602      	mov	r2, r0
 800df16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df1a:	4611      	mov	r1, r2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7ff ff5f 	bl	800dde0 <__NVIC_SetPriority>
}
 800df22:	bf00      	nop
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	4603      	mov	r3, r0
 800df32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff ff33 	bl	800dda4 <__NVIC_EnableIRQ>
}
 800df3e:	bf00      	nop
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff ffa4 	bl	800de9c <SysTick_Config>
 800df54:	4603      	mov	r3, r0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3708      	adds	r7, #8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800df5e:	b480      	push	{r7}
 800df60:	b083      	sub	sp, #12
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e04f      	b.n	800e010 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d008      	beq.n	800df8e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2204      	movs	r2, #4
 800df80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e040      	b.n	800e010 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f022 020e 	bic.w	r2, r2, #14
 800df9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dfac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f022 0201 	bic.w	r2, r2, #1
 800dfbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfc2:	f003 021c 	and.w	r2, r3, #28
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfca:	2101      	movs	r1, #1
 800dfcc:	fa01 f202 	lsl.w	r2, r1, r2
 800dfd0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800dfda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00c      	beq.n	800dffe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dff2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800dffc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b02      	cmp	r3, #2
 800e032:	d005      	beq.n	800e040 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2204      	movs	r2, #4
 800e038:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	73fb      	strb	r3, [r7, #15]
 800e03e:	e047      	b.n	800e0d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f022 020e 	bic.w	r2, r2, #14
 800e04e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f022 0201 	bic.w	r2, r2, #1
 800e05e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e06a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e06e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e074:	f003 021c 	and.w	r2, r3, #28
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07c:	2101      	movs	r1, #1
 800e07e:	fa01 f202 	lsl.w	r2, r1, r2
 800e082:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e08c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00c      	beq.n	800e0b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e0a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800e0ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d003      	beq.n	800e0d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	4798      	blx	r3
    }
  }
  return status;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e0ea:	4b1c      	ldr	r3, [pc, #112]	@ (800e15c <HAL_FLASH_Program+0x80>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d101      	bne.n	800e0f6 <HAL_FLASH_Program+0x1a>
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	e02d      	b.n	800e152 <HAL_FLASH_Program+0x76>
 800e0f6:	4b19      	ldr	r3, [pc, #100]	@ (800e15c <HAL_FLASH_Program+0x80>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e0fc:	4b17      	ldr	r3, [pc, #92]	@ (800e15c <HAL_FLASH_Program+0x80>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e102:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e106:	f000 f869 	bl	800e1dc <FLASH_WaitForLastOperation>
 800e10a:	4603      	mov	r3, r0
 800e10c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d11a      	bne.n	800e14a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d105      	bne.n	800e126 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e11e:	68b8      	ldr	r0, [r7, #8]
 800e120:	f000 f8ca 	bl	800e2b8 <FLASH_Program_DoubleWord>
 800e124:	e004      	b.n	800e130 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	4619      	mov	r1, r3
 800e12a:	68b8      	ldr	r0, [r7, #8]
 800e12c:	f00a f85c 	bl	80181e8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e130:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e134:	f000 f852 	bl	800e1dc <FLASH_WaitForLastOperation>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800e13c:	4b08      	ldr	r3, [pc, #32]	@ (800e160 <HAL_FLASH_Program+0x84>)
 800e13e:	695a      	ldr	r2, [r3, #20]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	43db      	mvns	r3, r3
 800e144:	4906      	ldr	r1, [pc, #24]	@ (800e160 <HAL_FLASH_Program+0x84>)
 800e146:	4013      	ands	r3, r2
 800e148:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e14a:	4b04      	ldr	r3, [pc, #16]	@ (800e15c <HAL_FLASH_Program+0x80>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800e150:	7dfb      	ldrb	r3, [r7, #23]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	2000a77c 	.word	0x2000a77c
 800e160:	58004000 	.word	0x58004000

0800e164 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e16e:	4b0b      	ldr	r3, [pc, #44]	@ (800e19c <HAL_FLASH_Unlock+0x38>)
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	da0b      	bge.n	800e18e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e176:	4b09      	ldr	r3, [pc, #36]	@ (800e19c <HAL_FLASH_Unlock+0x38>)
 800e178:	4a09      	ldr	r2, [pc, #36]	@ (800e1a0 <HAL_FLASH_Unlock+0x3c>)
 800e17a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e17c:	4b07      	ldr	r3, [pc, #28]	@ (800e19c <HAL_FLASH_Unlock+0x38>)
 800e17e:	4a09      	ldr	r2, [pc, #36]	@ (800e1a4 <HAL_FLASH_Unlock+0x40>)
 800e180:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e182:	4b06      	ldr	r3, [pc, #24]	@ (800e19c <HAL_FLASH_Unlock+0x38>)
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	da01      	bge.n	800e18e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e18e:	79fb      	ldrb	r3, [r7, #7]
}
 800e190:	4618      	mov	r0, r3
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
 800e19c:	58004000 	.word	0x58004000
 800e1a0:	45670123 	.word	0x45670123
 800e1a4:	cdef89ab 	.word	0xcdef89ab

0800e1a8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e1b2:	4b09      	ldr	r3, [pc, #36]	@ (800e1d8 <HAL_FLASH_Lock+0x30>)
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	4a08      	ldr	r2, [pc, #32]	@ (800e1d8 <HAL_FLASH_Lock+0x30>)
 800e1b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e1bc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800e1be:	4b06      	ldr	r3, [pc, #24]	@ (800e1d8 <HAL_FLASH_Lock+0x30>)
 800e1c0:	695b      	ldr	r3, [r3, #20]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	db01      	blt.n	800e1ca <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	58004000 	.word	0x58004000

0800e1dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800e1e4:	f7ff fd70 	bl	800dcc8 <HAL_GetTick>
 800e1e8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e1ea:	e009      	b.n	800e200 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e1ec:	f7ff fd6c 	bl	800dcc8 <HAL_GetTick>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d801      	bhi.n	800e200 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e053      	b.n	800e2a8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e200:	4b2b      	ldr	r3, [pc, #172]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e20c:	d0ee      	beq.n	800e1ec <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800e20e:	4b28      	ldr	r3, [pc, #160]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e21e:	4b24      	ldr	r3, [pc, #144]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e220:	2201      	movs	r2, #1
 800e222:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d007      	beq.n	800e23e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800e22e:	4b20      	ldr	r3, [pc, #128]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e230:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e234:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e23c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800e244:	4013      	ands	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e24e:	d307      	bcc.n	800e260 <FLASH_WaitForLastOperation+0x84>
 800e250:	4b17      	ldr	r3, [pc, #92]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e252:	699a      	ldr	r2, [r3, #24]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e25a:	4915      	ldr	r1, [pc, #84]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e25c:	4313      	orrs	r3, r2
 800e25e:	618b      	str	r3, [r1, #24]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <FLASH_WaitForLastOperation+0x98>
 800e26a:	4a11      	ldr	r2, [pc, #68]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e272:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00e      	beq.n	800e298 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e27a:	4a0e      	ldr	r2, [pc, #56]	@ (800e2b4 <FLASH_WaitForLastOperation+0xd8>)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e011      	b.n	800e2a8 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e284:	f7ff fd20 	bl	800dcc8 <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	429a      	cmp	r2, r3
 800e292:	d801      	bhi.n	800e298 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800e294:	2303      	movs	r3, #3
 800e296:	e007      	b.n	800e2a8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e298:	4b05      	ldr	r3, [pc, #20]	@ (800e2b0 <FLASH_WaitForLastOperation+0xd4>)
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e2a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2a4:	d0ee      	beq.n	800e284 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	58004000 	.word	0x58004000
 800e2b4:	2000a77c 	.word	0x2000a77c

0800e2b8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e300 <FLASH_Program_DoubleWord+0x48>)
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	4a0d      	ldr	r2, [pc, #52]	@ (800e300 <FLASH_Program_DoubleWord+0x48>)
 800e2ca:	f043 0301 	orr.w	r3, r3, #1
 800e2ce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800e2d6:	f3bf 8f6f 	isb	sy
}
 800e2da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e2dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2e0:	f04f 0200 	mov.w	r2, #0
 800e2e4:	f04f 0300 	mov.w	r3, #0
 800e2e8:	000a      	movs	r2, r1
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	68f9      	ldr	r1, [r7, #12]
 800e2ee:	3104      	adds	r1, #4
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	600b      	str	r3, [r1, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	58004000 	.word	0x58004000

0800e304 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e30e:	4b24      	ldr	r3, [pc, #144]	@ (800e3a0 <HAL_FLASHEx_Erase+0x9c>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <HAL_FLASHEx_Erase+0x16>
 800e316:	2302      	movs	r3, #2
 800e318:	e03d      	b.n	800e396 <HAL_FLASHEx_Erase+0x92>
 800e31a:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <HAL_FLASHEx_Erase+0x9c>)
 800e31c:	2201      	movs	r2, #1
 800e31e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e320:	4b1f      	ldr	r3, [pc, #124]	@ (800e3a0 <HAL_FLASHEx_Erase+0x9c>)
 800e322:	2200      	movs	r2, #0
 800e324:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e32a:	f7ff ff57 	bl	800e1dc <FLASH_WaitForLastOperation>
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d12a      	bne.n	800e38e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	d124      	bne.n	800e38a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	f04f 32ff 	mov.w	r2, #4294967295
 800e346:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	60bb      	str	r3, [r7, #8]
 800e34e:	e012      	b.n	800e376 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e350:	68b8      	ldr	r0, [r7, #8]
 800e352:	f000 f869 	bl	800e428 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e35a:	f7ff ff3f 	bl	800e1dc <FLASH_WaitForLastOperation>
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d003      	beq.n	800e370 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	601a      	str	r2, [r3, #0]
          break;
 800e36e:	e00a      	b.n	800e386 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	3301      	adds	r3, #1
 800e374:	60bb      	str	r3, [r7, #8]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	685a      	ldr	r2, [r3, #4]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	4413      	add	r3, r2
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	429a      	cmp	r2, r3
 800e384:	d3e4      	bcc.n	800e350 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e386:	f000 f8b1 	bl	800e4ec <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e38a:	f000 f867 	bl	800e45c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e38e:	4b04      	ldr	r3, [pc, #16]	@ (800e3a0 <HAL_FLASHEx_Erase+0x9c>)
 800e390:	2200      	movs	r2, #0
 800e392:	701a      	strb	r2, [r3, #0]

  return status;
 800e394:	7bfb      	ldrb	r3, [r7, #15]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	2000a77c 	.word	0x2000a77c

0800e3a4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e3ac:	4b1c      	ldr	r3, [pc, #112]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d101      	bne.n	800e3b8 <HAL_FLASHEx_Erase_IT+0x14>
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	e02e      	b.n	800e416 <HAL_FLASHEx_Erase_IT+0x72>
 800e3b8:	4b19      	ldr	r3, [pc, #100]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e3be:	4b18      	ldr	r3, [pc, #96]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a15      	ldr	r2, [pc, #84]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e3ca:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e3cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e3d0:	f7ff ff04 	bl	800e1dc <FLASH_WaitForLastOperation>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d003      	beq.n	800e3e6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800e3de:	4b10      	ldr	r3, [pc, #64]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
 800e3e4:	e016      	b.n	800e414 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800e3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e424 <HAL_FLASHEx_Erase_IT+0x80>)
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	4a0e      	ldr	r2, [pc, #56]	@ (800e424 <HAL_FLASHEx_Erase_IT+0x80>)
 800e3ec:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800e3f0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d10c      	bne.n	800e414 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	4a08      	ldr	r2, [pc, #32]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e400:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	4a06      	ldr	r2, [pc, #24]	@ (800e420 <HAL_FLASHEx_Erase_IT+0x7c>)
 800e408:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 f80a 	bl	800e428 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	2000a77c 	.word	0x2000a77c
 800e424:	58004000 	.word	0x58004000

0800e428 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e430:	4b09      	ldr	r3, [pc, #36]	@ (800e458 <FLASH_PageErase+0x30>)
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	4313      	orrs	r3, r2
 800e43e:	4a06      	ldr	r2, [pc, #24]	@ (800e458 <FLASH_PageErase+0x30>)
 800e440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e444:	f043 0302 	orr.w	r3, r3, #2
 800e448:	6153      	str	r3, [r2, #20]
}
 800e44a:	bf00      	nop
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	58004000 	.word	0x58004000

0800e45c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800e45c:	b480      	push	{r7}
 800e45e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800e460:	4b21      	ldr	r3, [pc, #132]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e46c:	d117      	bne.n	800e49e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e46e:	4b1e      	ldr	r3, [pc, #120]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a1d      	ldr	r2, [pc, #116]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e478:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e47a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a1a      	ldr	r2, [pc, #104]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e480:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	4b18      	ldr	r3, [pc, #96]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a17      	ldr	r2, [pc, #92]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e48c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e490:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e492:	4b15      	ldr	r3, [pc, #84]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a14      	ldr	r2, [pc, #80]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e49c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800e49e:	4b12      	ldr	r3, [pc, #72]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4aa:	d117      	bne.n	800e4dc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a0d      	ldr	r2, [pc, #52]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e4b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e4b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	4b08      	ldr	r3, [pc, #32]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a07      	ldr	r2, [pc, #28]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e4d0:	4b05      	ldr	r3, [pc, #20]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a04      	ldr	r2, [pc, #16]	@ (800e4e8 <FLASH_FlushCaches+0x8c>)
 800e4d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e4da:	6013      	str	r3, [r2, #0]
  }
}
 800e4dc:	bf00      	nop
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	58004000 	.word	0x58004000

0800e4ec <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e4f0:	4b06      	ldr	r3, [pc, #24]	@ (800e50c <FLASH_AcknowledgePageErase+0x20>)
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	4a05      	ldr	r2, [pc, #20]	@ (800e50c <FLASH_AcknowledgePageErase+0x20>)
 800e4f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800e4fa:	f023 0302 	bic.w	r3, r3, #2
 800e4fe:	6153      	str	r3, [r2, #20]
}
 800e500:	bf00      	nop
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	58004000 	.word	0x58004000

0800e510 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e510:	b480      	push	{r7}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e51a:	2300      	movs	r3, #0
 800e51c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e51e:	e14c      	b.n	800e7ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	2101      	movs	r1, #1
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	fa01 f303 	lsl.w	r3, r1, r3
 800e52c:	4013      	ands	r3, r2
 800e52e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 813e 	beq.w	800e7b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	f003 0303 	and.w	r3, r3, #3
 800e540:	2b01      	cmp	r3, #1
 800e542:	d005      	beq.n	800e550 <HAL_GPIO_Init+0x40>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	f003 0303 	and.w	r3, r3, #3
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d130      	bne.n	800e5b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	2203      	movs	r2, #3
 800e55c:	fa02 f303 	lsl.w	r3, r2, r3
 800e560:	43db      	mvns	r3, r3
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	4013      	ands	r3, r2
 800e566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	68da      	ldr	r2, [r3, #12]
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	fa02 f303 	lsl.w	r3, r2, r3
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	4313      	orrs	r3, r2
 800e578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e586:	2201      	movs	r2, #1
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	fa02 f303 	lsl.w	r3, r2, r3
 800e58e:	43db      	mvns	r3, r3
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	4013      	ands	r3, r2
 800e594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	091b      	lsrs	r3, r3, #4
 800e59c:	f003 0201 	and.w	r2, r3, #1
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	f003 0303 	and.w	r3, r3, #3
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d017      	beq.n	800e5ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	005b      	lsls	r3, r3, #1
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ce:	43db      	mvns	r3, r3
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	689a      	ldr	r2, [r3, #8]
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	f003 0303 	and.w	r3, r3, #3
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d123      	bne.n	800e642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	08da      	lsrs	r2, r3, #3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	3208      	adds	r2, #8
 800e602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	f003 0307 	and.w	r3, r3, #7
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	220f      	movs	r2, #15
 800e612:	fa02 f303 	lsl.w	r3, r2, r3
 800e616:	43db      	mvns	r3, r3
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	4013      	ands	r3, r2
 800e61c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	691a      	ldr	r2, [r3, #16]
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f003 0307 	and.w	r3, r3, #7
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	fa02 f303 	lsl.w	r3, r2, r3
 800e62e:	693a      	ldr	r2, [r7, #16]
 800e630:	4313      	orrs	r3, r2
 800e632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	08da      	lsrs	r2, r3, #3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3208      	adds	r2, #8
 800e63c:	6939      	ldr	r1, [r7, #16]
 800e63e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	2203      	movs	r2, #3
 800e64e:	fa02 f303 	lsl.w	r3, r2, r3
 800e652:	43db      	mvns	r3, r3
 800e654:	693a      	ldr	r2, [r7, #16]
 800e656:	4013      	ands	r3, r2
 800e658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	f003 0203 	and.w	r2, r3, #3
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	fa02 f303 	lsl.w	r3, r2, r3
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f000 8098 	beq.w	800e7b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e684:	4a54      	ldr	r2, [pc, #336]	@ (800e7d8 <HAL_GPIO_Init+0x2c8>)
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	089b      	lsrs	r3, r3, #2
 800e68a:	3302      	adds	r3, #2
 800e68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	f003 0303 	and.w	r3, r3, #3
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	220f      	movs	r2, #15
 800e69c:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a0:	43db      	mvns	r3, r3
 800e6a2:	693a      	ldr	r2, [r7, #16]
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e6ae:	d019      	beq.n	800e6e4 <HAL_GPIO_Init+0x1d4>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a4a      	ldr	r2, [pc, #296]	@ (800e7dc <HAL_GPIO_Init+0x2cc>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d013      	beq.n	800e6e0 <HAL_GPIO_Init+0x1d0>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a49      	ldr	r2, [pc, #292]	@ (800e7e0 <HAL_GPIO_Init+0x2d0>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d00d      	beq.n	800e6dc <HAL_GPIO_Init+0x1cc>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4a48      	ldr	r2, [pc, #288]	@ (800e7e4 <HAL_GPIO_Init+0x2d4>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d007      	beq.n	800e6d8 <HAL_GPIO_Init+0x1c8>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a47      	ldr	r2, [pc, #284]	@ (800e7e8 <HAL_GPIO_Init+0x2d8>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d101      	bne.n	800e6d4 <HAL_GPIO_Init+0x1c4>
 800e6d0:	2304      	movs	r3, #4
 800e6d2:	e008      	b.n	800e6e6 <HAL_GPIO_Init+0x1d6>
 800e6d4:	2307      	movs	r3, #7
 800e6d6:	e006      	b.n	800e6e6 <HAL_GPIO_Init+0x1d6>
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e004      	b.n	800e6e6 <HAL_GPIO_Init+0x1d6>
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e002      	b.n	800e6e6 <HAL_GPIO_Init+0x1d6>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <HAL_GPIO_Init+0x1d6>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	f002 0203 	and.w	r2, r2, #3
 800e6ec:	0092      	lsls	r2, r2, #2
 800e6ee:	4093      	lsls	r3, r2
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e6f6:	4938      	ldr	r1, [pc, #224]	@ (800e7d8 <HAL_GPIO_Init+0x2c8>)
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	089b      	lsrs	r3, r3, #2
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e704:	4b39      	ldr	r3, [pc, #228]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	43db      	mvns	r3, r3
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	4013      	ands	r3, r2
 800e712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d003      	beq.n	800e728 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	4313      	orrs	r3, r2
 800e726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e728:	4a30      	ldr	r2, [pc, #192]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e72e:	4b2f      	ldr	r3, [pc, #188]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	43db      	mvns	r3, r3
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	4013      	ands	r3, r2
 800e73c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	4313      	orrs	r3, r2
 800e750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e752:	4a26      	ldr	r2, [pc, #152]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e758:	4b24      	ldr	r3, [pc, #144]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e75e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	43db      	mvns	r3, r3
 800e764:	693a      	ldr	r2, [r7, #16]
 800e766:	4013      	ands	r3, r2
 800e768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e772:	2b00      	cmp	r3, #0
 800e774:	d003      	beq.n	800e77e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e77e:	4a1b      	ldr	r2, [pc, #108]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800e786:	4b19      	ldr	r3, [pc, #100]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e78c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	43db      	mvns	r3, r3
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	4013      	ands	r3, r2
 800e796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d003      	beq.n	800e7ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e7ac:	4a0f      	ldr	r2, [pc, #60]	@ (800e7ec <HAL_GPIO_Init+0x2dc>)
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f47f aeab 	bne.w	800e520 <HAL_GPIO_Init+0x10>
  }
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	371c      	adds	r7, #28
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr
 800e7d8:	40010000 	.word	0x40010000
 800e7dc:	48000400 	.word	0x48000400
 800e7e0:	48000800 	.word	0x48000800
 800e7e4:	48000c00 	.word	0x48000c00
 800e7e8:	48001000 	.word	0x48001000
 800e7ec:	58000800 	.word	0x58000800

0800e7f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	691a      	ldr	r2, [r3, #16]
 800e800:	887b      	ldrh	r3, [r7, #2]
 800e802:	4013      	ands	r3, r2
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e808:	2301      	movs	r3, #1
 800e80a:	73fb      	strb	r3, [r7, #15]
 800e80c:	e001      	b.n	800e812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e80e:	2300      	movs	r3, #0
 800e810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e812:	7bfb      	ldrb	r3, [r7, #15]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	807b      	strh	r3, [r7, #2]
 800e82c:	4613      	mov	r3, r2
 800e82e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e830:	787b      	ldrb	r3, [r7, #1]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d003      	beq.n	800e83e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e836:	887a      	ldrh	r2, [r7, #2]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e83c:	e002      	b.n	800e844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e83e:	887a      	ldrh	r2, [r7, #2]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e844:	bf00      	nop
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e862:	887a      	ldrh	r2, [r7, #2]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4013      	ands	r3, r2
 800e868:	041a      	lsls	r2, r3, #16
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	43d9      	mvns	r1, r3
 800e86e:	887b      	ldrh	r3, [r7, #2]
 800e870:	400b      	ands	r3, r1
 800e872:	431a      	orrs	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	619a      	str	r2, [r3, #24]
}
 800e878:	bf00      	nop
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e88e:	4b08      	ldr	r3, [pc, #32]	@ (800e8b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e890:	68da      	ldr	r2, [r3, #12]
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	4013      	ands	r3, r2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d006      	beq.n	800e8a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e89a:	4a05      	ldr	r2, [pc, #20]	@ (800e8b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e8a0:	88fb      	ldrh	r3, [r7, #6]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7f7 f8f6 	bl	8005a94 <HAL_GPIO_EXTI_Callback>
  }
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	58000800 	.word	0x58000800

0800e8b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e4 <HAL_HSEM_IRQHandler+0x30>)
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800e8c0:	4b08      	ldr	r3, [pc, #32]	@ (800e8e4 <HAL_HSEM_IRQHandler+0x30>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	43db      	mvns	r3, r3
 800e8c8:	4906      	ldr	r1, [pc, #24]	@ (800e8e4 <HAL_HSEM_IRQHandler+0x30>)
 800e8ca:	4013      	ands	r3, r2
 800e8cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800e8ce:	4a05      	ldr	r2, [pc, #20]	@ (800e8e4 <HAL_HSEM_IRQHandler+0x30>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f807 	bl	800e8e8 <HAL_HSEM_FreeCallback>
}
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	58001500 	.word	0x58001500

0800e8e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8fe:	b08b      	sub	sp, #44	@ 0x2c
 800e900:	af06      	add	r7, sp, #24
 800e902:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e0cb      	b.n	800eaa6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800e914:	b2db      	uxtb	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7fc feee 	bl	800b704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2203      	movs	r2, #3
 800e92c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4618      	mov	r0, r3
 800e936:	f005 f943 	bl	8013bc0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
 800e93e:	e040      	b.n	800e9c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	1c5a      	adds	r2, r3, #1
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	440b      	add	r3, r1
 800e950:	3301      	adds	r3, #1
 800e952:	2201      	movs	r2, #1
 800e954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e956:	7bfb      	ldrb	r3, [r7, #15]
 800e958:	6879      	ldr	r1, [r7, #4]
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	4613      	mov	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	440b      	add	r3, r1
 800e966:	7bfa      	ldrb	r2, [r7, #15]
 800e968:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	4613      	mov	r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	4413      	add	r3, r2
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	440b      	add	r3, r1
 800e97a:	3303      	adds	r3, #3
 800e97c:	2200      	movs	r2, #0
 800e97e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e980:	7bfa      	ldrb	r2, [r7, #15]
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	4613      	mov	r3, r2
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	3338      	adds	r3, #56	@ 0x38
 800e990:	2200      	movs	r2, #0
 800e992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e994:	7bfa      	ldrb	r2, [r7, #15]
 800e996:	6879      	ldr	r1, [r7, #4]
 800e998:	4613      	mov	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	333c      	adds	r3, #60	@ 0x3c
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e9a8:	7bfa      	ldrb	r2, [r7, #15]
 800e9aa:	6879      	ldr	r1, [r7, #4]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	440b      	add	r3, r1
 800e9b6:	3340      	adds	r3, #64	@ 0x40
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	73fb      	strb	r3, [r7, #15]
 800e9c2:	7bfa      	ldrb	r2, [r7, #15]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d3b9      	bcc.n	800e940 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]
 800e9d0:	e044      	b.n	800ea5c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e9d2:	7bfa      	ldrb	r2, [r7, #15]
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	440b      	add	r3, r1
 800e9e0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e9e8:	7bfa      	ldrb	r2, [r7, #15]
 800e9ea:	6879      	ldr	r1, [r7, #4]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	440b      	add	r3, r1
 800e9f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e9fa:	7bfa      	ldrb	r2, [r7, #15]
 800e9fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e9fe:	7bfa      	ldrb	r2, [r7, #15]
 800ea00:	6879      	ldr	r1, [r7, #4]
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	440b      	add	r3, r1
 800ea0c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800ea10:	2200      	movs	r2, #0
 800ea12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ea14:	7bfa      	ldrb	r2, [r7, #15]
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	440b      	add	r3, r1
 800ea22:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ea2a:	7bfa      	ldrb	r2, [r7, #15]
 800ea2c:	6879      	ldr	r1, [r7, #4]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	00db      	lsls	r3, r3, #3
 800ea36:	440b      	add	r3, r1
 800ea38:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ea40:	7bfa      	ldrb	r2, [r7, #15]
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	4613      	mov	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	00db      	lsls	r3, r3, #3
 800ea4c:	440b      	add	r3, r1
 800ea4e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ea56:	7bfb      	ldrb	r3, [r7, #15]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	73fb      	strb	r3, [r7, #15]
 800ea5c:	7bfa      	ldrb	r2, [r7, #15]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d3b5      	bcc.n	800e9d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	687e      	ldr	r6, [r7, #4]
 800ea6e:	466d      	mov	r5, sp
 800ea70:	f106 0410 	add.w	r4, r6, #16
 800ea74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	602b      	str	r3, [r5, #0]
 800ea7c:	1d33      	adds	r3, r6, #4
 800ea7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea80:	6838      	ldr	r0, [r7, #0]
 800ea82:	f005 f8b8 	bl	8013bf6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d102      	bne.n	800eaa4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f805 	bl	800eaae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eaae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	f043 0301 	orr.w	r3, r3, #1
 800ead8:	b29a      	uxth	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f043 0302 	orr.w	r3, r3, #2
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d01d      	beq.n	800eb50 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	791b      	ldrb	r3, [r3, #4]
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7fc fd1e 	bl	800b560 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2202      	movs	r2, #2
 800eb28:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800eb40:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	711a      	strb	r2, [r3, #4]
 800eb4e:	e001      	b.n	800eb54 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
	...

0800eb60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800eb60:	b480      	push	{r7}
 800eb62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800eb64:	4b05      	ldr	r3, [pc, #20]	@ (800eb7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a04      	ldr	r2, [pc, #16]	@ (800eb7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800eb6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb6e:	6013      	str	r3, [r2, #0]
}
 800eb70:	bf00      	nop
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	58000400 	.word	0x58000400

0800eb80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800eb84:	4b04      	ldr	r3, [pc, #16]	@ (800eb98 <HAL_PWREx_GetVoltageRange+0x18>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	58000400 	.word	0x58000400

0800eb9c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800eba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ebaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebae:	d101      	bne.n	800ebb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e000      	b.n	800ebb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ebc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ebce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ebd2:	6013      	str	r3, [r2, #0]
}
 800ebd4:	bf00      	nop
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr

0800ebde <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ebe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ebec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ebf0:	6013      	str	r3, [r2, #0]
}
 800ebf2:	bf00      	nop
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ec00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec0e:	d101      	bne.n	800ec14 <LL_RCC_HSE_IsReady+0x18>
 800ec10:	2301      	movs	r3, #1
 800ec12:	e000      	b.n	800ec16 <LL_RCC_HSE_IsReady+0x1a>
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800ec20:	b480      	push	{r7}
 800ec22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ec24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ec2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec32:	6013      	str	r3, [r2, #0]
}
 800ec34:	bf00      	nop
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ec42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ec4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec50:	6013      	str	r3, [r2, #0]
}
 800ec52:	bf00      	nop
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ec60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec6e:	d101      	bne.n	800ec74 <LL_RCC_HSI_IsReady+0x18>
 800ec70:	2301      	movs	r3, #1
 800ec72:	e000      	b.n	800ec76 <LL_RCC_HSI_IsReady+0x1a>
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800ec88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	061b      	lsls	r3, r3, #24
 800ec96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	604b      	str	r3, [r1, #4]
}
 800ec9e:	bf00      	nop
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ecae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ecb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ecc2:	bf00      	nop
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ecd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ecd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ecdc:	f023 0301 	bic.w	r3, r3, #1
 800ece0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ece4:	bf00      	nop
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800ecee:	b480      	push	{r7}
 800ecf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ecf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ecfa:	f003 0302 	and.w	r3, r3, #2
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d101      	bne.n	800ed06 <LL_RCC_HSI48_IsReady+0x18>
 800ed02:	2301      	movs	r3, #1
 800ed04:	e000      	b.n	800ed08 <LL_RCC_HSI48_IsReady+0x1a>
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr

0800ed12 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800ed12:	b480      	push	{r7}
 800ed14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ed16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ed22:	f043 0301 	orr.w	r3, r3, #1
 800ed26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ed2a:	bf00      	nop
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800ed34:	b480      	push	{r7}
 800ed36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ed38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ed44:	f023 0301 	bic.w	r3, r3, #1
 800ed48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ed4c:	bf00      	nop
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800ed56:	b480      	push	{r7}
 800ed58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ed5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ed66:	f043 0304 	orr.w	r3, r3, #4
 800ed6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ed6e:	bf00      	nop
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ed7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ed88:	f023 0304 	bic.w	r3, r3, #4
 800ed8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ed90:	bf00      	nop
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ed9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eda6:	f003 0302 	and.w	r3, r3, #2
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d101      	bne.n	800edb2 <LL_RCC_LSE_IsReady+0x18>
 800edae:	2301      	movs	r3, #1
 800edb0:	e000      	b.n	800edb4 <LL_RCC_LSE_IsReady+0x1a>
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800edbe:	b480      	push	{r7}
 800edc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800edc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800edca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800edce:	f043 0301 	orr.w	r3, r3, #1
 800edd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800edd6:	bf00      	nop
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ede4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ede8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800edec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800edf0:	f023 0301 	bic.w	r3, r3, #1
 800edf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800edf8:	bf00      	nop
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800ee02:	b480      	push	{r7}
 800ee04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ee06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d101      	bne.n	800ee1a <LL_RCC_LSI1_IsReady+0x18>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e000      	b.n	800ee1c <LL_RCC_LSI1_IsReady+0x1a>
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800ee26:	b480      	push	{r7}
 800ee28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ee2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee36:	f043 0304 	orr.w	r3, r3, #4
 800ee3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ee3e:	bf00      	nop
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ee4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee58:	f023 0304 	bic.w	r3, r3, #4
 800ee5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ee60:	bf00      	nop
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ee6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee76:	f003 0308 	and.w	r3, r3, #8
 800ee7a:	2b08      	cmp	r3, #8
 800ee7c:	d101      	bne.n	800ee82 <LL_RCC_LSI2_IsReady+0x18>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e000      	b.n	800ee84 <LL_RCC_LSI2_IsReady+0x1a>
 800ee82:	2300      	movs	r3, #0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr

0800ee8e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800ee8e:	b480      	push	{r7}
 800ee90:	b083      	sub	sp, #12
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ee96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	021b      	lsls	r3, r3, #8
 800eea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800eec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eeca:	f043 0301 	orr.w	r3, r3, #1
 800eece:	6013      	str	r3, [r2, #0]
}
 800eed0:	bf00      	nop
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800eeda:	b480      	push	{r7}
 800eedc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800eede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eee8:	f023 0301 	bic.w	r3, r3, #1
 800eeec:	6013      	str	r3, [r2, #0]
}
 800eeee:	bf00      	nop
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800eef8:	b480      	push	{r7}
 800eefa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800eefc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 0302 	and.w	r3, r3, #2
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d101      	bne.n	800ef0e <LL_RCC_MSI_IsReady+0x16>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e000      	b.n	800ef10 <LL_RCC_MSI_IsReady+0x18>
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800ef1a:	b480      	push	{r7}
 800ef1c:	b083      	sub	sp, #12
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ef22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ef2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	600b      	str	r3, [r1, #0]
}
 800ef36:	bf00      	nop
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ef48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef52:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2bb0      	cmp	r3, #176	@ 0xb0
 800ef58:	d901      	bls.n	800ef5e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800ef5a:	23b0      	movs	r3, #176	@ 0xb0
 800ef5c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800ef5e:	687b      	ldr	r3, [r7, #4]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ef74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	021b      	lsls	r3, r3, #8
 800ef82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ef86:	4313      	orrs	r3, r2
 800ef88:	604b      	str	r3, [r1, #4]
}
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b083      	sub	sp, #12
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ef9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	f023 0203 	bic.w	r2, r3, #3
 800efa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4313      	orrs	r3, r2
 800efb0:	608b      	str	r3, [r1, #8]
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800efbe:	b480      	push	{r7}
 800efc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800efc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	f003 030c 	and.w	r3, r3, #12
}
 800efcc:	4618      	mov	r0, r3
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800efde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800efe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4313      	orrs	r3, r2
 800eff0:	608b      	str	r3, [r1, #8]
}
 800eff2:	bf00      	nop
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800effe:	b480      	push	{r7}
 800f000:	b083      	sub	sp, #12
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800f006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f00a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f00e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4313      	orrs	r3, r2
 800f01a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800f01e:	bf00      	nop
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800f02a:	b480      	push	{r7}
 800f02c:	b083      	sub	sp, #12
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f036:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f03a:	f023 020f 	bic.w	r2, r3, #15
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	091b      	lsrs	r3, r3, #4
 800f042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f046:	4313      	orrs	r3, r2
 800f048:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f06a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4313      	orrs	r3, r2
 800f072:	608b      	str	r3, [r1, #8]
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800f092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4313      	orrs	r3, r2
 800f09a:	608b      	str	r3, [r1, #8]
}
 800f09c:	bf00      	nop
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f0ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f0c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f0cc:	011b      	lsls	r3, r3, #4
 800f0ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f0f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800f102:	4618      	mov	r0, r3
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800f10c:	b480      	push	{r7}
 800f10e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f11a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f11e:	6013      	str	r3, [r2, #0]
}
 800f120:	bf00      	nop
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800f12a:	b480      	push	{r7}
 800f12c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f12e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f138:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f13c:	6013      	str	r3, [r2, #0]
}
 800f13e:	bf00      	nop
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800f148:	b480      	push	{r7}
 800f14a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f14c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f15a:	d101      	bne.n	800f160 <LL_RCC_PLL_IsReady+0x18>
 800f15c:	2301      	movs	r3, #1
 800f15e:	e000      	b.n	800f162 <LL_RCC_PLL_IsReady+0x1a>
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f16c:	b480      	push	{r7}
 800f16e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	0a1b      	lsrs	r3, r3, #8
 800f178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f186:	b480      	push	{r7}
 800f188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f18a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800f194:	4618      	mov	r0, r3
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f1a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f1ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	f003 0303 	and.w	r3, r3, #3
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800f1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1e0:	d101      	bne.n	800f1e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e000      	b.n	800f1e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800f1f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f1fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f206:	d101      	bne.n	800f20c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800f208:	2301      	movs	r3, #1
 800f20a:	e000      	b.n	800f20e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800f218:	b480      	push	{r7}
 800f21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800f21c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f220:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f22c:	d101      	bne.n	800f232 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800f22e:	2301      	movs	r3, #1
 800f230:	e000      	b.n	800f234 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800f23e:	b480      	push	{r7}
 800f240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800f242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f24c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f250:	d101      	bne.n	800f256 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800f252:	2301      	movs	r3, #1
 800f254:	e000      	b.n	800f258 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800f262:	b480      	push	{r7}
 800f264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800f266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f274:	d101      	bne.n	800f27a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800f276:	2301      	movs	r3, #1
 800f278:	e000      	b.n	800f27c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
	...

0800f288 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b08d      	sub	sp, #52	@ 0x34
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	e363      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f003 0320 	and.w	r3, r3, #32
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 808d 	beq.w	800f3c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f2a8:	f7ff fe89 	bl	800efbe <LL_RCC_GetSysClkSource>
 800f2ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f2ae:	f7ff ff82 	bl	800f1b6 <LL_RCC_PLL_GetMainSource>
 800f2b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d005      	beq.n	800f2c6 <HAL_RCC_OscConfig+0x3e>
 800f2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2bc:	2b0c      	cmp	r3, #12
 800f2be:	d147      	bne.n	800f350 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d144      	bne.n	800f350 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d101      	bne.n	800f2d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e347      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f2d6:	f7ff fe34 	bl	800ef42 <LL_RCC_MSI_GetRange>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	d914      	bls.n	800f30a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f000 fd2f 	bl	800fd48 <RCC_SetFlashLatencyFromMSIRange>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d001      	beq.n	800f2f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e336      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fe0e 	bl	800ef1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	4618      	mov	r0, r3
 800f304:	f7ff fe32 	bl	800ef6c <LL_RCC_MSI_SetCalibTrimming>
 800f308:	e013      	b.n	800f332 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff fe03 	bl	800ef1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	4618      	mov	r0, r3
 800f31a:	f7ff fe27 	bl	800ef6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f322:	4618      	mov	r0, r3
 800f324:	f000 fd10 	bl	800fd48 <RCC_SetFlashLatencyFromMSIRange>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e317      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f332:	f000 fcc9 	bl	800fcc8 <HAL_RCC_GetHCLKFreq>
 800f336:	4603      	mov	r3, r0
 800f338:	4aa4      	ldr	r2, [pc, #656]	@ (800f5cc <HAL_RCC_OscConfig+0x344>)
 800f33a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f33c:	4ba4      	ldr	r3, [pc, #656]	@ (800f5d0 <HAL_RCC_OscConfig+0x348>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe fc73 	bl	800dc2c <HAL_InitTick>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d039      	beq.n	800f3c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	e308      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	69db      	ldr	r3, [r3, #28]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01e      	beq.n	800f396 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f358:	f7ff fdb0 	bl	800eebc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f35c:	f7fe fcb4 	bl	800dcc8 <HAL_GetTick>
 800f360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800f362:	e008      	b.n	800f376 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f364:	f7fe fcb0 	bl	800dcc8 <HAL_GetTick>
 800f368:	4602      	mov	r2, r0
 800f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d901      	bls.n	800f376 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f372:	2303      	movs	r3, #3
 800f374:	e2f5      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800f376:	f7ff fdbf 	bl	800eef8 <LL_RCC_MSI_IsReady>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d0f1      	beq.n	800f364 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff fdc8 	bl	800ef1a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a1b      	ldr	r3, [r3, #32]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fdec 	bl	800ef6c <LL_RCC_MSI_SetCalibTrimming>
 800f394:	e015      	b.n	800f3c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f396:	f7ff fda0 	bl	800eeda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f39a:	f7fe fc95 	bl	800dcc8 <HAL_GetTick>
 800f39e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f3a0:	e008      	b.n	800f3b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f3a2:	f7fe fc91 	bl	800dcc8 <HAL_GetTick>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d901      	bls.n	800f3b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	e2d6      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f3b4:	f7ff fda0 	bl	800eef8 <LL_RCC_MSI_IsReady>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1f1      	bne.n	800f3a2 <HAL_RCC_OscConfig+0x11a>
 800f3be:	e000      	b.n	800f3c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f3c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d047      	beq.n	800f45e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f3ce:	f7ff fdf6 	bl	800efbe <LL_RCC_GetSysClkSource>
 800f3d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f3d4:	f7ff feef 	bl	800f1b6 <LL_RCC_PLL_GetMainSource>
 800f3d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	2b08      	cmp	r3, #8
 800f3de:	d005      	beq.n	800f3ec <HAL_RCC_OscConfig+0x164>
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	2b0c      	cmp	r3, #12
 800f3e4:	d108      	bne.n	800f3f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	2b03      	cmp	r3, #3
 800f3ea:	d105      	bne.n	800f3f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d134      	bne.n	800f45e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e2b4      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f400:	d102      	bne.n	800f408 <HAL_RCC_OscConfig+0x180>
 800f402:	f7ff fbdd 	bl	800ebc0 <LL_RCC_HSE_Enable>
 800f406:	e001      	b.n	800f40c <HAL_RCC_OscConfig+0x184>
 800f408:	f7ff fbe9 	bl	800ebde <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d012      	beq.n	800f43a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f414:	f7fe fc58 	bl	800dcc8 <HAL_GetTick>
 800f418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f41a:	e008      	b.n	800f42e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f41c:	f7fe fc54 	bl	800dcc8 <HAL_GetTick>
 800f420:	4602      	mov	r2, r0
 800f422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	2b64      	cmp	r3, #100	@ 0x64
 800f428:	d901      	bls.n	800f42e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f42a:	2303      	movs	r3, #3
 800f42c:	e299      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f42e:	f7ff fbe5 	bl	800ebfc <LL_RCC_HSE_IsReady>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0f1      	beq.n	800f41c <HAL_RCC_OscConfig+0x194>
 800f438:	e011      	b.n	800f45e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f43a:	f7fe fc45 	bl	800dcc8 <HAL_GetTick>
 800f43e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f440:	e008      	b.n	800f454 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f442:	f7fe fc41 	bl	800dcc8 <HAL_GetTick>
 800f446:	4602      	mov	r2, r0
 800f448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	2b64      	cmp	r3, #100	@ 0x64
 800f44e:	d901      	bls.n	800f454 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800f450:	2303      	movs	r3, #3
 800f452:	e286      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f454:	f7ff fbd2 	bl	800ebfc <LL_RCC_HSE_IsReady>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1f1      	bne.n	800f442 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f003 0302 	and.w	r3, r3, #2
 800f466:	2b00      	cmp	r3, #0
 800f468:	d04c      	beq.n	800f504 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f46a:	f7ff fda8 	bl	800efbe <LL_RCC_GetSysClkSource>
 800f46e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f470:	f7ff fea1 	bl	800f1b6 <LL_RCC_PLL_GetMainSource>
 800f474:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	2b04      	cmp	r3, #4
 800f47a:	d005      	beq.n	800f488 <HAL_RCC_OscConfig+0x200>
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	2b0c      	cmp	r3, #12
 800f480:	d10e      	bne.n	800f4a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b02      	cmp	r3, #2
 800f486:	d10b      	bne.n	800f4a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	e266      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fbf1 	bl	800ec80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f49e:	e031      	b.n	800f504 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d019      	beq.n	800f4dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f4a8:	f7ff fbba 	bl	800ec20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4ac:	f7fe fc0c 	bl	800dcc8 <HAL_GetTick>
 800f4b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f4b2:	e008      	b.n	800f4c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f4b4:	f7fe fc08 	bl	800dcc8 <HAL_GetTick>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	d901      	bls.n	800f4c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e24d      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f4c6:	f7ff fbc9 	bl	800ec5c <LL_RCC_HSI_IsReady>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d0f1      	beq.n	800f4b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff fbd3 	bl	800ec80 <LL_RCC_HSI_SetCalibTrimming>
 800f4da:	e013      	b.n	800f504 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f4dc:	f7ff fbaf 	bl	800ec3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4e0:	f7fe fbf2 	bl	800dcc8 <HAL_GetTick>
 800f4e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f4e6:	e008      	b.n	800f4fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f4e8:	f7fe fbee 	bl	800dcc8 <HAL_GetTick>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	d901      	bls.n	800f4fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800f4f6:	2303      	movs	r3, #3
 800f4f8:	e233      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f4fa:	f7ff fbaf 	bl	800ec5c <LL_RCC_HSI_IsReady>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1f1      	bne.n	800f4e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f003 0308 	and.w	r3, r3, #8
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d106      	bne.n	800f51e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 80a3 	beq.w	800f664 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	695b      	ldr	r3, [r3, #20]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d076      	beq.n	800f614 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f003 0310 	and.w	r3, r3, #16
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d046      	beq.n	800f5c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800f532:	f7ff fc66 	bl	800ee02 <LL_RCC_LSI1_IsReady>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d113      	bne.n	800f564 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800f53c:	f7ff fc3f 	bl	800edbe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f540:	f7fe fbc2 	bl	800dcc8 <HAL_GetTick>
 800f544:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f546:	e008      	b.n	800f55a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f548:	f7fe fbbe 	bl	800dcc8 <HAL_GetTick>
 800f54c:	4602      	mov	r2, r0
 800f54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	2b02      	cmp	r3, #2
 800f554:	d901      	bls.n	800f55a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800f556:	2303      	movs	r3, #3
 800f558:	e203      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800f55a:	f7ff fc52 	bl	800ee02 <LL_RCC_LSI1_IsReady>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d0f1      	beq.n	800f548 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800f564:	f7ff fc5f 	bl	800ee26 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f568:	f7fe fbae 	bl	800dcc8 <HAL_GetTick>
 800f56c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f56e:	e008      	b.n	800f582 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f570:	f7fe fbaa 	bl	800dcc8 <HAL_GetTick>
 800f574:	4602      	mov	r2, r0
 800f576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	2b03      	cmp	r3, #3
 800f57c:	d901      	bls.n	800f582 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800f57e:	2303      	movs	r3, #3
 800f580:	e1ef      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800f582:	f7ff fc72 	bl	800ee6a <LL_RCC_LSI2_IsReady>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d0f1      	beq.n	800f570 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	699b      	ldr	r3, [r3, #24]
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff fc7c 	bl	800ee8e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800f596:	f7ff fc23 	bl	800ede0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f59a:	f7fe fb95 	bl	800dcc8 <HAL_GetTick>
 800f59e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f5a0:	e008      	b.n	800f5b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f5a2:	f7fe fb91 	bl	800dcc8 <HAL_GetTick>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d901      	bls.n	800f5b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e1d6      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800f5b4:	f7ff fc25 	bl	800ee02 <LL_RCC_LSI1_IsReady>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1f1      	bne.n	800f5a2 <HAL_RCC_OscConfig+0x31a>
 800f5be:	e051      	b.n	800f664 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800f5c0:	f7ff fbfd 	bl	800edbe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5c4:	f7fe fb80 	bl	800dcc8 <HAL_GetTick>
 800f5c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f5ca:	e00c      	b.n	800f5e6 <HAL_RCC_OscConfig+0x35e>
 800f5cc:	20000014 	.word	0x20000014
 800f5d0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f5d4:	f7fe fb78 	bl	800dcc8 <HAL_GetTick>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d901      	bls.n	800f5e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	e1bd      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800f5e6:	f7ff fc0c 	bl	800ee02 <LL_RCC_LSI1_IsReady>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d0f1      	beq.n	800f5d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800f5f0:	f7ff fc2a 	bl	800ee48 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f5f4:	e008      	b.n	800f608 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f5f6:	f7fe fb67 	bl	800dcc8 <HAL_GetTick>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	2b03      	cmp	r3, #3
 800f602:	d901      	bls.n	800f608 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800f604:	2303      	movs	r3, #3
 800f606:	e1ac      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800f608:	f7ff fc2f 	bl	800ee6a <LL_RCC_LSI2_IsReady>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1f1      	bne.n	800f5f6 <HAL_RCC_OscConfig+0x36e>
 800f612:	e027      	b.n	800f664 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800f614:	f7ff fc18 	bl	800ee48 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f618:	f7fe fb56 	bl	800dcc8 <HAL_GetTick>
 800f61c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f61e:	e008      	b.n	800f632 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800f620:	f7fe fb52 	bl	800dcc8 <HAL_GetTick>
 800f624:	4602      	mov	r2, r0
 800f626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	2b03      	cmp	r3, #3
 800f62c:	d901      	bls.n	800f632 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f62e:	2303      	movs	r3, #3
 800f630:	e197      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800f632:	f7ff fc1a 	bl	800ee6a <LL_RCC_LSI2_IsReady>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1f1      	bne.n	800f620 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800f63c:	f7ff fbd0 	bl	800ede0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f640:	f7fe fb42 	bl	800dcc8 <HAL_GetTick>
 800f644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f646:	e008      	b.n	800f65a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800f648:	f7fe fb3e 	bl	800dcc8 <HAL_GetTick>
 800f64c:	4602      	mov	r2, r0
 800f64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b02      	cmp	r3, #2
 800f654:	d901      	bls.n	800f65a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800f656:	2303      	movs	r3, #3
 800f658:	e183      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800f65a:	f7ff fbd2 	bl	800ee02 <LL_RCC_LSI1_IsReady>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d1f1      	bne.n	800f648 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d05b      	beq.n	800f728 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f670:	4ba7      	ldr	r3, [pc, #668]	@ (800f910 <HAL_RCC_OscConfig+0x688>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d114      	bne.n	800f6a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f67c:	f7ff fa70 	bl	800eb60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f680:	f7fe fb22 	bl	800dcc8 <HAL_GetTick>
 800f684:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f686:	e008      	b.n	800f69a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f688:	f7fe fb1e 	bl	800dcc8 <HAL_GetTick>
 800f68c:	4602      	mov	r2, r0
 800f68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	2b02      	cmp	r3, #2
 800f694:	d901      	bls.n	800f69a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800f696:	2303      	movs	r3, #3
 800f698:	e163      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f69a:	4b9d      	ldr	r3, [pc, #628]	@ (800f910 <HAL_RCC_OscConfig+0x688>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d0f0      	beq.n	800f688 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d102      	bne.n	800f6b4 <HAL_RCC_OscConfig+0x42c>
 800f6ae:	f7ff fb30 	bl	800ed12 <LL_RCC_LSE_Enable>
 800f6b2:	e00c      	b.n	800f6ce <HAL_RCC_OscConfig+0x446>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	2b05      	cmp	r3, #5
 800f6ba:	d104      	bne.n	800f6c6 <HAL_RCC_OscConfig+0x43e>
 800f6bc:	f7ff fb4b 	bl	800ed56 <LL_RCC_LSE_EnableBypass>
 800f6c0:	f7ff fb27 	bl	800ed12 <LL_RCC_LSE_Enable>
 800f6c4:	e003      	b.n	800f6ce <HAL_RCC_OscConfig+0x446>
 800f6c6:	f7ff fb35 	bl	800ed34 <LL_RCC_LSE_Disable>
 800f6ca:	f7ff fb55 	bl	800ed78 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d014      	beq.n	800f700 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6d6:	f7fe faf7 	bl	800dcc8 <HAL_GetTick>
 800f6da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f6dc:	e00a      	b.n	800f6f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6de:	f7fe faf3 	bl	800dcc8 <HAL_GetTick>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d901      	bls.n	800f6f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	e136      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f6f4:	f7ff fb51 	bl	800ed9a <LL_RCC_LSE_IsReady>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d0ef      	beq.n	800f6de <HAL_RCC_OscConfig+0x456>
 800f6fe:	e013      	b.n	800f728 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f700:	f7fe fae2 	bl	800dcc8 <HAL_GetTick>
 800f704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f706:	e00a      	b.n	800f71e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f708:	f7fe fade 	bl	800dcc8 <HAL_GetTick>
 800f70c:	4602      	mov	r2, r0
 800f70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f716:	4293      	cmp	r3, r2
 800f718:	d901      	bls.n	800f71e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800f71a:	2303      	movs	r3, #3
 800f71c:	e121      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f71e:	f7ff fb3c 	bl	800ed9a <LL_RCC_LSE_IsReady>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1ef      	bne.n	800f708 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f730:	2b00      	cmp	r3, #0
 800f732:	d02c      	beq.n	800f78e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d014      	beq.n	800f766 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f73c:	f7ff fab5 	bl	800ecaa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f740:	f7fe fac2 	bl	800dcc8 <HAL_GetTick>
 800f744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f746:	e008      	b.n	800f75a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f748:	f7fe fabe 	bl	800dcc8 <HAL_GetTick>
 800f74c:	4602      	mov	r2, r0
 800f74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	2b02      	cmp	r3, #2
 800f754:	d901      	bls.n	800f75a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800f756:	2303      	movs	r3, #3
 800f758:	e103      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800f75a:	f7ff fac8 	bl	800ecee <LL_RCC_HSI48_IsReady>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d0f1      	beq.n	800f748 <HAL_RCC_OscConfig+0x4c0>
 800f764:	e013      	b.n	800f78e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f766:	f7ff fab1 	bl	800eccc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f76a:	f7fe faad 	bl	800dcc8 <HAL_GetTick>
 800f76e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f770:	e008      	b.n	800f784 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f772:	f7fe faa9 	bl	800dcc8 <HAL_GetTick>
 800f776:	4602      	mov	r2, r0
 800f778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d901      	bls.n	800f784 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800f780:	2303      	movs	r3, #3
 800f782:	e0ee      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800f784:	f7ff fab3 	bl	800ecee <LL_RCC_HSI48_IsReady>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1f1      	bne.n	800f772 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 80e4 	beq.w	800f960 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f798:	f7ff fc11 	bl	800efbe <LL_RCC_GetSysClkSource>
 800f79c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800f79e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	f040 80b4 	bne.w	800f918 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f003 0203 	and.w	r2, r3, #3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d123      	bne.n	800f806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d11c      	bne.n	800f806 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	0a1b      	lsrs	r3, r3, #8
 800f7d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d114      	bne.n	800f806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d10d      	bne.n	800f806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d106      	bne.n	800f806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f802:	429a      	cmp	r2, r3
 800f804:	d05d      	beq.n	800f8c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	2b0c      	cmp	r3, #12
 800f80a:	d058      	beq.n	800f8be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	e0a1      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f81e:	f7ff fc84 	bl	800f12a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f822:	f7fe fa51 	bl	800dcc8 <HAL_GetTick>
 800f826:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f828:	e008      	b.n	800f83c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f82a:	f7fe fa4d 	bl	800dcc8 <HAL_GetTick>
 800f82e:	4602      	mov	r2, r0
 800f830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	2b02      	cmp	r3, #2
 800f836:	d901      	bls.n	800f83c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800f838:	2303      	movs	r3, #3
 800f83a:	e092      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f83c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1ef      	bne.n	800f82a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f84a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f84e:	68da      	ldr	r2, [r3, #12]
 800f850:	4b30      	ldr	r3, [pc, #192]	@ (800f914 <HAL_RCC_OscConfig+0x68c>)
 800f852:	4013      	ands	r3, r2
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f85c:	4311      	orrs	r1, r2
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f862:	0212      	lsls	r2, r2, #8
 800f864:	4311      	orrs	r1, r2
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f86a:	4311      	orrs	r1, r2
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800f870:	4311      	orrs	r1, r2
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f876:	430a      	orrs	r2, r1
 800f878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f87c:	4313      	orrs	r3, r2
 800f87e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f880:	f7ff fc44 	bl	800f10c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f88e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f894:	f7fe fa18 	bl	800dcc8 <HAL_GetTick>
 800f898:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f89a:	e008      	b.n	800f8ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f89c:	f7fe fa14 	bl	800dcc8 <HAL_GetTick>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d901      	bls.n	800f8ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e059      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f8ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d0ef      	beq.n	800f89c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f8bc:	e050      	b.n	800f960 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e04f      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d147      	bne.n	800f960 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f8d0:	f7ff fc1c 	bl	800f10c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f8d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f8e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f8e4:	f7fe f9f0 	bl	800dcc8 <HAL_GetTick>
 800f8e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f8ea:	e008      	b.n	800f8fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8ec:	f7fe f9ec 	bl	800dcc8 <HAL_GetTick>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f4:	1ad3      	subs	r3, r2, r3
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d901      	bls.n	800f8fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	e031      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f8fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d0ef      	beq.n	800f8ec <HAL_RCC_OscConfig+0x664>
 800f90c:	e028      	b.n	800f960 <HAL_RCC_OscConfig+0x6d8>
 800f90e:	bf00      	nop
 800f910:	58000400 	.word	0x58000400
 800f914:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	2b0c      	cmp	r3, #12
 800f91c:	d01e      	beq.n	800f95c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f91e:	f7ff fc04 	bl	800f12a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f922:	f7fe f9d1 	bl	800dcc8 <HAL_GetTick>
 800f926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f928:	e008      	b.n	800f93c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f92a:	f7fe f9cd 	bl	800dcc8 <HAL_GetTick>
 800f92e:	4602      	mov	r2, r0
 800f930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	2b02      	cmp	r3, #2
 800f936:	d901      	bls.n	800f93c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f938:	2303      	movs	r3, #3
 800f93a:	e012      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f93c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1ef      	bne.n	800f92a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f94a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f94e:	68da      	ldr	r2, [r3, #12]
 800f950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f954:	4b05      	ldr	r3, [pc, #20]	@ (800f96c <HAL_RCC_OscConfig+0x6e4>)
 800f956:	4013      	ands	r3, r2
 800f958:	60cb      	str	r3, [r1, #12]
 800f95a:	e001      	b.n	800f960 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f95c:	2301      	movs	r3, #1
 800f95e:	e000      	b.n	800f962 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3734      	adds	r7, #52	@ 0x34
 800f966:	46bd      	mov	sp, r7
 800f968:	bd90      	pop	{r4, r7, pc}
 800f96a:	bf00      	nop
 800f96c:	eefefffc 	.word	0xeefefffc

0800f970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d101      	bne.n	800f984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f980:	2301      	movs	r3, #1
 800f982:	e12d      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f984:	4b98      	ldr	r3, [pc, #608]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f003 0307 	and.w	r3, r3, #7
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d91b      	bls.n	800f9ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f992:	4b95      	ldr	r3, [pc, #596]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f023 0207 	bic.w	r2, r3, #7
 800f99a:	4993      	ldr	r1, [pc, #588]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9a2:	f7fe f991 	bl	800dcc8 <HAL_GetTick>
 800f9a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f9a8:	e008      	b.n	800f9bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f9aa:	f7fe f98d 	bl	800dcc8 <HAL_GetTick>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d901      	bls.n	800f9bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e111      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f9bc:	4b8a      	ldr	r3, [pc, #552]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f003 0307 	and.w	r3, r3, #7
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d1ef      	bne.n	800f9aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f003 0302 	and.w	r3, r3, #2
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d016      	beq.n	800fa04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff fafb 	bl	800efd6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f9e0:	f7fe f972 	bl	800dcc8 <HAL_GetTick>
 800f9e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f9e6:	e008      	b.n	800f9fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f9e8:	f7fe f96e 	bl	800dcc8 <HAL_GetTick>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d901      	bls.n	800f9fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f9f6:	2303      	movs	r3, #3
 800f9f8:	e0f2      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f9fa:	f7ff fbe8 	bl	800f1ce <LL_RCC_IsActiveFlag_HPRE>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d0f1      	beq.n	800f9e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f003 0320 	and.w	r3, r3, #32
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d016      	beq.n	800fa3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff faf2 	bl	800effe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fa1a:	f7fe f955 	bl	800dcc8 <HAL_GetTick>
 800fa1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800fa20:	e008      	b.n	800fa34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fa22:	f7fe f951 	bl	800dcc8 <HAL_GetTick>
 800fa26:	4602      	mov	r2, r0
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	d901      	bls.n	800fa34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800fa30:	2303      	movs	r3, #3
 800fa32:	e0d5      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800fa34:	f7ff fbdd 	bl	800f1f2 <LL_RCC_IsActiveFlag_C2HPRE>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0f1      	beq.n	800fa22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d016      	beq.n	800fa78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	699b      	ldr	r3, [r3, #24]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff faeb 	bl	800f02a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fa54:	f7fe f938 	bl	800dcc8 <HAL_GetTick>
 800fa58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fa5a:	e008      	b.n	800fa6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fa5c:	f7fe f934 	bl	800dcc8 <HAL_GetTick>
 800fa60:	4602      	mov	r2, r0
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d901      	bls.n	800fa6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800fa6a:	2303      	movs	r3, #3
 800fa6c:	e0b8      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fa6e:	f7ff fbd3 	bl	800f218 <LL_RCC_IsActiveFlag_SHDHPRE>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0f1      	beq.n	800fa5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 0304 	and.w	r3, r3, #4
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d016      	beq.n	800fab2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7ff fae5 	bl	800f058 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fa8e:	f7fe f91b 	bl	800dcc8 <HAL_GetTick>
 800fa92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fa94:	e008      	b.n	800faa8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fa96:	f7fe f917 	bl	800dcc8 <HAL_GetTick>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	1ad3      	subs	r3, r2, r3
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d901      	bls.n	800faa8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800faa4:	2303      	movs	r3, #3
 800faa6:	e09b      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800faa8:	f7ff fbc9 	bl	800f23e <LL_RCC_IsActiveFlag_PPRE1>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d0f1      	beq.n	800fa96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f003 0308 	and.w	r3, r3, #8
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d017      	beq.n	800faee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	00db      	lsls	r3, r3, #3
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fadb 	bl	800f080 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800faca:	f7fe f8fd 	bl	800dcc8 <HAL_GetTick>
 800face:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fad0:	e008      	b.n	800fae4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fad2:	f7fe f8f9 	bl	800dcc8 <HAL_GetTick>
 800fad6:	4602      	mov	r2, r0
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d901      	bls.n	800fae4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800fae0:	2303      	movs	r3, #3
 800fae2:	e07d      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fae4:	f7ff fbbd 	bl	800f262 <LL_RCC_IsActiveFlag_PPRE2>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d0f1      	beq.n	800fad2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d043      	beq.n	800fb82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d106      	bne.n	800fb10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800fb02:	f7ff f87b 	bl	800ebfc <LL_RCC_HSE_IsReady>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d11e      	bne.n	800fb4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	e067      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	2b03      	cmp	r3, #3
 800fb16:	d106      	bne.n	800fb26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800fb18:	f7ff fb16 	bl	800f148 <LL_RCC_PLL_IsReady>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d113      	bne.n	800fb4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	e05c      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d106      	bne.n	800fb3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800fb2e:	f7ff f9e3 	bl	800eef8 <LL_RCC_MSI_IsReady>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d108      	bne.n	800fb4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e051      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800fb3c:	f7ff f88e 	bl	800ec5c <LL_RCC_HSI_IsReady>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d101      	bne.n	800fb4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800fb46:	2301      	movs	r3, #1
 800fb48:	e04a      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff fa21 	bl	800ef96 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb54:	f7fe f8b8 	bl	800dcc8 <HAL_GetTick>
 800fb58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb5a:	e00a      	b.n	800fb72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb5c:	f7fe f8b4 	bl	800dcc8 <HAL_GetTick>
 800fb60:	4602      	mov	r2, r0
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d901      	bls.n	800fb72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e036      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb72:	f7ff fa24 	bl	800efbe <LL_RCC_GetSysClkSource>
 800fb76:	4602      	mov	r2, r0
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d1ec      	bne.n	800fb5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fb82:	4b19      	ldr	r3, [pc, #100]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 0307 	and.w	r3, r3, #7
 800fb8a:	683a      	ldr	r2, [r7, #0]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d21b      	bcs.n	800fbc8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb90:	4b15      	ldr	r3, [pc, #84]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f023 0207 	bic.w	r2, r3, #7
 800fb98:	4913      	ldr	r1, [pc, #76]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fba0:	f7fe f892 	bl	800dcc8 <HAL_GetTick>
 800fba4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fba6:	e008      	b.n	800fbba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fba8:	f7fe f88e 	bl	800dcc8 <HAL_GetTick>
 800fbac:	4602      	mov	r2, r0
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d901      	bls.n	800fbba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800fbb6:	2303      	movs	r3, #3
 800fbb8:	e012      	b.n	800fbe0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbba:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe8 <HAL_RCC_ClockConfig+0x278>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f003 0307 	and.w	r3, r3, #7
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d1ef      	bne.n	800fba8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fbc8:	f000 f87e 	bl	800fcc8 <HAL_RCC_GetHCLKFreq>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	4a07      	ldr	r2, [pc, #28]	@ (800fbec <HAL_RCC_ClockConfig+0x27c>)
 800fbd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800fbd2:	f7fe f885 	bl	800dce0 <HAL_GetTickPrio>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fe f827 	bl	800dc2c <HAL_InitTick>
 800fbde:	4603      	mov	r3, r0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	58004000 	.word	0x58004000
 800fbec:	20000014 	.word	0x20000014

0800fbf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fbf0:	b590      	push	{r4, r7, lr}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fbf6:	f7ff f9e2 	bl	800efbe <LL_RCC_GetSysClkSource>
 800fbfa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10a      	bne.n	800fc18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800fc02:	f7ff f99e 	bl	800ef42 <LL_RCC_MSI_GetRange>
 800fc06:	4603      	mov	r3, r0
 800fc08:	091b      	lsrs	r3, r3, #4
 800fc0a:	f003 030f 	and.w	r3, r3, #15
 800fc0e:	4a2b      	ldr	r2, [pc, #172]	@ (800fcbc <HAL_RCC_GetSysClockFreq+0xcc>)
 800fc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	e04b      	b.n	800fcb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2b04      	cmp	r3, #4
 800fc1c:	d102      	bne.n	800fc24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fc1e:	4b28      	ldr	r3, [pc, #160]	@ (800fcc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fc20:	60fb      	str	r3, [r7, #12]
 800fc22:	e045      	b.n	800fcb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b08      	cmp	r3, #8
 800fc28:	d10a      	bne.n	800fc40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fc2a:	f7fe ffb7 	bl	800eb9c <LL_RCC_HSE_IsEnabledDiv2>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d102      	bne.n	800fc3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800fc34:	4b22      	ldr	r3, [pc, #136]	@ (800fcc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	e03a      	b.n	800fcb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800fc3a:	4b22      	ldr	r3, [pc, #136]	@ (800fcc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e037      	b.n	800fcb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800fc40:	f7ff fab9 	bl	800f1b6 <LL_RCC_PLL_GetMainSource>
 800fc44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d003      	beq.n	800fc54 <HAL_RCC_GetSysClockFreq+0x64>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	d003      	beq.n	800fc5a <HAL_RCC_GetSysClockFreq+0x6a>
 800fc52:	e00d      	b.n	800fc70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800fc54:	4b1a      	ldr	r3, [pc, #104]	@ (800fcc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fc56:	60bb      	str	r3, [r7, #8]
        break;
 800fc58:	e015      	b.n	800fc86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fc5a:	f7fe ff9f 	bl	800eb9c <LL_RCC_HSE_IsEnabledDiv2>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d102      	bne.n	800fc6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800fc64:	4b16      	ldr	r3, [pc, #88]	@ (800fcc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800fc66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800fc68:	e00d      	b.n	800fc86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800fc6a:	4b16      	ldr	r3, [pc, #88]	@ (800fcc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800fc6c:	60bb      	str	r3, [r7, #8]
        break;
 800fc6e:	e00a      	b.n	800fc86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800fc70:	f7ff f967 	bl	800ef42 <LL_RCC_MSI_GetRange>
 800fc74:	4603      	mov	r3, r0
 800fc76:	091b      	lsrs	r3, r3, #4
 800fc78:	f003 030f 	and.w	r3, r3, #15
 800fc7c:	4a0f      	ldr	r2, [pc, #60]	@ (800fcbc <HAL_RCC_GetSysClockFreq+0xcc>)
 800fc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc82:	60bb      	str	r3, [r7, #8]
        break;
 800fc84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800fc86:	f7ff fa71 	bl	800f16c <LL_RCC_PLL_GetN>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	fb03 f402 	mul.w	r4, r3, r2
 800fc92:	f7ff fa84 	bl	800f19e <LL_RCC_PLL_GetDivider>
 800fc96:	4603      	mov	r3, r0
 800fc98:	091b      	lsrs	r3, r3, #4
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	fbb4 f4f3 	udiv	r4, r4, r3
 800fca0:	f7ff fa71 	bl	800f186 <LL_RCC_PLL_GetR>
 800fca4:	4603      	mov	r3, r0
 800fca6:	0f5b      	lsrs	r3, r3, #29
 800fca8:	3301      	adds	r3, #1
 800fcaa:	fbb4 f3f3 	udiv	r3, r4, r3
 800fcae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3714      	adds	r7, #20
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd90      	pop	{r4, r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	08019bf8 	.word	0x08019bf8
 800fcc0:	00f42400 	.word	0x00f42400
 800fcc4:	01e84800 	.word	0x01e84800

0800fcc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fcc8:	b598      	push	{r3, r4, r7, lr}
 800fcca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800fccc:	f7ff ff90 	bl	800fbf0 <HAL_RCC_GetSysClockFreq>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	f7ff f9e9 	bl	800f0a8 <LL_RCC_GetAHBPrescaler>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	091b      	lsrs	r3, r3, #4
 800fcda:	f003 030f 	and.w	r3, r3, #15
 800fcde:	4a03      	ldr	r2, [pc, #12]	@ (800fcec <HAL_RCC_GetHCLKFreq+0x24>)
 800fce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	bd98      	pop	{r3, r4, r7, pc}
 800fcec:	08019b98 	.word	0x08019b98

0800fcf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fcf0:	b598      	push	{r3, r4, r7, lr}
 800fcf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800fcf4:	f7ff ffe8 	bl	800fcc8 <HAL_RCC_GetHCLKFreq>
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	f7ff f9ef 	bl	800f0dc <LL_RCC_GetAPB1Prescaler>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	0a1b      	lsrs	r3, r3, #8
 800fd02:	f003 0307 	and.w	r3, r3, #7
 800fd06:	4a04      	ldr	r2, [pc, #16]	@ (800fd18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd0c:	f003 031f 	and.w	r3, r3, #31
 800fd10:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	bd98      	pop	{r3, r4, r7, pc}
 800fd18:	08019bd8 	.word	0x08019bd8

0800fd1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fd1c:	b598      	push	{r3, r4, r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800fd20:	f7ff ffd2 	bl	800fcc8 <HAL_RCC_GetHCLKFreq>
 800fd24:	4604      	mov	r4, r0
 800fd26:	f7ff f9e5 	bl	800f0f4 <LL_RCC_GetAPB2Prescaler>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	0adb      	lsrs	r3, r3, #11
 800fd2e:	f003 0307 	and.w	r3, r3, #7
 800fd32:	4a04      	ldr	r2, [pc, #16]	@ (800fd44 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd38:	f003 031f 	and.w	r3, r3, #31
 800fd3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	bd98      	pop	{r3, r4, r7, pc}
 800fd44:	08019bd8 	.word	0x08019bd8

0800fd48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800fd48:	b590      	push	{r4, r7, lr}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2bb0      	cmp	r3, #176	@ 0xb0
 800fd54:	d903      	bls.n	800fd5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800fd56:	4b15      	ldr	r3, [pc, #84]	@ (800fdac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800fd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	e007      	b.n	800fd6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	091b      	lsrs	r3, r3, #4
 800fd62:	f003 030f 	and.w	r3, r3, #15
 800fd66:	4a11      	ldr	r2, [pc, #68]	@ (800fdac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800fd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800fd6e:	f7ff f9a7 	bl	800f0c0 <LL_RCC_GetAHB4Prescaler>
 800fd72:	4603      	mov	r3, r0
 800fd74:	091b      	lsrs	r3, r3, #4
 800fd76:	f003 030f 	and.w	r3, r3, #15
 800fd7a:	4a0d      	ldr	r2, [pc, #52]	@ (800fdb0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800fd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	4a0a      	ldr	r2, [pc, #40]	@ (800fdb4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800fd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd90:	0c9c      	lsrs	r4, r3, #18
 800fd92:	f7fe fef5 	bl	800eb80 <HAL_PWREx_GetVoltageRange>
 800fd96:	4603      	mov	r3, r0
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 f80c 	bl	800fdb8 <RCC_SetFlashLatency>
 800fda0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3714      	adds	r7, #20
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd90      	pop	{r4, r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	08019bf8 	.word	0x08019bf8
 800fdb0:	08019b98 	.word	0x08019b98
 800fdb4:	431bde83 	.word	0x431bde83

0800fdb8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b093      	sub	sp, #76	@ 0x4c
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800fdc2:	4b37      	ldr	r3, [pc, #220]	@ (800fea0 <RCC_SetFlashLatency+0xe8>)
 800fdc4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800fdc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800fdce:	4a35      	ldr	r2, [pc, #212]	@ (800fea4 <RCC_SetFlashLatency+0xec>)
 800fdd0:	f107 031c 	add.w	r3, r7, #28
 800fdd4:	ca07      	ldmia	r2, {r0, r1, r2}
 800fdd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800fdda:	4b33      	ldr	r3, [pc, #204]	@ (800fea8 <RCC_SetFlashLatency+0xf0>)
 800fddc:	f107 040c 	add.w	r4, r7, #12
 800fde0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fde2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800fde6:	2300      	movs	r3, #0
 800fde8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fdf0:	d11a      	bne.n	800fe28 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fdf6:	e013      	b.n	800fe20 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800fdf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	3348      	adds	r3, #72	@ 0x48
 800fdfe:	443b      	add	r3, r7
 800fe00:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d807      	bhi.n	800fe1a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800fe0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	3348      	adds	r3, #72	@ 0x48
 800fe10:	443b      	add	r3, r7
 800fe12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fe16:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800fe18:	e020      	b.n	800fe5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800fe1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d9e8      	bls.n	800fdf8 <RCC_SetFlashLatency+0x40>
 800fe26:	e019      	b.n	800fe5c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800fe28:	2300      	movs	r3, #0
 800fe2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe2c:	e013      	b.n	800fe56 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800fe2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	3348      	adds	r3, #72	@ 0x48
 800fe34:	443b      	add	r3, r7
 800fe36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d807      	bhi.n	800fe50 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800fe40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	3348      	adds	r3, #72	@ 0x48
 800fe46:	443b      	add	r3, r7
 800fe48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fe4c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800fe4e:	e005      	b.n	800fe5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800fe50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe52:	3301      	adds	r3, #1
 800fe54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	d9e8      	bls.n	800fe2e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800fe5c:	4b13      	ldr	r3, [pc, #76]	@ (800feac <RCC_SetFlashLatency+0xf4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f023 0207 	bic.w	r2, r3, #7
 800fe64:	4911      	ldr	r1, [pc, #68]	@ (800feac <RCC_SetFlashLatency+0xf4>)
 800fe66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe6c:	f7fd ff2c 	bl	800dcc8 <HAL_GetTick>
 800fe70:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800fe72:	e008      	b.n	800fe86 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fe74:	f7fd ff28 	bl	800dcc8 <HAL_GetTick>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	2b02      	cmp	r3, #2
 800fe80:	d901      	bls.n	800fe86 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800fe82:	2303      	movs	r3, #3
 800fe84:	e007      	b.n	800fe96 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800fe86:	4b09      	ldr	r3, [pc, #36]	@ (800feac <RCC_SetFlashLatency+0xf4>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f003 0307 	and.w	r3, r3, #7
 800fe8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d1ef      	bne.n	800fe74 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	374c      	adds	r7, #76	@ 0x4c
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd90      	pop	{r4, r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	08019b60 	.word	0x08019b60
 800fea4:	08019b70 	.word	0x08019b70
 800fea8:	08019b7c 	.word	0x08019b7c
 800feac:	58004000 	.word	0x58004000

0800feb0 <LL_RCC_LSE_IsEnabled>:
{
 800feb0:	b480      	push	{r7}
 800feb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800feb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800feb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d101      	bne.n	800fec8 <LL_RCC_LSE_IsEnabled+0x18>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e000      	b.n	800feca <LL_RCC_LSE_IsEnabled+0x1a>
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <LL_RCC_LSE_IsReady>:
{
 800fed4:	b480      	push	{r7}
 800fed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800fed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fee0:	f003 0302 	and.w	r3, r3, #2
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d101      	bne.n	800feec <LL_RCC_LSE_IsReady+0x18>
 800fee8:	2301      	movs	r3, #1
 800feea:	e000      	b.n	800feee <LL_RCC_LSE_IsReady+0x1a>
 800feec:	2300      	movs	r3, #0
}
 800feee:	4618      	mov	r0, r3
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <LL_RCC_SetRFWKPClockSource>:
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ff00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ff08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ff0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <LL_RCC_SetSMPSClockSource>:
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ff2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff32:	f023 0203 	bic.w	r2, r3, #3
 800ff36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4313      	orrs	r3, r2
 800ff3e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <LL_RCC_SetSMPSPrescaler>:
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ff54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ff5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4313      	orrs	r3, r2
 800ff66:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ff68:	bf00      	nop
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <LL_RCC_SetUSARTClockSource>:
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ff7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff84:	f023 0203 	bic.w	r2, r3, #3
 800ff88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ff94:	bf00      	nop
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <LL_RCC_SetLPUARTClockSource>:
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ffa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ffb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <LL_RCC_SetI2CClockSource>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ffd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	091b      	lsrs	r3, r3, #4
 800ffe0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800ffe4:	43db      	mvns	r3, r3
 800ffe6:	401a      	ands	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	011b      	lsls	r3, r3, #4
 800ffec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800fff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fff4:	4313      	orrs	r3, r2
 800fff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800fffa:	bf00      	nop
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <LL_RCC_SetLPTIMClockSource>:
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801000e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010012:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	0c1b      	lsrs	r3, r3, #16
 801001a:	041b      	lsls	r3, r3, #16
 801001c:	43db      	mvns	r3, r3
 801001e:	401a      	ands	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	041b      	lsls	r3, r3, #16
 8010024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010028:	4313      	orrs	r3, r2
 801002a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801002e:	bf00      	nop
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <LL_RCC_SetSAIClockSource>:
{
 801003a:	b480      	push	{r7}
 801003c:	b083      	sub	sp, #12
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8010042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801004a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801004e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4313      	orrs	r3, r2
 8010056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801005a:	bf00      	nop
 801005c:	370c      	adds	r7, #12
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <LL_RCC_SetRNGClockSource>:
{
 8010066:	b480      	push	{r7}
 8010068:	b083      	sub	sp, #12
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801006e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010076:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 801007a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4313      	orrs	r3, r2
 8010082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010086:	bf00      	nop
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <LL_RCC_SetCLK48ClockSource>:
{
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801009a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801009e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80100a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80100b2:	bf00      	nop
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <LL_RCC_SetUSBClockSource>:
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b082      	sub	sp, #8
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7ff ffe3 	bl	8010092 <LL_RCC_SetCLK48ClockSource>
}
 80100cc:	bf00      	nop
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <LL_RCC_SetADCClockSource>:
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80100dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80100e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80100e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4313      	orrs	r3, r2
 80100f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80100f4:	bf00      	nop
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <LL_RCC_SetRTCClockSource>:
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801010c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4313      	orrs	r3, r2
 801011c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <LL_RCC_GetRTCClockSource>:
{
 801012c:	b480      	push	{r7}
 801012e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8010130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 801013c:	4618      	mov	r0, r3
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <LL_RCC_ForceBackupDomainReset>:
{
 8010146:	b480      	push	{r7}
 8010148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801014a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801014e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801015a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801015e:	bf00      	nop
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <LL_RCC_ReleaseBackupDomainReset>:
{
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801016c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801017c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8010180:	bf00      	nop
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <LL_RCC_PLLSAI1_Enable>:
{
 801018a:	b480      	push	{r7}
 801018c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801018e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801019c:	6013      	str	r3, [r2, #0]
}
 801019e:	bf00      	nop
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <LL_RCC_PLLSAI1_Disable>:
{
 80101a8:	b480      	push	{r7}
 80101aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80101ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80101b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80101ba:	6013      	str	r3, [r2, #0]
}
 80101bc:	bf00      	nop
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80101c6:	b480      	push	{r7}
 80101c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80101ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80101d8:	d101      	bne.n	80101de <LL_RCC_PLLSAI1_IsReady+0x18>
 80101da:	2301      	movs	r3, #1
 80101dc:	e000      	b.n	80101e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b088      	sub	sp, #32
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80101f2:	2300      	movs	r3, #0
 80101f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80101f6:	2300      	movs	r3, #0
 80101f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010202:	2b00      	cmp	r3, #0
 8010204:	d034      	beq.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801020a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801020e:	d021      	beq.n	8010254 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8010210:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010214:	d81b      	bhi.n	801024e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801021a:	d01d      	beq.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801021c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010220:	d815      	bhi.n	801024e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00b      	beq.n	801023e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8010226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801022a:	d110      	bne.n	801024e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801022c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801023a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801023c:	e00d      	b.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3304      	adds	r3, #4
 8010242:	4618      	mov	r0, r3
 8010244:	f000 f947 	bl	80104d6 <RCCEx_PLLSAI1_ConfigNP>
 8010248:	4603      	mov	r3, r0
 801024a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801024c:	e005      	b.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801024e:	2301      	movs	r3, #1
 8010250:	77fb      	strb	r3, [r7, #31]
        break;
 8010252:	e002      	b.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010254:	bf00      	nop
 8010256:	e000      	b.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010258:	bf00      	nop
    }

    if (ret == HAL_OK)
 801025a:	7ffb      	ldrb	r3, [r7, #31]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d105      	bne.n	801026c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff fee8 	bl	801003a <LL_RCC_SetSAIClockSource>
 801026a:	e001      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801026c:	7ffb      	ldrb	r3, [r7, #31]
 801026e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010278:	2b00      	cmp	r3, #0
 801027a:	d046      	beq.n	801030a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801027c:	f7ff ff56 	bl	801012c <LL_RCC_GetRTCClockSource>
 8010280:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010286:	69ba      	ldr	r2, [r7, #24]
 8010288:	429a      	cmp	r2, r3
 801028a:	d03c      	beq.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801028c:	f7fe fc68 	bl	800eb60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d105      	bne.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801029a:	4618      	mov	r0, r3
 801029c:	f7ff ff30 	bl	8010100 <LL_RCC_SetRTCClockSource>
 80102a0:	e02e      	b.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80102a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80102ac:	f7ff ff4b 	bl	8010146 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80102b0:	f7ff ff5a 	bl	8010168 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102be:	4313      	orrs	r3, r2
 80102c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80102c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80102cc:	f7ff fdf0 	bl	800feb0 <LL_RCC_LSE_IsEnabled>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d114      	bne.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80102d6:	f7fd fcf7 	bl	800dcc8 <HAL_GetTick>
 80102da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80102dc:	e00b      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80102de:	f7fd fcf3 	bl	800dcc8 <HAL_GetTick>
 80102e2:	4602      	mov	r2, r0
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d902      	bls.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	77fb      	strb	r3, [r7, #31]
              break;
 80102f4:	e004      	b.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80102f6:	f7ff fded 	bl	800fed4 <LL_RCC_LSE_IsReady>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d1ee      	bne.n	80102de <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8010300:	7ffb      	ldrb	r3, [r7, #31]
 8010302:	77bb      	strb	r3, [r7, #30]
 8010304:	e001      	b.n	801030a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010306:	7ffb      	ldrb	r3, [r7, #31]
 8010308:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d004      	beq.n	8010320 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fe2a 	bl	800ff74 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d004      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	4618      	mov	r0, r3
 8010332:	f7ff fe35 	bl	800ffa0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f003 0310 	and.w	r3, r3, #16
 801033e:	2b00      	cmp	r3, #0
 8010340:	d004      	beq.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff fe5d 	bl	8010006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 0320 	and.w	r3, r3, #32
 8010354:	2b00      	cmp	r3, #0
 8010356:	d004      	beq.n	8010362 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff fe52 	bl	8010006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f003 0304 	and.w	r3, r3, #4
 801036a:	2b00      	cmp	r3, #0
 801036c:	d004      	beq.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff fe2a 	bl	800ffcc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f003 0308 	and.w	r3, r3, #8
 8010380:	2b00      	cmp	r3, #0
 8010382:	d004      	beq.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff fe1f 	bl	800ffcc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010396:	2b00      	cmp	r3, #0
 8010398:	d022      	beq.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801039e:	4618      	mov	r0, r3
 80103a0:	f7ff fe8d 	bl	80100be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80103ac:	d107      	bne.n	80103be <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80103ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80103b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80103bc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80103c6:	d10b      	bne.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	3304      	adds	r3, #4
 80103cc:	4618      	mov	r0, r3
 80103ce:	f000 f8dd 	bl	801058c <RCCEx_PLLSAI1_ConfigNQ>
 80103d2:	4603      	mov	r3, r0
 80103d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80103d6:	7ffb      	ldrb	r3, [r7, #31]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d001      	beq.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80103dc:	7ffb      	ldrb	r3, [r7, #31]
 80103de:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d02b      	beq.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103f4:	d008      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80103fe:	d003      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010404:	2b00      	cmp	r3, #0
 8010406:	d105      	bne.n	8010414 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fe2a 	bl	8010066 <LL_RCC_SetRNGClockSource>
 8010412:	e00a      	b.n	801042a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801041c:	60fb      	str	r3, [r7, #12]
 801041e:	2000      	movs	r0, #0
 8010420:	f7ff fe21 	bl	8010066 <LL_RCC_SetRNGClockSource>
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7ff fe34 	bl	8010092 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801042e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010432:	d107      	bne.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801043e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801044c:	2b00      	cmp	r3, #0
 801044e:	d022      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010454:	4618      	mov	r0, r3
 8010456:	f7ff fe3d 	bl	80100d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010462:	d107      	bne.n	8010474 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801046e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010472:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801047c:	d10b      	bne.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	3304      	adds	r3, #4
 8010482:	4618      	mov	r0, r3
 8010484:	f000 f8dd 	bl	8010642 <RCCEx_PLLSAI1_ConfigNR>
 8010488:	4603      	mov	r3, r0
 801048a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801048c:	7ffb      	ldrb	r3, [r7, #31]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8010492:	7ffb      	ldrb	r3, [r7, #31]
 8010494:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d004      	beq.n	80104ac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff fd26 	bl	800fef8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d009      	beq.n	80104cc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff fd45 	bl	800ff4c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff fd2c 	bl	800ff24 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80104cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3720      	adds	r7, #32
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80104e2:	f7ff fe61 	bl	80101a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80104e6:	f7fd fbef 	bl	800dcc8 <HAL_GetTick>
 80104ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80104ec:	e009      	b.n	8010502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80104ee:	f7fd fbeb 	bl	800dcc8 <HAL_GetTick>
 80104f2:	4602      	mov	r2, r0
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d902      	bls.n	8010502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80104fc:	2303      	movs	r3, #3
 80104fe:	73fb      	strb	r3, [r7, #15]
      break;
 8010500:	e004      	b.n	801050c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010502:	f7ff fe60 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d1f0      	bne.n	80104ee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d137      	bne.n	8010582 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	021b      	lsls	r3, r3, #8
 8010522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010526:	4313      	orrs	r3, r2
 8010528:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801052a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801053c:	4313      	orrs	r3, r2
 801053e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010540:	f7ff fe23 	bl	801018a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010544:	f7fd fbc0 	bl	800dcc8 <HAL_GetTick>
 8010548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801054a:	e009      	b.n	8010560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801054c:	f7fd fbbc 	bl	800dcc8 <HAL_GetTick>
 8010550:	4602      	mov	r2, r0
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	2b02      	cmp	r3, #2
 8010558:	d902      	bls.n	8010560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801055a:	2303      	movs	r3, #3
 801055c:	73fb      	strb	r3, [r7, #15]
        break;
 801055e:	e004      	b.n	801056a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010560:	f7ff fe31 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 8010564:	4603      	mov	r3, r0
 8010566:	2b01      	cmp	r3, #1
 8010568:	d1f0      	bne.n	801054c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801056a:	7bfb      	ldrb	r3, [r7, #15]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d108      	bne.n	8010582 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010574:	691a      	ldr	r2, [r3, #16]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801057e:	4313      	orrs	r3, r2
 8010580:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010582:	7bfb      	ldrb	r3, [r7, #15]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010598:	f7ff fe06 	bl	80101a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801059c:	f7fd fb94 	bl	800dcc8 <HAL_GetTick>
 80105a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80105a2:	e009      	b.n	80105b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80105a4:	f7fd fb90 	bl	800dcc8 <HAL_GetTick>
 80105a8:	4602      	mov	r2, r0
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	2b02      	cmp	r3, #2
 80105b0:	d902      	bls.n	80105b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80105b2:	2303      	movs	r3, #3
 80105b4:	73fb      	strb	r3, [r7, #15]
      break;
 80105b6:	e004      	b.n	80105c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80105b8:	f7ff fe05 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1f0      	bne.n	80105a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d137      	bne.n	8010638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80105c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105cc:	691b      	ldr	r3, [r3, #16]
 80105ce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	021b      	lsls	r3, r3, #8
 80105d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80105dc:	4313      	orrs	r3, r2
 80105de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80105e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80105f2:	4313      	orrs	r3, r2
 80105f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80105f6:	f7ff fdc8 	bl	801018a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105fa:	f7fd fb65 	bl	800dcc8 <HAL_GetTick>
 80105fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010600:	e009      	b.n	8010616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010602:	f7fd fb61 	bl	800dcc8 <HAL_GetTick>
 8010606:	4602      	mov	r2, r0
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	2b02      	cmp	r3, #2
 801060e:	d902      	bls.n	8010616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8010610:	2303      	movs	r3, #3
 8010612:	73fb      	strb	r3, [r7, #15]
        break;
 8010614:	e004      	b.n	8010620 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010616:	f7ff fdd6 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 801061a:	4603      	mov	r3, r0
 801061c:	2b01      	cmp	r3, #1
 801061e:	d1f0      	bne.n	8010602 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8010620:	7bfb      	ldrb	r3, [r7, #15]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d108      	bne.n	8010638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801062a:	691a      	ldr	r2, [r3, #16]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010634:	4313      	orrs	r3, r2
 8010636:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010638:	7bfb      	ldrb	r3, [r7, #15]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801064a:	2300      	movs	r3, #0
 801064c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801064e:	f7ff fdab 	bl	80101a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010652:	f7fd fb39 	bl	800dcc8 <HAL_GetTick>
 8010656:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010658:	e009      	b.n	801066e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801065a:	f7fd fb35 	bl	800dcc8 <HAL_GetTick>
 801065e:	4602      	mov	r2, r0
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	1ad3      	subs	r3, r2, r3
 8010664:	2b02      	cmp	r3, #2
 8010666:	d902      	bls.n	801066e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8010668:	2303      	movs	r3, #3
 801066a:	73fb      	strb	r3, [r7, #15]
      break;
 801066c:	e004      	b.n	8010678 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801066e:	f7ff fdaa 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1f0      	bne.n	801065a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8010678:	7bfb      	ldrb	r3, [r7, #15]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d137      	bne.n	80106ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801067e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	021b      	lsls	r3, r3, #8
 801068e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010692:	4313      	orrs	r3, r2
 8010694:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8010696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80106a8:	4313      	orrs	r3, r2
 80106aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80106ac:	f7ff fd6d 	bl	801018a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80106b0:	f7fd fb0a 	bl	800dcc8 <HAL_GetTick>
 80106b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80106b6:	e009      	b.n	80106cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80106b8:	f7fd fb06 	bl	800dcc8 <HAL_GetTick>
 80106bc:	4602      	mov	r2, r0
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d902      	bls.n	80106cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80106c6:	2303      	movs	r3, #3
 80106c8:	73fb      	strb	r3, [r7, #15]
        break;
 80106ca:	e004      	b.n	80106d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80106cc:	f7ff fd7b 	bl	80101c6 <LL_RCC_PLLSAI1_IsReady>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d1f0      	bne.n	80106b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d108      	bne.n	80106ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80106dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80106e0:	691a      	ldr	r2, [r3, #16]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80106ea:	4313      	orrs	r3, r2
 80106ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d101      	bne.n	801070a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	e09f      	b.n	801084a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010710:	b2db      	uxtb	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7fa ff32 	bl	800b588 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2202      	movs	r2, #2
 8010728:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801072c:	4b49      	ldr	r3, [pc, #292]	@ (8010854 <HAL_RTC_Init+0x15c>)
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	f003 0310 	and.w	r3, r3, #16
 8010734:	2b10      	cmp	r3, #16
 8010736:	d07e      	beq.n	8010836 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	22ca      	movs	r2, #202	@ 0xca
 801073e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2253      	movs	r2, #83	@ 0x53
 8010746:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fac6 	bl	8010cda <RTC_EnterInitMode>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00a      	beq.n	801076a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	22ff      	movs	r2, #255	@ 0xff
 801075a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2204      	movs	r2, #4
 8010760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8010764:	2301      	movs	r3, #1
 8010766:	73fb      	strb	r3, [r7, #15]
 8010768:	e067      	b.n	801083a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	6812      	ldr	r2, [r2, #0]
 8010774:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801077c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6899      	ldr	r1, [r3, #8]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	685a      	ldr	r2, [r3, #4]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	691b      	ldr	r3, [r3, #16]
 801078c:	431a      	orrs	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	431a      	orrs	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	430a      	orrs	r2, r1
 801079a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	68d2      	ldr	r2, [r2, #12]
 80107a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	6919      	ldr	r1, [r3, #16]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	041a      	lsls	r2, r3, #16
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	430a      	orrs	r2, r1
 80107b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68da      	ldr	r2, [r3, #12]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80107c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f022 0203 	bic.w	r2, r2, #3
 80107d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	69da      	ldr	r2, [r3, #28]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	695b      	ldr	r3, [r3, #20]
 80107e8:	431a      	orrs	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	430a      	orrs	r2, r1
 80107f0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d113      	bne.n	8010828 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fa44 	bl	8010c8e <HAL_RTC_WaitForSynchro>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00d      	beq.n	8010828 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	22ff      	movs	r2, #255	@ 0xff
 8010812:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2204      	movs	r2, #4
 8010818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8010824:	2301      	movs	r3, #1
 8010826:	e010      	b.n	801084a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	22ff      	movs	r2, #255	@ 0xff
 801082e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
 8010834:	e001      	b.n	801083a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 801083a:	7bfb      	ldrb	r3, [r7, #15]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d103      	bne.n	8010848 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2201      	movs	r2, #1
 8010844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8010848:	7bfb      	ldrb	r3, [r7, #15]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	40002800 	.word	0x40002800

08010858 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010858:	b590      	push	{r4, r7, lr}
 801085a:	b087      	sub	sp, #28
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f893 3020 	ldrb.w	r3, [r3, #32]
 801086a:	2b01      	cmp	r3, #1
 801086c:	d101      	bne.n	8010872 <HAL_RTC_SetTime+0x1a>
 801086e:	2302      	movs	r3, #2
 8010870:	e0b2      	b.n	80109d8 <HAL_RTC_SetTime+0x180>
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2201      	movs	r2, #1
 8010876:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2202      	movs	r2, #2
 801087e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d126      	bne.n	80108d6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	689b      	ldr	r3, [r3, #8]
 801088e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2200      	movs	r2, #0
 801089a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 fa44 	bl	8010d2e <RTC_ByteToBcd2>
 80108a6:	4603      	mov	r3, r0
 80108a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	785b      	ldrb	r3, [r3, #1]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 fa3d 	bl	8010d2e <RTC_ByteToBcd2>
 80108b4:	4603      	mov	r3, r0
 80108b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80108b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	789b      	ldrb	r3, [r3, #2]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 fa35 	bl	8010d2e <RTC_ByteToBcd2>
 80108c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80108c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	78db      	ldrb	r3, [r3, #3]
 80108ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80108d0:	4313      	orrs	r3, r2
 80108d2:	617b      	str	r3, [r7, #20]
 80108d4:	e018      	b.n	8010908 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d102      	bne.n	80108ea <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	2200      	movs	r2, #0
 80108e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	785b      	ldrb	r3, [r3, #1]
 80108f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80108f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80108fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	78db      	ldrb	r3, [r3, #3]
 8010902:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010904:	4313      	orrs	r3, r2
 8010906:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	22ca      	movs	r2, #202	@ 0xca
 801090e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2253      	movs	r2, #83	@ 0x53
 8010916:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f000 f9de 	bl	8010cda <RTC_EnterInitMode>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d00d      	beq.n	8010940 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	22ff      	movs	r2, #255	@ 0xff
 801092a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2204      	movs	r2, #4
 8010930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801093c:	2301      	movs	r3, #1
 801093e:	e04b      	b.n	80109d8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801094a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801094e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	689a      	ldr	r2, [r3, #8]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801095e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6899      	ldr	r1, [r3, #8]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	68da      	ldr	r2, [r3, #12]
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	431a      	orrs	r2, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	430a      	orrs	r2, r1
 8010976:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68da      	ldr	r2, [r3, #12]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010986:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	f003 0320 	and.w	r3, r3, #32
 8010992:	2b00      	cmp	r3, #0
 8010994:	d113      	bne.n	80109be <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f000 f979 	bl	8010c8e <HAL_RTC_WaitForSynchro>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d00d      	beq.n	80109be <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	22ff      	movs	r2, #255	@ 0xff
 80109a8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2204      	movs	r2, #4
 80109ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80109ba:	2301      	movs	r3, #1
 80109bc:	e00c      	b.n	80109d8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	22ff      	movs	r2, #255	@ 0xff
 80109c4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2201      	movs	r2, #1
 80109ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80109d6:	2300      	movs	r3, #0
  }
}
 80109d8:	4618      	mov	r0, r3
 80109da:	371c      	adds	r7, #28
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}

080109e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010a0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010a12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	0c1b      	lsrs	r3, r3, #16
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a1e:	b2da      	uxtb	r2, r3
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	0a1b      	lsrs	r3, r3, #8
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a2e:	b2da      	uxtb	r2, r3
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	0c1b      	lsrs	r3, r3, #16
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d11a      	bne.n	8010a8e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 f986 	bl	8010d6e <RTC_Bcd2ToByte>
 8010a62:	4603      	mov	r3, r0
 8010a64:	461a      	mov	r2, r3
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	785b      	ldrb	r3, [r3, #1]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 f97d 	bl	8010d6e <RTC_Bcd2ToByte>
 8010a74:	4603      	mov	r3, r0
 8010a76:	461a      	mov	r2, r3
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	789b      	ldrb	r3, [r3, #2]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f000 f974 	bl	8010d6e <RTC_Bcd2ToByte>
 8010a86:	4603      	mov	r3, r0
 8010a88:	461a      	mov	r2, r3
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010a98:	b590      	push	{r4, r7, lr}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d101      	bne.n	8010ab2 <HAL_RTC_SetDate+0x1a>
 8010aae:	2302      	movs	r3, #2
 8010ab0:	e09c      	b.n	8010bec <HAL_RTC_SetDate+0x154>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2202      	movs	r2, #2
 8010abe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d10e      	bne.n	8010ae6 <HAL_RTC_SetDate+0x4e>
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	785b      	ldrb	r3, [r3, #1]
 8010acc:	f003 0310 	and.w	r3, r3, #16
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d008      	beq.n	8010ae6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	785b      	ldrb	r3, [r3, #1]
 8010ad8:	f023 0310 	bic.w	r3, r3, #16
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	330a      	adds	r3, #10
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d11c      	bne.n	8010b26 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	78db      	ldrb	r3, [r3, #3]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 f91c 	bl	8010d2e <RTC_ByteToBcd2>
 8010af6:	4603      	mov	r3, r0
 8010af8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	785b      	ldrb	r3, [r3, #1]
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 f915 	bl	8010d2e <RTC_ByteToBcd2>
 8010b04:	4603      	mov	r3, r0
 8010b06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010b08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	789b      	ldrb	r3, [r3, #2]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f000 f90d 	bl	8010d2e <RTC_ByteToBcd2>
 8010b14:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010b16:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010b20:	4313      	orrs	r3, r2
 8010b22:	617b      	str	r3, [r7, #20]
 8010b24:	e00e      	b.n	8010b44 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	78db      	ldrb	r3, [r3, #3]
 8010b2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	785b      	ldrb	r3, [r3, #1]
 8010b30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010b32:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8010b38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010b40:	4313      	orrs	r3, r2
 8010b42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	22ca      	movs	r2, #202	@ 0xca
 8010b4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2253      	movs	r2, #83	@ 0x53
 8010b52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f000 f8c0 	bl	8010cda <RTC_EnterInitMode>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00d      	beq.n	8010b7c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	22ff      	movs	r2, #255	@ 0xff
 8010b66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2204      	movs	r2, #4
 8010b6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e037      	b.n	8010bec <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010b86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010b8a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68da      	ldr	r2, [r3, #12]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010b9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	f003 0320 	and.w	r3, r3, #32
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d113      	bne.n	8010bd2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f000 f86f 	bl	8010c8e <HAL_RTC_WaitForSynchro>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00d      	beq.n	8010bd2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	22ff      	movs	r2, #255	@ 0xff
 8010bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2204      	movs	r2, #4
 8010bc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e00c      	b.n	8010bec <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	22ff      	movs	r2, #255	@ 0xff
 8010bd8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8010bea:	2300      	movs	r3, #0
  }
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	371c      	adds	r7, #28
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd90      	pop	{r4, r7, pc}

08010bf4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b086      	sub	sp, #24
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010c0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010c0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	0c1b      	lsrs	r3, r3, #16
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	0a1b      	lsrs	r3, r3, #8
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	f003 031f 	and.w	r3, r3, #31
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	0b5b      	lsrs	r3, r3, #13
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	f003 0307 	and.w	r3, r3, #7
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d11a      	bne.n	8010c84 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	78db      	ldrb	r3, [r3, #3]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 f88b 	bl	8010d6e <RTC_Bcd2ToByte>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	785b      	ldrb	r3, [r3, #1]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 f882 	bl	8010d6e <RTC_Bcd2ToByte>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	789b      	ldrb	r3, [r3, #2]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f000 f879 	bl	8010d6e <RTC_Bcd2ToByte>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	461a      	mov	r2, r3
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3718      	adds	r7, #24
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b084      	sub	sp, #16
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68da      	ldr	r2, [r3, #12]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8010ca4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8010ca6:	f7fd f80f 	bl	800dcc8 <HAL_GetTick>
 8010caa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010cac:	e009      	b.n	8010cc2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010cae:	f7fd f80b 	bl	800dcc8 <HAL_GetTick>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010cbc:	d901      	bls.n	8010cc2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	e007      	b.n	8010cd2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	f003 0320 	and.w	r3, r3, #32
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d0ee      	beq.n	8010cae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b084      	sub	sp, #16
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d119      	bne.n	8010d24 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010cfa:	f7fc ffe5 	bl	800dcc8 <HAL_GetTick>
 8010cfe:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010d00:	e009      	b.n	8010d16 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010d02:	f7fc ffe1 	bl	800dcc8 <HAL_GetTick>
 8010d06:	4602      	mov	r2, r0
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010d10:	d901      	bls.n	8010d16 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8010d12:	2303      	movs	r3, #3
 8010d14:	e007      	b.n	8010d26 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0ee      	beq.n	8010d02 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010d2e:	b480      	push	{r7}
 8010d30:	b085      	sub	sp, #20
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	4603      	mov	r3, r0
 8010d36:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8010d40:	e005      	b.n	8010d4e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3301      	adds	r3, #1
 8010d46:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8010d48:	7afb      	ldrb	r3, [r7, #11]
 8010d4a:	3b0a      	subs	r3, #10
 8010d4c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8010d4e:	7afb      	ldrb	r3, [r7, #11]
 8010d50:	2b09      	cmp	r3, #9
 8010d52:	d8f6      	bhi.n	8010d42 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	011b      	lsls	r3, r3, #4
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	b2db      	uxtb	r3, r3
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3714      	adds	r7, #20
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010d6e:	b480      	push	{r7}
 8010d70:	b085      	sub	sp, #20
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	4603      	mov	r3, r0
 8010d76:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8010d78:	79fb      	ldrb	r3, [r7, #7]
 8010d7a:	091b      	lsrs	r3, r3, #4
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	461a      	mov	r2, r3
 8010d80:	4613      	mov	r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	f003 030f 	and.w	r3, r3, #15
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	4413      	add	r3, r2
 8010d98:	b2db      	uxtb	r3, r3
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3714      	adds	r7, #20
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b087      	sub	sp, #28
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	60f8      	str	r0, [r7, #12]
 8010dae:	60b9      	str	r1, [r7, #8]
 8010db0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	3350      	adds	r3, #80	@ 0x50
 8010db8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	601a      	str	r2, [r3, #0]
}
 8010dca:	bf00      	nop
 8010dcc:	371c      	adds	r7, #28
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr

08010dd6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b084      	sub	sp, #16
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010de4:	2301      	movs	r3, #1
 8010de6:	e095      	b.n	8010f14 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d108      	bne.n	8010e02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010df8:	d009      	beq.n	8010e0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	61da      	str	r2, [r3, #28]
 8010e00:	e005      	b.n	8010e0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2200      	movs	r2, #0
 8010e12:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d106      	bne.n	8010e2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7fa fbd9 	bl	800b5e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2202      	movs	r2, #2
 8010e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010e44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010e4e:	d902      	bls.n	8010e56 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010e50:	2300      	movs	r3, #0
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	e002      	b.n	8010e5c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8010e64:	d007      	beq.n	8010e76 <HAL_SPI_Init+0xa0>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010e6e:	d002      	beq.n	8010e76 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8010e86:	431a      	orrs	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	691b      	ldr	r3, [r3, #16]
 8010e8c:	f003 0302 	and.w	r3, r3, #2
 8010e90:	431a      	orrs	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	695b      	ldr	r3, [r3, #20]
 8010e96:	f003 0301 	and.w	r3, r3, #1
 8010e9a:	431a      	orrs	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	699b      	ldr	r3, [r3, #24]
 8010ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ea4:	431a      	orrs	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010eae:	431a      	orrs	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6a1b      	ldr	r3, [r3, #32]
 8010eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010eb8:	ea42 0103 	orr.w	r1, r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	430a      	orrs	r2, r1
 8010eca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	699b      	ldr	r3, [r3, #24]
 8010ed0:	0c1b      	lsrs	r3, r3, #16
 8010ed2:	f003 0204 	and.w	r2, r3, #4
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eda:	f003 0310 	and.w	r3, r3, #16
 8010ede:	431a      	orrs	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ee4:	f003 0308 	and.w	r3, r3, #8
 8010ee8:	431a      	orrs	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8010ef2:	ea42 0103 	orr.w	r1, r2, r3
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	430a      	orrs	r2, r1
 8010f02:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b08a      	sub	sp, #40	@ 0x28
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d101      	bne.n	8010f42 <HAL_SPI_TransmitReceive+0x26>
 8010f3e:	2302      	movs	r3, #2
 8010f40:	e1fb      	b.n	801133a <HAL_SPI_TransmitReceive+0x41e>
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f4a:	f7fc febd 	bl	800dcc8 <HAL_GetTick>
 8010f4e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010f56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8010f5e:	887b      	ldrh	r3, [r7, #2]
 8010f60:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8010f62:	887b      	ldrh	r3, [r7, #2]
 8010f64:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010f66:	7efb      	ldrb	r3, [r7, #27]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d00e      	beq.n	8010f8a <HAL_SPI_TransmitReceive+0x6e>
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010f72:	d106      	bne.n	8010f82 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d102      	bne.n	8010f82 <HAL_SPI_TransmitReceive+0x66>
 8010f7c:	7efb      	ldrb	r3, [r7, #27]
 8010f7e:	2b04      	cmp	r3, #4
 8010f80:	d003      	beq.n	8010f8a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8010f82:	2302      	movs	r3, #2
 8010f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8010f88:	e1cd      	b.n	8011326 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d005      	beq.n	8010f9c <HAL_SPI_TransmitReceive+0x80>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <HAL_SPI_TransmitReceive+0x80>
 8010f96:	887b      	ldrh	r3, [r7, #2]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d103      	bne.n	8010fa4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8010fa2:	e1c0      	b.n	8011326 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	2b04      	cmp	r3, #4
 8010fae:	d003      	beq.n	8010fb8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2205      	movs	r2, #5
 8010fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	887a      	ldrh	r2, [r7, #2]
 8010fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	887a      	ldrh	r2, [r7, #2]
 8010fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	887a      	ldrh	r2, [r7, #2]
 8010fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	887a      	ldrh	r2, [r7, #2]
 8010fe4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010ffa:	d802      	bhi.n	8011002 <HAL_SPI_TransmitReceive+0xe6>
 8010ffc:	8a3b      	ldrh	r3, [r7, #16]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d908      	bls.n	8011014 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011010:	605a      	str	r2, [r3, #4]
 8011012:	e007      	b.n	8011024 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011022:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801102e:	2b40      	cmp	r3, #64	@ 0x40
 8011030:	d007      	beq.n	8011042 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801104a:	d97c      	bls.n	8011146 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <HAL_SPI_TransmitReceive+0x13e>
 8011054:	8a7b      	ldrh	r3, [r7, #18]
 8011056:	2b01      	cmp	r3, #1
 8011058:	d169      	bne.n	801112e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801105e:	881a      	ldrh	r2, [r3, #0]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801106a:	1c9a      	adds	r2, r3, #2
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011074:	b29b      	uxth	r3, r3
 8011076:	3b01      	subs	r3, #1
 8011078:	b29a      	uxth	r2, r3
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801107e:	e056      	b.n	801112e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	f003 0302 	and.w	r3, r3, #2
 801108a:	2b02      	cmp	r3, #2
 801108c:	d11b      	bne.n	80110c6 <HAL_SPI_TransmitReceive+0x1aa>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011092:	b29b      	uxth	r3, r3
 8011094:	2b00      	cmp	r3, #0
 8011096:	d016      	beq.n	80110c6 <HAL_SPI_TransmitReceive+0x1aa>
 8011098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109a:	2b01      	cmp	r3, #1
 801109c:	d113      	bne.n	80110c6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110a2:	881a      	ldrh	r2, [r3, #0]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ae:	1c9a      	adds	r2, r3, #2
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	3b01      	subs	r3, #1
 80110bc:	b29a      	uxth	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80110c2:	2300      	movs	r3, #0
 80110c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d11c      	bne.n	801110e <HAL_SPI_TransmitReceive+0x1f2>
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80110da:	b29b      	uxth	r3, r3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d016      	beq.n	801110e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110ea:	b292      	uxth	r2, r2
 80110ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110f2:	1c9a      	adds	r2, r3, #2
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80110fe:	b29b      	uxth	r3, r3
 8011100:	3b01      	subs	r3, #1
 8011102:	b29a      	uxth	r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801110a:	2301      	movs	r3, #1
 801110c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801110e:	f7fc fddb 	bl	800dcc8 <HAL_GetTick>
 8011112:	4602      	mov	r2, r0
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	1ad3      	subs	r3, r2, r3
 8011118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801111a:	429a      	cmp	r2, r3
 801111c:	d807      	bhi.n	801112e <HAL_SPI_TransmitReceive+0x212>
 801111e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011124:	d003      	beq.n	801112e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011126:	2303      	movs	r3, #3
 8011128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 801112c:	e0fb      	b.n	8011326 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011132:	b29b      	uxth	r3, r3
 8011134:	2b00      	cmp	r3, #0
 8011136:	d1a3      	bne.n	8011080 <HAL_SPI_TransmitReceive+0x164>
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801113e:	b29b      	uxth	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d19d      	bne.n	8011080 <HAL_SPI_TransmitReceive+0x164>
 8011144:	e0df      	b.n	8011306 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d003      	beq.n	8011156 <HAL_SPI_TransmitReceive+0x23a>
 801114e:	8a7b      	ldrh	r3, [r7, #18]
 8011150:	2b01      	cmp	r3, #1
 8011152:	f040 80cb 	bne.w	80112ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801115a:	b29b      	uxth	r3, r3
 801115c:	2b01      	cmp	r3, #1
 801115e:	d912      	bls.n	8011186 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011164:	881a      	ldrh	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011170:	1c9a      	adds	r2, r3, #2
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801117a:	b29b      	uxth	r3, r3
 801117c:	3b02      	subs	r3, #2
 801117e:	b29a      	uxth	r2, r3
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011184:	e0b2      	b.n	80112ec <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	330c      	adds	r3, #12
 8011190:	7812      	ldrb	r2, [r2, #0]
 8011192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011198:	1c5a      	adds	r2, r3, #1
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80111ac:	e09e      	b.n	80112ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	f003 0302 	and.w	r3, r3, #2
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d134      	bne.n	8011226 <HAL_SPI_TransmitReceive+0x30a>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d02f      	beq.n	8011226 <HAL_SPI_TransmitReceive+0x30a>
 80111c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d12c      	bne.n	8011226 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d912      	bls.n	80111fc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111da:	881a      	ldrh	r2, [r3, #0]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111e6:	1c9a      	adds	r2, r3, #2
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	3b02      	subs	r3, #2
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80111fa:	e012      	b.n	8011222 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	330c      	adds	r3, #12
 8011206:	7812      	ldrb	r2, [r2, #0]
 8011208:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011218:	b29b      	uxth	r3, r3
 801121a:	3b01      	subs	r3, #1
 801121c:	b29a      	uxth	r2, r3
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011222:	2300      	movs	r3, #0
 8011224:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b01      	cmp	r3, #1
 8011232:	d148      	bne.n	80112c6 <HAL_SPI_TransmitReceive+0x3aa>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801123a:	b29b      	uxth	r3, r3
 801123c:	2b00      	cmp	r3, #0
 801123e:	d042      	beq.n	80112c6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011246:	b29b      	uxth	r3, r3
 8011248:	2b01      	cmp	r3, #1
 801124a:	d923      	bls.n	8011294 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011256:	b292      	uxth	r2, r2
 8011258:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801125e:	1c9a      	adds	r2, r3, #2
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801126a:	b29b      	uxth	r3, r3
 801126c:	3b02      	subs	r3, #2
 801126e:	b29a      	uxth	r2, r3
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801127c:	b29b      	uxth	r3, r3
 801127e:	2b01      	cmp	r3, #1
 8011280:	d81f      	bhi.n	80112c2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	685a      	ldr	r2, [r3, #4]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011290:	605a      	str	r2, [r3, #4]
 8011292:	e016      	b.n	80112c2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f103 020c 	add.w	r2, r3, #12
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112a0:	7812      	ldrb	r2, [r2, #0]
 80112a2:	b2d2      	uxtb	r2, r2
 80112a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112aa:	1c5a      	adds	r2, r3, #1
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	3b01      	subs	r3, #1
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80112c2:	2301      	movs	r3, #1
 80112c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80112c6:	f7fc fcff 	bl	800dcc8 <HAL_GetTick>
 80112ca:	4602      	mov	r2, r0
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d803      	bhi.n	80112de <HAL_SPI_TransmitReceive+0x3c2>
 80112d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112dc:	d102      	bne.n	80112e4 <HAL_SPI_TransmitReceive+0x3c8>
 80112de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d103      	bne.n	80112ec <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80112e4:	2303      	movs	r3, #3
 80112e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80112ea:	e01c      	b.n	8011326 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f47f af5b 	bne.w	80111ae <HAL_SPI_TransmitReceive+0x292>
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80112fe:	b29b      	uxth	r3, r3
 8011300:	2b00      	cmp	r3, #0
 8011302:	f47f af54 	bne.w	80111ae <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011306:	69fa      	ldr	r2, [r7, #28]
 8011308:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f000 f938 	bl	8011580 <SPI_EndRxTxTransaction>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d006      	beq.n	8011324 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2220      	movs	r2, #32
 8011320:	661a      	str	r2, [r3, #96]	@ 0x60
 8011322:	e000      	b.n	8011326 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011324:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2201      	movs	r2, #1
 801132a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2200      	movs	r2, #0
 8011332:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8011336:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 801133a:	4618      	mov	r0, r3
 801133c:	3728      	adds	r7, #40	@ 0x28
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
	...

08011344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	603b      	str	r3, [r7, #0]
 8011350:	4613      	mov	r3, r2
 8011352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011354:	f7fc fcb8 	bl	800dcc8 <HAL_GetTick>
 8011358:	4602      	mov	r2, r0
 801135a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801135c:	1a9b      	subs	r3, r3, r2
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	4413      	add	r3, r2
 8011362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011364:	f7fc fcb0 	bl	800dcc8 <HAL_GetTick>
 8011368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801136a:	4b39      	ldr	r3, [pc, #228]	@ (8011450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	015b      	lsls	r3, r3, #5
 8011370:	0d1b      	lsrs	r3, r3, #20
 8011372:	69fa      	ldr	r2, [r7, #28]
 8011374:	fb02 f303 	mul.w	r3, r2, r3
 8011378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801137a:	e054      	b.n	8011426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011382:	d050      	beq.n	8011426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011384:	f7fc fca0 	bl	800dcc8 <HAL_GetTick>
 8011388:	4602      	mov	r2, r0
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	69fa      	ldr	r2, [r7, #28]
 8011390:	429a      	cmp	r2, r3
 8011392:	d902      	bls.n	801139a <SPI_WaitFlagStateUntilTimeout+0x56>
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d13d      	bne.n	8011416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	685a      	ldr	r2, [r3, #4]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80113a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80113b2:	d111      	bne.n	80113d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	689b      	ldr	r3, [r3, #8]
 80113b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80113bc:	d004      	beq.n	80113c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113c6:	d107      	bne.n	80113d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80113d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113e0:	d10f      	bne.n	8011402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2201      	movs	r2, #1
 8011406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011412:	2303      	movs	r3, #3
 8011414:	e017      	b.n	8011446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801141c:	2300      	movs	r3, #0
 801141e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	3b01      	subs	r3, #1
 8011424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	689a      	ldr	r2, [r3, #8]
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	4013      	ands	r3, r2
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	429a      	cmp	r2, r3
 8011434:	bf0c      	ite	eq
 8011436:	2301      	moveq	r3, #1
 8011438:	2300      	movne	r3, #0
 801143a:	b2db      	uxtb	r3, r3
 801143c:	461a      	mov	r2, r3
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	429a      	cmp	r2, r3
 8011442:	d19b      	bne.n	801137c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011444:	2300      	movs	r3, #0
}
 8011446:	4618      	mov	r0, r3
 8011448:	3720      	adds	r7, #32
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	20000014 	.word	0x20000014

08011454 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b08a      	sub	sp, #40	@ 0x28
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011462:	2300      	movs	r3, #0
 8011464:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011466:	f7fc fc2f 	bl	800dcc8 <HAL_GetTick>
 801146a:	4602      	mov	r2, r0
 801146c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146e:	1a9b      	subs	r3, r3, r2
 8011470:	683a      	ldr	r2, [r7, #0]
 8011472:	4413      	add	r3, r2
 8011474:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011476:	f7fc fc27 	bl	800dcc8 <HAL_GetTick>
 801147a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	330c      	adds	r3, #12
 8011482:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011484:	4b3d      	ldr	r3, [pc, #244]	@ (801157c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	00da      	lsls	r2, r3, #3
 8011490:	1ad3      	subs	r3, r2, r3
 8011492:	0d1b      	lsrs	r3, r3, #20
 8011494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011496:	fb02 f303 	mul.w	r3, r2, r3
 801149a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801149c:	e060      	b.n	8011560 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80114a4:	d107      	bne.n	80114b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d104      	bne.n	80114b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80114b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114bc:	d050      	beq.n	8011560 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80114be:	f7fc fc03 	bl	800dcc8 <HAL_GetTick>
 80114c2:	4602      	mov	r2, r0
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d902      	bls.n	80114d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80114ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d13d      	bne.n	8011550 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	685a      	ldr	r2, [r3, #4]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80114e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80114ec:	d111      	bne.n	8011512 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114f6:	d004      	beq.n	8011502 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011500:	d107      	bne.n	8011512 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011510:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801151a:	d10f      	bne.n	801153c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801152a:	601a      	str	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801153a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2201      	movs	r2, #1
 8011540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801154c:	2303      	movs	r3, #3
 801154e:	e010      	b.n	8011572 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d101      	bne.n	801155a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011556:	2300      	movs	r3, #0
 8011558:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	3b01      	subs	r3, #1
 801155e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689a      	ldr	r2, [r3, #8]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	4013      	ands	r3, r2
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	429a      	cmp	r2, r3
 801156e:	d196      	bne.n	801149e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3728      	adds	r7, #40	@ 0x28
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20000014 	.word	0x20000014

08011580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af02      	add	r7, sp, #8
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2200      	movs	r2, #0
 8011594:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f7ff ff5b 	bl	8011454 <SPI_WaitFifoStateUntilTimeout>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d007      	beq.n	80115b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80115a8:	f043 0220 	orr.w	r2, r3, #32
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80115b0:	2303      	movs	r3, #3
 80115b2:	e027      	b.n	8011604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2200      	movs	r2, #0
 80115bc:	2180      	movs	r1, #128	@ 0x80
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f7ff fec0 	bl	8011344 <SPI_WaitFlagStateUntilTimeout>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d007      	beq.n	80115da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80115ce:	f043 0220 	orr.w	r2, r3, #32
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80115d6:	2303      	movs	r3, #3
 80115d8:	e014      	b.n	8011604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f7ff ff34 	bl	8011454 <SPI_WaitFifoStateUntilTimeout>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d007      	beq.n	8011602 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80115f6:	f043 0220 	orr.w	r2, r3, #32
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	e000      	b.n	8011604 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	3710      	adds	r7, #16
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e054      	b.n	80116c8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011624:	b2db      	uxtb	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d111      	bne.n	801164e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 ff68 	bl	8012508 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801163c:	2b00      	cmp	r3, #0
 801163e:	d102      	bne.n	8011646 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4a23      	ldr	r2, [pc, #140]	@ (80116d0 <HAL_TIM_Base_Init+0xc4>)
 8011644:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2202      	movs	r2, #2
 8011652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3304      	adds	r3, #4
 801165e:	4619      	mov	r1, r3
 8011660:	4610      	mov	r0, r2
 8011662:	f000 fbd3 	bl	8011e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2201      	movs	r2, #1
 801166a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2201      	movs	r2, #1
 8011672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2201      	movs	r2, #1
 8011682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2201      	movs	r2, #1
 801168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2201      	movs	r2, #1
 801169a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2201      	movs	r2, #1
 80116a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2201      	movs	r2, #1
 80116aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2201      	movs	r2, #1
 80116b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2201      	movs	r2, #1
 80116ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80116c6:	2300      	movs	r3, #0
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	0800b6cd 	.word	0x0800b6cd

080116d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d001      	beq.n	80116ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	e036      	b.n	801175a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2202      	movs	r2, #2
 80116f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	68da      	ldr	r2, [r3, #12]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f042 0201 	orr.w	r2, r2, #1
 8011702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a17      	ldr	r2, [pc, #92]	@ (8011768 <HAL_TIM_Base_Start_IT+0x94>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d004      	beq.n	8011718 <HAL_TIM_Base_Start_IT+0x44>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011716:	d115      	bne.n	8011744 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	689a      	ldr	r2, [r3, #8]
 801171e:	4b13      	ldr	r3, [pc, #76]	@ (801176c <HAL_TIM_Base_Start_IT+0x98>)
 8011720:	4013      	ands	r3, r2
 8011722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b06      	cmp	r3, #6
 8011728:	d015      	beq.n	8011756 <HAL_TIM_Base_Start_IT+0x82>
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011730:	d011      	beq.n	8011756 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f042 0201 	orr.w	r2, r2, #1
 8011740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011742:	e008      	b.n	8011756 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f042 0201 	orr.w	r2, r2, #1
 8011752:	601a      	str	r2, [r3, #0]
 8011754:	e000      	b.n	8011758 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011758:	2300      	movs	r3, #0
}
 801175a:	4618      	mov	r0, r3
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	40012c00 	.word	0x40012c00
 801176c:	00010007 	.word	0x00010007

08011770 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d101      	bne.n	8011782 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	e054      	b.n	801182c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011788:	b2db      	uxtb	r3, r3
 801178a:	2b00      	cmp	r3, #0
 801178c:	d111      	bne.n	80117b2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 feb6 	bl	8012508 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a23      	ldr	r2, [pc, #140]	@ (8011834 <HAL_TIM_OC_Init+0xc4>)
 80117a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2202      	movs	r2, #2
 80117b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	3304      	adds	r3, #4
 80117c2:	4619      	mov	r1, r3
 80117c4:	4610      	mov	r0, r2
 80117c6:	f000 fb21 	bl	8011e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2201      	movs	r2, #1
 80117ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2201      	movs	r2, #1
 80117de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2201      	movs	r2, #1
 80117ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2201      	movs	r2, #1
 80117f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2201      	movs	r2, #1
 80117fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2201      	movs	r2, #1
 801180e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2201      	movs	r2, #1
 8011816:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2201      	movs	r2, #1
 801181e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2201      	movs	r2, #1
 8011826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801182a:	2300      	movs	r3, #0
}
 801182c:	4618      	mov	r0, r3
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	08011839 	.word	0x08011839

08011838 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011840:	bf00      	nop
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	f003 0302 	and.w	r3, r3, #2
 801185e:	2b02      	cmp	r3, #2
 8011860:	d128      	bne.n	80118b4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	f003 0302 	and.w	r3, r3, #2
 801186c:	2b02      	cmp	r3, #2
 801186e:	d121      	bne.n	80118b4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f06f 0202 	mvn.w	r2, #2
 8011878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2201      	movs	r2, #1
 801187e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	699b      	ldr	r3, [r3, #24]
 8011886:	f003 0303 	and.w	r3, r3, #3
 801188a:	2b00      	cmp	r3, #0
 801188c:	d005      	beq.n	801189a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	4798      	blx	r3
 8011898:	e009      	b.n	80118ae <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	f003 0304 	and.w	r3, r3, #4
 80118be:	2b04      	cmp	r3, #4
 80118c0:	d128      	bne.n	8011914 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	f003 0304 	and.w	r3, r3, #4
 80118cc:	2b04      	cmp	r3, #4
 80118ce:	d121      	bne.n	8011914 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f06f 0204 	mvn.w	r2, #4
 80118d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2202      	movs	r2, #2
 80118de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	699b      	ldr	r3, [r3, #24]
 80118e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d005      	beq.n	80118fa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	4798      	blx	r3
 80118f8:	e009      	b.n	801190e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	691b      	ldr	r3, [r3, #16]
 801191a:	f003 0308 	and.w	r3, r3, #8
 801191e:	2b08      	cmp	r3, #8
 8011920:	d128      	bne.n	8011974 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	f003 0308 	and.w	r3, r3, #8
 801192c:	2b08      	cmp	r3, #8
 801192e:	d121      	bne.n	8011974 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f06f 0208 	mvn.w	r2, #8
 8011938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2204      	movs	r2, #4
 801193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	f003 0303 	and.w	r3, r3, #3
 801194a:	2b00      	cmp	r3, #0
 801194c:	d005      	beq.n	801195a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	4798      	blx	r3
 8011958:	e009      	b.n	801196e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f003 0310 	and.w	r3, r3, #16
 801197e:	2b10      	cmp	r3, #16
 8011980:	d128      	bne.n	80119d4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	f003 0310 	and.w	r3, r3, #16
 801198c:	2b10      	cmp	r3, #16
 801198e:	d121      	bne.n	80119d4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f06f 0210 	mvn.w	r2, #16
 8011998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2208      	movs	r2, #8
 801199e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	69db      	ldr	r3, [r3, #28]
 80119a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d005      	beq.n	80119ba <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	4798      	blx	r3
 80119b8:	e009      	b.n	80119ce <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2200      	movs	r2, #0
 80119d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	f003 0301 	and.w	r3, r3, #1
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d110      	bne.n	8011a04 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d109      	bne.n	8011a04 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f06f 0201 	mvn.w	r2, #1
 80119f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	691b      	ldr	r3, [r3, #16]
 8011a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a0e:	2b80      	cmp	r3, #128	@ 0x80
 8011a10:	d110      	bne.n	8011a34 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a1c:	2b80      	cmp	r3, #128	@ 0x80
 8011a1e:	d109      	bne.n	8011a34 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a42:	d110      	bne.n	8011a66 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a4e:	2b80      	cmp	r3, #128	@ 0x80
 8011a50:	d109      	bne.n	8011a66 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	691b      	ldr	r3, [r3, #16]
 8011a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a70:	2b40      	cmp	r3, #64	@ 0x40
 8011a72:	d110      	bne.n	8011a96 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a7e:	2b40      	cmp	r3, #64	@ 0x40
 8011a80:	d109      	bne.n	8011a96 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	f003 0320 	and.w	r3, r3, #32
 8011aa0:	2b20      	cmp	r3, #32
 8011aa2:	d110      	bne.n	8011ac6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	f003 0320 	and.w	r3, r3, #32
 8011aae:	2b20      	cmp	r3, #32
 8011ab0:	d109      	bne.n	8011ac6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f06f 0220 	mvn.w	r2, #32
 8011aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ac6:	bf00      	nop
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
	...

08011ad0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b086      	sub	sp, #24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d101      	bne.n	8011aee <HAL_TIM_OC_ConfigChannel+0x1e>
 8011aea:	2302      	movs	r3, #2
 8011aec:	e066      	b.n	8011bbc <HAL_TIM_OC_ConfigChannel+0xec>
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2b14      	cmp	r3, #20
 8011afa:	d857      	bhi.n	8011bac <HAL_TIM_OC_ConfigChannel+0xdc>
 8011afc:	a201      	add	r2, pc, #4	@ (adr r2, 8011b04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8011afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b02:	bf00      	nop
 8011b04:	08011b59 	.word	0x08011b59
 8011b08:	08011bad 	.word	0x08011bad
 8011b0c:	08011bad 	.word	0x08011bad
 8011b10:	08011bad 	.word	0x08011bad
 8011b14:	08011b67 	.word	0x08011b67
 8011b18:	08011bad 	.word	0x08011bad
 8011b1c:	08011bad 	.word	0x08011bad
 8011b20:	08011bad 	.word	0x08011bad
 8011b24:	08011b75 	.word	0x08011b75
 8011b28:	08011bad 	.word	0x08011bad
 8011b2c:	08011bad 	.word	0x08011bad
 8011b30:	08011bad 	.word	0x08011bad
 8011b34:	08011b83 	.word	0x08011b83
 8011b38:	08011bad 	.word	0x08011bad
 8011b3c:	08011bad 	.word	0x08011bad
 8011b40:	08011bad 	.word	0x08011bad
 8011b44:	08011b91 	.word	0x08011b91
 8011b48:	08011bad 	.word	0x08011bad
 8011b4c:	08011bad 	.word	0x08011bad
 8011b50:	08011bad 	.word	0x08011bad
 8011b54:	08011b9f 	.word	0x08011b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	68b9      	ldr	r1, [r7, #8]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 f9b8 	bl	8011ed4 <TIM_OC1_SetConfig>
      break;
 8011b64:	e025      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	68b9      	ldr	r1, [r7, #8]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f000 fa2d 	bl	8011fcc <TIM_OC2_SetConfig>
      break;
 8011b72:	e01e      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 faa0 	bl	80120c0 <TIM_OC3_SetConfig>
      break;
 8011b80:	e017      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	68b9      	ldr	r1, [r7, #8]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 fb11 	bl	80121b0 <TIM_OC4_SetConfig>
      break;
 8011b8e:	e010      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	68b9      	ldr	r1, [r7, #8]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f000 fb68 	bl	801226c <TIM_OC5_SetConfig>
      break;
 8011b9c:	e009      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	68b9      	ldr	r1, [r7, #8]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 fbb9 	bl	801231c <TIM_OC6_SetConfig>
      break;
 8011baa:	e002      	b.n	8011bb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8011bac:	2301      	movs	r3, #1
 8011bae:	75fb      	strb	r3, [r7, #23]
      break;
 8011bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3718      	adds	r7, #24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d101      	bne.n	8011be0 <HAL_TIM_ConfigClockSource+0x1c>
 8011bdc:	2302      	movs	r3, #2
 8011bde:	e0b6      	b.n	8011d4e <HAL_TIM_ConfigClockSource+0x18a>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2202      	movs	r2, #2
 8011bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	689b      	ldr	r3, [r3, #8]
 8011bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8011bfe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8011c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011c1c:	d03e      	beq.n	8011c9c <HAL_TIM_ConfigClockSource+0xd8>
 8011c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011c22:	f200 8087 	bhi.w	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c2a:	f000 8086 	beq.w	8011d3a <HAL_TIM_ConfigClockSource+0x176>
 8011c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c32:	d87f      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c34:	2b70      	cmp	r3, #112	@ 0x70
 8011c36:	d01a      	beq.n	8011c6e <HAL_TIM_ConfigClockSource+0xaa>
 8011c38:	2b70      	cmp	r3, #112	@ 0x70
 8011c3a:	d87b      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c3c:	2b60      	cmp	r3, #96	@ 0x60
 8011c3e:	d050      	beq.n	8011ce2 <HAL_TIM_ConfigClockSource+0x11e>
 8011c40:	2b60      	cmp	r3, #96	@ 0x60
 8011c42:	d877      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c44:	2b50      	cmp	r3, #80	@ 0x50
 8011c46:	d03c      	beq.n	8011cc2 <HAL_TIM_ConfigClockSource+0xfe>
 8011c48:	2b50      	cmp	r3, #80	@ 0x50
 8011c4a:	d873      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c4c:	2b40      	cmp	r3, #64	@ 0x40
 8011c4e:	d058      	beq.n	8011d02 <HAL_TIM_ConfigClockSource+0x13e>
 8011c50:	2b40      	cmp	r3, #64	@ 0x40
 8011c52:	d86f      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c54:	2b30      	cmp	r3, #48	@ 0x30
 8011c56:	d064      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x15e>
 8011c58:	2b30      	cmp	r3, #48	@ 0x30
 8011c5a:	d86b      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c5c:	2b20      	cmp	r3, #32
 8011c5e:	d060      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x15e>
 8011c60:	2b20      	cmp	r3, #32
 8011c62:	d867      	bhi.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d05c      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x15e>
 8011c68:	2b10      	cmp	r3, #16
 8011c6a:	d05a      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x15e>
 8011c6c:	e062      	b.n	8011d34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011c7e:	f000 fc23 	bl	80124c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	609a      	str	r2, [r3, #8]
      break;
 8011c9a:	e04f      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011cac:	f000 fc0c 	bl	80124c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	689a      	ldr	r2, [r3, #8]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011cbe:	609a      	str	r2, [r3, #8]
      break;
 8011cc0:	e03c      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011cce:	461a      	mov	r2, r3
 8011cd0:	f000 fb7e 	bl	80123d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2150      	movs	r1, #80	@ 0x50
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f000 fbd7 	bl	801248e <TIM_ITRx_SetConfig>
      break;
 8011ce0:	e02c      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011cee:	461a      	mov	r2, r3
 8011cf0:	f000 fb9d 	bl	801242e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2160      	movs	r1, #96	@ 0x60
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f000 fbc7 	bl	801248e <TIM_ITRx_SetConfig>
      break;
 8011d00:	e01c      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d0e:	461a      	mov	r2, r3
 8011d10:	f000 fb5e 	bl	80123d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2140      	movs	r1, #64	@ 0x40
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f000 fbb7 	bl	801248e <TIM_ITRx_SetConfig>
      break;
 8011d20:	e00c      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	4610      	mov	r0, r2
 8011d2e:	f000 fbae 	bl	801248e <TIM_ITRx_SetConfig>
      break;
 8011d32:	e003      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8011d34:	2301      	movs	r3, #1
 8011d36:	73fb      	strb	r3, [r7, #15]
      break;
 8011d38:	e000      	b.n	8011d3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8011d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2201      	movs	r2, #1
 8011d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011d56:	b480      	push	{r7}
 8011d58:	b083      	sub	sp, #12
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8011d5e:	bf00      	nop
 8011d60:	370c      	adds	r7, #12
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011d6a:	b480      	push	{r7}
 8011d6c:	b083      	sub	sp, #12
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011d72:	bf00      	nop
 8011d74:	370c      	adds	r7, #12
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011d7e:	b480      	push	{r7}
 8011d80:	b083      	sub	sp, #12
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011d86:	bf00      	nop
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011d92:	b480      	push	{r7}
 8011d94:	b083      	sub	sp, #12
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8011d9a:	bf00      	nop
 8011d9c:	370c      	adds	r7, #12
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011da6:	b480      	push	{r7}
 8011da8:	b083      	sub	sp, #12
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011dae:	bf00      	nop
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr

08011dba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011dba:	b480      	push	{r7}
 8011dbc:	b083      	sub	sp, #12
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011dc2:	bf00      	nop
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011dce:	b480      	push	{r7}
 8011dd0:	b083      	sub	sp, #12
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011dd6:	bf00      	nop
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr

08011de2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011de2:	b480      	push	{r7}
 8011de4:	b083      	sub	sp, #12
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8011dea:	bf00      	nop
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011dfe:	bf00      	nop
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr
	...

08011e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8011ec8 <TIM_Base_SetConfig+0xbc>)
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d003      	beq.n	8011e2c <TIM_Base_SetConfig+0x20>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e2a:	d108      	bne.n	8011e3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	4313      	orrs	r3, r2
 8011e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4a21      	ldr	r2, [pc, #132]	@ (8011ec8 <TIM_Base_SetConfig+0xbc>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d00b      	beq.n	8011e5e <TIM_Base_SetConfig+0x52>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e4c:	d007      	beq.n	8011e5e <TIM_Base_SetConfig+0x52>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	4a1e      	ldr	r2, [pc, #120]	@ (8011ecc <TIM_Base_SetConfig+0xc0>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	d003      	beq.n	8011e5e <TIM_Base_SetConfig+0x52>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	4a1d      	ldr	r2, [pc, #116]	@ (8011ed0 <TIM_Base_SetConfig+0xc4>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d108      	bne.n	8011e70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	4313      	orrs	r3, r2
 8011e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	4313      	orrs	r3, r2
 8011e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	689a      	ldr	r2, [r3, #8]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a0c      	ldr	r2, [pc, #48]	@ (8011ec8 <TIM_Base_SetConfig+0xbc>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d007      	beq.n	8011eac <TIM_Base_SetConfig+0xa0>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8011ecc <TIM_Base_SetConfig+0xc0>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d003      	beq.n	8011eac <TIM_Base_SetConfig+0xa0>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8011ed0 <TIM_Base_SetConfig+0xc4>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d103      	bne.n	8011eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	691a      	ldr	r2, [r3, #16]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	615a      	str	r2, [r3, #20]
}
 8011eba:	bf00      	nop
 8011ebc:	3714      	adds	r7, #20
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	40012c00 	.word	0x40012c00
 8011ecc:	40014400 	.word	0x40014400
 8011ed0:	40014800 	.word	0x40014800

08011ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b087      	sub	sp, #28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a1b      	ldr	r3, [r3, #32]
 8011ee2:	f023 0201 	bic.w	r2, r3, #1
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6a1b      	ldr	r3, [r3, #32]
 8011eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	699b      	ldr	r3, [r3, #24]
 8011efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f023 0303 	bic.w	r3, r3, #3
 8011f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	4313      	orrs	r3, r2
 8011f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	f023 0302 	bic.w	r3, r3, #2
 8011f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	697a      	ldr	r2, [r7, #20]
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	4a24      	ldr	r2, [pc, #144]	@ (8011fc0 <TIM_OC1_SetConfig+0xec>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d007      	beq.n	8011f44 <TIM_OC1_SetConfig+0x70>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	4a23      	ldr	r2, [pc, #140]	@ (8011fc4 <TIM_OC1_SetConfig+0xf0>)
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	d003      	beq.n	8011f44 <TIM_OC1_SetConfig+0x70>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	4a22      	ldr	r2, [pc, #136]	@ (8011fc8 <TIM_OC1_SetConfig+0xf4>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d10c      	bne.n	8011f5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	f023 0308 	bic.w	r3, r3, #8
 8011f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	697a      	ldr	r2, [r7, #20]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	f023 0304 	bic.w	r3, r3, #4
 8011f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	4a17      	ldr	r2, [pc, #92]	@ (8011fc0 <TIM_OC1_SetConfig+0xec>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d007      	beq.n	8011f76 <TIM_OC1_SetConfig+0xa2>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	4a17      	ldr	r2, [pc, #92]	@ (8011fc8 <TIM_OC1_SetConfig+0xf4>)
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	d003      	beq.n	8011f76 <TIM_OC1_SetConfig+0xa2>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4a14      	ldr	r2, [pc, #80]	@ (8011fc4 <TIM_OC1_SetConfig+0xf0>)
 8011f72:	4293      	cmp	r3, r2
 8011f74:	d111      	bne.n	8011f9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	693a      	ldr	r2, [r7, #16]
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	699b      	ldr	r3, [r3, #24]
 8011f94:	693a      	ldr	r2, [r7, #16]
 8011f96:	4313      	orrs	r3, r2
 8011f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	693a      	ldr	r2, [r7, #16]
 8011f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	697a      	ldr	r2, [r7, #20]
 8011fb2:	621a      	str	r2, [r3, #32]
}
 8011fb4:	bf00      	nop
 8011fb6:	371c      	adds	r7, #28
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	40012c00 	.word	0x40012c00
 8011fc4:	40014800 	.word	0x40014800
 8011fc8:	40014400 	.word	0x40014400

08011fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b087      	sub	sp, #28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a1b      	ldr	r3, [r3, #32]
 8011fda:	f023 0210 	bic.w	r2, r3, #16
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	699b      	ldr	r3, [r3, #24]
 8011ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	021b      	lsls	r3, r3, #8
 801200e:	68fa      	ldr	r2, [r7, #12]
 8012010:	4313      	orrs	r3, r2
 8012012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	f023 0320 	bic.w	r3, r3, #32
 801201a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	011b      	lsls	r3, r3, #4
 8012022:	697a      	ldr	r2, [r7, #20]
 8012024:	4313      	orrs	r3, r2
 8012026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	4a22      	ldr	r2, [pc, #136]	@ (80120b4 <TIM_OC2_SetConfig+0xe8>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d10d      	bne.n	801204c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	011b      	lsls	r3, r3, #4
 801203e:	697a      	ldr	r2, [r7, #20]
 8012040:	4313      	orrs	r3, r2
 8012042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801204a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	4a19      	ldr	r2, [pc, #100]	@ (80120b4 <TIM_OC2_SetConfig+0xe8>)
 8012050:	4293      	cmp	r3, r2
 8012052:	d007      	beq.n	8012064 <TIM_OC2_SetConfig+0x98>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	4a18      	ldr	r2, [pc, #96]	@ (80120b8 <TIM_OC2_SetConfig+0xec>)
 8012058:	4293      	cmp	r3, r2
 801205a:	d003      	beq.n	8012064 <TIM_OC2_SetConfig+0x98>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	4a17      	ldr	r2, [pc, #92]	@ (80120bc <TIM_OC2_SetConfig+0xf0>)
 8012060:	4293      	cmp	r3, r2
 8012062:	d113      	bne.n	801208c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801206a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	695b      	ldr	r3, [r3, #20]
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	693a      	ldr	r2, [r7, #16]
 801207c:	4313      	orrs	r3, r2
 801207e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	699b      	ldr	r3, [r3, #24]
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	693a      	ldr	r2, [r7, #16]
 8012088:	4313      	orrs	r3, r2
 801208a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	693a      	ldr	r2, [r7, #16]
 8012090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	68fa      	ldr	r2, [r7, #12]
 8012096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	685a      	ldr	r2, [r3, #4]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	697a      	ldr	r2, [r7, #20]
 80120a4:	621a      	str	r2, [r3, #32]
}
 80120a6:	bf00      	nop
 80120a8:	371c      	adds	r7, #28
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	40012c00 	.word	0x40012c00
 80120b8:	40014400 	.word	0x40014400
 80120bc:	40014800 	.word	0x40014800

080120c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b087      	sub	sp, #28
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80120ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80120f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f023 0303 	bic.w	r3, r3, #3
 80120fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	4313      	orrs	r3, r2
 8012104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801210c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	021b      	lsls	r3, r3, #8
 8012114:	697a      	ldr	r2, [r7, #20]
 8012116:	4313      	orrs	r3, r2
 8012118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	4a21      	ldr	r2, [pc, #132]	@ (80121a4 <TIM_OC3_SetConfig+0xe4>)
 801211e:	4293      	cmp	r3, r2
 8012120:	d10d      	bne.n	801213e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	021b      	lsls	r3, r3, #8
 8012130:	697a      	ldr	r2, [r7, #20]
 8012132:	4313      	orrs	r3, r2
 8012134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801213c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4a18      	ldr	r2, [pc, #96]	@ (80121a4 <TIM_OC3_SetConfig+0xe4>)
 8012142:	4293      	cmp	r3, r2
 8012144:	d007      	beq.n	8012156 <TIM_OC3_SetConfig+0x96>
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4a17      	ldr	r2, [pc, #92]	@ (80121a8 <TIM_OC3_SetConfig+0xe8>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d003      	beq.n	8012156 <TIM_OC3_SetConfig+0x96>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	4a16      	ldr	r2, [pc, #88]	@ (80121ac <TIM_OC3_SetConfig+0xec>)
 8012152:	4293      	cmp	r3, r2
 8012154:	d113      	bne.n	801217e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801215c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	695b      	ldr	r3, [r3, #20]
 801216a:	011b      	lsls	r3, r3, #4
 801216c:	693a      	ldr	r2, [r7, #16]
 801216e:	4313      	orrs	r3, r2
 8012170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	011b      	lsls	r3, r3, #4
 8012178:	693a      	ldr	r2, [r7, #16]
 801217a:	4313      	orrs	r3, r2
 801217c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	693a      	ldr	r2, [r7, #16]
 8012182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	68fa      	ldr	r2, [r7, #12]
 8012188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	697a      	ldr	r2, [r7, #20]
 8012196:	621a      	str	r2, [r3, #32]
}
 8012198:	bf00      	nop
 801219a:	371c      	adds	r7, #28
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr
 80121a4:	40012c00 	.word	0x40012c00
 80121a8:	40014400 	.word	0x40014400
 80121ac:	40014800 	.word	0x40014800

080121b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b087      	sub	sp, #28
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6a1b      	ldr	r3, [r3, #32]
 80121be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	69db      	ldr	r3, [r3, #28]
 80121d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80121de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80121e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80121ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	021b      	lsls	r3, r3, #8
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	4313      	orrs	r3, r2
 80121f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80121fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	031b      	lsls	r3, r3, #12
 8012206:	693a      	ldr	r2, [r7, #16]
 8012208:	4313      	orrs	r3, r2
 801220a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	4a14      	ldr	r2, [pc, #80]	@ (8012260 <TIM_OC4_SetConfig+0xb0>)
 8012210:	4293      	cmp	r3, r2
 8012212:	d007      	beq.n	8012224 <TIM_OC4_SetConfig+0x74>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	4a13      	ldr	r2, [pc, #76]	@ (8012264 <TIM_OC4_SetConfig+0xb4>)
 8012218:	4293      	cmp	r3, r2
 801221a:	d003      	beq.n	8012224 <TIM_OC4_SetConfig+0x74>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	4a12      	ldr	r2, [pc, #72]	@ (8012268 <TIM_OC4_SetConfig+0xb8>)
 8012220:	4293      	cmp	r3, r2
 8012222:	d109      	bne.n	8012238 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801222a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	695b      	ldr	r3, [r3, #20]
 8012230:	019b      	lsls	r3, r3, #6
 8012232:	697a      	ldr	r2, [r7, #20]
 8012234:	4313      	orrs	r3, r2
 8012236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	697a      	ldr	r2, [r7, #20]
 801223c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	685a      	ldr	r2, [r3, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	693a      	ldr	r2, [r7, #16]
 8012250:	621a      	str	r2, [r3, #32]
}
 8012252:	bf00      	nop
 8012254:	371c      	adds	r7, #28
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	40012c00 	.word	0x40012c00
 8012264:	40014400 	.word	0x40014400
 8012268:	40014800 	.word	0x40014800

0801226c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801226c:	b480      	push	{r7}
 801226e:	b087      	sub	sp, #28
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6a1b      	ldr	r3, [r3, #32]
 801227a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6a1b      	ldr	r3, [r3, #32]
 8012286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801229a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80122b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	689b      	ldr	r3, [r3, #8]
 80122b6:	041b      	lsls	r3, r3, #16
 80122b8:	693a      	ldr	r2, [r7, #16]
 80122ba:	4313      	orrs	r3, r2
 80122bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a13      	ldr	r2, [pc, #76]	@ (8012310 <TIM_OC5_SetConfig+0xa4>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d007      	beq.n	80122d6 <TIM_OC5_SetConfig+0x6a>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a12      	ldr	r2, [pc, #72]	@ (8012314 <TIM_OC5_SetConfig+0xa8>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d003      	beq.n	80122d6 <TIM_OC5_SetConfig+0x6a>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a11      	ldr	r2, [pc, #68]	@ (8012318 <TIM_OC5_SetConfig+0xac>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d109      	bne.n	80122ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80122dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	695b      	ldr	r3, [r3, #20]
 80122e2:	021b      	lsls	r3, r3, #8
 80122e4:	697a      	ldr	r2, [r7, #20]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	697a      	ldr	r2, [r7, #20]
 80122ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	685a      	ldr	r2, [r3, #4]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	693a      	ldr	r2, [r7, #16]
 8012302:	621a      	str	r2, [r3, #32]
}
 8012304:	bf00      	nop
 8012306:	371c      	adds	r7, #28
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	40012c00 	.word	0x40012c00
 8012314:	40014400 	.word	0x40014400
 8012318:	40014800 	.word	0x40014800

0801231c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801231c:	b480      	push	{r7}
 801231e:	b087      	sub	sp, #28
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6a1b      	ldr	r3, [r3, #32]
 801232a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6a1b      	ldr	r3, [r3, #32]
 8012336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801234a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801234e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	021b      	lsls	r3, r3, #8
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	4313      	orrs	r3, r2
 801235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	051b      	lsls	r3, r3, #20
 801236a:	693a      	ldr	r2, [r7, #16]
 801236c:	4313      	orrs	r3, r2
 801236e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	4a14      	ldr	r2, [pc, #80]	@ (80123c4 <TIM_OC6_SetConfig+0xa8>)
 8012374:	4293      	cmp	r3, r2
 8012376:	d007      	beq.n	8012388 <TIM_OC6_SetConfig+0x6c>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	4a13      	ldr	r2, [pc, #76]	@ (80123c8 <TIM_OC6_SetConfig+0xac>)
 801237c:	4293      	cmp	r3, r2
 801237e:	d003      	beq.n	8012388 <TIM_OC6_SetConfig+0x6c>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4a12      	ldr	r2, [pc, #72]	@ (80123cc <TIM_OC6_SetConfig+0xb0>)
 8012384:	4293      	cmp	r3, r2
 8012386:	d109      	bne.n	801239c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801238e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	029b      	lsls	r3, r3, #10
 8012396:	697a      	ldr	r2, [r7, #20]
 8012398:	4313      	orrs	r3, r2
 801239a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	697a      	ldr	r2, [r7, #20]
 80123a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	693a      	ldr	r2, [r7, #16]
 80123b4:	621a      	str	r2, [r3, #32]
}
 80123b6:	bf00      	nop
 80123b8:	371c      	adds	r7, #28
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr
 80123c2:	bf00      	nop
 80123c4:	40012c00 	.word	0x40012c00
 80123c8:	40014400 	.word	0x40014400
 80123cc:	40014800 	.word	0x40014800

080123d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b087      	sub	sp, #28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	6a1b      	ldr	r3, [r3, #32]
 80123e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	6a1b      	ldr	r3, [r3, #32]
 80123e6:	f023 0201 	bic.w	r2, r3, #1
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	699b      	ldr	r3, [r3, #24]
 80123f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80123fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	011b      	lsls	r3, r3, #4
 8012400:	693a      	ldr	r2, [r7, #16]
 8012402:	4313      	orrs	r3, r2
 8012404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	f023 030a 	bic.w	r3, r3, #10
 801240c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	4313      	orrs	r3, r2
 8012414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	693a      	ldr	r2, [r7, #16]
 801241a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	697a      	ldr	r2, [r7, #20]
 8012420:	621a      	str	r2, [r3, #32]
}
 8012422:	bf00      	nop
 8012424:	371c      	adds	r7, #28
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801242e:	b480      	push	{r7}
 8012430:	b087      	sub	sp, #28
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	60b9      	str	r1, [r7, #8]
 8012438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6a1b      	ldr	r3, [r3, #32]
 801243e:	f023 0210 	bic.w	r2, r3, #16
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	699b      	ldr	r3, [r3, #24]
 801244a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6a1b      	ldr	r3, [r3, #32]
 8012450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	031b      	lsls	r3, r3, #12
 801245e:	697a      	ldr	r2, [r7, #20]
 8012460:	4313      	orrs	r3, r2
 8012462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801246a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	011b      	lsls	r3, r3, #4
 8012470:	693a      	ldr	r2, [r7, #16]
 8012472:	4313      	orrs	r3, r2
 8012474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	697a      	ldr	r2, [r7, #20]
 801247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	693a      	ldr	r2, [r7, #16]
 8012480:	621a      	str	r2, [r3, #32]
}
 8012482:	bf00      	nop
 8012484:	371c      	adds	r7, #28
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr

0801248e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801248e:	b480      	push	{r7}
 8012490:	b085      	sub	sp, #20
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80124a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80124a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80124aa:	683a      	ldr	r2, [r7, #0]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	4313      	orrs	r3, r2
 80124b0:	f043 0307 	orr.w	r3, r3, #7
 80124b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	609a      	str	r2, [r3, #8]
}
 80124bc:	bf00      	nop
 80124be:	3714      	adds	r7, #20
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr

080124c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b087      	sub	sp, #28
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
 80124d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80124e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	021a      	lsls	r2, r3, #8
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	431a      	orrs	r2, r3
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	697a      	ldr	r2, [r7, #20]
 80124f2:	4313      	orrs	r3, r2
 80124f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	697a      	ldr	r2, [r7, #20]
 80124fa:	609a      	str	r2, [r3, #8]
}
 80124fc:	bf00      	nop
 80124fe:	371c      	adds	r7, #28
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4a1e      	ldr	r2, [pc, #120]	@ (801258c <TIM_ResetCallback+0x84>)
 8012514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4a1d      	ldr	r2, [pc, #116]	@ (8012590 <TIM_ResetCallback+0x88>)
 801251c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4a1c      	ldr	r2, [pc, #112]	@ (8012594 <TIM_ResetCallback+0x8c>)
 8012524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4a1b      	ldr	r2, [pc, #108]	@ (8012598 <TIM_ResetCallback+0x90>)
 801252c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4a1a      	ldr	r2, [pc, #104]	@ (801259c <TIM_ResetCallback+0x94>)
 8012534:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4a19      	ldr	r2, [pc, #100]	@ (80125a0 <TIM_ResetCallback+0x98>)
 801253c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a18      	ldr	r2, [pc, #96]	@ (80125a4 <TIM_ResetCallback+0x9c>)
 8012544:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a17      	ldr	r2, [pc, #92]	@ (80125a8 <TIM_ResetCallback+0xa0>)
 801254c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4a16      	ldr	r2, [pc, #88]	@ (80125ac <TIM_ResetCallback+0xa4>)
 8012554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a15      	ldr	r2, [pc, #84]	@ (80125b0 <TIM_ResetCallback+0xa8>)
 801255c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a14      	ldr	r2, [pc, #80]	@ (80125b4 <TIM_ResetCallback+0xac>)
 8012564:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4a13      	ldr	r2, [pc, #76]	@ (80125b8 <TIM_ResetCallback+0xb0>)
 801256c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4a12      	ldr	r2, [pc, #72]	@ (80125bc <TIM_ResetCallback+0xb4>)
 8012574:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4a11      	ldr	r2, [pc, #68]	@ (80125c0 <TIM_ResetCallback+0xb8>)
 801257c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	08005bc1 	.word	0x08005bc1
 8012590:	08011d57 	.word	0x08011d57
 8012594:	08011dcf 	.word	0x08011dcf
 8012598:	08011de3 	.word	0x08011de3
 801259c:	08011d7f 	.word	0x08011d7f
 80125a0:	08011d93 	.word	0x08011d93
 80125a4:	08011d6b 	.word	0x08011d6b
 80125a8:	08011da7 	.word	0x08011da7
 80125ac:	08011dbb 	.word	0x08011dbb
 80125b0:	08011df7 	.word	0x08011df7
 80125b4:	080127a5 	.word	0x080127a5
 80125b8:	080127b9 	.word	0x080127b9
 80125bc:	080127cd 	.word	0x080127cd
 80125c0:	080127e1 	.word	0x080127e1

080125c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d101      	bne.n	80125dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80125d8:	2302      	movs	r3, #2
 80125da:	e04a      	b.n	8012672 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2201      	movs	r2, #1
 80125e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2202      	movs	r2, #2
 80125e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	689b      	ldr	r3, [r3, #8]
 80125fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a1f      	ldr	r2, [pc, #124]	@ (8012680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d108      	bne.n	8012618 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801260c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	4313      	orrs	r3, r2
 8012616:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801261e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	68fa      	ldr	r2, [r7, #12]
 8012626:	4313      	orrs	r3, r2
 8012628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68fa      	ldr	r2, [r7, #12]
 8012630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4a12      	ldr	r2, [pc, #72]	@ (8012680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d004      	beq.n	8012646 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012644:	d10c      	bne.n	8012660 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801264c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	68ba      	ldr	r2, [r7, #8]
 8012654:	4313      	orrs	r3, r2
 8012656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	68ba      	ldr	r2, [r7, #8]
 801265e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2201      	movs	r2, #1
 8012664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3714      	adds	r7, #20
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	40012c00 	.word	0x40012c00

08012684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012684:	b480      	push	{r7}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801268e:	2300      	movs	r3, #0
 8012690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012698:	2b01      	cmp	r3, #1
 801269a:	d101      	bne.n	80126a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801269c:	2302      	movs	r3, #2
 801269e:	e078      	b.n	8012792 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2201      	movs	r2, #1
 80126a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	4313      	orrs	r3, r2
 80126b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	4313      	orrs	r3, r2
 80126c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	4313      	orrs	r3, r2
 80126d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	4313      	orrs	r3, r2
 80126de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	691b      	ldr	r3, [r3, #16]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012706:	4313      	orrs	r3, r2
 8012708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	041b      	lsls	r3, r3, #16
 8012716:	4313      	orrs	r3, r2
 8012718:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4a20      	ldr	r2, [pc, #128]	@ (80127a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d106      	bne.n	8012732 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	69db      	ldr	r3, [r3, #28]
 801272e:	4313      	orrs	r3, r2
 8012730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a1a      	ldr	r2, [pc, #104]	@ (80127a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d121      	bne.n	8012780 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012746:	051b      	lsls	r3, r3, #20
 8012748:	4313      	orrs	r3, r2
 801274a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	6a1b      	ldr	r3, [r3, #32]
 8012756:	4313      	orrs	r3, r2
 8012758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012764:	4313      	orrs	r3, r2
 8012766:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4a0c      	ldr	r2, [pc, #48]	@ (80127a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d106      	bne.n	8012780 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801277c:	4313      	orrs	r3, r2
 801277e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012790:	2300      	movs	r3, #0
}
 8012792:	4618      	mov	r0, r3
 8012794:	3714      	adds	r7, #20
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	40012c00 	.word	0x40012c00

080127a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80127ac:	bf00      	nop
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80127d4:	bf00      	nop
 80127d6:	370c      	adds	r7, #12
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr

080127e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80127e8:	bf00      	nop
 80127ea:	370c      	adds	r7, #12
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <LL_RCC_GetUSARTClockSource>:
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80127fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012800:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4013      	ands	r3, r2
}
 8012808:	4618      	mov	r0, r3
 801280a:	370c      	adds	r7, #12
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr

08012814 <LL_RCC_GetLPUARTClockSource>:
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801281c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012820:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4013      	ands	r3, r2
}
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012842:	2301      	movs	r3, #1
 8012844:	e042      	b.n	80128cc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801284c:	2b00      	cmp	r3, #0
 801284e:	d106      	bne.n	801285e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7f8 fe07 	bl	800b46c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2224      	movs	r2, #36	@ 0x24
 8012862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f022 0201 	bic.w	r2, r2, #1
 8012874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fbfe 	bl	8013078 <UART_SetConfig>
 801287c:	4603      	mov	r3, r0
 801287e:	2b01      	cmp	r3, #1
 8012880:	d101      	bne.n	8012886 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012882:	2301      	movs	r3, #1
 8012884:	e022      	b.n	80128cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f000 fe1a 	bl	80134c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	685a      	ldr	r2, [r3, #4]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80128a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	689a      	ldr	r2, [r3, #8]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80128b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f042 0201 	orr.w	r2, r2, #1
 80128c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fea1 	bl	801360c <UART_CheckIdleState>
 80128ca:	4603      	mov	r3, r0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b08a      	sub	sp, #40	@ 0x28
 80128d8:	af02      	add	r7, sp, #8
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	603b      	str	r3, [r7, #0]
 80128e0:	4613      	mov	r3, r2
 80128e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80128ea:	2b20      	cmp	r3, #32
 80128ec:	d17b      	bne.n	80129e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <HAL_UART_Transmit+0x26>
 80128f4:	88fb      	ldrh	r3, [r7, #6]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e074      	b.n	80129e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2200      	movs	r2, #0
 8012902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2221      	movs	r2, #33	@ 0x21
 801290a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801290e:	f7fb f9db 	bl	800dcc8 <HAL_GetTick>
 8012912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	88fa      	ldrh	r2, [r7, #6]
 8012918:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	88fa      	ldrh	r2, [r7, #6]
 8012920:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	689b      	ldr	r3, [r3, #8]
 8012928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801292c:	d108      	bne.n	8012940 <HAL_UART_Transmit+0x6c>
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	691b      	ldr	r3, [r3, #16]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d104      	bne.n	8012940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012936:	2300      	movs	r3, #0
 8012938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	61bb      	str	r3, [r7, #24]
 801293e:	e003      	b.n	8012948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012944:	2300      	movs	r3, #0
 8012946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012948:	e030      	b.n	80129ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	2200      	movs	r2, #0
 8012952:	2180      	movs	r1, #128	@ 0x80
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f000 ff03 	bl	8013760 <UART_WaitOnFlagUntilTimeout>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2220      	movs	r2, #32
 8012964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012968:	2303      	movs	r3, #3
 801296a:	e03d      	b.n	80129e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d10b      	bne.n	801298a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	461a      	mov	r2, r3
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012980:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	3302      	adds	r3, #2
 8012986:	61bb      	str	r3, [r7, #24]
 8012988:	e007      	b.n	801299a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	781a      	ldrb	r2, [r3, #0]
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	3301      	adds	r3, #1
 8012998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	3b01      	subs	r3, #1
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1c8      	bne.n	801294a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	2200      	movs	r2, #0
 80129c0:	2140      	movs	r1, #64	@ 0x40
 80129c2:	68f8      	ldr	r0, [r7, #12]
 80129c4:	f000 fecc 	bl	8013760 <UART_WaitOnFlagUntilTimeout>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d005      	beq.n	80129da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2220      	movs	r2, #32
 80129d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80129d6:	2303      	movs	r3, #3
 80129d8:	e006      	b.n	80129e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2220      	movs	r2, #32
 80129de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80129e2:	2300      	movs	r3, #0
 80129e4:	e000      	b.n	80129e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80129e6:	2302      	movs	r3, #2
  }
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3720      	adds	r7, #32
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b0ba      	sub	sp, #232	@ 0xe8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	69db      	ldr	r3, [r3, #28]
 80129fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012a1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8012a1e:	4013      	ands	r3, r2
 8012a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d11b      	bne.n	8012a64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a30:	f003 0320 	and.w	r3, r3, #32
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d015      	beq.n	8012a64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a3c:	f003 0320 	and.w	r3, r3, #32
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d105      	bne.n	8012a50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d009      	beq.n	8012a64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f000 82e3 	beq.w	8013020 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	4798      	blx	r3
      }
      return;
 8012a62:	e2dd      	b.n	8013020 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f000 8123 	beq.w	8012cb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012a6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012a72:	4b8d      	ldr	r3, [pc, #564]	@ (8012ca8 <HAL_UART_IRQHandler+0x2b8>)
 8012a74:	4013      	ands	r3, r2
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d106      	bne.n	8012a88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8012cac <HAL_UART_IRQHandler+0x2bc>)
 8012a80:	4013      	ands	r3, r2
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 8116 	beq.w	8012cb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d011      	beq.n	8012ab8 <HAL_UART_IRQHandler+0xc8>
 8012a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00b      	beq.n	8012ab8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aae:	f043 0201 	orr.w	r2, r3, #1
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012abc:	f003 0302 	and.w	r3, r3, #2
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d011      	beq.n	8012ae8 <HAL_UART_IRQHandler+0xf8>
 8012ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012ac8:	f003 0301 	and.w	r3, r3, #1
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d00b      	beq.n	8012ae8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2202      	movs	r2, #2
 8012ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ade:	f043 0204 	orr.w	r2, r3, #4
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012aec:	f003 0304 	and.w	r3, r3, #4
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d011      	beq.n	8012b18 <HAL_UART_IRQHandler+0x128>
 8012af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012af8:	f003 0301 	and.w	r3, r3, #1
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d00b      	beq.n	8012b18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2204      	movs	r2, #4
 8012b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b0e:	f043 0202 	orr.w	r2, r3, #2
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b1c:	f003 0308 	and.w	r3, r3, #8
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d017      	beq.n	8012b54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b28:	f003 0320 	and.w	r3, r3, #32
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d105      	bne.n	8012b3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012b30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012b34:	4b5c      	ldr	r3, [pc, #368]	@ (8012ca8 <HAL_UART_IRQHandler+0x2b8>)
 8012b36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00b      	beq.n	8012b54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2208      	movs	r2, #8
 8012b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b4a:	f043 0208 	orr.w	r2, r3, #8
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d012      	beq.n	8012b86 <HAL_UART_IRQHandler+0x196>
 8012b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00c      	beq.n	8012b86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b7c:	f043 0220 	orr.w	r2, r3, #32
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	f000 8249 	beq.w	8013024 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b96:	f003 0320 	and.w	r3, r3, #32
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d013      	beq.n	8012bc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ba2:	f003 0320 	and.w	r3, r3, #32
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d105      	bne.n	8012bb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d007      	beq.n	8012bc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d003      	beq.n	8012bc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	689b      	ldr	r3, [r3, #8]
 8012bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bda:	2b40      	cmp	r3, #64	@ 0x40
 8012bdc:	d005      	beq.n	8012bea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d054      	beq.n	8012c94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f000 fe1f 	bl	801382e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bfa:	2b40      	cmp	r3, #64	@ 0x40
 8012bfc:	d146      	bne.n	8012c8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	3308      	adds	r3, #8
 8012c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012c0c:	e853 3f00 	ldrex	r3, [r3]
 8012c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3308      	adds	r3, #8
 8012c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012c3a:	e841 2300 	strex	r3, r2, [r1]
 8012c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d1d9      	bne.n	8012bfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d017      	beq.n	8012c84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c5a:	4a15      	ldr	r2, [pc, #84]	@ (8012cb0 <HAL_UART_IRQHandler+0x2c0>)
 8012c5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fb f9d9 	bl	800e01c <HAL_DMA_Abort_IT>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d019      	beq.n	8012ca4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012c7e:	4610      	mov	r0, r2
 8012c80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c82:	e00f      	b.n	8012ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 f9e1 	bl	801304c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c8a:	e00b      	b.n	8012ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f9dd 	bl	801304c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c92:	e007      	b.n	8012ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 f9d9 	bl	801304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012ca2:	e1bf      	b.n	8013024 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ca4:	bf00      	nop
    return;
 8012ca6:	e1bd      	b.n	8013024 <HAL_UART_IRQHandler+0x634>
 8012ca8:	10000001 	.word	0x10000001
 8012cac:	04000120 	.word	0x04000120
 8012cb0:	080138fb 	.word	0x080138fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	f040 8153 	bne.w	8012f64 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012cc2:	f003 0310 	and.w	r3, r3, #16
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f000 814c 	beq.w	8012f64 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012cd0:	f003 0310 	and.w	r3, r3, #16
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 8145 	beq.w	8012f64 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2210      	movs	r2, #16
 8012ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cec:	2b40      	cmp	r3, #64	@ 0x40
 8012cee:	f040 80bb 	bne.w	8012e68 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012d00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f000 818f 	beq.w	8013028 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012d14:	429a      	cmp	r2, r3
 8012d16:	f080 8187 	bcs.w	8013028 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012d20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	f003 0320 	and.w	r3, r3, #32
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f040 8087 	bne.w	8012e46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012d44:	e853 3f00 	ldrex	r3, [r3]
 8012d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012d72:	e841 2300 	strex	r3, r2, [r1]
 8012d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d1da      	bne.n	8012d38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	3308      	adds	r3, #8
 8012d88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012d8c:	e853 3f00 	ldrex	r3, [r3]
 8012d90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012d94:	f023 0301 	bic.w	r3, r3, #1
 8012d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	3308      	adds	r3, #8
 8012da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012da6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012db2:	e841 2300 	strex	r3, r2, [r1]
 8012db6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d1e1      	bne.n	8012d82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012dc8:	e853 3f00 	ldrex	r3, [r3]
 8012dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	3308      	adds	r3, #8
 8012dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012de2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012de4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012de6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012de8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012dea:	e841 2300 	strex	r3, r2, [r1]
 8012dee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1e3      	bne.n	8012dbe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2220      	movs	r2, #32
 8012dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e0c:	e853 3f00 	ldrex	r3, [r3]
 8012e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012e14:	f023 0310 	bic.w	r3, r3, #16
 8012e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	461a      	mov	r2, r3
 8012e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012e2e:	e841 2300 	strex	r3, r2, [r1]
 8012e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1e4      	bne.n	8012e04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fb f88c 	bl	800df5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2202      	movs	r2, #2
 8012e4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	4619      	mov	r1, r3
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 f8fd 	bl	8013060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012e66:	e0df      	b.n	8013028 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	f000 80d1 	beq.w	801302c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8012e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f000 80cc 	beq.w	801302c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e9c:	e853 3f00 	ldrex	r3, [r3]
 8012ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012eb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ebe:	e841 2300 	strex	r3, r2, [r1]
 8012ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1e4      	bne.n	8012e94 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	3308      	adds	r3, #8
 8012ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed4:	e853 3f00 	ldrex	r3, [r3]
 8012ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8012eda:	6a3b      	ldr	r3, [r7, #32]
 8012edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012ee0:	f023 0301 	bic.w	r3, r3, #1
 8012ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	3308      	adds	r3, #8
 8012eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8012ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012efa:	e841 2300 	strex	r3, r2, [r1]
 8012efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1e1      	bne.n	8012eca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2220      	movs	r2, #32
 8012f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	e853 3f00 	ldrex	r3, [r3]
 8012f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f023 0310 	bic.w	r3, r3, #16
 8012f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	461a      	mov	r2, r3
 8012f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012f3c:	61fb      	str	r3, [r7, #28]
 8012f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f40:	69b9      	ldr	r1, [r7, #24]
 8012f42:	69fa      	ldr	r2, [r7, #28]
 8012f44:	e841 2300 	strex	r3, r2, [r1]
 8012f48:	617b      	str	r3, [r7, #20]
   return(result);
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1e4      	bne.n	8012f1a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2202      	movs	r2, #2
 8012f54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 f87f 	bl	8013060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012f62:	e063      	b.n	801302c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d00e      	beq.n	8012f8e <HAL_UART_IRQHandler+0x59e>
 8012f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d008      	beq.n	8012f8e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 fcf8 	bl	801397c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012f8c:	e051      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d014      	beq.n	8012fc4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d105      	bne.n	8012fb2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d008      	beq.n	8012fc4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d03a      	beq.n	8013030 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	4798      	blx	r3
    }
    return;
 8012fc2:	e035      	b.n	8013030 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d009      	beq.n	8012fe4 <HAL_UART_IRQHandler+0x5f4>
 8012fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d003      	beq.n	8012fe4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f000 fca2 	bl	8013926 <UART_EndTransmit_IT>
    return;
 8012fe2:	e026      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d009      	beq.n	8013004 <HAL_UART_IRQHandler+0x614>
 8012ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ff4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d003      	beq.n	8013004 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 fcd1 	bl	80139a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013002:	e016      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801300c:	2b00      	cmp	r3, #0
 801300e:	d010      	beq.n	8013032 <HAL_UART_IRQHandler+0x642>
 8013010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013014:	2b00      	cmp	r3, #0
 8013016:	da0c      	bge.n	8013032 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f000 fcb9 	bl	8013990 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801301e:	e008      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
      return;
 8013020:	bf00      	nop
 8013022:	e006      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
    return;
 8013024:	bf00      	nop
 8013026:	e004      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
      return;
 8013028:	bf00      	nop
 801302a:	e002      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
      return;
 801302c:	bf00      	nop
 801302e:	e000      	b.n	8013032 <HAL_UART_IRQHandler+0x642>
    return;
 8013030:	bf00      	nop
  }
}
 8013032:	37e8      	adds	r7, #232	@ 0xe8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013040:	bf00      	nop
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801304c:	b480      	push	{r7}
 801304e:	b083      	sub	sp, #12
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013054:	bf00      	nop
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801306c:	bf00      	nop
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr

08013078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801307c:	b08c      	sub	sp, #48	@ 0x30
 801307e:	af00      	add	r7, sp, #0
 8013080:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013082:	2300      	movs	r3, #0
 8013084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	689a      	ldr	r2, [r3, #8]
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	691b      	ldr	r3, [r3, #16]
 8013090:	431a      	orrs	r2, r3
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	695b      	ldr	r3, [r3, #20]
 8013096:	431a      	orrs	r2, r3
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	69db      	ldr	r3, [r3, #28]
 801309c:	4313      	orrs	r3, r2
 801309e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	4baf      	ldr	r3, [pc, #700]	@ (8013364 <UART_SetConfig+0x2ec>)
 80130a8:	4013      	ands	r3, r2
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	6812      	ldr	r2, [r2, #0]
 80130ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80130b0:	430b      	orrs	r3, r1
 80130b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	68da      	ldr	r2, [r3, #12]
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	430a      	orrs	r2, r1
 80130c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	699b      	ldr	r3, [r3, #24]
 80130ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4aa4      	ldr	r2, [pc, #656]	@ (8013368 <UART_SetConfig+0x2f0>)
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d004      	beq.n	80130e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	6a1b      	ldr	r3, [r3, #32]
 80130de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130e0:	4313      	orrs	r3, r2
 80130e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80130ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80130f2:	697a      	ldr	r2, [r7, #20]
 80130f4:	6812      	ldr	r2, [r2, #0]
 80130f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80130f8:	430b      	orrs	r3, r1
 80130fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013102:	f023 010f 	bic.w	r1, r3, #15
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	430a      	orrs	r2, r1
 8013110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a95      	ldr	r2, [pc, #596]	@ (801336c <UART_SetConfig+0x2f4>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d125      	bne.n	8013168 <UART_SetConfig+0xf0>
 801311c:	2003      	movs	r0, #3
 801311e:	f7ff fb69 	bl	80127f4 <LL_RCC_GetUSARTClockSource>
 8013122:	4603      	mov	r3, r0
 8013124:	2b03      	cmp	r3, #3
 8013126:	d81b      	bhi.n	8013160 <UART_SetConfig+0xe8>
 8013128:	a201      	add	r2, pc, #4	@ (adr r2, 8013130 <UART_SetConfig+0xb8>)
 801312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312e:	bf00      	nop
 8013130:	08013141 	.word	0x08013141
 8013134:	08013151 	.word	0x08013151
 8013138:	08013149 	.word	0x08013149
 801313c:	08013159 	.word	0x08013159
 8013140:	2301      	movs	r3, #1
 8013142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013146:	e042      	b.n	80131ce <UART_SetConfig+0x156>
 8013148:	2302      	movs	r3, #2
 801314a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801314e:	e03e      	b.n	80131ce <UART_SetConfig+0x156>
 8013150:	2304      	movs	r3, #4
 8013152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013156:	e03a      	b.n	80131ce <UART_SetConfig+0x156>
 8013158:	2308      	movs	r3, #8
 801315a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801315e:	e036      	b.n	80131ce <UART_SetConfig+0x156>
 8013160:	2310      	movs	r3, #16
 8013162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013166:	e032      	b.n	80131ce <UART_SetConfig+0x156>
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4a7e      	ldr	r2, [pc, #504]	@ (8013368 <UART_SetConfig+0x2f0>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d12a      	bne.n	80131c8 <UART_SetConfig+0x150>
 8013172:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8013176:	f7ff fb4d 	bl	8012814 <LL_RCC_GetLPUARTClockSource>
 801317a:	4603      	mov	r3, r0
 801317c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013180:	d01a      	beq.n	80131b8 <UART_SetConfig+0x140>
 8013182:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013186:	d81b      	bhi.n	80131c0 <UART_SetConfig+0x148>
 8013188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801318c:	d00c      	beq.n	80131a8 <UART_SetConfig+0x130>
 801318e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013192:	d815      	bhi.n	80131c0 <UART_SetConfig+0x148>
 8013194:	2b00      	cmp	r3, #0
 8013196:	d003      	beq.n	80131a0 <UART_SetConfig+0x128>
 8013198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801319c:	d008      	beq.n	80131b0 <UART_SetConfig+0x138>
 801319e:	e00f      	b.n	80131c0 <UART_SetConfig+0x148>
 80131a0:	2300      	movs	r3, #0
 80131a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80131a6:	e012      	b.n	80131ce <UART_SetConfig+0x156>
 80131a8:	2302      	movs	r3, #2
 80131aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80131ae:	e00e      	b.n	80131ce <UART_SetConfig+0x156>
 80131b0:	2304      	movs	r3, #4
 80131b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80131b6:	e00a      	b.n	80131ce <UART_SetConfig+0x156>
 80131b8:	2308      	movs	r3, #8
 80131ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80131be:	e006      	b.n	80131ce <UART_SetConfig+0x156>
 80131c0:	2310      	movs	r3, #16
 80131c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80131c6:	e002      	b.n	80131ce <UART_SetConfig+0x156>
 80131c8:	2310      	movs	r3, #16
 80131ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a65      	ldr	r2, [pc, #404]	@ (8013368 <UART_SetConfig+0x2f0>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	f040 8097 	bne.w	8013308 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80131da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80131de:	2b08      	cmp	r3, #8
 80131e0:	d823      	bhi.n	801322a <UART_SetConfig+0x1b2>
 80131e2:	a201      	add	r2, pc, #4	@ (adr r2, 80131e8 <UART_SetConfig+0x170>)
 80131e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e8:	0801320d 	.word	0x0801320d
 80131ec:	0801322b 	.word	0x0801322b
 80131f0:	08013215 	.word	0x08013215
 80131f4:	0801322b 	.word	0x0801322b
 80131f8:	0801321b 	.word	0x0801321b
 80131fc:	0801322b 	.word	0x0801322b
 8013200:	0801322b 	.word	0x0801322b
 8013204:	0801322b 	.word	0x0801322b
 8013208:	08013223 	.word	0x08013223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801320c:	f7fc fd70 	bl	800fcf0 <HAL_RCC_GetPCLK1Freq>
 8013210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013212:	e010      	b.n	8013236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013214:	4b56      	ldr	r3, [pc, #344]	@ (8013370 <UART_SetConfig+0x2f8>)
 8013216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013218:	e00d      	b.n	8013236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801321a:	f7fc fce9 	bl	800fbf0 <HAL_RCC_GetSysClockFreq>
 801321e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013220:	e009      	b.n	8013236 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013228:	e005      	b.n	8013236 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801322a:	2300      	movs	r3, #0
 801322c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801322e:	2301      	movs	r3, #1
 8013230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013238:	2b00      	cmp	r3, #0
 801323a:	f000 812b 	beq.w	8013494 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013242:	4a4c      	ldr	r2, [pc, #304]	@ (8013374 <UART_SetConfig+0x2fc>)
 8013244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013248:	461a      	mov	r2, r3
 801324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013250:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	685a      	ldr	r2, [r3, #4]
 8013256:	4613      	mov	r3, r2
 8013258:	005b      	lsls	r3, r3, #1
 801325a:	4413      	add	r3, r2
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	429a      	cmp	r2, r3
 8013260:	d305      	bcc.n	801326e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013268:	69ba      	ldr	r2, [r7, #24]
 801326a:	429a      	cmp	r2, r3
 801326c:	d903      	bls.n	8013276 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801326e:	2301      	movs	r3, #1
 8013270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013274:	e10e      	b.n	8013494 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013278:	2200      	movs	r2, #0
 801327a:	60bb      	str	r3, [r7, #8]
 801327c:	60fa      	str	r2, [r7, #12]
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013282:	4a3c      	ldr	r2, [pc, #240]	@ (8013374 <UART_SetConfig+0x2fc>)
 8013284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013288:	b29b      	uxth	r3, r3
 801328a:	2200      	movs	r2, #0
 801328c:	603b      	str	r3, [r7, #0]
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013294:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013298:	f7ed fd2e 	bl	8000cf8 <__aeabi_uldivmod>
 801329c:	4602      	mov	r2, r0
 801329e:	460b      	mov	r3, r1
 80132a0:	4610      	mov	r0, r2
 80132a2:	4619      	mov	r1, r3
 80132a4:	f04f 0200 	mov.w	r2, #0
 80132a8:	f04f 0300 	mov.w	r3, #0
 80132ac:	020b      	lsls	r3, r1, #8
 80132ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80132b2:	0202      	lsls	r2, r0, #8
 80132b4:	6979      	ldr	r1, [r7, #20]
 80132b6:	6849      	ldr	r1, [r1, #4]
 80132b8:	0849      	lsrs	r1, r1, #1
 80132ba:	2000      	movs	r0, #0
 80132bc:	460c      	mov	r4, r1
 80132be:	4605      	mov	r5, r0
 80132c0:	eb12 0804 	adds.w	r8, r2, r4
 80132c4:	eb43 0905 	adc.w	r9, r3, r5
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	2200      	movs	r2, #0
 80132ce:	469a      	mov	sl, r3
 80132d0:	4693      	mov	fp, r2
 80132d2:	4652      	mov	r2, sl
 80132d4:	465b      	mov	r3, fp
 80132d6:	4640      	mov	r0, r8
 80132d8:	4649      	mov	r1, r9
 80132da:	f7ed fd0d 	bl	8000cf8 <__aeabi_uldivmod>
 80132de:	4602      	mov	r2, r0
 80132e0:	460b      	mov	r3, r1
 80132e2:	4613      	mov	r3, r2
 80132e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80132e6:	6a3b      	ldr	r3, [r7, #32]
 80132e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80132ec:	d308      	bcc.n	8013300 <UART_SetConfig+0x288>
 80132ee:	6a3b      	ldr	r3, [r7, #32]
 80132f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80132f4:	d204      	bcs.n	8013300 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	6a3a      	ldr	r2, [r7, #32]
 80132fc:	60da      	str	r2, [r3, #12]
 80132fe:	e0c9      	b.n	8013494 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8013300:	2301      	movs	r3, #1
 8013302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013306:	e0c5      	b.n	8013494 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	69db      	ldr	r3, [r3, #28]
 801330c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013310:	d16d      	bne.n	80133ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8013312:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013316:	3b01      	subs	r3, #1
 8013318:	2b07      	cmp	r3, #7
 801331a:	d82d      	bhi.n	8013378 <UART_SetConfig+0x300>
 801331c:	a201      	add	r2, pc, #4	@ (adr r2, 8013324 <UART_SetConfig+0x2ac>)
 801331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013322:	bf00      	nop
 8013324:	08013345 	.word	0x08013345
 8013328:	0801334d 	.word	0x0801334d
 801332c:	08013379 	.word	0x08013379
 8013330:	08013353 	.word	0x08013353
 8013334:	08013379 	.word	0x08013379
 8013338:	08013379 	.word	0x08013379
 801333c:	08013379 	.word	0x08013379
 8013340:	0801335b 	.word	0x0801335b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013344:	f7fc fcea 	bl	800fd1c <HAL_RCC_GetPCLK2Freq>
 8013348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801334a:	e01b      	b.n	8013384 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801334c:	4b08      	ldr	r3, [pc, #32]	@ (8013370 <UART_SetConfig+0x2f8>)
 801334e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013350:	e018      	b.n	8013384 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013352:	f7fc fc4d 	bl	800fbf0 <HAL_RCC_GetSysClockFreq>
 8013356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013358:	e014      	b.n	8013384 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801335a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801335e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013360:	e010      	b.n	8013384 <UART_SetConfig+0x30c>
 8013362:	bf00      	nop
 8013364:	cfff69f3 	.word	0xcfff69f3
 8013368:	40008000 	.word	0x40008000
 801336c:	40013800 	.word	0x40013800
 8013370:	00f42400 	.word	0x00f42400
 8013374:	08019c38 	.word	0x08019c38
      default:
        pclk = 0U;
 8013378:	2300      	movs	r3, #0
 801337a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801337c:	2301      	movs	r3, #1
 801337e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013386:	2b00      	cmp	r3, #0
 8013388:	f000 8084 	beq.w	8013494 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013390:	4a4b      	ldr	r2, [pc, #300]	@ (80134c0 <UART_SetConfig+0x448>)
 8013392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013396:	461a      	mov	r2, r3
 8013398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801339a:	fbb3 f3f2 	udiv	r3, r3, r2
 801339e:	005a      	lsls	r2, r3, #1
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	085b      	lsrs	r3, r3, #1
 80133a6:	441a      	add	r2, r3
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80133b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80133b2:	6a3b      	ldr	r3, [r7, #32]
 80133b4:	2b0f      	cmp	r3, #15
 80133b6:	d916      	bls.n	80133e6 <UART_SetConfig+0x36e>
 80133b8:	6a3b      	ldr	r3, [r7, #32]
 80133ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133be:	d212      	bcs.n	80133e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133c0:	6a3b      	ldr	r3, [r7, #32]
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	f023 030f 	bic.w	r3, r3, #15
 80133c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133ca:	6a3b      	ldr	r3, [r7, #32]
 80133cc:	085b      	lsrs	r3, r3, #1
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	f003 0307 	and.w	r3, r3, #7
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	8bfb      	ldrh	r3, [r7, #30]
 80133d8:	4313      	orrs	r3, r2
 80133da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	8bfa      	ldrh	r2, [r7, #30]
 80133e2:	60da      	str	r2, [r3, #12]
 80133e4:	e056      	b.n	8013494 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80133e6:	2301      	movs	r3, #1
 80133e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80133ec:	e052      	b.n	8013494 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80133ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80133f2:	3b01      	subs	r3, #1
 80133f4:	2b07      	cmp	r3, #7
 80133f6:	d822      	bhi.n	801343e <UART_SetConfig+0x3c6>
 80133f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013400 <UART_SetConfig+0x388>)
 80133fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fe:	bf00      	nop
 8013400:	08013421 	.word	0x08013421
 8013404:	08013429 	.word	0x08013429
 8013408:	0801343f 	.word	0x0801343f
 801340c:	0801342f 	.word	0x0801342f
 8013410:	0801343f 	.word	0x0801343f
 8013414:	0801343f 	.word	0x0801343f
 8013418:	0801343f 	.word	0x0801343f
 801341c:	08013437 	.word	0x08013437
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013420:	f7fc fc7c 	bl	800fd1c <HAL_RCC_GetPCLK2Freq>
 8013424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013426:	e010      	b.n	801344a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013428:	4b26      	ldr	r3, [pc, #152]	@ (80134c4 <UART_SetConfig+0x44c>)
 801342a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801342c:	e00d      	b.n	801344a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801342e:	f7fc fbdf 	bl	800fbf0 <HAL_RCC_GetSysClockFreq>
 8013432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013434:	e009      	b.n	801344a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801343a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801343c:	e005      	b.n	801344a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801343e:	2300      	movs	r3, #0
 8013440:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013442:	2301      	movs	r3, #1
 8013444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013448:	bf00      	nop
    }

    if (pclk != 0U)
 801344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344c:	2b00      	cmp	r3, #0
 801344e:	d021      	beq.n	8013494 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013454:	4a1a      	ldr	r2, [pc, #104]	@ (80134c0 <UART_SetConfig+0x448>)
 8013456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801345a:	461a      	mov	r2, r3
 801345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801345e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	085b      	lsrs	r3, r3, #1
 8013468:	441a      	add	r2, r3
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013474:	6a3b      	ldr	r3, [r7, #32]
 8013476:	2b0f      	cmp	r3, #15
 8013478:	d909      	bls.n	801348e <UART_SetConfig+0x416>
 801347a:	6a3b      	ldr	r3, [r7, #32]
 801347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013480:	d205      	bcs.n	801348e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013482:	6a3b      	ldr	r3, [r7, #32]
 8013484:	b29a      	uxth	r2, r3
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	60da      	str	r2, [r3, #12]
 801348c:	e002      	b.n	8013494 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801348e:	2301      	movs	r3, #1
 8013490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	2201      	movs	r2, #1
 8013498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	2201      	movs	r2, #1
 80134a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	2200      	movs	r2, #0
 80134a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	2200      	movs	r2, #0
 80134ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80134b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3730      	adds	r7, #48	@ 0x30
 80134b8:	46bd      	mov	sp, r7
 80134ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80134be:	bf00      	nop
 80134c0:	08019c38 	.word	0x08019c38
 80134c4:	00f42400 	.word	0x00f42400

080134c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134d4:	f003 0301 	and.w	r3, r3, #1
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	430a      	orrs	r2, r1
 80134f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134f6:	f003 0302 	and.w	r3, r3, #2
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00a      	beq.n	8013514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	430a      	orrs	r2, r1
 8013512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013518:	f003 0304 	and.w	r3, r3, #4
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00a      	beq.n	8013536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	430a      	orrs	r2, r1
 8013534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801353a:	f003 0308 	and.w	r3, r3, #8
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00a      	beq.n	8013558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	430a      	orrs	r2, r1
 8013556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801355c:	f003 0310 	and.w	r3, r3, #16
 8013560:	2b00      	cmp	r3, #0
 8013562:	d00a      	beq.n	801357a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	430a      	orrs	r2, r1
 8013578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801357e:	f003 0320 	and.w	r3, r3, #32
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00a      	beq.n	801359c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	430a      	orrs	r2, r1
 801359a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d01a      	beq.n	80135de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	430a      	orrs	r2, r1
 80135bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80135c6:	d10a      	bne.n	80135de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	430a      	orrs	r2, r1
 80135dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d00a      	beq.n	8013600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	430a      	orrs	r2, r1
 80135fe:	605a      	str	r2, [r3, #4]
  }
}
 8013600:	bf00      	nop
 8013602:	370c      	adds	r7, #12
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b098      	sub	sp, #96	@ 0x60
 8013610:	af02      	add	r7, sp, #8
 8013612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801361c:	f7fa fb54 	bl	800dcc8 <HAL_GetTick>
 8013620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f003 0308 	and.w	r3, r3, #8
 801362c:	2b08      	cmp	r3, #8
 801362e:	d12f      	bne.n	8013690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013638:	2200      	movs	r2, #0
 801363a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 f88e 	bl	8013760 <UART_WaitOnFlagUntilTimeout>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d022      	beq.n	8013690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013652:	e853 3f00 	ldrex	r3, [r3]
 8013656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801365a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801365e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	461a      	mov	r2, r3
 8013666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013668:	647b      	str	r3, [r7, #68]	@ 0x44
 801366a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801366c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801366e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013670:	e841 2300 	strex	r3, r2, [r1]
 8013674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013678:	2b00      	cmp	r3, #0
 801367a:	d1e6      	bne.n	801364a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2220      	movs	r2, #32
 8013680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2200      	movs	r2, #0
 8013688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801368c:	2303      	movs	r3, #3
 801368e:	e063      	b.n	8013758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	f003 0304 	and.w	r3, r3, #4
 801369a:	2b04      	cmp	r3, #4
 801369c:	d149      	bne.n	8013732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801369e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80136a2:	9300      	str	r3, [sp, #0]
 80136a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136a6:	2200      	movs	r2, #0
 80136a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f000 f857 	bl	8013760 <UART_WaitOnFlagUntilTimeout>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d03c      	beq.n	8013732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c0:	e853 3f00 	ldrex	r3, [r3]
 80136c4:	623b      	str	r3, [r7, #32]
   return(result);
 80136c6:	6a3b      	ldr	r3, [r7, #32]
 80136c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80136cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	461a      	mov	r2, r3
 80136d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80136d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80136dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136de:	e841 2300 	strex	r3, r2, [r1]
 80136e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80136e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d1e6      	bne.n	80136b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	3308      	adds	r3, #8
 80136f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	e853 3f00 	ldrex	r3, [r3]
 80136f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f023 0301 	bic.w	r3, r3, #1
 8013700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	3308      	adds	r3, #8
 8013708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801370a:	61fa      	str	r2, [r7, #28]
 801370c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370e:	69b9      	ldr	r1, [r7, #24]
 8013710:	69fa      	ldr	r2, [r7, #28]
 8013712:	e841 2300 	strex	r3, r2, [r1]
 8013716:	617b      	str	r3, [r7, #20]
   return(result);
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d1e5      	bne.n	80136ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2220      	movs	r2, #32
 8013722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2200      	movs	r2, #0
 801372a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801372e:	2303      	movs	r3, #3
 8013730:	e012      	b.n	8013758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2220      	movs	r2, #32
 8013736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2220      	movs	r2, #32
 801373e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2200      	movs	r2, #0
 8013746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2200      	movs	r2, #0
 801374c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2200      	movs	r2, #0
 8013752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013756:	2300      	movs	r3, #0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3758      	adds	r7, #88	@ 0x58
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	60b9      	str	r1, [r7, #8]
 801376a:	603b      	str	r3, [r7, #0]
 801376c:	4613      	mov	r3, r2
 801376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013770:	e049      	b.n	8013806 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013778:	d045      	beq.n	8013806 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801377a:	f7fa faa5 	bl	800dcc8 <HAL_GetTick>
 801377e:	4602      	mov	r2, r0
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	69ba      	ldr	r2, [r7, #24]
 8013786:	429a      	cmp	r2, r3
 8013788:	d302      	bcc.n	8013790 <UART_WaitOnFlagUntilTimeout+0x30>
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d101      	bne.n	8013794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013790:	2303      	movs	r3, #3
 8013792:	e048      	b.n	8013826 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f003 0304 	and.w	r3, r3, #4
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d031      	beq.n	8013806 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	69db      	ldr	r3, [r3, #28]
 80137a8:	f003 0308 	and.w	r3, r3, #8
 80137ac:	2b08      	cmp	r3, #8
 80137ae:	d110      	bne.n	80137d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2208      	movs	r2, #8
 80137b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f000 f838 	bl	801382e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2208      	movs	r2, #8
 80137c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2200      	movs	r2, #0
 80137ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80137ce:	2301      	movs	r3, #1
 80137d0:	e029      	b.n	8013826 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	69db      	ldr	r3, [r3, #28]
 80137d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80137dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80137e0:	d111      	bne.n	8013806 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80137ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 f81e 	bl	801382e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2220      	movs	r2, #32
 80137f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2200      	movs	r2, #0
 80137fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013802:	2303      	movs	r3, #3
 8013804:	e00f      	b.n	8013826 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	69da      	ldr	r2, [r3, #28]
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	4013      	ands	r3, r2
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	429a      	cmp	r2, r3
 8013814:	bf0c      	ite	eq
 8013816:	2301      	moveq	r3, #1
 8013818:	2300      	movne	r3, #0
 801381a:	b2db      	uxtb	r3, r3
 801381c:	461a      	mov	r2, r3
 801381e:	79fb      	ldrb	r3, [r7, #7]
 8013820:	429a      	cmp	r2, r3
 8013822:	d0a6      	beq.n	8013772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013824:	2300      	movs	r3, #0
}
 8013826:	4618      	mov	r0, r3
 8013828:	3710      	adds	r7, #16
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}

0801382e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801382e:	b480      	push	{r7}
 8013830:	b095      	sub	sp, #84	@ 0x54
 8013832:	af00      	add	r7, sp, #0
 8013834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801383e:	e853 3f00 	ldrex	r3, [r3]
 8013842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	461a      	mov	r2, r3
 8013852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013854:	643b      	str	r3, [r7, #64]	@ 0x40
 8013856:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801385a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801385c:	e841 2300 	strex	r3, r2, [r1]
 8013860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1e6      	bne.n	8013836 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	3308      	adds	r3, #8
 801386e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013870:	6a3b      	ldr	r3, [r7, #32]
 8013872:	e853 3f00 	ldrex	r3, [r3]
 8013876:	61fb      	str	r3, [r7, #28]
   return(result);
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801387e:	f023 0301 	bic.w	r3, r3, #1
 8013882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3308      	adds	r3, #8
 801388a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801388c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801388e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013894:	e841 2300 	strex	r3, r2, [r1]
 8013898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389c:	2b00      	cmp	r3, #0
 801389e:	d1e3      	bne.n	8013868 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d118      	bne.n	80138da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	e853 3f00 	ldrex	r3, [r3]
 80138b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	f023 0310 	bic.w	r3, r3, #16
 80138bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	461a      	mov	r2, r3
 80138c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138c6:	61bb      	str	r3, [r7, #24]
 80138c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138ca:	6979      	ldr	r1, [r7, #20]
 80138cc:	69ba      	ldr	r2, [r7, #24]
 80138ce:	e841 2300 	strex	r3, r2, [r1]
 80138d2:	613b      	str	r3, [r7, #16]
   return(result);
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d1e6      	bne.n	80138a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2220      	movs	r2, #32
 80138de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2200      	movs	r2, #0
 80138e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2200      	movs	r2, #0
 80138ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80138ee:	bf00      	nop
 80138f0:	3754      	adds	r7, #84	@ 0x54
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr

080138fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b084      	sub	sp, #16
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2200      	movs	r2, #0
 801390c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f7ff fb97 	bl	801304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801391e:	bf00      	nop
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b088      	sub	sp, #32
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	e853 3f00 	ldrex	r3, [r3]
 801393a:	60bb      	str	r3, [r7, #8]
   return(result);
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013942:	61fb      	str	r3, [r7, #28]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	461a      	mov	r2, r3
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	61bb      	str	r3, [r7, #24]
 801394e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013950:	6979      	ldr	r1, [r7, #20]
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	e841 2300 	strex	r3, r2, [r1]
 8013958:	613b      	str	r3, [r7, #16]
   return(result);
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1e6      	bne.n	801392e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2220      	movs	r2, #32
 8013964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff fb62 	bl	8013038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013974:	bf00      	nop
 8013976:	3720      	adds	r7, #32
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013984:	bf00      	nop
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013998:	bf00      	nop
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80139ac:	bf00      	nop
 80139ae:	370c      	adds	r7, #12
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr

080139b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d101      	bne.n	80139ce <HAL_UARTEx_DisableFifoMode+0x16>
 80139ca:	2302      	movs	r3, #2
 80139cc:	e027      	b.n	8013a1e <HAL_UARTEx_DisableFifoMode+0x66>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2224      	movs	r2, #36	@ 0x24
 80139da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f022 0201 	bic.w	r2, r2, #1
 80139f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80139fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2220      	movs	r2, #32
 8013a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2200      	movs	r2, #0
 8013a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013a1c:	2300      	movs	r3, #0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b084      	sub	sp, #16
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
 8013a32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d101      	bne.n	8013a42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013a3e:	2302      	movs	r3, #2
 8013a40:	e02d      	b.n	8013a9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2201      	movs	r2, #1
 8013a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2224      	movs	r2, #36	@ 0x24
 8013a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f022 0201 	bic.w	r2, r2, #1
 8013a68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	683a      	ldr	r2, [r7, #0]
 8013a7a:	430a      	orrs	r2, r1
 8013a7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f000 f850 	bl	8013b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2220      	movs	r2, #32
 8013a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2200      	movs	r2, #0
 8013a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013a9c:	2300      	movs	r3, #0
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013aa6:	b580      	push	{r7, lr}
 8013aa8:	b084      	sub	sp, #16
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d101      	bne.n	8013abe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013aba:	2302      	movs	r3, #2
 8013abc:	e02d      	b.n	8013b1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2224      	movs	r2, #36	@ 0x24
 8013aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f022 0201 	bic.w	r2, r2, #1
 8013ae4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	683a      	ldr	r2, [r7, #0]
 8013af6:	430a      	orrs	r2, r1
 8013af8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f812 	bl	8013b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2220      	movs	r2, #32
 8013b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2200      	movs	r2, #0
 8013b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
	...

08013b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b085      	sub	sp, #20
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d108      	bne.n	8013b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2201      	movs	r2, #1
 8013b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013b44:	e031      	b.n	8013baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013b46:	2308      	movs	r3, #8
 8013b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013b4a:	2308      	movs	r3, #8
 8013b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	0e5b      	lsrs	r3, r3, #25
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	f003 0307 	and.w	r3, r3, #7
 8013b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	0f5b      	lsrs	r3, r3, #29
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	f003 0307 	and.w	r3, r3, #7
 8013b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b6e:	7bbb      	ldrb	r3, [r7, #14]
 8013b70:	7b3a      	ldrb	r2, [r7, #12]
 8013b72:	4911      	ldr	r1, [pc, #68]	@ (8013bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8013b74:	5c8a      	ldrb	r2, [r1, r2]
 8013b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013b7a:	7b3a      	ldrb	r2, [r7, #12]
 8013b7c:	490f      	ldr	r1, [pc, #60]	@ (8013bbc <UARTEx_SetNbDataToProcess+0x98>)
 8013b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013b8c:	7bfb      	ldrb	r3, [r7, #15]
 8013b8e:	7b7a      	ldrb	r2, [r7, #13]
 8013b90:	4909      	ldr	r1, [pc, #36]	@ (8013bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8013b92:	5c8a      	ldrb	r2, [r1, r2]
 8013b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013b98:	7b7a      	ldrb	r2, [r7, #13]
 8013b9a:	4908      	ldr	r1, [pc, #32]	@ (8013bbc <UARTEx_SetNbDataToProcess+0x98>)
 8013b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013baa:	bf00      	nop
 8013bac:	3714      	adds	r7, #20
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop
 8013bb8:	08019c50 	.word	0x08019c50
 8013bbc:	08019c58 	.word	0x08019c58

08013bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b085      	sub	sp, #20
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013bc8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8013bcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	43db      	mvns	r3, r3
 8013bdc:	b29b      	uxth	r3, r3
 8013bde:	4013      	ands	r3, r2
 8013be0:	b29a      	uxth	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3714      	adds	r7, #20
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr

08013bf6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	f107 0014 	add.w	r0, r7, #20
 8013c04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2200      	movs	r2, #0
 8013c14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	370c      	adds	r7, #12
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	b004      	add	sp, #16
 8013c36:	4770      	bx	lr

08013c38 <rand>:
 8013c38:	4b16      	ldr	r3, [pc, #88]	@ (8013c94 <rand+0x5c>)
 8013c3a:	b510      	push	{r4, lr}
 8013c3c:	681c      	ldr	r4, [r3, #0]
 8013c3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c40:	b9b3      	cbnz	r3, 8013c70 <rand+0x38>
 8013c42:	2018      	movs	r0, #24
 8013c44:	f002 fbbe 	bl	80163c4 <malloc>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	6320      	str	r0, [r4, #48]	@ 0x30
 8013c4c:	b920      	cbnz	r0, 8013c58 <rand+0x20>
 8013c4e:	4b12      	ldr	r3, [pc, #72]	@ (8013c98 <rand+0x60>)
 8013c50:	4812      	ldr	r0, [pc, #72]	@ (8013c9c <rand+0x64>)
 8013c52:	2152      	movs	r1, #82	@ 0x52
 8013c54:	f001 fcb4 	bl	80155c0 <__assert_func>
 8013c58:	4911      	ldr	r1, [pc, #68]	@ (8013ca0 <rand+0x68>)
 8013c5a:	4b12      	ldr	r3, [pc, #72]	@ (8013ca4 <rand+0x6c>)
 8013c5c:	e9c0 1300 	strd	r1, r3, [r0]
 8013c60:	4b11      	ldr	r3, [pc, #68]	@ (8013ca8 <rand+0x70>)
 8013c62:	6083      	str	r3, [r0, #8]
 8013c64:	230b      	movs	r3, #11
 8013c66:	8183      	strh	r3, [r0, #12]
 8013c68:	2100      	movs	r1, #0
 8013c6a:	2001      	movs	r0, #1
 8013c6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013c70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013c72:	480e      	ldr	r0, [pc, #56]	@ (8013cac <rand+0x74>)
 8013c74:	690b      	ldr	r3, [r1, #16]
 8013c76:	694c      	ldr	r4, [r1, #20]
 8013c78:	4a0d      	ldr	r2, [pc, #52]	@ (8013cb0 <rand+0x78>)
 8013c7a:	4358      	muls	r0, r3
 8013c7c:	fb02 0004 	mla	r0, r2, r4, r0
 8013c80:	fba3 3202 	umull	r3, r2, r3, r2
 8013c84:	3301      	adds	r3, #1
 8013c86:	eb40 0002 	adc.w	r0, r0, r2
 8013c8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013c8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013c92:	bd10      	pop	{r4, pc}
 8013c94:	20000034 	.word	0x20000034
 8013c98:	08019c60 	.word	0x08019c60
 8013c9c:	08019c77 	.word	0x08019c77
 8013ca0:	abcd330e 	.word	0xabcd330e
 8013ca4:	e66d1234 	.word	0xe66d1234
 8013ca8:	0005deec 	.word	0x0005deec
 8013cac:	5851f42d 	.word	0x5851f42d
 8013cb0:	4c957f2d 	.word	0x4c957f2d

08013cb4 <__cvt>:
 8013cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb8:	ec57 6b10 	vmov	r6, r7, d0
 8013cbc:	2f00      	cmp	r7, #0
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	bfbb      	ittet	lt
 8013cc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013cca:	461f      	movlt	r7, r3
 8013ccc:	2300      	movge	r3, #0
 8013cce:	232d      	movlt	r3, #45	@ 0x2d
 8013cd0:	700b      	strb	r3, [r1, #0]
 8013cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013cd8:	4691      	mov	r9, r2
 8013cda:	f023 0820 	bic.w	r8, r3, #32
 8013cde:	bfbc      	itt	lt
 8013ce0:	4632      	movlt	r2, r6
 8013ce2:	4616      	movlt	r6, r2
 8013ce4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013ce8:	d005      	beq.n	8013cf6 <__cvt+0x42>
 8013cea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013cee:	d100      	bne.n	8013cf2 <__cvt+0x3e>
 8013cf0:	3401      	adds	r4, #1
 8013cf2:	2102      	movs	r1, #2
 8013cf4:	e000      	b.n	8013cf8 <__cvt+0x44>
 8013cf6:	2103      	movs	r1, #3
 8013cf8:	ab03      	add	r3, sp, #12
 8013cfa:	9301      	str	r3, [sp, #4]
 8013cfc:	ab02      	add	r3, sp, #8
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	ec47 6b10 	vmov	d0, r6, r7
 8013d04:	4653      	mov	r3, sl
 8013d06:	4622      	mov	r2, r4
 8013d08:	f001 fd0a 	bl	8015720 <_dtoa_r>
 8013d0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013d10:	4605      	mov	r5, r0
 8013d12:	d119      	bne.n	8013d48 <__cvt+0x94>
 8013d14:	f019 0f01 	tst.w	r9, #1
 8013d18:	d00e      	beq.n	8013d38 <__cvt+0x84>
 8013d1a:	eb00 0904 	add.w	r9, r0, r4
 8013d1e:	2200      	movs	r2, #0
 8013d20:	2300      	movs	r3, #0
 8013d22:	4630      	mov	r0, r6
 8013d24:	4639      	mov	r1, r7
 8013d26:	f7ec feb7 	bl	8000a98 <__aeabi_dcmpeq>
 8013d2a:	b108      	cbz	r0, 8013d30 <__cvt+0x7c>
 8013d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013d30:	2230      	movs	r2, #48	@ 0x30
 8013d32:	9b03      	ldr	r3, [sp, #12]
 8013d34:	454b      	cmp	r3, r9
 8013d36:	d31e      	bcc.n	8013d76 <__cvt+0xc2>
 8013d38:	9b03      	ldr	r3, [sp, #12]
 8013d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d3c:	1b5b      	subs	r3, r3, r5
 8013d3e:	4628      	mov	r0, r5
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	b004      	add	sp, #16
 8013d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013d4c:	eb00 0904 	add.w	r9, r0, r4
 8013d50:	d1e5      	bne.n	8013d1e <__cvt+0x6a>
 8013d52:	7803      	ldrb	r3, [r0, #0]
 8013d54:	2b30      	cmp	r3, #48	@ 0x30
 8013d56:	d10a      	bne.n	8013d6e <__cvt+0xba>
 8013d58:	2200      	movs	r2, #0
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	4630      	mov	r0, r6
 8013d5e:	4639      	mov	r1, r7
 8013d60:	f7ec fe9a 	bl	8000a98 <__aeabi_dcmpeq>
 8013d64:	b918      	cbnz	r0, 8013d6e <__cvt+0xba>
 8013d66:	f1c4 0401 	rsb	r4, r4, #1
 8013d6a:	f8ca 4000 	str.w	r4, [sl]
 8013d6e:	f8da 3000 	ldr.w	r3, [sl]
 8013d72:	4499      	add	r9, r3
 8013d74:	e7d3      	b.n	8013d1e <__cvt+0x6a>
 8013d76:	1c59      	adds	r1, r3, #1
 8013d78:	9103      	str	r1, [sp, #12]
 8013d7a:	701a      	strb	r2, [r3, #0]
 8013d7c:	e7d9      	b.n	8013d32 <__cvt+0x7e>

08013d7e <__exponent>:
 8013d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d80:	2900      	cmp	r1, #0
 8013d82:	bfba      	itte	lt
 8013d84:	4249      	neglt	r1, r1
 8013d86:	232d      	movlt	r3, #45	@ 0x2d
 8013d88:	232b      	movge	r3, #43	@ 0x2b
 8013d8a:	2909      	cmp	r1, #9
 8013d8c:	7002      	strb	r2, [r0, #0]
 8013d8e:	7043      	strb	r3, [r0, #1]
 8013d90:	dd29      	ble.n	8013de6 <__exponent+0x68>
 8013d92:	f10d 0307 	add.w	r3, sp, #7
 8013d96:	461d      	mov	r5, r3
 8013d98:	270a      	movs	r7, #10
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8013da0:	fb07 1416 	mls	r4, r7, r6, r1
 8013da4:	3430      	adds	r4, #48	@ 0x30
 8013da6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013daa:	460c      	mov	r4, r1
 8013dac:	2c63      	cmp	r4, #99	@ 0x63
 8013dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8013db2:	4631      	mov	r1, r6
 8013db4:	dcf1      	bgt.n	8013d9a <__exponent+0x1c>
 8013db6:	3130      	adds	r1, #48	@ 0x30
 8013db8:	1e94      	subs	r4, r2, #2
 8013dba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013dbe:	1c41      	adds	r1, r0, #1
 8013dc0:	4623      	mov	r3, r4
 8013dc2:	42ab      	cmp	r3, r5
 8013dc4:	d30a      	bcc.n	8013ddc <__exponent+0x5e>
 8013dc6:	f10d 0309 	add.w	r3, sp, #9
 8013dca:	1a9b      	subs	r3, r3, r2
 8013dcc:	42ac      	cmp	r4, r5
 8013dce:	bf88      	it	hi
 8013dd0:	2300      	movhi	r3, #0
 8013dd2:	3302      	adds	r3, #2
 8013dd4:	4403      	add	r3, r0
 8013dd6:	1a18      	subs	r0, r3, r0
 8013dd8:	b003      	add	sp, #12
 8013dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ddc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013de0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013de4:	e7ed      	b.n	8013dc2 <__exponent+0x44>
 8013de6:	2330      	movs	r3, #48	@ 0x30
 8013de8:	3130      	adds	r1, #48	@ 0x30
 8013dea:	7083      	strb	r3, [r0, #2]
 8013dec:	70c1      	strb	r1, [r0, #3]
 8013dee:	1d03      	adds	r3, r0, #4
 8013df0:	e7f1      	b.n	8013dd6 <__exponent+0x58>
	...

08013df4 <_printf_float>:
 8013df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	b08d      	sub	sp, #52	@ 0x34
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013e00:	4616      	mov	r6, r2
 8013e02:	461f      	mov	r7, r3
 8013e04:	4605      	mov	r5, r0
 8013e06:	f001 fb4b 	bl	80154a0 <_localeconv_r>
 8013e0a:	6803      	ldr	r3, [r0, #0]
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ec fa16 	bl	8000240 <strlen>
 8013e14:	2300      	movs	r3, #0
 8013e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e18:	f8d8 3000 	ldr.w	r3, [r8]
 8013e1c:	9005      	str	r0, [sp, #20]
 8013e1e:	3307      	adds	r3, #7
 8013e20:	f023 0307 	bic.w	r3, r3, #7
 8013e24:	f103 0208 	add.w	r2, r3, #8
 8013e28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013e2c:	f8d4 b000 	ldr.w	fp, [r4]
 8013e30:	f8c8 2000 	str.w	r2, [r8]
 8013e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013e3c:	9307      	str	r3, [sp, #28]
 8013e3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013e42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80140bc <_printf_float+0x2c8>)
 8013e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e50:	f7ec fe54 	bl	8000afc <__aeabi_dcmpun>
 8013e54:	bb70      	cbnz	r0, 8013eb4 <_printf_float+0xc0>
 8013e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e5a:	4b98      	ldr	r3, [pc, #608]	@ (80140bc <_printf_float+0x2c8>)
 8013e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e60:	f7ec fe2e 	bl	8000ac0 <__aeabi_dcmple>
 8013e64:	bb30      	cbnz	r0, 8013eb4 <_printf_float+0xc0>
 8013e66:	2200      	movs	r2, #0
 8013e68:	2300      	movs	r3, #0
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	4649      	mov	r1, r9
 8013e6e:	f7ec fe1d 	bl	8000aac <__aeabi_dcmplt>
 8013e72:	b110      	cbz	r0, 8013e7a <_printf_float+0x86>
 8013e74:	232d      	movs	r3, #45	@ 0x2d
 8013e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e7a:	4a91      	ldr	r2, [pc, #580]	@ (80140c0 <_printf_float+0x2cc>)
 8013e7c:	4b91      	ldr	r3, [pc, #580]	@ (80140c4 <_printf_float+0x2d0>)
 8013e7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013e82:	bf94      	ite	ls
 8013e84:	4690      	movls	r8, r2
 8013e86:	4698      	movhi	r8, r3
 8013e88:	2303      	movs	r3, #3
 8013e8a:	6123      	str	r3, [r4, #16]
 8013e8c:	f02b 0304 	bic.w	r3, fp, #4
 8013e90:	6023      	str	r3, [r4, #0]
 8013e92:	f04f 0900 	mov.w	r9, #0
 8013e96:	9700      	str	r7, [sp, #0]
 8013e98:	4633      	mov	r3, r6
 8013e9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f000 f9d2 	bl	8014248 <_printf_common>
 8013ea4:	3001      	adds	r0, #1
 8013ea6:	f040 808d 	bne.w	8013fc4 <_printf_float+0x1d0>
 8013eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8013eae:	b00d      	add	sp, #52	@ 0x34
 8013eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb4:	4642      	mov	r2, r8
 8013eb6:	464b      	mov	r3, r9
 8013eb8:	4640      	mov	r0, r8
 8013eba:	4649      	mov	r1, r9
 8013ebc:	f7ec fe1e 	bl	8000afc <__aeabi_dcmpun>
 8013ec0:	b140      	cbz	r0, 8013ed4 <_printf_float+0xe0>
 8013ec2:	464b      	mov	r3, r9
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	bfbc      	itt	lt
 8013ec8:	232d      	movlt	r3, #45	@ 0x2d
 8013eca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013ece:	4a7e      	ldr	r2, [pc, #504]	@ (80140c8 <_printf_float+0x2d4>)
 8013ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80140cc <_printf_float+0x2d8>)
 8013ed2:	e7d4      	b.n	8013e7e <_printf_float+0x8a>
 8013ed4:	6863      	ldr	r3, [r4, #4]
 8013ed6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013eda:	9206      	str	r2, [sp, #24]
 8013edc:	1c5a      	adds	r2, r3, #1
 8013ede:	d13b      	bne.n	8013f58 <_printf_float+0x164>
 8013ee0:	2306      	movs	r3, #6
 8013ee2:	6063      	str	r3, [r4, #4]
 8013ee4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013ee8:	2300      	movs	r3, #0
 8013eea:	6022      	str	r2, [r4, #0]
 8013eec:	9303      	str	r3, [sp, #12]
 8013eee:	ab0a      	add	r3, sp, #40	@ 0x28
 8013ef0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013ef4:	ab09      	add	r3, sp, #36	@ 0x24
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	6861      	ldr	r1, [r4, #4]
 8013efa:	ec49 8b10 	vmov	d0, r8, r9
 8013efe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013f02:	4628      	mov	r0, r5
 8013f04:	f7ff fed6 	bl	8013cb4 <__cvt>
 8013f08:	9b06      	ldr	r3, [sp, #24]
 8013f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f0c:	2b47      	cmp	r3, #71	@ 0x47
 8013f0e:	4680      	mov	r8, r0
 8013f10:	d129      	bne.n	8013f66 <_printf_float+0x172>
 8013f12:	1cc8      	adds	r0, r1, #3
 8013f14:	db02      	blt.n	8013f1c <_printf_float+0x128>
 8013f16:	6863      	ldr	r3, [r4, #4]
 8013f18:	4299      	cmp	r1, r3
 8013f1a:	dd41      	ble.n	8013fa0 <_printf_float+0x1ac>
 8013f1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013f20:	fa5f fa8a 	uxtb.w	sl, sl
 8013f24:	3901      	subs	r1, #1
 8013f26:	4652      	mov	r2, sl
 8013f28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013f2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8013f2e:	f7ff ff26 	bl	8013d7e <__exponent>
 8013f32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f34:	1813      	adds	r3, r2, r0
 8013f36:	2a01      	cmp	r2, #1
 8013f38:	4681      	mov	r9, r0
 8013f3a:	6123      	str	r3, [r4, #16]
 8013f3c:	dc02      	bgt.n	8013f44 <_printf_float+0x150>
 8013f3e:	6822      	ldr	r2, [r4, #0]
 8013f40:	07d2      	lsls	r2, r2, #31
 8013f42:	d501      	bpl.n	8013f48 <_printf_float+0x154>
 8013f44:	3301      	adds	r3, #1
 8013f46:	6123      	str	r3, [r4, #16]
 8013f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d0a2      	beq.n	8013e96 <_printf_float+0xa2>
 8013f50:	232d      	movs	r3, #45	@ 0x2d
 8013f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f56:	e79e      	b.n	8013e96 <_printf_float+0xa2>
 8013f58:	9a06      	ldr	r2, [sp, #24]
 8013f5a:	2a47      	cmp	r2, #71	@ 0x47
 8013f5c:	d1c2      	bne.n	8013ee4 <_printf_float+0xf0>
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d1c0      	bne.n	8013ee4 <_printf_float+0xf0>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e7bd      	b.n	8013ee2 <_printf_float+0xee>
 8013f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013f6a:	d9db      	bls.n	8013f24 <_printf_float+0x130>
 8013f6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013f70:	d118      	bne.n	8013fa4 <_printf_float+0x1b0>
 8013f72:	2900      	cmp	r1, #0
 8013f74:	6863      	ldr	r3, [r4, #4]
 8013f76:	dd0b      	ble.n	8013f90 <_printf_float+0x19c>
 8013f78:	6121      	str	r1, [r4, #16]
 8013f7a:	b913      	cbnz	r3, 8013f82 <_printf_float+0x18e>
 8013f7c:	6822      	ldr	r2, [r4, #0]
 8013f7e:	07d0      	lsls	r0, r2, #31
 8013f80:	d502      	bpl.n	8013f88 <_printf_float+0x194>
 8013f82:	3301      	adds	r3, #1
 8013f84:	440b      	add	r3, r1
 8013f86:	6123      	str	r3, [r4, #16]
 8013f88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013f8a:	f04f 0900 	mov.w	r9, #0
 8013f8e:	e7db      	b.n	8013f48 <_printf_float+0x154>
 8013f90:	b913      	cbnz	r3, 8013f98 <_printf_float+0x1a4>
 8013f92:	6822      	ldr	r2, [r4, #0]
 8013f94:	07d2      	lsls	r2, r2, #31
 8013f96:	d501      	bpl.n	8013f9c <_printf_float+0x1a8>
 8013f98:	3302      	adds	r3, #2
 8013f9a:	e7f4      	b.n	8013f86 <_printf_float+0x192>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e7f2      	b.n	8013f86 <_printf_float+0x192>
 8013fa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013fa6:	4299      	cmp	r1, r3
 8013fa8:	db05      	blt.n	8013fb6 <_printf_float+0x1c2>
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	6121      	str	r1, [r4, #16]
 8013fae:	07d8      	lsls	r0, r3, #31
 8013fb0:	d5ea      	bpl.n	8013f88 <_printf_float+0x194>
 8013fb2:	1c4b      	adds	r3, r1, #1
 8013fb4:	e7e7      	b.n	8013f86 <_printf_float+0x192>
 8013fb6:	2900      	cmp	r1, #0
 8013fb8:	bfd4      	ite	le
 8013fba:	f1c1 0202 	rsble	r2, r1, #2
 8013fbe:	2201      	movgt	r2, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	e7e0      	b.n	8013f86 <_printf_float+0x192>
 8013fc4:	6823      	ldr	r3, [r4, #0]
 8013fc6:	055a      	lsls	r2, r3, #21
 8013fc8:	d407      	bmi.n	8013fda <_printf_float+0x1e6>
 8013fca:	6923      	ldr	r3, [r4, #16]
 8013fcc:	4642      	mov	r2, r8
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b8      	blx	r7
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	d12b      	bne.n	8014030 <_printf_float+0x23c>
 8013fd8:	e767      	b.n	8013eaa <_printf_float+0xb6>
 8013fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013fde:	f240 80dd 	bls.w	801419c <_printf_float+0x3a8>
 8013fe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f7ec fd55 	bl	8000a98 <__aeabi_dcmpeq>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	d033      	beq.n	801405a <_printf_float+0x266>
 8013ff2:	4a37      	ldr	r2, [pc, #220]	@ (80140d0 <_printf_float+0x2dc>)
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	4631      	mov	r1, r6
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	47b8      	blx	r7
 8013ffc:	3001      	adds	r0, #1
 8013ffe:	f43f af54 	beq.w	8013eaa <_printf_float+0xb6>
 8014002:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014006:	4543      	cmp	r3, r8
 8014008:	db02      	blt.n	8014010 <_printf_float+0x21c>
 801400a:	6823      	ldr	r3, [r4, #0]
 801400c:	07d8      	lsls	r0, r3, #31
 801400e:	d50f      	bpl.n	8014030 <_printf_float+0x23c>
 8014010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014014:	4631      	mov	r1, r6
 8014016:	4628      	mov	r0, r5
 8014018:	47b8      	blx	r7
 801401a:	3001      	adds	r0, #1
 801401c:	f43f af45 	beq.w	8013eaa <_printf_float+0xb6>
 8014020:	f04f 0900 	mov.w	r9, #0
 8014024:	f108 38ff 	add.w	r8, r8, #4294967295
 8014028:	f104 0a1a 	add.w	sl, r4, #26
 801402c:	45c8      	cmp	r8, r9
 801402e:	dc09      	bgt.n	8014044 <_printf_float+0x250>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	079b      	lsls	r3, r3, #30
 8014034:	f100 8103 	bmi.w	801423e <_printf_float+0x44a>
 8014038:	68e0      	ldr	r0, [r4, #12]
 801403a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801403c:	4298      	cmp	r0, r3
 801403e:	bfb8      	it	lt
 8014040:	4618      	movlt	r0, r3
 8014042:	e734      	b.n	8013eae <_printf_float+0xba>
 8014044:	2301      	movs	r3, #1
 8014046:	4652      	mov	r2, sl
 8014048:	4631      	mov	r1, r6
 801404a:	4628      	mov	r0, r5
 801404c:	47b8      	blx	r7
 801404e:	3001      	adds	r0, #1
 8014050:	f43f af2b 	beq.w	8013eaa <_printf_float+0xb6>
 8014054:	f109 0901 	add.w	r9, r9, #1
 8014058:	e7e8      	b.n	801402c <_printf_float+0x238>
 801405a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405c:	2b00      	cmp	r3, #0
 801405e:	dc39      	bgt.n	80140d4 <_printf_float+0x2e0>
 8014060:	4a1b      	ldr	r2, [pc, #108]	@ (80140d0 <_printf_float+0x2dc>)
 8014062:	2301      	movs	r3, #1
 8014064:	4631      	mov	r1, r6
 8014066:	4628      	mov	r0, r5
 8014068:	47b8      	blx	r7
 801406a:	3001      	adds	r0, #1
 801406c:	f43f af1d 	beq.w	8013eaa <_printf_float+0xb6>
 8014070:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014074:	ea59 0303 	orrs.w	r3, r9, r3
 8014078:	d102      	bne.n	8014080 <_printf_float+0x28c>
 801407a:	6823      	ldr	r3, [r4, #0]
 801407c:	07d9      	lsls	r1, r3, #31
 801407e:	d5d7      	bpl.n	8014030 <_printf_float+0x23c>
 8014080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014084:	4631      	mov	r1, r6
 8014086:	4628      	mov	r0, r5
 8014088:	47b8      	blx	r7
 801408a:	3001      	adds	r0, #1
 801408c:	f43f af0d 	beq.w	8013eaa <_printf_float+0xb6>
 8014090:	f04f 0a00 	mov.w	sl, #0
 8014094:	f104 0b1a 	add.w	fp, r4, #26
 8014098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801409a:	425b      	negs	r3, r3
 801409c:	4553      	cmp	r3, sl
 801409e:	dc01      	bgt.n	80140a4 <_printf_float+0x2b0>
 80140a0:	464b      	mov	r3, r9
 80140a2:	e793      	b.n	8013fcc <_printf_float+0x1d8>
 80140a4:	2301      	movs	r3, #1
 80140a6:	465a      	mov	r2, fp
 80140a8:	4631      	mov	r1, r6
 80140aa:	4628      	mov	r0, r5
 80140ac:	47b8      	blx	r7
 80140ae:	3001      	adds	r0, #1
 80140b0:	f43f aefb 	beq.w	8013eaa <_printf_float+0xb6>
 80140b4:	f10a 0a01 	add.w	sl, sl, #1
 80140b8:	e7ee      	b.n	8014098 <_printf_float+0x2a4>
 80140ba:	bf00      	nop
 80140bc:	7fefffff 	.word	0x7fefffff
 80140c0:	08019ccf 	.word	0x08019ccf
 80140c4:	08019cd3 	.word	0x08019cd3
 80140c8:	08019cd7 	.word	0x08019cd7
 80140cc:	08019cdb 	.word	0x08019cdb
 80140d0:	0801a1aa 	.word	0x0801a1aa
 80140d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80140d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80140da:	4553      	cmp	r3, sl
 80140dc:	bfa8      	it	ge
 80140de:	4653      	movge	r3, sl
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	4699      	mov	r9, r3
 80140e4:	dc36      	bgt.n	8014154 <_printf_float+0x360>
 80140e6:	f04f 0b00 	mov.w	fp, #0
 80140ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140ee:	f104 021a 	add.w	r2, r4, #26
 80140f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80140f4:	9306      	str	r3, [sp, #24]
 80140f6:	eba3 0309 	sub.w	r3, r3, r9
 80140fa:	455b      	cmp	r3, fp
 80140fc:	dc31      	bgt.n	8014162 <_printf_float+0x36e>
 80140fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014100:	459a      	cmp	sl, r3
 8014102:	dc3a      	bgt.n	801417a <_printf_float+0x386>
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	07da      	lsls	r2, r3, #31
 8014108:	d437      	bmi.n	801417a <_printf_float+0x386>
 801410a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801410c:	ebaa 0903 	sub.w	r9, sl, r3
 8014110:	9b06      	ldr	r3, [sp, #24]
 8014112:	ebaa 0303 	sub.w	r3, sl, r3
 8014116:	4599      	cmp	r9, r3
 8014118:	bfa8      	it	ge
 801411a:	4699      	movge	r9, r3
 801411c:	f1b9 0f00 	cmp.w	r9, #0
 8014120:	dc33      	bgt.n	801418a <_printf_float+0x396>
 8014122:	f04f 0800 	mov.w	r8, #0
 8014126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801412a:	f104 0b1a 	add.w	fp, r4, #26
 801412e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014130:	ebaa 0303 	sub.w	r3, sl, r3
 8014134:	eba3 0309 	sub.w	r3, r3, r9
 8014138:	4543      	cmp	r3, r8
 801413a:	f77f af79 	ble.w	8014030 <_printf_float+0x23c>
 801413e:	2301      	movs	r3, #1
 8014140:	465a      	mov	r2, fp
 8014142:	4631      	mov	r1, r6
 8014144:	4628      	mov	r0, r5
 8014146:	47b8      	blx	r7
 8014148:	3001      	adds	r0, #1
 801414a:	f43f aeae 	beq.w	8013eaa <_printf_float+0xb6>
 801414e:	f108 0801 	add.w	r8, r8, #1
 8014152:	e7ec      	b.n	801412e <_printf_float+0x33a>
 8014154:	4642      	mov	r2, r8
 8014156:	4631      	mov	r1, r6
 8014158:	4628      	mov	r0, r5
 801415a:	47b8      	blx	r7
 801415c:	3001      	adds	r0, #1
 801415e:	d1c2      	bne.n	80140e6 <_printf_float+0x2f2>
 8014160:	e6a3      	b.n	8013eaa <_printf_float+0xb6>
 8014162:	2301      	movs	r3, #1
 8014164:	4631      	mov	r1, r6
 8014166:	4628      	mov	r0, r5
 8014168:	9206      	str	r2, [sp, #24]
 801416a:	47b8      	blx	r7
 801416c:	3001      	adds	r0, #1
 801416e:	f43f ae9c 	beq.w	8013eaa <_printf_float+0xb6>
 8014172:	9a06      	ldr	r2, [sp, #24]
 8014174:	f10b 0b01 	add.w	fp, fp, #1
 8014178:	e7bb      	b.n	80140f2 <_printf_float+0x2fe>
 801417a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801417e:	4631      	mov	r1, r6
 8014180:	4628      	mov	r0, r5
 8014182:	47b8      	blx	r7
 8014184:	3001      	adds	r0, #1
 8014186:	d1c0      	bne.n	801410a <_printf_float+0x316>
 8014188:	e68f      	b.n	8013eaa <_printf_float+0xb6>
 801418a:	9a06      	ldr	r2, [sp, #24]
 801418c:	464b      	mov	r3, r9
 801418e:	4442      	add	r2, r8
 8014190:	4631      	mov	r1, r6
 8014192:	4628      	mov	r0, r5
 8014194:	47b8      	blx	r7
 8014196:	3001      	adds	r0, #1
 8014198:	d1c3      	bne.n	8014122 <_printf_float+0x32e>
 801419a:	e686      	b.n	8013eaa <_printf_float+0xb6>
 801419c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80141a0:	f1ba 0f01 	cmp.w	sl, #1
 80141a4:	dc01      	bgt.n	80141aa <_printf_float+0x3b6>
 80141a6:	07db      	lsls	r3, r3, #31
 80141a8:	d536      	bpl.n	8014218 <_printf_float+0x424>
 80141aa:	2301      	movs	r3, #1
 80141ac:	4642      	mov	r2, r8
 80141ae:	4631      	mov	r1, r6
 80141b0:	4628      	mov	r0, r5
 80141b2:	47b8      	blx	r7
 80141b4:	3001      	adds	r0, #1
 80141b6:	f43f ae78 	beq.w	8013eaa <_printf_float+0xb6>
 80141ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141be:	4631      	mov	r1, r6
 80141c0:	4628      	mov	r0, r5
 80141c2:	47b8      	blx	r7
 80141c4:	3001      	adds	r0, #1
 80141c6:	f43f ae70 	beq.w	8013eaa <_printf_float+0xb6>
 80141ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80141ce:	2200      	movs	r2, #0
 80141d0:	2300      	movs	r3, #0
 80141d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80141d6:	f7ec fc5f 	bl	8000a98 <__aeabi_dcmpeq>
 80141da:	b9c0      	cbnz	r0, 801420e <_printf_float+0x41a>
 80141dc:	4653      	mov	r3, sl
 80141de:	f108 0201 	add.w	r2, r8, #1
 80141e2:	4631      	mov	r1, r6
 80141e4:	4628      	mov	r0, r5
 80141e6:	47b8      	blx	r7
 80141e8:	3001      	adds	r0, #1
 80141ea:	d10c      	bne.n	8014206 <_printf_float+0x412>
 80141ec:	e65d      	b.n	8013eaa <_printf_float+0xb6>
 80141ee:	2301      	movs	r3, #1
 80141f0:	465a      	mov	r2, fp
 80141f2:	4631      	mov	r1, r6
 80141f4:	4628      	mov	r0, r5
 80141f6:	47b8      	blx	r7
 80141f8:	3001      	adds	r0, #1
 80141fa:	f43f ae56 	beq.w	8013eaa <_printf_float+0xb6>
 80141fe:	f108 0801 	add.w	r8, r8, #1
 8014202:	45d0      	cmp	r8, sl
 8014204:	dbf3      	blt.n	80141ee <_printf_float+0x3fa>
 8014206:	464b      	mov	r3, r9
 8014208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801420c:	e6df      	b.n	8013fce <_printf_float+0x1da>
 801420e:	f04f 0800 	mov.w	r8, #0
 8014212:	f104 0b1a 	add.w	fp, r4, #26
 8014216:	e7f4      	b.n	8014202 <_printf_float+0x40e>
 8014218:	2301      	movs	r3, #1
 801421a:	4642      	mov	r2, r8
 801421c:	e7e1      	b.n	80141e2 <_printf_float+0x3ee>
 801421e:	2301      	movs	r3, #1
 8014220:	464a      	mov	r2, r9
 8014222:	4631      	mov	r1, r6
 8014224:	4628      	mov	r0, r5
 8014226:	47b8      	blx	r7
 8014228:	3001      	adds	r0, #1
 801422a:	f43f ae3e 	beq.w	8013eaa <_printf_float+0xb6>
 801422e:	f108 0801 	add.w	r8, r8, #1
 8014232:	68e3      	ldr	r3, [r4, #12]
 8014234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014236:	1a5b      	subs	r3, r3, r1
 8014238:	4543      	cmp	r3, r8
 801423a:	dcf0      	bgt.n	801421e <_printf_float+0x42a>
 801423c:	e6fc      	b.n	8014038 <_printf_float+0x244>
 801423e:	f04f 0800 	mov.w	r8, #0
 8014242:	f104 0919 	add.w	r9, r4, #25
 8014246:	e7f4      	b.n	8014232 <_printf_float+0x43e>

08014248 <_printf_common>:
 8014248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801424c:	4616      	mov	r6, r2
 801424e:	4698      	mov	r8, r3
 8014250:	688a      	ldr	r2, [r1, #8]
 8014252:	690b      	ldr	r3, [r1, #16]
 8014254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014258:	4293      	cmp	r3, r2
 801425a:	bfb8      	it	lt
 801425c:	4613      	movlt	r3, r2
 801425e:	6033      	str	r3, [r6, #0]
 8014260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014264:	4607      	mov	r7, r0
 8014266:	460c      	mov	r4, r1
 8014268:	b10a      	cbz	r2, 801426e <_printf_common+0x26>
 801426a:	3301      	adds	r3, #1
 801426c:	6033      	str	r3, [r6, #0]
 801426e:	6823      	ldr	r3, [r4, #0]
 8014270:	0699      	lsls	r1, r3, #26
 8014272:	bf42      	ittt	mi
 8014274:	6833      	ldrmi	r3, [r6, #0]
 8014276:	3302      	addmi	r3, #2
 8014278:	6033      	strmi	r3, [r6, #0]
 801427a:	6825      	ldr	r5, [r4, #0]
 801427c:	f015 0506 	ands.w	r5, r5, #6
 8014280:	d106      	bne.n	8014290 <_printf_common+0x48>
 8014282:	f104 0a19 	add.w	sl, r4, #25
 8014286:	68e3      	ldr	r3, [r4, #12]
 8014288:	6832      	ldr	r2, [r6, #0]
 801428a:	1a9b      	subs	r3, r3, r2
 801428c:	42ab      	cmp	r3, r5
 801428e:	dc26      	bgt.n	80142de <_printf_common+0x96>
 8014290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014294:	6822      	ldr	r2, [r4, #0]
 8014296:	3b00      	subs	r3, #0
 8014298:	bf18      	it	ne
 801429a:	2301      	movne	r3, #1
 801429c:	0692      	lsls	r2, r2, #26
 801429e:	d42b      	bmi.n	80142f8 <_printf_common+0xb0>
 80142a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80142a4:	4641      	mov	r1, r8
 80142a6:	4638      	mov	r0, r7
 80142a8:	47c8      	blx	r9
 80142aa:	3001      	adds	r0, #1
 80142ac:	d01e      	beq.n	80142ec <_printf_common+0xa4>
 80142ae:	6823      	ldr	r3, [r4, #0]
 80142b0:	6922      	ldr	r2, [r4, #16]
 80142b2:	f003 0306 	and.w	r3, r3, #6
 80142b6:	2b04      	cmp	r3, #4
 80142b8:	bf02      	ittt	eq
 80142ba:	68e5      	ldreq	r5, [r4, #12]
 80142bc:	6833      	ldreq	r3, [r6, #0]
 80142be:	1aed      	subeq	r5, r5, r3
 80142c0:	68a3      	ldr	r3, [r4, #8]
 80142c2:	bf0c      	ite	eq
 80142c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142c8:	2500      	movne	r5, #0
 80142ca:	4293      	cmp	r3, r2
 80142cc:	bfc4      	itt	gt
 80142ce:	1a9b      	subgt	r3, r3, r2
 80142d0:	18ed      	addgt	r5, r5, r3
 80142d2:	2600      	movs	r6, #0
 80142d4:	341a      	adds	r4, #26
 80142d6:	42b5      	cmp	r5, r6
 80142d8:	d11a      	bne.n	8014310 <_printf_common+0xc8>
 80142da:	2000      	movs	r0, #0
 80142dc:	e008      	b.n	80142f0 <_printf_common+0xa8>
 80142de:	2301      	movs	r3, #1
 80142e0:	4652      	mov	r2, sl
 80142e2:	4641      	mov	r1, r8
 80142e4:	4638      	mov	r0, r7
 80142e6:	47c8      	blx	r9
 80142e8:	3001      	adds	r0, #1
 80142ea:	d103      	bne.n	80142f4 <_printf_common+0xac>
 80142ec:	f04f 30ff 	mov.w	r0, #4294967295
 80142f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142f4:	3501      	adds	r5, #1
 80142f6:	e7c6      	b.n	8014286 <_printf_common+0x3e>
 80142f8:	18e1      	adds	r1, r4, r3
 80142fa:	1c5a      	adds	r2, r3, #1
 80142fc:	2030      	movs	r0, #48	@ 0x30
 80142fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014302:	4422      	add	r2, r4
 8014304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801430c:	3302      	adds	r3, #2
 801430e:	e7c7      	b.n	80142a0 <_printf_common+0x58>
 8014310:	2301      	movs	r3, #1
 8014312:	4622      	mov	r2, r4
 8014314:	4641      	mov	r1, r8
 8014316:	4638      	mov	r0, r7
 8014318:	47c8      	blx	r9
 801431a:	3001      	adds	r0, #1
 801431c:	d0e6      	beq.n	80142ec <_printf_common+0xa4>
 801431e:	3601      	adds	r6, #1
 8014320:	e7d9      	b.n	80142d6 <_printf_common+0x8e>
	...

08014324 <_printf_i>:
 8014324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014328:	7e0f      	ldrb	r7, [r1, #24]
 801432a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801432c:	2f78      	cmp	r7, #120	@ 0x78
 801432e:	4691      	mov	r9, r2
 8014330:	4680      	mov	r8, r0
 8014332:	460c      	mov	r4, r1
 8014334:	469a      	mov	sl, r3
 8014336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801433a:	d807      	bhi.n	801434c <_printf_i+0x28>
 801433c:	2f62      	cmp	r7, #98	@ 0x62
 801433e:	d80a      	bhi.n	8014356 <_printf_i+0x32>
 8014340:	2f00      	cmp	r7, #0
 8014342:	f000 80d2 	beq.w	80144ea <_printf_i+0x1c6>
 8014346:	2f58      	cmp	r7, #88	@ 0x58
 8014348:	f000 80b9 	beq.w	80144be <_printf_i+0x19a>
 801434c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014354:	e03a      	b.n	80143cc <_printf_i+0xa8>
 8014356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801435a:	2b15      	cmp	r3, #21
 801435c:	d8f6      	bhi.n	801434c <_printf_i+0x28>
 801435e:	a101      	add	r1, pc, #4	@ (adr r1, 8014364 <_printf_i+0x40>)
 8014360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014364:	080143bd 	.word	0x080143bd
 8014368:	080143d1 	.word	0x080143d1
 801436c:	0801434d 	.word	0x0801434d
 8014370:	0801434d 	.word	0x0801434d
 8014374:	0801434d 	.word	0x0801434d
 8014378:	0801434d 	.word	0x0801434d
 801437c:	080143d1 	.word	0x080143d1
 8014380:	0801434d 	.word	0x0801434d
 8014384:	0801434d 	.word	0x0801434d
 8014388:	0801434d 	.word	0x0801434d
 801438c:	0801434d 	.word	0x0801434d
 8014390:	080144d1 	.word	0x080144d1
 8014394:	080143fb 	.word	0x080143fb
 8014398:	0801448b 	.word	0x0801448b
 801439c:	0801434d 	.word	0x0801434d
 80143a0:	0801434d 	.word	0x0801434d
 80143a4:	080144f3 	.word	0x080144f3
 80143a8:	0801434d 	.word	0x0801434d
 80143ac:	080143fb 	.word	0x080143fb
 80143b0:	0801434d 	.word	0x0801434d
 80143b4:	0801434d 	.word	0x0801434d
 80143b8:	08014493 	.word	0x08014493
 80143bc:	6833      	ldr	r3, [r6, #0]
 80143be:	1d1a      	adds	r2, r3, #4
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6032      	str	r2, [r6, #0]
 80143c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80143c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80143cc:	2301      	movs	r3, #1
 80143ce:	e09d      	b.n	801450c <_printf_i+0x1e8>
 80143d0:	6833      	ldr	r3, [r6, #0]
 80143d2:	6820      	ldr	r0, [r4, #0]
 80143d4:	1d19      	adds	r1, r3, #4
 80143d6:	6031      	str	r1, [r6, #0]
 80143d8:	0606      	lsls	r6, r0, #24
 80143da:	d501      	bpl.n	80143e0 <_printf_i+0xbc>
 80143dc:	681d      	ldr	r5, [r3, #0]
 80143de:	e003      	b.n	80143e8 <_printf_i+0xc4>
 80143e0:	0645      	lsls	r5, r0, #25
 80143e2:	d5fb      	bpl.n	80143dc <_printf_i+0xb8>
 80143e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80143e8:	2d00      	cmp	r5, #0
 80143ea:	da03      	bge.n	80143f4 <_printf_i+0xd0>
 80143ec:	232d      	movs	r3, #45	@ 0x2d
 80143ee:	426d      	negs	r5, r5
 80143f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143f4:	4859      	ldr	r0, [pc, #356]	@ (801455c <_printf_i+0x238>)
 80143f6:	230a      	movs	r3, #10
 80143f8:	e011      	b.n	801441e <_printf_i+0xfa>
 80143fa:	6821      	ldr	r1, [r4, #0]
 80143fc:	6833      	ldr	r3, [r6, #0]
 80143fe:	0608      	lsls	r0, r1, #24
 8014400:	f853 5b04 	ldr.w	r5, [r3], #4
 8014404:	d402      	bmi.n	801440c <_printf_i+0xe8>
 8014406:	0649      	lsls	r1, r1, #25
 8014408:	bf48      	it	mi
 801440a:	b2ad      	uxthmi	r5, r5
 801440c:	2f6f      	cmp	r7, #111	@ 0x6f
 801440e:	4853      	ldr	r0, [pc, #332]	@ (801455c <_printf_i+0x238>)
 8014410:	6033      	str	r3, [r6, #0]
 8014412:	bf14      	ite	ne
 8014414:	230a      	movne	r3, #10
 8014416:	2308      	moveq	r3, #8
 8014418:	2100      	movs	r1, #0
 801441a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801441e:	6866      	ldr	r6, [r4, #4]
 8014420:	60a6      	str	r6, [r4, #8]
 8014422:	2e00      	cmp	r6, #0
 8014424:	bfa2      	ittt	ge
 8014426:	6821      	ldrge	r1, [r4, #0]
 8014428:	f021 0104 	bicge.w	r1, r1, #4
 801442c:	6021      	strge	r1, [r4, #0]
 801442e:	b90d      	cbnz	r5, 8014434 <_printf_i+0x110>
 8014430:	2e00      	cmp	r6, #0
 8014432:	d04b      	beq.n	80144cc <_printf_i+0x1a8>
 8014434:	4616      	mov	r6, r2
 8014436:	fbb5 f1f3 	udiv	r1, r5, r3
 801443a:	fb03 5711 	mls	r7, r3, r1, r5
 801443e:	5dc7      	ldrb	r7, [r0, r7]
 8014440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014444:	462f      	mov	r7, r5
 8014446:	42bb      	cmp	r3, r7
 8014448:	460d      	mov	r5, r1
 801444a:	d9f4      	bls.n	8014436 <_printf_i+0x112>
 801444c:	2b08      	cmp	r3, #8
 801444e:	d10b      	bne.n	8014468 <_printf_i+0x144>
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	07df      	lsls	r7, r3, #31
 8014454:	d508      	bpl.n	8014468 <_printf_i+0x144>
 8014456:	6923      	ldr	r3, [r4, #16]
 8014458:	6861      	ldr	r1, [r4, #4]
 801445a:	4299      	cmp	r1, r3
 801445c:	bfde      	ittt	le
 801445e:	2330      	movle	r3, #48	@ 0x30
 8014460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014468:	1b92      	subs	r2, r2, r6
 801446a:	6122      	str	r2, [r4, #16]
 801446c:	f8cd a000 	str.w	sl, [sp]
 8014470:	464b      	mov	r3, r9
 8014472:	aa03      	add	r2, sp, #12
 8014474:	4621      	mov	r1, r4
 8014476:	4640      	mov	r0, r8
 8014478:	f7ff fee6 	bl	8014248 <_printf_common>
 801447c:	3001      	adds	r0, #1
 801447e:	d14a      	bne.n	8014516 <_printf_i+0x1f2>
 8014480:	f04f 30ff 	mov.w	r0, #4294967295
 8014484:	b004      	add	sp, #16
 8014486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	f043 0320 	orr.w	r3, r3, #32
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	4833      	ldr	r0, [pc, #204]	@ (8014560 <_printf_i+0x23c>)
 8014494:	2778      	movs	r7, #120	@ 0x78
 8014496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801449a:	6823      	ldr	r3, [r4, #0]
 801449c:	6831      	ldr	r1, [r6, #0]
 801449e:	061f      	lsls	r7, r3, #24
 80144a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80144a4:	d402      	bmi.n	80144ac <_printf_i+0x188>
 80144a6:	065f      	lsls	r7, r3, #25
 80144a8:	bf48      	it	mi
 80144aa:	b2ad      	uxthmi	r5, r5
 80144ac:	6031      	str	r1, [r6, #0]
 80144ae:	07d9      	lsls	r1, r3, #31
 80144b0:	bf44      	itt	mi
 80144b2:	f043 0320 	orrmi.w	r3, r3, #32
 80144b6:	6023      	strmi	r3, [r4, #0]
 80144b8:	b11d      	cbz	r5, 80144c2 <_printf_i+0x19e>
 80144ba:	2310      	movs	r3, #16
 80144bc:	e7ac      	b.n	8014418 <_printf_i+0xf4>
 80144be:	4827      	ldr	r0, [pc, #156]	@ (801455c <_printf_i+0x238>)
 80144c0:	e7e9      	b.n	8014496 <_printf_i+0x172>
 80144c2:	6823      	ldr	r3, [r4, #0]
 80144c4:	f023 0320 	bic.w	r3, r3, #32
 80144c8:	6023      	str	r3, [r4, #0]
 80144ca:	e7f6      	b.n	80144ba <_printf_i+0x196>
 80144cc:	4616      	mov	r6, r2
 80144ce:	e7bd      	b.n	801444c <_printf_i+0x128>
 80144d0:	6833      	ldr	r3, [r6, #0]
 80144d2:	6825      	ldr	r5, [r4, #0]
 80144d4:	6961      	ldr	r1, [r4, #20]
 80144d6:	1d18      	adds	r0, r3, #4
 80144d8:	6030      	str	r0, [r6, #0]
 80144da:	062e      	lsls	r6, r5, #24
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	d501      	bpl.n	80144e4 <_printf_i+0x1c0>
 80144e0:	6019      	str	r1, [r3, #0]
 80144e2:	e002      	b.n	80144ea <_printf_i+0x1c6>
 80144e4:	0668      	lsls	r0, r5, #25
 80144e6:	d5fb      	bpl.n	80144e0 <_printf_i+0x1bc>
 80144e8:	8019      	strh	r1, [r3, #0]
 80144ea:	2300      	movs	r3, #0
 80144ec:	6123      	str	r3, [r4, #16]
 80144ee:	4616      	mov	r6, r2
 80144f0:	e7bc      	b.n	801446c <_printf_i+0x148>
 80144f2:	6833      	ldr	r3, [r6, #0]
 80144f4:	1d1a      	adds	r2, r3, #4
 80144f6:	6032      	str	r2, [r6, #0]
 80144f8:	681e      	ldr	r6, [r3, #0]
 80144fa:	6862      	ldr	r2, [r4, #4]
 80144fc:	2100      	movs	r1, #0
 80144fe:	4630      	mov	r0, r6
 8014500:	f7eb fe4e 	bl	80001a0 <memchr>
 8014504:	b108      	cbz	r0, 801450a <_printf_i+0x1e6>
 8014506:	1b80      	subs	r0, r0, r6
 8014508:	6060      	str	r0, [r4, #4]
 801450a:	6863      	ldr	r3, [r4, #4]
 801450c:	6123      	str	r3, [r4, #16]
 801450e:	2300      	movs	r3, #0
 8014510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014514:	e7aa      	b.n	801446c <_printf_i+0x148>
 8014516:	6923      	ldr	r3, [r4, #16]
 8014518:	4632      	mov	r2, r6
 801451a:	4649      	mov	r1, r9
 801451c:	4640      	mov	r0, r8
 801451e:	47d0      	blx	sl
 8014520:	3001      	adds	r0, #1
 8014522:	d0ad      	beq.n	8014480 <_printf_i+0x15c>
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	079b      	lsls	r3, r3, #30
 8014528:	d413      	bmi.n	8014552 <_printf_i+0x22e>
 801452a:	68e0      	ldr	r0, [r4, #12]
 801452c:	9b03      	ldr	r3, [sp, #12]
 801452e:	4298      	cmp	r0, r3
 8014530:	bfb8      	it	lt
 8014532:	4618      	movlt	r0, r3
 8014534:	e7a6      	b.n	8014484 <_printf_i+0x160>
 8014536:	2301      	movs	r3, #1
 8014538:	4632      	mov	r2, r6
 801453a:	4649      	mov	r1, r9
 801453c:	4640      	mov	r0, r8
 801453e:	47d0      	blx	sl
 8014540:	3001      	adds	r0, #1
 8014542:	d09d      	beq.n	8014480 <_printf_i+0x15c>
 8014544:	3501      	adds	r5, #1
 8014546:	68e3      	ldr	r3, [r4, #12]
 8014548:	9903      	ldr	r1, [sp, #12]
 801454a:	1a5b      	subs	r3, r3, r1
 801454c:	42ab      	cmp	r3, r5
 801454e:	dcf2      	bgt.n	8014536 <_printf_i+0x212>
 8014550:	e7eb      	b.n	801452a <_printf_i+0x206>
 8014552:	2500      	movs	r5, #0
 8014554:	f104 0619 	add.w	r6, r4, #25
 8014558:	e7f5      	b.n	8014546 <_printf_i+0x222>
 801455a:	bf00      	nop
 801455c:	08019cdf 	.word	0x08019cdf
 8014560:	08019cf0 	.word	0x08019cf0

08014564 <std>:
 8014564:	2300      	movs	r3, #0
 8014566:	b510      	push	{r4, lr}
 8014568:	4604      	mov	r4, r0
 801456a:	e9c0 3300 	strd	r3, r3, [r0]
 801456e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014572:	6083      	str	r3, [r0, #8]
 8014574:	8181      	strh	r1, [r0, #12]
 8014576:	6643      	str	r3, [r0, #100]	@ 0x64
 8014578:	81c2      	strh	r2, [r0, #14]
 801457a:	6183      	str	r3, [r0, #24]
 801457c:	4619      	mov	r1, r3
 801457e:	2208      	movs	r2, #8
 8014580:	305c      	adds	r0, #92	@ 0x5c
 8014582:	f000 f916 	bl	80147b2 <memset>
 8014586:	4b0d      	ldr	r3, [pc, #52]	@ (80145bc <std+0x58>)
 8014588:	6263      	str	r3, [r4, #36]	@ 0x24
 801458a:	4b0d      	ldr	r3, [pc, #52]	@ (80145c0 <std+0x5c>)
 801458c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801458e:	4b0d      	ldr	r3, [pc, #52]	@ (80145c4 <std+0x60>)
 8014590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014592:	4b0d      	ldr	r3, [pc, #52]	@ (80145c8 <std+0x64>)
 8014594:	6323      	str	r3, [r4, #48]	@ 0x30
 8014596:	4b0d      	ldr	r3, [pc, #52]	@ (80145cc <std+0x68>)
 8014598:	6224      	str	r4, [r4, #32]
 801459a:	429c      	cmp	r4, r3
 801459c:	d006      	beq.n	80145ac <std+0x48>
 801459e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145a2:	4294      	cmp	r4, r2
 80145a4:	d002      	beq.n	80145ac <std+0x48>
 80145a6:	33d0      	adds	r3, #208	@ 0xd0
 80145a8:	429c      	cmp	r4, r3
 80145aa:	d105      	bne.n	80145b8 <std+0x54>
 80145ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80145b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145b4:	f000 bfe8 	b.w	8015588 <__retarget_lock_init_recursive>
 80145b8:	bd10      	pop	{r4, pc}
 80145ba:	bf00      	nop
 80145bc:	08014729 	.word	0x08014729
 80145c0:	0801474f 	.word	0x0801474f
 80145c4:	08014787 	.word	0x08014787
 80145c8:	080147ab 	.word	0x080147ab
 80145cc:	2000a794 	.word	0x2000a794

080145d0 <stdio_exit_handler>:
 80145d0:	4a02      	ldr	r2, [pc, #8]	@ (80145dc <stdio_exit_handler+0xc>)
 80145d2:	4903      	ldr	r1, [pc, #12]	@ (80145e0 <stdio_exit_handler+0x10>)
 80145d4:	4803      	ldr	r0, [pc, #12]	@ (80145e4 <stdio_exit_handler+0x14>)
 80145d6:	f000 b869 	b.w	80146ac <_fwalk_sglue>
 80145da:	bf00      	nop
 80145dc:	20000020 	.word	0x20000020
 80145e0:	080170f1 	.word	0x080170f1
 80145e4:	20000038 	.word	0x20000038

080145e8 <cleanup_stdio>:
 80145e8:	6841      	ldr	r1, [r0, #4]
 80145ea:	4b0c      	ldr	r3, [pc, #48]	@ (801461c <cleanup_stdio+0x34>)
 80145ec:	4299      	cmp	r1, r3
 80145ee:	b510      	push	{r4, lr}
 80145f0:	4604      	mov	r4, r0
 80145f2:	d001      	beq.n	80145f8 <cleanup_stdio+0x10>
 80145f4:	f002 fd7c 	bl	80170f0 <_fflush_r>
 80145f8:	68a1      	ldr	r1, [r4, #8]
 80145fa:	4b09      	ldr	r3, [pc, #36]	@ (8014620 <cleanup_stdio+0x38>)
 80145fc:	4299      	cmp	r1, r3
 80145fe:	d002      	beq.n	8014606 <cleanup_stdio+0x1e>
 8014600:	4620      	mov	r0, r4
 8014602:	f002 fd75 	bl	80170f0 <_fflush_r>
 8014606:	68e1      	ldr	r1, [r4, #12]
 8014608:	4b06      	ldr	r3, [pc, #24]	@ (8014624 <cleanup_stdio+0x3c>)
 801460a:	4299      	cmp	r1, r3
 801460c:	d004      	beq.n	8014618 <cleanup_stdio+0x30>
 801460e:	4620      	mov	r0, r4
 8014610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014614:	f002 bd6c 	b.w	80170f0 <_fflush_r>
 8014618:	bd10      	pop	{r4, pc}
 801461a:	bf00      	nop
 801461c:	2000a794 	.word	0x2000a794
 8014620:	2000a7fc 	.word	0x2000a7fc
 8014624:	2000a864 	.word	0x2000a864

08014628 <global_stdio_init.part.0>:
 8014628:	b510      	push	{r4, lr}
 801462a:	4b0b      	ldr	r3, [pc, #44]	@ (8014658 <global_stdio_init.part.0+0x30>)
 801462c:	4c0b      	ldr	r4, [pc, #44]	@ (801465c <global_stdio_init.part.0+0x34>)
 801462e:	4a0c      	ldr	r2, [pc, #48]	@ (8014660 <global_stdio_init.part.0+0x38>)
 8014630:	601a      	str	r2, [r3, #0]
 8014632:	4620      	mov	r0, r4
 8014634:	2200      	movs	r2, #0
 8014636:	2104      	movs	r1, #4
 8014638:	f7ff ff94 	bl	8014564 <std>
 801463c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014640:	2201      	movs	r2, #1
 8014642:	2109      	movs	r1, #9
 8014644:	f7ff ff8e 	bl	8014564 <std>
 8014648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801464c:	2202      	movs	r2, #2
 801464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014652:	2112      	movs	r1, #18
 8014654:	f7ff bf86 	b.w	8014564 <std>
 8014658:	2000a8cc 	.word	0x2000a8cc
 801465c:	2000a794 	.word	0x2000a794
 8014660:	080145d1 	.word	0x080145d1

08014664 <__sfp_lock_acquire>:
 8014664:	4801      	ldr	r0, [pc, #4]	@ (801466c <__sfp_lock_acquire+0x8>)
 8014666:	f000 bf91 	b.w	801558c <__retarget_lock_acquire_recursive>
 801466a:	bf00      	nop
 801466c:	2000a8fb 	.word	0x2000a8fb

08014670 <__sfp_lock_release>:
 8014670:	4801      	ldr	r0, [pc, #4]	@ (8014678 <__sfp_lock_release+0x8>)
 8014672:	f000 bf8d 	b.w	8015590 <__retarget_lock_release_recursive>
 8014676:	bf00      	nop
 8014678:	2000a8fb 	.word	0x2000a8fb

0801467c <__sinit>:
 801467c:	b510      	push	{r4, lr}
 801467e:	4604      	mov	r4, r0
 8014680:	f7ff fff0 	bl	8014664 <__sfp_lock_acquire>
 8014684:	6a23      	ldr	r3, [r4, #32]
 8014686:	b11b      	cbz	r3, 8014690 <__sinit+0x14>
 8014688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801468c:	f7ff bff0 	b.w	8014670 <__sfp_lock_release>
 8014690:	4b04      	ldr	r3, [pc, #16]	@ (80146a4 <__sinit+0x28>)
 8014692:	6223      	str	r3, [r4, #32]
 8014694:	4b04      	ldr	r3, [pc, #16]	@ (80146a8 <__sinit+0x2c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d1f5      	bne.n	8014688 <__sinit+0xc>
 801469c:	f7ff ffc4 	bl	8014628 <global_stdio_init.part.0>
 80146a0:	e7f2      	b.n	8014688 <__sinit+0xc>
 80146a2:	bf00      	nop
 80146a4:	080145e9 	.word	0x080145e9
 80146a8:	2000a8cc 	.word	0x2000a8cc

080146ac <_fwalk_sglue>:
 80146ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146b0:	4607      	mov	r7, r0
 80146b2:	4688      	mov	r8, r1
 80146b4:	4614      	mov	r4, r2
 80146b6:	2600      	movs	r6, #0
 80146b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146bc:	f1b9 0901 	subs.w	r9, r9, #1
 80146c0:	d505      	bpl.n	80146ce <_fwalk_sglue+0x22>
 80146c2:	6824      	ldr	r4, [r4, #0]
 80146c4:	2c00      	cmp	r4, #0
 80146c6:	d1f7      	bne.n	80146b8 <_fwalk_sglue+0xc>
 80146c8:	4630      	mov	r0, r6
 80146ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ce:	89ab      	ldrh	r3, [r5, #12]
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d907      	bls.n	80146e4 <_fwalk_sglue+0x38>
 80146d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146d8:	3301      	adds	r3, #1
 80146da:	d003      	beq.n	80146e4 <_fwalk_sglue+0x38>
 80146dc:	4629      	mov	r1, r5
 80146de:	4638      	mov	r0, r7
 80146e0:	47c0      	blx	r8
 80146e2:	4306      	orrs	r6, r0
 80146e4:	3568      	adds	r5, #104	@ 0x68
 80146e6:	e7e9      	b.n	80146bc <_fwalk_sglue+0x10>

080146e8 <siprintf>:
 80146e8:	b40e      	push	{r1, r2, r3}
 80146ea:	b500      	push	{lr}
 80146ec:	b09c      	sub	sp, #112	@ 0x70
 80146ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80146f0:	9002      	str	r0, [sp, #8]
 80146f2:	9006      	str	r0, [sp, #24]
 80146f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80146f8:	4809      	ldr	r0, [pc, #36]	@ (8014720 <siprintf+0x38>)
 80146fa:	9107      	str	r1, [sp, #28]
 80146fc:	9104      	str	r1, [sp, #16]
 80146fe:	4909      	ldr	r1, [pc, #36]	@ (8014724 <siprintf+0x3c>)
 8014700:	f853 2b04 	ldr.w	r2, [r3], #4
 8014704:	9105      	str	r1, [sp, #20]
 8014706:	6800      	ldr	r0, [r0, #0]
 8014708:	9301      	str	r3, [sp, #4]
 801470a:	a902      	add	r1, sp, #8
 801470c:	f002 fb70 	bl	8016df0 <_svfiprintf_r>
 8014710:	9b02      	ldr	r3, [sp, #8]
 8014712:	2200      	movs	r2, #0
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	b01c      	add	sp, #112	@ 0x70
 8014718:	f85d eb04 	ldr.w	lr, [sp], #4
 801471c:	b003      	add	sp, #12
 801471e:	4770      	bx	lr
 8014720:	20000034 	.word	0x20000034
 8014724:	ffff0208 	.word	0xffff0208

08014728 <__sread>:
 8014728:	b510      	push	{r4, lr}
 801472a:	460c      	mov	r4, r1
 801472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014730:	f000 fedc 	bl	80154ec <_read_r>
 8014734:	2800      	cmp	r0, #0
 8014736:	bfab      	itete	ge
 8014738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801473a:	89a3      	ldrhlt	r3, [r4, #12]
 801473c:	181b      	addge	r3, r3, r0
 801473e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014742:	bfac      	ite	ge
 8014744:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014746:	81a3      	strhlt	r3, [r4, #12]
 8014748:	bd10      	pop	{r4, pc}

0801474a <__seofread>:
 801474a:	2000      	movs	r0, #0
 801474c:	4770      	bx	lr

0801474e <__swrite>:
 801474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014752:	461f      	mov	r7, r3
 8014754:	898b      	ldrh	r3, [r1, #12]
 8014756:	05db      	lsls	r3, r3, #23
 8014758:	4605      	mov	r5, r0
 801475a:	460c      	mov	r4, r1
 801475c:	4616      	mov	r6, r2
 801475e:	d505      	bpl.n	801476c <__swrite+0x1e>
 8014760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014764:	2302      	movs	r3, #2
 8014766:	2200      	movs	r2, #0
 8014768:	f000 feae 	bl	80154c8 <_lseek_r>
 801476c:	89a3      	ldrh	r3, [r4, #12]
 801476e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014776:	81a3      	strh	r3, [r4, #12]
 8014778:	4632      	mov	r2, r6
 801477a:	463b      	mov	r3, r7
 801477c:	4628      	mov	r0, r5
 801477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014782:	f000 bec5 	b.w	8015510 <_write_r>

08014786 <__sseek>:
 8014786:	b510      	push	{r4, lr}
 8014788:	460c      	mov	r4, r1
 801478a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801478e:	f000 fe9b 	bl	80154c8 <_lseek_r>
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	bf15      	itete	ne
 8014798:	6560      	strne	r0, [r4, #84]	@ 0x54
 801479a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801479e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147a2:	81a3      	strheq	r3, [r4, #12]
 80147a4:	bf18      	it	ne
 80147a6:	81a3      	strhne	r3, [r4, #12]
 80147a8:	bd10      	pop	{r4, pc}

080147aa <__sclose>:
 80147aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ae:	f000 be7b 	b.w	80154a8 <_close_r>

080147b2 <memset>:
 80147b2:	4402      	add	r2, r0
 80147b4:	4603      	mov	r3, r0
 80147b6:	4293      	cmp	r3, r2
 80147b8:	d100      	bne.n	80147bc <memset+0xa>
 80147ba:	4770      	bx	lr
 80147bc:	f803 1b01 	strb.w	r1, [r3], #1
 80147c0:	e7f9      	b.n	80147b6 <memset+0x4>
	...

080147c4 <localtime>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4b0b      	ldr	r3, [pc, #44]	@ (80147f4 <localtime+0x30>)
 80147c8:	681d      	ldr	r5, [r3, #0]
 80147ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80147cc:	4604      	mov	r4, r0
 80147ce:	b953      	cbnz	r3, 80147e6 <localtime+0x22>
 80147d0:	2024      	movs	r0, #36	@ 0x24
 80147d2:	f001 fdf7 	bl	80163c4 <malloc>
 80147d6:	4602      	mov	r2, r0
 80147d8:	6368      	str	r0, [r5, #52]	@ 0x34
 80147da:	b920      	cbnz	r0, 80147e6 <localtime+0x22>
 80147dc:	4b06      	ldr	r3, [pc, #24]	@ (80147f8 <localtime+0x34>)
 80147de:	4807      	ldr	r0, [pc, #28]	@ (80147fc <localtime+0x38>)
 80147e0:	2132      	movs	r1, #50	@ 0x32
 80147e2:	f000 feed 	bl	80155c0 <__assert_func>
 80147e6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80147e8:	4620      	mov	r0, r4
 80147ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147ee:	f000 b807 	b.w	8014800 <localtime_r>
 80147f2:	bf00      	nop
 80147f4:	20000034 	.word	0x20000034
 80147f8:	08019c60 	.word	0x08019c60
 80147fc:	08019d01 	.word	0x08019d01

08014800 <localtime_r>:
 8014800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014804:	460c      	mov	r4, r1
 8014806:	4680      	mov	r8, r0
 8014808:	f002 fd02 	bl	8017210 <__gettzinfo>
 801480c:	4621      	mov	r1, r4
 801480e:	4605      	mov	r5, r0
 8014810:	4640      	mov	r0, r8
 8014812:	f002 fd01 	bl	8017218 <gmtime_r>
 8014816:	6943      	ldr	r3, [r0, #20]
 8014818:	0799      	lsls	r1, r3, #30
 801481a:	4604      	mov	r4, r0
 801481c:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8014820:	d106      	bne.n	8014830 <localtime_r+0x30>
 8014822:	2264      	movs	r2, #100	@ 0x64
 8014824:	fb97 f3f2 	sdiv	r3, r7, r2
 8014828:	fb02 7313 	mls	r3, r2, r3, r7
 801482c:	2b00      	cmp	r3, #0
 801482e:	d170      	bne.n	8014912 <localtime_r+0x112>
 8014830:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014834:	fb97 f3f2 	sdiv	r3, r7, r2
 8014838:	fb02 7313 	mls	r3, r2, r3, r7
 801483c:	fab3 f383 	clz	r3, r3
 8014840:	095b      	lsrs	r3, r3, #5
 8014842:	4e64      	ldr	r6, [pc, #400]	@ (80149d4 <localtime_r+0x1d4>)
 8014844:	2230      	movs	r2, #48	@ 0x30
 8014846:	fb02 6603 	mla	r6, r2, r3, r6
 801484a:	f000 fbf5 	bl	8015038 <__tz_lock>
 801484e:	f000 fbff 	bl	8015050 <_tzset_unlocked>
 8014852:	4b61      	ldr	r3, [pc, #388]	@ (80149d8 <localtime_r+0x1d8>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d06a      	beq.n	8014930 <localtime_r+0x130>
 801485a:	686b      	ldr	r3, [r5, #4]
 801485c:	42bb      	cmp	r3, r7
 801485e:	d15a      	bne.n	8014916 <localtime_r+0x116>
 8014860:	682f      	ldr	r7, [r5, #0]
 8014862:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014866:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801486a:	2f00      	cmp	r7, #0
 801486c:	d15b      	bne.n	8014926 <localtime_r+0x126>
 801486e:	4282      	cmp	r2, r0
 8014870:	eb73 0101 	sbcs.w	r1, r3, r1
 8014874:	db5e      	blt.n	8014934 <localtime_r+0x134>
 8014876:	2301      	movs	r3, #1
 8014878:	6223      	str	r3, [r4, #32]
 801487a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801487c:	6861      	ldr	r1, [r4, #4]
 801487e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8014882:	fb93 f0f2 	sdiv	r0, r3, r2
 8014886:	fb02 3310 	mls	r3, r2, r0, r3
 801488a:	223c      	movs	r2, #60	@ 0x3c
 801488c:	fb93 f5f2 	sdiv	r5, r3, r2
 8014890:	fb02 3215 	mls	r2, r2, r5, r3
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	1a9b      	subs	r3, r3, r2
 8014898:	68a2      	ldr	r2, [r4, #8]
 801489a:	6023      	str	r3, [r4, #0]
 801489c:	1b49      	subs	r1, r1, r5
 801489e:	1a12      	subs	r2, r2, r0
 80148a0:	2b3b      	cmp	r3, #59	@ 0x3b
 80148a2:	6061      	str	r1, [r4, #4]
 80148a4:	60a2      	str	r2, [r4, #8]
 80148a6:	dd51      	ble.n	801494c <localtime_r+0x14c>
 80148a8:	3101      	adds	r1, #1
 80148aa:	6061      	str	r1, [r4, #4]
 80148ac:	3b3c      	subs	r3, #60	@ 0x3c
 80148ae:	6023      	str	r3, [r4, #0]
 80148b0:	6863      	ldr	r3, [r4, #4]
 80148b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80148b4:	dd50      	ble.n	8014958 <localtime_r+0x158>
 80148b6:	3201      	adds	r2, #1
 80148b8:	60a2      	str	r2, [r4, #8]
 80148ba:	3b3c      	subs	r3, #60	@ 0x3c
 80148bc:	6063      	str	r3, [r4, #4]
 80148be:	68a3      	ldr	r3, [r4, #8]
 80148c0:	2b17      	cmp	r3, #23
 80148c2:	dd4f      	ble.n	8014964 <localtime_r+0x164>
 80148c4:	69e2      	ldr	r2, [r4, #28]
 80148c6:	3201      	adds	r2, #1
 80148c8:	61e2      	str	r2, [r4, #28]
 80148ca:	69a2      	ldr	r2, [r4, #24]
 80148cc:	3201      	adds	r2, #1
 80148ce:	2a07      	cmp	r2, #7
 80148d0:	bfa8      	it	ge
 80148d2:	2200      	movge	r2, #0
 80148d4:	61a2      	str	r2, [r4, #24]
 80148d6:	68e2      	ldr	r2, [r4, #12]
 80148d8:	3b18      	subs	r3, #24
 80148da:	3201      	adds	r2, #1
 80148dc:	60a3      	str	r3, [r4, #8]
 80148de:	6923      	ldr	r3, [r4, #16]
 80148e0:	60e2      	str	r2, [r4, #12]
 80148e2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80148e6:	428a      	cmp	r2, r1
 80148e8:	dd0e      	ble.n	8014908 <localtime_r+0x108>
 80148ea:	2b0b      	cmp	r3, #11
 80148ec:	eba2 0201 	sub.w	r2, r2, r1
 80148f0:	60e2      	str	r2, [r4, #12]
 80148f2:	f103 0201 	add.w	r2, r3, #1
 80148f6:	bf09      	itett	eq
 80148f8:	6963      	ldreq	r3, [r4, #20]
 80148fa:	6122      	strne	r2, [r4, #16]
 80148fc:	2200      	moveq	r2, #0
 80148fe:	3301      	addeq	r3, #1
 8014900:	bf02      	ittt	eq
 8014902:	6122      	streq	r2, [r4, #16]
 8014904:	6163      	streq	r3, [r4, #20]
 8014906:	61e2      	streq	r2, [r4, #28]
 8014908:	f000 fb9c 	bl	8015044 <__tz_unlock>
 801490c:	4620      	mov	r0, r4
 801490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014912:	2301      	movs	r3, #1
 8014914:	e795      	b.n	8014842 <localtime_r+0x42>
 8014916:	4638      	mov	r0, r7
 8014918:	f000 fae4 	bl	8014ee4 <__tzcalc_limits>
 801491c:	2800      	cmp	r0, #0
 801491e:	d19f      	bne.n	8014860 <localtime_r+0x60>
 8014920:	f04f 33ff 	mov.w	r3, #4294967295
 8014924:	e004      	b.n	8014930 <localtime_r+0x130>
 8014926:	4282      	cmp	r2, r0
 8014928:	eb73 0101 	sbcs.w	r1, r3, r1
 801492c:	da02      	bge.n	8014934 <localtime_r+0x134>
 801492e:	2300      	movs	r3, #0
 8014930:	6223      	str	r3, [r4, #32]
 8014932:	e009      	b.n	8014948 <localtime_r+0x148>
 8014934:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8014938:	4282      	cmp	r2, r0
 801493a:	418b      	sbcs	r3, r1
 801493c:	bfb4      	ite	lt
 801493e:	2301      	movlt	r3, #1
 8014940:	2300      	movge	r3, #0
 8014942:	6223      	str	r3, [r4, #32]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d198      	bne.n	801487a <localtime_r+0x7a>
 8014948:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801494a:	e797      	b.n	801487c <localtime_r+0x7c>
 801494c:	2b00      	cmp	r3, #0
 801494e:	daaf      	bge.n	80148b0 <localtime_r+0xb0>
 8014950:	3901      	subs	r1, #1
 8014952:	6061      	str	r1, [r4, #4]
 8014954:	333c      	adds	r3, #60	@ 0x3c
 8014956:	e7aa      	b.n	80148ae <localtime_r+0xae>
 8014958:	2b00      	cmp	r3, #0
 801495a:	dab0      	bge.n	80148be <localtime_r+0xbe>
 801495c:	3a01      	subs	r2, #1
 801495e:	60a2      	str	r2, [r4, #8]
 8014960:	333c      	adds	r3, #60	@ 0x3c
 8014962:	e7ab      	b.n	80148bc <localtime_r+0xbc>
 8014964:	2b00      	cmp	r3, #0
 8014966:	dacf      	bge.n	8014908 <localtime_r+0x108>
 8014968:	69e2      	ldr	r2, [r4, #28]
 801496a:	3a01      	subs	r2, #1
 801496c:	61e2      	str	r2, [r4, #28]
 801496e:	69a2      	ldr	r2, [r4, #24]
 8014970:	3a01      	subs	r2, #1
 8014972:	bf48      	it	mi
 8014974:	2206      	movmi	r2, #6
 8014976:	61a2      	str	r2, [r4, #24]
 8014978:	68e2      	ldr	r2, [r4, #12]
 801497a:	3318      	adds	r3, #24
 801497c:	3a01      	subs	r2, #1
 801497e:	60e2      	str	r2, [r4, #12]
 8014980:	60a3      	str	r3, [r4, #8]
 8014982:	2a00      	cmp	r2, #0
 8014984:	d1c0      	bne.n	8014908 <localtime_r+0x108>
 8014986:	6923      	ldr	r3, [r4, #16]
 8014988:	3b01      	subs	r3, #1
 801498a:	d405      	bmi.n	8014998 <localtime_r+0x198>
 801498c:	6123      	str	r3, [r4, #16]
 801498e:	6923      	ldr	r3, [r4, #16]
 8014990:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014994:	60e3      	str	r3, [r4, #12]
 8014996:	e7b7      	b.n	8014908 <localtime_r+0x108>
 8014998:	230b      	movs	r3, #11
 801499a:	6123      	str	r3, [r4, #16]
 801499c:	6963      	ldr	r3, [r4, #20]
 801499e:	1e5a      	subs	r2, r3, #1
 80149a0:	6162      	str	r2, [r4, #20]
 80149a2:	0792      	lsls	r2, r2, #30
 80149a4:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80149a8:	d105      	bne.n	80149b6 <localtime_r+0x1b6>
 80149aa:	2164      	movs	r1, #100	@ 0x64
 80149ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80149b0:	fb01 3212 	mls	r2, r1, r2, r3
 80149b4:	b962      	cbnz	r2, 80149d0 <localtime_r+0x1d0>
 80149b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80149ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80149be:	fb02 3311 	mls	r3, r2, r1, r3
 80149c2:	fab3 f383 	clz	r3, r3
 80149c6:	095b      	lsrs	r3, r3, #5
 80149c8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80149cc:	61e3      	str	r3, [r4, #28]
 80149ce:	e7de      	b.n	801498e <localtime_r+0x18e>
 80149d0:	2301      	movs	r3, #1
 80149d2:	e7f9      	b.n	80149c8 <localtime_r+0x1c8>
 80149d4:	08019dbc 	.word	0x08019dbc
 80149d8:	2000a8f0 	.word	0x2000a8f0

080149dc <validate_structure>:
 80149dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149de:	6801      	ldr	r1, [r0, #0]
 80149e0:	293b      	cmp	r1, #59	@ 0x3b
 80149e2:	4604      	mov	r4, r0
 80149e4:	d911      	bls.n	8014a0a <validate_structure+0x2e>
 80149e6:	223c      	movs	r2, #60	@ 0x3c
 80149e8:	4668      	mov	r0, sp
 80149ea:	f000 fe07 	bl	80155fc <div>
 80149ee:	9a01      	ldr	r2, [sp, #4]
 80149f0:	6863      	ldr	r3, [r4, #4]
 80149f2:	9900      	ldr	r1, [sp, #0]
 80149f4:	2a00      	cmp	r2, #0
 80149f6:	440b      	add	r3, r1
 80149f8:	6063      	str	r3, [r4, #4]
 80149fa:	bfbb      	ittet	lt
 80149fc:	323c      	addlt	r2, #60	@ 0x3c
 80149fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a02:	6022      	strge	r2, [r4, #0]
 8014a04:	6022      	strlt	r2, [r4, #0]
 8014a06:	bfb8      	it	lt
 8014a08:	6063      	strlt	r3, [r4, #4]
 8014a0a:	6861      	ldr	r1, [r4, #4]
 8014a0c:	293b      	cmp	r1, #59	@ 0x3b
 8014a0e:	d911      	bls.n	8014a34 <validate_structure+0x58>
 8014a10:	223c      	movs	r2, #60	@ 0x3c
 8014a12:	4668      	mov	r0, sp
 8014a14:	f000 fdf2 	bl	80155fc <div>
 8014a18:	9a01      	ldr	r2, [sp, #4]
 8014a1a:	68a3      	ldr	r3, [r4, #8]
 8014a1c:	9900      	ldr	r1, [sp, #0]
 8014a1e:	2a00      	cmp	r2, #0
 8014a20:	440b      	add	r3, r1
 8014a22:	60a3      	str	r3, [r4, #8]
 8014a24:	bfbb      	ittet	lt
 8014a26:	323c      	addlt	r2, #60	@ 0x3c
 8014a28:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a2c:	6062      	strge	r2, [r4, #4]
 8014a2e:	6062      	strlt	r2, [r4, #4]
 8014a30:	bfb8      	it	lt
 8014a32:	60a3      	strlt	r3, [r4, #8]
 8014a34:	68a1      	ldr	r1, [r4, #8]
 8014a36:	2917      	cmp	r1, #23
 8014a38:	d911      	bls.n	8014a5e <validate_structure+0x82>
 8014a3a:	2218      	movs	r2, #24
 8014a3c:	4668      	mov	r0, sp
 8014a3e:	f000 fddd 	bl	80155fc <div>
 8014a42:	9a01      	ldr	r2, [sp, #4]
 8014a44:	68e3      	ldr	r3, [r4, #12]
 8014a46:	9900      	ldr	r1, [sp, #0]
 8014a48:	2a00      	cmp	r2, #0
 8014a4a:	440b      	add	r3, r1
 8014a4c:	60e3      	str	r3, [r4, #12]
 8014a4e:	bfbb      	ittet	lt
 8014a50:	3218      	addlt	r2, #24
 8014a52:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a56:	60a2      	strge	r2, [r4, #8]
 8014a58:	60a2      	strlt	r2, [r4, #8]
 8014a5a:	bfb8      	it	lt
 8014a5c:	60e3      	strlt	r3, [r4, #12]
 8014a5e:	6921      	ldr	r1, [r4, #16]
 8014a60:	290b      	cmp	r1, #11
 8014a62:	d911      	bls.n	8014a88 <validate_structure+0xac>
 8014a64:	220c      	movs	r2, #12
 8014a66:	4668      	mov	r0, sp
 8014a68:	f000 fdc8 	bl	80155fc <div>
 8014a6c:	9a01      	ldr	r2, [sp, #4]
 8014a6e:	6963      	ldr	r3, [r4, #20]
 8014a70:	9900      	ldr	r1, [sp, #0]
 8014a72:	2a00      	cmp	r2, #0
 8014a74:	440b      	add	r3, r1
 8014a76:	6163      	str	r3, [r4, #20]
 8014a78:	bfbb      	ittet	lt
 8014a7a:	320c      	addlt	r2, #12
 8014a7c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a80:	6122      	strge	r2, [r4, #16]
 8014a82:	6122      	strlt	r2, [r4, #16]
 8014a84:	bfb8      	it	lt
 8014a86:	6163      	strlt	r3, [r4, #20]
 8014a88:	6963      	ldr	r3, [r4, #20]
 8014a8a:	079a      	lsls	r2, r3, #30
 8014a8c:	d11c      	bne.n	8014ac8 <validate_structure+0xec>
 8014a8e:	2164      	movs	r1, #100	@ 0x64
 8014a90:	fb93 f2f1 	sdiv	r2, r3, r1
 8014a94:	fb01 3212 	mls	r2, r1, r2, r3
 8014a98:	b9c2      	cbnz	r2, 8014acc <validate_structure+0xf0>
 8014a9a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8014a9e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014aa2:	fb93 f1f2 	sdiv	r1, r3, r2
 8014aa6:	fb02 3311 	mls	r3, r2, r1, r3
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	bf14      	ite	ne
 8014aae:	231c      	movne	r3, #28
 8014ab0:	231d      	moveq	r3, #29
 8014ab2:	68e2      	ldr	r2, [r4, #12]
 8014ab4:	2a00      	cmp	r2, #0
 8014ab6:	dc0b      	bgt.n	8014ad0 <validate_structure+0xf4>
 8014ab8:	4d31      	ldr	r5, [pc, #196]	@ (8014b80 <validate_structure+0x1a4>)
 8014aba:	200b      	movs	r0, #11
 8014abc:	2164      	movs	r1, #100	@ 0x64
 8014abe:	68e6      	ldr	r6, [r4, #12]
 8014ac0:	2e00      	cmp	r6, #0
 8014ac2:	dd30      	ble.n	8014b26 <validate_structure+0x14a>
 8014ac4:	b003      	add	sp, #12
 8014ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ac8:	231c      	movs	r3, #28
 8014aca:	e7f2      	b.n	8014ab2 <validate_structure+0xd6>
 8014acc:	231d      	movs	r3, #29
 8014ace:	e7f0      	b.n	8014ab2 <validate_structure+0xd6>
 8014ad0:	4d2b      	ldr	r5, [pc, #172]	@ (8014b80 <validate_structure+0x1a4>)
 8014ad2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014ad6:	2a01      	cmp	r2, #1
 8014ad8:	bf14      	ite	ne
 8014ada:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8014ade:	4618      	moveq	r0, r3
 8014ae0:	4281      	cmp	r1, r0
 8014ae2:	ddef      	ble.n	8014ac4 <validate_structure+0xe8>
 8014ae4:	3201      	adds	r2, #1
 8014ae6:	1a09      	subs	r1, r1, r0
 8014ae8:	2a0c      	cmp	r2, #12
 8014aea:	60e1      	str	r1, [r4, #12]
 8014aec:	6122      	str	r2, [r4, #16]
 8014aee:	d1f0      	bne.n	8014ad2 <validate_structure+0xf6>
 8014af0:	6963      	ldr	r3, [r4, #20]
 8014af2:	2100      	movs	r1, #0
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	6121      	str	r1, [r4, #16]
 8014af8:	0791      	lsls	r1, r2, #30
 8014afa:	6162      	str	r2, [r4, #20]
 8014afc:	d13c      	bne.n	8014b78 <validate_structure+0x19c>
 8014afe:	2164      	movs	r1, #100	@ 0x64
 8014b00:	fb92 f0f1 	sdiv	r0, r2, r1
 8014b04:	fb01 2210 	mls	r2, r1, r0, r2
 8014b08:	2a00      	cmp	r2, #0
 8014b0a:	d137      	bne.n	8014b7c <validate_structure+0x1a0>
 8014b0c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8014b10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8014b18:	fb02 3311 	mls	r3, r2, r1, r3
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	bf14      	ite	ne
 8014b20:	231c      	movne	r3, #28
 8014b22:	231d      	moveq	r3, #29
 8014b24:	e7d5      	b.n	8014ad2 <validate_structure+0xf6>
 8014b26:	6922      	ldr	r2, [r4, #16]
 8014b28:	3a01      	subs	r2, #1
 8014b2a:	6122      	str	r2, [r4, #16]
 8014b2c:	3201      	adds	r2, #1
 8014b2e:	d116      	bne.n	8014b5e <validate_structure+0x182>
 8014b30:	6963      	ldr	r3, [r4, #20]
 8014b32:	1e5a      	subs	r2, r3, #1
 8014b34:	0797      	lsls	r7, r2, #30
 8014b36:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8014b3a:	d119      	bne.n	8014b70 <validate_structure+0x194>
 8014b3c:	fb92 f7f1 	sdiv	r7, r2, r1
 8014b40:	fb01 2217 	mls	r2, r1, r7, r2
 8014b44:	b9b2      	cbnz	r2, 8014b74 <validate_structure+0x198>
 8014b46:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8014b4a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014b4e:	fb93 f7f2 	sdiv	r7, r3, r2
 8014b52:	fb02 3317 	mls	r3, r2, r7, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	bf14      	ite	ne
 8014b5a:	231c      	movne	r3, #28
 8014b5c:	231d      	moveq	r3, #29
 8014b5e:	6922      	ldr	r2, [r4, #16]
 8014b60:	2a01      	cmp	r2, #1
 8014b62:	bf14      	ite	ne
 8014b64:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8014b68:	461a      	moveq	r2, r3
 8014b6a:	4432      	add	r2, r6
 8014b6c:	60e2      	str	r2, [r4, #12]
 8014b6e:	e7a6      	b.n	8014abe <validate_structure+0xe2>
 8014b70:	231c      	movs	r3, #28
 8014b72:	e7f4      	b.n	8014b5e <validate_structure+0x182>
 8014b74:	231d      	movs	r3, #29
 8014b76:	e7f2      	b.n	8014b5e <validate_structure+0x182>
 8014b78:	231c      	movs	r3, #28
 8014b7a:	e7aa      	b.n	8014ad2 <validate_structure+0xf6>
 8014b7c:	231d      	movs	r3, #29
 8014b7e:	e7a8      	b.n	8014ad2 <validate_structure+0xf6>
 8014b80:	08019d8c 	.word	0x08019d8c

08014b84 <mktime>:
 8014b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b88:	b085      	sub	sp, #20
 8014b8a:	4607      	mov	r7, r0
 8014b8c:	f002 fb40 	bl	8017210 <__gettzinfo>
 8014b90:	4681      	mov	r9, r0
 8014b92:	4638      	mov	r0, r7
 8014b94:	f7ff ff22 	bl	80149dc <validate_structure>
 8014b98:	e9d7 4300 	ldrd	r4, r3, [r7]
 8014b9c:	223c      	movs	r2, #60	@ 0x3c
 8014b9e:	fb02 4403 	mla	r4, r2, r3, r4
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	697d      	ldr	r5, [r7, #20]
 8014ba6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8014baa:	fb02 4403 	mla	r4, r2, r3, r4
 8014bae:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8014bb2:	4ac1      	ldr	r2, [pc, #772]	@ (8014eb8 <mktime+0x334>)
 8014bb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014bb8:	3e01      	subs	r6, #1
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	4416      	add	r6, r2
 8014bbe:	dd11      	ble.n	8014be4 <mktime+0x60>
 8014bc0:	07a9      	lsls	r1, r5, #30
 8014bc2:	d10f      	bne.n	8014be4 <mktime+0x60>
 8014bc4:	2264      	movs	r2, #100	@ 0x64
 8014bc6:	fb95 f3f2 	sdiv	r3, r5, r2
 8014bca:	fb02 5313 	mls	r3, r2, r3, r5
 8014bce:	b943      	cbnz	r3, 8014be2 <mktime+0x5e>
 8014bd0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8014bd4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014bd8:	fb93 f1f2 	sdiv	r1, r3, r2
 8014bdc:	fb02 3311 	mls	r3, r2, r1, r3
 8014be0:	b903      	cbnz	r3, 8014be4 <mktime+0x60>
 8014be2:	3601      	adds	r6, #1
 8014be4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8014be8:	3310      	adds	r3, #16
 8014bea:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	61fe      	str	r6, [r7, #28]
 8014bf2:	f200 8167 	bhi.w	8014ec4 <mktime+0x340>
 8014bf6:	2d46      	cmp	r5, #70	@ 0x46
 8014bf8:	f340 808e 	ble.w	8014d18 <mktime+0x194>
 8014bfc:	2346      	movs	r3, #70	@ 0x46
 8014bfe:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014c02:	2164      	movs	r1, #100	@ 0x64
 8014c04:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014c08:	079a      	lsls	r2, r3, #30
 8014c0a:	d17f      	bne.n	8014d0c <mktime+0x188>
 8014c0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c10:	fb01 3212 	mls	r2, r1, r2, r3
 8014c14:	2a00      	cmp	r2, #0
 8014c16:	d17c      	bne.n	8014d12 <mktime+0x18e>
 8014c18:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8014c1c:	fb92 fef0 	sdiv	lr, r2, r0
 8014c20:	fb00 221e 	mls	r2, r0, lr, r2
 8014c24:	2a00      	cmp	r2, #0
 8014c26:	bf14      	ite	ne
 8014c28:	4662      	movne	r2, ip
 8014c2a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8014c2e:	3301      	adds	r3, #1
 8014c30:	429d      	cmp	r5, r3
 8014c32:	4416      	add	r6, r2
 8014c34:	d1e8      	bne.n	8014c08 <mktime+0x84>
 8014c36:	4ba1      	ldr	r3, [pc, #644]	@ (8014ebc <mktime+0x338>)
 8014c38:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014c3c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8014c40:	f000 f9fa 	bl	8015038 <__tz_lock>
 8014c44:	f000 fa04 	bl	8015050 <_tzset_unlocked>
 8014c48:	4b9d      	ldr	r3, [pc, #628]	@ (8014ec0 <mktime+0x33c>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 8140 	beq.w	8014ed2 <mktime+0x34e>
 8014c52:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8014c56:	6978      	ldr	r0, [r7, #20]
 8014c58:	4653      	mov	r3, sl
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	bfa8      	it	ge
 8014c5e:	2301      	movge	r3, #1
 8014c60:	9301      	str	r3, [sp, #4]
 8014c62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c66:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8014c6a:	4283      	cmp	r3, r0
 8014c6c:	f040 8096 	bne.w	8014d9c <mktime+0x218>
 8014c70:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8014c74:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8014c78:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8014c7c:	1a13      	subs	r3, r2, r0
 8014c7e:	9303      	str	r3, [sp, #12]
 8014c80:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8014c84:	9302      	str	r3, [sp, #8]
 8014c86:	9a02      	ldr	r2, [sp, #8]
 8014c88:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8014c8c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8014c90:	ebb2 0e03 	subs.w	lr, r2, r3
 8014c94:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8014c98:	4574      	cmp	r4, lr
 8014c9a:	eb78 0201 	sbcs.w	r2, r8, r1
 8014c9e:	f280 8085 	bge.w	8014dac <mktime+0x228>
 8014ca2:	f8d9 2000 	ldr.w	r2, [r9]
 8014ca6:	2a00      	cmp	r2, #0
 8014ca8:	f000 808d 	beq.w	8014dc6 <mktime+0x242>
 8014cac:	9a03      	ldr	r2, [sp, #12]
 8014cae:	4294      	cmp	r4, r2
 8014cb0:	eb78 020b 	sbcs.w	r2, r8, fp
 8014cb4:	f2c0 810a 	blt.w	8014ecc <mktime+0x348>
 8014cb8:	4574      	cmp	r4, lr
 8014cba:	eb78 0101 	sbcs.w	r1, r8, r1
 8014cbe:	bfb4      	ite	lt
 8014cc0:	f04f 0b01 	movlt.w	fp, #1
 8014cc4:	f04f 0b00 	movge.w	fp, #0
 8014cc8:	f1ba 0f00 	cmp.w	sl, #0
 8014ccc:	f280 8087 	bge.w	8014dde <mktime+0x25a>
 8014cd0:	f1bb 0f01 	cmp.w	fp, #1
 8014cd4:	f040 80ff 	bne.w	8014ed6 <mktime+0x352>
 8014cd8:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8014cdc:	191c      	adds	r4, r3, r4
 8014cde:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014ce2:	f04f 0b01 	mov.w	fp, #1
 8014ce6:	f000 f9ad 	bl	8015044 <__tz_unlock>
 8014cea:	3604      	adds	r6, #4
 8014cec:	2307      	movs	r3, #7
 8014cee:	fb96 f3f3 	sdiv	r3, r6, r3
 8014cf2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014cf6:	1af6      	subs	r6, r6, r3
 8014cf8:	f100 80db 	bmi.w	8014eb2 <mktime+0x32e>
 8014cfc:	f8c7 b020 	str.w	fp, [r7, #32]
 8014d00:	61be      	str	r6, [r7, #24]
 8014d02:	4620      	mov	r0, r4
 8014d04:	4641      	mov	r1, r8
 8014d06:	b005      	add	sp, #20
 8014d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014d10:	e78d      	b.n	8014c2e <mktime+0xaa>
 8014d12:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8014d16:	e78a      	b.n	8014c2e <mktime+0xaa>
 8014d18:	d08d      	beq.n	8014c36 <mktime+0xb2>
 8014d1a:	2345      	movs	r3, #69	@ 0x45
 8014d1c:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8014d20:	2164      	movs	r1, #100	@ 0x64
 8014d22:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8014d26:	e012      	b.n	8014d4e <mktime+0x1ca>
 8014d28:	bb62      	cbnz	r2, 8014d84 <mktime+0x200>
 8014d2a:	fb93 f2f1 	sdiv	r2, r3, r1
 8014d2e:	fb01 3212 	mls	r2, r1, r2, r3
 8014d32:	bb52      	cbnz	r2, 8014d8a <mktime+0x206>
 8014d34:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8014d38:	fb92 fef0 	sdiv	lr, r2, r0
 8014d3c:	fb00 221e 	mls	r2, r0, lr, r2
 8014d40:	2a00      	cmp	r2, #0
 8014d42:	bf14      	ite	ne
 8014d44:	4662      	movne	r2, ip
 8014d46:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8014d4a:	1ab6      	subs	r6, r6, r2
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	429d      	cmp	r5, r3
 8014d50:	f003 0203 	and.w	r2, r3, #3
 8014d54:	dbe8      	blt.n	8014d28 <mktime+0x1a4>
 8014d56:	b9da      	cbnz	r2, 8014d90 <mktime+0x20c>
 8014d58:	2264      	movs	r2, #100	@ 0x64
 8014d5a:	fb95 f3f2 	sdiv	r3, r5, r2
 8014d5e:	fb02 5313 	mls	r3, r2, r3, r5
 8014d62:	b9c3      	cbnz	r3, 8014d96 <mktime+0x212>
 8014d64:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8014d68:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014d6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d70:	fb02 3311 	mls	r3, r2, r1, r3
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	f240 136d 	movw	r3, #365	@ 0x16d
 8014d7a:	bf08      	it	eq
 8014d7c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8014d80:	1af6      	subs	r6, r6, r3
 8014d82:	e758      	b.n	8014c36 <mktime+0xb2>
 8014d84:	f240 126d 	movw	r2, #365	@ 0x16d
 8014d88:	e7df      	b.n	8014d4a <mktime+0x1c6>
 8014d8a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8014d8e:	e7dc      	b.n	8014d4a <mktime+0x1c6>
 8014d90:	f240 136d 	movw	r3, #365	@ 0x16d
 8014d94:	e7f4      	b.n	8014d80 <mktime+0x1fc>
 8014d96:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8014d9a:	e7f1      	b.n	8014d80 <mktime+0x1fc>
 8014d9c:	f000 f8a2 	bl	8014ee4 <__tzcalc_limits>
 8014da0:	2800      	cmp	r0, #0
 8014da2:	f47f af65 	bne.w	8014c70 <mktime+0xec>
 8014da6:	f8dd b004 	ldr.w	fp, [sp, #4]
 8014daa:	e791      	b.n	8014cd0 <mktime+0x14c>
 8014dac:	9a02      	ldr	r2, [sp, #8]
 8014dae:	1a12      	subs	r2, r2, r0
 8014db0:	9202      	str	r2, [sp, #8]
 8014db2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8014db6:	eb6c 0c02 	sbc.w	ip, ip, r2
 8014dba:	9a02      	ldr	r2, [sp, #8]
 8014dbc:	4294      	cmp	r4, r2
 8014dbe:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8014dc2:	dbf0      	blt.n	8014da6 <mktime+0x222>
 8014dc4:	e76d      	b.n	8014ca2 <mktime+0x11e>
 8014dc6:	9a03      	ldr	r2, [sp, #12]
 8014dc8:	4294      	cmp	r4, r2
 8014dca:	eb78 020b 	sbcs.w	r2, r8, fp
 8014dce:	f6ff af73 	blt.w	8014cb8 <mktime+0x134>
 8014dd2:	f1ba 0f00 	cmp.w	sl, #0
 8014dd6:	f6ff af7f 	blt.w	8014cd8 <mktime+0x154>
 8014dda:	f04f 0b01 	mov.w	fp, #1
 8014dde:	9a01      	ldr	r2, [sp, #4]
 8014de0:	ea82 020b 	eor.w	r2, r2, fp
 8014de4:	2a01      	cmp	r2, #1
 8014de6:	f47f af73 	bne.w	8014cd0 <mktime+0x14c>
 8014dea:	f1bb 0f00 	cmp.w	fp, #0
 8014dee:	d035      	beq.n	8014e5c <mktime+0x2d8>
 8014df0:	1a1b      	subs	r3, r3, r0
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014df8:	441a      	add	r2, r3
 8014dfa:	191c      	adds	r4, r3, r4
 8014dfc:	603a      	str	r2, [r7, #0]
 8014dfe:	4638      	mov	r0, r7
 8014e00:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014e04:	f7ff fdea 	bl	80149dc <validate_structure>
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	ebb2 020a 	subs.w	r2, r2, sl
 8014e0e:	f43f af5f 	beq.w	8014cd0 <mktime+0x14c>
 8014e12:	2a01      	cmp	r2, #1
 8014e14:	dc24      	bgt.n	8014e60 <mktime+0x2dc>
 8014e16:	1c93      	adds	r3, r2, #2
 8014e18:	bfd8      	it	le
 8014e1a:	2201      	movle	r2, #1
 8014e1c:	69fb      	ldr	r3, [r7, #28]
 8014e1e:	18d3      	adds	r3, r2, r3
 8014e20:	d527      	bpl.n	8014e72 <mktime+0x2ee>
 8014e22:	1e6b      	subs	r3, r5, #1
 8014e24:	0798      	lsls	r0, r3, #30
 8014e26:	d11e      	bne.n	8014e66 <mktime+0x2e2>
 8014e28:	2164      	movs	r1, #100	@ 0x64
 8014e2a:	fb93 f0f1 	sdiv	r0, r3, r1
 8014e2e:	fb01 3310 	mls	r3, r1, r0, r3
 8014e32:	b9db      	cbnz	r3, 8014e6c <mktime+0x2e8>
 8014e34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014e38:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8014e3c:	fb95 f1f3 	sdiv	r1, r5, r3
 8014e40:	fb03 5511 	mls	r5, r3, r1, r5
 8014e44:	2d00      	cmp	r5, #0
 8014e46:	f240 136d 	movw	r3, #365	@ 0x16d
 8014e4a:	bf18      	it	ne
 8014e4c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8014e50:	61fb      	str	r3, [r7, #28]
 8014e52:	4416      	add	r6, r2
 8014e54:	e73c      	b.n	8014cd0 <mktime+0x14c>
 8014e56:	f04f 0b00 	mov.w	fp, #0
 8014e5a:	e7c0      	b.n	8014dde <mktime+0x25a>
 8014e5c:	1ac3      	subs	r3, r0, r3
 8014e5e:	e7c8      	b.n	8014df2 <mktime+0x26e>
 8014e60:	f04f 32ff 	mov.w	r2, #4294967295
 8014e64:	e7da      	b.n	8014e1c <mktime+0x298>
 8014e66:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8014e6a:	e7f1      	b.n	8014e50 <mktime+0x2cc>
 8014e6c:	f240 136d 	movw	r3, #365	@ 0x16d
 8014e70:	e7ee      	b.n	8014e50 <mktime+0x2cc>
 8014e72:	07a9      	lsls	r1, r5, #30
 8014e74:	d117      	bne.n	8014ea6 <mktime+0x322>
 8014e76:	2064      	movs	r0, #100	@ 0x64
 8014e78:	fb95 f1f0 	sdiv	r1, r5, r0
 8014e7c:	fb00 5111 	mls	r1, r0, r1, r5
 8014e80:	b9a1      	cbnz	r1, 8014eac <mktime+0x328>
 8014e82:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014e86:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8014e8a:	fb95 f0f1 	sdiv	r0, r5, r1
 8014e8e:	fb01 5510 	mls	r5, r1, r0, r5
 8014e92:	2d00      	cmp	r5, #0
 8014e94:	f240 116d 	movw	r1, #365	@ 0x16d
 8014e98:	bf08      	it	eq
 8014e9a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8014e9e:	428b      	cmp	r3, r1
 8014ea0:	bfa8      	it	ge
 8014ea2:	1a5b      	subge	r3, r3, r1
 8014ea4:	e7d4      	b.n	8014e50 <mktime+0x2cc>
 8014ea6:	f240 116d 	movw	r1, #365	@ 0x16d
 8014eaa:	e7f8      	b.n	8014e9e <mktime+0x31a>
 8014eac:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8014eb0:	e7f5      	b.n	8014e9e <mktime+0x31a>
 8014eb2:	3607      	adds	r6, #7
 8014eb4:	e722      	b.n	8014cfc <mktime+0x178>
 8014eb6:	bf00      	nop
 8014eb8:	08019d5c 	.word	0x08019d5c
 8014ebc:	00015180 	.word	0x00015180
 8014ec0:	2000a8f0 	.word	0x2000a8f0
 8014ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8014ec8:	46a0      	mov	r8, r4
 8014eca:	e71a      	b.n	8014d02 <mktime+0x17e>
 8014ecc:	f1ba 0f00 	cmp.w	sl, #0
 8014ed0:	dac1      	bge.n	8014e56 <mktime+0x2d2>
 8014ed2:	f04f 0b00 	mov.w	fp, #0
 8014ed6:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8014eda:	191c      	adds	r4, r3, r4
 8014edc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8014ee0:	e701      	b.n	8014ce6 <mktime+0x162>
 8014ee2:	bf00      	nop

08014ee4 <__tzcalc_limits>:
 8014ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ee8:	4604      	mov	r4, r0
 8014eea:	f002 f991 	bl	8017210 <__gettzinfo>
 8014eee:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8014ef2:	429c      	cmp	r4, r3
 8014ef4:	f340 8099 	ble.w	801502a <__tzcalc_limits+0x146>
 8014ef8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8014efc:	19e5      	adds	r5, r4, r7
 8014efe:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8014f02:	f240 126d 	movw	r2, #365	@ 0x16d
 8014f06:	10ad      	asrs	r5, r5, #2
 8014f08:	fb02 5503 	mla	r5, r2, r3, r5
 8014f0c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8014f10:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8014f14:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8014f18:	4f45      	ldr	r7, [pc, #276]	@ (8015030 <__tzcalc_limits+0x14c>)
 8014f1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f1e:	441d      	add	r5, r3
 8014f20:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8014f24:	eb04 030c 	add.w	r3, r4, ip
 8014f28:	6044      	str	r4, [r0, #4]
 8014f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f2e:	4601      	mov	r1, r0
 8014f30:	441d      	add	r5, r3
 8014f32:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8014f36:	7a0b      	ldrb	r3, [r1, #8]
 8014f38:	694a      	ldr	r2, [r1, #20]
 8014f3a:	2b4a      	cmp	r3, #74	@ 0x4a
 8014f3c:	d133      	bne.n	8014fa6 <__tzcalc_limits+0xc2>
 8014f3e:	07a6      	lsls	r6, r4, #30
 8014f40:	eb05 0302 	add.w	r3, r5, r2
 8014f44:	d106      	bne.n	8014f54 <__tzcalc_limits+0x70>
 8014f46:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8014f4a:	fb94 f6fe 	sdiv	r6, r4, lr
 8014f4e:	fb0e 4616 	mls	r6, lr, r6, r4
 8014f52:	b936      	cbnz	r6, 8014f62 <__tzcalc_limits+0x7e>
 8014f54:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8014f58:	fb94 f6fe 	sdiv	r6, r4, lr
 8014f5c:	fb0e 4616 	mls	r6, lr, r6, r4
 8014f60:	b9fe      	cbnz	r6, 8014fa2 <__tzcalc_limits+0xbe>
 8014f62:	2a3b      	cmp	r2, #59	@ 0x3b
 8014f64:	bfd4      	ite	le
 8014f66:	2200      	movle	r2, #0
 8014f68:	2201      	movgt	r2, #1
 8014f6a:	4413      	add	r3, r2
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	698a      	ldr	r2, [r1, #24]
 8014f70:	17d6      	asrs	r6, r2, #31
 8014f72:	fbc3 2607 	smlal	r2, r6, r3, r7
 8014f76:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8014f78:	18d2      	adds	r2, r2, r3
 8014f7a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8014f7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8014f82:	3128      	adds	r1, #40	@ 0x28
 8014f84:	458c      	cmp	ip, r1
 8014f86:	d1d6      	bne.n	8014f36 <__tzcalc_limits+0x52>
 8014f88:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8014f8c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8014f90:	428c      	cmp	r4, r1
 8014f92:	4193      	sbcs	r3, r2
 8014f94:	bfb4      	ite	lt
 8014f96:	2301      	movlt	r3, #1
 8014f98:	2300      	movge	r3, #0
 8014f9a:	6003      	str	r3, [r0, #0]
 8014f9c:	2001      	movs	r0, #1
 8014f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	e7e1      	b.n	8014f6a <__tzcalc_limits+0x86>
 8014fa6:	2b44      	cmp	r3, #68	@ 0x44
 8014fa8:	d101      	bne.n	8014fae <__tzcalc_limits+0xca>
 8014faa:	18ab      	adds	r3, r5, r2
 8014fac:	e7df      	b.n	8014f6e <__tzcalc_limits+0x8a>
 8014fae:	07a3      	lsls	r3, r4, #30
 8014fb0:	d105      	bne.n	8014fbe <__tzcalc_limits+0xda>
 8014fb2:	2664      	movs	r6, #100	@ 0x64
 8014fb4:	fb94 f3f6 	sdiv	r3, r4, r6
 8014fb8:	fb06 4313 	mls	r3, r6, r3, r4
 8014fbc:	bb7b      	cbnz	r3, 801501e <__tzcalc_limits+0x13a>
 8014fbe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014fc2:	fb94 f6f3 	sdiv	r6, r4, r3
 8014fc6:	fb03 4616 	mls	r6, r3, r6, r4
 8014fca:	fab6 f686 	clz	r6, r6
 8014fce:	0976      	lsrs	r6, r6, #5
 8014fd0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8015034 <__tzcalc_limits+0x150>
 8014fd4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8014fd8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8014fdc:	462b      	mov	r3, r5
 8014fde:	f04f 0800 	mov.w	r8, #0
 8014fe2:	fb0a e606 	mla	r6, sl, r6, lr
 8014fe6:	f108 0801 	add.w	r8, r8, #1
 8014fea:	45c1      	cmp	r9, r8
 8014fec:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8014ff0:	dc17      	bgt.n	8015022 <__tzcalc_limits+0x13e>
 8014ff2:	f103 0804 	add.w	r8, r3, #4
 8014ff6:	2607      	movs	r6, #7
 8014ff8:	fb98 f6f6 	sdiv	r6, r8, r6
 8014ffc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8015000:	eba8 0606 	sub.w	r6, r8, r6
 8015004:	1b92      	subs	r2, r2, r6
 8015006:	690e      	ldr	r6, [r1, #16]
 8015008:	f106 36ff 	add.w	r6, r6, #4294967295
 801500c:	bf48      	it	mi
 801500e:	3207      	addmi	r2, #7
 8015010:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8015014:	4432      	add	r2, r6
 8015016:	4572      	cmp	r2, lr
 8015018:	da05      	bge.n	8015026 <__tzcalc_limits+0x142>
 801501a:	4413      	add	r3, r2
 801501c:	e7a7      	b.n	8014f6e <__tzcalc_limits+0x8a>
 801501e:	2601      	movs	r6, #1
 8015020:	e7d6      	b.n	8014fd0 <__tzcalc_limits+0xec>
 8015022:	4473      	add	r3, lr
 8015024:	e7df      	b.n	8014fe6 <__tzcalc_limits+0x102>
 8015026:	3a07      	subs	r2, #7
 8015028:	e7f5      	b.n	8015016 <__tzcalc_limits+0x132>
 801502a:	2000      	movs	r0, #0
 801502c:	e7b7      	b.n	8014f9e <__tzcalc_limits+0xba>
 801502e:	bf00      	nop
 8015030:	00015180 	.word	0x00015180
 8015034:	08019db8 	.word	0x08019db8

08015038 <__tz_lock>:
 8015038:	4801      	ldr	r0, [pc, #4]	@ (8015040 <__tz_lock+0x8>)
 801503a:	f000 baa6 	b.w	801558a <__retarget_lock_acquire>
 801503e:	bf00      	nop
 8015040:	2000a8f8 	.word	0x2000a8f8

08015044 <__tz_unlock>:
 8015044:	4801      	ldr	r0, [pc, #4]	@ (801504c <__tz_unlock+0x8>)
 8015046:	f000 baa2 	b.w	801558e <__retarget_lock_release>
 801504a:	bf00      	nop
 801504c:	2000a8f8 	.word	0x2000a8f8

08015050 <_tzset_unlocked>:
 8015050:	4b01      	ldr	r3, [pc, #4]	@ (8015058 <_tzset_unlocked+0x8>)
 8015052:	6818      	ldr	r0, [r3, #0]
 8015054:	f000 b802 	b.w	801505c <_tzset_unlocked_r>
 8015058:	20000034 	.word	0x20000034

0801505c <_tzset_unlocked_r>:
 801505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015060:	b08d      	sub	sp, #52	@ 0x34
 8015062:	4607      	mov	r7, r0
 8015064:	f002 f8d4 	bl	8017210 <__gettzinfo>
 8015068:	49bc      	ldr	r1, [pc, #752]	@ (801535c <_tzset_unlocked_r+0x300>)
 801506a:	4dbd      	ldr	r5, [pc, #756]	@ (8015360 <_tzset_unlocked_r+0x304>)
 801506c:	4604      	mov	r4, r0
 801506e:	4638      	mov	r0, r7
 8015070:	f001 f9a0 	bl	80163b4 <_getenv_r>
 8015074:	4606      	mov	r6, r0
 8015076:	bb10      	cbnz	r0, 80150be <_tzset_unlocked_r+0x62>
 8015078:	4bba      	ldr	r3, [pc, #744]	@ (8015364 <_tzset_unlocked_r+0x308>)
 801507a:	4abb      	ldr	r2, [pc, #748]	@ (8015368 <_tzset_unlocked_r+0x30c>)
 801507c:	6018      	str	r0, [r3, #0]
 801507e:	4bbb      	ldr	r3, [pc, #748]	@ (801536c <_tzset_unlocked_r+0x310>)
 8015080:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015082:	6018      	str	r0, [r3, #0]
 8015084:	4bba      	ldr	r3, [pc, #744]	@ (8015370 <_tzset_unlocked_r+0x314>)
 8015086:	6520      	str	r0, [r4, #80]	@ 0x50
 8015088:	e9c3 2200 	strd	r2, r2, [r3]
 801508c:	214a      	movs	r1, #74	@ 0x4a
 801508e:	2200      	movs	r2, #0
 8015090:	2300      	movs	r3, #0
 8015092:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8015096:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801509a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801509e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80150a2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80150a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80150aa:	6828      	ldr	r0, [r5, #0]
 80150ac:	7221      	strb	r1, [r4, #8]
 80150ae:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80150b2:	f001 f98f 	bl	80163d4 <free>
 80150b6:	602e      	str	r6, [r5, #0]
 80150b8:	b00d      	add	sp, #52	@ 0x34
 80150ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150be:	6829      	ldr	r1, [r5, #0]
 80150c0:	2900      	cmp	r1, #0
 80150c2:	f040 808e 	bne.w	80151e2 <_tzset_unlocked_r+0x186>
 80150c6:	6828      	ldr	r0, [r5, #0]
 80150c8:	f001 f984 	bl	80163d4 <free>
 80150cc:	4630      	mov	r0, r6
 80150ce:	f7eb f8b7 	bl	8000240 <strlen>
 80150d2:	1c41      	adds	r1, r0, #1
 80150d4:	4638      	mov	r0, r7
 80150d6:	f001 f9a7 	bl	8016428 <_malloc_r>
 80150da:	6028      	str	r0, [r5, #0]
 80150dc:	2800      	cmp	r0, #0
 80150de:	f040 8086 	bne.w	80151ee <_tzset_unlocked_r+0x192>
 80150e2:	4aa2      	ldr	r2, [pc, #648]	@ (801536c <_tzset_unlocked_r+0x310>)
 80150e4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8015370 <_tzset_unlocked_r+0x314>
 80150e8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8015364 <_tzset_unlocked_r+0x308>
 80150ec:	2300      	movs	r3, #0
 80150ee:	6013      	str	r3, [r2, #0]
 80150f0:	4aa0      	ldr	r2, [pc, #640]	@ (8015374 <_tzset_unlocked_r+0x318>)
 80150f2:	f8ca 3000 	str.w	r3, [sl]
 80150f6:	2000      	movs	r0, #0
 80150f8:	2100      	movs	r1, #0
 80150fa:	e9c8 2200 	strd	r2, r2, [r8]
 80150fe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8015102:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8015106:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801510a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801510e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8015112:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8015116:	224a      	movs	r2, #74	@ 0x4a
 8015118:	7222      	strb	r2, [r4, #8]
 801511a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801511c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8015120:	6523      	str	r3, [r4, #80]	@ 0x50
 8015122:	7833      	ldrb	r3, [r6, #0]
 8015124:	2b3a      	cmp	r3, #58	@ 0x3a
 8015126:	bf08      	it	eq
 8015128:	3601      	addeq	r6, #1
 801512a:	7833      	ldrb	r3, [r6, #0]
 801512c:	2b3c      	cmp	r3, #60	@ 0x3c
 801512e:	d162      	bne.n	80151f6 <_tzset_unlocked_r+0x19a>
 8015130:	1c75      	adds	r5, r6, #1
 8015132:	4a91      	ldr	r2, [pc, #580]	@ (8015378 <_tzset_unlocked_r+0x31c>)
 8015134:	4991      	ldr	r1, [pc, #580]	@ (801537c <_tzset_unlocked_r+0x320>)
 8015136:	ab0a      	add	r3, sp, #40	@ 0x28
 8015138:	4628      	mov	r0, r5
 801513a:	f002 f813 	bl	8017164 <siscanf>
 801513e:	2800      	cmp	r0, #0
 8015140:	ddba      	ble.n	80150b8 <_tzset_unlocked_r+0x5c>
 8015142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015144:	1eda      	subs	r2, r3, #3
 8015146:	2a07      	cmp	r2, #7
 8015148:	d8b6      	bhi.n	80150b8 <_tzset_unlocked_r+0x5c>
 801514a:	5ceb      	ldrb	r3, [r5, r3]
 801514c:	2b3e      	cmp	r3, #62	@ 0x3e
 801514e:	d1b3      	bne.n	80150b8 <_tzset_unlocked_r+0x5c>
 8015150:	3602      	adds	r6, #2
 8015152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015154:	18f5      	adds	r5, r6, r3
 8015156:	5cf3      	ldrb	r3, [r6, r3]
 8015158:	2b2d      	cmp	r3, #45	@ 0x2d
 801515a:	d15a      	bne.n	8015212 <_tzset_unlocked_r+0x1b6>
 801515c:	3501      	adds	r5, #1
 801515e:	f04f 39ff 	mov.w	r9, #4294967295
 8015162:	2300      	movs	r3, #0
 8015164:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015168:	f8ad 3020 	strh.w	r3, [sp, #32]
 801516c:	af08      	add	r7, sp, #32
 801516e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015170:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8015174:	9303      	str	r3, [sp, #12]
 8015176:	f10d 031e 	add.w	r3, sp, #30
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4980      	ldr	r1, [pc, #512]	@ (8015380 <_tzset_unlocked_r+0x324>)
 801517e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015180:	aa07      	add	r2, sp, #28
 8015182:	4628      	mov	r0, r5
 8015184:	f001 ffee 	bl	8017164 <siscanf>
 8015188:	2800      	cmp	r0, #0
 801518a:	dd95      	ble.n	80150b8 <_tzset_unlocked_r+0x5c>
 801518c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015190:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8015194:	223c      	movs	r2, #60	@ 0x3c
 8015196:	fb02 6603 	mla	r6, r2, r3, r6
 801519a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801519e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80151a2:	fb02 6603 	mla	r6, r2, r3, r6
 80151a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151a8:	fb09 f606 	mul.w	r6, r9, r6
 80151ac:	eb05 0903 	add.w	r9, r5, r3
 80151b0:	5ceb      	ldrb	r3, [r5, r3]
 80151b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80151b4:	f040 80ee 	bne.w	8015394 <_tzset_unlocked_r+0x338>
 80151b8:	f109 0501 	add.w	r5, r9, #1
 80151bc:	4a71      	ldr	r2, [pc, #452]	@ (8015384 <_tzset_unlocked_r+0x328>)
 80151be:	496f      	ldr	r1, [pc, #444]	@ (801537c <_tzset_unlocked_r+0x320>)
 80151c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80151c2:	4628      	mov	r0, r5
 80151c4:	f001 ffce 	bl	8017164 <siscanf>
 80151c8:	2800      	cmp	r0, #0
 80151ca:	dc28      	bgt.n	801521e <_tzset_unlocked_r+0x1c2>
 80151cc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80151d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80151d2:	d124      	bne.n	801521e <_tzset_unlocked_r+0x1c2>
 80151d4:	4b68      	ldr	r3, [pc, #416]	@ (8015378 <_tzset_unlocked_r+0x31c>)
 80151d6:	62a6      	str	r6, [r4, #40]	@ 0x28
 80151d8:	e9c8 3300 	strd	r3, r3, [r8]
 80151dc:	f8ca 6000 	str.w	r6, [sl]
 80151e0:	e76a      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 80151e2:	f7ea ffcd 	bl	8000180 <strcmp>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	f47f af6d 	bne.w	80150c6 <_tzset_unlocked_r+0x6a>
 80151ec:	e764      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 80151ee:	4631      	mov	r1, r6
 80151f0:	f000 f9cf 	bl	8015592 <strcpy>
 80151f4:	e775      	b.n	80150e2 <_tzset_unlocked_r+0x86>
 80151f6:	4a60      	ldr	r2, [pc, #384]	@ (8015378 <_tzset_unlocked_r+0x31c>)
 80151f8:	4963      	ldr	r1, [pc, #396]	@ (8015388 <_tzset_unlocked_r+0x32c>)
 80151fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80151fc:	4630      	mov	r0, r6
 80151fe:	f001 ffb1 	bl	8017164 <siscanf>
 8015202:	2800      	cmp	r0, #0
 8015204:	f77f af58 	ble.w	80150b8 <_tzset_unlocked_r+0x5c>
 8015208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801520a:	3b03      	subs	r3, #3
 801520c:	2b07      	cmp	r3, #7
 801520e:	d9a0      	bls.n	8015152 <_tzset_unlocked_r+0xf6>
 8015210:	e752      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 8015212:	2b2b      	cmp	r3, #43	@ 0x2b
 8015214:	bf08      	it	eq
 8015216:	3501      	addeq	r5, #1
 8015218:	f04f 0901 	mov.w	r9, #1
 801521c:	e7a1      	b.n	8015162 <_tzset_unlocked_r+0x106>
 801521e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015220:	1eda      	subs	r2, r3, #3
 8015222:	2a07      	cmp	r2, #7
 8015224:	f63f af48 	bhi.w	80150b8 <_tzset_unlocked_r+0x5c>
 8015228:	5ceb      	ldrb	r3, [r5, r3]
 801522a:	2b3e      	cmp	r3, #62	@ 0x3e
 801522c:	f47f af44 	bne.w	80150b8 <_tzset_unlocked_r+0x5c>
 8015230:	f109 0902 	add.w	r9, r9, #2
 8015234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015236:	eb09 0503 	add.w	r5, r9, r3
 801523a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801523e:	2b2d      	cmp	r3, #45	@ 0x2d
 8015240:	f040 80b7 	bne.w	80153b2 <_tzset_unlocked_r+0x356>
 8015244:	3501      	adds	r5, #1
 8015246:	f04f 39ff 	mov.w	r9, #4294967295
 801524a:	2300      	movs	r3, #0
 801524c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015250:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015254:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015258:	930a      	str	r3, [sp, #40]	@ 0x28
 801525a:	ab0a      	add	r3, sp, #40	@ 0x28
 801525c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	f10d 031e 	add.w	r3, sp, #30
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	4945      	ldr	r1, [pc, #276]	@ (8015380 <_tzset_unlocked_r+0x324>)
 801526a:	ab0a      	add	r3, sp, #40	@ 0x28
 801526c:	aa07      	add	r2, sp, #28
 801526e:	4628      	mov	r0, r5
 8015270:	f001 ff78 	bl	8017164 <siscanf>
 8015274:	2800      	cmp	r0, #0
 8015276:	f300 80a2 	bgt.w	80153be <_tzset_unlocked_r+0x362>
 801527a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801527e:	9304      	str	r3, [sp, #16]
 8015280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015282:	4627      	mov	r7, r4
 8015284:	441d      	add	r5, r3
 8015286:	f04f 0b00 	mov.w	fp, #0
 801528a:	782b      	ldrb	r3, [r5, #0]
 801528c:	2b2c      	cmp	r3, #44	@ 0x2c
 801528e:	bf08      	it	eq
 8015290:	3501      	addeq	r5, #1
 8015292:	f895 9000 	ldrb.w	r9, [r5]
 8015296:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801529a:	f040 80a3 	bne.w	80153e4 <_tzset_unlocked_r+0x388>
 801529e:	ab0a      	add	r3, sp, #40	@ 0x28
 80152a0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80152a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80152a8:	aa09      	add	r2, sp, #36	@ 0x24
 80152aa:	9200      	str	r2, [sp, #0]
 80152ac:	4937      	ldr	r1, [pc, #220]	@ (801538c <_tzset_unlocked_r+0x330>)
 80152ae:	9303      	str	r3, [sp, #12]
 80152b0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80152b4:	4628      	mov	r0, r5
 80152b6:	f001 ff55 	bl	8017164 <siscanf>
 80152ba:	2803      	cmp	r0, #3
 80152bc:	f47f aefc 	bne.w	80150b8 <_tzset_unlocked_r+0x5c>
 80152c0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80152c4:	1e4b      	subs	r3, r1, #1
 80152c6:	2b0b      	cmp	r3, #11
 80152c8:	f63f aef6 	bhi.w	80150b8 <_tzset_unlocked_r+0x5c>
 80152cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80152d0:	1e53      	subs	r3, r2, #1
 80152d2:	2b04      	cmp	r3, #4
 80152d4:	f63f aef0 	bhi.w	80150b8 <_tzset_unlocked_r+0x5c>
 80152d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80152dc:	2b06      	cmp	r3, #6
 80152de:	f63f aeeb 	bhi.w	80150b8 <_tzset_unlocked_r+0x5c>
 80152e2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80152e6:	f887 9008 	strb.w	r9, [r7, #8]
 80152ea:	617b      	str	r3, [r7, #20]
 80152ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152ee:	eb05 0903 	add.w	r9, r5, r3
 80152f2:	2500      	movs	r5, #0
 80152f4:	f04f 0302 	mov.w	r3, #2
 80152f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80152fc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8015300:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015304:	950a      	str	r5, [sp, #40]	@ 0x28
 8015306:	f899 3000 	ldrb.w	r3, [r9]
 801530a:	2b2f      	cmp	r3, #47	@ 0x2f
 801530c:	f040 8096 	bne.w	801543c <_tzset_unlocked_r+0x3e0>
 8015310:	ab0a      	add	r3, sp, #40	@ 0x28
 8015312:	aa08      	add	r2, sp, #32
 8015314:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015318:	f10d 021e 	add.w	r2, sp, #30
 801531c:	9200      	str	r2, [sp, #0]
 801531e:	491c      	ldr	r1, [pc, #112]	@ (8015390 <_tzset_unlocked_r+0x334>)
 8015320:	9303      	str	r3, [sp, #12]
 8015322:	aa07      	add	r2, sp, #28
 8015324:	4648      	mov	r0, r9
 8015326:	f001 ff1d 	bl	8017164 <siscanf>
 801532a:	42a8      	cmp	r0, r5
 801532c:	f300 8086 	bgt.w	801543c <_tzset_unlocked_r+0x3e0>
 8015330:	214a      	movs	r1, #74	@ 0x4a
 8015332:	2200      	movs	r2, #0
 8015334:	2300      	movs	r3, #0
 8015336:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801533a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801533e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015342:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8015346:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801534a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801534e:	7221      	strb	r1, [r4, #8]
 8015350:	62a5      	str	r5, [r4, #40]	@ 0x28
 8015352:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8015356:	6525      	str	r5, [r4, #80]	@ 0x50
 8015358:	e6ae      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 801535a:	bf00      	nop
 801535c:	08019e1c 	.word	0x08019e1c
 8015360:	2000a8d0 	.word	0x2000a8d0
 8015364:	2000a8ec 	.word	0x2000a8ec
 8015368:	08019e1f 	.word	0x08019e1f
 801536c:	2000a8f0 	.word	0x2000a8f0
 8015370:	2000002c 	.word	0x2000002c
 8015374:	08019ea5 	.word	0x08019ea5
 8015378:	2000a8e0 	.word	0x2000a8e0
 801537c:	08019e23 	.word	0x08019e23
 8015380:	08019e58 	.word	0x08019e58
 8015384:	2000a8d4 	.word	0x2000a8d4
 8015388:	08019e36 	.word	0x08019e36
 801538c:	08019e44 	.word	0x08019e44
 8015390:	08019e57 	.word	0x08019e57
 8015394:	4a3e      	ldr	r2, [pc, #248]	@ (8015490 <_tzset_unlocked_r+0x434>)
 8015396:	493f      	ldr	r1, [pc, #252]	@ (8015494 <_tzset_unlocked_r+0x438>)
 8015398:	ab0a      	add	r3, sp, #40	@ 0x28
 801539a:	4648      	mov	r0, r9
 801539c:	f001 fee2 	bl	8017164 <siscanf>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	f77f af17 	ble.w	80151d4 <_tzset_unlocked_r+0x178>
 80153a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153a8:	3b03      	subs	r3, #3
 80153aa:	2b07      	cmp	r3, #7
 80153ac:	f67f af42 	bls.w	8015234 <_tzset_unlocked_r+0x1d8>
 80153b0:	e682      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 80153b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80153b4:	bf08      	it	eq
 80153b6:	3501      	addeq	r5, #1
 80153b8:	f04f 0901 	mov.w	r9, #1
 80153bc:	e745      	b.n	801524a <_tzset_unlocked_r+0x1ee>
 80153be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80153c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80153c6:	213c      	movs	r1, #60	@ 0x3c
 80153c8:	fb01 3302 	mla	r3, r1, r2, r3
 80153cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80153d0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80153d4:	fb01 3302 	mla	r3, r1, r2, r3
 80153d8:	fb09 f303 	mul.w	r3, r9, r3
 80153dc:	e74f      	b.n	801527e <_tzset_unlocked_r+0x222>
 80153de:	f04f 0b01 	mov.w	fp, #1
 80153e2:	e752      	b.n	801528a <_tzset_unlocked_r+0x22e>
 80153e4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80153e8:	bf06      	itte	eq
 80153ea:	3501      	addeq	r5, #1
 80153ec:	464b      	moveq	r3, r9
 80153ee:	2344      	movne	r3, #68	@ 0x44
 80153f0:	220a      	movs	r2, #10
 80153f2:	a90b      	add	r1, sp, #44	@ 0x2c
 80153f4:	4628      	mov	r0, r5
 80153f6:	9305      	str	r3, [sp, #20]
 80153f8:	f001 fc94 	bl	8016d24 <strtoul>
 80153fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8015400:	9b05      	ldr	r3, [sp, #20]
 8015402:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8015406:	45a9      	cmp	r9, r5
 8015408:	d114      	bne.n	8015434 <_tzset_unlocked_r+0x3d8>
 801540a:	234d      	movs	r3, #77	@ 0x4d
 801540c:	f1bb 0f00 	cmp.w	fp, #0
 8015410:	d107      	bne.n	8015422 <_tzset_unlocked_r+0x3c6>
 8015412:	7223      	strb	r3, [r4, #8]
 8015414:	2103      	movs	r1, #3
 8015416:	2302      	movs	r3, #2
 8015418:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801541c:	f8c4 b014 	str.w	fp, [r4, #20]
 8015420:	e767      	b.n	80152f2 <_tzset_unlocked_r+0x296>
 8015422:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8015426:	220b      	movs	r2, #11
 8015428:	2301      	movs	r3, #1
 801542a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801542e:	2300      	movs	r3, #0
 8015430:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015432:	e75e      	b.n	80152f2 <_tzset_unlocked_r+0x296>
 8015434:	b280      	uxth	r0, r0
 8015436:	723b      	strb	r3, [r7, #8]
 8015438:	6178      	str	r0, [r7, #20]
 801543a:	e75a      	b.n	80152f2 <_tzset_unlocked_r+0x296>
 801543c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015440:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015444:	213c      	movs	r1, #60	@ 0x3c
 8015446:	fb01 3302 	mla	r3, r1, r2, r3
 801544a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801544e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8015452:	fb01 3302 	mla	r3, r1, r2, r3
 8015456:	61bb      	str	r3, [r7, #24]
 8015458:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801545a:	3728      	adds	r7, #40	@ 0x28
 801545c:	444d      	add	r5, r9
 801545e:	f1bb 0f00 	cmp.w	fp, #0
 8015462:	d0bc      	beq.n	80153de <_tzset_unlocked_r+0x382>
 8015464:	9b04      	ldr	r3, [sp, #16]
 8015466:	6523      	str	r3, [r4, #80]	@ 0x50
 8015468:	4b0b      	ldr	r3, [pc, #44]	@ (8015498 <_tzset_unlocked_r+0x43c>)
 801546a:	f8c8 3000 	str.w	r3, [r8]
 801546e:	6860      	ldr	r0, [r4, #4]
 8015470:	4b07      	ldr	r3, [pc, #28]	@ (8015490 <_tzset_unlocked_r+0x434>)
 8015472:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015474:	f8c8 3004 	str.w	r3, [r8, #4]
 8015478:	f7ff fd34 	bl	8014ee4 <__tzcalc_limits>
 801547c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801547e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015480:	f8ca 2000 	str.w	r2, [sl]
 8015484:	1a9b      	subs	r3, r3, r2
 8015486:	4a05      	ldr	r2, [pc, #20]	@ (801549c <_tzset_unlocked_r+0x440>)
 8015488:	bf18      	it	ne
 801548a:	2301      	movne	r3, #1
 801548c:	6013      	str	r3, [r2, #0]
 801548e:	e613      	b.n	80150b8 <_tzset_unlocked_r+0x5c>
 8015490:	2000a8d4 	.word	0x2000a8d4
 8015494:	08019e36 	.word	0x08019e36
 8015498:	2000a8e0 	.word	0x2000a8e0
 801549c:	2000a8f0 	.word	0x2000a8f0

080154a0 <_localeconv_r>:
 80154a0:	4800      	ldr	r0, [pc, #0]	@ (80154a4 <_localeconv_r+0x4>)
 80154a2:	4770      	bx	lr
 80154a4:	200001d0 	.word	0x200001d0

080154a8 <_close_r>:
 80154a8:	b538      	push	{r3, r4, r5, lr}
 80154aa:	4d06      	ldr	r5, [pc, #24]	@ (80154c4 <_close_r+0x1c>)
 80154ac:	2300      	movs	r3, #0
 80154ae:	4604      	mov	r4, r0
 80154b0:	4608      	mov	r0, r1
 80154b2:	602b      	str	r3, [r5, #0]
 80154b4:	f7f6 fafa 	bl	800baac <_close>
 80154b8:	1c43      	adds	r3, r0, #1
 80154ba:	d102      	bne.n	80154c2 <_close_r+0x1a>
 80154bc:	682b      	ldr	r3, [r5, #0]
 80154be:	b103      	cbz	r3, 80154c2 <_close_r+0x1a>
 80154c0:	6023      	str	r3, [r4, #0]
 80154c2:	bd38      	pop	{r3, r4, r5, pc}
 80154c4:	2000a8f4 	.word	0x2000a8f4

080154c8 <_lseek_r>:
 80154c8:	b538      	push	{r3, r4, r5, lr}
 80154ca:	4d07      	ldr	r5, [pc, #28]	@ (80154e8 <_lseek_r+0x20>)
 80154cc:	4604      	mov	r4, r0
 80154ce:	4608      	mov	r0, r1
 80154d0:	4611      	mov	r1, r2
 80154d2:	2200      	movs	r2, #0
 80154d4:	602a      	str	r2, [r5, #0]
 80154d6:	461a      	mov	r2, r3
 80154d8:	f7f6 fb0f 	bl	800bafa <_lseek>
 80154dc:	1c43      	adds	r3, r0, #1
 80154de:	d102      	bne.n	80154e6 <_lseek_r+0x1e>
 80154e0:	682b      	ldr	r3, [r5, #0]
 80154e2:	b103      	cbz	r3, 80154e6 <_lseek_r+0x1e>
 80154e4:	6023      	str	r3, [r4, #0]
 80154e6:	bd38      	pop	{r3, r4, r5, pc}
 80154e8:	2000a8f4 	.word	0x2000a8f4

080154ec <_read_r>:
 80154ec:	b538      	push	{r3, r4, r5, lr}
 80154ee:	4d07      	ldr	r5, [pc, #28]	@ (801550c <_read_r+0x20>)
 80154f0:	4604      	mov	r4, r0
 80154f2:	4608      	mov	r0, r1
 80154f4:	4611      	mov	r1, r2
 80154f6:	2200      	movs	r2, #0
 80154f8:	602a      	str	r2, [r5, #0]
 80154fa:	461a      	mov	r2, r3
 80154fc:	f7f6 fa9d 	bl	800ba3a <_read>
 8015500:	1c43      	adds	r3, r0, #1
 8015502:	d102      	bne.n	801550a <_read_r+0x1e>
 8015504:	682b      	ldr	r3, [r5, #0]
 8015506:	b103      	cbz	r3, 801550a <_read_r+0x1e>
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	bd38      	pop	{r3, r4, r5, pc}
 801550c:	2000a8f4 	.word	0x2000a8f4

08015510 <_write_r>:
 8015510:	b538      	push	{r3, r4, r5, lr}
 8015512:	4d07      	ldr	r5, [pc, #28]	@ (8015530 <_write_r+0x20>)
 8015514:	4604      	mov	r4, r0
 8015516:	4608      	mov	r0, r1
 8015518:	4611      	mov	r1, r2
 801551a:	2200      	movs	r2, #0
 801551c:	602a      	str	r2, [r5, #0]
 801551e:	461a      	mov	r2, r3
 8015520:	f7f6 faa8 	bl	800ba74 <_write>
 8015524:	1c43      	adds	r3, r0, #1
 8015526:	d102      	bne.n	801552e <_write_r+0x1e>
 8015528:	682b      	ldr	r3, [r5, #0]
 801552a:	b103      	cbz	r3, 801552e <_write_r+0x1e>
 801552c:	6023      	str	r3, [r4, #0]
 801552e:	bd38      	pop	{r3, r4, r5, pc}
 8015530:	2000a8f4 	.word	0x2000a8f4

08015534 <__errno>:
 8015534:	4b01      	ldr	r3, [pc, #4]	@ (801553c <__errno+0x8>)
 8015536:	6818      	ldr	r0, [r3, #0]
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	20000034 	.word	0x20000034

08015540 <__libc_init_array>:
 8015540:	b570      	push	{r4, r5, r6, lr}
 8015542:	4d0d      	ldr	r5, [pc, #52]	@ (8015578 <__libc_init_array+0x38>)
 8015544:	4c0d      	ldr	r4, [pc, #52]	@ (801557c <__libc_init_array+0x3c>)
 8015546:	1b64      	subs	r4, r4, r5
 8015548:	10a4      	asrs	r4, r4, #2
 801554a:	2600      	movs	r6, #0
 801554c:	42a6      	cmp	r6, r4
 801554e:	d109      	bne.n	8015564 <__libc_init_array+0x24>
 8015550:	4d0b      	ldr	r5, [pc, #44]	@ (8015580 <__libc_init_array+0x40>)
 8015552:	4c0c      	ldr	r4, [pc, #48]	@ (8015584 <__libc_init_array+0x44>)
 8015554:	f002 fe3c 	bl	80181d0 <_init>
 8015558:	1b64      	subs	r4, r4, r5
 801555a:	10a4      	asrs	r4, r4, #2
 801555c:	2600      	movs	r6, #0
 801555e:	42a6      	cmp	r6, r4
 8015560:	d105      	bne.n	801556e <__libc_init_array+0x2e>
 8015562:	bd70      	pop	{r4, r5, r6, pc}
 8015564:	f855 3b04 	ldr.w	r3, [r5], #4
 8015568:	4798      	blx	r3
 801556a:	3601      	adds	r6, #1
 801556c:	e7ee      	b.n	801554c <__libc_init_array+0xc>
 801556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015572:	4798      	blx	r3
 8015574:	3601      	adds	r6, #1
 8015576:	e7f2      	b.n	801555e <__libc_init_array+0x1e>
 8015578:	0801a1b8 	.word	0x0801a1b8
 801557c:	0801a1b8 	.word	0x0801a1b8
 8015580:	0801a1b8 	.word	0x0801a1b8
 8015584:	0801a1bc 	.word	0x0801a1bc

08015588 <__retarget_lock_init_recursive>:
 8015588:	4770      	bx	lr

0801558a <__retarget_lock_acquire>:
 801558a:	4770      	bx	lr

0801558c <__retarget_lock_acquire_recursive>:
 801558c:	4770      	bx	lr

0801558e <__retarget_lock_release>:
 801558e:	4770      	bx	lr

08015590 <__retarget_lock_release_recursive>:
 8015590:	4770      	bx	lr

08015592 <strcpy>:
 8015592:	4603      	mov	r3, r0
 8015594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015598:	f803 2b01 	strb.w	r2, [r3], #1
 801559c:	2a00      	cmp	r2, #0
 801559e:	d1f9      	bne.n	8015594 <strcpy+0x2>
 80155a0:	4770      	bx	lr

080155a2 <memcpy>:
 80155a2:	440a      	add	r2, r1
 80155a4:	4291      	cmp	r1, r2
 80155a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80155aa:	d100      	bne.n	80155ae <memcpy+0xc>
 80155ac:	4770      	bx	lr
 80155ae:	b510      	push	{r4, lr}
 80155b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155b8:	4291      	cmp	r1, r2
 80155ba:	d1f9      	bne.n	80155b0 <memcpy+0xe>
 80155bc:	bd10      	pop	{r4, pc}
	...

080155c0 <__assert_func>:
 80155c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155c2:	4614      	mov	r4, r2
 80155c4:	461a      	mov	r2, r3
 80155c6:	4b09      	ldr	r3, [pc, #36]	@ (80155ec <__assert_func+0x2c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4605      	mov	r5, r0
 80155cc:	68d8      	ldr	r0, [r3, #12]
 80155ce:	b954      	cbnz	r4, 80155e6 <__assert_func+0x26>
 80155d0:	4b07      	ldr	r3, [pc, #28]	@ (80155f0 <__assert_func+0x30>)
 80155d2:	461c      	mov	r4, r3
 80155d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155d8:	9100      	str	r1, [sp, #0]
 80155da:	462b      	mov	r3, r5
 80155dc:	4905      	ldr	r1, [pc, #20]	@ (80155f4 <__assert_func+0x34>)
 80155de:	f001 fdaf 	bl	8017140 <fiprintf>
 80155e2:	f001 fecf 	bl	8017384 <abort>
 80155e6:	4b04      	ldr	r3, [pc, #16]	@ (80155f8 <__assert_func+0x38>)
 80155e8:	e7f4      	b.n	80155d4 <__assert_func+0x14>
 80155ea:	bf00      	nop
 80155ec:	20000034 	.word	0x20000034
 80155f0:	08019ea5 	.word	0x08019ea5
 80155f4:	08019e77 	.word	0x08019e77
 80155f8:	08019e6a 	.word	0x08019e6a

080155fc <div>:
 80155fc:	b510      	push	{r4, lr}
 80155fe:	fb91 f4f2 	sdiv	r4, r1, r2
 8015602:	fb02 1114 	mls	r1, r2, r4, r1
 8015606:	6004      	str	r4, [r0, #0]
 8015608:	6041      	str	r1, [r0, #4]
 801560a:	bd10      	pop	{r4, pc}

0801560c <quorem>:
 801560c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015610:	6903      	ldr	r3, [r0, #16]
 8015612:	690c      	ldr	r4, [r1, #16]
 8015614:	42a3      	cmp	r3, r4
 8015616:	4607      	mov	r7, r0
 8015618:	db7e      	blt.n	8015718 <quorem+0x10c>
 801561a:	3c01      	subs	r4, #1
 801561c:	f101 0814 	add.w	r8, r1, #20
 8015620:	00a3      	lsls	r3, r4, #2
 8015622:	f100 0514 	add.w	r5, r0, #20
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801562c:	9301      	str	r3, [sp, #4]
 801562e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015636:	3301      	adds	r3, #1
 8015638:	429a      	cmp	r2, r3
 801563a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801563e:	fbb2 f6f3 	udiv	r6, r2, r3
 8015642:	d32e      	bcc.n	80156a2 <quorem+0x96>
 8015644:	f04f 0a00 	mov.w	sl, #0
 8015648:	46c4      	mov	ip, r8
 801564a:	46ae      	mov	lr, r5
 801564c:	46d3      	mov	fp, sl
 801564e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015652:	b298      	uxth	r0, r3
 8015654:	fb06 a000 	mla	r0, r6, r0, sl
 8015658:	0c02      	lsrs	r2, r0, #16
 801565a:	0c1b      	lsrs	r3, r3, #16
 801565c:	fb06 2303 	mla	r3, r6, r3, r2
 8015660:	f8de 2000 	ldr.w	r2, [lr]
 8015664:	b280      	uxth	r0, r0
 8015666:	b292      	uxth	r2, r2
 8015668:	1a12      	subs	r2, r2, r0
 801566a:	445a      	add	r2, fp
 801566c:	f8de 0000 	ldr.w	r0, [lr]
 8015670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015674:	b29b      	uxth	r3, r3
 8015676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801567a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801567e:	b292      	uxth	r2, r2
 8015680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015684:	45e1      	cmp	r9, ip
 8015686:	f84e 2b04 	str.w	r2, [lr], #4
 801568a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801568e:	d2de      	bcs.n	801564e <quorem+0x42>
 8015690:	9b00      	ldr	r3, [sp, #0]
 8015692:	58eb      	ldr	r3, [r5, r3]
 8015694:	b92b      	cbnz	r3, 80156a2 <quorem+0x96>
 8015696:	9b01      	ldr	r3, [sp, #4]
 8015698:	3b04      	subs	r3, #4
 801569a:	429d      	cmp	r5, r3
 801569c:	461a      	mov	r2, r3
 801569e:	d32f      	bcc.n	8015700 <quorem+0xf4>
 80156a0:	613c      	str	r4, [r7, #16]
 80156a2:	4638      	mov	r0, r7
 80156a4:	f001 f9c6 	bl	8016a34 <__mcmp>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	db25      	blt.n	80156f8 <quorem+0xec>
 80156ac:	4629      	mov	r1, r5
 80156ae:	2000      	movs	r0, #0
 80156b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80156b4:	f8d1 c000 	ldr.w	ip, [r1]
 80156b8:	fa1f fe82 	uxth.w	lr, r2
 80156bc:	fa1f f38c 	uxth.w	r3, ip
 80156c0:	eba3 030e 	sub.w	r3, r3, lr
 80156c4:	4403      	add	r3, r0
 80156c6:	0c12      	lsrs	r2, r2, #16
 80156c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80156cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156d6:	45c1      	cmp	r9, r8
 80156d8:	f841 3b04 	str.w	r3, [r1], #4
 80156dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80156e0:	d2e6      	bcs.n	80156b0 <quorem+0xa4>
 80156e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156ea:	b922      	cbnz	r2, 80156f6 <quorem+0xea>
 80156ec:	3b04      	subs	r3, #4
 80156ee:	429d      	cmp	r5, r3
 80156f0:	461a      	mov	r2, r3
 80156f2:	d30b      	bcc.n	801570c <quorem+0x100>
 80156f4:	613c      	str	r4, [r7, #16]
 80156f6:	3601      	adds	r6, #1
 80156f8:	4630      	mov	r0, r6
 80156fa:	b003      	add	sp, #12
 80156fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015700:	6812      	ldr	r2, [r2, #0]
 8015702:	3b04      	subs	r3, #4
 8015704:	2a00      	cmp	r2, #0
 8015706:	d1cb      	bne.n	80156a0 <quorem+0x94>
 8015708:	3c01      	subs	r4, #1
 801570a:	e7c6      	b.n	801569a <quorem+0x8e>
 801570c:	6812      	ldr	r2, [r2, #0]
 801570e:	3b04      	subs	r3, #4
 8015710:	2a00      	cmp	r2, #0
 8015712:	d1ef      	bne.n	80156f4 <quorem+0xe8>
 8015714:	3c01      	subs	r4, #1
 8015716:	e7ea      	b.n	80156ee <quorem+0xe2>
 8015718:	2000      	movs	r0, #0
 801571a:	e7ee      	b.n	80156fa <quorem+0xee>
 801571c:	0000      	movs	r0, r0
	...

08015720 <_dtoa_r>:
 8015720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015724:	69c7      	ldr	r7, [r0, #28]
 8015726:	b099      	sub	sp, #100	@ 0x64
 8015728:	ed8d 0b02 	vstr	d0, [sp, #8]
 801572c:	ec55 4b10 	vmov	r4, r5, d0
 8015730:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8015732:	9109      	str	r1, [sp, #36]	@ 0x24
 8015734:	4683      	mov	fp, r0
 8015736:	920e      	str	r2, [sp, #56]	@ 0x38
 8015738:	9313      	str	r3, [sp, #76]	@ 0x4c
 801573a:	b97f      	cbnz	r7, 801575c <_dtoa_r+0x3c>
 801573c:	2010      	movs	r0, #16
 801573e:	f000 fe41 	bl	80163c4 <malloc>
 8015742:	4602      	mov	r2, r0
 8015744:	f8cb 001c 	str.w	r0, [fp, #28]
 8015748:	b920      	cbnz	r0, 8015754 <_dtoa_r+0x34>
 801574a:	4ba7      	ldr	r3, [pc, #668]	@ (80159e8 <_dtoa_r+0x2c8>)
 801574c:	21ef      	movs	r1, #239	@ 0xef
 801574e:	48a7      	ldr	r0, [pc, #668]	@ (80159ec <_dtoa_r+0x2cc>)
 8015750:	f7ff ff36 	bl	80155c0 <__assert_func>
 8015754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015758:	6007      	str	r7, [r0, #0]
 801575a:	60c7      	str	r7, [r0, #12]
 801575c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015760:	6819      	ldr	r1, [r3, #0]
 8015762:	b159      	cbz	r1, 801577c <_dtoa_r+0x5c>
 8015764:	685a      	ldr	r2, [r3, #4]
 8015766:	604a      	str	r2, [r1, #4]
 8015768:	2301      	movs	r3, #1
 801576a:	4093      	lsls	r3, r2
 801576c:	608b      	str	r3, [r1, #8]
 801576e:	4658      	mov	r0, fp
 8015770:	f000 ff26 	bl	80165c0 <_Bfree>
 8015774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015778:	2200      	movs	r2, #0
 801577a:	601a      	str	r2, [r3, #0]
 801577c:	1e2b      	subs	r3, r5, #0
 801577e:	bfb9      	ittee	lt
 8015780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015784:	9303      	strlt	r3, [sp, #12]
 8015786:	2300      	movge	r3, #0
 8015788:	6033      	strge	r3, [r6, #0]
 801578a:	9f03      	ldr	r7, [sp, #12]
 801578c:	4b98      	ldr	r3, [pc, #608]	@ (80159f0 <_dtoa_r+0x2d0>)
 801578e:	bfbc      	itt	lt
 8015790:	2201      	movlt	r2, #1
 8015792:	6032      	strlt	r2, [r6, #0]
 8015794:	43bb      	bics	r3, r7
 8015796:	d112      	bne.n	80157be <_dtoa_r+0x9e>
 8015798:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801579a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801579e:	6013      	str	r3, [r2, #0]
 80157a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80157a4:	4323      	orrs	r3, r4
 80157a6:	f000 854d 	beq.w	8016244 <_dtoa_r+0xb24>
 80157aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80157ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015a04 <_dtoa_r+0x2e4>
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 854f 	beq.w	8016254 <_dtoa_r+0xb34>
 80157b6:	f10a 0303 	add.w	r3, sl, #3
 80157ba:	f000 bd49 	b.w	8016250 <_dtoa_r+0xb30>
 80157be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157c2:	2200      	movs	r2, #0
 80157c4:	ec51 0b17 	vmov	r0, r1, d7
 80157c8:	2300      	movs	r3, #0
 80157ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80157ce:	f7eb f963 	bl	8000a98 <__aeabi_dcmpeq>
 80157d2:	4680      	mov	r8, r0
 80157d4:	b158      	cbz	r0, 80157ee <_dtoa_r+0xce>
 80157d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80157d8:	2301      	movs	r3, #1
 80157da:	6013      	str	r3, [r2, #0]
 80157dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80157de:	b113      	cbz	r3, 80157e6 <_dtoa_r+0xc6>
 80157e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80157e2:	4b84      	ldr	r3, [pc, #528]	@ (80159f4 <_dtoa_r+0x2d4>)
 80157e4:	6013      	str	r3, [r2, #0]
 80157e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015a08 <_dtoa_r+0x2e8>
 80157ea:	f000 bd33 	b.w	8016254 <_dtoa_r+0xb34>
 80157ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80157f2:	aa16      	add	r2, sp, #88	@ 0x58
 80157f4:	a917      	add	r1, sp, #92	@ 0x5c
 80157f6:	4658      	mov	r0, fp
 80157f8:	f001 f9cc 	bl	8016b94 <__d2b>
 80157fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015800:	4681      	mov	r9, r0
 8015802:	2e00      	cmp	r6, #0
 8015804:	d077      	beq.n	80158f6 <_dtoa_r+0x1d6>
 8015806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015808:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801581c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015820:	4619      	mov	r1, r3
 8015822:	2200      	movs	r2, #0
 8015824:	4b74      	ldr	r3, [pc, #464]	@ (80159f8 <_dtoa_r+0x2d8>)
 8015826:	f7ea fd17 	bl	8000258 <__aeabi_dsub>
 801582a:	a369      	add	r3, pc, #420	@ (adr r3, 80159d0 <_dtoa_r+0x2b0>)
 801582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015830:	f7ea feca 	bl	80005c8 <__aeabi_dmul>
 8015834:	a368      	add	r3, pc, #416	@ (adr r3, 80159d8 <_dtoa_r+0x2b8>)
 8015836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583a:	f7ea fd0f 	bl	800025c <__adddf3>
 801583e:	4604      	mov	r4, r0
 8015840:	4630      	mov	r0, r6
 8015842:	460d      	mov	r5, r1
 8015844:	f7ea fe56 	bl	80004f4 <__aeabi_i2d>
 8015848:	a365      	add	r3, pc, #404	@ (adr r3, 80159e0 <_dtoa_r+0x2c0>)
 801584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584e:	f7ea febb 	bl	80005c8 <__aeabi_dmul>
 8015852:	4602      	mov	r2, r0
 8015854:	460b      	mov	r3, r1
 8015856:	4620      	mov	r0, r4
 8015858:	4629      	mov	r1, r5
 801585a:	f7ea fcff 	bl	800025c <__adddf3>
 801585e:	4604      	mov	r4, r0
 8015860:	460d      	mov	r5, r1
 8015862:	f7eb f961 	bl	8000b28 <__aeabi_d2iz>
 8015866:	2200      	movs	r2, #0
 8015868:	4607      	mov	r7, r0
 801586a:	2300      	movs	r3, #0
 801586c:	4620      	mov	r0, r4
 801586e:	4629      	mov	r1, r5
 8015870:	f7eb f91c 	bl	8000aac <__aeabi_dcmplt>
 8015874:	b140      	cbz	r0, 8015888 <_dtoa_r+0x168>
 8015876:	4638      	mov	r0, r7
 8015878:	f7ea fe3c 	bl	80004f4 <__aeabi_i2d>
 801587c:	4622      	mov	r2, r4
 801587e:	462b      	mov	r3, r5
 8015880:	f7eb f90a 	bl	8000a98 <__aeabi_dcmpeq>
 8015884:	b900      	cbnz	r0, 8015888 <_dtoa_r+0x168>
 8015886:	3f01      	subs	r7, #1
 8015888:	2f16      	cmp	r7, #22
 801588a:	d851      	bhi.n	8015930 <_dtoa_r+0x210>
 801588c:	4b5b      	ldr	r3, [pc, #364]	@ (80159fc <_dtoa_r+0x2dc>)
 801588e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801589a:	f7eb f907 	bl	8000aac <__aeabi_dcmplt>
 801589e:	2800      	cmp	r0, #0
 80158a0:	d048      	beq.n	8015934 <_dtoa_r+0x214>
 80158a2:	3f01      	subs	r7, #1
 80158a4:	2300      	movs	r3, #0
 80158a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80158a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80158aa:	1b9b      	subs	r3, r3, r6
 80158ac:	1e5a      	subs	r2, r3, #1
 80158ae:	bf44      	itt	mi
 80158b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80158b4:	2300      	movmi	r3, #0
 80158b6:	9208      	str	r2, [sp, #32]
 80158b8:	bf54      	ite	pl
 80158ba:	f04f 0800 	movpl.w	r8, #0
 80158be:	9308      	strmi	r3, [sp, #32]
 80158c0:	2f00      	cmp	r7, #0
 80158c2:	db39      	blt.n	8015938 <_dtoa_r+0x218>
 80158c4:	9b08      	ldr	r3, [sp, #32]
 80158c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80158c8:	443b      	add	r3, r7
 80158ca:	9308      	str	r3, [sp, #32]
 80158cc:	2300      	movs	r3, #0
 80158ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80158d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158d2:	2b09      	cmp	r3, #9
 80158d4:	d864      	bhi.n	80159a0 <_dtoa_r+0x280>
 80158d6:	2b05      	cmp	r3, #5
 80158d8:	bfc4      	itt	gt
 80158da:	3b04      	subgt	r3, #4
 80158dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80158de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158e0:	f1a3 0302 	sub.w	r3, r3, #2
 80158e4:	bfcc      	ite	gt
 80158e6:	2400      	movgt	r4, #0
 80158e8:	2401      	movle	r4, #1
 80158ea:	2b03      	cmp	r3, #3
 80158ec:	d863      	bhi.n	80159b6 <_dtoa_r+0x296>
 80158ee:	e8df f003 	tbb	[pc, r3]
 80158f2:	372a      	.short	0x372a
 80158f4:	5535      	.short	0x5535
 80158f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80158fa:	441e      	add	r6, r3
 80158fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015900:	2b20      	cmp	r3, #32
 8015902:	bfc1      	itttt	gt
 8015904:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015908:	409f      	lslgt	r7, r3
 801590a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801590e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015912:	bfd6      	itet	le
 8015914:	f1c3 0320 	rsble	r3, r3, #32
 8015918:	ea47 0003 	orrgt.w	r0, r7, r3
 801591c:	fa04 f003 	lslle.w	r0, r4, r3
 8015920:	f7ea fdd8 	bl	80004d4 <__aeabi_ui2d>
 8015924:	2201      	movs	r2, #1
 8015926:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801592a:	3e01      	subs	r6, #1
 801592c:	9214      	str	r2, [sp, #80]	@ 0x50
 801592e:	e777      	b.n	8015820 <_dtoa_r+0x100>
 8015930:	2301      	movs	r3, #1
 8015932:	e7b8      	b.n	80158a6 <_dtoa_r+0x186>
 8015934:	9012      	str	r0, [sp, #72]	@ 0x48
 8015936:	e7b7      	b.n	80158a8 <_dtoa_r+0x188>
 8015938:	427b      	negs	r3, r7
 801593a:	930a      	str	r3, [sp, #40]	@ 0x28
 801593c:	2300      	movs	r3, #0
 801593e:	eba8 0807 	sub.w	r8, r8, r7
 8015942:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015944:	e7c4      	b.n	80158d0 <_dtoa_r+0x1b0>
 8015946:	2300      	movs	r3, #0
 8015948:	930b      	str	r3, [sp, #44]	@ 0x2c
 801594a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801594c:	2b00      	cmp	r3, #0
 801594e:	dc35      	bgt.n	80159bc <_dtoa_r+0x29c>
 8015950:	2301      	movs	r3, #1
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	9307      	str	r3, [sp, #28]
 8015956:	461a      	mov	r2, r3
 8015958:	920e      	str	r2, [sp, #56]	@ 0x38
 801595a:	e00b      	b.n	8015974 <_dtoa_r+0x254>
 801595c:	2301      	movs	r3, #1
 801595e:	e7f3      	b.n	8015948 <_dtoa_r+0x228>
 8015960:	2300      	movs	r3, #0
 8015962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015966:	18fb      	adds	r3, r7, r3
 8015968:	9300      	str	r3, [sp, #0]
 801596a:	3301      	adds	r3, #1
 801596c:	2b01      	cmp	r3, #1
 801596e:	9307      	str	r3, [sp, #28]
 8015970:	bfb8      	it	lt
 8015972:	2301      	movlt	r3, #1
 8015974:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015978:	2100      	movs	r1, #0
 801597a:	2204      	movs	r2, #4
 801597c:	f102 0514 	add.w	r5, r2, #20
 8015980:	429d      	cmp	r5, r3
 8015982:	d91f      	bls.n	80159c4 <_dtoa_r+0x2a4>
 8015984:	6041      	str	r1, [r0, #4]
 8015986:	4658      	mov	r0, fp
 8015988:	f000 fdda 	bl	8016540 <_Balloc>
 801598c:	4682      	mov	sl, r0
 801598e:	2800      	cmp	r0, #0
 8015990:	d13c      	bne.n	8015a0c <_dtoa_r+0x2ec>
 8015992:	4b1b      	ldr	r3, [pc, #108]	@ (8015a00 <_dtoa_r+0x2e0>)
 8015994:	4602      	mov	r2, r0
 8015996:	f240 11af 	movw	r1, #431	@ 0x1af
 801599a:	e6d8      	b.n	801574e <_dtoa_r+0x2e>
 801599c:	2301      	movs	r3, #1
 801599e:	e7e0      	b.n	8015962 <_dtoa_r+0x242>
 80159a0:	2401      	movs	r4, #1
 80159a2:	2300      	movs	r3, #0
 80159a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80159a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80159a8:	f04f 33ff 	mov.w	r3, #4294967295
 80159ac:	9300      	str	r3, [sp, #0]
 80159ae:	9307      	str	r3, [sp, #28]
 80159b0:	2200      	movs	r2, #0
 80159b2:	2312      	movs	r3, #18
 80159b4:	e7d0      	b.n	8015958 <_dtoa_r+0x238>
 80159b6:	2301      	movs	r3, #1
 80159b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80159ba:	e7f5      	b.n	80159a8 <_dtoa_r+0x288>
 80159bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159be:	9300      	str	r3, [sp, #0]
 80159c0:	9307      	str	r3, [sp, #28]
 80159c2:	e7d7      	b.n	8015974 <_dtoa_r+0x254>
 80159c4:	3101      	adds	r1, #1
 80159c6:	0052      	lsls	r2, r2, #1
 80159c8:	e7d8      	b.n	801597c <_dtoa_r+0x25c>
 80159ca:	bf00      	nop
 80159cc:	f3af 8000 	nop.w
 80159d0:	636f4361 	.word	0x636f4361
 80159d4:	3fd287a7 	.word	0x3fd287a7
 80159d8:	8b60c8b3 	.word	0x8b60c8b3
 80159dc:	3fc68a28 	.word	0x3fc68a28
 80159e0:	509f79fb 	.word	0x509f79fb
 80159e4:	3fd34413 	.word	0x3fd34413
 80159e8:	08019c60 	.word	0x08019c60
 80159ec:	08019eb3 	.word	0x08019eb3
 80159f0:	7ff00000 	.word	0x7ff00000
 80159f4:	0801a1ab 	.word	0x0801a1ab
 80159f8:	3ff80000 	.word	0x3ff80000
 80159fc:	08019fb0 	.word	0x08019fb0
 8015a00:	08019f0b 	.word	0x08019f0b
 8015a04:	08019eaf 	.word	0x08019eaf
 8015a08:	0801a1aa 	.word	0x0801a1aa
 8015a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015a10:	6018      	str	r0, [r3, #0]
 8015a12:	9b07      	ldr	r3, [sp, #28]
 8015a14:	2b0e      	cmp	r3, #14
 8015a16:	f200 80a4 	bhi.w	8015b62 <_dtoa_r+0x442>
 8015a1a:	2c00      	cmp	r4, #0
 8015a1c:	f000 80a1 	beq.w	8015b62 <_dtoa_r+0x442>
 8015a20:	2f00      	cmp	r7, #0
 8015a22:	dd33      	ble.n	8015a8c <_dtoa_r+0x36c>
 8015a24:	4bad      	ldr	r3, [pc, #692]	@ (8015cdc <_dtoa_r+0x5bc>)
 8015a26:	f007 020f 	and.w	r2, r7, #15
 8015a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a2e:	ed93 7b00 	vldr	d7, [r3]
 8015a32:	05f8      	lsls	r0, r7, #23
 8015a34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015a3c:	d516      	bpl.n	8015a6c <_dtoa_r+0x34c>
 8015a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8015ce0 <_dtoa_r+0x5c0>)
 8015a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a48:	f7ea fee8 	bl	800081c <__aeabi_ddiv>
 8015a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a50:	f004 040f 	and.w	r4, r4, #15
 8015a54:	2603      	movs	r6, #3
 8015a56:	4da2      	ldr	r5, [pc, #648]	@ (8015ce0 <_dtoa_r+0x5c0>)
 8015a58:	b954      	cbnz	r4, 8015a70 <_dtoa_r+0x350>
 8015a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a62:	f7ea fedb 	bl	800081c <__aeabi_ddiv>
 8015a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a6a:	e028      	b.n	8015abe <_dtoa_r+0x39e>
 8015a6c:	2602      	movs	r6, #2
 8015a6e:	e7f2      	b.n	8015a56 <_dtoa_r+0x336>
 8015a70:	07e1      	lsls	r1, r4, #31
 8015a72:	d508      	bpl.n	8015a86 <_dtoa_r+0x366>
 8015a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a7c:	f7ea fda4 	bl	80005c8 <__aeabi_dmul>
 8015a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a84:	3601      	adds	r6, #1
 8015a86:	1064      	asrs	r4, r4, #1
 8015a88:	3508      	adds	r5, #8
 8015a8a:	e7e5      	b.n	8015a58 <_dtoa_r+0x338>
 8015a8c:	f000 80d2 	beq.w	8015c34 <_dtoa_r+0x514>
 8015a90:	427c      	negs	r4, r7
 8015a92:	4b92      	ldr	r3, [pc, #584]	@ (8015cdc <_dtoa_r+0x5bc>)
 8015a94:	4d92      	ldr	r5, [pc, #584]	@ (8015ce0 <_dtoa_r+0x5c0>)
 8015a96:	f004 020f 	and.w	r2, r4, #15
 8015a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015aa6:	f7ea fd8f 	bl	80005c8 <__aeabi_dmul>
 8015aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015aae:	1124      	asrs	r4, r4, #4
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	2602      	movs	r6, #2
 8015ab4:	2c00      	cmp	r4, #0
 8015ab6:	f040 80b2 	bne.w	8015c1e <_dtoa_r+0x4fe>
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d1d3      	bne.n	8015a66 <_dtoa_r+0x346>
 8015abe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015ac0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	f000 80b7 	beq.w	8015c38 <_dtoa_r+0x518>
 8015aca:	4b86      	ldr	r3, [pc, #536]	@ (8015ce4 <_dtoa_r+0x5c4>)
 8015acc:	2200      	movs	r2, #0
 8015ace:	4620      	mov	r0, r4
 8015ad0:	4629      	mov	r1, r5
 8015ad2:	f7ea ffeb 	bl	8000aac <__aeabi_dcmplt>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	f000 80ae 	beq.w	8015c38 <_dtoa_r+0x518>
 8015adc:	9b07      	ldr	r3, [sp, #28]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 80aa 	beq.w	8015c38 <_dtoa_r+0x518>
 8015ae4:	9b00      	ldr	r3, [sp, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	dd37      	ble.n	8015b5a <_dtoa_r+0x43a>
 8015aea:	1e7b      	subs	r3, r7, #1
 8015aec:	9304      	str	r3, [sp, #16]
 8015aee:	4620      	mov	r0, r4
 8015af0:	4b7d      	ldr	r3, [pc, #500]	@ (8015ce8 <_dtoa_r+0x5c8>)
 8015af2:	2200      	movs	r2, #0
 8015af4:	4629      	mov	r1, r5
 8015af6:	f7ea fd67 	bl	80005c8 <__aeabi_dmul>
 8015afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015afe:	9c00      	ldr	r4, [sp, #0]
 8015b00:	3601      	adds	r6, #1
 8015b02:	4630      	mov	r0, r6
 8015b04:	f7ea fcf6 	bl	80004f4 <__aeabi_i2d>
 8015b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b0c:	f7ea fd5c 	bl	80005c8 <__aeabi_dmul>
 8015b10:	4b76      	ldr	r3, [pc, #472]	@ (8015cec <_dtoa_r+0x5cc>)
 8015b12:	2200      	movs	r2, #0
 8015b14:	f7ea fba2 	bl	800025c <__adddf3>
 8015b18:	4605      	mov	r5, r0
 8015b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015b1e:	2c00      	cmp	r4, #0
 8015b20:	f040 808d 	bne.w	8015c3e <_dtoa_r+0x51e>
 8015b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b28:	4b71      	ldr	r3, [pc, #452]	@ (8015cf0 <_dtoa_r+0x5d0>)
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f7ea fb94 	bl	8000258 <__aeabi_dsub>
 8015b30:	4602      	mov	r2, r0
 8015b32:	460b      	mov	r3, r1
 8015b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b38:	462a      	mov	r2, r5
 8015b3a:	4633      	mov	r3, r6
 8015b3c:	f7ea ffd4 	bl	8000ae8 <__aeabi_dcmpgt>
 8015b40:	2800      	cmp	r0, #0
 8015b42:	f040 828b 	bne.w	801605c <_dtoa_r+0x93c>
 8015b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b4a:	462a      	mov	r2, r5
 8015b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015b50:	f7ea ffac 	bl	8000aac <__aeabi_dcmplt>
 8015b54:	2800      	cmp	r0, #0
 8015b56:	f040 8128 	bne.w	8015daa <_dtoa_r+0x68a>
 8015b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f2c0 815a 	blt.w	8015e1e <_dtoa_r+0x6fe>
 8015b6a:	2f0e      	cmp	r7, #14
 8015b6c:	f300 8157 	bgt.w	8015e1e <_dtoa_r+0x6fe>
 8015b70:	4b5a      	ldr	r3, [pc, #360]	@ (8015cdc <_dtoa_r+0x5bc>)
 8015b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015b76:	ed93 7b00 	vldr	d7, [r3]
 8015b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	ed8d 7b00 	vstr	d7, [sp]
 8015b82:	da03      	bge.n	8015b8c <_dtoa_r+0x46c>
 8015b84:	9b07      	ldr	r3, [sp, #28]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f340 8101 	ble.w	8015d8e <_dtoa_r+0x66e>
 8015b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015b90:	4656      	mov	r6, sl
 8015b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b96:	4620      	mov	r0, r4
 8015b98:	4629      	mov	r1, r5
 8015b9a:	f7ea fe3f 	bl	800081c <__aeabi_ddiv>
 8015b9e:	f7ea ffc3 	bl	8000b28 <__aeabi_d2iz>
 8015ba2:	4680      	mov	r8, r0
 8015ba4:	f7ea fca6 	bl	80004f4 <__aeabi_i2d>
 8015ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015bac:	f7ea fd0c 	bl	80005c8 <__aeabi_dmul>
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015bbc:	f7ea fb4c 	bl	8000258 <__aeabi_dsub>
 8015bc0:	f806 4b01 	strb.w	r4, [r6], #1
 8015bc4:	9d07      	ldr	r5, [sp, #28]
 8015bc6:	eba6 040a 	sub.w	r4, r6, sl
 8015bca:	42a5      	cmp	r5, r4
 8015bcc:	4602      	mov	r2, r0
 8015bce:	460b      	mov	r3, r1
 8015bd0:	f040 8117 	bne.w	8015e02 <_dtoa_r+0x6e2>
 8015bd4:	f7ea fb42 	bl	800025c <__adddf3>
 8015bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015bdc:	4604      	mov	r4, r0
 8015bde:	460d      	mov	r5, r1
 8015be0:	f7ea ff82 	bl	8000ae8 <__aeabi_dcmpgt>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	f040 80f9 	bne.w	8015ddc <_dtoa_r+0x6bc>
 8015bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015bee:	4620      	mov	r0, r4
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	f7ea ff51 	bl	8000a98 <__aeabi_dcmpeq>
 8015bf6:	b118      	cbz	r0, 8015c00 <_dtoa_r+0x4e0>
 8015bf8:	f018 0f01 	tst.w	r8, #1
 8015bfc:	f040 80ee 	bne.w	8015ddc <_dtoa_r+0x6bc>
 8015c00:	4649      	mov	r1, r9
 8015c02:	4658      	mov	r0, fp
 8015c04:	f000 fcdc 	bl	80165c0 <_Bfree>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	7033      	strb	r3, [r6, #0]
 8015c0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015c0e:	3701      	adds	r7, #1
 8015c10:	601f      	str	r7, [r3, #0]
 8015c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 831d 	beq.w	8016254 <_dtoa_r+0xb34>
 8015c1a:	601e      	str	r6, [r3, #0]
 8015c1c:	e31a      	b.n	8016254 <_dtoa_r+0xb34>
 8015c1e:	07e2      	lsls	r2, r4, #31
 8015c20:	d505      	bpl.n	8015c2e <_dtoa_r+0x50e>
 8015c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c26:	f7ea fccf 	bl	80005c8 <__aeabi_dmul>
 8015c2a:	3601      	adds	r6, #1
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	1064      	asrs	r4, r4, #1
 8015c30:	3508      	adds	r5, #8
 8015c32:	e73f      	b.n	8015ab4 <_dtoa_r+0x394>
 8015c34:	2602      	movs	r6, #2
 8015c36:	e742      	b.n	8015abe <_dtoa_r+0x39e>
 8015c38:	9c07      	ldr	r4, [sp, #28]
 8015c3a:	9704      	str	r7, [sp, #16]
 8015c3c:	e761      	b.n	8015b02 <_dtoa_r+0x3e2>
 8015c3e:	4b27      	ldr	r3, [pc, #156]	@ (8015cdc <_dtoa_r+0x5bc>)
 8015c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015c46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015c4a:	4454      	add	r4, sl
 8015c4c:	2900      	cmp	r1, #0
 8015c4e:	d053      	beq.n	8015cf8 <_dtoa_r+0x5d8>
 8015c50:	4928      	ldr	r1, [pc, #160]	@ (8015cf4 <_dtoa_r+0x5d4>)
 8015c52:	2000      	movs	r0, #0
 8015c54:	f7ea fde2 	bl	800081c <__aeabi_ddiv>
 8015c58:	4633      	mov	r3, r6
 8015c5a:	462a      	mov	r2, r5
 8015c5c:	f7ea fafc 	bl	8000258 <__aeabi_dsub>
 8015c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015c64:	4656      	mov	r6, sl
 8015c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c6a:	f7ea ff5d 	bl	8000b28 <__aeabi_d2iz>
 8015c6e:	4605      	mov	r5, r0
 8015c70:	f7ea fc40 	bl	80004f4 <__aeabi_i2d>
 8015c74:	4602      	mov	r2, r0
 8015c76:	460b      	mov	r3, r1
 8015c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c7c:	f7ea faec 	bl	8000258 <__aeabi_dsub>
 8015c80:	3530      	adds	r5, #48	@ 0x30
 8015c82:	4602      	mov	r2, r0
 8015c84:	460b      	mov	r3, r1
 8015c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c8a:	f806 5b01 	strb.w	r5, [r6], #1
 8015c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015c92:	f7ea ff0b 	bl	8000aac <__aeabi_dcmplt>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d171      	bne.n	8015d7e <_dtoa_r+0x65e>
 8015c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c9e:	4911      	ldr	r1, [pc, #68]	@ (8015ce4 <_dtoa_r+0x5c4>)
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	f7ea fad9 	bl	8000258 <__aeabi_dsub>
 8015ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015caa:	f7ea feff 	bl	8000aac <__aeabi_dcmplt>
 8015cae:	2800      	cmp	r0, #0
 8015cb0:	f040 8095 	bne.w	8015dde <_dtoa_r+0x6be>
 8015cb4:	42a6      	cmp	r6, r4
 8015cb6:	f43f af50 	beq.w	8015b5a <_dtoa_r+0x43a>
 8015cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8015ce8 <_dtoa_r+0x5c8>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	f7ea fc81 	bl	80005c8 <__aeabi_dmul>
 8015cc6:	4b08      	ldr	r3, [pc, #32]	@ (8015ce8 <_dtoa_r+0x5c8>)
 8015cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015ccc:	2200      	movs	r2, #0
 8015cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015cd2:	f7ea fc79 	bl	80005c8 <__aeabi_dmul>
 8015cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cda:	e7c4      	b.n	8015c66 <_dtoa_r+0x546>
 8015cdc:	08019fb0 	.word	0x08019fb0
 8015ce0:	08019f88 	.word	0x08019f88
 8015ce4:	3ff00000 	.word	0x3ff00000
 8015ce8:	40240000 	.word	0x40240000
 8015cec:	401c0000 	.word	0x401c0000
 8015cf0:	40140000 	.word	0x40140000
 8015cf4:	3fe00000 	.word	0x3fe00000
 8015cf8:	4631      	mov	r1, r6
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	f7ea fc64 	bl	80005c8 <__aeabi_dmul>
 8015d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015d04:	9415      	str	r4, [sp, #84]	@ 0x54
 8015d06:	4656      	mov	r6, sl
 8015d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d0c:	f7ea ff0c 	bl	8000b28 <__aeabi_d2iz>
 8015d10:	4605      	mov	r5, r0
 8015d12:	f7ea fbef 	bl	80004f4 <__aeabi_i2d>
 8015d16:	4602      	mov	r2, r0
 8015d18:	460b      	mov	r3, r1
 8015d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d1e:	f7ea fa9b 	bl	8000258 <__aeabi_dsub>
 8015d22:	3530      	adds	r5, #48	@ 0x30
 8015d24:	f806 5b01 	strb.w	r5, [r6], #1
 8015d28:	4602      	mov	r2, r0
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	42a6      	cmp	r6, r4
 8015d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015d32:	f04f 0200 	mov.w	r2, #0
 8015d36:	d124      	bne.n	8015d82 <_dtoa_r+0x662>
 8015d38:	4bac      	ldr	r3, [pc, #688]	@ (8015fec <_dtoa_r+0x8cc>)
 8015d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015d3e:	f7ea fa8d 	bl	800025c <__adddf3>
 8015d42:	4602      	mov	r2, r0
 8015d44:	460b      	mov	r3, r1
 8015d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d4a:	f7ea fecd 	bl	8000ae8 <__aeabi_dcmpgt>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d145      	bne.n	8015dde <_dtoa_r+0x6be>
 8015d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015d56:	49a5      	ldr	r1, [pc, #660]	@ (8015fec <_dtoa_r+0x8cc>)
 8015d58:	2000      	movs	r0, #0
 8015d5a:	f7ea fa7d 	bl	8000258 <__aeabi_dsub>
 8015d5e:	4602      	mov	r2, r0
 8015d60:	460b      	mov	r3, r1
 8015d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d66:	f7ea fea1 	bl	8000aac <__aeabi_dcmplt>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	f43f aef5 	beq.w	8015b5a <_dtoa_r+0x43a>
 8015d70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015d72:	1e73      	subs	r3, r6, #1
 8015d74:	9315      	str	r3, [sp, #84]	@ 0x54
 8015d76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015d7a:	2b30      	cmp	r3, #48	@ 0x30
 8015d7c:	d0f8      	beq.n	8015d70 <_dtoa_r+0x650>
 8015d7e:	9f04      	ldr	r7, [sp, #16]
 8015d80:	e73e      	b.n	8015c00 <_dtoa_r+0x4e0>
 8015d82:	4b9b      	ldr	r3, [pc, #620]	@ (8015ff0 <_dtoa_r+0x8d0>)
 8015d84:	f7ea fc20 	bl	80005c8 <__aeabi_dmul>
 8015d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d8c:	e7bc      	b.n	8015d08 <_dtoa_r+0x5e8>
 8015d8e:	d10c      	bne.n	8015daa <_dtoa_r+0x68a>
 8015d90:	4b98      	ldr	r3, [pc, #608]	@ (8015ff4 <_dtoa_r+0x8d4>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d98:	f7ea fc16 	bl	80005c8 <__aeabi_dmul>
 8015d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015da0:	f7ea fe98 	bl	8000ad4 <__aeabi_dcmpge>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	f000 8157 	beq.w	8016058 <_dtoa_r+0x938>
 8015daa:	2400      	movs	r4, #0
 8015dac:	4625      	mov	r5, r4
 8015dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015db0:	43db      	mvns	r3, r3
 8015db2:	9304      	str	r3, [sp, #16]
 8015db4:	4656      	mov	r6, sl
 8015db6:	2700      	movs	r7, #0
 8015db8:	4621      	mov	r1, r4
 8015dba:	4658      	mov	r0, fp
 8015dbc:	f000 fc00 	bl	80165c0 <_Bfree>
 8015dc0:	2d00      	cmp	r5, #0
 8015dc2:	d0dc      	beq.n	8015d7e <_dtoa_r+0x65e>
 8015dc4:	b12f      	cbz	r7, 8015dd2 <_dtoa_r+0x6b2>
 8015dc6:	42af      	cmp	r7, r5
 8015dc8:	d003      	beq.n	8015dd2 <_dtoa_r+0x6b2>
 8015dca:	4639      	mov	r1, r7
 8015dcc:	4658      	mov	r0, fp
 8015dce:	f000 fbf7 	bl	80165c0 <_Bfree>
 8015dd2:	4629      	mov	r1, r5
 8015dd4:	4658      	mov	r0, fp
 8015dd6:	f000 fbf3 	bl	80165c0 <_Bfree>
 8015dda:	e7d0      	b.n	8015d7e <_dtoa_r+0x65e>
 8015ddc:	9704      	str	r7, [sp, #16]
 8015dde:	4633      	mov	r3, r6
 8015de0:	461e      	mov	r6, r3
 8015de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015de6:	2a39      	cmp	r2, #57	@ 0x39
 8015de8:	d107      	bne.n	8015dfa <_dtoa_r+0x6da>
 8015dea:	459a      	cmp	sl, r3
 8015dec:	d1f8      	bne.n	8015de0 <_dtoa_r+0x6c0>
 8015dee:	9a04      	ldr	r2, [sp, #16]
 8015df0:	3201      	adds	r2, #1
 8015df2:	9204      	str	r2, [sp, #16]
 8015df4:	2230      	movs	r2, #48	@ 0x30
 8015df6:	f88a 2000 	strb.w	r2, [sl]
 8015dfa:	781a      	ldrb	r2, [r3, #0]
 8015dfc:	3201      	adds	r2, #1
 8015dfe:	701a      	strb	r2, [r3, #0]
 8015e00:	e7bd      	b.n	8015d7e <_dtoa_r+0x65e>
 8015e02:	4b7b      	ldr	r3, [pc, #492]	@ (8015ff0 <_dtoa_r+0x8d0>)
 8015e04:	2200      	movs	r2, #0
 8015e06:	f7ea fbdf 	bl	80005c8 <__aeabi_dmul>
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	4604      	mov	r4, r0
 8015e10:	460d      	mov	r5, r1
 8015e12:	f7ea fe41 	bl	8000a98 <__aeabi_dcmpeq>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	f43f aebb 	beq.w	8015b92 <_dtoa_r+0x472>
 8015e1c:	e6f0      	b.n	8015c00 <_dtoa_r+0x4e0>
 8015e1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015e20:	2a00      	cmp	r2, #0
 8015e22:	f000 80db 	beq.w	8015fdc <_dtoa_r+0x8bc>
 8015e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e28:	2a01      	cmp	r2, #1
 8015e2a:	f300 80bf 	bgt.w	8015fac <_dtoa_r+0x88c>
 8015e2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015e30:	2a00      	cmp	r2, #0
 8015e32:	f000 80b7 	beq.w	8015fa4 <_dtoa_r+0x884>
 8015e36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015e3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015e3c:	4646      	mov	r6, r8
 8015e3e:	9a08      	ldr	r2, [sp, #32]
 8015e40:	2101      	movs	r1, #1
 8015e42:	441a      	add	r2, r3
 8015e44:	4658      	mov	r0, fp
 8015e46:	4498      	add	r8, r3
 8015e48:	9208      	str	r2, [sp, #32]
 8015e4a:	f000 fc6d 	bl	8016728 <__i2b>
 8015e4e:	4605      	mov	r5, r0
 8015e50:	b15e      	cbz	r6, 8015e6a <_dtoa_r+0x74a>
 8015e52:	9b08      	ldr	r3, [sp, #32]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	dd08      	ble.n	8015e6a <_dtoa_r+0x74a>
 8015e58:	42b3      	cmp	r3, r6
 8015e5a:	9a08      	ldr	r2, [sp, #32]
 8015e5c:	bfa8      	it	ge
 8015e5e:	4633      	movge	r3, r6
 8015e60:	eba8 0803 	sub.w	r8, r8, r3
 8015e64:	1af6      	subs	r6, r6, r3
 8015e66:	1ad3      	subs	r3, r2, r3
 8015e68:	9308      	str	r3, [sp, #32]
 8015e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e6c:	b1f3      	cbz	r3, 8015eac <_dtoa_r+0x78c>
 8015e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	f000 80b7 	beq.w	8015fe4 <_dtoa_r+0x8c4>
 8015e76:	b18c      	cbz	r4, 8015e9c <_dtoa_r+0x77c>
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4622      	mov	r2, r4
 8015e7c:	4658      	mov	r0, fp
 8015e7e:	f000 fd13 	bl	80168a8 <__pow5mult>
 8015e82:	464a      	mov	r2, r9
 8015e84:	4601      	mov	r1, r0
 8015e86:	4605      	mov	r5, r0
 8015e88:	4658      	mov	r0, fp
 8015e8a:	f000 fc63 	bl	8016754 <__multiply>
 8015e8e:	4649      	mov	r1, r9
 8015e90:	9004      	str	r0, [sp, #16]
 8015e92:	4658      	mov	r0, fp
 8015e94:	f000 fb94 	bl	80165c0 <_Bfree>
 8015e98:	9b04      	ldr	r3, [sp, #16]
 8015e9a:	4699      	mov	r9, r3
 8015e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e9e:	1b1a      	subs	r2, r3, r4
 8015ea0:	d004      	beq.n	8015eac <_dtoa_r+0x78c>
 8015ea2:	4649      	mov	r1, r9
 8015ea4:	4658      	mov	r0, fp
 8015ea6:	f000 fcff 	bl	80168a8 <__pow5mult>
 8015eaa:	4681      	mov	r9, r0
 8015eac:	2101      	movs	r1, #1
 8015eae:	4658      	mov	r0, fp
 8015eb0:	f000 fc3a 	bl	8016728 <__i2b>
 8015eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f000 81cf 	beq.w	801625c <_dtoa_r+0xb3c>
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	4601      	mov	r1, r0
 8015ec2:	4658      	mov	r0, fp
 8015ec4:	f000 fcf0 	bl	80168a8 <__pow5mult>
 8015ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	4604      	mov	r4, r0
 8015ece:	f300 8095 	bgt.w	8015ffc <_dtoa_r+0x8dc>
 8015ed2:	9b02      	ldr	r3, [sp, #8]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	f040 8087 	bne.w	8015fe8 <_dtoa_r+0x8c8>
 8015eda:	9b03      	ldr	r3, [sp, #12]
 8015edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f040 8089 	bne.w	8015ff8 <_dtoa_r+0x8d8>
 8015ee6:	9b03      	ldr	r3, [sp, #12]
 8015ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015eec:	0d1b      	lsrs	r3, r3, #20
 8015eee:	051b      	lsls	r3, r3, #20
 8015ef0:	b12b      	cbz	r3, 8015efe <_dtoa_r+0x7de>
 8015ef2:	9b08      	ldr	r3, [sp, #32]
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	9308      	str	r3, [sp, #32]
 8015ef8:	f108 0801 	add.w	r8, r8, #1
 8015efc:	2301      	movs	r3, #1
 8015efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	f000 81b0 	beq.w	8016268 <_dtoa_r+0xb48>
 8015f08:	6923      	ldr	r3, [r4, #16]
 8015f0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015f0e:	6918      	ldr	r0, [r3, #16]
 8015f10:	f000 fbbe 	bl	8016690 <__hi0bits>
 8015f14:	f1c0 0020 	rsb	r0, r0, #32
 8015f18:	9b08      	ldr	r3, [sp, #32]
 8015f1a:	4418      	add	r0, r3
 8015f1c:	f010 001f 	ands.w	r0, r0, #31
 8015f20:	d077      	beq.n	8016012 <_dtoa_r+0x8f2>
 8015f22:	f1c0 0320 	rsb	r3, r0, #32
 8015f26:	2b04      	cmp	r3, #4
 8015f28:	dd6b      	ble.n	8016002 <_dtoa_r+0x8e2>
 8015f2a:	9b08      	ldr	r3, [sp, #32]
 8015f2c:	f1c0 001c 	rsb	r0, r0, #28
 8015f30:	4403      	add	r3, r0
 8015f32:	4480      	add	r8, r0
 8015f34:	4406      	add	r6, r0
 8015f36:	9308      	str	r3, [sp, #32]
 8015f38:	f1b8 0f00 	cmp.w	r8, #0
 8015f3c:	dd05      	ble.n	8015f4a <_dtoa_r+0x82a>
 8015f3e:	4649      	mov	r1, r9
 8015f40:	4642      	mov	r2, r8
 8015f42:	4658      	mov	r0, fp
 8015f44:	f000 fd0a 	bl	801695c <__lshift>
 8015f48:	4681      	mov	r9, r0
 8015f4a:	9b08      	ldr	r3, [sp, #32]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	dd05      	ble.n	8015f5c <_dtoa_r+0x83c>
 8015f50:	4621      	mov	r1, r4
 8015f52:	461a      	mov	r2, r3
 8015f54:	4658      	mov	r0, fp
 8015f56:	f000 fd01 	bl	801695c <__lshift>
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d059      	beq.n	8016016 <_dtoa_r+0x8f6>
 8015f62:	4621      	mov	r1, r4
 8015f64:	4648      	mov	r0, r9
 8015f66:	f000 fd65 	bl	8016a34 <__mcmp>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	da53      	bge.n	8016016 <_dtoa_r+0x8f6>
 8015f6e:	1e7b      	subs	r3, r7, #1
 8015f70:	9304      	str	r3, [sp, #16]
 8015f72:	4649      	mov	r1, r9
 8015f74:	2300      	movs	r3, #0
 8015f76:	220a      	movs	r2, #10
 8015f78:	4658      	mov	r0, fp
 8015f7a:	f000 fb43 	bl	8016604 <__multadd>
 8015f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f80:	4681      	mov	r9, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f000 8172 	beq.w	801626c <_dtoa_r+0xb4c>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	4629      	mov	r1, r5
 8015f8c:	220a      	movs	r2, #10
 8015f8e:	4658      	mov	r0, fp
 8015f90:	f000 fb38 	bl	8016604 <__multadd>
 8015f94:	9b00      	ldr	r3, [sp, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	4605      	mov	r5, r0
 8015f9a:	dc67      	bgt.n	801606c <_dtoa_r+0x94c>
 8015f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f9e:	2b02      	cmp	r3, #2
 8015fa0:	dc41      	bgt.n	8016026 <_dtoa_r+0x906>
 8015fa2:	e063      	b.n	801606c <_dtoa_r+0x94c>
 8015fa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015faa:	e746      	b.n	8015e3a <_dtoa_r+0x71a>
 8015fac:	9b07      	ldr	r3, [sp, #28]
 8015fae:	1e5c      	subs	r4, r3, #1
 8015fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015fb2:	42a3      	cmp	r3, r4
 8015fb4:	bfbf      	itttt	lt
 8015fb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015fb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015fba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015fbc:	1ae3      	sublt	r3, r4, r3
 8015fbe:	bfb4      	ite	lt
 8015fc0:	18d2      	addlt	r2, r2, r3
 8015fc2:	1b1c      	subge	r4, r3, r4
 8015fc4:	9b07      	ldr	r3, [sp, #28]
 8015fc6:	bfbc      	itt	lt
 8015fc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015fca:	2400      	movlt	r4, #0
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	bfb5      	itete	lt
 8015fd0:	eba8 0603 	sublt.w	r6, r8, r3
 8015fd4:	9b07      	ldrge	r3, [sp, #28]
 8015fd6:	2300      	movlt	r3, #0
 8015fd8:	4646      	movge	r6, r8
 8015fda:	e730      	b.n	8015e3e <_dtoa_r+0x71e>
 8015fdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015fde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015fe0:	4646      	mov	r6, r8
 8015fe2:	e735      	b.n	8015e50 <_dtoa_r+0x730>
 8015fe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015fe6:	e75c      	b.n	8015ea2 <_dtoa_r+0x782>
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e788      	b.n	8015efe <_dtoa_r+0x7de>
 8015fec:	3fe00000 	.word	0x3fe00000
 8015ff0:	40240000 	.word	0x40240000
 8015ff4:	40140000 	.word	0x40140000
 8015ff8:	9b02      	ldr	r3, [sp, #8]
 8015ffa:	e780      	b.n	8015efe <_dtoa_r+0x7de>
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8016000:	e782      	b.n	8015f08 <_dtoa_r+0x7e8>
 8016002:	d099      	beq.n	8015f38 <_dtoa_r+0x818>
 8016004:	9a08      	ldr	r2, [sp, #32]
 8016006:	331c      	adds	r3, #28
 8016008:	441a      	add	r2, r3
 801600a:	4498      	add	r8, r3
 801600c:	441e      	add	r6, r3
 801600e:	9208      	str	r2, [sp, #32]
 8016010:	e792      	b.n	8015f38 <_dtoa_r+0x818>
 8016012:	4603      	mov	r3, r0
 8016014:	e7f6      	b.n	8016004 <_dtoa_r+0x8e4>
 8016016:	9b07      	ldr	r3, [sp, #28]
 8016018:	9704      	str	r7, [sp, #16]
 801601a:	2b00      	cmp	r3, #0
 801601c:	dc20      	bgt.n	8016060 <_dtoa_r+0x940>
 801601e:	9300      	str	r3, [sp, #0]
 8016020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016022:	2b02      	cmp	r3, #2
 8016024:	dd1e      	ble.n	8016064 <_dtoa_r+0x944>
 8016026:	9b00      	ldr	r3, [sp, #0]
 8016028:	2b00      	cmp	r3, #0
 801602a:	f47f aec0 	bne.w	8015dae <_dtoa_r+0x68e>
 801602e:	4621      	mov	r1, r4
 8016030:	2205      	movs	r2, #5
 8016032:	4658      	mov	r0, fp
 8016034:	f000 fae6 	bl	8016604 <__multadd>
 8016038:	4601      	mov	r1, r0
 801603a:	4604      	mov	r4, r0
 801603c:	4648      	mov	r0, r9
 801603e:	f000 fcf9 	bl	8016a34 <__mcmp>
 8016042:	2800      	cmp	r0, #0
 8016044:	f77f aeb3 	ble.w	8015dae <_dtoa_r+0x68e>
 8016048:	4656      	mov	r6, sl
 801604a:	2331      	movs	r3, #49	@ 0x31
 801604c:	f806 3b01 	strb.w	r3, [r6], #1
 8016050:	9b04      	ldr	r3, [sp, #16]
 8016052:	3301      	adds	r3, #1
 8016054:	9304      	str	r3, [sp, #16]
 8016056:	e6ae      	b.n	8015db6 <_dtoa_r+0x696>
 8016058:	9c07      	ldr	r4, [sp, #28]
 801605a:	9704      	str	r7, [sp, #16]
 801605c:	4625      	mov	r5, r4
 801605e:	e7f3      	b.n	8016048 <_dtoa_r+0x928>
 8016060:	9b07      	ldr	r3, [sp, #28]
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016066:	2b00      	cmp	r3, #0
 8016068:	f000 8104 	beq.w	8016274 <_dtoa_r+0xb54>
 801606c:	2e00      	cmp	r6, #0
 801606e:	dd05      	ble.n	801607c <_dtoa_r+0x95c>
 8016070:	4629      	mov	r1, r5
 8016072:	4632      	mov	r2, r6
 8016074:	4658      	mov	r0, fp
 8016076:	f000 fc71 	bl	801695c <__lshift>
 801607a:	4605      	mov	r5, r0
 801607c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801607e:	2b00      	cmp	r3, #0
 8016080:	d05a      	beq.n	8016138 <_dtoa_r+0xa18>
 8016082:	6869      	ldr	r1, [r5, #4]
 8016084:	4658      	mov	r0, fp
 8016086:	f000 fa5b 	bl	8016540 <_Balloc>
 801608a:	4606      	mov	r6, r0
 801608c:	b928      	cbnz	r0, 801609a <_dtoa_r+0x97a>
 801608e:	4b84      	ldr	r3, [pc, #528]	@ (80162a0 <_dtoa_r+0xb80>)
 8016090:	4602      	mov	r2, r0
 8016092:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016096:	f7ff bb5a 	b.w	801574e <_dtoa_r+0x2e>
 801609a:	692a      	ldr	r2, [r5, #16]
 801609c:	3202      	adds	r2, #2
 801609e:	0092      	lsls	r2, r2, #2
 80160a0:	f105 010c 	add.w	r1, r5, #12
 80160a4:	300c      	adds	r0, #12
 80160a6:	f7ff fa7c 	bl	80155a2 <memcpy>
 80160aa:	2201      	movs	r2, #1
 80160ac:	4631      	mov	r1, r6
 80160ae:	4658      	mov	r0, fp
 80160b0:	f000 fc54 	bl	801695c <__lshift>
 80160b4:	f10a 0301 	add.w	r3, sl, #1
 80160b8:	9307      	str	r3, [sp, #28]
 80160ba:	9b00      	ldr	r3, [sp, #0]
 80160bc:	4453      	add	r3, sl
 80160be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80160c0:	9b02      	ldr	r3, [sp, #8]
 80160c2:	f003 0301 	and.w	r3, r3, #1
 80160c6:	462f      	mov	r7, r5
 80160c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80160ca:	4605      	mov	r5, r0
 80160cc:	9b07      	ldr	r3, [sp, #28]
 80160ce:	4621      	mov	r1, r4
 80160d0:	3b01      	subs	r3, #1
 80160d2:	4648      	mov	r0, r9
 80160d4:	9300      	str	r3, [sp, #0]
 80160d6:	f7ff fa99 	bl	801560c <quorem>
 80160da:	4639      	mov	r1, r7
 80160dc:	9002      	str	r0, [sp, #8]
 80160de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80160e2:	4648      	mov	r0, r9
 80160e4:	f000 fca6 	bl	8016a34 <__mcmp>
 80160e8:	462a      	mov	r2, r5
 80160ea:	9008      	str	r0, [sp, #32]
 80160ec:	4621      	mov	r1, r4
 80160ee:	4658      	mov	r0, fp
 80160f0:	f000 fcbc 	bl	8016a6c <__mdiff>
 80160f4:	68c2      	ldr	r2, [r0, #12]
 80160f6:	4606      	mov	r6, r0
 80160f8:	bb02      	cbnz	r2, 801613c <_dtoa_r+0xa1c>
 80160fa:	4601      	mov	r1, r0
 80160fc:	4648      	mov	r0, r9
 80160fe:	f000 fc99 	bl	8016a34 <__mcmp>
 8016102:	4602      	mov	r2, r0
 8016104:	4631      	mov	r1, r6
 8016106:	4658      	mov	r0, fp
 8016108:	920e      	str	r2, [sp, #56]	@ 0x38
 801610a:	f000 fa59 	bl	80165c0 <_Bfree>
 801610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016110:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016112:	9e07      	ldr	r6, [sp, #28]
 8016114:	ea43 0102 	orr.w	r1, r3, r2
 8016118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801611a:	4319      	orrs	r1, r3
 801611c:	d110      	bne.n	8016140 <_dtoa_r+0xa20>
 801611e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016122:	d029      	beq.n	8016178 <_dtoa_r+0xa58>
 8016124:	9b08      	ldr	r3, [sp, #32]
 8016126:	2b00      	cmp	r3, #0
 8016128:	dd02      	ble.n	8016130 <_dtoa_r+0xa10>
 801612a:	9b02      	ldr	r3, [sp, #8]
 801612c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016130:	9b00      	ldr	r3, [sp, #0]
 8016132:	f883 8000 	strb.w	r8, [r3]
 8016136:	e63f      	b.n	8015db8 <_dtoa_r+0x698>
 8016138:	4628      	mov	r0, r5
 801613a:	e7bb      	b.n	80160b4 <_dtoa_r+0x994>
 801613c:	2201      	movs	r2, #1
 801613e:	e7e1      	b.n	8016104 <_dtoa_r+0x9e4>
 8016140:	9b08      	ldr	r3, [sp, #32]
 8016142:	2b00      	cmp	r3, #0
 8016144:	db04      	blt.n	8016150 <_dtoa_r+0xa30>
 8016146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016148:	430b      	orrs	r3, r1
 801614a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801614c:	430b      	orrs	r3, r1
 801614e:	d120      	bne.n	8016192 <_dtoa_r+0xa72>
 8016150:	2a00      	cmp	r2, #0
 8016152:	dded      	ble.n	8016130 <_dtoa_r+0xa10>
 8016154:	4649      	mov	r1, r9
 8016156:	2201      	movs	r2, #1
 8016158:	4658      	mov	r0, fp
 801615a:	f000 fbff 	bl	801695c <__lshift>
 801615e:	4621      	mov	r1, r4
 8016160:	4681      	mov	r9, r0
 8016162:	f000 fc67 	bl	8016a34 <__mcmp>
 8016166:	2800      	cmp	r0, #0
 8016168:	dc03      	bgt.n	8016172 <_dtoa_r+0xa52>
 801616a:	d1e1      	bne.n	8016130 <_dtoa_r+0xa10>
 801616c:	f018 0f01 	tst.w	r8, #1
 8016170:	d0de      	beq.n	8016130 <_dtoa_r+0xa10>
 8016172:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016176:	d1d8      	bne.n	801612a <_dtoa_r+0xa0a>
 8016178:	9a00      	ldr	r2, [sp, #0]
 801617a:	2339      	movs	r3, #57	@ 0x39
 801617c:	7013      	strb	r3, [r2, #0]
 801617e:	4633      	mov	r3, r6
 8016180:	461e      	mov	r6, r3
 8016182:	3b01      	subs	r3, #1
 8016184:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016188:	2a39      	cmp	r2, #57	@ 0x39
 801618a:	d052      	beq.n	8016232 <_dtoa_r+0xb12>
 801618c:	3201      	adds	r2, #1
 801618e:	701a      	strb	r2, [r3, #0]
 8016190:	e612      	b.n	8015db8 <_dtoa_r+0x698>
 8016192:	2a00      	cmp	r2, #0
 8016194:	dd07      	ble.n	80161a6 <_dtoa_r+0xa86>
 8016196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801619a:	d0ed      	beq.n	8016178 <_dtoa_r+0xa58>
 801619c:	9a00      	ldr	r2, [sp, #0]
 801619e:	f108 0301 	add.w	r3, r8, #1
 80161a2:	7013      	strb	r3, [r2, #0]
 80161a4:	e608      	b.n	8015db8 <_dtoa_r+0x698>
 80161a6:	9b07      	ldr	r3, [sp, #28]
 80161a8:	9a07      	ldr	r2, [sp, #28]
 80161aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80161ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80161b0:	4293      	cmp	r3, r2
 80161b2:	d028      	beq.n	8016206 <_dtoa_r+0xae6>
 80161b4:	4649      	mov	r1, r9
 80161b6:	2300      	movs	r3, #0
 80161b8:	220a      	movs	r2, #10
 80161ba:	4658      	mov	r0, fp
 80161bc:	f000 fa22 	bl	8016604 <__multadd>
 80161c0:	42af      	cmp	r7, r5
 80161c2:	4681      	mov	r9, r0
 80161c4:	f04f 0300 	mov.w	r3, #0
 80161c8:	f04f 020a 	mov.w	r2, #10
 80161cc:	4639      	mov	r1, r7
 80161ce:	4658      	mov	r0, fp
 80161d0:	d107      	bne.n	80161e2 <_dtoa_r+0xac2>
 80161d2:	f000 fa17 	bl	8016604 <__multadd>
 80161d6:	4607      	mov	r7, r0
 80161d8:	4605      	mov	r5, r0
 80161da:	9b07      	ldr	r3, [sp, #28]
 80161dc:	3301      	adds	r3, #1
 80161de:	9307      	str	r3, [sp, #28]
 80161e0:	e774      	b.n	80160cc <_dtoa_r+0x9ac>
 80161e2:	f000 fa0f 	bl	8016604 <__multadd>
 80161e6:	4629      	mov	r1, r5
 80161e8:	4607      	mov	r7, r0
 80161ea:	2300      	movs	r3, #0
 80161ec:	220a      	movs	r2, #10
 80161ee:	4658      	mov	r0, fp
 80161f0:	f000 fa08 	bl	8016604 <__multadd>
 80161f4:	4605      	mov	r5, r0
 80161f6:	e7f0      	b.n	80161da <_dtoa_r+0xaba>
 80161f8:	9b00      	ldr	r3, [sp, #0]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	bfcc      	ite	gt
 80161fe:	461e      	movgt	r6, r3
 8016200:	2601      	movle	r6, #1
 8016202:	4456      	add	r6, sl
 8016204:	2700      	movs	r7, #0
 8016206:	4649      	mov	r1, r9
 8016208:	2201      	movs	r2, #1
 801620a:	4658      	mov	r0, fp
 801620c:	f000 fba6 	bl	801695c <__lshift>
 8016210:	4621      	mov	r1, r4
 8016212:	4681      	mov	r9, r0
 8016214:	f000 fc0e 	bl	8016a34 <__mcmp>
 8016218:	2800      	cmp	r0, #0
 801621a:	dcb0      	bgt.n	801617e <_dtoa_r+0xa5e>
 801621c:	d102      	bne.n	8016224 <_dtoa_r+0xb04>
 801621e:	f018 0f01 	tst.w	r8, #1
 8016222:	d1ac      	bne.n	801617e <_dtoa_r+0xa5e>
 8016224:	4633      	mov	r3, r6
 8016226:	461e      	mov	r6, r3
 8016228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801622c:	2a30      	cmp	r2, #48	@ 0x30
 801622e:	d0fa      	beq.n	8016226 <_dtoa_r+0xb06>
 8016230:	e5c2      	b.n	8015db8 <_dtoa_r+0x698>
 8016232:	459a      	cmp	sl, r3
 8016234:	d1a4      	bne.n	8016180 <_dtoa_r+0xa60>
 8016236:	9b04      	ldr	r3, [sp, #16]
 8016238:	3301      	adds	r3, #1
 801623a:	9304      	str	r3, [sp, #16]
 801623c:	2331      	movs	r3, #49	@ 0x31
 801623e:	f88a 3000 	strb.w	r3, [sl]
 8016242:	e5b9      	b.n	8015db8 <_dtoa_r+0x698>
 8016244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016246:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80162a4 <_dtoa_r+0xb84>
 801624a:	b11b      	cbz	r3, 8016254 <_dtoa_r+0xb34>
 801624c:	f10a 0308 	add.w	r3, sl, #8
 8016250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016252:	6013      	str	r3, [r2, #0]
 8016254:	4650      	mov	r0, sl
 8016256:	b019      	add	sp, #100	@ 0x64
 8016258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801625e:	2b01      	cmp	r3, #1
 8016260:	f77f ae37 	ble.w	8015ed2 <_dtoa_r+0x7b2>
 8016264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016266:	930a      	str	r3, [sp, #40]	@ 0x28
 8016268:	2001      	movs	r0, #1
 801626a:	e655      	b.n	8015f18 <_dtoa_r+0x7f8>
 801626c:	9b00      	ldr	r3, [sp, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	f77f aed6 	ble.w	8016020 <_dtoa_r+0x900>
 8016274:	4656      	mov	r6, sl
 8016276:	4621      	mov	r1, r4
 8016278:	4648      	mov	r0, r9
 801627a:	f7ff f9c7 	bl	801560c <quorem>
 801627e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016282:	f806 8b01 	strb.w	r8, [r6], #1
 8016286:	9b00      	ldr	r3, [sp, #0]
 8016288:	eba6 020a 	sub.w	r2, r6, sl
 801628c:	4293      	cmp	r3, r2
 801628e:	ddb3      	ble.n	80161f8 <_dtoa_r+0xad8>
 8016290:	4649      	mov	r1, r9
 8016292:	2300      	movs	r3, #0
 8016294:	220a      	movs	r2, #10
 8016296:	4658      	mov	r0, fp
 8016298:	f000 f9b4 	bl	8016604 <__multadd>
 801629c:	4681      	mov	r9, r0
 801629e:	e7ea      	b.n	8016276 <_dtoa_r+0xb56>
 80162a0:	08019f0b 	.word	0x08019f0b
 80162a4:	08019ea6 	.word	0x08019ea6

080162a8 <_free_r>:
 80162a8:	b538      	push	{r3, r4, r5, lr}
 80162aa:	4605      	mov	r5, r0
 80162ac:	2900      	cmp	r1, #0
 80162ae:	d041      	beq.n	8016334 <_free_r+0x8c>
 80162b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162b4:	1f0c      	subs	r4, r1, #4
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	bfb8      	it	lt
 80162ba:	18e4      	addlt	r4, r4, r3
 80162bc:	f000 f934 	bl	8016528 <__malloc_lock>
 80162c0:	4a1d      	ldr	r2, [pc, #116]	@ (8016338 <_free_r+0x90>)
 80162c2:	6813      	ldr	r3, [r2, #0]
 80162c4:	b933      	cbnz	r3, 80162d4 <_free_r+0x2c>
 80162c6:	6063      	str	r3, [r4, #4]
 80162c8:	6014      	str	r4, [r2, #0]
 80162ca:	4628      	mov	r0, r5
 80162cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162d0:	f000 b930 	b.w	8016534 <__malloc_unlock>
 80162d4:	42a3      	cmp	r3, r4
 80162d6:	d908      	bls.n	80162ea <_free_r+0x42>
 80162d8:	6820      	ldr	r0, [r4, #0]
 80162da:	1821      	adds	r1, r4, r0
 80162dc:	428b      	cmp	r3, r1
 80162de:	bf01      	itttt	eq
 80162e0:	6819      	ldreq	r1, [r3, #0]
 80162e2:	685b      	ldreq	r3, [r3, #4]
 80162e4:	1809      	addeq	r1, r1, r0
 80162e6:	6021      	streq	r1, [r4, #0]
 80162e8:	e7ed      	b.n	80162c6 <_free_r+0x1e>
 80162ea:	461a      	mov	r2, r3
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	b10b      	cbz	r3, 80162f4 <_free_r+0x4c>
 80162f0:	42a3      	cmp	r3, r4
 80162f2:	d9fa      	bls.n	80162ea <_free_r+0x42>
 80162f4:	6811      	ldr	r1, [r2, #0]
 80162f6:	1850      	adds	r0, r2, r1
 80162f8:	42a0      	cmp	r0, r4
 80162fa:	d10b      	bne.n	8016314 <_free_r+0x6c>
 80162fc:	6820      	ldr	r0, [r4, #0]
 80162fe:	4401      	add	r1, r0
 8016300:	1850      	adds	r0, r2, r1
 8016302:	4283      	cmp	r3, r0
 8016304:	6011      	str	r1, [r2, #0]
 8016306:	d1e0      	bne.n	80162ca <_free_r+0x22>
 8016308:	6818      	ldr	r0, [r3, #0]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	6053      	str	r3, [r2, #4]
 801630e:	4408      	add	r0, r1
 8016310:	6010      	str	r0, [r2, #0]
 8016312:	e7da      	b.n	80162ca <_free_r+0x22>
 8016314:	d902      	bls.n	801631c <_free_r+0x74>
 8016316:	230c      	movs	r3, #12
 8016318:	602b      	str	r3, [r5, #0]
 801631a:	e7d6      	b.n	80162ca <_free_r+0x22>
 801631c:	6820      	ldr	r0, [r4, #0]
 801631e:	1821      	adds	r1, r4, r0
 8016320:	428b      	cmp	r3, r1
 8016322:	bf04      	itt	eq
 8016324:	6819      	ldreq	r1, [r3, #0]
 8016326:	685b      	ldreq	r3, [r3, #4]
 8016328:	6063      	str	r3, [r4, #4]
 801632a:	bf04      	itt	eq
 801632c:	1809      	addeq	r1, r1, r0
 801632e:	6021      	streq	r1, [r4, #0]
 8016330:	6054      	str	r4, [r2, #4]
 8016332:	e7ca      	b.n	80162ca <_free_r+0x22>
 8016334:	bd38      	pop	{r3, r4, r5, pc}
 8016336:	bf00      	nop
 8016338:	2000a900 	.word	0x2000a900

0801633c <_findenv_r>:
 801633c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016340:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80163b0 <_findenv_r+0x74>
 8016344:	4606      	mov	r6, r0
 8016346:	4689      	mov	r9, r1
 8016348:	4617      	mov	r7, r2
 801634a:	f001 f837 	bl	80173bc <__env_lock>
 801634e:	f8da 4000 	ldr.w	r4, [sl]
 8016352:	b134      	cbz	r4, 8016362 <_findenv_r+0x26>
 8016354:	464b      	mov	r3, r9
 8016356:	4698      	mov	r8, r3
 8016358:	f813 2b01 	ldrb.w	r2, [r3], #1
 801635c:	b13a      	cbz	r2, 801636e <_findenv_r+0x32>
 801635e:	2a3d      	cmp	r2, #61	@ 0x3d
 8016360:	d1f9      	bne.n	8016356 <_findenv_r+0x1a>
 8016362:	4630      	mov	r0, r6
 8016364:	f001 f830 	bl	80173c8 <__env_unlock>
 8016368:	2000      	movs	r0, #0
 801636a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801636e:	eba8 0809 	sub.w	r8, r8, r9
 8016372:	46a3      	mov	fp, r4
 8016374:	f854 0b04 	ldr.w	r0, [r4], #4
 8016378:	2800      	cmp	r0, #0
 801637a:	d0f2      	beq.n	8016362 <_findenv_r+0x26>
 801637c:	4642      	mov	r2, r8
 801637e:	4649      	mov	r1, r9
 8016380:	f000 ff34 	bl	80171ec <strncmp>
 8016384:	2800      	cmp	r0, #0
 8016386:	d1f4      	bne.n	8016372 <_findenv_r+0x36>
 8016388:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801638c:	eb03 0508 	add.w	r5, r3, r8
 8016390:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016394:	2b3d      	cmp	r3, #61	@ 0x3d
 8016396:	d1ec      	bne.n	8016372 <_findenv_r+0x36>
 8016398:	f8da 3000 	ldr.w	r3, [sl]
 801639c:	ebab 0303 	sub.w	r3, fp, r3
 80163a0:	109b      	asrs	r3, r3, #2
 80163a2:	4630      	mov	r0, r6
 80163a4:	603b      	str	r3, [r7, #0]
 80163a6:	f001 f80f 	bl	80173c8 <__env_unlock>
 80163aa:	1c68      	adds	r0, r5, #1
 80163ac:	e7dd      	b.n	801636a <_findenv_r+0x2e>
 80163ae:	bf00      	nop
 80163b0:	20000010 	.word	0x20000010

080163b4 <_getenv_r>:
 80163b4:	b507      	push	{r0, r1, r2, lr}
 80163b6:	aa01      	add	r2, sp, #4
 80163b8:	f7ff ffc0 	bl	801633c <_findenv_r>
 80163bc:	b003      	add	sp, #12
 80163be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080163c4 <malloc>:
 80163c4:	4b02      	ldr	r3, [pc, #8]	@ (80163d0 <malloc+0xc>)
 80163c6:	4601      	mov	r1, r0
 80163c8:	6818      	ldr	r0, [r3, #0]
 80163ca:	f000 b82d 	b.w	8016428 <_malloc_r>
 80163ce:	bf00      	nop
 80163d0:	20000034 	.word	0x20000034

080163d4 <free>:
 80163d4:	4b02      	ldr	r3, [pc, #8]	@ (80163e0 <free+0xc>)
 80163d6:	4601      	mov	r1, r0
 80163d8:	6818      	ldr	r0, [r3, #0]
 80163da:	f7ff bf65 	b.w	80162a8 <_free_r>
 80163de:	bf00      	nop
 80163e0:	20000034 	.word	0x20000034

080163e4 <sbrk_aligned>:
 80163e4:	b570      	push	{r4, r5, r6, lr}
 80163e6:	4e0f      	ldr	r6, [pc, #60]	@ (8016424 <sbrk_aligned+0x40>)
 80163e8:	460c      	mov	r4, r1
 80163ea:	6831      	ldr	r1, [r6, #0]
 80163ec:	4605      	mov	r5, r0
 80163ee:	b911      	cbnz	r1, 80163f6 <sbrk_aligned+0x12>
 80163f0:	f000 ffb8 	bl	8017364 <_sbrk_r>
 80163f4:	6030      	str	r0, [r6, #0]
 80163f6:	4621      	mov	r1, r4
 80163f8:	4628      	mov	r0, r5
 80163fa:	f000 ffb3 	bl	8017364 <_sbrk_r>
 80163fe:	1c43      	adds	r3, r0, #1
 8016400:	d103      	bne.n	801640a <sbrk_aligned+0x26>
 8016402:	f04f 34ff 	mov.w	r4, #4294967295
 8016406:	4620      	mov	r0, r4
 8016408:	bd70      	pop	{r4, r5, r6, pc}
 801640a:	1cc4      	adds	r4, r0, #3
 801640c:	f024 0403 	bic.w	r4, r4, #3
 8016410:	42a0      	cmp	r0, r4
 8016412:	d0f8      	beq.n	8016406 <sbrk_aligned+0x22>
 8016414:	1a21      	subs	r1, r4, r0
 8016416:	4628      	mov	r0, r5
 8016418:	f000 ffa4 	bl	8017364 <_sbrk_r>
 801641c:	3001      	adds	r0, #1
 801641e:	d1f2      	bne.n	8016406 <sbrk_aligned+0x22>
 8016420:	e7ef      	b.n	8016402 <sbrk_aligned+0x1e>
 8016422:	bf00      	nop
 8016424:	2000a8fc 	.word	0x2000a8fc

08016428 <_malloc_r>:
 8016428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801642c:	1ccd      	adds	r5, r1, #3
 801642e:	f025 0503 	bic.w	r5, r5, #3
 8016432:	3508      	adds	r5, #8
 8016434:	2d0c      	cmp	r5, #12
 8016436:	bf38      	it	cc
 8016438:	250c      	movcc	r5, #12
 801643a:	2d00      	cmp	r5, #0
 801643c:	4606      	mov	r6, r0
 801643e:	db01      	blt.n	8016444 <_malloc_r+0x1c>
 8016440:	42a9      	cmp	r1, r5
 8016442:	d904      	bls.n	801644e <_malloc_r+0x26>
 8016444:	230c      	movs	r3, #12
 8016446:	6033      	str	r3, [r6, #0]
 8016448:	2000      	movs	r0, #0
 801644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801644e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016524 <_malloc_r+0xfc>
 8016452:	f000 f869 	bl	8016528 <__malloc_lock>
 8016456:	f8d8 3000 	ldr.w	r3, [r8]
 801645a:	461c      	mov	r4, r3
 801645c:	bb44      	cbnz	r4, 80164b0 <_malloc_r+0x88>
 801645e:	4629      	mov	r1, r5
 8016460:	4630      	mov	r0, r6
 8016462:	f7ff ffbf 	bl	80163e4 <sbrk_aligned>
 8016466:	1c43      	adds	r3, r0, #1
 8016468:	4604      	mov	r4, r0
 801646a:	d158      	bne.n	801651e <_malloc_r+0xf6>
 801646c:	f8d8 4000 	ldr.w	r4, [r8]
 8016470:	4627      	mov	r7, r4
 8016472:	2f00      	cmp	r7, #0
 8016474:	d143      	bne.n	80164fe <_malloc_r+0xd6>
 8016476:	2c00      	cmp	r4, #0
 8016478:	d04b      	beq.n	8016512 <_malloc_r+0xea>
 801647a:	6823      	ldr	r3, [r4, #0]
 801647c:	4639      	mov	r1, r7
 801647e:	4630      	mov	r0, r6
 8016480:	eb04 0903 	add.w	r9, r4, r3
 8016484:	f000 ff6e 	bl	8017364 <_sbrk_r>
 8016488:	4581      	cmp	r9, r0
 801648a:	d142      	bne.n	8016512 <_malloc_r+0xea>
 801648c:	6821      	ldr	r1, [r4, #0]
 801648e:	1a6d      	subs	r5, r5, r1
 8016490:	4629      	mov	r1, r5
 8016492:	4630      	mov	r0, r6
 8016494:	f7ff ffa6 	bl	80163e4 <sbrk_aligned>
 8016498:	3001      	adds	r0, #1
 801649a:	d03a      	beq.n	8016512 <_malloc_r+0xea>
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	442b      	add	r3, r5
 80164a0:	6023      	str	r3, [r4, #0]
 80164a2:	f8d8 3000 	ldr.w	r3, [r8]
 80164a6:	685a      	ldr	r2, [r3, #4]
 80164a8:	bb62      	cbnz	r2, 8016504 <_malloc_r+0xdc>
 80164aa:	f8c8 7000 	str.w	r7, [r8]
 80164ae:	e00f      	b.n	80164d0 <_malloc_r+0xa8>
 80164b0:	6822      	ldr	r2, [r4, #0]
 80164b2:	1b52      	subs	r2, r2, r5
 80164b4:	d420      	bmi.n	80164f8 <_malloc_r+0xd0>
 80164b6:	2a0b      	cmp	r2, #11
 80164b8:	d917      	bls.n	80164ea <_malloc_r+0xc2>
 80164ba:	1961      	adds	r1, r4, r5
 80164bc:	42a3      	cmp	r3, r4
 80164be:	6025      	str	r5, [r4, #0]
 80164c0:	bf18      	it	ne
 80164c2:	6059      	strne	r1, [r3, #4]
 80164c4:	6863      	ldr	r3, [r4, #4]
 80164c6:	bf08      	it	eq
 80164c8:	f8c8 1000 	streq.w	r1, [r8]
 80164cc:	5162      	str	r2, [r4, r5]
 80164ce:	604b      	str	r3, [r1, #4]
 80164d0:	4630      	mov	r0, r6
 80164d2:	f000 f82f 	bl	8016534 <__malloc_unlock>
 80164d6:	f104 000b 	add.w	r0, r4, #11
 80164da:	1d23      	adds	r3, r4, #4
 80164dc:	f020 0007 	bic.w	r0, r0, #7
 80164e0:	1ac2      	subs	r2, r0, r3
 80164e2:	bf1c      	itt	ne
 80164e4:	1a1b      	subne	r3, r3, r0
 80164e6:	50a3      	strne	r3, [r4, r2]
 80164e8:	e7af      	b.n	801644a <_malloc_r+0x22>
 80164ea:	6862      	ldr	r2, [r4, #4]
 80164ec:	42a3      	cmp	r3, r4
 80164ee:	bf0c      	ite	eq
 80164f0:	f8c8 2000 	streq.w	r2, [r8]
 80164f4:	605a      	strne	r2, [r3, #4]
 80164f6:	e7eb      	b.n	80164d0 <_malloc_r+0xa8>
 80164f8:	4623      	mov	r3, r4
 80164fa:	6864      	ldr	r4, [r4, #4]
 80164fc:	e7ae      	b.n	801645c <_malloc_r+0x34>
 80164fe:	463c      	mov	r4, r7
 8016500:	687f      	ldr	r7, [r7, #4]
 8016502:	e7b6      	b.n	8016472 <_malloc_r+0x4a>
 8016504:	461a      	mov	r2, r3
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	42a3      	cmp	r3, r4
 801650a:	d1fb      	bne.n	8016504 <_malloc_r+0xdc>
 801650c:	2300      	movs	r3, #0
 801650e:	6053      	str	r3, [r2, #4]
 8016510:	e7de      	b.n	80164d0 <_malloc_r+0xa8>
 8016512:	230c      	movs	r3, #12
 8016514:	6033      	str	r3, [r6, #0]
 8016516:	4630      	mov	r0, r6
 8016518:	f000 f80c 	bl	8016534 <__malloc_unlock>
 801651c:	e794      	b.n	8016448 <_malloc_r+0x20>
 801651e:	6005      	str	r5, [r0, #0]
 8016520:	e7d6      	b.n	80164d0 <_malloc_r+0xa8>
 8016522:	bf00      	nop
 8016524:	2000a900 	.word	0x2000a900

08016528 <__malloc_lock>:
 8016528:	4801      	ldr	r0, [pc, #4]	@ (8016530 <__malloc_lock+0x8>)
 801652a:	f7ff b82f 	b.w	801558c <__retarget_lock_acquire_recursive>
 801652e:	bf00      	nop
 8016530:	2000a8fa 	.word	0x2000a8fa

08016534 <__malloc_unlock>:
 8016534:	4801      	ldr	r0, [pc, #4]	@ (801653c <__malloc_unlock+0x8>)
 8016536:	f7ff b82b 	b.w	8015590 <__retarget_lock_release_recursive>
 801653a:	bf00      	nop
 801653c:	2000a8fa 	.word	0x2000a8fa

08016540 <_Balloc>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	69c6      	ldr	r6, [r0, #28]
 8016544:	4604      	mov	r4, r0
 8016546:	460d      	mov	r5, r1
 8016548:	b976      	cbnz	r6, 8016568 <_Balloc+0x28>
 801654a:	2010      	movs	r0, #16
 801654c:	f7ff ff3a 	bl	80163c4 <malloc>
 8016550:	4602      	mov	r2, r0
 8016552:	61e0      	str	r0, [r4, #28]
 8016554:	b920      	cbnz	r0, 8016560 <_Balloc+0x20>
 8016556:	4b18      	ldr	r3, [pc, #96]	@ (80165b8 <_Balloc+0x78>)
 8016558:	4818      	ldr	r0, [pc, #96]	@ (80165bc <_Balloc+0x7c>)
 801655a:	216b      	movs	r1, #107	@ 0x6b
 801655c:	f7ff f830 	bl	80155c0 <__assert_func>
 8016560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016564:	6006      	str	r6, [r0, #0]
 8016566:	60c6      	str	r6, [r0, #12]
 8016568:	69e6      	ldr	r6, [r4, #28]
 801656a:	68f3      	ldr	r3, [r6, #12]
 801656c:	b183      	cbz	r3, 8016590 <_Balloc+0x50>
 801656e:	69e3      	ldr	r3, [r4, #28]
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016576:	b9b8      	cbnz	r0, 80165a8 <_Balloc+0x68>
 8016578:	2101      	movs	r1, #1
 801657a:	fa01 f605 	lsl.w	r6, r1, r5
 801657e:	1d72      	adds	r2, r6, #5
 8016580:	0092      	lsls	r2, r2, #2
 8016582:	4620      	mov	r0, r4
 8016584:	f000 ff05 	bl	8017392 <_calloc_r>
 8016588:	b160      	cbz	r0, 80165a4 <_Balloc+0x64>
 801658a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801658e:	e00e      	b.n	80165ae <_Balloc+0x6e>
 8016590:	2221      	movs	r2, #33	@ 0x21
 8016592:	2104      	movs	r1, #4
 8016594:	4620      	mov	r0, r4
 8016596:	f000 fefc 	bl	8017392 <_calloc_r>
 801659a:	69e3      	ldr	r3, [r4, #28]
 801659c:	60f0      	str	r0, [r6, #12]
 801659e:	68db      	ldr	r3, [r3, #12]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d1e4      	bne.n	801656e <_Balloc+0x2e>
 80165a4:	2000      	movs	r0, #0
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	6802      	ldr	r2, [r0, #0]
 80165aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165ae:	2300      	movs	r3, #0
 80165b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80165b4:	e7f7      	b.n	80165a6 <_Balloc+0x66>
 80165b6:	bf00      	nop
 80165b8:	08019c60 	.word	0x08019c60
 80165bc:	08019f1c 	.word	0x08019f1c

080165c0 <_Bfree>:
 80165c0:	b570      	push	{r4, r5, r6, lr}
 80165c2:	69c6      	ldr	r6, [r0, #28]
 80165c4:	4605      	mov	r5, r0
 80165c6:	460c      	mov	r4, r1
 80165c8:	b976      	cbnz	r6, 80165e8 <_Bfree+0x28>
 80165ca:	2010      	movs	r0, #16
 80165cc:	f7ff fefa 	bl	80163c4 <malloc>
 80165d0:	4602      	mov	r2, r0
 80165d2:	61e8      	str	r0, [r5, #28]
 80165d4:	b920      	cbnz	r0, 80165e0 <_Bfree+0x20>
 80165d6:	4b09      	ldr	r3, [pc, #36]	@ (80165fc <_Bfree+0x3c>)
 80165d8:	4809      	ldr	r0, [pc, #36]	@ (8016600 <_Bfree+0x40>)
 80165da:	218f      	movs	r1, #143	@ 0x8f
 80165dc:	f7fe fff0 	bl	80155c0 <__assert_func>
 80165e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165e4:	6006      	str	r6, [r0, #0]
 80165e6:	60c6      	str	r6, [r0, #12]
 80165e8:	b13c      	cbz	r4, 80165fa <_Bfree+0x3a>
 80165ea:	69eb      	ldr	r3, [r5, #28]
 80165ec:	6862      	ldr	r2, [r4, #4]
 80165ee:	68db      	ldr	r3, [r3, #12]
 80165f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165f4:	6021      	str	r1, [r4, #0]
 80165f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165fa:	bd70      	pop	{r4, r5, r6, pc}
 80165fc:	08019c60 	.word	0x08019c60
 8016600:	08019f1c 	.word	0x08019f1c

08016604 <__multadd>:
 8016604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016608:	690d      	ldr	r5, [r1, #16]
 801660a:	4607      	mov	r7, r0
 801660c:	460c      	mov	r4, r1
 801660e:	461e      	mov	r6, r3
 8016610:	f101 0c14 	add.w	ip, r1, #20
 8016614:	2000      	movs	r0, #0
 8016616:	f8dc 3000 	ldr.w	r3, [ip]
 801661a:	b299      	uxth	r1, r3
 801661c:	fb02 6101 	mla	r1, r2, r1, r6
 8016620:	0c1e      	lsrs	r6, r3, #16
 8016622:	0c0b      	lsrs	r3, r1, #16
 8016624:	fb02 3306 	mla	r3, r2, r6, r3
 8016628:	b289      	uxth	r1, r1
 801662a:	3001      	adds	r0, #1
 801662c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016630:	4285      	cmp	r5, r0
 8016632:	f84c 1b04 	str.w	r1, [ip], #4
 8016636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801663a:	dcec      	bgt.n	8016616 <__multadd+0x12>
 801663c:	b30e      	cbz	r6, 8016682 <__multadd+0x7e>
 801663e:	68a3      	ldr	r3, [r4, #8]
 8016640:	42ab      	cmp	r3, r5
 8016642:	dc19      	bgt.n	8016678 <__multadd+0x74>
 8016644:	6861      	ldr	r1, [r4, #4]
 8016646:	4638      	mov	r0, r7
 8016648:	3101      	adds	r1, #1
 801664a:	f7ff ff79 	bl	8016540 <_Balloc>
 801664e:	4680      	mov	r8, r0
 8016650:	b928      	cbnz	r0, 801665e <__multadd+0x5a>
 8016652:	4602      	mov	r2, r0
 8016654:	4b0c      	ldr	r3, [pc, #48]	@ (8016688 <__multadd+0x84>)
 8016656:	480d      	ldr	r0, [pc, #52]	@ (801668c <__multadd+0x88>)
 8016658:	21ba      	movs	r1, #186	@ 0xba
 801665a:	f7fe ffb1 	bl	80155c0 <__assert_func>
 801665e:	6922      	ldr	r2, [r4, #16]
 8016660:	3202      	adds	r2, #2
 8016662:	f104 010c 	add.w	r1, r4, #12
 8016666:	0092      	lsls	r2, r2, #2
 8016668:	300c      	adds	r0, #12
 801666a:	f7fe ff9a 	bl	80155a2 <memcpy>
 801666e:	4621      	mov	r1, r4
 8016670:	4638      	mov	r0, r7
 8016672:	f7ff ffa5 	bl	80165c0 <_Bfree>
 8016676:	4644      	mov	r4, r8
 8016678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801667c:	3501      	adds	r5, #1
 801667e:	615e      	str	r6, [r3, #20]
 8016680:	6125      	str	r5, [r4, #16]
 8016682:	4620      	mov	r0, r4
 8016684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016688:	08019f0b 	.word	0x08019f0b
 801668c:	08019f1c 	.word	0x08019f1c

08016690 <__hi0bits>:
 8016690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016694:	4603      	mov	r3, r0
 8016696:	bf36      	itet	cc
 8016698:	0403      	lslcc	r3, r0, #16
 801669a:	2000      	movcs	r0, #0
 801669c:	2010      	movcc	r0, #16
 801669e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80166a2:	bf3c      	itt	cc
 80166a4:	021b      	lslcc	r3, r3, #8
 80166a6:	3008      	addcc	r0, #8
 80166a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80166ac:	bf3c      	itt	cc
 80166ae:	011b      	lslcc	r3, r3, #4
 80166b0:	3004      	addcc	r0, #4
 80166b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80166b6:	bf3c      	itt	cc
 80166b8:	009b      	lslcc	r3, r3, #2
 80166ba:	3002      	addcc	r0, #2
 80166bc:	2b00      	cmp	r3, #0
 80166be:	db05      	blt.n	80166cc <__hi0bits+0x3c>
 80166c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80166c4:	f100 0001 	add.w	r0, r0, #1
 80166c8:	bf08      	it	eq
 80166ca:	2020      	moveq	r0, #32
 80166cc:	4770      	bx	lr

080166ce <__lo0bits>:
 80166ce:	6803      	ldr	r3, [r0, #0]
 80166d0:	4602      	mov	r2, r0
 80166d2:	f013 0007 	ands.w	r0, r3, #7
 80166d6:	d00b      	beq.n	80166f0 <__lo0bits+0x22>
 80166d8:	07d9      	lsls	r1, r3, #31
 80166da:	d421      	bmi.n	8016720 <__lo0bits+0x52>
 80166dc:	0798      	lsls	r0, r3, #30
 80166de:	bf49      	itett	mi
 80166e0:	085b      	lsrmi	r3, r3, #1
 80166e2:	089b      	lsrpl	r3, r3, #2
 80166e4:	2001      	movmi	r0, #1
 80166e6:	6013      	strmi	r3, [r2, #0]
 80166e8:	bf5c      	itt	pl
 80166ea:	6013      	strpl	r3, [r2, #0]
 80166ec:	2002      	movpl	r0, #2
 80166ee:	4770      	bx	lr
 80166f0:	b299      	uxth	r1, r3
 80166f2:	b909      	cbnz	r1, 80166f8 <__lo0bits+0x2a>
 80166f4:	0c1b      	lsrs	r3, r3, #16
 80166f6:	2010      	movs	r0, #16
 80166f8:	b2d9      	uxtb	r1, r3
 80166fa:	b909      	cbnz	r1, 8016700 <__lo0bits+0x32>
 80166fc:	3008      	adds	r0, #8
 80166fe:	0a1b      	lsrs	r3, r3, #8
 8016700:	0719      	lsls	r1, r3, #28
 8016702:	bf04      	itt	eq
 8016704:	091b      	lsreq	r3, r3, #4
 8016706:	3004      	addeq	r0, #4
 8016708:	0799      	lsls	r1, r3, #30
 801670a:	bf04      	itt	eq
 801670c:	089b      	lsreq	r3, r3, #2
 801670e:	3002      	addeq	r0, #2
 8016710:	07d9      	lsls	r1, r3, #31
 8016712:	d403      	bmi.n	801671c <__lo0bits+0x4e>
 8016714:	085b      	lsrs	r3, r3, #1
 8016716:	f100 0001 	add.w	r0, r0, #1
 801671a:	d003      	beq.n	8016724 <__lo0bits+0x56>
 801671c:	6013      	str	r3, [r2, #0]
 801671e:	4770      	bx	lr
 8016720:	2000      	movs	r0, #0
 8016722:	4770      	bx	lr
 8016724:	2020      	movs	r0, #32
 8016726:	4770      	bx	lr

08016728 <__i2b>:
 8016728:	b510      	push	{r4, lr}
 801672a:	460c      	mov	r4, r1
 801672c:	2101      	movs	r1, #1
 801672e:	f7ff ff07 	bl	8016540 <_Balloc>
 8016732:	4602      	mov	r2, r0
 8016734:	b928      	cbnz	r0, 8016742 <__i2b+0x1a>
 8016736:	4b05      	ldr	r3, [pc, #20]	@ (801674c <__i2b+0x24>)
 8016738:	4805      	ldr	r0, [pc, #20]	@ (8016750 <__i2b+0x28>)
 801673a:	f240 1145 	movw	r1, #325	@ 0x145
 801673e:	f7fe ff3f 	bl	80155c0 <__assert_func>
 8016742:	2301      	movs	r3, #1
 8016744:	6144      	str	r4, [r0, #20]
 8016746:	6103      	str	r3, [r0, #16]
 8016748:	bd10      	pop	{r4, pc}
 801674a:	bf00      	nop
 801674c:	08019f0b 	.word	0x08019f0b
 8016750:	08019f1c 	.word	0x08019f1c

08016754 <__multiply>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	4614      	mov	r4, r2
 801675a:	690a      	ldr	r2, [r1, #16]
 801675c:	6923      	ldr	r3, [r4, #16]
 801675e:	429a      	cmp	r2, r3
 8016760:	bfa8      	it	ge
 8016762:	4623      	movge	r3, r4
 8016764:	460f      	mov	r7, r1
 8016766:	bfa4      	itt	ge
 8016768:	460c      	movge	r4, r1
 801676a:	461f      	movge	r7, r3
 801676c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016770:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016774:	68a3      	ldr	r3, [r4, #8]
 8016776:	6861      	ldr	r1, [r4, #4]
 8016778:	eb0a 0609 	add.w	r6, sl, r9
 801677c:	42b3      	cmp	r3, r6
 801677e:	b085      	sub	sp, #20
 8016780:	bfb8      	it	lt
 8016782:	3101      	addlt	r1, #1
 8016784:	f7ff fedc 	bl	8016540 <_Balloc>
 8016788:	b930      	cbnz	r0, 8016798 <__multiply+0x44>
 801678a:	4602      	mov	r2, r0
 801678c:	4b44      	ldr	r3, [pc, #272]	@ (80168a0 <__multiply+0x14c>)
 801678e:	4845      	ldr	r0, [pc, #276]	@ (80168a4 <__multiply+0x150>)
 8016790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016794:	f7fe ff14 	bl	80155c0 <__assert_func>
 8016798:	f100 0514 	add.w	r5, r0, #20
 801679c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80167a0:	462b      	mov	r3, r5
 80167a2:	2200      	movs	r2, #0
 80167a4:	4543      	cmp	r3, r8
 80167a6:	d321      	bcc.n	80167ec <__multiply+0x98>
 80167a8:	f107 0114 	add.w	r1, r7, #20
 80167ac:	f104 0214 	add.w	r2, r4, #20
 80167b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80167b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80167b8:	9302      	str	r3, [sp, #8]
 80167ba:	1b13      	subs	r3, r2, r4
 80167bc:	3b15      	subs	r3, #21
 80167be:	f023 0303 	bic.w	r3, r3, #3
 80167c2:	3304      	adds	r3, #4
 80167c4:	f104 0715 	add.w	r7, r4, #21
 80167c8:	42ba      	cmp	r2, r7
 80167ca:	bf38      	it	cc
 80167cc:	2304      	movcc	r3, #4
 80167ce:	9301      	str	r3, [sp, #4]
 80167d0:	9b02      	ldr	r3, [sp, #8]
 80167d2:	9103      	str	r1, [sp, #12]
 80167d4:	428b      	cmp	r3, r1
 80167d6:	d80c      	bhi.n	80167f2 <__multiply+0x9e>
 80167d8:	2e00      	cmp	r6, #0
 80167da:	dd03      	ble.n	80167e4 <__multiply+0x90>
 80167dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d05b      	beq.n	801689c <__multiply+0x148>
 80167e4:	6106      	str	r6, [r0, #16]
 80167e6:	b005      	add	sp, #20
 80167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ec:	f843 2b04 	str.w	r2, [r3], #4
 80167f0:	e7d8      	b.n	80167a4 <__multiply+0x50>
 80167f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80167f6:	f1ba 0f00 	cmp.w	sl, #0
 80167fa:	d024      	beq.n	8016846 <__multiply+0xf2>
 80167fc:	f104 0e14 	add.w	lr, r4, #20
 8016800:	46a9      	mov	r9, r5
 8016802:	f04f 0c00 	mov.w	ip, #0
 8016806:	f85e 7b04 	ldr.w	r7, [lr], #4
 801680a:	f8d9 3000 	ldr.w	r3, [r9]
 801680e:	fa1f fb87 	uxth.w	fp, r7
 8016812:	b29b      	uxth	r3, r3
 8016814:	fb0a 330b 	mla	r3, sl, fp, r3
 8016818:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801681c:	f8d9 7000 	ldr.w	r7, [r9]
 8016820:	4463      	add	r3, ip
 8016822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016826:	fb0a c70b 	mla	r7, sl, fp, ip
 801682a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801682e:	b29b      	uxth	r3, r3
 8016830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016834:	4572      	cmp	r2, lr
 8016836:	f849 3b04 	str.w	r3, [r9], #4
 801683a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801683e:	d8e2      	bhi.n	8016806 <__multiply+0xb2>
 8016840:	9b01      	ldr	r3, [sp, #4]
 8016842:	f845 c003 	str.w	ip, [r5, r3]
 8016846:	9b03      	ldr	r3, [sp, #12]
 8016848:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801684c:	3104      	adds	r1, #4
 801684e:	f1b9 0f00 	cmp.w	r9, #0
 8016852:	d021      	beq.n	8016898 <__multiply+0x144>
 8016854:	682b      	ldr	r3, [r5, #0]
 8016856:	f104 0c14 	add.w	ip, r4, #20
 801685a:	46ae      	mov	lr, r5
 801685c:	f04f 0a00 	mov.w	sl, #0
 8016860:	f8bc b000 	ldrh.w	fp, [ip]
 8016864:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016868:	fb09 770b 	mla	r7, r9, fp, r7
 801686c:	4457      	add	r7, sl
 801686e:	b29b      	uxth	r3, r3
 8016870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016874:	f84e 3b04 	str.w	r3, [lr], #4
 8016878:	f85c 3b04 	ldr.w	r3, [ip], #4
 801687c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016880:	f8be 3000 	ldrh.w	r3, [lr]
 8016884:	fb09 330a 	mla	r3, r9, sl, r3
 8016888:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801688c:	4562      	cmp	r2, ip
 801688e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016892:	d8e5      	bhi.n	8016860 <__multiply+0x10c>
 8016894:	9f01      	ldr	r7, [sp, #4]
 8016896:	51eb      	str	r3, [r5, r7]
 8016898:	3504      	adds	r5, #4
 801689a:	e799      	b.n	80167d0 <__multiply+0x7c>
 801689c:	3e01      	subs	r6, #1
 801689e:	e79b      	b.n	80167d8 <__multiply+0x84>
 80168a0:	08019f0b 	.word	0x08019f0b
 80168a4:	08019f1c 	.word	0x08019f1c

080168a8 <__pow5mult>:
 80168a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ac:	4615      	mov	r5, r2
 80168ae:	f012 0203 	ands.w	r2, r2, #3
 80168b2:	4607      	mov	r7, r0
 80168b4:	460e      	mov	r6, r1
 80168b6:	d007      	beq.n	80168c8 <__pow5mult+0x20>
 80168b8:	4c25      	ldr	r4, [pc, #148]	@ (8016950 <__pow5mult+0xa8>)
 80168ba:	3a01      	subs	r2, #1
 80168bc:	2300      	movs	r3, #0
 80168be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168c2:	f7ff fe9f 	bl	8016604 <__multadd>
 80168c6:	4606      	mov	r6, r0
 80168c8:	10ad      	asrs	r5, r5, #2
 80168ca:	d03d      	beq.n	8016948 <__pow5mult+0xa0>
 80168cc:	69fc      	ldr	r4, [r7, #28]
 80168ce:	b97c      	cbnz	r4, 80168f0 <__pow5mult+0x48>
 80168d0:	2010      	movs	r0, #16
 80168d2:	f7ff fd77 	bl	80163c4 <malloc>
 80168d6:	4602      	mov	r2, r0
 80168d8:	61f8      	str	r0, [r7, #28]
 80168da:	b928      	cbnz	r0, 80168e8 <__pow5mult+0x40>
 80168dc:	4b1d      	ldr	r3, [pc, #116]	@ (8016954 <__pow5mult+0xac>)
 80168de:	481e      	ldr	r0, [pc, #120]	@ (8016958 <__pow5mult+0xb0>)
 80168e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80168e4:	f7fe fe6c 	bl	80155c0 <__assert_func>
 80168e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168ec:	6004      	str	r4, [r0, #0]
 80168ee:	60c4      	str	r4, [r0, #12]
 80168f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80168f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168f8:	b94c      	cbnz	r4, 801690e <__pow5mult+0x66>
 80168fa:	f240 2171 	movw	r1, #625	@ 0x271
 80168fe:	4638      	mov	r0, r7
 8016900:	f7ff ff12 	bl	8016728 <__i2b>
 8016904:	2300      	movs	r3, #0
 8016906:	f8c8 0008 	str.w	r0, [r8, #8]
 801690a:	4604      	mov	r4, r0
 801690c:	6003      	str	r3, [r0, #0]
 801690e:	f04f 0900 	mov.w	r9, #0
 8016912:	07eb      	lsls	r3, r5, #31
 8016914:	d50a      	bpl.n	801692c <__pow5mult+0x84>
 8016916:	4631      	mov	r1, r6
 8016918:	4622      	mov	r2, r4
 801691a:	4638      	mov	r0, r7
 801691c:	f7ff ff1a 	bl	8016754 <__multiply>
 8016920:	4631      	mov	r1, r6
 8016922:	4680      	mov	r8, r0
 8016924:	4638      	mov	r0, r7
 8016926:	f7ff fe4b 	bl	80165c0 <_Bfree>
 801692a:	4646      	mov	r6, r8
 801692c:	106d      	asrs	r5, r5, #1
 801692e:	d00b      	beq.n	8016948 <__pow5mult+0xa0>
 8016930:	6820      	ldr	r0, [r4, #0]
 8016932:	b938      	cbnz	r0, 8016944 <__pow5mult+0x9c>
 8016934:	4622      	mov	r2, r4
 8016936:	4621      	mov	r1, r4
 8016938:	4638      	mov	r0, r7
 801693a:	f7ff ff0b 	bl	8016754 <__multiply>
 801693e:	6020      	str	r0, [r4, #0]
 8016940:	f8c0 9000 	str.w	r9, [r0]
 8016944:	4604      	mov	r4, r0
 8016946:	e7e4      	b.n	8016912 <__pow5mult+0x6a>
 8016948:	4630      	mov	r0, r6
 801694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801694e:	bf00      	nop
 8016950:	08019f78 	.word	0x08019f78
 8016954:	08019c60 	.word	0x08019c60
 8016958:	08019f1c 	.word	0x08019f1c

0801695c <__lshift>:
 801695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016960:	460c      	mov	r4, r1
 8016962:	6849      	ldr	r1, [r1, #4]
 8016964:	6923      	ldr	r3, [r4, #16]
 8016966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801696a:	68a3      	ldr	r3, [r4, #8]
 801696c:	4607      	mov	r7, r0
 801696e:	4691      	mov	r9, r2
 8016970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016974:	f108 0601 	add.w	r6, r8, #1
 8016978:	42b3      	cmp	r3, r6
 801697a:	db0b      	blt.n	8016994 <__lshift+0x38>
 801697c:	4638      	mov	r0, r7
 801697e:	f7ff fddf 	bl	8016540 <_Balloc>
 8016982:	4605      	mov	r5, r0
 8016984:	b948      	cbnz	r0, 801699a <__lshift+0x3e>
 8016986:	4602      	mov	r2, r0
 8016988:	4b28      	ldr	r3, [pc, #160]	@ (8016a2c <__lshift+0xd0>)
 801698a:	4829      	ldr	r0, [pc, #164]	@ (8016a30 <__lshift+0xd4>)
 801698c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016990:	f7fe fe16 	bl	80155c0 <__assert_func>
 8016994:	3101      	adds	r1, #1
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	e7ee      	b.n	8016978 <__lshift+0x1c>
 801699a:	2300      	movs	r3, #0
 801699c:	f100 0114 	add.w	r1, r0, #20
 80169a0:	f100 0210 	add.w	r2, r0, #16
 80169a4:	4618      	mov	r0, r3
 80169a6:	4553      	cmp	r3, sl
 80169a8:	db33      	blt.n	8016a12 <__lshift+0xb6>
 80169aa:	6920      	ldr	r0, [r4, #16]
 80169ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169b0:	f104 0314 	add.w	r3, r4, #20
 80169b4:	f019 091f 	ands.w	r9, r9, #31
 80169b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80169bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80169c0:	d02b      	beq.n	8016a1a <__lshift+0xbe>
 80169c2:	f1c9 0e20 	rsb	lr, r9, #32
 80169c6:	468a      	mov	sl, r1
 80169c8:	2200      	movs	r2, #0
 80169ca:	6818      	ldr	r0, [r3, #0]
 80169cc:	fa00 f009 	lsl.w	r0, r0, r9
 80169d0:	4310      	orrs	r0, r2
 80169d2:	f84a 0b04 	str.w	r0, [sl], #4
 80169d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80169da:	459c      	cmp	ip, r3
 80169dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80169e0:	d8f3      	bhi.n	80169ca <__lshift+0x6e>
 80169e2:	ebac 0304 	sub.w	r3, ip, r4
 80169e6:	3b15      	subs	r3, #21
 80169e8:	f023 0303 	bic.w	r3, r3, #3
 80169ec:	3304      	adds	r3, #4
 80169ee:	f104 0015 	add.w	r0, r4, #21
 80169f2:	4584      	cmp	ip, r0
 80169f4:	bf38      	it	cc
 80169f6:	2304      	movcc	r3, #4
 80169f8:	50ca      	str	r2, [r1, r3]
 80169fa:	b10a      	cbz	r2, 8016a00 <__lshift+0xa4>
 80169fc:	f108 0602 	add.w	r6, r8, #2
 8016a00:	3e01      	subs	r6, #1
 8016a02:	4638      	mov	r0, r7
 8016a04:	612e      	str	r6, [r5, #16]
 8016a06:	4621      	mov	r1, r4
 8016a08:	f7ff fdda 	bl	80165c0 <_Bfree>
 8016a0c:	4628      	mov	r0, r5
 8016a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a16:	3301      	adds	r3, #1
 8016a18:	e7c5      	b.n	80169a6 <__lshift+0x4a>
 8016a1a:	3904      	subs	r1, #4
 8016a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a20:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a24:	459c      	cmp	ip, r3
 8016a26:	d8f9      	bhi.n	8016a1c <__lshift+0xc0>
 8016a28:	e7ea      	b.n	8016a00 <__lshift+0xa4>
 8016a2a:	bf00      	nop
 8016a2c:	08019f0b 	.word	0x08019f0b
 8016a30:	08019f1c 	.word	0x08019f1c

08016a34 <__mcmp>:
 8016a34:	690a      	ldr	r2, [r1, #16]
 8016a36:	4603      	mov	r3, r0
 8016a38:	6900      	ldr	r0, [r0, #16]
 8016a3a:	1a80      	subs	r0, r0, r2
 8016a3c:	b530      	push	{r4, r5, lr}
 8016a3e:	d10e      	bne.n	8016a5e <__mcmp+0x2a>
 8016a40:	3314      	adds	r3, #20
 8016a42:	3114      	adds	r1, #20
 8016a44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016a4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016a50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016a54:	4295      	cmp	r5, r2
 8016a56:	d003      	beq.n	8016a60 <__mcmp+0x2c>
 8016a58:	d205      	bcs.n	8016a66 <__mcmp+0x32>
 8016a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a5e:	bd30      	pop	{r4, r5, pc}
 8016a60:	42a3      	cmp	r3, r4
 8016a62:	d3f3      	bcc.n	8016a4c <__mcmp+0x18>
 8016a64:	e7fb      	b.n	8016a5e <__mcmp+0x2a>
 8016a66:	2001      	movs	r0, #1
 8016a68:	e7f9      	b.n	8016a5e <__mcmp+0x2a>
	...

08016a6c <__mdiff>:
 8016a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a70:	4689      	mov	r9, r1
 8016a72:	4606      	mov	r6, r0
 8016a74:	4611      	mov	r1, r2
 8016a76:	4648      	mov	r0, r9
 8016a78:	4614      	mov	r4, r2
 8016a7a:	f7ff ffdb 	bl	8016a34 <__mcmp>
 8016a7e:	1e05      	subs	r5, r0, #0
 8016a80:	d112      	bne.n	8016aa8 <__mdiff+0x3c>
 8016a82:	4629      	mov	r1, r5
 8016a84:	4630      	mov	r0, r6
 8016a86:	f7ff fd5b 	bl	8016540 <_Balloc>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	b928      	cbnz	r0, 8016a9a <__mdiff+0x2e>
 8016a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8016b8c <__mdiff+0x120>)
 8016a90:	f240 2137 	movw	r1, #567	@ 0x237
 8016a94:	483e      	ldr	r0, [pc, #248]	@ (8016b90 <__mdiff+0x124>)
 8016a96:	f7fe fd93 	bl	80155c0 <__assert_func>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016aa0:	4610      	mov	r0, r2
 8016aa2:	b003      	add	sp, #12
 8016aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aa8:	bfbc      	itt	lt
 8016aaa:	464b      	movlt	r3, r9
 8016aac:	46a1      	movlt	r9, r4
 8016aae:	4630      	mov	r0, r6
 8016ab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016ab4:	bfba      	itte	lt
 8016ab6:	461c      	movlt	r4, r3
 8016ab8:	2501      	movlt	r5, #1
 8016aba:	2500      	movge	r5, #0
 8016abc:	f7ff fd40 	bl	8016540 <_Balloc>
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	b918      	cbnz	r0, 8016acc <__mdiff+0x60>
 8016ac4:	4b31      	ldr	r3, [pc, #196]	@ (8016b8c <__mdiff+0x120>)
 8016ac6:	f240 2145 	movw	r1, #581	@ 0x245
 8016aca:	e7e3      	b.n	8016a94 <__mdiff+0x28>
 8016acc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016ad0:	6926      	ldr	r6, [r4, #16]
 8016ad2:	60c5      	str	r5, [r0, #12]
 8016ad4:	f109 0310 	add.w	r3, r9, #16
 8016ad8:	f109 0514 	add.w	r5, r9, #20
 8016adc:	f104 0e14 	add.w	lr, r4, #20
 8016ae0:	f100 0b14 	add.w	fp, r0, #20
 8016ae4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016ae8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016aec:	9301      	str	r3, [sp, #4]
 8016aee:	46d9      	mov	r9, fp
 8016af0:	f04f 0c00 	mov.w	ip, #0
 8016af4:	9b01      	ldr	r3, [sp, #4]
 8016af6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016afa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016afe:	9301      	str	r3, [sp, #4]
 8016b00:	fa1f f38a 	uxth.w	r3, sl
 8016b04:	4619      	mov	r1, r3
 8016b06:	b283      	uxth	r3, r0
 8016b08:	1acb      	subs	r3, r1, r3
 8016b0a:	0c00      	lsrs	r0, r0, #16
 8016b0c:	4463      	add	r3, ip
 8016b0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016b12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016b16:	b29b      	uxth	r3, r3
 8016b18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016b1c:	4576      	cmp	r6, lr
 8016b1e:	f849 3b04 	str.w	r3, [r9], #4
 8016b22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b26:	d8e5      	bhi.n	8016af4 <__mdiff+0x88>
 8016b28:	1b33      	subs	r3, r6, r4
 8016b2a:	3b15      	subs	r3, #21
 8016b2c:	f023 0303 	bic.w	r3, r3, #3
 8016b30:	3415      	adds	r4, #21
 8016b32:	3304      	adds	r3, #4
 8016b34:	42a6      	cmp	r6, r4
 8016b36:	bf38      	it	cc
 8016b38:	2304      	movcc	r3, #4
 8016b3a:	441d      	add	r5, r3
 8016b3c:	445b      	add	r3, fp
 8016b3e:	461e      	mov	r6, r3
 8016b40:	462c      	mov	r4, r5
 8016b42:	4544      	cmp	r4, r8
 8016b44:	d30e      	bcc.n	8016b64 <__mdiff+0xf8>
 8016b46:	f108 0103 	add.w	r1, r8, #3
 8016b4a:	1b49      	subs	r1, r1, r5
 8016b4c:	f021 0103 	bic.w	r1, r1, #3
 8016b50:	3d03      	subs	r5, #3
 8016b52:	45a8      	cmp	r8, r5
 8016b54:	bf38      	it	cc
 8016b56:	2100      	movcc	r1, #0
 8016b58:	440b      	add	r3, r1
 8016b5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b5e:	b191      	cbz	r1, 8016b86 <__mdiff+0x11a>
 8016b60:	6117      	str	r7, [r2, #16]
 8016b62:	e79d      	b.n	8016aa0 <__mdiff+0x34>
 8016b64:	f854 1b04 	ldr.w	r1, [r4], #4
 8016b68:	46e6      	mov	lr, ip
 8016b6a:	0c08      	lsrs	r0, r1, #16
 8016b6c:	fa1c fc81 	uxtah	ip, ip, r1
 8016b70:	4471      	add	r1, lr
 8016b72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016b76:	b289      	uxth	r1, r1
 8016b78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016b7c:	f846 1b04 	str.w	r1, [r6], #4
 8016b80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b84:	e7dd      	b.n	8016b42 <__mdiff+0xd6>
 8016b86:	3f01      	subs	r7, #1
 8016b88:	e7e7      	b.n	8016b5a <__mdiff+0xee>
 8016b8a:	bf00      	nop
 8016b8c:	08019f0b 	.word	0x08019f0b
 8016b90:	08019f1c 	.word	0x08019f1c

08016b94 <__d2b>:
 8016b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b98:	460f      	mov	r7, r1
 8016b9a:	2101      	movs	r1, #1
 8016b9c:	ec59 8b10 	vmov	r8, r9, d0
 8016ba0:	4616      	mov	r6, r2
 8016ba2:	f7ff fccd 	bl	8016540 <_Balloc>
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	b930      	cbnz	r0, 8016bb8 <__d2b+0x24>
 8016baa:	4602      	mov	r2, r0
 8016bac:	4b23      	ldr	r3, [pc, #140]	@ (8016c3c <__d2b+0xa8>)
 8016bae:	4824      	ldr	r0, [pc, #144]	@ (8016c40 <__d2b+0xac>)
 8016bb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8016bb4:	f7fe fd04 	bl	80155c0 <__assert_func>
 8016bb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016bc0:	b10d      	cbz	r5, 8016bc6 <__d2b+0x32>
 8016bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016bc6:	9301      	str	r3, [sp, #4]
 8016bc8:	f1b8 0300 	subs.w	r3, r8, #0
 8016bcc:	d023      	beq.n	8016c16 <__d2b+0x82>
 8016bce:	4668      	mov	r0, sp
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	f7ff fd7c 	bl	80166ce <__lo0bits>
 8016bd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016bda:	b1d0      	cbz	r0, 8016c12 <__d2b+0x7e>
 8016bdc:	f1c0 0320 	rsb	r3, r0, #32
 8016be0:	fa02 f303 	lsl.w	r3, r2, r3
 8016be4:	430b      	orrs	r3, r1
 8016be6:	40c2      	lsrs	r2, r0
 8016be8:	6163      	str	r3, [r4, #20]
 8016bea:	9201      	str	r2, [sp, #4]
 8016bec:	9b01      	ldr	r3, [sp, #4]
 8016bee:	61a3      	str	r3, [r4, #24]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	bf0c      	ite	eq
 8016bf4:	2201      	moveq	r2, #1
 8016bf6:	2202      	movne	r2, #2
 8016bf8:	6122      	str	r2, [r4, #16]
 8016bfa:	b1a5      	cbz	r5, 8016c26 <__d2b+0x92>
 8016bfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016c00:	4405      	add	r5, r0
 8016c02:	603d      	str	r5, [r7, #0]
 8016c04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016c08:	6030      	str	r0, [r6, #0]
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	b003      	add	sp, #12
 8016c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c12:	6161      	str	r1, [r4, #20]
 8016c14:	e7ea      	b.n	8016bec <__d2b+0x58>
 8016c16:	a801      	add	r0, sp, #4
 8016c18:	f7ff fd59 	bl	80166ce <__lo0bits>
 8016c1c:	9b01      	ldr	r3, [sp, #4]
 8016c1e:	6163      	str	r3, [r4, #20]
 8016c20:	3020      	adds	r0, #32
 8016c22:	2201      	movs	r2, #1
 8016c24:	e7e8      	b.n	8016bf8 <__d2b+0x64>
 8016c26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016c2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016c2e:	6038      	str	r0, [r7, #0]
 8016c30:	6918      	ldr	r0, [r3, #16]
 8016c32:	f7ff fd2d 	bl	8016690 <__hi0bits>
 8016c36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016c3a:	e7e5      	b.n	8016c08 <__d2b+0x74>
 8016c3c:	08019f0b 	.word	0x08019f0b
 8016c40:	08019f1c 	.word	0x08019f1c

08016c44 <_strtoul_l.constprop.0>:
 8016c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c48:	4e34      	ldr	r6, [pc, #208]	@ (8016d1c <_strtoul_l.constprop.0+0xd8>)
 8016c4a:	4686      	mov	lr, r0
 8016c4c:	460d      	mov	r5, r1
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c54:	5d37      	ldrb	r7, [r6, r4]
 8016c56:	f017 0708 	ands.w	r7, r7, #8
 8016c5a:	d1f8      	bne.n	8016c4e <_strtoul_l.constprop.0+0xa>
 8016c5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8016c5e:	d12f      	bne.n	8016cc0 <_strtoul_l.constprop.0+0x7c>
 8016c60:	782c      	ldrb	r4, [r5, #0]
 8016c62:	2701      	movs	r7, #1
 8016c64:	1c85      	adds	r5, r0, #2
 8016c66:	f033 0010 	bics.w	r0, r3, #16
 8016c6a:	d109      	bne.n	8016c80 <_strtoul_l.constprop.0+0x3c>
 8016c6c:	2c30      	cmp	r4, #48	@ 0x30
 8016c6e:	d12c      	bne.n	8016cca <_strtoul_l.constprop.0+0x86>
 8016c70:	7828      	ldrb	r0, [r5, #0]
 8016c72:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016c76:	2858      	cmp	r0, #88	@ 0x58
 8016c78:	d127      	bne.n	8016cca <_strtoul_l.constprop.0+0x86>
 8016c7a:	786c      	ldrb	r4, [r5, #1]
 8016c7c:	2310      	movs	r3, #16
 8016c7e:	3502      	adds	r5, #2
 8016c80:	f04f 38ff 	mov.w	r8, #4294967295
 8016c84:	2600      	movs	r6, #0
 8016c86:	fbb8 f8f3 	udiv	r8, r8, r3
 8016c8a:	fb03 f908 	mul.w	r9, r3, r8
 8016c8e:	ea6f 0909 	mvn.w	r9, r9
 8016c92:	4630      	mov	r0, r6
 8016c94:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c98:	f1bc 0f09 	cmp.w	ip, #9
 8016c9c:	d81c      	bhi.n	8016cd8 <_strtoul_l.constprop.0+0x94>
 8016c9e:	4664      	mov	r4, ip
 8016ca0:	42a3      	cmp	r3, r4
 8016ca2:	dd2a      	ble.n	8016cfa <_strtoul_l.constprop.0+0xb6>
 8016ca4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016ca8:	d007      	beq.n	8016cba <_strtoul_l.constprop.0+0x76>
 8016caa:	4580      	cmp	r8, r0
 8016cac:	d322      	bcc.n	8016cf4 <_strtoul_l.constprop.0+0xb0>
 8016cae:	d101      	bne.n	8016cb4 <_strtoul_l.constprop.0+0x70>
 8016cb0:	45a1      	cmp	r9, r4
 8016cb2:	db1f      	blt.n	8016cf4 <_strtoul_l.constprop.0+0xb0>
 8016cb4:	fb00 4003 	mla	r0, r0, r3, r4
 8016cb8:	2601      	movs	r6, #1
 8016cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016cbe:	e7e9      	b.n	8016c94 <_strtoul_l.constprop.0+0x50>
 8016cc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8016cc2:	bf04      	itt	eq
 8016cc4:	782c      	ldrbeq	r4, [r5, #0]
 8016cc6:	1c85      	addeq	r5, r0, #2
 8016cc8:	e7cd      	b.n	8016c66 <_strtoul_l.constprop.0+0x22>
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d1d8      	bne.n	8016c80 <_strtoul_l.constprop.0+0x3c>
 8016cce:	2c30      	cmp	r4, #48	@ 0x30
 8016cd0:	bf0c      	ite	eq
 8016cd2:	2308      	moveq	r3, #8
 8016cd4:	230a      	movne	r3, #10
 8016cd6:	e7d3      	b.n	8016c80 <_strtoul_l.constprop.0+0x3c>
 8016cd8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016cdc:	f1bc 0f19 	cmp.w	ip, #25
 8016ce0:	d801      	bhi.n	8016ce6 <_strtoul_l.constprop.0+0xa2>
 8016ce2:	3c37      	subs	r4, #55	@ 0x37
 8016ce4:	e7dc      	b.n	8016ca0 <_strtoul_l.constprop.0+0x5c>
 8016ce6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016cea:	f1bc 0f19 	cmp.w	ip, #25
 8016cee:	d804      	bhi.n	8016cfa <_strtoul_l.constprop.0+0xb6>
 8016cf0:	3c57      	subs	r4, #87	@ 0x57
 8016cf2:	e7d5      	b.n	8016ca0 <_strtoul_l.constprop.0+0x5c>
 8016cf4:	f04f 36ff 	mov.w	r6, #4294967295
 8016cf8:	e7df      	b.n	8016cba <_strtoul_l.constprop.0+0x76>
 8016cfa:	1c73      	adds	r3, r6, #1
 8016cfc:	d106      	bne.n	8016d0c <_strtoul_l.constprop.0+0xc8>
 8016cfe:	2322      	movs	r3, #34	@ 0x22
 8016d00:	f8ce 3000 	str.w	r3, [lr]
 8016d04:	4630      	mov	r0, r6
 8016d06:	b932      	cbnz	r2, 8016d16 <_strtoul_l.constprop.0+0xd2>
 8016d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d0c:	b107      	cbz	r7, 8016d10 <_strtoul_l.constprop.0+0xcc>
 8016d0e:	4240      	negs	r0, r0
 8016d10:	2a00      	cmp	r2, #0
 8016d12:	d0f9      	beq.n	8016d08 <_strtoul_l.constprop.0+0xc4>
 8016d14:	b106      	cbz	r6, 8016d18 <_strtoul_l.constprop.0+0xd4>
 8016d16:	1e69      	subs	r1, r5, #1
 8016d18:	6011      	str	r1, [r2, #0]
 8016d1a:	e7f5      	b.n	8016d08 <_strtoul_l.constprop.0+0xc4>
 8016d1c:	0801a079 	.word	0x0801a079

08016d20 <_strtoul_r>:
 8016d20:	f7ff bf90 	b.w	8016c44 <_strtoul_l.constprop.0>

08016d24 <strtoul>:
 8016d24:	4613      	mov	r3, r2
 8016d26:	460a      	mov	r2, r1
 8016d28:	4601      	mov	r1, r0
 8016d2a:	4802      	ldr	r0, [pc, #8]	@ (8016d34 <strtoul+0x10>)
 8016d2c:	6800      	ldr	r0, [r0, #0]
 8016d2e:	f7ff bf89 	b.w	8016c44 <_strtoul_l.constprop.0>
 8016d32:	bf00      	nop
 8016d34:	20000034 	.word	0x20000034

08016d38 <__ssputs_r>:
 8016d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d3c:	688e      	ldr	r6, [r1, #8]
 8016d3e:	461f      	mov	r7, r3
 8016d40:	42be      	cmp	r6, r7
 8016d42:	680b      	ldr	r3, [r1, #0]
 8016d44:	4682      	mov	sl, r0
 8016d46:	460c      	mov	r4, r1
 8016d48:	4690      	mov	r8, r2
 8016d4a:	d82d      	bhi.n	8016da8 <__ssputs_r+0x70>
 8016d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016d54:	d026      	beq.n	8016da4 <__ssputs_r+0x6c>
 8016d56:	6965      	ldr	r5, [r4, #20]
 8016d58:	6909      	ldr	r1, [r1, #16]
 8016d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d5e:	eba3 0901 	sub.w	r9, r3, r1
 8016d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d66:	1c7b      	adds	r3, r7, #1
 8016d68:	444b      	add	r3, r9
 8016d6a:	106d      	asrs	r5, r5, #1
 8016d6c:	429d      	cmp	r5, r3
 8016d6e:	bf38      	it	cc
 8016d70:	461d      	movcc	r5, r3
 8016d72:	0553      	lsls	r3, r2, #21
 8016d74:	d527      	bpl.n	8016dc6 <__ssputs_r+0x8e>
 8016d76:	4629      	mov	r1, r5
 8016d78:	f7ff fb56 	bl	8016428 <_malloc_r>
 8016d7c:	4606      	mov	r6, r0
 8016d7e:	b360      	cbz	r0, 8016dda <__ssputs_r+0xa2>
 8016d80:	6921      	ldr	r1, [r4, #16]
 8016d82:	464a      	mov	r2, r9
 8016d84:	f7fe fc0d 	bl	80155a2 <memcpy>
 8016d88:	89a3      	ldrh	r3, [r4, #12]
 8016d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d92:	81a3      	strh	r3, [r4, #12]
 8016d94:	6126      	str	r6, [r4, #16]
 8016d96:	6165      	str	r5, [r4, #20]
 8016d98:	444e      	add	r6, r9
 8016d9a:	eba5 0509 	sub.w	r5, r5, r9
 8016d9e:	6026      	str	r6, [r4, #0]
 8016da0:	60a5      	str	r5, [r4, #8]
 8016da2:	463e      	mov	r6, r7
 8016da4:	42be      	cmp	r6, r7
 8016da6:	d900      	bls.n	8016daa <__ssputs_r+0x72>
 8016da8:	463e      	mov	r6, r7
 8016daa:	6820      	ldr	r0, [r4, #0]
 8016dac:	4632      	mov	r2, r6
 8016dae:	4641      	mov	r1, r8
 8016db0:	f000 fa02 	bl	80171b8 <memmove>
 8016db4:	68a3      	ldr	r3, [r4, #8]
 8016db6:	1b9b      	subs	r3, r3, r6
 8016db8:	60a3      	str	r3, [r4, #8]
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	4433      	add	r3, r6
 8016dbe:	6023      	str	r3, [r4, #0]
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dc6:	462a      	mov	r2, r5
 8016dc8:	f000 fb16 	bl	80173f8 <_realloc_r>
 8016dcc:	4606      	mov	r6, r0
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	d1e0      	bne.n	8016d94 <__ssputs_r+0x5c>
 8016dd2:	6921      	ldr	r1, [r4, #16]
 8016dd4:	4650      	mov	r0, sl
 8016dd6:	f7ff fa67 	bl	80162a8 <_free_r>
 8016dda:	230c      	movs	r3, #12
 8016ddc:	f8ca 3000 	str.w	r3, [sl]
 8016de0:	89a3      	ldrh	r3, [r4, #12]
 8016de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016de6:	81a3      	strh	r3, [r4, #12]
 8016de8:	f04f 30ff 	mov.w	r0, #4294967295
 8016dec:	e7e9      	b.n	8016dc2 <__ssputs_r+0x8a>
	...

08016df0 <_svfiprintf_r>:
 8016df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df4:	4698      	mov	r8, r3
 8016df6:	898b      	ldrh	r3, [r1, #12]
 8016df8:	061b      	lsls	r3, r3, #24
 8016dfa:	b09d      	sub	sp, #116	@ 0x74
 8016dfc:	4607      	mov	r7, r0
 8016dfe:	460d      	mov	r5, r1
 8016e00:	4614      	mov	r4, r2
 8016e02:	d510      	bpl.n	8016e26 <_svfiprintf_r+0x36>
 8016e04:	690b      	ldr	r3, [r1, #16]
 8016e06:	b973      	cbnz	r3, 8016e26 <_svfiprintf_r+0x36>
 8016e08:	2140      	movs	r1, #64	@ 0x40
 8016e0a:	f7ff fb0d 	bl	8016428 <_malloc_r>
 8016e0e:	6028      	str	r0, [r5, #0]
 8016e10:	6128      	str	r0, [r5, #16]
 8016e12:	b930      	cbnz	r0, 8016e22 <_svfiprintf_r+0x32>
 8016e14:	230c      	movs	r3, #12
 8016e16:	603b      	str	r3, [r7, #0]
 8016e18:	f04f 30ff 	mov.w	r0, #4294967295
 8016e1c:	b01d      	add	sp, #116	@ 0x74
 8016e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e22:	2340      	movs	r3, #64	@ 0x40
 8016e24:	616b      	str	r3, [r5, #20]
 8016e26:	2300      	movs	r3, #0
 8016e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e2a:	2320      	movs	r3, #32
 8016e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e34:	2330      	movs	r3, #48	@ 0x30
 8016e36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016fd4 <_svfiprintf_r+0x1e4>
 8016e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e3e:	f04f 0901 	mov.w	r9, #1
 8016e42:	4623      	mov	r3, r4
 8016e44:	469a      	mov	sl, r3
 8016e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e4a:	b10a      	cbz	r2, 8016e50 <_svfiprintf_r+0x60>
 8016e4c:	2a25      	cmp	r2, #37	@ 0x25
 8016e4e:	d1f9      	bne.n	8016e44 <_svfiprintf_r+0x54>
 8016e50:	ebba 0b04 	subs.w	fp, sl, r4
 8016e54:	d00b      	beq.n	8016e6e <_svfiprintf_r+0x7e>
 8016e56:	465b      	mov	r3, fp
 8016e58:	4622      	mov	r2, r4
 8016e5a:	4629      	mov	r1, r5
 8016e5c:	4638      	mov	r0, r7
 8016e5e:	f7ff ff6b 	bl	8016d38 <__ssputs_r>
 8016e62:	3001      	adds	r0, #1
 8016e64:	f000 80a7 	beq.w	8016fb6 <_svfiprintf_r+0x1c6>
 8016e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e6a:	445a      	add	r2, fp
 8016e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f000 809f 	beq.w	8016fb6 <_svfiprintf_r+0x1c6>
 8016e78:	2300      	movs	r3, #0
 8016e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e82:	f10a 0a01 	add.w	sl, sl, #1
 8016e86:	9304      	str	r3, [sp, #16]
 8016e88:	9307      	str	r3, [sp, #28]
 8016e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e90:	4654      	mov	r4, sl
 8016e92:	2205      	movs	r2, #5
 8016e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e98:	484e      	ldr	r0, [pc, #312]	@ (8016fd4 <_svfiprintf_r+0x1e4>)
 8016e9a:	f7e9 f981 	bl	80001a0 <memchr>
 8016e9e:	9a04      	ldr	r2, [sp, #16]
 8016ea0:	b9d8      	cbnz	r0, 8016eda <_svfiprintf_r+0xea>
 8016ea2:	06d0      	lsls	r0, r2, #27
 8016ea4:	bf44      	itt	mi
 8016ea6:	2320      	movmi	r3, #32
 8016ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016eac:	0711      	lsls	r1, r2, #28
 8016eae:	bf44      	itt	mi
 8016eb0:	232b      	movmi	r3, #43	@ 0x2b
 8016eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8016eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ebc:	d015      	beq.n	8016eea <_svfiprintf_r+0xfa>
 8016ebe:	9a07      	ldr	r2, [sp, #28]
 8016ec0:	4654      	mov	r4, sl
 8016ec2:	2000      	movs	r0, #0
 8016ec4:	f04f 0c0a 	mov.w	ip, #10
 8016ec8:	4621      	mov	r1, r4
 8016eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ece:	3b30      	subs	r3, #48	@ 0x30
 8016ed0:	2b09      	cmp	r3, #9
 8016ed2:	d94b      	bls.n	8016f6c <_svfiprintf_r+0x17c>
 8016ed4:	b1b0      	cbz	r0, 8016f04 <_svfiprintf_r+0x114>
 8016ed6:	9207      	str	r2, [sp, #28]
 8016ed8:	e014      	b.n	8016f04 <_svfiprintf_r+0x114>
 8016eda:	eba0 0308 	sub.w	r3, r0, r8
 8016ede:	fa09 f303 	lsl.w	r3, r9, r3
 8016ee2:	4313      	orrs	r3, r2
 8016ee4:	9304      	str	r3, [sp, #16]
 8016ee6:	46a2      	mov	sl, r4
 8016ee8:	e7d2      	b.n	8016e90 <_svfiprintf_r+0xa0>
 8016eea:	9b03      	ldr	r3, [sp, #12]
 8016eec:	1d19      	adds	r1, r3, #4
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	9103      	str	r1, [sp, #12]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	bfbb      	ittet	lt
 8016ef6:	425b      	neglt	r3, r3
 8016ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8016efc:	9307      	strge	r3, [sp, #28]
 8016efe:	9307      	strlt	r3, [sp, #28]
 8016f00:	bfb8      	it	lt
 8016f02:	9204      	strlt	r2, [sp, #16]
 8016f04:	7823      	ldrb	r3, [r4, #0]
 8016f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f08:	d10a      	bne.n	8016f20 <_svfiprintf_r+0x130>
 8016f0a:	7863      	ldrb	r3, [r4, #1]
 8016f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f0e:	d132      	bne.n	8016f76 <_svfiprintf_r+0x186>
 8016f10:	9b03      	ldr	r3, [sp, #12]
 8016f12:	1d1a      	adds	r2, r3, #4
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	9203      	str	r2, [sp, #12]
 8016f18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f1c:	3402      	adds	r4, #2
 8016f1e:	9305      	str	r3, [sp, #20]
 8016f20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016fe4 <_svfiprintf_r+0x1f4>
 8016f24:	7821      	ldrb	r1, [r4, #0]
 8016f26:	2203      	movs	r2, #3
 8016f28:	4650      	mov	r0, sl
 8016f2a:	f7e9 f939 	bl	80001a0 <memchr>
 8016f2e:	b138      	cbz	r0, 8016f40 <_svfiprintf_r+0x150>
 8016f30:	9b04      	ldr	r3, [sp, #16]
 8016f32:	eba0 000a 	sub.w	r0, r0, sl
 8016f36:	2240      	movs	r2, #64	@ 0x40
 8016f38:	4082      	lsls	r2, r0
 8016f3a:	4313      	orrs	r3, r2
 8016f3c:	3401      	adds	r4, #1
 8016f3e:	9304      	str	r3, [sp, #16]
 8016f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f44:	4824      	ldr	r0, [pc, #144]	@ (8016fd8 <_svfiprintf_r+0x1e8>)
 8016f46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f4a:	2206      	movs	r2, #6
 8016f4c:	f7e9 f928 	bl	80001a0 <memchr>
 8016f50:	2800      	cmp	r0, #0
 8016f52:	d036      	beq.n	8016fc2 <_svfiprintf_r+0x1d2>
 8016f54:	4b21      	ldr	r3, [pc, #132]	@ (8016fdc <_svfiprintf_r+0x1ec>)
 8016f56:	bb1b      	cbnz	r3, 8016fa0 <_svfiprintf_r+0x1b0>
 8016f58:	9b03      	ldr	r3, [sp, #12]
 8016f5a:	3307      	adds	r3, #7
 8016f5c:	f023 0307 	bic.w	r3, r3, #7
 8016f60:	3308      	adds	r3, #8
 8016f62:	9303      	str	r3, [sp, #12]
 8016f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f66:	4433      	add	r3, r6
 8016f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f6a:	e76a      	b.n	8016e42 <_svfiprintf_r+0x52>
 8016f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f70:	460c      	mov	r4, r1
 8016f72:	2001      	movs	r0, #1
 8016f74:	e7a8      	b.n	8016ec8 <_svfiprintf_r+0xd8>
 8016f76:	2300      	movs	r3, #0
 8016f78:	3401      	adds	r4, #1
 8016f7a:	9305      	str	r3, [sp, #20]
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	f04f 0c0a 	mov.w	ip, #10
 8016f82:	4620      	mov	r0, r4
 8016f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f88:	3a30      	subs	r2, #48	@ 0x30
 8016f8a:	2a09      	cmp	r2, #9
 8016f8c:	d903      	bls.n	8016f96 <_svfiprintf_r+0x1a6>
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d0c6      	beq.n	8016f20 <_svfiprintf_r+0x130>
 8016f92:	9105      	str	r1, [sp, #20]
 8016f94:	e7c4      	b.n	8016f20 <_svfiprintf_r+0x130>
 8016f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	e7f0      	b.n	8016f82 <_svfiprintf_r+0x192>
 8016fa0:	ab03      	add	r3, sp, #12
 8016fa2:	9300      	str	r3, [sp, #0]
 8016fa4:	462a      	mov	r2, r5
 8016fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8016fe0 <_svfiprintf_r+0x1f0>)
 8016fa8:	a904      	add	r1, sp, #16
 8016faa:	4638      	mov	r0, r7
 8016fac:	f7fc ff22 	bl	8013df4 <_printf_float>
 8016fb0:	1c42      	adds	r2, r0, #1
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	d1d6      	bne.n	8016f64 <_svfiprintf_r+0x174>
 8016fb6:	89ab      	ldrh	r3, [r5, #12]
 8016fb8:	065b      	lsls	r3, r3, #25
 8016fba:	f53f af2d 	bmi.w	8016e18 <_svfiprintf_r+0x28>
 8016fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fc0:	e72c      	b.n	8016e1c <_svfiprintf_r+0x2c>
 8016fc2:	ab03      	add	r3, sp, #12
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	462a      	mov	r2, r5
 8016fc8:	4b05      	ldr	r3, [pc, #20]	@ (8016fe0 <_svfiprintf_r+0x1f0>)
 8016fca:	a904      	add	r1, sp, #16
 8016fcc:	4638      	mov	r0, r7
 8016fce:	f7fd f9a9 	bl	8014324 <_printf_i>
 8016fd2:	e7ed      	b.n	8016fb0 <_svfiprintf_r+0x1c0>
 8016fd4:	0801a179 	.word	0x0801a179
 8016fd8:	0801a183 	.word	0x0801a183
 8016fdc:	08013df5 	.word	0x08013df5
 8016fe0:	08016d39 	.word	0x08016d39
 8016fe4:	0801a17f 	.word	0x0801a17f

08016fe8 <__sflush_r>:
 8016fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff0:	0716      	lsls	r6, r2, #28
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	460c      	mov	r4, r1
 8016ff6:	d454      	bmi.n	80170a2 <__sflush_r+0xba>
 8016ff8:	684b      	ldr	r3, [r1, #4]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	dc02      	bgt.n	8017004 <__sflush_r+0x1c>
 8016ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017000:	2b00      	cmp	r3, #0
 8017002:	dd48      	ble.n	8017096 <__sflush_r+0xae>
 8017004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017006:	2e00      	cmp	r6, #0
 8017008:	d045      	beq.n	8017096 <__sflush_r+0xae>
 801700a:	2300      	movs	r3, #0
 801700c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017010:	682f      	ldr	r7, [r5, #0]
 8017012:	6a21      	ldr	r1, [r4, #32]
 8017014:	602b      	str	r3, [r5, #0]
 8017016:	d030      	beq.n	801707a <__sflush_r+0x92>
 8017018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801701a:	89a3      	ldrh	r3, [r4, #12]
 801701c:	0759      	lsls	r1, r3, #29
 801701e:	d505      	bpl.n	801702c <__sflush_r+0x44>
 8017020:	6863      	ldr	r3, [r4, #4]
 8017022:	1ad2      	subs	r2, r2, r3
 8017024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017026:	b10b      	cbz	r3, 801702c <__sflush_r+0x44>
 8017028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801702a:	1ad2      	subs	r2, r2, r3
 801702c:	2300      	movs	r3, #0
 801702e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017030:	6a21      	ldr	r1, [r4, #32]
 8017032:	4628      	mov	r0, r5
 8017034:	47b0      	blx	r6
 8017036:	1c43      	adds	r3, r0, #1
 8017038:	89a3      	ldrh	r3, [r4, #12]
 801703a:	d106      	bne.n	801704a <__sflush_r+0x62>
 801703c:	6829      	ldr	r1, [r5, #0]
 801703e:	291d      	cmp	r1, #29
 8017040:	d82b      	bhi.n	801709a <__sflush_r+0xb2>
 8017042:	4a2a      	ldr	r2, [pc, #168]	@ (80170ec <__sflush_r+0x104>)
 8017044:	410a      	asrs	r2, r1
 8017046:	07d6      	lsls	r6, r2, #31
 8017048:	d427      	bmi.n	801709a <__sflush_r+0xb2>
 801704a:	2200      	movs	r2, #0
 801704c:	6062      	str	r2, [r4, #4]
 801704e:	04d9      	lsls	r1, r3, #19
 8017050:	6922      	ldr	r2, [r4, #16]
 8017052:	6022      	str	r2, [r4, #0]
 8017054:	d504      	bpl.n	8017060 <__sflush_r+0x78>
 8017056:	1c42      	adds	r2, r0, #1
 8017058:	d101      	bne.n	801705e <__sflush_r+0x76>
 801705a:	682b      	ldr	r3, [r5, #0]
 801705c:	b903      	cbnz	r3, 8017060 <__sflush_r+0x78>
 801705e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017062:	602f      	str	r7, [r5, #0]
 8017064:	b1b9      	cbz	r1, 8017096 <__sflush_r+0xae>
 8017066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801706a:	4299      	cmp	r1, r3
 801706c:	d002      	beq.n	8017074 <__sflush_r+0x8c>
 801706e:	4628      	mov	r0, r5
 8017070:	f7ff f91a 	bl	80162a8 <_free_r>
 8017074:	2300      	movs	r3, #0
 8017076:	6363      	str	r3, [r4, #52]	@ 0x34
 8017078:	e00d      	b.n	8017096 <__sflush_r+0xae>
 801707a:	2301      	movs	r3, #1
 801707c:	4628      	mov	r0, r5
 801707e:	47b0      	blx	r6
 8017080:	4602      	mov	r2, r0
 8017082:	1c50      	adds	r0, r2, #1
 8017084:	d1c9      	bne.n	801701a <__sflush_r+0x32>
 8017086:	682b      	ldr	r3, [r5, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d0c6      	beq.n	801701a <__sflush_r+0x32>
 801708c:	2b1d      	cmp	r3, #29
 801708e:	d001      	beq.n	8017094 <__sflush_r+0xac>
 8017090:	2b16      	cmp	r3, #22
 8017092:	d11e      	bne.n	80170d2 <__sflush_r+0xea>
 8017094:	602f      	str	r7, [r5, #0]
 8017096:	2000      	movs	r0, #0
 8017098:	e022      	b.n	80170e0 <__sflush_r+0xf8>
 801709a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801709e:	b21b      	sxth	r3, r3
 80170a0:	e01b      	b.n	80170da <__sflush_r+0xf2>
 80170a2:	690f      	ldr	r7, [r1, #16]
 80170a4:	2f00      	cmp	r7, #0
 80170a6:	d0f6      	beq.n	8017096 <__sflush_r+0xae>
 80170a8:	0793      	lsls	r3, r2, #30
 80170aa:	680e      	ldr	r6, [r1, #0]
 80170ac:	bf08      	it	eq
 80170ae:	694b      	ldreq	r3, [r1, #20]
 80170b0:	600f      	str	r7, [r1, #0]
 80170b2:	bf18      	it	ne
 80170b4:	2300      	movne	r3, #0
 80170b6:	eba6 0807 	sub.w	r8, r6, r7
 80170ba:	608b      	str	r3, [r1, #8]
 80170bc:	f1b8 0f00 	cmp.w	r8, #0
 80170c0:	dde9      	ble.n	8017096 <__sflush_r+0xae>
 80170c2:	6a21      	ldr	r1, [r4, #32]
 80170c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80170c6:	4643      	mov	r3, r8
 80170c8:	463a      	mov	r2, r7
 80170ca:	4628      	mov	r0, r5
 80170cc:	47b0      	blx	r6
 80170ce:	2800      	cmp	r0, #0
 80170d0:	dc08      	bgt.n	80170e4 <__sflush_r+0xfc>
 80170d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170da:	81a3      	strh	r3, [r4, #12]
 80170dc:	f04f 30ff 	mov.w	r0, #4294967295
 80170e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e4:	4407      	add	r7, r0
 80170e6:	eba8 0800 	sub.w	r8, r8, r0
 80170ea:	e7e7      	b.n	80170bc <__sflush_r+0xd4>
 80170ec:	dfbffffe 	.word	0xdfbffffe

080170f0 <_fflush_r>:
 80170f0:	b538      	push	{r3, r4, r5, lr}
 80170f2:	690b      	ldr	r3, [r1, #16]
 80170f4:	4605      	mov	r5, r0
 80170f6:	460c      	mov	r4, r1
 80170f8:	b913      	cbnz	r3, 8017100 <_fflush_r+0x10>
 80170fa:	2500      	movs	r5, #0
 80170fc:	4628      	mov	r0, r5
 80170fe:	bd38      	pop	{r3, r4, r5, pc}
 8017100:	b118      	cbz	r0, 801710a <_fflush_r+0x1a>
 8017102:	6a03      	ldr	r3, [r0, #32]
 8017104:	b90b      	cbnz	r3, 801710a <_fflush_r+0x1a>
 8017106:	f7fd fab9 	bl	801467c <__sinit>
 801710a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d0f3      	beq.n	80170fa <_fflush_r+0xa>
 8017112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017114:	07d0      	lsls	r0, r2, #31
 8017116:	d404      	bmi.n	8017122 <_fflush_r+0x32>
 8017118:	0599      	lsls	r1, r3, #22
 801711a:	d402      	bmi.n	8017122 <_fflush_r+0x32>
 801711c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801711e:	f7fe fa35 	bl	801558c <__retarget_lock_acquire_recursive>
 8017122:	4628      	mov	r0, r5
 8017124:	4621      	mov	r1, r4
 8017126:	f7ff ff5f 	bl	8016fe8 <__sflush_r>
 801712a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801712c:	07da      	lsls	r2, r3, #31
 801712e:	4605      	mov	r5, r0
 8017130:	d4e4      	bmi.n	80170fc <_fflush_r+0xc>
 8017132:	89a3      	ldrh	r3, [r4, #12]
 8017134:	059b      	lsls	r3, r3, #22
 8017136:	d4e1      	bmi.n	80170fc <_fflush_r+0xc>
 8017138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801713a:	f7fe fa29 	bl	8015590 <__retarget_lock_release_recursive>
 801713e:	e7dd      	b.n	80170fc <_fflush_r+0xc>

08017140 <fiprintf>:
 8017140:	b40e      	push	{r1, r2, r3}
 8017142:	b503      	push	{r0, r1, lr}
 8017144:	4601      	mov	r1, r0
 8017146:	ab03      	add	r3, sp, #12
 8017148:	4805      	ldr	r0, [pc, #20]	@ (8017160 <fiprintf+0x20>)
 801714a:	f853 2b04 	ldr.w	r2, [r3], #4
 801714e:	6800      	ldr	r0, [r0, #0]
 8017150:	9301      	str	r3, [sp, #4]
 8017152:	f000 fb83 	bl	801785c <_vfiprintf_r>
 8017156:	b002      	add	sp, #8
 8017158:	f85d eb04 	ldr.w	lr, [sp], #4
 801715c:	b003      	add	sp, #12
 801715e:	4770      	bx	lr
 8017160:	20000034 	.word	0x20000034

08017164 <siscanf>:
 8017164:	b40e      	push	{r1, r2, r3}
 8017166:	b530      	push	{r4, r5, lr}
 8017168:	b09c      	sub	sp, #112	@ 0x70
 801716a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801716c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017170:	f854 5b04 	ldr.w	r5, [r4], #4
 8017174:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017178:	9002      	str	r0, [sp, #8]
 801717a:	9006      	str	r0, [sp, #24]
 801717c:	f7e9 f860 	bl	8000240 <strlen>
 8017180:	4b0b      	ldr	r3, [pc, #44]	@ (80171b0 <siscanf+0x4c>)
 8017182:	9003      	str	r0, [sp, #12]
 8017184:	9007      	str	r0, [sp, #28]
 8017186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017188:	480a      	ldr	r0, [pc, #40]	@ (80171b4 <siscanf+0x50>)
 801718a:	9401      	str	r4, [sp, #4]
 801718c:	2300      	movs	r3, #0
 801718e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017190:	9314      	str	r3, [sp, #80]	@ 0x50
 8017192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017196:	f8ad 3016 	strh.w	r3, [sp, #22]
 801719a:	462a      	mov	r2, r5
 801719c:	4623      	mov	r3, r4
 801719e:	a902      	add	r1, sp, #8
 80171a0:	6800      	ldr	r0, [r0, #0]
 80171a2:	f000 f9bd 	bl	8017520 <__ssvfiscanf_r>
 80171a6:	b01c      	add	sp, #112	@ 0x70
 80171a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171ac:	b003      	add	sp, #12
 80171ae:	4770      	bx	lr
 80171b0:	0801474b 	.word	0x0801474b
 80171b4:	20000034 	.word	0x20000034

080171b8 <memmove>:
 80171b8:	4288      	cmp	r0, r1
 80171ba:	b510      	push	{r4, lr}
 80171bc:	eb01 0402 	add.w	r4, r1, r2
 80171c0:	d902      	bls.n	80171c8 <memmove+0x10>
 80171c2:	4284      	cmp	r4, r0
 80171c4:	4623      	mov	r3, r4
 80171c6:	d807      	bhi.n	80171d8 <memmove+0x20>
 80171c8:	1e43      	subs	r3, r0, #1
 80171ca:	42a1      	cmp	r1, r4
 80171cc:	d008      	beq.n	80171e0 <memmove+0x28>
 80171ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171d6:	e7f8      	b.n	80171ca <memmove+0x12>
 80171d8:	4402      	add	r2, r0
 80171da:	4601      	mov	r1, r0
 80171dc:	428a      	cmp	r2, r1
 80171de:	d100      	bne.n	80171e2 <memmove+0x2a>
 80171e0:	bd10      	pop	{r4, pc}
 80171e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171ea:	e7f7      	b.n	80171dc <memmove+0x24>

080171ec <strncmp>:
 80171ec:	b510      	push	{r4, lr}
 80171ee:	b16a      	cbz	r2, 801720c <strncmp+0x20>
 80171f0:	3901      	subs	r1, #1
 80171f2:	1884      	adds	r4, r0, r2
 80171f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80171fc:	429a      	cmp	r2, r3
 80171fe:	d103      	bne.n	8017208 <strncmp+0x1c>
 8017200:	42a0      	cmp	r0, r4
 8017202:	d001      	beq.n	8017208 <strncmp+0x1c>
 8017204:	2a00      	cmp	r2, #0
 8017206:	d1f5      	bne.n	80171f4 <strncmp+0x8>
 8017208:	1ad0      	subs	r0, r2, r3
 801720a:	bd10      	pop	{r4, pc}
 801720c:	4610      	mov	r0, r2
 801720e:	e7fc      	b.n	801720a <strncmp+0x1e>

08017210 <__gettzinfo>:
 8017210:	4800      	ldr	r0, [pc, #0]	@ (8017214 <__gettzinfo+0x4>)
 8017212:	4770      	bx	lr
 8017214:	20000088 	.word	0x20000088

08017218 <gmtime_r>:
 8017218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801721c:	4a4d      	ldr	r2, [pc, #308]	@ (8017354 <gmtime_r+0x13c>)
 801721e:	460c      	mov	r4, r1
 8017220:	2300      	movs	r3, #0
 8017222:	e9d0 0100 	ldrd	r0, r1, [r0]
 8017226:	f7e9 fd17 	bl	8000c58 <__aeabi_ldivmod>
 801722a:	2a00      	cmp	r2, #0
 801722c:	bfbc      	itt	lt
 801722e:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8017232:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8017236:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801723a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801723e:	fbb2 f3f1 	udiv	r3, r2, r1
 8017242:	fb01 2213 	mls	r2, r1, r3, r2
 8017246:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801724a:	bfac      	ite	ge
 801724c:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8017250:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8017254:	60a3      	str	r3, [r4, #8]
 8017256:	fbb2 f3f1 	udiv	r3, r2, r1
 801725a:	fb01 2213 	mls	r2, r1, r3, r2
 801725e:	6063      	str	r3, [r4, #4]
 8017260:	6022      	str	r2, [r4, #0]
 8017262:	1cc3      	adds	r3, r0, #3
 8017264:	2207      	movs	r2, #7
 8017266:	fb93 f2f2 	sdiv	r2, r3, r2
 801726a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801726e:	1a9b      	subs	r3, r3, r2
 8017270:	bf48      	it	mi
 8017272:	3307      	addmi	r3, #7
 8017274:	2800      	cmp	r0, #0
 8017276:	61a3      	str	r3, [r4, #24]
 8017278:	bfb8      	it	lt
 801727a:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 801727e:	4936      	ldr	r1, [pc, #216]	@ (8017358 <gmtime_r+0x140>)
 8017280:	bfae      	itee	ge
 8017282:	fb90 f1f1 	sdivge	r1, r0, r1
 8017286:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 801728a:	fb93 f1f1 	sdivlt	r1, r3, r1
 801728e:	4b33      	ldr	r3, [pc, #204]	@ (801735c <gmtime_r+0x144>)
 8017290:	fb03 0001 	mla	r0, r3, r1, r0
 8017294:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8017298:	fbb0 f3f3 	udiv	r3, r0, r3
 801729c:	4403      	add	r3, r0
 801729e:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80172a2:	fbb0 f2fc 	udiv	r2, r0, ip
 80172a6:	1a9b      	subs	r3, r3, r2
 80172a8:	f240 176d 	movw	r7, #365	@ 0x16d
 80172ac:	4a2c      	ldr	r2, [pc, #176]	@ (8017360 <gmtime_r+0x148>)
 80172ae:	fbb0 f2f2 	udiv	r2, r0, r2
 80172b2:	2664      	movs	r6, #100	@ 0x64
 80172b4:	1a9b      	subs	r3, r3, r2
 80172b6:	fbb3 f2f7 	udiv	r2, r3, r7
 80172ba:	fbb3 f3fc 	udiv	r3, r3, ip
 80172be:	fbb2 f5f6 	udiv	r5, r2, r6
 80172c2:	1aeb      	subs	r3, r5, r3
 80172c4:	4403      	add	r3, r0
 80172c6:	fb07 3312 	mls	r3, r7, r2, r3
 80172ca:	2099      	movs	r0, #153	@ 0x99
 80172cc:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80172d0:	3702      	adds	r7, #2
 80172d2:	f103 0e01 	add.w	lr, r3, #1
 80172d6:	fbb7 fcf0 	udiv	ip, r7, r0
 80172da:	fb00 f00c 	mul.w	r0, r0, ip
 80172de:	3002      	adds	r0, #2
 80172e0:	f04f 0805 	mov.w	r8, #5
 80172e4:	fbb0 f0f8 	udiv	r0, r0, r8
 80172e8:	ebae 0000 	sub.w	r0, lr, r0
 80172ec:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 80172f0:	4577      	cmp	r7, lr
 80172f2:	bf8c      	ite	hi
 80172f4:	f06f 0709 	mvnhi.w	r7, #9
 80172f8:	2702      	movls	r7, #2
 80172fa:	4467      	add	r7, ip
 80172fc:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8017300:	fb0c 2101 	mla	r1, ip, r1, r2
 8017304:	2f01      	cmp	r7, #1
 8017306:	bf98      	it	ls
 8017308:	3101      	addls	r1, #1
 801730a:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 801730e:	d30c      	bcc.n	801732a <gmtime_r+0x112>
 8017310:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8017314:	61e3      	str	r3, [r4, #28]
 8017316:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 801731a:	2300      	movs	r3, #0
 801731c:	60e0      	str	r0, [r4, #12]
 801731e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8017322:	6223      	str	r3, [r4, #32]
 8017324:	4620      	mov	r0, r4
 8017326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801732a:	f012 0f03 	tst.w	r2, #3
 801732e:	d102      	bne.n	8017336 <gmtime_r+0x11e>
 8017330:	fb06 2515 	mls	r5, r6, r5, r2
 8017334:	b95d      	cbnz	r5, 801734e <gmtime_r+0x136>
 8017336:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 801733a:	fbb2 f6f5 	udiv	r6, r2, r5
 801733e:	fb05 2216 	mls	r2, r5, r6, r2
 8017342:	fab2 f282 	clz	r2, r2
 8017346:	0952      	lsrs	r2, r2, #5
 8017348:	333b      	adds	r3, #59	@ 0x3b
 801734a:	4413      	add	r3, r2
 801734c:	e7e2      	b.n	8017314 <gmtime_r+0xfc>
 801734e:	2201      	movs	r2, #1
 8017350:	e7fa      	b.n	8017348 <gmtime_r+0x130>
 8017352:	bf00      	nop
 8017354:	00015180 	.word	0x00015180
 8017358:	00023ab1 	.word	0x00023ab1
 801735c:	fffdc54f 	.word	0xfffdc54f
 8017360:	00023ab0 	.word	0x00023ab0

08017364 <_sbrk_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4d06      	ldr	r5, [pc, #24]	@ (8017380 <_sbrk_r+0x1c>)
 8017368:	2300      	movs	r3, #0
 801736a:	4604      	mov	r4, r0
 801736c:	4608      	mov	r0, r1
 801736e:	602b      	str	r3, [r5, #0]
 8017370:	f7f4 fbd0 	bl	800bb14 <_sbrk>
 8017374:	1c43      	adds	r3, r0, #1
 8017376:	d102      	bne.n	801737e <_sbrk_r+0x1a>
 8017378:	682b      	ldr	r3, [r5, #0]
 801737a:	b103      	cbz	r3, 801737e <_sbrk_r+0x1a>
 801737c:	6023      	str	r3, [r4, #0]
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	2000a8f4 	.word	0x2000a8f4

08017384 <abort>:
 8017384:	b508      	push	{r3, lr}
 8017386:	2006      	movs	r0, #6
 8017388:	f000 fdfe 	bl	8017f88 <raise>
 801738c:	2001      	movs	r0, #1
 801738e:	f7f4 fb49 	bl	800ba24 <_exit>

08017392 <_calloc_r>:
 8017392:	b570      	push	{r4, r5, r6, lr}
 8017394:	fba1 5402 	umull	r5, r4, r1, r2
 8017398:	b93c      	cbnz	r4, 80173aa <_calloc_r+0x18>
 801739a:	4629      	mov	r1, r5
 801739c:	f7ff f844 	bl	8016428 <_malloc_r>
 80173a0:	4606      	mov	r6, r0
 80173a2:	b928      	cbnz	r0, 80173b0 <_calloc_r+0x1e>
 80173a4:	2600      	movs	r6, #0
 80173a6:	4630      	mov	r0, r6
 80173a8:	bd70      	pop	{r4, r5, r6, pc}
 80173aa:	220c      	movs	r2, #12
 80173ac:	6002      	str	r2, [r0, #0]
 80173ae:	e7f9      	b.n	80173a4 <_calloc_r+0x12>
 80173b0:	462a      	mov	r2, r5
 80173b2:	4621      	mov	r1, r4
 80173b4:	f7fd f9fd 	bl	80147b2 <memset>
 80173b8:	e7f5      	b.n	80173a6 <_calloc_r+0x14>
	...

080173bc <__env_lock>:
 80173bc:	4801      	ldr	r0, [pc, #4]	@ (80173c4 <__env_lock+0x8>)
 80173be:	f7fe b8e5 	b.w	801558c <__retarget_lock_acquire_recursive>
 80173c2:	bf00      	nop
 80173c4:	2000a8f9 	.word	0x2000a8f9

080173c8 <__env_unlock>:
 80173c8:	4801      	ldr	r0, [pc, #4]	@ (80173d0 <__env_unlock+0x8>)
 80173ca:	f7fe b8e1 	b.w	8015590 <__retarget_lock_release_recursive>
 80173ce:	bf00      	nop
 80173d0:	2000a8f9 	.word	0x2000a8f9

080173d4 <__ascii_mbtowc>:
 80173d4:	b082      	sub	sp, #8
 80173d6:	b901      	cbnz	r1, 80173da <__ascii_mbtowc+0x6>
 80173d8:	a901      	add	r1, sp, #4
 80173da:	b142      	cbz	r2, 80173ee <__ascii_mbtowc+0x1a>
 80173dc:	b14b      	cbz	r3, 80173f2 <__ascii_mbtowc+0x1e>
 80173de:	7813      	ldrb	r3, [r2, #0]
 80173e0:	600b      	str	r3, [r1, #0]
 80173e2:	7812      	ldrb	r2, [r2, #0]
 80173e4:	1e10      	subs	r0, r2, #0
 80173e6:	bf18      	it	ne
 80173e8:	2001      	movne	r0, #1
 80173ea:	b002      	add	sp, #8
 80173ec:	4770      	bx	lr
 80173ee:	4610      	mov	r0, r2
 80173f0:	e7fb      	b.n	80173ea <__ascii_mbtowc+0x16>
 80173f2:	f06f 0001 	mvn.w	r0, #1
 80173f6:	e7f8      	b.n	80173ea <__ascii_mbtowc+0x16>

080173f8 <_realloc_r>:
 80173f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173fc:	4680      	mov	r8, r0
 80173fe:	4615      	mov	r5, r2
 8017400:	460c      	mov	r4, r1
 8017402:	b921      	cbnz	r1, 801740e <_realloc_r+0x16>
 8017404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017408:	4611      	mov	r1, r2
 801740a:	f7ff b80d 	b.w	8016428 <_malloc_r>
 801740e:	b92a      	cbnz	r2, 801741c <_realloc_r+0x24>
 8017410:	f7fe ff4a 	bl	80162a8 <_free_r>
 8017414:	2400      	movs	r4, #0
 8017416:	4620      	mov	r0, r4
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	f000 fdd0 	bl	8017fc0 <_malloc_usable_size_r>
 8017420:	4285      	cmp	r5, r0
 8017422:	4606      	mov	r6, r0
 8017424:	d802      	bhi.n	801742c <_realloc_r+0x34>
 8017426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801742a:	d8f4      	bhi.n	8017416 <_realloc_r+0x1e>
 801742c:	4629      	mov	r1, r5
 801742e:	4640      	mov	r0, r8
 8017430:	f7fe fffa 	bl	8016428 <_malloc_r>
 8017434:	4607      	mov	r7, r0
 8017436:	2800      	cmp	r0, #0
 8017438:	d0ec      	beq.n	8017414 <_realloc_r+0x1c>
 801743a:	42b5      	cmp	r5, r6
 801743c:	462a      	mov	r2, r5
 801743e:	4621      	mov	r1, r4
 8017440:	bf28      	it	cs
 8017442:	4632      	movcs	r2, r6
 8017444:	f7fe f8ad 	bl	80155a2 <memcpy>
 8017448:	4621      	mov	r1, r4
 801744a:	4640      	mov	r0, r8
 801744c:	f7fe ff2c 	bl	80162a8 <_free_r>
 8017450:	463c      	mov	r4, r7
 8017452:	e7e0      	b.n	8017416 <_realloc_r+0x1e>

08017454 <__ascii_wctomb>:
 8017454:	4603      	mov	r3, r0
 8017456:	4608      	mov	r0, r1
 8017458:	b141      	cbz	r1, 801746c <__ascii_wctomb+0x18>
 801745a:	2aff      	cmp	r2, #255	@ 0xff
 801745c:	d904      	bls.n	8017468 <__ascii_wctomb+0x14>
 801745e:	228a      	movs	r2, #138	@ 0x8a
 8017460:	601a      	str	r2, [r3, #0]
 8017462:	f04f 30ff 	mov.w	r0, #4294967295
 8017466:	4770      	bx	lr
 8017468:	700a      	strb	r2, [r1, #0]
 801746a:	2001      	movs	r0, #1
 801746c:	4770      	bx	lr

0801746e <_sungetc_r>:
 801746e:	b538      	push	{r3, r4, r5, lr}
 8017470:	1c4b      	adds	r3, r1, #1
 8017472:	4614      	mov	r4, r2
 8017474:	d103      	bne.n	801747e <_sungetc_r+0x10>
 8017476:	f04f 35ff 	mov.w	r5, #4294967295
 801747a:	4628      	mov	r0, r5
 801747c:	bd38      	pop	{r3, r4, r5, pc}
 801747e:	8993      	ldrh	r3, [r2, #12]
 8017480:	f023 0320 	bic.w	r3, r3, #32
 8017484:	8193      	strh	r3, [r2, #12]
 8017486:	6853      	ldr	r3, [r2, #4]
 8017488:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801748a:	b2cd      	uxtb	r5, r1
 801748c:	b18a      	cbz	r2, 80174b2 <_sungetc_r+0x44>
 801748e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017490:	429a      	cmp	r2, r3
 8017492:	dd08      	ble.n	80174a6 <_sungetc_r+0x38>
 8017494:	6823      	ldr	r3, [r4, #0]
 8017496:	1e5a      	subs	r2, r3, #1
 8017498:	6022      	str	r2, [r4, #0]
 801749a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801749e:	6863      	ldr	r3, [r4, #4]
 80174a0:	3301      	adds	r3, #1
 80174a2:	6063      	str	r3, [r4, #4]
 80174a4:	e7e9      	b.n	801747a <_sungetc_r+0xc>
 80174a6:	4621      	mov	r1, r4
 80174a8:	f000 fc77 	bl	8017d9a <__submore>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d0f1      	beq.n	8017494 <_sungetc_r+0x26>
 80174b0:	e7e1      	b.n	8017476 <_sungetc_r+0x8>
 80174b2:	6921      	ldr	r1, [r4, #16]
 80174b4:	6822      	ldr	r2, [r4, #0]
 80174b6:	b141      	cbz	r1, 80174ca <_sungetc_r+0x5c>
 80174b8:	4291      	cmp	r1, r2
 80174ba:	d206      	bcs.n	80174ca <_sungetc_r+0x5c>
 80174bc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80174c0:	42a9      	cmp	r1, r5
 80174c2:	d102      	bne.n	80174ca <_sungetc_r+0x5c>
 80174c4:	3a01      	subs	r2, #1
 80174c6:	6022      	str	r2, [r4, #0]
 80174c8:	e7ea      	b.n	80174a0 <_sungetc_r+0x32>
 80174ca:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80174ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80174d4:	2303      	movs	r3, #3
 80174d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80174d8:	4623      	mov	r3, r4
 80174da:	f803 5f46 	strb.w	r5, [r3, #70]!
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	2301      	movs	r3, #1
 80174e2:	e7de      	b.n	80174a2 <_sungetc_r+0x34>

080174e4 <__ssrefill_r>:
 80174e4:	b510      	push	{r4, lr}
 80174e6:	460c      	mov	r4, r1
 80174e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80174ea:	b169      	cbz	r1, 8017508 <__ssrefill_r+0x24>
 80174ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174f0:	4299      	cmp	r1, r3
 80174f2:	d001      	beq.n	80174f8 <__ssrefill_r+0x14>
 80174f4:	f7fe fed8 	bl	80162a8 <_free_r>
 80174f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80174fa:	6063      	str	r3, [r4, #4]
 80174fc:	2000      	movs	r0, #0
 80174fe:	6360      	str	r0, [r4, #52]	@ 0x34
 8017500:	b113      	cbz	r3, 8017508 <__ssrefill_r+0x24>
 8017502:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017504:	6023      	str	r3, [r4, #0]
 8017506:	bd10      	pop	{r4, pc}
 8017508:	6923      	ldr	r3, [r4, #16]
 801750a:	6023      	str	r3, [r4, #0]
 801750c:	2300      	movs	r3, #0
 801750e:	6063      	str	r3, [r4, #4]
 8017510:	89a3      	ldrh	r3, [r4, #12]
 8017512:	f043 0320 	orr.w	r3, r3, #32
 8017516:	81a3      	strh	r3, [r4, #12]
 8017518:	f04f 30ff 	mov.w	r0, #4294967295
 801751c:	e7f3      	b.n	8017506 <__ssrefill_r+0x22>
	...

08017520 <__ssvfiscanf_r>:
 8017520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017524:	460c      	mov	r4, r1
 8017526:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801752a:	2100      	movs	r1, #0
 801752c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017530:	49a5      	ldr	r1, [pc, #660]	@ (80177c8 <__ssvfiscanf_r+0x2a8>)
 8017532:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017534:	f10d 0804 	add.w	r8, sp, #4
 8017538:	49a4      	ldr	r1, [pc, #656]	@ (80177cc <__ssvfiscanf_r+0x2ac>)
 801753a:	4fa5      	ldr	r7, [pc, #660]	@ (80177d0 <__ssvfiscanf_r+0x2b0>)
 801753c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017540:	4606      	mov	r6, r0
 8017542:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	7813      	ldrb	r3, [r2, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	f000 8158 	beq.w	80177fe <__ssvfiscanf_r+0x2de>
 801754e:	5cf9      	ldrb	r1, [r7, r3]
 8017550:	f011 0108 	ands.w	r1, r1, #8
 8017554:	f102 0501 	add.w	r5, r2, #1
 8017558:	d019      	beq.n	801758e <__ssvfiscanf_r+0x6e>
 801755a:	6863      	ldr	r3, [r4, #4]
 801755c:	2b00      	cmp	r3, #0
 801755e:	dd0f      	ble.n	8017580 <__ssvfiscanf_r+0x60>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	781a      	ldrb	r2, [r3, #0]
 8017564:	5cba      	ldrb	r2, [r7, r2]
 8017566:	0712      	lsls	r2, r2, #28
 8017568:	d401      	bmi.n	801756e <__ssvfiscanf_r+0x4e>
 801756a:	462a      	mov	r2, r5
 801756c:	e7eb      	b.n	8017546 <__ssvfiscanf_r+0x26>
 801756e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017570:	3201      	adds	r2, #1
 8017572:	9245      	str	r2, [sp, #276]	@ 0x114
 8017574:	6862      	ldr	r2, [r4, #4]
 8017576:	3301      	adds	r3, #1
 8017578:	3a01      	subs	r2, #1
 801757a:	6062      	str	r2, [r4, #4]
 801757c:	6023      	str	r3, [r4, #0]
 801757e:	e7ec      	b.n	801755a <__ssvfiscanf_r+0x3a>
 8017580:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017582:	4621      	mov	r1, r4
 8017584:	4630      	mov	r0, r6
 8017586:	4798      	blx	r3
 8017588:	2800      	cmp	r0, #0
 801758a:	d0e9      	beq.n	8017560 <__ssvfiscanf_r+0x40>
 801758c:	e7ed      	b.n	801756a <__ssvfiscanf_r+0x4a>
 801758e:	2b25      	cmp	r3, #37	@ 0x25
 8017590:	d012      	beq.n	80175b8 <__ssvfiscanf_r+0x98>
 8017592:	4699      	mov	r9, r3
 8017594:	6863      	ldr	r3, [r4, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	f340 8093 	ble.w	80176c2 <__ssvfiscanf_r+0x1a2>
 801759c:	6822      	ldr	r2, [r4, #0]
 801759e:	7813      	ldrb	r3, [r2, #0]
 80175a0:	454b      	cmp	r3, r9
 80175a2:	f040 812c 	bne.w	80177fe <__ssvfiscanf_r+0x2de>
 80175a6:	6863      	ldr	r3, [r4, #4]
 80175a8:	3b01      	subs	r3, #1
 80175aa:	6063      	str	r3, [r4, #4]
 80175ac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80175ae:	3201      	adds	r2, #1
 80175b0:	3301      	adds	r3, #1
 80175b2:	6022      	str	r2, [r4, #0]
 80175b4:	9345      	str	r3, [sp, #276]	@ 0x114
 80175b6:	e7d8      	b.n	801756a <__ssvfiscanf_r+0x4a>
 80175b8:	9141      	str	r1, [sp, #260]	@ 0x104
 80175ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80175bc:	7853      	ldrb	r3, [r2, #1]
 80175be:	2b2a      	cmp	r3, #42	@ 0x2a
 80175c0:	bf02      	ittt	eq
 80175c2:	2310      	moveq	r3, #16
 80175c4:	1c95      	addeq	r5, r2, #2
 80175c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80175c8:	220a      	movs	r2, #10
 80175ca:	46a9      	mov	r9, r5
 80175cc:	f819 1b01 	ldrb.w	r1, [r9], #1
 80175d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80175d4:	2b09      	cmp	r3, #9
 80175d6:	d91e      	bls.n	8017616 <__ssvfiscanf_r+0xf6>
 80175d8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80177d4 <__ssvfiscanf_r+0x2b4>
 80175dc:	2203      	movs	r2, #3
 80175de:	4650      	mov	r0, sl
 80175e0:	f7e8 fdde 	bl	80001a0 <memchr>
 80175e4:	b138      	cbz	r0, 80175f6 <__ssvfiscanf_r+0xd6>
 80175e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80175e8:	eba0 000a 	sub.w	r0, r0, sl
 80175ec:	2301      	movs	r3, #1
 80175ee:	4083      	lsls	r3, r0
 80175f0:	4313      	orrs	r3, r2
 80175f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80175f4:	464d      	mov	r5, r9
 80175f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80175fa:	2b78      	cmp	r3, #120	@ 0x78
 80175fc:	d806      	bhi.n	801760c <__ssvfiscanf_r+0xec>
 80175fe:	2b57      	cmp	r3, #87	@ 0x57
 8017600:	d810      	bhi.n	8017624 <__ssvfiscanf_r+0x104>
 8017602:	2b25      	cmp	r3, #37	@ 0x25
 8017604:	d0c5      	beq.n	8017592 <__ssvfiscanf_r+0x72>
 8017606:	d857      	bhi.n	80176b8 <__ssvfiscanf_r+0x198>
 8017608:	2b00      	cmp	r3, #0
 801760a:	d065      	beq.n	80176d8 <__ssvfiscanf_r+0x1b8>
 801760c:	2303      	movs	r3, #3
 801760e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017610:	230a      	movs	r3, #10
 8017612:	9342      	str	r3, [sp, #264]	@ 0x108
 8017614:	e078      	b.n	8017708 <__ssvfiscanf_r+0x1e8>
 8017616:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017618:	fb02 1103 	mla	r1, r2, r3, r1
 801761c:	3930      	subs	r1, #48	@ 0x30
 801761e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017620:	464d      	mov	r5, r9
 8017622:	e7d2      	b.n	80175ca <__ssvfiscanf_r+0xaa>
 8017624:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017628:	2a20      	cmp	r2, #32
 801762a:	d8ef      	bhi.n	801760c <__ssvfiscanf_r+0xec>
 801762c:	a101      	add	r1, pc, #4	@ (adr r1, 8017634 <__ssvfiscanf_r+0x114>)
 801762e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017632:	bf00      	nop
 8017634:	080176e7 	.word	0x080176e7
 8017638:	0801760d 	.word	0x0801760d
 801763c:	0801760d 	.word	0x0801760d
 8017640:	08017741 	.word	0x08017741
 8017644:	0801760d 	.word	0x0801760d
 8017648:	0801760d 	.word	0x0801760d
 801764c:	0801760d 	.word	0x0801760d
 8017650:	0801760d 	.word	0x0801760d
 8017654:	0801760d 	.word	0x0801760d
 8017658:	0801760d 	.word	0x0801760d
 801765c:	0801760d 	.word	0x0801760d
 8017660:	08017757 	.word	0x08017757
 8017664:	0801773d 	.word	0x0801773d
 8017668:	080176bf 	.word	0x080176bf
 801766c:	080176bf 	.word	0x080176bf
 8017670:	080176bf 	.word	0x080176bf
 8017674:	0801760d 	.word	0x0801760d
 8017678:	080176f9 	.word	0x080176f9
 801767c:	0801760d 	.word	0x0801760d
 8017680:	0801760d 	.word	0x0801760d
 8017684:	0801760d 	.word	0x0801760d
 8017688:	0801760d 	.word	0x0801760d
 801768c:	08017767 	.word	0x08017767
 8017690:	08017701 	.word	0x08017701
 8017694:	080176df 	.word	0x080176df
 8017698:	0801760d 	.word	0x0801760d
 801769c:	0801760d 	.word	0x0801760d
 80176a0:	08017763 	.word	0x08017763
 80176a4:	0801760d 	.word	0x0801760d
 80176a8:	0801773d 	.word	0x0801773d
 80176ac:	0801760d 	.word	0x0801760d
 80176b0:	0801760d 	.word	0x0801760d
 80176b4:	080176e7 	.word	0x080176e7
 80176b8:	3b45      	subs	r3, #69	@ 0x45
 80176ba:	2b02      	cmp	r3, #2
 80176bc:	d8a6      	bhi.n	801760c <__ssvfiscanf_r+0xec>
 80176be:	2305      	movs	r3, #5
 80176c0:	e021      	b.n	8017706 <__ssvfiscanf_r+0x1e6>
 80176c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80176c4:	4621      	mov	r1, r4
 80176c6:	4630      	mov	r0, r6
 80176c8:	4798      	blx	r3
 80176ca:	2800      	cmp	r0, #0
 80176cc:	f43f af66 	beq.w	801759c <__ssvfiscanf_r+0x7c>
 80176d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80176d2:	2800      	cmp	r0, #0
 80176d4:	f040 808b 	bne.w	80177ee <__ssvfiscanf_r+0x2ce>
 80176d8:	f04f 30ff 	mov.w	r0, #4294967295
 80176dc:	e08b      	b.n	80177f6 <__ssvfiscanf_r+0x2d6>
 80176de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80176e0:	f042 0220 	orr.w	r2, r2, #32
 80176e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80176e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80176e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80176ec:	9241      	str	r2, [sp, #260]	@ 0x104
 80176ee:	2210      	movs	r2, #16
 80176f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80176f2:	9242      	str	r2, [sp, #264]	@ 0x108
 80176f4:	d902      	bls.n	80176fc <__ssvfiscanf_r+0x1dc>
 80176f6:	e005      	b.n	8017704 <__ssvfiscanf_r+0x1e4>
 80176f8:	2300      	movs	r3, #0
 80176fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80176fc:	2303      	movs	r3, #3
 80176fe:	e002      	b.n	8017706 <__ssvfiscanf_r+0x1e6>
 8017700:	2308      	movs	r3, #8
 8017702:	9342      	str	r3, [sp, #264]	@ 0x108
 8017704:	2304      	movs	r3, #4
 8017706:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017708:	6863      	ldr	r3, [r4, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	dd39      	ble.n	8017782 <__ssvfiscanf_r+0x262>
 801770e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017710:	0659      	lsls	r1, r3, #25
 8017712:	d404      	bmi.n	801771e <__ssvfiscanf_r+0x1fe>
 8017714:	6823      	ldr	r3, [r4, #0]
 8017716:	781a      	ldrb	r2, [r3, #0]
 8017718:	5cba      	ldrb	r2, [r7, r2]
 801771a:	0712      	lsls	r2, r2, #28
 801771c:	d438      	bmi.n	8017790 <__ssvfiscanf_r+0x270>
 801771e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017720:	2b02      	cmp	r3, #2
 8017722:	dc47      	bgt.n	80177b4 <__ssvfiscanf_r+0x294>
 8017724:	466b      	mov	r3, sp
 8017726:	4622      	mov	r2, r4
 8017728:	a941      	add	r1, sp, #260	@ 0x104
 801772a:	4630      	mov	r0, r6
 801772c:	f000 f9ae 	bl	8017a8c <_scanf_chars>
 8017730:	2801      	cmp	r0, #1
 8017732:	d064      	beq.n	80177fe <__ssvfiscanf_r+0x2de>
 8017734:	2802      	cmp	r0, #2
 8017736:	f47f af18 	bne.w	801756a <__ssvfiscanf_r+0x4a>
 801773a:	e7c9      	b.n	80176d0 <__ssvfiscanf_r+0x1b0>
 801773c:	220a      	movs	r2, #10
 801773e:	e7d7      	b.n	80176f0 <__ssvfiscanf_r+0x1d0>
 8017740:	4629      	mov	r1, r5
 8017742:	4640      	mov	r0, r8
 8017744:	f000 faf0 	bl	8017d28 <__sccl>
 8017748:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801774e:	9341      	str	r3, [sp, #260]	@ 0x104
 8017750:	4605      	mov	r5, r0
 8017752:	2301      	movs	r3, #1
 8017754:	e7d7      	b.n	8017706 <__ssvfiscanf_r+0x1e6>
 8017756:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801775c:	9341      	str	r3, [sp, #260]	@ 0x104
 801775e:	2300      	movs	r3, #0
 8017760:	e7d1      	b.n	8017706 <__ssvfiscanf_r+0x1e6>
 8017762:	2302      	movs	r3, #2
 8017764:	e7cf      	b.n	8017706 <__ssvfiscanf_r+0x1e6>
 8017766:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8017768:	06c3      	lsls	r3, r0, #27
 801776a:	f53f aefe 	bmi.w	801756a <__ssvfiscanf_r+0x4a>
 801776e:	9b00      	ldr	r3, [sp, #0]
 8017770:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017772:	1d19      	adds	r1, r3, #4
 8017774:	9100      	str	r1, [sp, #0]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	07c0      	lsls	r0, r0, #31
 801777a:	bf4c      	ite	mi
 801777c:	801a      	strhmi	r2, [r3, #0]
 801777e:	601a      	strpl	r2, [r3, #0]
 8017780:	e6f3      	b.n	801756a <__ssvfiscanf_r+0x4a>
 8017782:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017784:	4621      	mov	r1, r4
 8017786:	4630      	mov	r0, r6
 8017788:	4798      	blx	r3
 801778a:	2800      	cmp	r0, #0
 801778c:	d0bf      	beq.n	801770e <__ssvfiscanf_r+0x1ee>
 801778e:	e79f      	b.n	80176d0 <__ssvfiscanf_r+0x1b0>
 8017790:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017792:	3201      	adds	r2, #1
 8017794:	9245      	str	r2, [sp, #276]	@ 0x114
 8017796:	6862      	ldr	r2, [r4, #4]
 8017798:	3a01      	subs	r2, #1
 801779a:	2a00      	cmp	r2, #0
 801779c:	6062      	str	r2, [r4, #4]
 801779e:	dd02      	ble.n	80177a6 <__ssvfiscanf_r+0x286>
 80177a0:	3301      	adds	r3, #1
 80177a2:	6023      	str	r3, [r4, #0]
 80177a4:	e7b6      	b.n	8017714 <__ssvfiscanf_r+0x1f4>
 80177a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80177a8:	4621      	mov	r1, r4
 80177aa:	4630      	mov	r0, r6
 80177ac:	4798      	blx	r3
 80177ae:	2800      	cmp	r0, #0
 80177b0:	d0b0      	beq.n	8017714 <__ssvfiscanf_r+0x1f4>
 80177b2:	e78d      	b.n	80176d0 <__ssvfiscanf_r+0x1b0>
 80177b4:	2b04      	cmp	r3, #4
 80177b6:	dc0f      	bgt.n	80177d8 <__ssvfiscanf_r+0x2b8>
 80177b8:	466b      	mov	r3, sp
 80177ba:	4622      	mov	r2, r4
 80177bc:	a941      	add	r1, sp, #260	@ 0x104
 80177be:	4630      	mov	r0, r6
 80177c0:	f000 f9be 	bl	8017b40 <_scanf_i>
 80177c4:	e7b4      	b.n	8017730 <__ssvfiscanf_r+0x210>
 80177c6:	bf00      	nop
 80177c8:	0801746f 	.word	0x0801746f
 80177cc:	080174e5 	.word	0x080174e5
 80177d0:	0801a079 	.word	0x0801a079
 80177d4:	0801a17f 	.word	0x0801a17f
 80177d8:	4b0a      	ldr	r3, [pc, #40]	@ (8017804 <__ssvfiscanf_r+0x2e4>)
 80177da:	2b00      	cmp	r3, #0
 80177dc:	f43f aec5 	beq.w	801756a <__ssvfiscanf_r+0x4a>
 80177e0:	466b      	mov	r3, sp
 80177e2:	4622      	mov	r2, r4
 80177e4:	a941      	add	r1, sp, #260	@ 0x104
 80177e6:	4630      	mov	r0, r6
 80177e8:	f3af 8000 	nop.w
 80177ec:	e7a0      	b.n	8017730 <__ssvfiscanf_r+0x210>
 80177ee:	89a3      	ldrh	r3, [r4, #12]
 80177f0:	065b      	lsls	r3, r3, #25
 80177f2:	f53f af71 	bmi.w	80176d8 <__ssvfiscanf_r+0x1b8>
 80177f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80177fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177fe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017800:	e7f9      	b.n	80177f6 <__ssvfiscanf_r+0x2d6>
 8017802:	bf00      	nop
 8017804:	00000000 	.word	0x00000000

08017808 <__sfputc_r>:
 8017808:	6893      	ldr	r3, [r2, #8]
 801780a:	3b01      	subs	r3, #1
 801780c:	2b00      	cmp	r3, #0
 801780e:	b410      	push	{r4}
 8017810:	6093      	str	r3, [r2, #8]
 8017812:	da08      	bge.n	8017826 <__sfputc_r+0x1e>
 8017814:	6994      	ldr	r4, [r2, #24]
 8017816:	42a3      	cmp	r3, r4
 8017818:	db01      	blt.n	801781e <__sfputc_r+0x16>
 801781a:	290a      	cmp	r1, #10
 801781c:	d103      	bne.n	8017826 <__sfputc_r+0x1e>
 801781e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017822:	f000 baf4 	b.w	8017e0e <__swbuf_r>
 8017826:	6813      	ldr	r3, [r2, #0]
 8017828:	1c58      	adds	r0, r3, #1
 801782a:	6010      	str	r0, [r2, #0]
 801782c:	7019      	strb	r1, [r3, #0]
 801782e:	4608      	mov	r0, r1
 8017830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017834:	4770      	bx	lr

08017836 <__sfputs_r>:
 8017836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017838:	4606      	mov	r6, r0
 801783a:	460f      	mov	r7, r1
 801783c:	4614      	mov	r4, r2
 801783e:	18d5      	adds	r5, r2, r3
 8017840:	42ac      	cmp	r4, r5
 8017842:	d101      	bne.n	8017848 <__sfputs_r+0x12>
 8017844:	2000      	movs	r0, #0
 8017846:	e007      	b.n	8017858 <__sfputs_r+0x22>
 8017848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801784c:	463a      	mov	r2, r7
 801784e:	4630      	mov	r0, r6
 8017850:	f7ff ffda 	bl	8017808 <__sfputc_r>
 8017854:	1c43      	adds	r3, r0, #1
 8017856:	d1f3      	bne.n	8017840 <__sfputs_r+0xa>
 8017858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801785c <_vfiprintf_r>:
 801785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017860:	460d      	mov	r5, r1
 8017862:	b09d      	sub	sp, #116	@ 0x74
 8017864:	4614      	mov	r4, r2
 8017866:	4698      	mov	r8, r3
 8017868:	4606      	mov	r6, r0
 801786a:	b118      	cbz	r0, 8017874 <_vfiprintf_r+0x18>
 801786c:	6a03      	ldr	r3, [r0, #32]
 801786e:	b90b      	cbnz	r3, 8017874 <_vfiprintf_r+0x18>
 8017870:	f7fc ff04 	bl	801467c <__sinit>
 8017874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017876:	07d9      	lsls	r1, r3, #31
 8017878:	d405      	bmi.n	8017886 <_vfiprintf_r+0x2a>
 801787a:	89ab      	ldrh	r3, [r5, #12]
 801787c:	059a      	lsls	r2, r3, #22
 801787e:	d402      	bmi.n	8017886 <_vfiprintf_r+0x2a>
 8017880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017882:	f7fd fe83 	bl	801558c <__retarget_lock_acquire_recursive>
 8017886:	89ab      	ldrh	r3, [r5, #12]
 8017888:	071b      	lsls	r3, r3, #28
 801788a:	d501      	bpl.n	8017890 <_vfiprintf_r+0x34>
 801788c:	692b      	ldr	r3, [r5, #16]
 801788e:	b99b      	cbnz	r3, 80178b8 <_vfiprintf_r+0x5c>
 8017890:	4629      	mov	r1, r5
 8017892:	4630      	mov	r0, r6
 8017894:	f000 fafa 	bl	8017e8c <__swsetup_r>
 8017898:	b170      	cbz	r0, 80178b8 <_vfiprintf_r+0x5c>
 801789a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801789c:	07dc      	lsls	r4, r3, #31
 801789e:	d504      	bpl.n	80178aa <_vfiprintf_r+0x4e>
 80178a0:	f04f 30ff 	mov.w	r0, #4294967295
 80178a4:	b01d      	add	sp, #116	@ 0x74
 80178a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178aa:	89ab      	ldrh	r3, [r5, #12]
 80178ac:	0598      	lsls	r0, r3, #22
 80178ae:	d4f7      	bmi.n	80178a0 <_vfiprintf_r+0x44>
 80178b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80178b2:	f7fd fe6d 	bl	8015590 <__retarget_lock_release_recursive>
 80178b6:	e7f3      	b.n	80178a0 <_vfiprintf_r+0x44>
 80178b8:	2300      	movs	r3, #0
 80178ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80178bc:	2320      	movs	r3, #32
 80178be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80178c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80178c6:	2330      	movs	r3, #48	@ 0x30
 80178c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017a78 <_vfiprintf_r+0x21c>
 80178cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80178d0:	f04f 0901 	mov.w	r9, #1
 80178d4:	4623      	mov	r3, r4
 80178d6:	469a      	mov	sl, r3
 80178d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178dc:	b10a      	cbz	r2, 80178e2 <_vfiprintf_r+0x86>
 80178de:	2a25      	cmp	r2, #37	@ 0x25
 80178e0:	d1f9      	bne.n	80178d6 <_vfiprintf_r+0x7a>
 80178e2:	ebba 0b04 	subs.w	fp, sl, r4
 80178e6:	d00b      	beq.n	8017900 <_vfiprintf_r+0xa4>
 80178e8:	465b      	mov	r3, fp
 80178ea:	4622      	mov	r2, r4
 80178ec:	4629      	mov	r1, r5
 80178ee:	4630      	mov	r0, r6
 80178f0:	f7ff ffa1 	bl	8017836 <__sfputs_r>
 80178f4:	3001      	adds	r0, #1
 80178f6:	f000 80a7 	beq.w	8017a48 <_vfiprintf_r+0x1ec>
 80178fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178fc:	445a      	add	r2, fp
 80178fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8017900:	f89a 3000 	ldrb.w	r3, [sl]
 8017904:	2b00      	cmp	r3, #0
 8017906:	f000 809f 	beq.w	8017a48 <_vfiprintf_r+0x1ec>
 801790a:	2300      	movs	r3, #0
 801790c:	f04f 32ff 	mov.w	r2, #4294967295
 8017910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017914:	f10a 0a01 	add.w	sl, sl, #1
 8017918:	9304      	str	r3, [sp, #16]
 801791a:	9307      	str	r3, [sp, #28]
 801791c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017920:	931a      	str	r3, [sp, #104]	@ 0x68
 8017922:	4654      	mov	r4, sl
 8017924:	2205      	movs	r2, #5
 8017926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801792a:	4853      	ldr	r0, [pc, #332]	@ (8017a78 <_vfiprintf_r+0x21c>)
 801792c:	f7e8 fc38 	bl	80001a0 <memchr>
 8017930:	9a04      	ldr	r2, [sp, #16]
 8017932:	b9d8      	cbnz	r0, 801796c <_vfiprintf_r+0x110>
 8017934:	06d1      	lsls	r1, r2, #27
 8017936:	bf44      	itt	mi
 8017938:	2320      	movmi	r3, #32
 801793a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801793e:	0713      	lsls	r3, r2, #28
 8017940:	bf44      	itt	mi
 8017942:	232b      	movmi	r3, #43	@ 0x2b
 8017944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017948:	f89a 3000 	ldrb.w	r3, [sl]
 801794c:	2b2a      	cmp	r3, #42	@ 0x2a
 801794e:	d015      	beq.n	801797c <_vfiprintf_r+0x120>
 8017950:	9a07      	ldr	r2, [sp, #28]
 8017952:	4654      	mov	r4, sl
 8017954:	2000      	movs	r0, #0
 8017956:	f04f 0c0a 	mov.w	ip, #10
 801795a:	4621      	mov	r1, r4
 801795c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017960:	3b30      	subs	r3, #48	@ 0x30
 8017962:	2b09      	cmp	r3, #9
 8017964:	d94b      	bls.n	80179fe <_vfiprintf_r+0x1a2>
 8017966:	b1b0      	cbz	r0, 8017996 <_vfiprintf_r+0x13a>
 8017968:	9207      	str	r2, [sp, #28]
 801796a:	e014      	b.n	8017996 <_vfiprintf_r+0x13a>
 801796c:	eba0 0308 	sub.w	r3, r0, r8
 8017970:	fa09 f303 	lsl.w	r3, r9, r3
 8017974:	4313      	orrs	r3, r2
 8017976:	9304      	str	r3, [sp, #16]
 8017978:	46a2      	mov	sl, r4
 801797a:	e7d2      	b.n	8017922 <_vfiprintf_r+0xc6>
 801797c:	9b03      	ldr	r3, [sp, #12]
 801797e:	1d19      	adds	r1, r3, #4
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	9103      	str	r1, [sp, #12]
 8017984:	2b00      	cmp	r3, #0
 8017986:	bfbb      	ittet	lt
 8017988:	425b      	neglt	r3, r3
 801798a:	f042 0202 	orrlt.w	r2, r2, #2
 801798e:	9307      	strge	r3, [sp, #28]
 8017990:	9307      	strlt	r3, [sp, #28]
 8017992:	bfb8      	it	lt
 8017994:	9204      	strlt	r2, [sp, #16]
 8017996:	7823      	ldrb	r3, [r4, #0]
 8017998:	2b2e      	cmp	r3, #46	@ 0x2e
 801799a:	d10a      	bne.n	80179b2 <_vfiprintf_r+0x156>
 801799c:	7863      	ldrb	r3, [r4, #1]
 801799e:	2b2a      	cmp	r3, #42	@ 0x2a
 80179a0:	d132      	bne.n	8017a08 <_vfiprintf_r+0x1ac>
 80179a2:	9b03      	ldr	r3, [sp, #12]
 80179a4:	1d1a      	adds	r2, r3, #4
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	9203      	str	r2, [sp, #12]
 80179aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80179ae:	3402      	adds	r4, #2
 80179b0:	9305      	str	r3, [sp, #20]
 80179b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017a88 <_vfiprintf_r+0x22c>
 80179b6:	7821      	ldrb	r1, [r4, #0]
 80179b8:	2203      	movs	r2, #3
 80179ba:	4650      	mov	r0, sl
 80179bc:	f7e8 fbf0 	bl	80001a0 <memchr>
 80179c0:	b138      	cbz	r0, 80179d2 <_vfiprintf_r+0x176>
 80179c2:	9b04      	ldr	r3, [sp, #16]
 80179c4:	eba0 000a 	sub.w	r0, r0, sl
 80179c8:	2240      	movs	r2, #64	@ 0x40
 80179ca:	4082      	lsls	r2, r0
 80179cc:	4313      	orrs	r3, r2
 80179ce:	3401      	adds	r4, #1
 80179d0:	9304      	str	r3, [sp, #16]
 80179d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179d6:	4829      	ldr	r0, [pc, #164]	@ (8017a7c <_vfiprintf_r+0x220>)
 80179d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80179dc:	2206      	movs	r2, #6
 80179de:	f7e8 fbdf 	bl	80001a0 <memchr>
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d03f      	beq.n	8017a66 <_vfiprintf_r+0x20a>
 80179e6:	4b26      	ldr	r3, [pc, #152]	@ (8017a80 <_vfiprintf_r+0x224>)
 80179e8:	bb1b      	cbnz	r3, 8017a32 <_vfiprintf_r+0x1d6>
 80179ea:	9b03      	ldr	r3, [sp, #12]
 80179ec:	3307      	adds	r3, #7
 80179ee:	f023 0307 	bic.w	r3, r3, #7
 80179f2:	3308      	adds	r3, #8
 80179f4:	9303      	str	r3, [sp, #12]
 80179f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179f8:	443b      	add	r3, r7
 80179fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80179fc:	e76a      	b.n	80178d4 <_vfiprintf_r+0x78>
 80179fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a02:	460c      	mov	r4, r1
 8017a04:	2001      	movs	r0, #1
 8017a06:	e7a8      	b.n	801795a <_vfiprintf_r+0xfe>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	3401      	adds	r4, #1
 8017a0c:	9305      	str	r3, [sp, #20]
 8017a0e:	4619      	mov	r1, r3
 8017a10:	f04f 0c0a 	mov.w	ip, #10
 8017a14:	4620      	mov	r0, r4
 8017a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a1a:	3a30      	subs	r2, #48	@ 0x30
 8017a1c:	2a09      	cmp	r2, #9
 8017a1e:	d903      	bls.n	8017a28 <_vfiprintf_r+0x1cc>
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d0c6      	beq.n	80179b2 <_vfiprintf_r+0x156>
 8017a24:	9105      	str	r1, [sp, #20]
 8017a26:	e7c4      	b.n	80179b2 <_vfiprintf_r+0x156>
 8017a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	2301      	movs	r3, #1
 8017a30:	e7f0      	b.n	8017a14 <_vfiprintf_r+0x1b8>
 8017a32:	ab03      	add	r3, sp, #12
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	462a      	mov	r2, r5
 8017a38:	4b12      	ldr	r3, [pc, #72]	@ (8017a84 <_vfiprintf_r+0x228>)
 8017a3a:	a904      	add	r1, sp, #16
 8017a3c:	4630      	mov	r0, r6
 8017a3e:	f7fc f9d9 	bl	8013df4 <_printf_float>
 8017a42:	4607      	mov	r7, r0
 8017a44:	1c78      	adds	r0, r7, #1
 8017a46:	d1d6      	bne.n	80179f6 <_vfiprintf_r+0x19a>
 8017a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a4a:	07d9      	lsls	r1, r3, #31
 8017a4c:	d405      	bmi.n	8017a5a <_vfiprintf_r+0x1fe>
 8017a4e:	89ab      	ldrh	r3, [r5, #12]
 8017a50:	059a      	lsls	r2, r3, #22
 8017a52:	d402      	bmi.n	8017a5a <_vfiprintf_r+0x1fe>
 8017a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a56:	f7fd fd9b 	bl	8015590 <__retarget_lock_release_recursive>
 8017a5a:	89ab      	ldrh	r3, [r5, #12]
 8017a5c:	065b      	lsls	r3, r3, #25
 8017a5e:	f53f af1f 	bmi.w	80178a0 <_vfiprintf_r+0x44>
 8017a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a64:	e71e      	b.n	80178a4 <_vfiprintf_r+0x48>
 8017a66:	ab03      	add	r3, sp, #12
 8017a68:	9300      	str	r3, [sp, #0]
 8017a6a:	462a      	mov	r2, r5
 8017a6c:	4b05      	ldr	r3, [pc, #20]	@ (8017a84 <_vfiprintf_r+0x228>)
 8017a6e:	a904      	add	r1, sp, #16
 8017a70:	4630      	mov	r0, r6
 8017a72:	f7fc fc57 	bl	8014324 <_printf_i>
 8017a76:	e7e4      	b.n	8017a42 <_vfiprintf_r+0x1e6>
 8017a78:	0801a179 	.word	0x0801a179
 8017a7c:	0801a183 	.word	0x0801a183
 8017a80:	08013df5 	.word	0x08013df5
 8017a84:	08017837 	.word	0x08017837
 8017a88:	0801a17f 	.word	0x0801a17f

08017a8c <_scanf_chars>:
 8017a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a90:	4615      	mov	r5, r2
 8017a92:	688a      	ldr	r2, [r1, #8]
 8017a94:	4680      	mov	r8, r0
 8017a96:	460c      	mov	r4, r1
 8017a98:	b932      	cbnz	r2, 8017aa8 <_scanf_chars+0x1c>
 8017a9a:	698a      	ldr	r2, [r1, #24]
 8017a9c:	2a00      	cmp	r2, #0
 8017a9e:	bf14      	ite	ne
 8017aa0:	f04f 32ff 	movne.w	r2, #4294967295
 8017aa4:	2201      	moveq	r2, #1
 8017aa6:	608a      	str	r2, [r1, #8]
 8017aa8:	6822      	ldr	r2, [r4, #0]
 8017aaa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017b3c <_scanf_chars+0xb0>
 8017aae:	06d1      	lsls	r1, r2, #27
 8017ab0:	bf5f      	itttt	pl
 8017ab2:	681a      	ldrpl	r2, [r3, #0]
 8017ab4:	1d11      	addpl	r1, r2, #4
 8017ab6:	6019      	strpl	r1, [r3, #0]
 8017ab8:	6816      	ldrpl	r6, [r2, #0]
 8017aba:	2700      	movs	r7, #0
 8017abc:	69a0      	ldr	r0, [r4, #24]
 8017abe:	b188      	cbz	r0, 8017ae4 <_scanf_chars+0x58>
 8017ac0:	2801      	cmp	r0, #1
 8017ac2:	d107      	bne.n	8017ad4 <_scanf_chars+0x48>
 8017ac4:	682b      	ldr	r3, [r5, #0]
 8017ac6:	781a      	ldrb	r2, [r3, #0]
 8017ac8:	6963      	ldr	r3, [r4, #20]
 8017aca:	5c9b      	ldrb	r3, [r3, r2]
 8017acc:	b953      	cbnz	r3, 8017ae4 <_scanf_chars+0x58>
 8017ace:	2f00      	cmp	r7, #0
 8017ad0:	d031      	beq.n	8017b36 <_scanf_chars+0xaa>
 8017ad2:	e022      	b.n	8017b1a <_scanf_chars+0x8e>
 8017ad4:	2802      	cmp	r0, #2
 8017ad6:	d120      	bne.n	8017b1a <_scanf_chars+0x8e>
 8017ad8:	682b      	ldr	r3, [r5, #0]
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017ae0:	071b      	lsls	r3, r3, #28
 8017ae2:	d41a      	bmi.n	8017b1a <_scanf_chars+0x8e>
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	06da      	lsls	r2, r3, #27
 8017ae8:	bf5e      	ittt	pl
 8017aea:	682b      	ldrpl	r3, [r5, #0]
 8017aec:	781b      	ldrbpl	r3, [r3, #0]
 8017aee:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017af2:	682a      	ldr	r2, [r5, #0]
 8017af4:	686b      	ldr	r3, [r5, #4]
 8017af6:	3201      	adds	r2, #1
 8017af8:	602a      	str	r2, [r5, #0]
 8017afa:	68a2      	ldr	r2, [r4, #8]
 8017afc:	3b01      	subs	r3, #1
 8017afe:	3a01      	subs	r2, #1
 8017b00:	606b      	str	r3, [r5, #4]
 8017b02:	3701      	adds	r7, #1
 8017b04:	60a2      	str	r2, [r4, #8]
 8017b06:	b142      	cbz	r2, 8017b1a <_scanf_chars+0x8e>
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	dcd7      	bgt.n	8017abc <_scanf_chars+0x30>
 8017b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017b10:	4629      	mov	r1, r5
 8017b12:	4640      	mov	r0, r8
 8017b14:	4798      	blx	r3
 8017b16:	2800      	cmp	r0, #0
 8017b18:	d0d0      	beq.n	8017abc <_scanf_chars+0x30>
 8017b1a:	6823      	ldr	r3, [r4, #0]
 8017b1c:	f013 0310 	ands.w	r3, r3, #16
 8017b20:	d105      	bne.n	8017b2e <_scanf_chars+0xa2>
 8017b22:	68e2      	ldr	r2, [r4, #12]
 8017b24:	3201      	adds	r2, #1
 8017b26:	60e2      	str	r2, [r4, #12]
 8017b28:	69a2      	ldr	r2, [r4, #24]
 8017b2a:	b102      	cbz	r2, 8017b2e <_scanf_chars+0xa2>
 8017b2c:	7033      	strb	r3, [r6, #0]
 8017b2e:	6923      	ldr	r3, [r4, #16]
 8017b30:	443b      	add	r3, r7
 8017b32:	6123      	str	r3, [r4, #16]
 8017b34:	2000      	movs	r0, #0
 8017b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b3a:	bf00      	nop
 8017b3c:	0801a079 	.word	0x0801a079

08017b40 <_scanf_i>:
 8017b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b44:	4698      	mov	r8, r3
 8017b46:	4b74      	ldr	r3, [pc, #464]	@ (8017d18 <_scanf_i+0x1d8>)
 8017b48:	460c      	mov	r4, r1
 8017b4a:	4682      	mov	sl, r0
 8017b4c:	4616      	mov	r6, r2
 8017b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017b52:	b087      	sub	sp, #28
 8017b54:	ab03      	add	r3, sp, #12
 8017b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017b5a:	4b70      	ldr	r3, [pc, #448]	@ (8017d1c <_scanf_i+0x1dc>)
 8017b5c:	69a1      	ldr	r1, [r4, #24]
 8017b5e:	4a70      	ldr	r2, [pc, #448]	@ (8017d20 <_scanf_i+0x1e0>)
 8017b60:	2903      	cmp	r1, #3
 8017b62:	bf08      	it	eq
 8017b64:	461a      	moveq	r2, r3
 8017b66:	68a3      	ldr	r3, [r4, #8]
 8017b68:	9201      	str	r2, [sp, #4]
 8017b6a:	1e5a      	subs	r2, r3, #1
 8017b6c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017b70:	bf88      	it	hi
 8017b72:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017b76:	4627      	mov	r7, r4
 8017b78:	bf82      	ittt	hi
 8017b7a:	eb03 0905 	addhi.w	r9, r3, r5
 8017b7e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017b82:	60a3      	strhi	r3, [r4, #8]
 8017b84:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017b88:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017b8c:	bf98      	it	ls
 8017b8e:	f04f 0900 	movls.w	r9, #0
 8017b92:	6023      	str	r3, [r4, #0]
 8017b94:	463d      	mov	r5, r7
 8017b96:	f04f 0b00 	mov.w	fp, #0
 8017b9a:	6831      	ldr	r1, [r6, #0]
 8017b9c:	ab03      	add	r3, sp, #12
 8017b9e:	7809      	ldrb	r1, [r1, #0]
 8017ba0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017ba4:	2202      	movs	r2, #2
 8017ba6:	f7e8 fafb 	bl	80001a0 <memchr>
 8017baa:	b328      	cbz	r0, 8017bf8 <_scanf_i+0xb8>
 8017bac:	f1bb 0f01 	cmp.w	fp, #1
 8017bb0:	d159      	bne.n	8017c66 <_scanf_i+0x126>
 8017bb2:	6862      	ldr	r2, [r4, #4]
 8017bb4:	b92a      	cbnz	r2, 8017bc2 <_scanf_i+0x82>
 8017bb6:	6822      	ldr	r2, [r4, #0]
 8017bb8:	2108      	movs	r1, #8
 8017bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017bbe:	6061      	str	r1, [r4, #4]
 8017bc0:	6022      	str	r2, [r4, #0]
 8017bc2:	6822      	ldr	r2, [r4, #0]
 8017bc4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017bc8:	6022      	str	r2, [r4, #0]
 8017bca:	68a2      	ldr	r2, [r4, #8]
 8017bcc:	1e51      	subs	r1, r2, #1
 8017bce:	60a1      	str	r1, [r4, #8]
 8017bd0:	b192      	cbz	r2, 8017bf8 <_scanf_i+0xb8>
 8017bd2:	6832      	ldr	r2, [r6, #0]
 8017bd4:	1c51      	adds	r1, r2, #1
 8017bd6:	6031      	str	r1, [r6, #0]
 8017bd8:	7812      	ldrb	r2, [r2, #0]
 8017bda:	f805 2b01 	strb.w	r2, [r5], #1
 8017bde:	6872      	ldr	r2, [r6, #4]
 8017be0:	3a01      	subs	r2, #1
 8017be2:	2a00      	cmp	r2, #0
 8017be4:	6072      	str	r2, [r6, #4]
 8017be6:	dc07      	bgt.n	8017bf8 <_scanf_i+0xb8>
 8017be8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017bec:	4631      	mov	r1, r6
 8017bee:	4650      	mov	r0, sl
 8017bf0:	4790      	blx	r2
 8017bf2:	2800      	cmp	r0, #0
 8017bf4:	f040 8085 	bne.w	8017d02 <_scanf_i+0x1c2>
 8017bf8:	f10b 0b01 	add.w	fp, fp, #1
 8017bfc:	f1bb 0f03 	cmp.w	fp, #3
 8017c00:	d1cb      	bne.n	8017b9a <_scanf_i+0x5a>
 8017c02:	6863      	ldr	r3, [r4, #4]
 8017c04:	b90b      	cbnz	r3, 8017c0a <_scanf_i+0xca>
 8017c06:	230a      	movs	r3, #10
 8017c08:	6063      	str	r3, [r4, #4]
 8017c0a:	6863      	ldr	r3, [r4, #4]
 8017c0c:	4945      	ldr	r1, [pc, #276]	@ (8017d24 <_scanf_i+0x1e4>)
 8017c0e:	6960      	ldr	r0, [r4, #20]
 8017c10:	1ac9      	subs	r1, r1, r3
 8017c12:	f000 f889 	bl	8017d28 <__sccl>
 8017c16:	f04f 0b00 	mov.w	fp, #0
 8017c1a:	68a3      	ldr	r3, [r4, #8]
 8017c1c:	6822      	ldr	r2, [r4, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d03d      	beq.n	8017c9e <_scanf_i+0x15e>
 8017c22:	6831      	ldr	r1, [r6, #0]
 8017c24:	6960      	ldr	r0, [r4, #20]
 8017c26:	f891 c000 	ldrb.w	ip, [r1]
 8017c2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	d035      	beq.n	8017c9e <_scanf_i+0x15e>
 8017c32:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017c36:	d124      	bne.n	8017c82 <_scanf_i+0x142>
 8017c38:	0510      	lsls	r0, r2, #20
 8017c3a:	d522      	bpl.n	8017c82 <_scanf_i+0x142>
 8017c3c:	f10b 0b01 	add.w	fp, fp, #1
 8017c40:	f1b9 0f00 	cmp.w	r9, #0
 8017c44:	d003      	beq.n	8017c4e <_scanf_i+0x10e>
 8017c46:	3301      	adds	r3, #1
 8017c48:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c4c:	60a3      	str	r3, [r4, #8]
 8017c4e:	6873      	ldr	r3, [r6, #4]
 8017c50:	3b01      	subs	r3, #1
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	6073      	str	r3, [r6, #4]
 8017c56:	dd1b      	ble.n	8017c90 <_scanf_i+0x150>
 8017c58:	6833      	ldr	r3, [r6, #0]
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	6033      	str	r3, [r6, #0]
 8017c5e:	68a3      	ldr	r3, [r4, #8]
 8017c60:	3b01      	subs	r3, #1
 8017c62:	60a3      	str	r3, [r4, #8]
 8017c64:	e7d9      	b.n	8017c1a <_scanf_i+0xda>
 8017c66:	f1bb 0f02 	cmp.w	fp, #2
 8017c6a:	d1ae      	bne.n	8017bca <_scanf_i+0x8a>
 8017c6c:	6822      	ldr	r2, [r4, #0]
 8017c6e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017c72:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017c76:	d1bf      	bne.n	8017bf8 <_scanf_i+0xb8>
 8017c78:	2110      	movs	r1, #16
 8017c7a:	6061      	str	r1, [r4, #4]
 8017c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017c80:	e7a2      	b.n	8017bc8 <_scanf_i+0x88>
 8017c82:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017c86:	6022      	str	r2, [r4, #0]
 8017c88:	780b      	ldrb	r3, [r1, #0]
 8017c8a:	f805 3b01 	strb.w	r3, [r5], #1
 8017c8e:	e7de      	b.n	8017c4e <_scanf_i+0x10e>
 8017c90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017c94:	4631      	mov	r1, r6
 8017c96:	4650      	mov	r0, sl
 8017c98:	4798      	blx	r3
 8017c9a:	2800      	cmp	r0, #0
 8017c9c:	d0df      	beq.n	8017c5e <_scanf_i+0x11e>
 8017c9e:	6823      	ldr	r3, [r4, #0]
 8017ca0:	05d9      	lsls	r1, r3, #23
 8017ca2:	d50d      	bpl.n	8017cc0 <_scanf_i+0x180>
 8017ca4:	42bd      	cmp	r5, r7
 8017ca6:	d909      	bls.n	8017cbc <_scanf_i+0x17c>
 8017ca8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017cb0:	4632      	mov	r2, r6
 8017cb2:	4650      	mov	r0, sl
 8017cb4:	4798      	blx	r3
 8017cb6:	f105 39ff 	add.w	r9, r5, #4294967295
 8017cba:	464d      	mov	r5, r9
 8017cbc:	42bd      	cmp	r5, r7
 8017cbe:	d028      	beq.n	8017d12 <_scanf_i+0x1d2>
 8017cc0:	6822      	ldr	r2, [r4, #0]
 8017cc2:	f012 0210 	ands.w	r2, r2, #16
 8017cc6:	d113      	bne.n	8017cf0 <_scanf_i+0x1b0>
 8017cc8:	702a      	strb	r2, [r5, #0]
 8017cca:	6863      	ldr	r3, [r4, #4]
 8017ccc:	9e01      	ldr	r6, [sp, #4]
 8017cce:	4639      	mov	r1, r7
 8017cd0:	4650      	mov	r0, sl
 8017cd2:	47b0      	blx	r6
 8017cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8017cd8:	6821      	ldr	r1, [r4, #0]
 8017cda:	1d1a      	adds	r2, r3, #4
 8017cdc:	f8c8 2000 	str.w	r2, [r8]
 8017ce0:	f011 0f20 	tst.w	r1, #32
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	d00f      	beq.n	8017d08 <_scanf_i+0x1c8>
 8017ce8:	6018      	str	r0, [r3, #0]
 8017cea:	68e3      	ldr	r3, [r4, #12]
 8017cec:	3301      	adds	r3, #1
 8017cee:	60e3      	str	r3, [r4, #12]
 8017cf0:	6923      	ldr	r3, [r4, #16]
 8017cf2:	1bed      	subs	r5, r5, r7
 8017cf4:	445d      	add	r5, fp
 8017cf6:	442b      	add	r3, r5
 8017cf8:	6123      	str	r3, [r4, #16]
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	b007      	add	sp, #28
 8017cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d02:	f04f 0b00 	mov.w	fp, #0
 8017d06:	e7ca      	b.n	8017c9e <_scanf_i+0x15e>
 8017d08:	07ca      	lsls	r2, r1, #31
 8017d0a:	bf4c      	ite	mi
 8017d0c:	8018      	strhmi	r0, [r3, #0]
 8017d0e:	6018      	strpl	r0, [r3, #0]
 8017d10:	e7eb      	b.n	8017cea <_scanf_i+0x1aa>
 8017d12:	2001      	movs	r0, #1
 8017d14:	e7f2      	b.n	8017cfc <_scanf_i+0x1bc>
 8017d16:	bf00      	nop
 8017d18:	08019b8c 	.word	0x08019b8c
 8017d1c:	080180c5 	.word	0x080180c5
 8017d20:	08016d21 	.word	0x08016d21
 8017d24:	0801a1a4 	.word	0x0801a1a4

08017d28 <__sccl>:
 8017d28:	b570      	push	{r4, r5, r6, lr}
 8017d2a:	780b      	ldrb	r3, [r1, #0]
 8017d2c:	4604      	mov	r4, r0
 8017d2e:	2b5e      	cmp	r3, #94	@ 0x5e
 8017d30:	bf0b      	itete	eq
 8017d32:	784b      	ldrbeq	r3, [r1, #1]
 8017d34:	1c4a      	addne	r2, r1, #1
 8017d36:	1c8a      	addeq	r2, r1, #2
 8017d38:	2100      	movne	r1, #0
 8017d3a:	bf08      	it	eq
 8017d3c:	2101      	moveq	r1, #1
 8017d3e:	3801      	subs	r0, #1
 8017d40:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017d44:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017d48:	42a8      	cmp	r0, r5
 8017d4a:	d1fb      	bne.n	8017d44 <__sccl+0x1c>
 8017d4c:	b90b      	cbnz	r3, 8017d52 <__sccl+0x2a>
 8017d4e:	1e50      	subs	r0, r2, #1
 8017d50:	bd70      	pop	{r4, r5, r6, pc}
 8017d52:	f081 0101 	eor.w	r1, r1, #1
 8017d56:	54e1      	strb	r1, [r4, r3]
 8017d58:	4610      	mov	r0, r2
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017d60:	2d2d      	cmp	r5, #45	@ 0x2d
 8017d62:	d005      	beq.n	8017d70 <__sccl+0x48>
 8017d64:	2d5d      	cmp	r5, #93	@ 0x5d
 8017d66:	d016      	beq.n	8017d96 <__sccl+0x6e>
 8017d68:	2d00      	cmp	r5, #0
 8017d6a:	d0f1      	beq.n	8017d50 <__sccl+0x28>
 8017d6c:	462b      	mov	r3, r5
 8017d6e:	e7f2      	b.n	8017d56 <__sccl+0x2e>
 8017d70:	7846      	ldrb	r6, [r0, #1]
 8017d72:	2e5d      	cmp	r6, #93	@ 0x5d
 8017d74:	d0fa      	beq.n	8017d6c <__sccl+0x44>
 8017d76:	42b3      	cmp	r3, r6
 8017d78:	dcf8      	bgt.n	8017d6c <__sccl+0x44>
 8017d7a:	3002      	adds	r0, #2
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	3201      	adds	r2, #1
 8017d80:	4296      	cmp	r6, r2
 8017d82:	54a1      	strb	r1, [r4, r2]
 8017d84:	dcfb      	bgt.n	8017d7e <__sccl+0x56>
 8017d86:	1af2      	subs	r2, r6, r3
 8017d88:	3a01      	subs	r2, #1
 8017d8a:	1c5d      	adds	r5, r3, #1
 8017d8c:	42b3      	cmp	r3, r6
 8017d8e:	bfa8      	it	ge
 8017d90:	2200      	movge	r2, #0
 8017d92:	18ab      	adds	r3, r5, r2
 8017d94:	e7e1      	b.n	8017d5a <__sccl+0x32>
 8017d96:	4610      	mov	r0, r2
 8017d98:	e7da      	b.n	8017d50 <__sccl+0x28>

08017d9a <__submore>:
 8017d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d9e:	460c      	mov	r4, r1
 8017da0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017da6:	4299      	cmp	r1, r3
 8017da8:	d11d      	bne.n	8017de6 <__submore+0x4c>
 8017daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017dae:	f7fe fb3b 	bl	8016428 <_malloc_r>
 8017db2:	b918      	cbnz	r0, 8017dbc <__submore+0x22>
 8017db4:	f04f 30ff 	mov.w	r0, #4294967295
 8017db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017dc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017dc2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017dc6:	6360      	str	r0, [r4, #52]	@ 0x34
 8017dc8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017dcc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017dd0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017dd4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017dd8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017ddc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017de0:	6020      	str	r0, [r4, #0]
 8017de2:	2000      	movs	r0, #0
 8017de4:	e7e8      	b.n	8017db8 <__submore+0x1e>
 8017de6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017de8:	0077      	lsls	r7, r6, #1
 8017dea:	463a      	mov	r2, r7
 8017dec:	f7ff fb04 	bl	80173f8 <_realloc_r>
 8017df0:	4605      	mov	r5, r0
 8017df2:	2800      	cmp	r0, #0
 8017df4:	d0de      	beq.n	8017db4 <__submore+0x1a>
 8017df6:	eb00 0806 	add.w	r8, r0, r6
 8017dfa:	4601      	mov	r1, r0
 8017dfc:	4632      	mov	r2, r6
 8017dfe:	4640      	mov	r0, r8
 8017e00:	f7fd fbcf 	bl	80155a2 <memcpy>
 8017e04:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8017e08:	f8c4 8000 	str.w	r8, [r4]
 8017e0c:	e7e9      	b.n	8017de2 <__submore+0x48>

08017e0e <__swbuf_r>:
 8017e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e10:	460e      	mov	r6, r1
 8017e12:	4614      	mov	r4, r2
 8017e14:	4605      	mov	r5, r0
 8017e16:	b118      	cbz	r0, 8017e20 <__swbuf_r+0x12>
 8017e18:	6a03      	ldr	r3, [r0, #32]
 8017e1a:	b90b      	cbnz	r3, 8017e20 <__swbuf_r+0x12>
 8017e1c:	f7fc fc2e 	bl	801467c <__sinit>
 8017e20:	69a3      	ldr	r3, [r4, #24]
 8017e22:	60a3      	str	r3, [r4, #8]
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	071a      	lsls	r2, r3, #28
 8017e28:	d501      	bpl.n	8017e2e <__swbuf_r+0x20>
 8017e2a:	6923      	ldr	r3, [r4, #16]
 8017e2c:	b943      	cbnz	r3, 8017e40 <__swbuf_r+0x32>
 8017e2e:	4621      	mov	r1, r4
 8017e30:	4628      	mov	r0, r5
 8017e32:	f000 f82b 	bl	8017e8c <__swsetup_r>
 8017e36:	b118      	cbz	r0, 8017e40 <__swbuf_r+0x32>
 8017e38:	f04f 37ff 	mov.w	r7, #4294967295
 8017e3c:	4638      	mov	r0, r7
 8017e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e40:	6823      	ldr	r3, [r4, #0]
 8017e42:	6922      	ldr	r2, [r4, #16]
 8017e44:	1a98      	subs	r0, r3, r2
 8017e46:	6963      	ldr	r3, [r4, #20]
 8017e48:	b2f6      	uxtb	r6, r6
 8017e4a:	4283      	cmp	r3, r0
 8017e4c:	4637      	mov	r7, r6
 8017e4e:	dc05      	bgt.n	8017e5c <__swbuf_r+0x4e>
 8017e50:	4621      	mov	r1, r4
 8017e52:	4628      	mov	r0, r5
 8017e54:	f7ff f94c 	bl	80170f0 <_fflush_r>
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	d1ed      	bne.n	8017e38 <__swbuf_r+0x2a>
 8017e5c:	68a3      	ldr	r3, [r4, #8]
 8017e5e:	3b01      	subs	r3, #1
 8017e60:	60a3      	str	r3, [r4, #8]
 8017e62:	6823      	ldr	r3, [r4, #0]
 8017e64:	1c5a      	adds	r2, r3, #1
 8017e66:	6022      	str	r2, [r4, #0]
 8017e68:	701e      	strb	r6, [r3, #0]
 8017e6a:	6962      	ldr	r2, [r4, #20]
 8017e6c:	1c43      	adds	r3, r0, #1
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d004      	beq.n	8017e7c <__swbuf_r+0x6e>
 8017e72:	89a3      	ldrh	r3, [r4, #12]
 8017e74:	07db      	lsls	r3, r3, #31
 8017e76:	d5e1      	bpl.n	8017e3c <__swbuf_r+0x2e>
 8017e78:	2e0a      	cmp	r6, #10
 8017e7a:	d1df      	bne.n	8017e3c <__swbuf_r+0x2e>
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f7ff f936 	bl	80170f0 <_fflush_r>
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d0d9      	beq.n	8017e3c <__swbuf_r+0x2e>
 8017e88:	e7d6      	b.n	8017e38 <__swbuf_r+0x2a>
	...

08017e8c <__swsetup_r>:
 8017e8c:	b538      	push	{r3, r4, r5, lr}
 8017e8e:	4b29      	ldr	r3, [pc, #164]	@ (8017f34 <__swsetup_r+0xa8>)
 8017e90:	4605      	mov	r5, r0
 8017e92:	6818      	ldr	r0, [r3, #0]
 8017e94:	460c      	mov	r4, r1
 8017e96:	b118      	cbz	r0, 8017ea0 <__swsetup_r+0x14>
 8017e98:	6a03      	ldr	r3, [r0, #32]
 8017e9a:	b90b      	cbnz	r3, 8017ea0 <__swsetup_r+0x14>
 8017e9c:	f7fc fbee 	bl	801467c <__sinit>
 8017ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ea4:	0719      	lsls	r1, r3, #28
 8017ea6:	d422      	bmi.n	8017eee <__swsetup_r+0x62>
 8017ea8:	06da      	lsls	r2, r3, #27
 8017eaa:	d407      	bmi.n	8017ebc <__swsetup_r+0x30>
 8017eac:	2209      	movs	r2, #9
 8017eae:	602a      	str	r2, [r5, #0]
 8017eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eb4:	81a3      	strh	r3, [r4, #12]
 8017eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eba:	e033      	b.n	8017f24 <__swsetup_r+0x98>
 8017ebc:	0758      	lsls	r0, r3, #29
 8017ebe:	d512      	bpl.n	8017ee6 <__swsetup_r+0x5a>
 8017ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ec2:	b141      	cbz	r1, 8017ed6 <__swsetup_r+0x4a>
 8017ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ec8:	4299      	cmp	r1, r3
 8017eca:	d002      	beq.n	8017ed2 <__swsetup_r+0x46>
 8017ecc:	4628      	mov	r0, r5
 8017ece:	f7fe f9eb 	bl	80162a8 <_free_r>
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ed6:	89a3      	ldrh	r3, [r4, #12]
 8017ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017edc:	81a3      	strh	r3, [r4, #12]
 8017ede:	2300      	movs	r3, #0
 8017ee0:	6063      	str	r3, [r4, #4]
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	89a3      	ldrh	r3, [r4, #12]
 8017ee8:	f043 0308 	orr.w	r3, r3, #8
 8017eec:	81a3      	strh	r3, [r4, #12]
 8017eee:	6923      	ldr	r3, [r4, #16]
 8017ef0:	b94b      	cbnz	r3, 8017f06 <__swsetup_r+0x7a>
 8017ef2:	89a3      	ldrh	r3, [r4, #12]
 8017ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017efc:	d003      	beq.n	8017f06 <__swsetup_r+0x7a>
 8017efe:	4621      	mov	r1, r4
 8017f00:	4628      	mov	r0, r5
 8017f02:	f000 f907 	bl	8018114 <__smakebuf_r>
 8017f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f0a:	f013 0201 	ands.w	r2, r3, #1
 8017f0e:	d00a      	beq.n	8017f26 <__swsetup_r+0x9a>
 8017f10:	2200      	movs	r2, #0
 8017f12:	60a2      	str	r2, [r4, #8]
 8017f14:	6962      	ldr	r2, [r4, #20]
 8017f16:	4252      	negs	r2, r2
 8017f18:	61a2      	str	r2, [r4, #24]
 8017f1a:	6922      	ldr	r2, [r4, #16]
 8017f1c:	b942      	cbnz	r2, 8017f30 <__swsetup_r+0xa4>
 8017f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017f22:	d1c5      	bne.n	8017eb0 <__swsetup_r+0x24>
 8017f24:	bd38      	pop	{r3, r4, r5, pc}
 8017f26:	0799      	lsls	r1, r3, #30
 8017f28:	bf58      	it	pl
 8017f2a:	6962      	ldrpl	r2, [r4, #20]
 8017f2c:	60a2      	str	r2, [r4, #8]
 8017f2e:	e7f4      	b.n	8017f1a <__swsetup_r+0x8e>
 8017f30:	2000      	movs	r0, #0
 8017f32:	e7f7      	b.n	8017f24 <__swsetup_r+0x98>
 8017f34:	20000034 	.word	0x20000034

08017f38 <_raise_r>:
 8017f38:	291f      	cmp	r1, #31
 8017f3a:	b538      	push	{r3, r4, r5, lr}
 8017f3c:	4605      	mov	r5, r0
 8017f3e:	460c      	mov	r4, r1
 8017f40:	d904      	bls.n	8017f4c <_raise_r+0x14>
 8017f42:	2316      	movs	r3, #22
 8017f44:	6003      	str	r3, [r0, #0]
 8017f46:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4a:	bd38      	pop	{r3, r4, r5, pc}
 8017f4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017f4e:	b112      	cbz	r2, 8017f56 <_raise_r+0x1e>
 8017f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f54:	b94b      	cbnz	r3, 8017f6a <_raise_r+0x32>
 8017f56:	4628      	mov	r0, r5
 8017f58:	f000 f830 	bl	8017fbc <_getpid_r>
 8017f5c:	4622      	mov	r2, r4
 8017f5e:	4601      	mov	r1, r0
 8017f60:	4628      	mov	r0, r5
 8017f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f66:	f000 b817 	b.w	8017f98 <_kill_r>
 8017f6a:	2b01      	cmp	r3, #1
 8017f6c:	d00a      	beq.n	8017f84 <_raise_r+0x4c>
 8017f6e:	1c59      	adds	r1, r3, #1
 8017f70:	d103      	bne.n	8017f7a <_raise_r+0x42>
 8017f72:	2316      	movs	r3, #22
 8017f74:	6003      	str	r3, [r0, #0]
 8017f76:	2001      	movs	r0, #1
 8017f78:	e7e7      	b.n	8017f4a <_raise_r+0x12>
 8017f7a:	2100      	movs	r1, #0
 8017f7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017f80:	4620      	mov	r0, r4
 8017f82:	4798      	blx	r3
 8017f84:	2000      	movs	r0, #0
 8017f86:	e7e0      	b.n	8017f4a <_raise_r+0x12>

08017f88 <raise>:
 8017f88:	4b02      	ldr	r3, [pc, #8]	@ (8017f94 <raise+0xc>)
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	6818      	ldr	r0, [r3, #0]
 8017f8e:	f7ff bfd3 	b.w	8017f38 <_raise_r>
 8017f92:	bf00      	nop
 8017f94:	20000034 	.word	0x20000034

08017f98 <_kill_r>:
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4d07      	ldr	r5, [pc, #28]	@ (8017fb8 <_kill_r+0x20>)
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	4608      	mov	r0, r1
 8017fa2:	4611      	mov	r1, r2
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	f7f3 fd2d 	bl	800ba04 <_kill>
 8017faa:	1c43      	adds	r3, r0, #1
 8017fac:	d102      	bne.n	8017fb4 <_kill_r+0x1c>
 8017fae:	682b      	ldr	r3, [r5, #0]
 8017fb0:	b103      	cbz	r3, 8017fb4 <_kill_r+0x1c>
 8017fb2:	6023      	str	r3, [r4, #0]
 8017fb4:	bd38      	pop	{r3, r4, r5, pc}
 8017fb6:	bf00      	nop
 8017fb8:	2000a8f4 	.word	0x2000a8f4

08017fbc <_getpid_r>:
 8017fbc:	f7f3 bd1a 	b.w	800b9f4 <_getpid>

08017fc0 <_malloc_usable_size_r>:
 8017fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fc4:	1f18      	subs	r0, r3, #4
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	bfbc      	itt	lt
 8017fca:	580b      	ldrlt	r3, [r1, r0]
 8017fcc:	18c0      	addlt	r0, r0, r3
 8017fce:	4770      	bx	lr

08017fd0 <_strtol_l.constprop.0>:
 8017fd0:	2b24      	cmp	r3, #36	@ 0x24
 8017fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd6:	4686      	mov	lr, r0
 8017fd8:	4690      	mov	r8, r2
 8017fda:	d801      	bhi.n	8017fe0 <_strtol_l.constprop.0+0x10>
 8017fdc:	2b01      	cmp	r3, #1
 8017fde:	d106      	bne.n	8017fee <_strtol_l.constprop.0+0x1e>
 8017fe0:	f7fd faa8 	bl	8015534 <__errno>
 8017fe4:	2316      	movs	r3, #22
 8017fe6:	6003      	str	r3, [r0, #0]
 8017fe8:	2000      	movs	r0, #0
 8017fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fee:	4834      	ldr	r0, [pc, #208]	@ (80180c0 <_strtol_l.constprop.0+0xf0>)
 8017ff0:	460d      	mov	r5, r1
 8017ff2:	462a      	mov	r2, r5
 8017ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ff8:	5d06      	ldrb	r6, [r0, r4]
 8017ffa:	f016 0608 	ands.w	r6, r6, #8
 8017ffe:	d1f8      	bne.n	8017ff2 <_strtol_l.constprop.0+0x22>
 8018000:	2c2d      	cmp	r4, #45	@ 0x2d
 8018002:	d12d      	bne.n	8018060 <_strtol_l.constprop.0+0x90>
 8018004:	782c      	ldrb	r4, [r5, #0]
 8018006:	2601      	movs	r6, #1
 8018008:	1c95      	adds	r5, r2, #2
 801800a:	f033 0210 	bics.w	r2, r3, #16
 801800e:	d109      	bne.n	8018024 <_strtol_l.constprop.0+0x54>
 8018010:	2c30      	cmp	r4, #48	@ 0x30
 8018012:	d12a      	bne.n	801806a <_strtol_l.constprop.0+0x9a>
 8018014:	782a      	ldrb	r2, [r5, #0]
 8018016:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801801a:	2a58      	cmp	r2, #88	@ 0x58
 801801c:	d125      	bne.n	801806a <_strtol_l.constprop.0+0x9a>
 801801e:	786c      	ldrb	r4, [r5, #1]
 8018020:	2310      	movs	r3, #16
 8018022:	3502      	adds	r5, #2
 8018024:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018028:	f10c 3cff 	add.w	ip, ip, #4294967295
 801802c:	2200      	movs	r2, #0
 801802e:	fbbc f9f3 	udiv	r9, ip, r3
 8018032:	4610      	mov	r0, r2
 8018034:	fb03 ca19 	mls	sl, r3, r9, ip
 8018038:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801803c:	2f09      	cmp	r7, #9
 801803e:	d81b      	bhi.n	8018078 <_strtol_l.constprop.0+0xa8>
 8018040:	463c      	mov	r4, r7
 8018042:	42a3      	cmp	r3, r4
 8018044:	dd27      	ble.n	8018096 <_strtol_l.constprop.0+0xc6>
 8018046:	1c57      	adds	r7, r2, #1
 8018048:	d007      	beq.n	801805a <_strtol_l.constprop.0+0x8a>
 801804a:	4581      	cmp	r9, r0
 801804c:	d320      	bcc.n	8018090 <_strtol_l.constprop.0+0xc0>
 801804e:	d101      	bne.n	8018054 <_strtol_l.constprop.0+0x84>
 8018050:	45a2      	cmp	sl, r4
 8018052:	db1d      	blt.n	8018090 <_strtol_l.constprop.0+0xc0>
 8018054:	fb00 4003 	mla	r0, r0, r3, r4
 8018058:	2201      	movs	r2, #1
 801805a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801805e:	e7eb      	b.n	8018038 <_strtol_l.constprop.0+0x68>
 8018060:	2c2b      	cmp	r4, #43	@ 0x2b
 8018062:	bf04      	itt	eq
 8018064:	782c      	ldrbeq	r4, [r5, #0]
 8018066:	1c95      	addeq	r5, r2, #2
 8018068:	e7cf      	b.n	801800a <_strtol_l.constprop.0+0x3a>
 801806a:	2b00      	cmp	r3, #0
 801806c:	d1da      	bne.n	8018024 <_strtol_l.constprop.0+0x54>
 801806e:	2c30      	cmp	r4, #48	@ 0x30
 8018070:	bf0c      	ite	eq
 8018072:	2308      	moveq	r3, #8
 8018074:	230a      	movne	r3, #10
 8018076:	e7d5      	b.n	8018024 <_strtol_l.constprop.0+0x54>
 8018078:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801807c:	2f19      	cmp	r7, #25
 801807e:	d801      	bhi.n	8018084 <_strtol_l.constprop.0+0xb4>
 8018080:	3c37      	subs	r4, #55	@ 0x37
 8018082:	e7de      	b.n	8018042 <_strtol_l.constprop.0+0x72>
 8018084:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018088:	2f19      	cmp	r7, #25
 801808a:	d804      	bhi.n	8018096 <_strtol_l.constprop.0+0xc6>
 801808c:	3c57      	subs	r4, #87	@ 0x57
 801808e:	e7d8      	b.n	8018042 <_strtol_l.constprop.0+0x72>
 8018090:	f04f 32ff 	mov.w	r2, #4294967295
 8018094:	e7e1      	b.n	801805a <_strtol_l.constprop.0+0x8a>
 8018096:	1c53      	adds	r3, r2, #1
 8018098:	d108      	bne.n	80180ac <_strtol_l.constprop.0+0xdc>
 801809a:	2322      	movs	r3, #34	@ 0x22
 801809c:	f8ce 3000 	str.w	r3, [lr]
 80180a0:	4660      	mov	r0, ip
 80180a2:	f1b8 0f00 	cmp.w	r8, #0
 80180a6:	d0a0      	beq.n	8017fea <_strtol_l.constprop.0+0x1a>
 80180a8:	1e69      	subs	r1, r5, #1
 80180aa:	e006      	b.n	80180ba <_strtol_l.constprop.0+0xea>
 80180ac:	b106      	cbz	r6, 80180b0 <_strtol_l.constprop.0+0xe0>
 80180ae:	4240      	negs	r0, r0
 80180b0:	f1b8 0f00 	cmp.w	r8, #0
 80180b4:	d099      	beq.n	8017fea <_strtol_l.constprop.0+0x1a>
 80180b6:	2a00      	cmp	r2, #0
 80180b8:	d1f6      	bne.n	80180a8 <_strtol_l.constprop.0+0xd8>
 80180ba:	f8c8 1000 	str.w	r1, [r8]
 80180be:	e794      	b.n	8017fea <_strtol_l.constprop.0+0x1a>
 80180c0:	0801a079 	.word	0x0801a079

080180c4 <_strtol_r>:
 80180c4:	f7ff bf84 	b.w	8017fd0 <_strtol_l.constprop.0>

080180c8 <__swhatbuf_r>:
 80180c8:	b570      	push	{r4, r5, r6, lr}
 80180ca:	460c      	mov	r4, r1
 80180cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d0:	2900      	cmp	r1, #0
 80180d2:	b096      	sub	sp, #88	@ 0x58
 80180d4:	4615      	mov	r5, r2
 80180d6:	461e      	mov	r6, r3
 80180d8:	da0d      	bge.n	80180f6 <__swhatbuf_r+0x2e>
 80180da:	89a3      	ldrh	r3, [r4, #12]
 80180dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80180e0:	f04f 0100 	mov.w	r1, #0
 80180e4:	bf14      	ite	ne
 80180e6:	2340      	movne	r3, #64	@ 0x40
 80180e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80180ec:	2000      	movs	r0, #0
 80180ee:	6031      	str	r1, [r6, #0]
 80180f0:	602b      	str	r3, [r5, #0]
 80180f2:	b016      	add	sp, #88	@ 0x58
 80180f4:	bd70      	pop	{r4, r5, r6, pc}
 80180f6:	466a      	mov	r2, sp
 80180f8:	f000 f848 	bl	801818c <_fstat_r>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	dbec      	blt.n	80180da <__swhatbuf_r+0x12>
 8018100:	9901      	ldr	r1, [sp, #4]
 8018102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801810a:	4259      	negs	r1, r3
 801810c:	4159      	adcs	r1, r3
 801810e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018112:	e7eb      	b.n	80180ec <__swhatbuf_r+0x24>

08018114 <__smakebuf_r>:
 8018114:	898b      	ldrh	r3, [r1, #12]
 8018116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018118:	079d      	lsls	r5, r3, #30
 801811a:	4606      	mov	r6, r0
 801811c:	460c      	mov	r4, r1
 801811e:	d507      	bpl.n	8018130 <__smakebuf_r+0x1c>
 8018120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018124:	6023      	str	r3, [r4, #0]
 8018126:	6123      	str	r3, [r4, #16]
 8018128:	2301      	movs	r3, #1
 801812a:	6163      	str	r3, [r4, #20]
 801812c:	b003      	add	sp, #12
 801812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018130:	ab01      	add	r3, sp, #4
 8018132:	466a      	mov	r2, sp
 8018134:	f7ff ffc8 	bl	80180c8 <__swhatbuf_r>
 8018138:	9f00      	ldr	r7, [sp, #0]
 801813a:	4605      	mov	r5, r0
 801813c:	4639      	mov	r1, r7
 801813e:	4630      	mov	r0, r6
 8018140:	f7fe f972 	bl	8016428 <_malloc_r>
 8018144:	b948      	cbnz	r0, 801815a <__smakebuf_r+0x46>
 8018146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801814a:	059a      	lsls	r2, r3, #22
 801814c:	d4ee      	bmi.n	801812c <__smakebuf_r+0x18>
 801814e:	f023 0303 	bic.w	r3, r3, #3
 8018152:	f043 0302 	orr.w	r3, r3, #2
 8018156:	81a3      	strh	r3, [r4, #12]
 8018158:	e7e2      	b.n	8018120 <__smakebuf_r+0xc>
 801815a:	89a3      	ldrh	r3, [r4, #12]
 801815c:	6020      	str	r0, [r4, #0]
 801815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	9b01      	ldr	r3, [sp, #4]
 8018166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801816a:	b15b      	cbz	r3, 8018184 <__smakebuf_r+0x70>
 801816c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018170:	4630      	mov	r0, r6
 8018172:	f000 f81d 	bl	80181b0 <_isatty_r>
 8018176:	b128      	cbz	r0, 8018184 <__smakebuf_r+0x70>
 8018178:	89a3      	ldrh	r3, [r4, #12]
 801817a:	f023 0303 	bic.w	r3, r3, #3
 801817e:	f043 0301 	orr.w	r3, r3, #1
 8018182:	81a3      	strh	r3, [r4, #12]
 8018184:	89a3      	ldrh	r3, [r4, #12]
 8018186:	431d      	orrs	r5, r3
 8018188:	81a5      	strh	r5, [r4, #12]
 801818a:	e7cf      	b.n	801812c <__smakebuf_r+0x18>

0801818c <_fstat_r>:
 801818c:	b538      	push	{r3, r4, r5, lr}
 801818e:	4d07      	ldr	r5, [pc, #28]	@ (80181ac <_fstat_r+0x20>)
 8018190:	2300      	movs	r3, #0
 8018192:	4604      	mov	r4, r0
 8018194:	4608      	mov	r0, r1
 8018196:	4611      	mov	r1, r2
 8018198:	602b      	str	r3, [r5, #0]
 801819a:	f7f3 fc93 	bl	800bac4 <_fstat>
 801819e:	1c43      	adds	r3, r0, #1
 80181a0:	d102      	bne.n	80181a8 <_fstat_r+0x1c>
 80181a2:	682b      	ldr	r3, [r5, #0]
 80181a4:	b103      	cbz	r3, 80181a8 <_fstat_r+0x1c>
 80181a6:	6023      	str	r3, [r4, #0]
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	2000a8f4 	.word	0x2000a8f4

080181b0 <_isatty_r>:
 80181b0:	b538      	push	{r3, r4, r5, lr}
 80181b2:	4d06      	ldr	r5, [pc, #24]	@ (80181cc <_isatty_r+0x1c>)
 80181b4:	2300      	movs	r3, #0
 80181b6:	4604      	mov	r4, r0
 80181b8:	4608      	mov	r0, r1
 80181ba:	602b      	str	r3, [r5, #0]
 80181bc:	f7f3 fc92 	bl	800bae4 <_isatty>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d102      	bne.n	80181ca <_isatty_r+0x1a>
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	b103      	cbz	r3, 80181ca <_isatty_r+0x1a>
 80181c8:	6023      	str	r3, [r4, #0]
 80181ca:	bd38      	pop	{r3, r4, r5, pc}
 80181cc:	2000a8f4 	.word	0x2000a8f4

080181d0 <_init>:
 80181d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d2:	bf00      	nop
 80181d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181d6:	bc08      	pop	{r3}
 80181d8:	469e      	mov	lr, r3
 80181da:	4770      	bx	lr

080181dc <_fini>:
 80181dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181de:	bf00      	nop
 80181e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181e2:	bc08      	pop	{r3}
 80181e4:	469e      	mov	lr, r3
 80181e6:	4770      	bx	lr

080181e8 <__FLASH_Program_Fast_veneer>:
 80181e8:	f85f f000 	ldr.w	pc, [pc]	@ 80181ec <__FLASH_Program_Fast_veneer+0x4>
 80181ec:	2000024d 	.word	0x2000024d

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	0000000b                                ....

20000010 <environ>:
20000010:	2000a6cc                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <__sglue>:
20000020:	00000000 00000003 2000a794              ........... 

2000002c <_tzname>:
2000002c:	08019e1f 08019e1f                       ........

20000034 <_impure_ptr>:
20000034:	20000038                                8.. 

20000038 <_impure_data>:
20000038:	00000000 2000a794 2000a7fc 2000a864     ....... ... d.. 
	...

20000088 <tzinfo>:
20000088:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000b8:	0000004a 00000000 00000000 00000000     J...............
	...

200000e0 <__global_locale>:
200000e0:	00000043 00000000 00000000 00000000     C...............
	...
20000100:	00000043 00000000 00000000 00000000     C...............
	...
20000120:	00000043 00000000 00000000 00000000     C...............
	...
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	08017455 080173d5 00000000 0801a078     Ut...s......x...
200001d0:	0801a192 08019ea5 08019ea5 08019ea5     ................
200001e0:	08019ea5 08019ea5 08019ea5 08019ea5     ................
200001f0:	08019ea5 08019ea5 ffffffff ffffffff     ................
20000200:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000228:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000024c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000024c:	b480      	push	{r7}
2000024e:	b089      	sub	sp, #36	@ 0x24
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
20000254:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000256:	2380      	movs	r3, #128	@ 0x80
20000258:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000025e:	683b      	ldr	r3, [r7, #0]
20000260:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000262:	4b18      	ldr	r3, [pc, #96]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000264:	695b      	ldr	r3, [r3, #20]
20000266:	4a17      	ldr	r2, [pc, #92]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000026c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026e:	f3ef 8310 	mrs	r3, PRIMASK
20000272:	60fb      	str	r3, [r7, #12]
  return(result);
20000274:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000278:	b672      	cpsid	i
}
2000027a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	681a      	ldr	r2, [r3, #0]
20000280:	69bb      	ldr	r3, [r7, #24]
20000282:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000284:	69bb      	ldr	r3, [r7, #24]
20000286:	3304      	adds	r3, #4
20000288:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	3304      	adds	r3, #4
2000028e:	617b      	str	r3, [r7, #20]
    row_index--;
20000290:	7ffb      	ldrb	r3, [r7, #31]
20000292:	3b01      	subs	r3, #1
20000294:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000296:	7ffb      	ldrb	r3, [r7, #31]
20000298:	2b00      	cmp	r3, #0
2000029a:	d1ef      	bne.n	2000027c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
2000029c:	bf00      	nop
2000029e:	4b09      	ldr	r3, [pc, #36]	@ (200002c4 <FLASH_Program_Fast+0x78>)
200002a0:	691b      	ldr	r3, [r3, #16]
200002a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002aa:	d0f8      	beq.n	2000029e <FLASH_Program_Fast+0x52>
200002ac:	693b      	ldr	r3, [r7, #16]
200002ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b0:	68bb      	ldr	r3, [r7, #8]
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002b8:	bf00      	nop
200002ba:	3724      	adds	r7, #36	@ 0x24
200002bc:	46bd      	mov	sp, r7
200002be:	f85d 7b04 	ldr.w	r7, [sp], #4
200002c2:	4770      	bx	lr
200002c4:	58004000 	.word	0x58004000
