
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018af0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000217c  08018c30  08018c30  00019c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801adac  0801adac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801adb4  0801adb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801adb8  0801adb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c0  20000008  0801adbc  0001c008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a6bc  200002c8  0801b07c  0001c2c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000a984  0801b07c  0001c984  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001c2c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030d6d  00000000  00000000  0001c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054c4  00000000  00000000  0004d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c20  00000000  00000000  00052530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000226d  00000000  00000000  00055150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000287d4  00000000  00000000  000573bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d89d  00000000  00000000  0007fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fa20a  00000000  00000000  000ad42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7638  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d6cc  00000000  00000000  001a767c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001b4d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	08018c0c 	.word	0x08018c0c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	08018c0c 	.word	0x08018c0c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9d3 	b.w	8001020 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b988 	b.w	8001020 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8001032:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d11a      	bne.n	800107a <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e f8e6 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4a2a      	ldr	r2, [pc, #168]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 800105c:	4926      	ldr	r1, [pc, #152]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800105e:	482a      	ldr	r0, [pc, #168]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 8001060:	f010 fc5c 	bl	801191c <HAL_SPI_TransmitReceive>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f00e f8d4 	bl	800f220 <HAL_GPIO_WritePin>
 8001078:	e037      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d11a      	bne.n	80010b6 <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 8001086:	8811      	ldrh	r1, [r2, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00e f8c8 	bl	800f220 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	2264      	movs	r2, #100	@ 0x64
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 8001098:	4917      	ldr	r1, [pc, #92]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800109a:	481b      	ldr	r0, [pc, #108]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 800109c:	f010 fc3e 	bl	801191c <HAL_SPI_TransmitReceive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00e f8b6 	bl	800f220 <HAL_GPIO_WritePin>
 80010b4:	e019      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010bc:	8811      	ldrh	r1, [r2, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00e f8ad 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2264      	movs	r2, #100	@ 0x64
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 80010ce:	490a      	ldr	r1, [pc, #40]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 80010d2:	f010 fc23 	bl	801191c <HAL_SPI_TransmitReceive>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010e0:	8811      	ldrh	r1, [r2, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00e f89b 	bl	800f220 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002e4 	.word	0x200002e4
 80010fc:	20000cb0 	.word	0x20000cb0
 8001100:	20000cae 	.word	0x20000cae
 8001104:	20000344 	.word	0x20000344
 8001108:	20000508 	.word	0x20000508
 800110c:	20000c90 	.word	0x20000c90
 8001110:	20000c8e 	.word	0x20000c8e
 8001114:	20000c70 	.word	0x20000c70
 8001118:	20000c6e 	.word	0x20000c6e

0800111c <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	603a      	str	r2, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	460b      	mov	r3, r1
 800112a:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3330      	adds	r3, #48	@ 0x30
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001144:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 800114c:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001150:	2200      	movs	r2, #0
 8001152:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d11a      	bne.n	8001190 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00e f85b 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001172:	4928      	ldr	r1, [pc, #160]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001174:	482b      	ldr	r0, [pc, #172]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 8001176:	f010 fbd1 	bl	801191c <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f00e f849 	bl	800f220 <HAL_GPIO_WritePin>
 800118e:	e037      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d11a      	bne.n	80011cc <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 800119c:	8811      	ldrh	r1, [r2, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e f83d 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a6:	89bb      	ldrh	r3, [r7, #12]
 80011a8:	2264      	movs	r2, #100	@ 0x64
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011ae:	4919      	ldr	r1, [pc, #100]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011b2:	f010 fbb3 	bl	801191c <HAL_SPI_TransmitReceive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 80011c0:	8811      	ldrh	r1, [r2, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e f82b 	bl	800f220 <HAL_GPIO_WritePin>
 80011ca:	e019      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00e f822 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011dc:	89bb      	ldrh	r3, [r7, #12]
 80011de:	2264      	movs	r2, #100	@ 0x64
 80011e0:	9200      	str	r2, [sp, #0]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011e4:	490b      	ldr	r1, [pc, #44]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011e8:	f010 fb98 	bl	801191c <HAL_SPI_TransmitReceive>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011f6:	8811      	ldrh	r1, [r2, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00e f810 	bl	800f220 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001202:	789a      	ldrb	r2, [r3, #2]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002e4 	.word	0x200002e4
 8001218:	20000cb0 	.word	0x20000cb0
 800121c:	20000cae 	.word	0x20000cae
 8001220:	20000344 	.word	0x20000344
 8001224:	20000508 	.word	0x20000508
 8001228:	20000c90 	.word	0x20000c90
 800122c:	20000c8e 	.word	0x20000c8e
 8001230:	20000c70 	.word	0x20000c70
 8001234:	20000c6e 	.word	0x20000c6e

08001238 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800124a:	2303      	movs	r3, #3
 800124c:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3320      	adds	r3, #32
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001262:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126a:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 800126c:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d11a      	bne.n	80012ae <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d ffcc 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001290:	4926      	ldr	r1, [pc, #152]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001292:	482a      	ldr	r0, [pc, #168]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001294:	f010 fb42 	bl	801191c <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00d ffba 	bl	800f220 <HAL_GPIO_WritePin>
 80012ac:	e037      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11a      	bne.n	80012ea <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012ba:	8811      	ldrh	r1, [r2, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00d ffae 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012c4:	89bb      	ldrh	r3, [r7, #12]
 80012c6:	2264      	movs	r2, #100	@ 0x64
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 80012cc:	4917      	ldr	r1, [pc, #92]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 80012d0:	f010 fb24 	bl	801191c <HAL_SPI_TransmitReceive>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012de:	8811      	ldrh	r1, [r2, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00d ff9c 	bl	800f220 <HAL_GPIO_WritePin>
 80012e8:	e019      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 80012f0:	8811      	ldrh	r1, [r2, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00d ff93 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001304:	480d      	ldr	r0, [pc, #52]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001306:	f010 fb09 	bl	801191c <HAL_SPI_TransmitReceive>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 8001314:	8811      	ldrh	r1, [r2, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f00d ff81 	bl	800f220 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002e4 	.word	0x200002e4
 8001330:	20000cb0 	.word	0x20000cb0
 8001334:	20000cae 	.word	0x20000cae
 8001338:	20000344 	.word	0x20000344
 800133c:	20000508 	.word	0x20000508
 8001340:	20000c90 	.word	0x20000c90
 8001344:	20000c8e 	.word	0x20000c8e
 8001348:	20000c70 	.word	0x20000c70
 800134c:	20000c6e 	.word	0x20000c6e

08001350 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	603a      	str	r2, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	460b      	mov	r3, r1
 800135e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001360:	2306      	movs	r3, #6
 8001362:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001378:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001380:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d11a      	bne.n	80013be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a3d      	ldr	r2, [pc, #244]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 800138e:	8811      	ldrh	r1, [r2, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00d ff44 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001398:	89bb      	ldrh	r3, [r7, #12]
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	4a3a      	ldr	r2, [pc, #232]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013a0:	4936      	ldr	r1, [pc, #216]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013a2:	483a      	ldr	r0, [pc, #232]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013a4:	f010 faba 	bl	801191c <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00d ff32 	bl	800f220 <HAL_GPIO_WritePin>
 80013bc:	e037      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d11a      	bne.n	80013fa <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ca:	8811      	ldrh	r1, [r2, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d ff26 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013dc:	4927      	ldr	r1, [pc, #156]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013de:	482b      	ldr	r0, [pc, #172]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013e0:	f010 fa9c 	bl	801191c <HAL_SPI_TransmitReceive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00d ff14 	bl	800f220 <HAL_GPIO_WritePin>
 80013f8:	e019      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a27      	ldr	r2, [pc, #156]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001400:	8811      	ldrh	r1, [r2, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00d ff0b 	bl	800f220 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	2264      	movs	r2, #100	@ 0x64
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 8001412:	491a      	ldr	r1, [pc, #104]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001414:	481d      	ldr	r0, [pc, #116]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 8001416:	f010 fa81 	bl	801191c <HAL_SPI_TransmitReceive>
 800141a:	4603      	mov	r3, r0
 800141c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001424:	8811      	ldrh	r1, [r2, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f00d fef9 	bl	800f220 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001438:	e01c      	b.n	8001474 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001440:	2302      	movs	r3, #2
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e011      	b.n	800146a <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b02      	subs	r3, #2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	441a      	add	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d9ea      	bls.n	8001446 <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 8001470:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002e4 	.word	0x200002e4
 8001480:	20000cb0 	.word	0x20000cb0
 8001484:	20000cae 	.word	0x20000cae
 8001488:	20000344 	.word	0x20000344
 800148c:	20000508 	.word	0x20000508
 8001490:	20000c90 	.word	0x20000c90
 8001494:	20000c8e 	.word	0x20000c8e
 8001498:	20000c70 	.word	0x20000c70
 800149c:	20000c6e 	.word	0x20000c6e

080014a0 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80014b0:	2306      	movs	r3, #6
 80014b2:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3320      	adds	r3, #32
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014c8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014d0:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e00b      	b.n	80014f0 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	40da      	lsrs	r2, r3
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3302      	adds	r3, #2
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014e8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9f0      	bls.n	80014d8 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d11a      	bne.n	8001532 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00d fe8a 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	2264      	movs	r2, #100	@ 0x64
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001514:	4926      	ldr	r1, [pc, #152]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001516:	482a      	ldr	r0, [pc, #168]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001518:	f010 fa00 	bl	801191c <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a24      	ldr	r2, [pc, #144]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f00d fe78 	bl	800f220 <HAL_GPIO_WritePin>
 8001530:	e037      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11a      	bne.n	800156e <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f00d fe6c 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	2264      	movs	r2, #100	@ 0x64
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001554:	f010 f9e2 	bl	801191c <HAL_SPI_TransmitReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 8001562:	8811      	ldrh	r1, [r2, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f00d fe5a 	bl	800f220 <HAL_GPIO_WritePin>
 800156c:	e019      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001574:	8811      	ldrh	r1, [r2, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00d fe51 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800157e:	89bb      	ldrh	r3, [r7, #12]
 8001580:	2264      	movs	r2, #100	@ 0x64
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001586:	490a      	ldr	r1, [pc, #40]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 800158a:	f010 f9c7 	bl	801191c <HAL_SPI_TransmitReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001598:	8811      	ldrh	r1, [r2, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f00d fe3f 	bl	800f220 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 80015a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	20000cb0 	.word	0x20000cb0
 80015b8:	20000cae 	.word	0x20000cae
 80015bc:	20000344 	.word	0x20000344
 80015c0:	20000508 	.word	0x20000508
 80015c4:	20000c90 	.word	0x20000c90
 80015c8:	20000c8e 	.word	0x20000c8e
 80015cc:	20000c70 	.word	0x20000c70
 80015d0:	20000c6e 	.word	0x20000c6e

080015d4 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	603a      	str	r2, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	460b      	mov	r3, r1
 80015e2:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3330      	adds	r3, #48	@ 0x30
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b40      	ldr	r3, [pc, #256]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001604:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d11a      	bne.n	8001642 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800160c:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3e      	ldr	r2, [pc, #248]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fe02 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	4a3b      	ldr	r2, [pc, #236]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001624:	4937      	ldr	r1, [pc, #220]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001626:	483b      	ldr	r0, [pc, #236]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001628:	f010 f978 	bl	801191c <HAL_SPI_TransmitReceive>
 800162c:	4603      	mov	r3, r0
 800162e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001630:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f00d fdf0 	bl	800f220 <HAL_GPIO_WritePin>
 8001640:	e037      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11a      	bne.n	800167e <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a33      	ldr	r2, [pc, #204]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 800164e:	8811      	ldrh	r1, [r2, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00d fde4 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	2264      	movs	r2, #100	@ 0x64
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001660:	4928      	ldr	r1, [pc, #160]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001662:	482c      	ldr	r0, [pc, #176]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001664:	f010 f95a 	bl	801191c <HAL_SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001672:	8811      	ldrh	r1, [r2, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f00d fdd2 	bl	800f220 <HAL_GPIO_WritePin>
 800167c:	e019      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001684:	8811      	ldrh	r1, [r2, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00d fdc9 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	2264      	movs	r2, #100	@ 0x64
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001696:	491b      	ldr	r1, [pc, #108]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001698:	481e      	ldr	r0, [pc, #120]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 800169a:	f010 f93f 	bl	801191c <HAL_SPI_TransmitReceive>
 800169e:	4603      	mov	r3, r0
 80016a0:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 80016a8:	8811      	ldrh	r1, [r2, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00d fdb7 	bl	800f220 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 80016b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016bc:	e01e      	b.n	80016fc <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016c4:	2302      	movs	r3, #2
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e013      	b.n	80016f2 <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3b02      	subs	r3, #2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d9e8      	bls.n	80016ca <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002e4 	.word	0x200002e4
 8001708:	20000cb0 	.word	0x20000cb0
 800170c:	20000cae 	.word	0x20000cae
 8001710:	20000344 	.word	0x20000344
 8001714:	20000508 	.word	0x20000508
 8001718:	20000c90 	.word	0x20000c90
 800171c:	20000c8e 	.word	0x20000c8e
 8001720:	20000c70 	.word	0x20000c70
 8001724:	20000c6e 	.word	0x20000c6e

08001728 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	460b      	mov	r3, r1
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3320      	adds	r3, #32
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001752:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800175a:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e00b      	b.n	800177a <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	411a      	asrs	r2, r3
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3302      	adds	r3, #2
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001772:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d9f0      	bls.n	8001762 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d11a      	bne.n	80017bc <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00d fd45 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a29      	ldr	r2, [pc, #164]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800179e:	4926      	ldr	r1, [pc, #152]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a0:	4829      	ldr	r0, [pc, #164]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017a2:	f010 f8bb 	bl	801191c <HAL_SPI_TransmitReceive>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00d fd33 	bl	800f220 <HAL_GPIO_WritePin>
 80017ba:	e037      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d11a      	bne.n	80017f8 <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017c8:	8811      	ldrh	r1, [r2, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00d fd27 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017da:	4917      	ldr	r1, [pc, #92]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017dc:	481a      	ldr	r0, [pc, #104]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017de:	f010 f89d 	bl	801191c <HAL_SPI_TransmitReceive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017ec:	8811      	ldrh	r1, [r2, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fd15 	bl	800f220 <HAL_GPIO_WritePin>
 80017f6:	e019      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017fe:	8811      	ldrh	r1, [r2, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00d fd0c 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	2264      	movs	r2, #100	@ 0x64
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 8001810:	4909      	ldr	r1, [pc, #36]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 8001814:	f010 f882 	bl	801191c <HAL_SPI_TransmitReceive>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 8001822:	8811      	ldrh	r1, [r2, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f00d fcfa 	bl	800f220 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 800182c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002e4 	.word	0x200002e4
 800183c:	20000cb0 	.word	0x20000cb0
 8001840:	20000cae 	.word	0x20000cae
 8001844:	20000344 	.word	0x20000344
 8001848:	20000508 	.word	0x20000508
 800184c:	20000c90 	.word	0x20000c90
 8001850:	20000c8e 	.word	0x20000c8e
 8001854:	20000c70 	.word	0x20000c70
 8001858:	20000c6e 	.word	0x20000c6e

0800185c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	461a      	mov	r2, r3
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	460b      	mov	r3, r1
 800186c:	81bb      	strh	r3, [r7, #12]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3302      	adds	r3, #2
 8001876:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	2b60      	cmp	r3, #96	@ 0x60
 800187c:	d902      	bls.n	8001884 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e086      	b.n	8001992 <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001898:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018a0:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018a2:	2302      	movs	r3, #2
 80018a4:	82fb      	strh	r3, [r7, #22]
 80018a6:	e006      	b.n	80018b6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	3301      	adds	r3, #1
 80018b4:	82fb      	strh	r3, [r7, #22]
 80018b6:	8afa      	ldrh	r2, [r7, #22]
 80018b8:	8a7b      	ldrh	r3, [r7, #18]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3f4      	bcc.n	80018a8 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d11a      	bne.n	80018fa <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80018c4:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a36      	ldr	r2, [pc, #216]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ca:	8811      	ldrh	r1, [r2, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00d fca6 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018de:	4833      	ldr	r0, [pc, #204]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e0:	f010 f81c 	bl	801191c <HAL_SPI_TransmitReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d fc94 	bl	800f220 <HAL_GPIO_WritePin>
 80018f8:	e037      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11a      	bne.n	8001936 <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001900:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00d fc88 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001910:	8a7b      	ldrh	r3, [r7, #18]
 8001912:	2264      	movs	r2, #100	@ 0x64
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001918:	4920      	ldr	r1, [pc, #128]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 800191a:	4824      	ldr	r0, [pc, #144]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 800191c:	f00f fffe 	bl	801191c <HAL_SPI_TransmitReceive>
 8001920:	4603      	mov	r3, r0
 8001922:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 800192a:	8811      	ldrh	r1, [r2, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f00d fc76 	bl	800f220 <HAL_GPIO_WritePin>
 8001934:	e019      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f00d fc6d 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	2264      	movs	r2, #100	@ 0x64
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800194e:	4913      	ldr	r1, [pc, #76]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001950:	4816      	ldr	r0, [pc, #88]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 8001952:	f00f ffe3 	bl	801191c <HAL_SPI_TransmitReceive>
 8001956:	4603      	mov	r3, r0
 8001958:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001960:	8811      	ldrh	r1, [r2, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f00d fc5b 	bl	800f220 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	82fb      	strh	r3, [r7, #22]
 800196e:	e00a      	b.n	8001986 <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	1c9a      	adds	r2, r3, #2
 8001974:	8afb      	ldrh	r3, [r7, #22]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	440b      	add	r3, r1
 800197a:	490b      	ldr	r1, [pc, #44]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800197c:	5c8a      	ldrb	r2, [r1, r2]
 800197e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001980:	8afb      	ldrh	r3, [r7, #22]
 8001982:	3301      	adds	r3, #1
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	8afa      	ldrh	r2, [r7, #22]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3f0      	bcc.n	8001970 <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 800198e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	20000cb0 	.word	0x20000cb0
 80019a4:	20000cae 	.word	0x20000cae
 80019a8:	20000344 	.word	0x20000344
 80019ac:	20000508 	.word	0x20000508
 80019b0:	20000c90 	.word	0x20000c90
 80019b4:	20000c8e 	.word	0x20000c8e
 80019b8:	20000c70 	.word	0x20000c70
 80019bc:	20000c6e 	.word	0x20000c6e

080019c0 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	460b      	mov	r3, r1
 80019d0:	81bb      	strh	r3, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	3302      	adds	r3, #2
 80019da:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019dc:	8a7b      	ldrh	r3, [r7, #18]
 80019de:	2b60      	cmp	r3, #96	@ 0x60
 80019e0:	d902      	bls.n	80019e8 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e078      	b.n	8001ada <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3320      	adds	r3, #32
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019fe:	89bb      	ldrh	r3, [r7, #12]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a04:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	82fb      	strh	r3, [r7, #22]
 8001a0a:	e00a      	b.n	8001a22 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	441a      	add	r2, r3
 8001a12:	8afb      	ldrh	r3, [r7, #22]
 8001a14:	3302      	adds	r3, #2
 8001a16:	7811      	ldrb	r1, [r2, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a1a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	82fb      	strh	r3, [r7, #22]
 8001a22:	8afa      	ldrh	r2, [r7, #22]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3f0      	bcc.n	8001a0c <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d11a      	bne.n	8001a66 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2d      	ldr	r2, [pc, #180]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a36:	8811      	ldrh	r1, [r2, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00d fbf0 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a48:	4926      	ldr	r1, [pc, #152]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a4a:	482a      	ldr	r0, [pc, #168]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a4c:	f00f ff66 	bl	801191c <HAL_SPI_TransmitReceive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a5a:	8811      	ldrh	r1, [r2, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00d fbde 	bl	800f220 <HAL_GPIO_WritePin>
 8001a64:	e037      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11a      	bne.n	8001aa2 <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a72:	8811      	ldrh	r1, [r2, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00d fbd2 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	2264      	movs	r2, #100	@ 0x64
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a84:	4917      	ldr	r1, [pc, #92]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a86:	481b      	ldr	r0, [pc, #108]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a88:	f00f ff48 	bl	801191c <HAL_SPI_TransmitReceive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a96:	8811      	ldrh	r1, [r2, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d fbc0 	bl	800f220 <HAL_GPIO_WritePin>
 8001aa0:	e019      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001aa8:	8811      	ldrh	r1, [r2, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00d fbb7 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001ab2:	8a7b      	ldrh	r3, [r7, #18]
 8001ab4:	2264      	movs	r2, #100	@ 0x64
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001abe:	f00f ff2d 	bl	801191c <HAL_SPI_TransmitReceive>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001acc:	8811      	ldrh	r1, [r2, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00d fba5 	bl	800f220 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001ad6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	20000cb0 	.word	0x20000cb0
 8001aec:	20000cae 	.word	0x20000cae
 8001af0:	20000344 	.word	0x20000344
 8001af4:	20000508 	.word	0x20000508
 8001af8:	20000c90 	.word	0x20000c90
 8001afc:	20000c8e 	.word	0x20000c8e
 8001b00:	20000c70 	.word	0x20000c70
 8001b04:	20000c6e 	.word	0x20000c6e

08001b08 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	460b      	mov	r3, r1
 8001b18:	81bb      	strh	r3, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3302      	adds	r3, #2
 8001b26:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	2b60      	cmp	r3, #96	@ 0x60
 8001b2c:	d902      	bls.n	8001b34 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e0a2      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3330      	adds	r3, #48	@ 0x30
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b48:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b4a:	89bb      	ldrh	r3, [r7, #12]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b50:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b52:	2302      	movs	r3, #2
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	e006      	b.n	8001b66 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b60:	8bfb      	ldrh	r3, [r7, #30]
 8001b62:	3301      	adds	r3, #1
 8001b64:	83fb      	strh	r3, [r7, #30]
 8001b66:	8bfa      	ldrh	r2, [r7, #30]
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3f4      	bcc.n	8001b58 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d11a      	bne.n	8001baa <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b7a:	8811      	ldrh	r1, [r2, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00d fb4e 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2264      	movs	r2, #100	@ 0x64
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	4a41      	ldr	r2, [pc, #260]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b8c:	493d      	ldr	r1, [pc, #244]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b8e:	4841      	ldr	r0, [pc, #260]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b90:	f00f fec4 	bl	801191c <HAL_SPI_TransmitReceive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b9e:	8811      	ldrh	r1, [r2, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00d fb3c 	bl	800f220 <HAL_GPIO_WritePin>
 8001ba8:	e037      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11a      	bne.n	8001be6 <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bb6:	8811      	ldrh	r1, [r2, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00d fb30 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bc0:	8afb      	ldrh	r3, [r7, #22]
 8001bc2:	2264      	movs	r2, #100	@ 0x64
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bc8:	492e      	ldr	r1, [pc, #184]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bca:	4832      	ldr	r0, [pc, #200]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bcc:	f00f fea6 	bl	801191c <HAL_SPI_TransmitReceive>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001bd4:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bda:	8811      	ldrh	r1, [r2, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00d fb1e 	bl	800f220 <HAL_GPIO_WritePin>
 8001be4:	e019      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bec:	8811      	ldrh	r1, [r2, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00d fb15 	bl	800f220 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bf6:	8afb      	ldrh	r3, [r7, #22]
 8001bf8:	2264      	movs	r2, #100	@ 0x64
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bfe:	4921      	ldr	r1, [pc, #132]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001c00:	4824      	ldr	r0, [pc, #144]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001c02:	f00f fe8b 	bl	801191c <HAL_SPI_TransmitReceive>
 8001c06:	4603      	mov	r3, r0
 8001c08:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001c0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001c10:	8811      	ldrh	r1, [r2, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00d fb03 	bl	800f220 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001c1a:	7e7b      	ldrb	r3, [r7, #25]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001c20:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001c24:	e029      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83fb      	strh	r3, [r7, #30]
 8001c2e:	e01e      	b.n	8001c6e <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	83bb      	strh	r3, [r7, #28]
 8001c38:	e00d      	b.n	8001c56 <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001c3a:	8b7a      	ldrh	r2, [r7, #26]
 8001c3c:	8bbb      	ldrh	r3, [r7, #28]
 8001c3e:	4914      	ldr	r1, [pc, #80]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c40:	5c8a      	ldrb	r2, [r1, r2]
 8001c42:	3320      	adds	r3, #32
 8001c44:	443b      	add	r3, r7
 8001c46:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c4a:	8bbb      	ldrh	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	83bb      	strh	r3, [r7, #28]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	3301      	adds	r3, #1
 8001c54:	837b      	strh	r3, [r7, #26]
 8001c56:	8bbb      	ldrh	r3, [r7, #28]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d9ee      	bls.n	8001c3a <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c5c:	8bfb      	ldrh	r3, [r7, #30]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c68:	8bfb      	ldrh	r3, [r7, #30]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	83fb      	strh	r3, [r7, #30]
 8001c6e:	8bfa      	ldrh	r2, [r7, #30]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3dc      	bcc.n	8001c30 <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c76:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002e4 	.word	0x200002e4
 8001c88:	20000cb0 	.word	0x20000cb0
 8001c8c:	20000cae 	.word	0x20000cae
 8001c90:	20000344 	.word	0x20000344
 8001c94:	20000508 	.word	0x20000508
 8001c98:	20000c90 	.word	0x20000c90
 8001c9c:	20000c8e 	.word	0x20000c8e
 8001ca0:	20000c70 	.word	0x20000c70
 8001ca4:	20000c6e 	.word	0x20000c6e

08001ca8 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001cb8:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <DRV_CANFDSPI_Configure+0x118>)
 8001cba:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	7a3b      	ldrb	r3, [r7, #8]
 8001cc8:	f362 0304 	bfi	r3, r2, #0, #5
 8001ccc:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	f362 1345 	bfi	r3, r2, #5, #1
 8001cde:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	7a3b      	ldrb	r3, [r7, #8]
 8001cec:	f362 1386 	bfi	r3, r2, #6, #1
 8001cf0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	7a7b      	ldrb	r3, [r7, #9]
 8001cfe:	f362 0300 	bfi	r3, r2, #0, #1
 8001d02:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	7a7b      	ldrb	r3, [r7, #9]
 8001d10:	f362 0342 	bfi	r3, r2, #1, #2
 8001d14:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	7a7b      	ldrb	r3, [r7, #9]
 8001d22:	f362 1304 	bfi	r3, r2, #4, #1
 8001d26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	7abb      	ldrb	r3, [r7, #10]
 8001d34:	f362 0300 	bfi	r3, r2, #0, #1
 8001d38:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	7abb      	ldrb	r3, [r7, #10]
 8001d46:	f362 0341 	bfi	r3, r2, #1, #1
 8001d4a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	7abb      	ldrb	r3, [r7, #10]
 8001d58:	f362 0382 	bfi	r3, r2, #2, #1
 8001d5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	7abb      	ldrb	r3, [r7, #10]
 8001d7c:	f362 1304 	bfi	r3, r2, #4, #1
 8001d80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f362 1307 	bfi	r3, r2, #4, #4
 8001d92:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb80 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e001      	b.n	8001db6 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	04980760 	.word	0x04980760

08001dc4 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001dce:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f361 0304 	bfi	r3, r1, #0, #5
 8001de0:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001de2:	7b3b      	ldrb	r3, [r7, #12]
 8001de4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	7813      	ldrb	r3, [r2, #0]
 8001dee:	f361 1345 	bfi	r3, r1, #5, #1
 8001df2:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	7813      	ldrb	r3, [r2, #0]
 8001e00:	f361 1386 	bfi	r3, r1, #6, #1
 8001e04:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001e06:	7b7b      	ldrb	r3, [r7, #13]
 8001e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e16:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	7853      	ldrb	r3, [r2, #1]
 8001e24:	f361 0301 	bfi	r3, r1, #0, #2
 8001e28:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	7853      	ldrb	r3, [r2, #1]
 8001e36:	f361 0382 	bfi	r3, r1, #2, #1
 8001e3a:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e42:	b2d9      	uxtb	r1, r3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7853      	ldrb	r3, [r2, #1]
 8001e48:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e4c:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	7853      	ldrb	r3, [r2, #1]
 8001e5a:	f361 1304 	bfi	r3, r1, #4, #1
 8001e5e:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	7853      	ldrb	r3, [r2, #1]
 8001e6c:	f361 1345 	bfi	r3, r1, #5, #1
 8001e70:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	7853      	ldrb	r3, [r2, #1]
 8001e7e:	f361 1386 	bfi	r3, r1, #6, #1
 8001e82:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e8a:	b2d9      	uxtb	r1, r3
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	7853      	ldrb	r3, [r2, #1]
 8001e90:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e94:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7893      	ldrb	r3, [r2, #2]
 8001ea2:	f361 0303 	bfi	r3, r1, #0, #4
 8001ea6:	7093      	strb	r3, [r2, #2]

    return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	04980760 	.word	0x04980760

08001ebc <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001ed4:	f107 020e 	add.w	r2, r7, #14
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f91d 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e01a      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001f08:	7bba      	ldrb	r2, [r7, #14]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f992 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	e001      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	603a      	str	r2, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	460b      	mov	r3, r1
 8001f42:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f4e:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f50:	7a3b      	ldrb	r3, [r7, #8]
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f362 0304 	bfi	r3, r2, #0, #5
 8001f68:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	f362 1347 	bfi	r3, r2, #5, #3
 8001f7a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7abb      	ldrb	r3, [r7, #10]
 8001f88:	f362 1346 	bfi	r3, r2, #5, #2
 8001f8c:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	f362 0304 	bfi	r3, r2, #0, #5
 8001f9e:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	7a3b      	ldrb	r3, [r7, #8]
 8001fac:	f362 1386 	bfi	r3, r2, #6, #1
 8001fb0:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3350      	adds	r3, #80	@ 0x50
 8001fc2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	89b9      	ldrh	r1, [r7, #12]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fa68 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	00600400 	.word	0x00600400

08001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fee:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001ff0:	7b3b      	ldrb	r3, [r7, #12]
 8001ff2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	f361 0300 	bfi	r3, r1, #0, #1
 8002000:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7813      	ldrb	r3, [r2, #0]
 800200e:	f361 0345 	bfi	r3, r1, #1, #5
 8002012:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800201a:	b2d9      	uxtb	r1, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	7813      	ldrb	r3, [r2, #0]
 8002020:	f361 1387 	bfi	r3, r1, #6, #2
 8002024:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	7853      	ldrb	r3, [r2, #1]
 8002032:	f361 0304 	bfi	r3, r1, #0, #5
 8002036:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800203e:	b2d9      	uxtb	r1, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	7853      	ldrb	r3, [r2, #1]
 8002044:	f361 1347 	bfi	r3, r1, #5, #3
 8002048:	7053      	strb	r3, [r2, #1]

    return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	00600400 	.word	0x00600400

0800205c <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0a0      	sub	sp, #128	@ 0x80
 8002060:	af00      	add	r7, sp, #0
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	460b      	mov	r3, r1
 800206c:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	0052      	lsls	r2, r2, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	b29b      	uxth	r3, r3
 8002082:	3350      	adds	r3, #80	@ 0x50
 8002084:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002088:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800208c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8002090:	7bf8      	ldrb	r0, [r7, #15]
 8002092:	2303      	movs	r3, #3
 8002094:	f7ff fd38 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 800209e:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e0c5      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 80020b0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80020b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 80020be:	f06f 0301 	mvn.w	r3, #1
 80020c2:	e0b9      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fc3a 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 80020d4:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 80020d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80020d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020dc:	429a      	cmp	r2, r3
 80020de:	d202      	bcs.n	80020e6 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020e0:	f06f 0302 	mvn.w	r3, #2
 80020e4:	e0a8      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 80020fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002104:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	78db      	ldrb	r3, [r3, #3]
 800211e:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	795b      	ldrb	r3, [r3, #5]
 800212a:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	799b      	ldrb	r3, [r3, #6]
 8002130:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	79db      	ldrb	r3, [r3, #7]
 8002136:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800213e:	e010      	b.n	8002162 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002140:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	441a      	add	r2, r3
 8002148:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800214c:	3308      	adds	r3, #8
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	3380      	adds	r3, #128	@ 0x80
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002158:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800215c:	3301      	adds	r3, #1
 800215e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002162:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002166:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800216a:	429a      	cmp	r2, r3
 800216c:	d8e8      	bhi.n	8002140 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 800217a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d02b      	beq.n	80021de <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800218a:	b29b      	uxth	r3, r3
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	b29b      	uxth	r3, r3
 8002192:	f1c3 0304 	rsb	r3, r3, #4
 8002196:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3308      	adds	r3, #8
 80021a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021ac:	e010      	b.n	80021d0 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 80021ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ba:	4413      	add	r3, r2
 80021bc:	3380      	adds	r3, #128	@ 0x80
 80021be:	443b      	add	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 80021c6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ca:	3301      	adds	r3, #1
 80021cc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021d0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d8e7      	bhi.n	80021ae <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3308      	adds	r3, #8
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 80021f8:	7bf8      	ldrb	r0, [r7, #15]
 80021fa:	f7ff fbe1 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002204:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 800220c:	f06f 0303 	mvn.w	r3, #3
 8002210:	e012      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8002212:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8002216:	7bb9      	ldrb	r1, [r7, #14]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f83a 	bl	8002294 <DRV_CANFDSPI_TransmitChannelUpdate>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002226:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800222e:	f06f 0304 	mvn.w	r3, #4
 8002232:	e001      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8002234:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 8002238:	4618      	mov	r0, r3
 800223a:	3780      	adds	r7, #128	@ 0x80
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	0052      	lsls	r2, r2, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	b29b      	uxth	r3, r3
 800226a:	3350      	adds	r3, #80	@ 0x50
 800226c:	81bb      	strh	r3, [r7, #12]
    a += 1;
 800226e:	89bb      	ldrh	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002274:	2302      	movs	r3, #2
 8002276:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	89b9      	ldrh	r1, [r7, #12]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ffda 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002284:	4603      	mov	r3, r0
 8002286:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8002288:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	460b      	mov	r3, r1
 80022a0:	71bb      	strb	r3, [r7, #6]
 80022a2:	4613      	mov	r3, r2
 80022a4:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3351      	adds	r3, #81	@ 0x51
 80022ba:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80022c0:	7a7b      	ldrb	r3, [r7, #9]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80022c8:	797b      	ldrb	r3, [r7, #5]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80022ce:	7a7b      	ldrb	r3, [r7, #9]
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80022d6:	7a7a      	ldrb	r2, [r7, #9]
 80022d8:	89b9      	ldrh	r1, [r7, #12]
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ffab 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e001      	b.n	80022f8 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	603a      	str	r2, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	460b      	mov	r3, r1
 800230e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	333e      	adds	r3, #62	@ 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	89b9      	ldrh	r1, [r7, #12]
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f8b6 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	603a      	str	r2, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	460b      	mov	r3, r1
 8002352:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	b29b      	uxth	r3, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	b29b      	uxth	r3, r3
 800236a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800236e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	89b9      	ldrh	r1, [r7, #12]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f892 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	4603      	mov	r3, r0
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	460b      	mov	r3, r1
 80023a4:	717b      	strb	r3, [r7, #5]
 80023a6:	4613      	mov	r3, r2
 80023a8:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80023b4:	7a3b      	ldrb	r3, [r7, #8]
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	723b      	strb	r3, [r7, #8]
 80023bc:	e003      	b.n	80023c6 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80023be:	7a3b      	ldrb	r3, [r7, #8]
 80023c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c4:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80023c6:	797b      	ldrb	r3, [r7, #5]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	f362 0304 	bfi	r3, r2, #0, #5
 80023d4:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80023de:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023e0:	7a3a      	ldrb	r2, [r7, #8]
 80023e2:	89b9      	ldrh	r1, [r7, #12]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ff26 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	603a      	str	r2, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	460b      	mov	r3, r1
 800240a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800241a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800241e:	e033      	b.n	8002488 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002422:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002424:	7a3b      	ldrb	r3, [r7, #8]
 8002426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002434:	b2da      	uxtb	r2, r3
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f362 0304 	bfi	r3, r2, #0, #5
 800243c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002446:	b2da      	uxtb	r2, r3
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f362 1347 	bfi	r3, r2, #5, #3
 800244e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	7a3b      	ldrb	r3, [r7, #8]
 800245c:	f362 1345 	bfi	r3, r2, #5, #1
 8002460:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	0052      	lsls	r2, r2, #1
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	b29b      	uxth	r3, r3
 8002470:	3350      	adds	r3, #80	@ 0x50
 8002472:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	89b9      	ldrh	r1, [r7, #12]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f810 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00600400 	.word	0x00600400

08002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 800249e:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	7813      	ldrb	r3, [r2, #0]
 80024ac:	f361 0345 	bfi	r3, r1, #1, #5
 80024b0:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	8813      	ldrh	r3, [r2, #0]
 80024be:	f361 1388 	bfi	r3, r1, #6, #3
 80024c2:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024ca:	b2d9      	uxtb	r1, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	7813      	ldrb	r3, [r2, #0]
 80024d0:	f361 0300 	bfi	r3, r1, #0, #1
 80024d4:	7013      	strb	r3, [r2, #0]

    return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	00600400 	.word	0x00600400

080024e8 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0a0      	sub	sp, #128	@ 0x80
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	460b      	mov	r3, r1
 80024f8:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	0052      	lsls	r2, r2, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	b29b      	uxth	r3, r3
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002520:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002524:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 8002528:	7bf8      	ldrb	r0, [r7, #15]
 800252a:	2303      	movs	r3, #3
 800252c:	f7ff faec 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002536:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e0cd      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002546:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8002548:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800254c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8002556:	f06f 0301 	mvn.w	r3, #1
 800255a:	e0c1      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 800255c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255e:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002562:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002564:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	b29b      	uxth	r3, r3
 800256e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 8002572:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800257a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 800257e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002582:	3308      	adds	r3, #8
 8002584:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002588:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 8002596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800259a:	3304      	adds	r3, #4
 800259c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80025a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80025ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3304      	adds	r3, #4
 80025ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80025be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025c2:	2b4c      	cmp	r3, #76	@ 0x4c
 80025c4:	d902      	bls.n	80025cc <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80025c6:	234c      	movs	r3, #76	@ 0x4c
 80025c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80025cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f107 0214 	add.w	r2, r7, #20
 80025d6:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80025da:	7bf8      	ldrb	r0, [r7, #15]
 80025dc:	f7ff f93e 	bl	800185c <DRV_CANFDSPI_ReadByteArray>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80025e6:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025ee:	f06f 0302 	mvn.w	r3, #2
 80025f2:	e075      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025f4:	7d3b      	ldrb	r3, [r7, #20]
 80025f6:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800260a:	7e3b      	ldrb	r3, [r7, #24]
 800260c:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 800260e:	7e7b      	ldrb	r3, [r7, #25]
 8002610:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002612:	7ebb      	ldrb	r3, [r7, #26]
 8002614:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8002616:	7efb      	ldrb	r3, [r7, #27]
 8002618:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002620:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d027      	beq.n	800267e <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 800262e:	7f3b      	ldrb	r3, [r7, #28]
 8002630:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002632:	7f7b      	ldrb	r3, [r7, #29]
 8002634:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8002636:	7fbb      	ldrb	r3, [r7, #30]
 8002638:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800264a:	e011      	b.n	8002670 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 800264c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002650:	f103 020c 	add.w	r2, r3, #12
 8002654:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	440b      	add	r3, r1
 800265c:	3280      	adds	r2, #128	@ 0x80
 800265e:	443a      	add	r2, r7
 8002660:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002664:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002666:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800266a:	3301      	adds	r3, #1
 800266c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002670:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002674:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002678:	429a      	cmp	r2, r3
 800267a:	d3e7      	bcc.n	800264c <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 800267c:	e01e      	b.n	80026bc <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800268a:	e011      	b.n	80026b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 800268c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002690:	f103 0208 	add.w	r2, r3, #8
 8002694:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	440b      	add	r3, r1
 800269c:	3280      	adds	r2, #128	@ 0x80
 800269e:	443a      	add	r2, r7
 80026a0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80026a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80026a6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80026b0:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80026b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3e7      	bcc.n	800268c <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80026bc:	7bba      	ldrb	r2, [r7, #14]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f810 	bl	80026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80026ce:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80026d6:	f06f 0303 	mvn.w	r3, #3
 80026da:	e001      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026dc:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3780      	adds	r7, #128	@ 0x80
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	b29b      	uxth	r3, r3
 8002712:	3351      	adds	r3, #81	@ 0x51
 8002714:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 8002716:	7a7b      	ldrb	r3, [r7, #9]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800271e:	7a7a      	ldrb	r2, [r7, #9]
 8002720:	89f9      	ldrh	r1, [r7, #14]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fd87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800272a:	4603      	mov	r3, r0
 800272c:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800272e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	460a      	mov	r2, r1
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	4613      	mov	r3, r2
 8002748:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002752:	231e      	movs	r3, #30
 8002754:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800275a:	f107 0208 	add.w	r2, r7, #8
 800275e:	89b9      	ldrh	r1, [r7, #12]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ff36 	bl	80015d4 <DRV_CANFDSPI_ReadHalfWord>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	e01b      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b21a      	sxth	r2, r3
 800277e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002782:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	89b9      	ldrh	r1, [r7, #12]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ffc6 	bl	8001728 <DRV_CANFDSPI_WriteHalfWord>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80027a8:	f06f 0301 	mvn.w	r3, #1
 80027ac:	e001      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	603a      	str	r2, [r7, #0]
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	460b      	mov	r3, r1
 80027c8:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3354      	adds	r3, #84	@ 0x54
 80027e6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027e8:	f107 0208 	add.w	r2, r7, #8
 80027ec:	89b9      	ldrh	r1, [r7, #12]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc93 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e007      	b.n	8002818 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002808:	7a3b      	ldrb	r3, [r7, #8]
 800280a:	f003 0317 	and.w	r3, r3, #23
 800280e:	b2da      	uxtb	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	603a      	str	r2, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	460b      	mov	r3, r1
 800282e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800283e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002842:	e022      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	b29b      	uxth	r3, r3
 8002856:	3354      	adds	r3, #84	@ 0x54
 8002858:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800285a:	f107 0208 	add.w	r2, r7, #8
 800285e:	89b9      	ldrh	r1, [r7, #12]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc5a 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e007      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800287a:	7a3b      	ldrb	r3, [r7, #8]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	460b      	mov	r3, r1
 800289e:	71bb      	strb	r3, [r7, #6]
 80028a0:	4613      	mov	r3, r2
 80028a2:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80028b2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80028b6:	e036      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	0052      	lsls	r2, r2, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3350      	adds	r3, #80	@ 0x50
 80028c8:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80028ce:	f107 0208 	add.w	r2, r7, #8
 80028d2:	89b9      	ldrh	r1, [r7, #12]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc20 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	e01b      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028ee:	7a3b      	ldrb	r3, [r7, #8]
 80028f0:	b25a      	sxtb	r2, r3
 80028f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002904:	7a3a      	ldrb	r2, [r7, #8]
 8002906:	89b9      	ldrh	r1, [r7, #12]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fc94 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 800291c:	f06f 0301 	mvn.w	r3, #1
 8002920:	e001      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002946:	2334      	movs	r3, #52	@ 0x34
 8002948:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800294e:	f107 0210 	add.w	r2, r7, #16
 8002952:	8ab9      	ldrh	r1, [r7, #20]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fcfa 	bl	8001350 <DRV_CANFDSPI_ReadWord>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	e00d      	b.n	800298a <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800296e:	7c7a      	ldrb	r2, [r7, #17]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002974:	7c3a      	ldrb	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800297a:	7cbb      	ldrb	r3, [r7, #18]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	b2da      	uxtb	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80029a4:	f107 020e 	add.w	r2, r7, #14
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fbb4 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	e015      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80029d0:	7bba      	ldrb	r2, [r7, #14]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fc2d 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029ea:	f06f 0301 	mvn.w	r3, #1
 80029ee:	e000      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b090      	sub	sp, #64	@ 0x40
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	460a      	mov	r2, r1
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a14:	e008      	b.n	8002a28 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002a16:	f107 0208 	add.w	r2, r7, #8
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	79ba      	ldrb	r2, [r7, #6]
 8002a20:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a24:	3301      	adds	r3, #1
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a2c:	d9f3      	bls.n	8002a16 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a32:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a38:	e016      	b.n	8002a68 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002a3a:	f107 0208 	add.w	r2, r7, #8
 8002a3e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a40:	79f8      	ldrb	r0, [r7, #7]
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	f7fe ffbc 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 8002a4e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e00a      	b.n	8002a72 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a5e:	3330      	adds	r3, #48	@ 0x30
 8002a60:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a64:	3301      	adds	r3, #1
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	2b29      	cmp	r3, #41	@ 0x29
 8002a6c:	d9e5      	bls.n	8002a3a <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a6e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3740      	adds	r7, #64	@ 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4604      	mov	r4, r0
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71bb      	strb	r3, [r7, #6]
 8002a90:	460b      	mov	r3, r1
 8002a92:	717b      	strb	r3, [r7, #5]
 8002a94:	4613      	mov	r3, r2
 8002a96:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a9c:	793b      	ldrb	r3, [r7, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d036      	beq.n	8002b10 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	dc4c      	bgt.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d018      	beq.n	8002ae0 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002aae:	e047      	b.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f84c 	bl	8002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002acc:	e03d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002ace:	797a      	ldrb	r2, [r7, #5]
 8002ad0:	79b9      	ldrb	r1, [r7, #6]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f8c3 	bl	8002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]
            break;
 8002ade:	e032      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 faf2 	bl	80030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	e025      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002afe:	797a      	ldrb	r2, [r7, #5]
 8002b00:	79b9      	ldrb	r1, [r7, #6]
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb6f 	bl	80031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b0e:	e01a      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002b10:	79ba      	ldrb	r2, [r7, #6]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd10 	bl	800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	e00d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002b2e:	797a      	ldrb	r2, [r7, #5]
 8002b30:	79b9      	ldrb	r1, [r7, #6]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fd8d 	bl	8003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b3e:	e002      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b40:	23ff      	movs	r3, #255	@ 0xff
 8002b42:	73fb      	strb	r3, [r7, #15]
            break;
 8002b44:	bf00      	nop
    }

    return spiTransferError;
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
	...

08002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b68:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b6a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d862      	bhi.n	8002c38 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bc1 	.word	0x08002bc1
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bc1 	.word	0x08002bc1
 8002b94:	08002bc1 	.word	0x08002bc1
 8002b98:	08002bdf 	.word	0x08002bdf
 8002b9c:	08002bdf 	.word	0x08002bdf
 8002ba0:	08002bdf 	.word	0x08002bdf
 8002ba4:	08002bdf 	.word	0x08002bdf
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002bdf 	.word	0x08002bdf
 8002bb0:	08002bdf 	.word	0x08002bdf
 8002bb4:	08002bfd 	.word	0x08002bfd
 8002bb8:	08002bfd 	.word	0x08002bfd
 8002bbc:	08002c1b 	.word	0x08002c1b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002bc4:	233e      	movs	r3, #62	@ 0x3e
 8002bc6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	220f      	movs	r2, #15
 8002bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002bd2:	7a3b      	ldrb	r3, [r7, #8]
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e02f      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002be2:	237e      	movs	r3, #126	@ 0x7e
 8002be4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002be6:	7a7b      	ldrb	r3, [r7, #9]
 8002be8:	221f      	movs	r2, #31
 8002bea:	f362 0306 	bfi	r3, r2, #0, #7
 8002bee:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf8:	723b      	strb	r3, [r7, #8]
            break;
 8002bfa:	e020      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002c00:	231e      	movs	r3, #30
 8002c02:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	2207      	movs	r2, #7
 8002c08:	f362 0306 	bfi	r3, r2, #0, #7
 8002c0c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002c0e:	7a3b      	ldrb	r3, [r7, #8]
 8002c10:	2207      	movs	r2, #7
 8002c12:	f362 0306 	bfi	r3, r2, #0, #7
 8002c16:	723b      	strb	r3, [r7, #8]
            break;
 8002c18:	e011      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002c1e:	23fe      	movs	r3, #254	@ 0xfe
 8002c20:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002c22:	7a7b      	ldrb	r3, [r7, #9]
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	f362 0306 	bfi	r3, r2, #0, #7
 8002c2a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002c2c:	7a3b      	ldrb	r3, [r7, #8]
 8002c2e:	223f      	movs	r2, #63	@ 0x3f
 8002c30:	f362 0306 	bfi	r3, r2, #0, #7
 8002c34:	723b      	strb	r3, [r7, #8]
            break;
 8002c36:	e002      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	e009      	b.n	8002c52 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2104      	movs	r1, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fc2b 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	003e0f0f 	.word	0x003e0f0f

08002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c76:	4be2      	ldr	r3, [pc, #904]	@ (8003000 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c78:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f362 0301 	bfi	r3, r2, #0, #2
 8002c86:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c8c:	79bb      	ldrb	r3, [r7, #6]
 8002c8e:	2b11      	cmp	r3, #17
 8002c90:	f200 81f6 	bhi.w	8003080 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002ce5 	.word	0x08002ce5
 8002ca0:	08002d23 	.word	0x08002d23
 8002ca4:	08002d61 	.word	0x08002d61
 8002ca8:	08002d9f 	.word	0x08002d9f
 8002cac:	08002ddd 	.word	0x08002ddd
 8002cb0:	08002e1b 	.word	0x08002e1b
 8002cb4:	08002e55 	.word	0x08002e55
 8002cb8:	08002e89 	.word	0x08002e89
 8002cbc:	08002ebb 	.word	0x08002ebb
 8002cc0:	08002f01 	.word	0x08002f01
 8002cc4:	08002f47 	.word	0x08002f47
 8002cc8:	08002f85 	.word	0x08002f85
 8002ccc:	08002fc3 	.word	0x08002fc3
 8002cd0:	08003005 	.word	0x08003005
 8002cd4:	08003043 	.word	0x08003043
 8002cd8:	08002d9f 	.word	0x08002d9f
 8002cdc:	08002e55 	.word	0x08002e55
 8002ce0:	08002ebb 	.word	0x08002ebb
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	221e      	movs	r2, #30
 8002cec:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cf2:	7b7b      	ldrb	r3, [r7, #13]
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cfc:	7b3b      	ldrb	r3, [r7, #12]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	f362 0303 	bfi	r3, r2, #0, #4
 8002d04:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002d06:	7a7b      	ldrb	r3, [r7, #9]
 8002d08:	221f      	movs	r2, #31
 8002d0a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d0e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	7a3b      	ldrb	r3, [r7, #8]
 8002d1a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d1e:	723b      	strb	r3, [r7, #8]
            break;
 8002d20:	e1b1      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	220e      	movs	r2, #14
 8002d2a:	f362 0304 	bfi	r3, r2, #0, #5
 8002d2e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f362 0303 	bfi	r3, r2, #0, #4
 8002d38:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002d3a:	7b3b      	ldrb	r3, [r7, #12]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d42:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d44:	7a7b      	ldrb	r3, [r7, #9]
 8002d46:	220f      	movs	r2, #15
 8002d48:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	7a3b      	ldrb	r3, [r7, #8]
 8002d58:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5c:	723b      	strb	r3, [r7, #8]
            break;
 8002d5e:	e192      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2208      	movs	r2, #8
 8002d68:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f362 0303 	bfi	r3, r2, #0, #4
 8002d76:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d78:	7b3b      	ldrb	r3, [r7, #12]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d80:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d82:	7a7b      	ldrb	r3, [r7, #9]
 8002d84:	2209      	movs	r2, #9
 8002d86:	f362 0306 	bfi	r3, r2, #0, #7
 8002d8a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	7a3b      	ldrb	r3, [r7, #8]
 8002d96:	f362 0305 	bfi	r3, r2, #0, #6
 8002d9a:	723b      	strb	r3, [r7, #8]
            break;
 8002d9c:	e173      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	2206      	movs	r2, #6
 8002da6:	f362 0304 	bfi	r3, r2, #0, #5
 8002daa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dac:	7b7b      	ldrb	r3, [r7, #13]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f362 0303 	bfi	r3, r2, #0, #4
 8002db4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002db6:	7b3b      	ldrb	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	f362 0306 	bfi	r3, r2, #0, #7
 8002dc8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	7a3b      	ldrb	r3, [r7, #8]
 8002dd4:	f362 0305 	bfi	r3, r2, #0, #6
 8002dd8:	723b      	strb	r3, [r7, #8]
            break;
 8002dda:	e154      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	2204      	movs	r2, #4
 8002de4:	f362 0304 	bfi	r3, r2, #0, #5
 8002de8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f362 0303 	bfi	r3, r2, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dfe:	7a7b      	ldrb	r3, [r7, #9]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f362 0306 	bfi	r3, r2, #0, #7
 8002e06:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7a3b      	ldrb	r3, [r7, #8]
 8002e12:	f362 0305 	bfi	r3, r2, #0, #6
 8002e16:	723b      	strb	r3, [r7, #8]
            break;
 8002e18:	e135      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f362 0304 	bfi	r3, r2, #0, #5
 8002e26:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	f023 030f 	bic.w	r3, r3, #15
 8002e2e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e30:	7b3b      	ldrb	r3, [r7, #12]
 8002e32:	f023 030f 	bic.w	r3, r3, #15
 8002e36:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002e38:	7a7b      	ldrb	r3, [r7, #9]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e40:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	7a3b      	ldrb	r3, [r7, #8]
 8002e4c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e50:	723b      	strb	r3, [r7, #8]
            break;
 8002e52:	e118      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f362 0304 	bfi	r3, r2, #0, #5
 8002e60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e72:	7a7b      	ldrb	r3, [r7, #9]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e7c:	7a3b      	ldrb	r3, [r7, #8]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f362 0305 	bfi	r3, r2, #0, #6
 8002e84:	723b      	strb	r3, [r7, #8]
            break;
 8002e86:	e0fe      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f362 0304 	bfi	r3, r2, #0, #5
 8002e94:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e96:	7b7b      	ldrb	r3, [r7, #13]
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	f023 030f 	bic.w	r3, r3, #15
 8002ea4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002ea6:	7a7b      	ldrb	r3, [r7, #9]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002eae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002eb0:	7a3b      	ldrb	r3, [r7, #8]
 8002eb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e0e5      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	221e      	movs	r2, #30
 8002ec2:	f362 0304 	bfi	r3, r2, #0, #5
 8002ec6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002ec8:	7b7b      	ldrb	r3, [r7, #13]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	f362 0303 	bfi	r3, r2, #0, #4
 8002ed0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	f362 0303 	bfi	r3, r2, #0, #4
 8002eda:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002edc:	7a7b      	ldrb	r3, [r7, #9]
 8002ede:	221f      	movs	r2, #31
 8002ee0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ee4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ef4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ef6:	7abb      	ldrb	r3, [r7, #10]
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	72bb      	strb	r3, [r7, #10]
            break;
 8002efe:	e0c2      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	2211      	movs	r2, #17
 8002f08:	f362 0304 	bfi	r3, r2, #0, #5
 8002f0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	2204      	movs	r2, #4
 8002f12:	f362 0303 	bfi	r3, r2, #0, #4
 8002f16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002f18:	7b3b      	ldrb	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002f22:	7a7b      	ldrb	r3, [r7, #9]
 8002f24:	2212      	movs	r2, #18
 8002f26:	f362 0306 	bfi	r3, r2, #0, #7
 8002f2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7a3b      	ldrb	r3, [r7, #8]
 8002f36:	f362 0305 	bfi	r3, r2, #0, #6
 8002f3a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f3c:	7abb      	ldrb	r3, [r7, #10]
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	72bb      	strb	r3, [r7, #10]
            break;
 8002f44:	e09f      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	221e      	movs	r2, #30
 8002f4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002f52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	2207      	movs	r2, #7
 8002f58:	f362 0303 	bfi	r3, r2, #0, #4
 8002f5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f5e:	7b3b      	ldrb	r3, [r7, #12]
 8002f60:	2207      	movs	r2, #7
 8002f62:	f362 0303 	bfi	r3, r2, #0, #4
 8002f66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	7a3b      	ldrb	r3, [r7, #8]
 8002f7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002f80:	723b      	strb	r3, [r7, #8]
            break;
 8002f82:	e080      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002f90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	2205      	movs	r2, #5
 8002f96:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002fa6:	7a7b      	ldrb	r3, [r7, #9]
 8002fa8:	2213      	movs	r2, #19
 8002faa:	f362 0306 	bfi	r3, r2, #0, #7
 8002fae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	7a3b      	ldrb	r3, [r7, #8]
 8002fba:	f362 0305 	bfi	r3, r2, #0, #6
 8002fbe:	723b      	strb	r3, [r7, #8]
            break;
 8002fc0:	e061      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	220e      	movs	r2, #14
 8002fca:	f362 0304 	bfi	r3, r2, #0, #5
 8002fce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002fd0:	7b7b      	ldrb	r3, [r7, #13]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fd8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	f362 0306 	bfi	r3, r2, #0, #7
 8002fec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	7a3b      	ldrb	r3, [r7, #8]
 8002ff8:	f362 0305 	bfi	r3, r2, #0, #6
 8002ffc:	723b      	strb	r3, [r7, #8]
            break;
 8002ffe:	e042      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8003000:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2208      	movs	r2, #8
 800300c:	f362 0304 	bfi	r3, r2, #0, #5
 8003010:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	2202      	movs	r2, #2
 8003016:	f362 0303 	bfi	r3, r2, #0, #4
 800301a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 800301c:	7b3b      	ldrb	r3, [r7, #12]
 800301e:	2202      	movs	r2, #2
 8003020:	f362 0303 	bfi	r3, r2, #0, #4
 8003024:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003026:	7a7b      	ldrb	r3, [r7, #9]
 8003028:	2209      	movs	r2, #9
 800302a:	f362 0306 	bfi	r3, r2, #0, #7
 800302e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	7a3b      	ldrb	r3, [r7, #8]
 800303a:	f362 0305 	bfi	r3, r2, #0, #6
 800303e:	723b      	strb	r3, [r7, #8]
            break;
 8003040:	e021      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	2206      	movs	r2, #6
 800304a:	f362 0304 	bfi	r3, r2, #0, #5
 800304e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003050:	7b7b      	ldrb	r3, [r7, #13]
 8003052:	2201      	movs	r2, #1
 8003054:	f362 0303 	bfi	r3, r2, #0, #4
 8003058:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800305a:	7b3b      	ldrb	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f362 0303 	bfi	r3, r2, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2207      	movs	r2, #7
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e002      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e01f      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2108      	movs	r1, #8
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fa07 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800309e:	f06f 0301 	mvn.w	r3, #1
 80030a2:	e010      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	210c      	movs	r1, #12
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f9f8 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80030b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 80030bc:	f06f 0302 	mvn.w	r3, #2
 80030c0:	e001      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 80030c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	460a      	mov	r2, r1
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	4613      	mov	r3, r2
 80030de:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030e6:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b11      	cmp	r3, #17
 80030ec:	d862      	bhi.n	80031b4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	080031b5 	.word	0x080031b5
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800313d 	.word	0x0800313d
 8003114:	0800315b 	.word	0x0800315b
 8003118:	0800315b 	.word	0x0800315b
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800315b 	.word	0x0800315b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003197 	.word	0x08003197
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003140:	231e      	movs	r3, #30
 8003142:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	2207      	movs	r2, #7
 8003148:	f362 0306 	bfi	r3, r2, #0, #7
 800314c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	2207      	movs	r2, #7
 8003152:	f362 0306 	bfi	r3, r2, #0, #7
 8003156:	723b      	strb	r3, [r7, #8]
            break;
 8003158:	e02f      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800315e:	233e      	movs	r3, #62	@ 0x3e
 8003160:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003162:	7a7b      	ldrb	r3, [r7, #9]
 8003164:	220f      	movs	r2, #15
 8003166:	f362 0306 	bfi	r3, r2, #0, #7
 800316a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800316c:	7a3b      	ldrb	r3, [r7, #8]
 800316e:	220f      	movs	r2, #15
 8003170:	f362 0306 	bfi	r3, r2, #0, #7
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e020      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800317c:	230e      	movs	r3, #14
 800317e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	2203      	movs	r2, #3
 8003184:	f362 0306 	bfi	r3, r2, #0, #7
 8003188:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800318a:	7a3b      	ldrb	r3, [r7, #8]
 800318c:	2203      	movs	r2, #3
 800318e:	f362 0306 	bfi	r3, r2, #0, #7
 8003192:	723b      	strb	r3, [r7, #8]
            break;
 8003194:	e011      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800319a:	237e      	movs	r3, #126	@ 0x7e
 800319c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800319e:	7a7b      	ldrb	r3, [r7, #9]
 80031a0:	221f      	movs	r2, #31
 80031a2:	f362 0306 	bfi	r3, r2, #0, #7
 80031a6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80031a8:	7a3b      	ldrb	r3, [r7, #8]
 80031aa:	221f      	movs	r2, #31
 80031ac:	f362 0306 	bfi	r3, r2, #0, #7
 80031b0:	723b      	strb	r3, [r7, #8]
            break;
 80031b2:	e002      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e010      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2104      	movs	r1, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe f96d 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	e001      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	003e0f0f 	.word	0x003e0f0f

080031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
 80031f2:	460b      	mov	r3, r1
 80031f4:	71bb      	strb	r3, [r7, #6]
 80031f6:	4613      	mov	r3, r2
 80031f8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031fe:	4bce      	ldr	r3, [pc, #824]	@ (8003538 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003200:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003206:	7abb      	ldrb	r3, [r7, #10]
 8003208:	2202      	movs	r2, #2
 800320a:	f362 0301 	bfi	r3, r2, #0, #2
 800320e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003214:	79bb      	ldrb	r3, [r7, #6]
 8003216:	2b11      	cmp	r3, #17
 8003218:	f200 8166 	bhi.w	80034e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	0800326d 	.word	0x0800326d
 8003228:	080032ab 	.word	0x080032ab
 800322c:	080034e9 	.word	0x080034e9
 8003230:	080032e9 	.word	0x080032e9
 8003234:	08003323 	.word	0x08003323
 8003238:	0800335d 	.word	0x0800335d
 800323c:	0800335d 	.word	0x0800335d
 8003240:	0800335d 	.word	0x0800335d
 8003244:	08003363 	.word	0x08003363
 8003248:	080033a9 	.word	0x080033a9
 800324c:	080033ef 	.word	0x080033ef
 8003250:	0800342d 	.word	0x0800342d
 8003254:	0800346b 	.word	0x0800346b
 8003258:	080034a9 	.word	0x080034a9
 800325c:	080034af 	.word	0x080034af
 8003260:	080032e9 	.word	0x080032e9
 8003264:	0800335d 	.word	0x0800335d
 8003268:	08003363 	.word	0x08003363
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	220e      	movs	r2, #14
 8003274:	f362 0304 	bfi	r3, r2, #0, #5
 8003278:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800327a:	7b7b      	ldrb	r3, [r7, #13]
 800327c:	2203      	movs	r2, #3
 800327e:	f362 0303 	bfi	r3, r2, #0, #4
 8003282:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003284:	7b3b      	ldrb	r3, [r7, #12]
 8003286:	2203      	movs	r2, #3
 8003288:	f362 0303 	bfi	r3, r2, #0, #4
 800328c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800328e:	7a7b      	ldrb	r3, [r7, #9]
 8003290:	220f      	movs	r2, #15
 8003292:	f362 0306 	bfi	r3, r2, #0, #7
 8003296:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	7a3b      	ldrb	r3, [r7, #8]
 80032a2:	f362 0305 	bfi	r3, r2, #0, #6
 80032a6:	723b      	strb	r3, [r7, #8]
            break;
 80032a8:	e121      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2206      	movs	r2, #6
 80032b2:	f362 0304 	bfi	r3, r2, #0, #5
 80032b6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f362 0303 	bfi	r3, r2, #0, #4
 80032c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f362 0303 	bfi	r3, r2, #0, #4
 80032ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80032cc:	7a7b      	ldrb	r3, [r7, #9]
 80032ce:	2207      	movs	r2, #7
 80032d0:	f362 0306 	bfi	r3, r2, #0, #7
 80032d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	f362 0305 	bfi	r3, r2, #0, #6
 80032e4:	723b      	strb	r3, [r7, #8]
            break;
 80032e6:	e102      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f362 0304 	bfi	r3, r2, #0, #5
 80032f4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003306:	7a7b      	ldrb	r3, [r7, #9]
 8003308:	2203      	movs	r2, #3
 800330a:	f362 0306 	bfi	r3, r2, #0, #7
 800330e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003316:	b2da      	uxtb	r2, r3
 8003318:	7a3b      	ldrb	r3, [r7, #8]
 800331a:	f362 0305 	bfi	r3, r2, #0, #6
 800331e:	723b      	strb	r3, [r7, #8]
            break;
 8003320:	e0e5      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2201      	movs	r2, #1
 800332a:	f362 0304 	bfi	r3, r2, #0, #5
 800332e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003330:	7b7b      	ldrb	r3, [r7, #13]
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003338:	7b3b      	ldrb	r3, [r7, #12]
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	2202      	movs	r2, #2
 8003344:	f362 0306 	bfi	r3, r2, #0, #7
 8003348:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003350:	b2da      	uxtb	r2, r3
 8003352:	7a3b      	ldrb	r3, [r7, #8]
 8003354:	f362 0305 	bfi	r3, r2, #0, #6
 8003358:	723b      	strb	r3, [r7, #8]
            break;
 800335a:	e0c8      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	e0e5      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	221e      	movs	r2, #30
 800336a:	f362 0304 	bfi	r3, r2, #0, #5
 800336e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003370:	7b7b      	ldrb	r3, [r7, #13]
 8003372:	2207      	movs	r2, #7
 8003374:	f362 0303 	bfi	r3, r2, #0, #4
 8003378:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	2207      	movs	r2, #7
 800337e:	f362 0303 	bfi	r3, r2, #0, #4
 8003382:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	221f      	movs	r2, #31
 8003388:	f362 0306 	bfi	r3, r2, #0, #7
 800338c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	7a3b      	ldrb	r3, [r7, #8]
 8003398:	f362 0305 	bfi	r3, r2, #0, #6
 800339c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800339e:	7abb      	ldrb	r3, [r7, #10]
 80033a0:	f023 0303 	bic.w	r3, r3, #3
 80033a4:	72bb      	strb	r3, [r7, #10]
            break;
 80033a6:	e0a2      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2211      	movs	r2, #17
 80033b0:	f362 0304 	bfi	r3, r2, #0, #5
 80033b4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80033b6:	7b7b      	ldrb	r3, [r7, #13]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f362 0303 	bfi	r3, r2, #0, #4
 80033be:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80033c0:	7b3b      	ldrb	r3, [r7, #12]
 80033c2:	2204      	movs	r2, #4
 80033c4:	f362 0303 	bfi	r3, r2, #0, #4
 80033c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80033ca:	7a7b      	ldrb	r3, [r7, #9]
 80033cc:	2212      	movs	r2, #18
 80033ce:	f362 0306 	bfi	r3, r2, #0, #7
 80033d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7a3b      	ldrb	r3, [r7, #8]
 80033de:	f362 0305 	bfi	r3, r2, #0, #6
 80033e2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	72bb      	strb	r3, [r7, #10]
            break;
 80033ec:	e07f      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	220e      	movs	r2, #14
 80033f6:	f362 0304 	bfi	r3, r2, #0, #5
 80033fa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	2203      	movs	r2, #3
 8003400:	f362 0303 	bfi	r3, r2, #0, #4
 8003404:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	2203      	movs	r2, #3
 800340a:	f362 0303 	bfi	r3, r2, #0, #4
 800340e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003410:	7a7b      	ldrb	r3, [r7, #9]
 8003412:	220f      	movs	r2, #15
 8003414:	f362 0306 	bfi	r3, r2, #0, #7
 8003418:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	b2da      	uxtb	r2, r3
 8003422:	7a3b      	ldrb	r3, [r7, #8]
 8003424:	f362 0305 	bfi	r3, r2, #0, #6
 8003428:	723b      	strb	r3, [r7, #8]
            break;
 800342a:	e060      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2208      	movs	r2, #8
 8003434:	f362 0304 	bfi	r3, r2, #0, #5
 8003438:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	2202      	movs	r2, #2
 800343e:	f362 0303 	bfi	r3, r2, #0, #4
 8003442:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003444:	7b3b      	ldrb	r3, [r7, #12]
 8003446:	2202      	movs	r2, #2
 8003448:	f362 0303 	bfi	r3, r2, #0, #4
 800344c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800344e:	7a7b      	ldrb	r3, [r7, #9]
 8003450:	2209      	movs	r2, #9
 8003452:	f362 0306 	bfi	r3, r2, #0, #7
 8003456:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345e:	b2da      	uxtb	r2, r3
 8003460:	7a3b      	ldrb	r3, [r7, #8]
 8003462:	f362 0305 	bfi	r3, r2, #0, #6
 8003466:	723b      	strb	r3, [r7, #8]
            break;
 8003468:	e041      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2206      	movs	r2, #6
 8003472:	f362 0304 	bfi	r3, r2, #0, #5
 8003476:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003478:	7b7b      	ldrb	r3, [r7, #13]
 800347a:	2201      	movs	r2, #1
 800347c:	f362 0303 	bfi	r3, r2, #0, #4
 8003480:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003482:	7b3b      	ldrb	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f362 0303 	bfi	r3, r2, #0, #4
 800348a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800348c:	7a7b      	ldrb	r3, [r7, #9]
 800348e:	2207      	movs	r2, #7
 8003490:	f362 0306 	bfi	r3, r2, #0, #7
 8003494:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800349c:	b2da      	uxtb	r2, r3
 800349e:	7a3b      	ldrb	r3, [r7, #8]
 80034a0:	f362 0305 	bfi	r3, r2, #0, #6
 80034a4:	723b      	strb	r3, [r7, #8]
            break;
 80034a6:	e022      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	e03f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f362 0304 	bfi	r3, r2, #0, #5
 80034ba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80034bc:	7b7b      	ldrb	r3, [r7, #13]
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80034c4:	7b3b      	ldrb	r3, [r7, #12]
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f362 0306 	bfi	r3, r2, #0, #7
 80034d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	f362 0305 	bfi	r3, r2, #0, #6
 80034e4:	723b      	strb	r3, [r7, #8]
            break;
 80034e6:	e002      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e01f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2108      	movs	r1, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd ffd3 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003506:	f06f 0301 	mvn.w	r3, #1
 800350a:	e010      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	210c      	movs	r1, #12
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd ffc4 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003524:	f06f 0302 	mvn.w	r3, #2
 8003528:	e001      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800352a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	000e0303 	.word	0x000e0303

0800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	460a      	mov	r2, r1
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	4613      	mov	r3, r2
 800354a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003552:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003554:	79bb      	ldrb	r3, [r7, #6]
 8003556:	2b11      	cmp	r3, #17
 8003558:	d862      	bhi.n	8003620 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	08003621 	.word	0x08003621
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035c7 	.word	0x080035c7
 8003584:	080035c7 	.word	0x080035c7
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035c7 	.word	0x080035c7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035e5 	.word	0x080035e5
 80035a0:	080035e5 	.word	0x080035e5
 80035a4:	08003603 	.word	0x08003603
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80035ac:	230e      	movs	r3, #14
 80035ae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f362 0306 	bfi	r3, r2, #0, #7
 80035b8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	2203      	movs	r2, #3
 80035be:	f362 0306 	bfi	r3, r2, #0, #7
 80035c2:	723b      	strb	r3, [r7, #8]
            break;
 80035c4:	e02f      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80035ca:	231e      	movs	r3, #30
 80035cc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	2207      	movs	r2, #7
 80035d2:	f362 0306 	bfi	r3, r2, #0, #7
 80035d6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	2207      	movs	r2, #7
 80035dc:	f362 0306 	bfi	r3, r2, #0, #7
 80035e0:	723b      	strb	r3, [r7, #8]
            break;
 80035e2:	e020      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035e8:	2307      	movs	r3, #7
 80035ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035ec:	7a7b      	ldrb	r3, [r7, #9]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f362 0306 	bfi	r3, r2, #0, #7
 80035f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035f6:	7a3b      	ldrb	r3, [r7, #8]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f362 0306 	bfi	r3, r2, #0, #7
 80035fe:	723b      	strb	r3, [r7, #8]
            break;
 8003600:	e011      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003606:	233e      	movs	r3, #62	@ 0x3e
 8003608:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800360a:	7a7b      	ldrb	r3, [r7, #9]
 800360c:	220f      	movs	r2, #15
 800360e:	f362 0306 	bfi	r3, r2, #0, #7
 8003612:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	220f      	movs	r2, #15
 8003618:	f362 0306 	bfi	r3, r2, #0, #7
 800361c:	723b      	strb	r3, [r7, #8]
            break;
 800361e:	e002      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e010      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2104      	movs	r1, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd ff37 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 800363e:	f06f 0301 	mvn.w	r3, #1
 8003642:	e001      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	003e0f0f 	.word	0x003e0f0f

08003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
 800365e:	460b      	mov	r3, r1
 8003660:	71bb      	strb	r3, [r7, #6]
 8003662:	4613      	mov	r3, r2
 8003664:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800366a:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 800366c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003672:	7abb      	ldrb	r3, [r7, #10]
 8003674:	2202      	movs	r2, #2
 8003676:	f362 0301 	bfi	r3, r2, #0, #2
 800367a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003680:	79bb      	ldrb	r3, [r7, #6]
 8003682:	2b11      	cmp	r3, #17
 8003684:	f200 80ef 	bhi.w	8003866 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036d9 	.word	0x080036d9
 8003694:	08003717 	.word	0x08003717
 8003698:	08003867 	.word	0x08003867
 800369c:	08003751 	.word	0x08003751
 80036a0:	08003751 	.word	0x08003751
 80036a4:	08003751 	.word	0x08003751
 80036a8:	08003751 	.word	0x08003751
 80036ac:	08003751 	.word	0x08003751
 80036b0:	08003757 	.word	0x08003757
 80036b4:	0800379d 	.word	0x0800379d
 80036b8:	080037e3 	.word	0x080037e3
 80036bc:	08003821 	.word	0x08003821
 80036c0:	08003827 	.word	0x08003827
 80036c4:	08003861 	.word	0x08003861
 80036c8:	08003861 	.word	0x08003861
 80036cc:	08003751 	.word	0x08003751
 80036d0:	08003751 	.word	0x08003751
 80036d4:	08003757 	.word	0x08003757
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036dc:	7bbb      	ldrb	r3, [r7, #14]
 80036de:	2206      	movs	r2, #6
 80036e0:	f362 0304 	bfi	r3, r2, #0, #5
 80036e4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036e6:	7b7b      	ldrb	r3, [r7, #13]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f362 0303 	bfi	r3, r2, #0, #4
 80036ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f362 0303 	bfi	r3, r2, #0, #4
 80036f8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036fa:	7a7b      	ldrb	r3, [r7, #9]
 80036fc:	2207      	movs	r2, #7
 80036fe:	f362 0306 	bfi	r3, r2, #0, #7
 8003702:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370a:	b2da      	uxtb	r2, r3
 800370c:	7a3b      	ldrb	r3, [r7, #8]
 800370e:	f362 0305 	bfi	r3, r2, #0, #6
 8003712:	723b      	strb	r3, [r7, #8]
            break;
 8003714:	e0aa      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2202      	movs	r2, #2
 800371e:	f362 0304 	bfi	r3, r2, #0, #5
 8003722:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003724:	7b7b      	ldrb	r3, [r7, #13]
 8003726:	f023 030f 	bic.w	r3, r3, #15
 800372a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800372c:	7b3b      	ldrb	r3, [r7, #12]
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	2203      	movs	r2, #3
 8003738:	f362 0306 	bfi	r3, r2, #0, #7
 800373c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	f362 0305 	bfi	r3, r2, #0, #6
 800374c:	723b      	strb	r3, [r7, #8]
            break;
 800374e:	e08d      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e0aa      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	220e      	movs	r2, #14
 800375e:	f362 0304 	bfi	r3, r2, #0, #5
 8003762:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003764:	7b7b      	ldrb	r3, [r7, #13]
 8003766:	2203      	movs	r2, #3
 8003768:	f362 0303 	bfi	r3, r2, #0, #4
 800376c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	2203      	movs	r2, #3
 8003772:	f362 0303 	bfi	r3, r2, #0, #4
 8003776:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003778:	7a7b      	ldrb	r3, [r7, #9]
 800377a:	220f      	movs	r2, #15
 800377c:	f362 0306 	bfi	r3, r2, #0, #7
 8003780:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	7a3b      	ldrb	r3, [r7, #8]
 800378c:	f362 0305 	bfi	r3, r2, #0, #6
 8003790:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003792:	7abb      	ldrb	r3, [r7, #10]
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	72bb      	strb	r3, [r7, #10]
            break;
 800379a:	e067      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2207      	movs	r2, #7
 80037a4:	f362 0304 	bfi	r3, r2, #0, #5
 80037a8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f362 0303 	bfi	r3, r2, #0, #4
 80037b2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80037b4:	7b3b      	ldrb	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f362 0303 	bfi	r3, r2, #0, #4
 80037bc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80037be:	7a7b      	ldrb	r3, [r7, #9]
 80037c0:	2208      	movs	r2, #8
 80037c2:	f362 0306 	bfi	r3, r2, #0, #7
 80037c6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	7a3b      	ldrb	r3, [r7, #8]
 80037d2:	f362 0305 	bfi	r3, r2, #0, #6
 80037d6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80037d8:	7abb      	ldrb	r3, [r7, #10]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	72bb      	strb	r3, [r7, #10]
            break;
 80037e0:	e044      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2206      	movs	r2, #6
 80037ea:	f362 0304 	bfi	r3, r2, #0, #5
 80037ee:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037f0:	7b7b      	ldrb	r3, [r7, #13]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f362 0303 	bfi	r3, r2, #0, #4
 80037f8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037fa:	7b3b      	ldrb	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f362 0303 	bfi	r3, r2, #0, #4
 8003802:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003804:	7a7b      	ldrb	r3, [r7, #9]
 8003806:	2207      	movs	r2, #7
 8003808:	f362 0306 	bfi	r3, r2, #0, #7
 800380c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	7a3b      	ldrb	r3, [r7, #8]
 8003818:	f362 0305 	bfi	r3, r2, #0, #6
 800381c:	723b      	strb	r3, [r7, #8]
            break;
 800381e:	e025      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e042      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	2202      	movs	r2, #2
 800382e:	f362 0304 	bfi	r3, r2, #0, #5
 8003832:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	f023 030f 	bic.w	r3, r3, #15
 800383a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800383c:	7b3b      	ldrb	r3, [r7, #12]
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003844:	7a7b      	ldrb	r3, [r7, #9]
 8003846:	2203      	movs	r2, #3
 8003848:	f362 0306 	bfi	r3, r2, #0, #7
 800384c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	b2da      	uxtb	r2, r3
 8003856:	7a3b      	ldrb	r3, [r7, #8]
 8003858:	f362 0305 	bfi	r3, r2, #0, #6
 800385c:	723b      	strb	r3, [r7, #8]
            break;
 800385e:	e005      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e022      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e01f      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2108      	movs	r1, #8
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fe14 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800387c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003884:	f06f 0301 	mvn.w	r3, #1
 8003888:	e010      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	210c      	movs	r1, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fe05 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800389a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80038a2:	f06f 0302 	mvn.w	r3, #2
 80038a6:	e001      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80038a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	000e0303 	.word	0x000e0303

080038b8 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	460b      	mov	r3, r1
 80038c4:	71bb      	strb	r3, [r7, #6]
 80038c6:	4613      	mov	r3, r2
 80038c8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80038d2:	f640 6307 	movw	r3, #3591	@ 0xe07
 80038d6:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	1cda      	adds	r2, r3, #3
 80038e2:	89b9      	ldrh	r1, [r7, #12]
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fc18 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e020      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f362 0300 	bfi	r3, r2, #0, #1
 800390c:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800390e:	797b      	ldrb	r3, [r7, #5]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f362 0341 	bfi	r3, r2, #1, #1
 800391c:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800391e:	7afa      	ldrb	r2, [r7, #11]
 8003920:	89b9      	ldrh	r1, [r7, #12]
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fc87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	e001      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800393c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d802      	bhi.n	8003962 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e02a      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	3b09      	subs	r3, #9
 8003966:	2b06      	cmp	r3, #6
 8003968:	d825      	bhi.n	80039b6 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	0800398d 	.word	0x0800398d
 8003974:	08003993 	.word	0x08003993
 8003978:	08003999 	.word	0x08003999
 800397c:	0800399f 	.word	0x0800399f
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039b1 	.word	0x080039b1
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800398c:	230c      	movs	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
                break;
 8003990:	e012      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003992:	2310      	movs	r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
                break;
 8003996:	e00f      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003998:	2314      	movs	r3, #20
 800399a:	60fb      	str	r3, [r7, #12]
                break;
 800399c:	e00c      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800399e:	2318      	movs	r3, #24
 80039a0:	60fb      	str	r3, [r7, #12]
                break;
 80039a2:	e009      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80039a4:	2320      	movs	r3, #32
 80039a6:	60fb      	str	r3, [r7, #12]
                break;
 80039a8:	e006      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80039aa:	2330      	movs	r3, #48	@ 0x30
 80039ac:	60fb      	str	r3, [r7, #12]
                break;
 80039ae:	e003      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80039b0:	2340      	movs	r3, #64	@ 0x40
 80039b2:	60fb      	str	r3, [r7, #12]
                break;
 80039b4:	e000      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80039b6:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4313      	orrs	r3, r2
 80039de:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 0218 	bic.w	r2, r3, #24
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	615a      	str	r2, [r3, #20]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	801a      	strh	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b090      	sub	sp, #64	@ 0x40
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003abe:	2305      	movs	r3, #5
 8003ac0:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003ace:	2300      	movs	r3, #0
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003afa:	f001 fd67 	bl	80055cc <FI_CheckBankConfig>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003b04:	230e      	movs	r3, #14
 8003b06:	f000 bcb4 	b.w	8004472 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003b0a:	f001 fcbd 	bl	8005488 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003b0e:	4b93      	ldr	r3, [pc, #588]	@ (8003d5c <EE_Init+0x2a8>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b14:	4b92      	ldr	r3, [pc, #584]	@ (8003d60 <EE_Init+0x2ac>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	029a      	lsls	r2, r3, #10
 8003b1a:	4b92      	ldr	r3, [pc, #584]	@ (8003d64 <EE_Init+0x2b0>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b22:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	0b1b      	lsrs	r3, r3, #12
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b30:	e02e      	b.n	8003b90 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003b38:	031a      	lsls	r2, r3, #12
 8003b3a:	4b89      	ldr	r3, [pc, #548]	@ (8003d60 <EE_Init+0x2ac>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	0299      	lsls	r1, r3, #10
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <EE_Init+0x2b0>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003b48:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b4c:	4b84      	ldr	r3, [pc, #528]	@ (8003d60 <EE_Init+0x2ac>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	0298      	lsls	r0, r3, #10
 8003b52:	4b84      	ldr	r3, [pc, #528]	@ (8003d64 <EE_Init+0x2b0>)
 8003b54:	4003      	ands	r3, r0
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e00e      	b.n	8003b82 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d68 <EE_Init+0x2b4>)
 8003b6c:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	4413      	add	r3, r2
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	3308      	adds	r3, #8
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d3ec      	bcc.n	8003b64 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b90:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <EE_Init+0x2ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <EE_Init+0x2b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	3304      	adds	r3, #4
 8003bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3bf      	bcc.n	8003b32 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <EE_Init+0x2a8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003bb8:	4b69      	ldr	r3, [pc, #420]	@ (8003d60 <EE_Init+0x2ac>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	029a      	lsls	r2, r3, #10
 8003bbe:	4b69      	ldr	r3, [pc, #420]	@ (8003d64 <EE_Init+0x2b0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003bc6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	0b1b      	lsrs	r3, r3, #12
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd4:	e034      	b.n	8003c40 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003bdc:	031a      	lsls	r2, r3, #12
 8003bde:	4b60      	ldr	r3, [pc, #384]	@ (8003d60 <EE_Init+0x2ac>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	0299      	lsls	r1, r3, #10
 8003be4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d64 <EE_Init+0x2b0>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003bec:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003d60 <EE_Init+0x2ac>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	0298      	lsls	r0, r3, #10
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d64 <EE_Init+0x2b0>)
 8003bf8:	4003      	ands	r3, r0
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c04:	f001 fbde 	bl	80053c4 <GetPageState>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003c0c:	7ebb      	ldrb	r3, [r7, #26]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d002      	beq.n	8003c18 <EE_Init+0x164>
 8003c12:	7ebb      	ldrb	r3, [r7, #26]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d103      	bne.n	8003c20 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1e:	e00c      	b.n	8003c3a <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003c20:	7ebb      	ldrb	r3, [r7, #26]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d109      	bne.n	8003c3a <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2e:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	3301      	adds	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <EE_Init+0x2ac>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	029a      	lsls	r2, r3, #10
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <EE_Init+0x2b0>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	0b1b      	lsrs	r3, r3, #12
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3b9      	bcc.n	8003bd6 <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d16a      	bne.n	8003d3e <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d062      	beq.n	8003d34 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <EE_Init+0x2ac>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	029a      	lsls	r2, r3, #10
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <EE_Init+0x2b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	0b1b      	lsrs	r3, r3, #12
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	f003 0103 	and.w	r1, r3, #3
 8003c92:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <EE_Init+0x2ac>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	029a      	lsls	r2, r3, #10
 8003c98:	4b32      	ldr	r3, [pc, #200]	@ (8003d64 <EE_Init+0x2b0>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	0b1b      	lsrs	r3, r3, #12
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003cb2:	031a      	lsls	r2, r3, #12
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <EE_Init+0x2ac>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <EE_Init+0x2b0>)
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003cc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8003cc6:	4b26      	ldr	r3, [pc, #152]	@ (8003d60 <EE_Init+0x2ac>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	0298      	lsls	r0, r3, #10
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <EE_Init+0x2b0>)
 8003cce:	4003      	ands	r3, r0
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fb74 	bl	80053c4 <GetPageState>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d12d      	bne.n	8003d3e <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <EE_Init+0x2ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d64 <EE_Init+0x2b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f003 0103 	and.w	r1, r3, #3
 8003d06:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <EE_Init+0x2ac>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	029a      	lsls	r2, r3, #10
 8003d0c:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <EE_Init+0x2b0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d14:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d18:	fb00 f303 	mul.w	r3, r0, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	0b1b      	lsrs	r3, r3, #12
 8003d20:	440b      	add	r3, r1
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fa8b 	bl	8005240 <SetPageState>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e39e      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f000 fba7 	bl	8004488 <EE_Format>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e399      	b.n	8004472 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <EE_Init+0x2ac>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	029a      	lsls	r2, r3, #10
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <EE_Init+0x2b0>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	0b1b      	lsrs	r3, r3, #12
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5a:	e0de      	b.n	8003f1a <EE_Init+0x466>
 8003d5c:	200003ac 	.word	0x200003ac
 8003d60:	1fff75e0 	.word	0x1fff75e0
 8003d64:	001ffc00 	.word	0x001ffc00
 8003d68:	200003a8 	.word	0x200003a8
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d72:	031a      	lsls	r2, r3, #12
 8003d74:	4bba      	ldr	r3, [pc, #744]	@ (8004060 <EE_Init+0x5ac>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	0299      	lsls	r1, r3, #10
 8003d7a:	4bba      	ldr	r3, [pc, #744]	@ (8004064 <EE_Init+0x5b0>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003d82:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d86:	4bb6      	ldr	r3, [pc, #728]	@ (8004060 <EE_Init+0x5ac>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	0298      	lsls	r0, r3, #10
 8003d8c:	4bb5      	ldr	r3, [pc, #724]	@ (8004064 <EE_Init+0x5b0>)
 8003d8e:	4003      	ands	r3, r0
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003d98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d9a:	f001 fb13 	bl	80053c4 <GetPageState>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003da2:	7ebb      	ldrb	r3, [r7, #26]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 80b5 	bne.w	8003f14 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003daa:	4bad      	ldr	r3, [pc, #692]	@ (8004060 <EE_Init+0x5ac>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	029a      	lsls	r2, r3, #10
 8003db0:	4bac      	ldr	r3, [pc, #688]	@ (8004064 <EE_Init+0x5b0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	0b1b      	lsrs	r3, r3, #12
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d050      	beq.n	8003e6c <EE_Init+0x3b8>
 8003dca:	4ba5      	ldr	r3, [pc, #660]	@ (8004060 <EE_Init+0x5ac>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	029a      	lsls	r2, r3, #10
 8003dd0:	4ba4      	ldr	r3, [pc, #656]	@ (8004064 <EE_Init+0x5b0>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	0b1b      	lsrs	r3, r3, #12
 8003de4:	3302      	adds	r3, #2
 8003de6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d03f      	beq.n	8003e6c <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003dec:	4b9c      	ldr	r3, [pc, #624]	@ (8004060 <EE_Init+0x5ac>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	029a      	lsls	r2, r3, #10
 8003df2:	4b9c      	ldr	r3, [pc, #624]	@ (8004064 <EE_Init+0x5b0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dfa:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	0b1b      	lsrs	r3, r3, #12
 8003e06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	f003 0103 	and.w	r1, r3, #3
 8003e10:	4b93      	ldr	r3, [pc, #588]	@ (8004060 <EE_Init+0x5ac>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	029a      	lsls	r2, r3, #10
 8003e16:	4b93      	ldr	r3, [pc, #588]	@ (8004064 <EE_Init+0x5b0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e1e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	0b1b      	lsrs	r3, r3, #12
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003e30:	031a      	lsls	r2, r3, #12
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <EE_Init+0x5ac>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	0299      	lsls	r1, r3, #10
 8003e38:	4b8a      	ldr	r3, [pc, #552]	@ (8004064 <EE_Init+0x5b0>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e40:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e44:	4b86      	ldr	r3, [pc, #536]	@ (8004060 <EE_Init+0x5ac>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0298      	lsls	r0, r3, #10
 8003e4a:	4b86      	ldr	r3, [pc, #536]	@ (8004064 <EE_Init+0x5b0>)
 8003e4c:	4003      	ands	r3, r0
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fab5 	bl	80053c4 <GetPageState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d102      	bne.n	8003e66 <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e64:	e041      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e66:	2301      	movs	r3, #1
 8003e68:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e6a:	e03e      	b.n	8003eea <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <EE_Init+0x5ac>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b7c      	ldr	r3, [pc, #496]	@ (8004064 <EE_Init+0x5b0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 0103 	and.w	r1, r3, #3
 8003e90:	4b73      	ldr	r3, [pc, #460]	@ (8004060 <EE_Init+0x5ac>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	029a      	lsls	r2, r3, #10
 8003e96:	4b73      	ldr	r3, [pc, #460]	@ (8004064 <EE_Init+0x5b0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e9e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	0b1b      	lsrs	r3, r3, #12
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003eb0:	031a      	lsls	r2, r3, #12
 8003eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <EE_Init+0x5ac>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	0299      	lsls	r1, r3, #10
 8003eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004064 <EE_Init+0x5b0>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003ec0:	fbb1 f1f3 	udiv	r1, r1, r3
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <EE_Init+0x5ac>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	0298      	lsls	r0, r3, #10
 8003eca:	4b66      	ldr	r3, [pc, #408]	@ (8004064 <EE_Init+0x5b0>)
 8003ecc:	4003      	ands	r3, r0
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fa75 	bl	80053c4 <GetPageState>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e001      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d111      	bne.n	8003f14 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <EE_Init+0x5b4>)
 8003ef6:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2100      	movs	r1, #0
 8003efc:	2000      	movs	r0, #0
 8003efe:	f000 fef3 	bl	8004ce8 <PagesTransfer>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d001      	beq.n	8003f0e <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	e2b1      	b.n	8004472 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003f12:	e014      	b.n	8003f3e <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	3301      	adds	r3, #1
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1a:	4b51      	ldr	r3, [pc, #324]	@ (8004060 <EE_Init+0x5ac>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	029a      	lsls	r2, r3, #10
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <EE_Init+0x5b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	0b1b      	lsrs	r3, r3, #12
 8003f34:	3304      	adds	r3, #4
 8003f36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f4ff af17 	bcc.w	8003d6c <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <EE_Init+0x5ac>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	029a      	lsls	r2, r3, #10
 8003f48:	4b46      	ldr	r3, [pc, #280]	@ (8004064 <EE_Init+0x5b0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	0b1b      	lsrs	r3, r3, #12
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	e0dc      	b.n	800411a <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003f66:	031a      	lsls	r2, r3, #12
 8003f68:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <EE_Init+0x5ac>)
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	0299      	lsls	r1, r3, #10
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <EE_Init+0x5b0>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f76:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f7a:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <EE_Init+0x5ac>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	0298      	lsls	r0, r3, #10
 8003f80:	4b38      	ldr	r3, [pc, #224]	@ (8004064 <EE_Init+0x5b0>)
 8003f82:	4003      	ands	r3, r0
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003f8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f8e:	f001 fa19 	bl	80053c4 <GetPageState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f96:	7ebb      	ldrb	r3, [r7, #26]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f040 80b6 	bne.w	800410a <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <EE_Init+0x5ac>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	029a      	lsls	r2, r3, #10
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004064 <EE_Init+0x5b0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fac:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	0b1b      	lsrs	r3, r3, #12
 8003fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d056      	beq.n	800406c <EE_Init+0x5b8>
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <EE_Init+0x5ac>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	029a      	lsls	r2, r3, #10
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <EE_Init+0x5b0>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	0b1b      	lsrs	r3, r3, #12
 8003fd8:	3302      	adds	r3, #2
 8003fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d045      	beq.n	800406c <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <EE_Init+0x5ac>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	029a      	lsls	r2, r3, #10
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <EE_Init+0x5b0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fee:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	0b1b      	lsrs	r3, r3, #12
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	3303      	adds	r3, #3
 8004000:	f003 0103 	and.w	r1, r3, #3
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <EE_Init+0x5ac>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	029a      	lsls	r2, r3, #10
 800400a:	4b16      	ldr	r3, [pc, #88]	@ (8004064 <EE_Init+0x5b0>)
 800400c:	4013      	ands	r3, r2
 800400e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004012:	fbb2 f0f3 	udiv	r0, r2, r3
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	0b1b      	lsrs	r3, r3, #12
 800401e:	440b      	add	r3, r1
 8004020:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004024:	031a      	lsls	r2, r3, #12
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <EE_Init+0x5ac>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	0299      	lsls	r1, r3, #10
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <EE_Init+0x5b0>)
 800402e:	400b      	ands	r3, r1
 8004030:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004034:	fbb1 f1f3 	udiv	r1, r1, r3
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <EE_Init+0x5ac>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	0298      	lsls	r0, r3, #10
 800403e:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <EE_Init+0x5b0>)
 8004040:	4003      	ands	r3, r0
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9bb 	bl	80053c4 <GetPageState>
 800404e:	4603      	mov	r3, r0
 8004050:	2b03      	cmp	r3, #3
 8004052:	d102      	bne.n	800405a <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004058:	e047      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800405a:	2301      	movs	r3, #1
 800405c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800405e:	e044      	b.n	80040ea <EE_Init+0x636>
 8004060:	1fff75e0 	.word	0x1fff75e0
 8004064:	001ffc00 	.word	0x001ffc00
 8004068:	200003a6 	.word	0x200003a6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800406c:	4b98      	ldr	r3, [pc, #608]	@ (80042d0 <EE_Init+0x81c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	029a      	lsls	r2, r3, #10
 8004072:	4b98      	ldr	r3, [pc, #608]	@ (80042d4 <EE_Init+0x820>)
 8004074:	4013      	ands	r3, r2
 8004076:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800407a:	fbb2 f1f3 	udiv	r1, r2, r3
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	0b1b      	lsrs	r3, r3, #12
 8004086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f003 0103 	and.w	r1, r3, #3
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <EE_Init+0x81c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	029a      	lsls	r2, r3, #10
 8004096:	4b8f      	ldr	r3, [pc, #572]	@ (80042d4 <EE_Init+0x820>)
 8004098:	4013      	ands	r3, r2
 800409a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800409e:	fbb2 f0f3 	udiv	r0, r2, r3
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	0b1b      	lsrs	r3, r3, #12
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80040b0:	031a      	lsls	r2, r3, #12
 80040b2:	4b87      	ldr	r3, [pc, #540]	@ (80042d0 <EE_Init+0x81c>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	0299      	lsls	r1, r3, #10
 80040b8:	4b86      	ldr	r3, [pc, #536]	@ (80042d4 <EE_Init+0x820>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80040c0:	fbb1 f1f3 	udiv	r1, r1, r3
 80040c4:	4b82      	ldr	r3, [pc, #520]	@ (80042d0 <EE_Init+0x81c>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	0298      	lsls	r0, r3, #10
 80040ca:	4b82      	ldr	r3, [pc, #520]	@ (80042d4 <EE_Init+0x820>)
 80040cc:	4003      	ands	r3, r0
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f975 	bl	80053c4 <GetPageState>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e001      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040e6:	2301      	movs	r3, #1
 80040e8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b77      	ldr	r3, [pc, #476]	@ (80042d8 <EE_Init+0x824>)
 80040fc:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	3301      	adds	r3, #1
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
 8004104:	e006      	b.n	8004114 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8004106:	230a      	movs	r3, #10
 8004108:	e1b3      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800410a:	7ebb      	ldrb	r3, [r7, #26]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d101      	bne.n	8004114 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	3301      	adds	r3, #1
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411a:	4b6d      	ldr	r3, [pc, #436]	@ (80042d0 <EE_Init+0x81c>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	4b6c      	ldr	r3, [pc, #432]	@ (80042d4 <EE_Init+0x820>)
 8004122:	4013      	ands	r3, r2
 8004124:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004128:	fbb2 f1f3 	udiv	r1, r2, r3
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	3304      	adds	r3, #4
 8004136:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004138:	429a      	cmp	r2, r3
 800413a:	f4ff af11 	bcc.w	8003f60 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d133      	bne.n	80041ac <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	b2d9      	uxtb	r1, r3
 8004148:	4b61      	ldr	r3, [pc, #388]	@ (80042d0 <EE_Init+0x81c>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	029a      	lsls	r2, r3, #10
 800414e:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <EE_Init+0x820>)
 8004150:	4013      	ands	r3, r2
 8004152:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004156:	fbb2 f0f3 	udiv	r0, r2, r3
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	0b1b      	lsrs	r3, r3, #12
 8004162:	b2db      	uxtb	r3, r3
 8004164:	1acb      	subs	r3, r1, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	b2d9      	uxtb	r1, r3
 8004172:	4b57      	ldr	r3, [pc, #348]	@ (80042d0 <EE_Init+0x81c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	029a      	lsls	r2, r3, #10
 8004178:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <EE_Init+0x820>)
 800417a:	4013      	ands	r3, r2
 800417c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004180:	fbb2 f0f3 	udiv	r0, r2, r3
 8004184:	fb00 f303 	mul.w	r3, r0, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	0b1b      	lsrs	r3, r3, #12
 800418c:	b2db      	uxtb	r3, r3
 800418e:	440b      	add	r3, r1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b51      	ldr	r3, [pc, #324]	@ (80042d8 <EE_Init+0x824>)
 8004194:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004196:	4b50      	ldr	r3, [pc, #320]	@ (80042d8 <EE_Init+0x824>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f84f 	bl	8005240 <SetPageState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 80041a8:	2302      	movs	r3, #2
 80041aa:	e162      	b.n	8004472 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <EE_Init+0x828>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <EE_Init+0x82c>)
 80041b4:	2220      	movs	r2, #32
 80041b6:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041b8:	2320      	movs	r3, #32
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80041bc:	e031      	b.n	8004222 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <EE_Init+0x824>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80041c6:	031a      	lsls	r2, r3, #12
 80041c8:	4b41      	ldr	r3, [pc, #260]	@ (80042d0 <EE_Init+0x81c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	0299      	lsls	r1, r3, #10
 80041ce:	4b41      	ldr	r3, [pc, #260]	@ (80042d4 <EE_Init+0x820>)
 80041d0:	400b      	ands	r3, r1
 80041d2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80041d6:	fbb1 f1f3 	udiv	r1, r1, r3
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <EE_Init+0x81c>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	0298      	lsls	r0, r3, #10
 80041e0:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <EE_Init+0x820>)
 80041e2:	4003      	ands	r3, r0
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	4413      	add	r3, r2
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	bf08      	it	eq
 8004200:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004204:	d012      	beq.n	800422c <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <EE_Init+0x828>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <EE_Init+0x828>)
 8004210:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <EE_Init+0x82c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <EE_Init+0x82c>)
 800421a:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	3308      	adds	r3, #8
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d3c9      	bcc.n	80041be <EE_Init+0x70a>
 800422a:	e000      	b.n	800422e <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 800422c:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <EE_Init+0x824>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <EE_Init+0x824>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800423a:	e053      	b.n	80042e4 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <EE_Init+0x81c>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	029a      	lsls	r2, r3, #10
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <EE_Init+0x820>)
 8004244:	4013      	ands	r3, r2
 8004246:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800424a:	fbb2 f1f3 	udiv	r1, r2, r3
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	0b1b      	lsrs	r3, r3, #12
 8004256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	3303      	adds	r3, #3
 800425c:	f003 0103 	and.w	r1, r3, #3
 8004260:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <EE_Init+0x81c>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	029a      	lsls	r2, r3, #10
 8004266:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <EE_Init+0x820>)
 8004268:	4013      	ands	r3, r2
 800426a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800426e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004272:	fb00 f303 	mul.w	r3, r0, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	0b1b      	lsrs	r3, r3, #12
 800427a:	440b      	add	r3, r1
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800427e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004280:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004284:	031a      	lsls	r2, r3, #12
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <EE_Init+0x81c>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	0299      	lsls	r1, r3, #10
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <EE_Init+0x820>)
 800428e:	400b      	ands	r3, r1
 8004290:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004294:	fbb1 f1f3 	udiv	r1, r1, r3
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <EE_Init+0x81c>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	0298      	lsls	r0, r3, #10
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <EE_Init+0x820>)
 80042a0:	4003      	ands	r3, r0
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f88b 	bl	80053c4 <GetPageState>
 80042ae:	4603      	mov	r3, r0
 80042b0:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 80042b2:	7ebb      	ldrb	r3, [r7, #26]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d109      	bne.n	80042cc <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <EE_Init+0x828>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <EE_Init+0x828>)
 80042c4:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 80042c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	e00b      	b.n	80042e4 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 80042cc:	230a      	movs	r3, #10
 80042ce:	e0d0      	b.n	8004472 <EE_Init+0x9be>
 80042d0:	1fff75e0 	.word	0x1fff75e0
 80042d4:	001ffc00 	.word	0x001ffc00
 80042d8:	200003a6 	.word	0x200003a6
 80042dc:	200003a4 	.word	0x200003a4
 80042e0:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042e4:	4b65      	ldr	r3, [pc, #404]	@ (800447c <EE_Init+0x9c8>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	029a      	lsls	r2, r3, #10
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <EE_Init+0x9cc>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	0b1b      	lsrs	r3, r3, #12
 80042fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004300:	429a      	cmp	r2, r3
 8004302:	d010      	beq.n	8004326 <EE_Init+0x872>
 8004304:	4b5d      	ldr	r3, [pc, #372]	@ (800447c <EE_Init+0x9c8>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	029a      	lsls	r2, r3, #10
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <EE_Init+0x9cc>)
 800430c:	4013      	ands	r3, r2
 800430e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004312:	fbb2 f1f3 	udiv	r1, r2, r3
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	0b1b      	lsrs	r3, r3, #12
 800431e:	3302      	adds	r3, #2
 8004320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004322:	429a      	cmp	r2, r3
 8004324:	d18a      	bne.n	800423c <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <EE_Init+0x9d0>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	4b53      	ldr	r3, [pc, #332]	@ (800447c <EE_Init+0x9c8>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	029a      	lsls	r2, r3, #10
 8004332:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <EE_Init+0x9cc>)
 8004334:	4013      	ands	r3, r2
 8004336:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800433a:	fbb2 f1f3 	udiv	r1, r2, r3
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	0b1b      	lsrs	r3, r3, #12
 8004346:	1ac3      	subs	r3, r0, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f003 0103 	and.w	r1, r3, #3
 800434e:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <EE_Init+0x9c8>)
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	029a      	lsls	r2, r3, #10
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <EE_Init+0x9cc>)
 8004356:	4013      	ands	r3, r2
 8004358:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800435c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004360:	fb00 f303 	mul.w	r3, r0, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	0b1b      	lsrs	r3, r3, #12
 8004368:	440b      	add	r3, r1
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004372:	031a      	lsls	r2, r3, #12
 8004374:	4b41      	ldr	r3, [pc, #260]	@ (800447c <EE_Init+0x9c8>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	0299      	lsls	r1, r3, #10
 800437a:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <EE_Init+0x9cc>)
 800437c:	400b      	ands	r3, r1
 800437e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004382:	fbb1 f1f3 	udiv	r1, r1, r3
 8004386:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <EE_Init+0x9c8>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	0298      	lsls	r0, r3, #10
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <EE_Init+0x9cc>)
 800438e:	4003      	ands	r3, r0
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 8004398:	e053      	b.n	8004442 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80043a0:	2101      	movs	r1, #1
 80043a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043a4:	f001 f8b1 	bl	800550a <FI_PageErase>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e05f      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80043b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043b8:	f000 fb5d 	bl	8004a76 <VerifyPageFullyErased>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d108      	bne.n	80043d4 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80043c2:	2101      	movs	r1, #1
 80043c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043c6:	f001 f8a0 	bl	800550a <FI_PageErase>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04e      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80043d4:	4b29      	ldr	r3, [pc, #164]	@ (800447c <EE_Init+0x9c8>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	029a      	lsls	r2, r3, #10
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <EE_Init+0x9cc>)
 80043dc:	4013      	ands	r3, r2
 80043de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	0b1b      	lsrs	r3, r3, #12
 80043ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f003 0103 	and.w	r1, r3, #3
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <EE_Init+0x9c8>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	029a      	lsls	r2, r3, #10
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <EE_Init+0x9cc>)
 8004400:	4013      	ands	r3, r2
 8004402:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004406:	fbb2 f0f3 	udiv	r0, r2, r3
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	0b1b      	lsrs	r3, r3, #12
 8004412:	440b      	add	r3, r1
 8004414:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800441c:	031a      	lsls	r2, r3, #12
 800441e:	4b17      	ldr	r3, [pc, #92]	@ (800447c <EE_Init+0x9c8>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	0299      	lsls	r1, r3, #10
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <EE_Init+0x9cc>)
 8004426:	400b      	ands	r3, r1
 8004428:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800442c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <EE_Init+0x9c8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	0298      	lsls	r0, r3, #10
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <EE_Init+0x9cc>)
 8004438:	4003      	ands	r3, r0
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8004442:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d1a7      	bne.n	800439a <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800444a:	f001 f89d 	bl	8005588 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004454:	2100      	movs	r1, #0
 8004456:	2000      	movs	r0, #0
 8004458:	f000 fe6c 	bl	8005134 <VerifyPagesFullWriteVariable>
 800445c:	4603      	mov	r3, r0
 800445e:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <EE_Init+0x9bc>
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	2b12      	cmp	r3, #18
 800446a:	d001      	beq.n	8004470 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 800446c:	2302      	movs	r3, #2
 800446e:	e000      	b.n	8004472 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3740      	adds	r7, #64	@ 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	1fff75e0 	.word	0x1fff75e0
 8004480:	001ffc00 	.word	0x001ffc00
 8004484:	200003a6 	.word	0x200003a6

08004488 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8004496:	f001 f899 	bl	80055cc <FI_CheckBankConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80044a0:	230e      	movs	r3, #14
 80044a2:	e083      	b.n	80045ac <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044a4:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <EE_Format+0x12c>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	029a      	lsls	r2, r3, #10
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <EE_Format+0x130>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	0b1b      	lsrs	r3, r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e034      	b.n	800452c <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80044c8:	2101      	movs	r1, #1
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 f81d 	bl	800550a <FI_PageErase>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d027      	beq.n	8004526 <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e068      	b.n	80045ac <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80044e0:	031a      	lsls	r2, r3, #12
 80044e2:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <EE_Format+0x12c>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	0299      	lsls	r1, r3, #10
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <EE_Format+0x130>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80044f0:	fbb1 f1f3 	udiv	r1, r1, r3
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <EE_Format+0x12c>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	0298      	lsls	r0, r3, #10
 80044fa:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <EE_Format+0x130>)
 80044fc:	4003      	ands	r3, r0
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fab4 	bl	8004a76 <VerifyPageFullyErased>
 800450e:	4603      	mov	r3, r0
 8004510:	2b10      	cmp	r3, #16
 8004512:	d108      	bne.n	8004526 <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004514:	2101      	movs	r1, #1
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fff7 	bl	800550a <FI_PageErase>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e042      	b.n	80045ac <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <EE_Format+0x12c>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	029a      	lsls	r2, r3, #10
 8004532:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <EE_Format+0x130>)
 8004534:	4013      	ands	r3, r2
 8004536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800453a:	fbb2 f1f3 	udiv	r1, r2, r3
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	0b1b      	lsrs	r3, r3, #12
 8004546:	3304      	adds	r3, #4
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3b9      	bcc.n	80044c2 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800454e:	f001 f81b 	bl	8005588 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004552:	4b18      	ldr	r3, [pc, #96]	@ (80045b4 <EE_Format+0x12c>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	029a      	lsls	r2, r3, #10
 8004558:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <EE_Format+0x130>)
 800455a:	4013      	ands	r3, r2
 800455c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004560:	fbb2 f1f3 	udiv	r1, r2, r3
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fe66 	bl	8005240 <SetPageState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800457a:	2302      	movs	r3, #2
 800457c:	e016      	b.n	80045ac <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800457e:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <EE_Format+0x134>)
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <EE_Format+0x12c>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	029a      	lsls	r2, r3, #10
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <EE_Format+0x130>)
 800458c:	4013      	ands	r3, r2
 800458e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004592:	fbb2 f1f3 	udiv	r1, r2, r3
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	0b1b      	lsrs	r3, r3, #12
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <EE_Format+0x138>)
 80045a2:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80045a4:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <EE_Format+0x13c>)
 80045a6:	2220      	movs	r2, #32
 80045a8:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	1fff75e0 	.word	0x1fff75e0
 80045b8:	001ffc00 	.word	0x001ffc00
 80045bc:	200003a4 	.word	0x200003a4
 80045c0:	200003a6 	.word	0x200003a6
 80045c4:	20000008 	.word	0x20000008

080045c8 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d011      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f94b 	bl	8004890 <ReadVariable>
 80045fa:	4603      	mov	r3, r0
 80045fc:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]

    return status;
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	e000      	b.n	800460a <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004608:	2308      	movs	r3, #8
  } 
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	6039      	str	r1, [r7, #0]
 800461c:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800462a:	4293      	cmp	r3, r2
 800462c:	d006      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa00 	bl	8004a38 <WriteVariable>
 8004638:	4603      	mov	r3, r0
 800463a:	e000      	b.n	800463e <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800463c:	2308      	movs	r3, #8
  } 
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800465e:	2305      	movs	r3, #5
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	2305      	movs	r3, #5
 8004664:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004666:	4b3f      	ldr	r3, [pc, #252]	@ (8004764 <EE_CleanUp+0x11c>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	029a      	lsls	r2, r3, #10
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <EE_CleanUp+0x120>)
 800466e:	4013      	ands	r3, r2
 8004670:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004674:	fbb2 f1f3 	udiv	r1, r2, r3
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	0b1b      	lsrs	r3, r3, #12
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e059      	b.n	8004738 <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800468a:	031a      	lsls	r2, r3, #12
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <EE_CleanUp+0x11c>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	0299      	lsls	r1, r3, #10
 8004692:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <EE_CleanUp+0x120>)
 8004694:	400b      	ands	r3, r1
 8004696:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800469a:	fbb1 f1f3 	udiv	r1, r1, r3
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <EE_CleanUp+0x11c>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	0298      	lsls	r0, r3, #10
 80046a4:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <EE_CleanUp+0x120>)
 80046a6:	4003      	ands	r3, r0
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fe87 	bl	80053c4 <GetPageState>
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d138      	bne.n	8004732 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e022      	b.n	800470e <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80046ce:	031a      	lsls	r2, r3, #12
 80046d0:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <EE_CleanUp+0x11c>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	0299      	lsls	r1, r3, #10
 80046d6:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <EE_CleanUp+0x120>)
 80046d8:	400b      	ands	r3, r1
 80046da:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80046de:	fbb1 f1f3 	udiv	r1, r1, r3
 80046e2:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <EE_CleanUp+0x11c>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	0298      	lsls	r0, r3, #10
 80046e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <EE_CleanUp+0x120>)
 80046ea:	4003      	ands	r3, r0
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f000 fe65 	bl	80053c4 <GetPageState>
 80046fa:	4603      	mov	r3, r0
 80046fc:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d001      	beq.n	8004708 <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004704:	2305      	movs	r3, #5
 8004706:	e029      	b.n	800475c <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3301      	adds	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3302      	adds	r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3d7      	bcc.n	80046c8 <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004718:	2102      	movs	r1, #2
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f000 fef5 	bl	800550a <FI_PageErase>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e018      	b.n	800475c <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800472a:	f000 ff2d 	bl	8005588 <FI_CacheFlush>
        
        return EE_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e014      	b.n	800475c <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3302      	adds	r3, #2
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <EE_CleanUp+0x11c>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	029a      	lsls	r2, r3, #10
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <EE_CleanUp+0x120>)
 8004740:	4013      	ands	r3, r2
 8004742:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004746:	fbb2 f1f3 	udiv	r1, r2, r3
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	0b1b      	lsrs	r3, r3, #12
 8004752:	3304      	adds	r3, #4
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d394      	bcc.n	8004684 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800475a:	2305      	movs	r3, #5
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	1fff75e0 	.word	0x1fff75e0
 8004768:	001ffc00 	.word	0x001ffc00

0800476c <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004782:	2305      	movs	r3, #5
 8004784:	71fb      	strb	r3, [r7, #7]
 8004786:	2305      	movs	r3, #5
 8004788:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	029a      	lsls	r2, r3, #10
 8004790:	4b3e      	ldr	r3, [pc, #248]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004792:	4013      	ands	r3, r2
 8004794:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004798:	fbb2 f1f3 	udiv	r1, r2, r3
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	0b1b      	lsrs	r3, r3, #12
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e059      	b.n	800485c <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047ae:	031a      	lsls	r2, r3, #12
 80047b0:	4b35      	ldr	r3, [pc, #212]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	0299      	lsls	r1, r3, #10
 80047b6:	4b35      	ldr	r3, [pc, #212]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047b8:	400b      	ands	r3, r1
 80047ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80047be:	fbb1 f1f3 	udiv	r1, r1, r3
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	0298      	lsls	r0, r3, #10
 80047c8:	4b30      	ldr	r3, [pc, #192]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047ca:	4003      	ands	r3, r0
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fdf5 	bl	80053c4 <GetPageState>
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d138      	bne.n	8004856 <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e022      	b.n	8004832 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047f2:	031a      	lsls	r2, r3, #12
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	0299      	lsls	r1, r3, #10
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004802:	fbb1 f1f3 	udiv	r1, r1, r3
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	0298      	lsls	r0, r3, #10
 800480c:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <EE_CleanUp_IT+0x120>)
 800480e:	4003      	ands	r3, r0
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 fdd3 	bl	80053c4 <GetPageState>
 800481e:	4603      	mov	r3, r0
 8004820:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d001      	beq.n	800482c <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004828:	2305      	movs	r3, #5
 800482a:	e029      	b.n	8004880 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3302      	adds	r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3d7      	bcc.n	80047ec <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800483c:	2102      	movs	r1, #2
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f000 fe85 	bl	800554e <FI_PageErase_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e018      	b.n	8004880 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800484e:	f000 fe9b 	bl	8005588 <FI_CacheFlush>
        return EE_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e014      	b.n	8004880 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3302      	adds	r3, #2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	029a      	lsls	r2, r3, #10
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004864:	4013      	ands	r3, r2
 8004866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800486a:	fbb2 f1f3 	udiv	r1, r2, r3
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	0b1b      	lsrs	r3, r3, #12
 8004876:	3304      	adds	r3, #4
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d394      	bcc.n	80047a8 <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800487e:	2305      	movs	r3, #5
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	1fff75e0 	.word	0x1fff75e0
 800488c:	001ffc00 	.word	0x001ffc00

08004890 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ac:	2300      	movs	r3, #0
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80048b8:	2305      	movs	r3, #5
 80048ba:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80048bc:	2000      	movs	r0, #0
 80048be:	f000 f8ff 	bl	8004ac0 <FindPage>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d101      	bne.n	80048d0 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ab      	b.n	8004a28 <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80048d6:	031a      	lsls	r2, r3, #12
 80048d8:	4b55      	ldr	r3, [pc, #340]	@ (8004a30 <ReadVariable+0x1a0>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	0299      	lsls	r1, r3, #10
 80048de:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <ReadVariable+0x1a4>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80048e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <ReadVariable+0x1a0>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	0298      	lsls	r0, r3, #10
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <ReadVariable+0x1a4>)
 80048f2:	4003      	ands	r3, r0
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f000 fd61 	bl	80053c4 <GetPageState>
 8004902:	4603      	mov	r3, r0
 8004904:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004906:	e082      	b.n	8004a0e <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 8004908:	f640 73f8 	movw	r3, #4088	@ 0xff8
 800490c:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800490e:	e03f      	b.n	8004990 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800491e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	bf08      	it	eq
 8004928:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800492c:	d02d      	beq.n	800498a <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800492e:	8a3b      	ldrh	r3, [r7, #16]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	429a      	cmp	r2, r3
 8004934:	d129      	bne.n	800498a <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8004936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	000a      	movs	r2, r1
 8004944:	2300      	movs	r3, #0
 8004946:	8a3b      	ldrh	r3, [r7, #16]
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fdb0 	bl	80054b0 <CalculateCrc>
 8004950:	4603      	mov	r3, r0
 8004952:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004954:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	0c02      	lsrs	r2, r0, #16
 8004962:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004966:	0c0b      	lsrs	r3, r1, #16
 8004968:	b293      	uxth	r3, r2
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4293      	cmp	r3, r2
 8004970:	d10b      	bne.n	800498a <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	000a      	movs	r2, r1
 8004980:	2300      	movs	r3, #0
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e04e      	b.n	8004a28 <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b08      	subs	r3, #8
 800498e:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b1f      	cmp	r3, #31
 8004994:	d8bc      	bhi.n	8004910 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <ReadVariable+0x1a0>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	029a      	lsls	r2, r3, #10
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <ReadVariable+0x1a4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	0b1b      	lsrs	r3, r3, #12
 80049b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	3303      	adds	r3, #3
 80049b6:	f003 0103 	and.w	r1, r3, #3
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <ReadVariable+0x1a0>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	029a      	lsls	r2, r3, #10
 80049c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <ReadVariable+0x1a4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049c8:	fbb2 f0f3 	udiv	r0, r2, r3
 80049cc:	fb00 f303 	mul.w	r3, r0, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	0b1b      	lsrs	r3, r3, #12
 80049d4:	440b      	add	r3, r1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049de:	031a      	lsls	r2, r3, #12
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <ReadVariable+0x1a0>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	0299      	lsls	r1, r3, #10
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <ReadVariable+0x1a4>)
 80049e8:	400b      	ands	r3, r1
 80049ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049ee:	fbb1 f1f3 	udiv	r1, r1, r3
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <ReadVariable+0x1a0>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	0298      	lsls	r0, r3, #10
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <ReadVariable+0x1a4>)
 80049fa:	4003      	ands	r3, r0
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004a04:	6a38      	ldr	r0, [r7, #32]
 8004a06:	f000 fcdd 	bl	80053c4 <GetPageState>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004a0e:	7efb      	ldrb	r3, [r7, #27]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f43f af79 	beq.w	8004908 <ReadVariable+0x78>
 8004a16:	7efb      	ldrb	r3, [r7, #27]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	f43f af75 	beq.w	8004908 <ReadVariable+0x78>
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	f43f af71 	beq.w	8004908 <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 8004a26:	2307      	movs	r3, #7
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	1fff75e0 	.word	0x1fff75e0
 8004a34:	001ffc00 	.word	0x001ffc00

08004a38 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb71 	bl	8005134 <VerifyPagesFullWriteVariable>
 8004a52:	4603      	mov	r3, r0
 8004a54:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a56:	89fb      	ldrh	r3, [r7, #14]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d107      	bne.n	8004a6c <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f940 	bl	8004ce8 <PagesTransfer>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	e000      	b.n	8004a6e <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a80:	2311      	movs	r3, #17
 8004a82:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a88:	e00f      	b.n	8004aaa <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4413      	add	r3, r2
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	bf08      	it	eq
 8004a9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a9e:	d001      	beq.n	8004aa4 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3eb      	bcc.n	8004a8a <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004aca:	2305      	movs	r3, #5
 8004acc:	75fb      	strb	r3, [r7, #23]
 8004ace:	2305      	movs	r3, #5
 8004ad0:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004ade:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd8 <FindPage+0x218>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004aea:	031a      	lsls	r2, r3, #12
 8004aec:	4b7b      	ldr	r3, [pc, #492]	@ (8004cdc <FindPage+0x21c>)
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0299      	lsls	r1, r3, #10
 8004af2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce0 <FindPage+0x220>)
 8004af4:	400b      	ands	r3, r1
 8004af6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004afa:	fbb1 f1f3 	udiv	r1, r1, r3
 8004afe:	4b77      	ldr	r3, [pc, #476]	@ (8004cdc <FindPage+0x21c>)
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	0298      	lsls	r0, r3, #10
 8004b04:	4b76      	ldr	r3, [pc, #472]	@ (8004ce0 <FindPage+0x220>)
 8004b06:	4003      	ands	r3, r0
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fc58 	bl	80053c4 <GetPageState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004b18:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <FindPage+0x21c>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	029a      	lsls	r2, r3, #10
 8004b1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ce0 <FindPage+0x220>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b26:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	0b1b      	lsrs	r3, r3, #12
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f003 0103 	and.w	r1, r3, #3
 8004b3c:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <FindPage+0x21c>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	029a      	lsls	r2, r3, #10
 8004b42:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <FindPage+0x220>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b4a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	0b1b      	lsrs	r3, r3, #12
 8004b56:	440b      	add	r3, r1
 8004b58:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004b60:	031a      	lsls	r2, r3, #12
 8004b62:	4b5e      	ldr	r3, [pc, #376]	@ (8004cdc <FindPage+0x21c>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	0299      	lsls	r1, r3, #10
 8004b68:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce0 <FindPage+0x220>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004b70:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b74:	4b59      	ldr	r3, [pc, #356]	@ (8004cdc <FindPage+0x21c>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	0298      	lsls	r0, r3, #10
 8004b7a:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <FindPage+0x220>)
 8004b7c:	4003      	ands	r3, r0
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc1d 	bl	80053c4 <GetPageState>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <FindPage+0x21c>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	029a      	lsls	r2, r3, #10
 8004b94:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <FindPage+0x220>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	0b1b      	lsrs	r3, r3, #12
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	3303      	adds	r3, #3
 8004bae:	f003 0103 	and.w	r1, r3, #3
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <FindPage+0x21c>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	029a      	lsls	r2, r3, #10
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <FindPage+0x220>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004bc0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	0b1b      	lsrs	r3, r3, #12
 8004bcc:	440b      	add	r3, r1
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d071      	beq.n	8004cba <FindPage+0x1fa>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	dc77      	bgt.n	8004cca <FindPage+0x20a>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d060      	beq.n	8004ca0 <FindPage+0x1e0>
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d173      	bne.n	8004cca <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d12a      	bne.n	8004c3e <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004be8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <FindPage+0x224>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d201      	bcs.n	8004bf6 <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	e06b      	b.n	8004cce <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bf6:	7dbb      	ldrb	r3, [r7, #22]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bfc:	f7ff fd24 	bl	8004648 <EE_CleanUp>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e060      	b.n	8004cce <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f000 fb16 	bl	8005240 <SetPageState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	e056      	b.n	8004cce <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004c20:	2102      	movs	r1, #2
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fb0c 	bl	8005240 <SetPageState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e04c      	b.n	8004cce <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <FindPage+0x224>)
 8004c36:	2220      	movs	r2, #32
 8004c38:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	e047      	b.n	8004cce <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12a      	bne.n	8004c9a <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c44:	4b27      	ldr	r3, [pc, #156]	@ (8004ce4 <FindPage+0x224>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d201      	bcs.n	8004c52 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	e03d      	b.n	8004cce <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c52:	7dbb      	ldrb	r3, [r7, #22]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d107      	bne.n	8004c68 <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c58:	f7ff fcf6 	bl	8004648 <EE_CleanUp>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e032      	b.n	8004cce <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c68:	2103      	movs	r1, #3
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 fae8 	bl	8005240 <SetPageState>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	e028      	b.n	8004cce <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fade 	bl	8005240 <SetPageState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e01e      	b.n	8004cce <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <FindPage+0x224>)
 8004c92:	2220      	movs	r2, #32
 8004c94:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e019      	b.n	8004cce <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e016      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d101      	bne.n	8004caa <FindPage+0x1ea>
      {
        return currentpage;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	e011      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <FindPage+0x1f4>
        {
          return previouspage;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	e00c      	b.n	8004cce <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e009      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004cba:	7dbb      	ldrb	r3, [r7, #22]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <FindPage+0x204>
      {
        return followingpage;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e004      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	e001      	b.n	8004cce <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200003a6 	.word	0x200003a6
 8004cdc:	1fff75e0 	.word	0x1fff75e0
 8004ce0:	001ffc00 	.word	0x001ffc00
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cf8:	2305      	movs	r3, #5
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004d1e:	797b      	ldrb	r3, [r7, #5]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <PagesTransfer+0x40>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e000      	b.n	8004d2a <PagesTransfer+0x42>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fec8 	bl	8004ac0 <FindPage>
 8004d30:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d101      	bne.n	8004d3e <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	e1ed      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004d4a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004d4e:	2220      	movs	r2, #32
 8004d50:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d52:	797b      	ldrb	r3, [r7, #5]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6a38      	ldr	r0, [r7, #32]
 8004d5c:	f000 fa70 	bl	8005240 <SetPageState>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d66:	2302      	movs	r3, #2
 8004d68:	e1d7      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	029a      	lsls	r2, r3, #10
 8004d70:	4b9b      	ldr	r3, [pc, #620]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	0b1b      	lsrs	r3, r3, #12
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	3303      	adds	r3, #3
 8004d8a:	f003 0103 	and.w	r1, r3, #3
 8004d8e:	4b93      	ldr	r3, [pc, #588]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	029a      	lsls	r2, r3, #10
 8004d94:	4b92      	ldr	r3, [pc, #584]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d9c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004da0:	fb00 f303 	mul.w	r3, r0, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	0b1b      	lsrs	r3, r3, #12
 8004da8:	440b      	add	r3, r1
 8004daa:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004db2:	031a      	lsls	r2, r3, #12
 8004db4:	4b89      	ldr	r3, [pc, #548]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	0299      	lsls	r1, r3, #10
 8004dba:	4b89      	ldr	r3, [pc, #548]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004dc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004dc6:	4b85      	ldr	r3, [pc, #532]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	0298      	lsls	r0, r3, #10
 8004dcc:	4b84      	ldr	r3, [pc, #528]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dce:	4003      	ands	r3, r0
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f000 faf3 	bl	80053c4 <GetPageState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d004      	beq.n	8004df6 <PagesTransfer+0x10e>
 8004dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	f040 809e 	bne.w	8004f32 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d108      	bne.n	8004e10 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dfe:	2104      	movs	r1, #4
 8004e00:	6a38      	ldr	r0, [r7, #32]
 8004e02:	f000 fa1d 	bl	8005240 <SetPageState>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e184      	b.n	800511a <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004e10:	4b72      	ldr	r3, [pc, #456]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	029a      	lsls	r2, r3, #10
 8004e16:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	0b1b      	lsrs	r3, r3, #12
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	3303      	adds	r3, #3
 8004e30:	f003 0103 	and.w	r1, r3, #3
 8004e34:	4b69      	ldr	r3, [pc, #420]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	029a      	lsls	r2, r3, #10
 8004e3a:	4b69      	ldr	r3, [pc, #420]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e42:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e46:	fb00 f303 	mul.w	r3, r0, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	0b1b      	lsrs	r3, r3, #12
 8004e4e:	440b      	add	r3, r1
 8004e50:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e58:	031a      	lsls	r2, r3, #12
 8004e5a:	4b60      	ldr	r3, [pc, #384]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	0299      	lsls	r1, r3, #10
 8004e60:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e62:	400b      	ands	r3, r1
 8004e64:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004e68:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	0298      	lsls	r0, r3, #10
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e74:	4003      	ands	r3, r0
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 faa0 	bl	80053c4 <GetPageState>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e8a:	e049      	b.n	8004f20 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d108      	bne.n	8004ea6 <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e94:	2104      	movs	r1, #4
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	f000 f9d2 	bl	8005240 <SetPageState>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e139      	b.n	800511a <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	0b1b      	lsrs	r3, r3, #12
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	f003 0103 	and.w	r1, r3, #3
 8004eca:	4b44      	ldr	r3, [pc, #272]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	029a      	lsls	r2, r3, #10
 8004ed0:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ed8:	fbb2 f0f3 	udiv	r0, r2, r3
 8004edc:	fb00 f303 	mul.w	r3, r0, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	0b1b      	lsrs	r3, r3, #12
 8004ee4:	440b      	add	r3, r1
 8004ee6:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004eee:	031a      	lsls	r2, r3, #12
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	0299      	lsls	r1, r3, #10
 8004ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ef8:	400b      	ands	r3, r1
 8004efa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004efe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f02:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	0298      	lsls	r0, r3, #10
 8004f08:	4b35      	ldr	r3, [pc, #212]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f000 fa55 	bl	80053c4 <GetPageState>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d0b1      	beq.n	8004e8c <PagesTransfer+0x1a4>
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d0ad      	beq.n	8004e8c <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004f30:	e008      	b.n	8004f44 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004f32:	797b      	ldrb	r3, [r7, #5]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d103      	bne.n	8004f40 <PagesTransfer+0x258>
 8004f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d001      	beq.n	8004f44 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f40:	230a      	movs	r3, #10
 8004f42:	e0ea      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f44:	797b      	ldrb	r3, [r7, #5]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	f040 809b 	bne.w	8005082 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e031      	b.n	8004fb6 <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f52:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004f5a:	031a      	lsls	r2, r3, #12
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	0299      	lsls	r1, r3, #10
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f64:	400b      	ands	r3, r1
 8004f66:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f6a:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	0298      	lsls	r0, r3, #10
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f76:	4003      	ands	r3, r0
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	441a      	add	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	bf08      	it	eq
 8004f94:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f98:	d012      	beq.n	8004fc0 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004fa4:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fae:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbc:	d3c9      	bcc.n	8004f52 <PagesTransfer+0x26a>
 8004fbe:	e000      	b.n	8004fc2 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004fc0:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e054      	b.n	8005078 <PagesTransfer+0x390>
 8004fce:	bf00      	nop
 8004fd0:	200003a4 	.word	0x200003a4
 8004fd4:	200003a6 	.word	0x200003a6
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	1fff75e0 	.word	0x1fff75e0
 8004fe0:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8005124 <PagesTransfer+0x43c>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	029a      	lsls	r2, r3, #10
 8004fea:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <PagesTransfer+0x440>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ff2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	0b1b      	lsrs	r3, r3, #12
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	3303      	adds	r3, #3
 8005004:	f003 0103 	and.w	r1, r3, #3
 8005008:	4b46      	ldr	r3, [pc, #280]	@ (8005124 <PagesTransfer+0x43c>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	029a      	lsls	r2, r3, #10
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <PagesTransfer+0x440>)
 8005010:	4013      	ands	r3, r2
 8005012:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005016:	fbb2 f0f3 	udiv	r0, r2, r3
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	0b1b      	lsrs	r3, r3, #12
 8005022:	440b      	add	r3, r1
 8005024:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800502c:	031a      	lsls	r2, r3, #12
 800502e:	4b3d      	ldr	r3, [pc, #244]	@ (8005124 <PagesTransfer+0x43c>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	0299      	lsls	r1, r3, #10
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <PagesTransfer+0x440>)
 8005036:	400b      	ands	r3, r1
 8005038:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800503c:	fbb1 f1f3 	udiv	r1, r1, r3
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <PagesTransfer+0x43c>)
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	0298      	lsls	r0, r3, #10
 8005046:	4b38      	ldr	r3, [pc, #224]	@ (8005128 <PagesTransfer+0x440>)
 8005048:	4003      	ands	r3, r0
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9b7 	bl	80053c4 <GetPageState>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005060:	2b03      	cmp	r3, #3
 8005062:	d10d      	bne.n	8005080 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005064:	4b31      	ldr	r3, [pc, #196]	@ (800512c <PagesTransfer+0x444>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b2f      	ldr	r3, [pc, #188]	@ (800512c <PagesTransfer+0x444>)
 8005070:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d9b2      	bls.n	8004fe4 <PagesTransfer+0x2fc>
 800507e:	e000      	b.n	8005082 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8005080:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f854 	bl	8005134 <VerifyPagesFullWriteVariable>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8005092:	2302      	movs	r3, #2
 8005094:	e041      	b.n	800511a <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8005096:	4b25      	ldr	r3, [pc, #148]	@ (800512c <PagesTransfer+0x444>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d903      	bls.n	80050a6 <PagesTransfer+0x3be>
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <PagesTransfer+0x444>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	3b02      	subs	r3, #2
 80050a4:	e000      	b.n	80050a8 <PagesTransfer+0x3c0>
 80050a6:	2301      	movs	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e026      	b.n	80050fa <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d01f      	beq.n	80050f4 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fbe6 	bl	8004890 <ReadVariable>
 80050c4:	4603      	mov	r3, r0
 80050c6:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f82c 	bl	8005134 <VerifyPagesFullWriteVariable>
 80050dc:	4603      	mov	r3, r0
 80050de:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          return status;
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	e017      	b.n	800511a <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d001      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	e012      	b.n	800511a <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b32      	cmp	r3, #50	@ 0x32
 80050fe:	d9d5      	bls.n	80050ac <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <PagesTransfer+0x448>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f89a 	bl	8005240 <SetPageState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8005112:	2302      	movs	r3, #2
 8005114:	e001      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8005116:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	@ 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	1fff75e0 	.word	0x1fff75e0
 8005128:	001ffc00 	.word	0x001ffc00
 800512c:	200003a4 	.word	0x200003a4
 8005130:	200003a6 	.word	0x200003a6

08005134 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8005134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005138:	b08b      	sub	sp, #44	@ 0x2c
 800513a:	af00      	add	r7, sp, #0
 800513c:	4603      	mov	r3, r0
 800513e:	6139      	str	r1, [r7, #16]
 8005140:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8005146:	4b3a      	ldr	r3, [pc, #232]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 800514e:	d301      	bcc.n	8005154 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8005150:	2312      	movs	r3, #18
 8005152:	e068      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005154:	2001      	movs	r0, #1
 8005156:	f7ff fcb3 	bl	8004ac0 <FindPage>
 800515a:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d101      	bne.n	800516c <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8005168:	2303      	movs	r3, #3
 800516a:	e05c      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005172:	0319      	lsls	r1, r3, #12
 8005174:	4b2f      	ldr	r3, [pc, #188]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	029a      	lsls	r2, r3, #10
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800517c:	4013      	ands	r3, r2
 800517e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005182:	fbb2 f2f3 	udiv	r2, r2, r3
 8005186:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	0298      	lsls	r0, r3, #10
 800518c:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800518e:	4003      	ands	r3, r0
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	440b      	add	r3, r1
 8005196:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a8:	e006      	b.n	80051b8 <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	4619      	mov	r1, r3
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f000 f97e 	bl	80054b0 <CalculateCrc>
 80051b4:	4603      	mov	r3, r0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	18d0      	adds	r0, r2, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	000b      	movs	r3, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d8:	0409      	lsls	r1, r1, #16
 80051da:	2600      	movs	r6, #0
 80051dc:	468a      	mov	sl, r1
 80051de:	46b3      	mov	fp, r6
 80051e0:	ea42 040a 	orr.w	r4, r2, sl
 80051e4:	ea43 050b 	orr.w	r5, r3, fp
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	2200      	movs	r2, #0
 80051ec:	4698      	mov	r8, r3
 80051ee:	4691      	mov	r9, r2
 80051f0:	ea44 0308 	orr.w	r3, r4, r8
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	ea45 0309 	orr.w	r3, r5, r9
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	f000 f972 	bl	80054e8 <FI_WriteDoubleWord>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 800520a:	2302      	movs	r3, #2
 800520c:	e00b      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	4a09      	ldr	r2, [pc, #36]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005216:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005222:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	372c      	adds	r7, #44	@ 0x2c
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	200003a4 	.word	0x200003a4
 8005234:	1fff75e0 	.word	0x1fff75e0
 8005238:	001ffc00 	.word	0x001ffc00
 800523c:	20000008 	.word	0x20000008

08005240 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005262:	031a      	lsls	r2, r3, #12
 8005264:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <SetPageState+0x178>)
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	0299      	lsls	r1, r3, #10
 800526a:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <SetPageState+0x17c>)
 800526c:	400b      	ands	r3, r1
 800526e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005272:	fbb1 f1f3 	udiv	r1, r1, r3
 8005276:	4b50      	ldr	r3, [pc, #320]	@ (80053b8 <SetPageState+0x178>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	0298      	lsls	r0, r3, #10
 800527c:	4b4f      	ldr	r3, [pc, #316]	@ (80053bc <SetPageState+0x17c>)
 800527e:	4003      	ands	r3, r0
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800528e:	031a      	lsls	r2, r3, #12
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <SetPageState+0x178>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	0299      	lsls	r1, r3, #10
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <SetPageState+0x17c>)
 8005298:	400b      	ands	r3, r1
 800529a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800529e:	fbb1 f1f3 	udiv	r1, r1, r3
 80052a2:	4b45      	ldr	r3, [pc, #276]	@ (80053b8 <SetPageState+0x178>)
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	0298      	lsls	r0, r3, #10
 80052a8:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <SetPageState+0x17c>)
 80052aa:	4003      	ands	r3, r0
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	3308      	adds	r3, #8
 80052b4:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052bc:	031a      	lsls	r2, r3, #12
 80052be:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <SetPageState+0x178>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	0299      	lsls	r1, r3, #10
 80052c4:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <SetPageState+0x17c>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052cc:	fbb1 f1f3 	udiv	r1, r1, r3
 80052d0:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <SetPageState+0x178>)
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	0298      	lsls	r0, r3, #10
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <SetPageState+0x17c>)
 80052d8:	4003      	ands	r3, r0
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3310      	adds	r3, #16
 80052e2:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052ea:	031a      	lsls	r2, r3, #12
 80052ec:	4b32      	ldr	r3, [pc, #200]	@ (80053b8 <SetPageState+0x178>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	0299      	lsls	r1, r3, #10
 80052f2:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <SetPageState+0x17c>)
 80052f4:	400b      	ands	r3, r1
 80052f6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052fa:	fbb1 f1f3 	udiv	r1, r1, r3
 80052fe:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <SetPageState+0x178>)
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	0298      	lsls	r0, r3, #10
 8005304:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <SetPageState+0x17c>)
 8005306:	4003      	ands	r3, r0
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3318      	adds	r3, #24
 8005310:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	3b01      	subs	r3, #1
 8005316:	2b03      	cmp	r3, #3
 8005318:	d844      	bhi.n	80053a4 <SetPageState+0x164>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <SetPageState+0xe0>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005353 	.word	0x08005353
 8005328:	08005375 	.word	0x08005375
 800532c:	0800538d 	.word	0x0800538d
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005330:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005334:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f000 f8d5 	bl	80054e8 <FI_WriteDoubleWord>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005344:	2302      	movs	r3, #2
 8005346:	e033      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <SetPageState+0x180>)
 800534e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005350:	e02d      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005352:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005356:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800535a:	6938      	ldr	r0, [r7, #16]
 800535c:	f000 f8c4 	bl	80054e8 <FI_WriteDoubleWord>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 8005366:	2302      	movs	r3, #2
 8005368:	e022      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <SetPageState+0x180>)
 8005370:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005372:	e01c      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005374:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005378:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8b3 	bl	80054e8 <FI_WriteDoubleWord>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 8005388:	2302      	movs	r3, #2
 800538a:	e011      	b.n	80053b0 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800538c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005390:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f000 f8a7 	bl	80054e8 <FI_WriteDoubleWord>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e005      	b.n	80053b0 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053ac:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	1fff75e0 	.word	0x1fff75e0
 80053bc:	001ffc00 	.word	0x001ffc00
 80053c0:	200003a6 	.word	0x200003a6

080053c4 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b08b      	sub	sp, #44	@ 0x2c
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3308      	adds	r3, #8
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3310      	adds	r3, #16
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3318      	adds	r3, #24
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	bf08      	it	eq
 8005434:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005438:	d001      	beq.n	800543e <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800543a:	2304      	movs	r3, #4
 800543c:	e01e      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800543e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	bf08      	it	eq
 8005448:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800544c:	d001      	beq.n	8005452 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800544e:	2303      	movs	r3, #3
 8005450:	e014      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	bf08      	it	eq
 800545c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005460:	d001      	beq.n	8005466 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005462:	2302      	movs	r3, #2
 8005464:	e00a      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 8005466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	bf08      	it	eq
 8005470:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005474:	d001      	beq.n	800547a <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	372c      	adds	r7, #44	@ 0x2c
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800548c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005490:	f7fe fa9a 	bl	80039c8 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005494:	f248 0105 	movw	r1, #32773	@ 0x8005
 8005498:	4804      	ldr	r0, [pc, #16]	@ (80054ac <ConfigureCrc+0x24>)
 800549a:	f7fe fad1 	bl	8003a40 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800549e:	2108      	movs	r1, #8
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <ConfigureCrc+0x24>)
 80054a2:	f7fe faba 	bl	8003a1a <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023000 	.word	0x40023000

080054b0 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80054bc:	4809      	ldr	r0, [pc, #36]	@ (80054e4 <CalculateCrc+0x34>)
 80054be:	f7fe fa9c 	bl	80039fa <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4807      	ldr	r0, [pc, #28]	@ (80054e4 <CalculateCrc+0x34>)
 80054c6:	f7fe fac9 	bl	8003a5c <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4805      	ldr	r0, [pc, #20]	@ (80054e4 <CalculateCrc+0x34>)
 80054d0:	f7fe fad2 	bl	8003a78 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80054d4:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <CalculateCrc+0x34>)
 80054d6:	f7fe fae0 	bl	8003a9a <LL_CRC_ReadData16>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023000 	.word	0x40023000

080054e8 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	2001      	movs	r0, #1
 80054fc:	f009 faee 	bl	800eadc <HAL_FLASH_Program>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800551e:	2302      	movs	r3, #2
 8005520:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005522:	887b      	ldrh	r3, [r7, #2]
 8005524:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800552a:	f107 020c 	add.w	r2, r7, #12
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f009 fbe5 	bl	800ed04 <HAL_FLASHEx_Erase>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005544:	8bfb      	ldrh	r3, [r7, #30]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800555e:	2302      	movs	r3, #2
 8005560:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f009 fc18 	bl	800eda4 <HAL_FLASHEx_Erase_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 800557e:	8afb      	ldrh	r3, [r7, #22]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800558c:	4b0e      	ldr	r3, [pc, #56]	@ (80055c8 <FI_CacheFlush+0x40>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0d      	ldr	r2, [pc, #52]	@ (80055c8 <FI_CacheFlush+0x40>)
 8005592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005596:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ae:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	58004000 	.word	0x58004000

080055cc <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80055d0:	2300      	movs	r3, #0
#endif
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ec:	f023 0218 	bic.w	r2, r3, #24
 80055f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005644:	f000 f834 	bl	80056b0 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <serialOut+0x58>)
 800564c:	4912      	ldr	r1, [pc, #72]	@ (8005698 <serialOut+0x5c>)
 800564e:	4813      	ldr	r0, [pc, #76]	@ (800569c <serialOut+0x60>)
 8005650:	f00f fd48 	bl	80150e4 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005654:	4811      	ldr	r0, [pc, #68]	@ (800569c <serialOut+0x60>)
 8005656:	f7fa fdf3 	bl	8000240 <strlen>
 800565a:	4603      	mov	r3, r0
 800565c:	b29a      	uxth	r2, r3
 800565e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005662:	490e      	ldr	r1, [pc, #56]	@ (800569c <serialOut+0x60>)
 8005664:	480e      	ldr	r0, [pc, #56]	@ (80056a0 <serialOut+0x64>)
 8005666:	f00d fe35 	bl	80132d4 <HAL_UART_Transmit>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <serialOut+0x68>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <serialOut+0x4e>
 800567c:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <serialOut+0x6c>)
 800567e:	480b      	ldr	r0, [pc, #44]	@ (80056ac <serialOut+0x70>)
 8005680:	f00f fd30 	bl	80150e4 <siprintf>
 8005684:	4809      	ldr	r0, [pc, #36]	@ (80056ac <serialOut+0x70>)
 8005686:	f7ff ffd9 	bl	800563c <serialOut>
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000a54 	.word	0x20000a54
 8005698:	08018c30 	.word	0x08018c30
 800569c:	20000a60 	.word	0x20000a60
 80056a0:	20000444 	.word	0x20000444
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	08018c38 	.word	0x08018c38
 80056ac:	20000b5c 	.word	0x20000b5c

080056b0 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	@ 0x28
 80056b4:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	2201      	movs	r2, #1
 80056d0:	4619      	mov	r1, r3
 80056d2:	480e      	ldr	r0, [pc, #56]	@ (800570c <getTimeBCD+0x5c>)
 80056d4:	f00b fe84 	bl	80113e0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2201      	movs	r2, #1
 80056dc:	4619      	mov	r1, r3
 80056de:	480b      	ldr	r0, [pc, #44]	@ (800570c <getTimeBCD+0x5c>)
 80056e0:	f00b ff88 	bl	80115f4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056e4:	7abb      	ldrb	r3, [r7, #10]
 80056e6:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056e8:	7a7b      	ldrb	r3, [r7, #9]
 80056ea:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056ec:	7a3b      	ldrb	r3, [r7, #8]
 80056ee:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056f0:	7f7a      	ldrb	r2, [r7, #29]
 80056f2:	7fb9      	ldrb	r1, [r7, #30]
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	460b      	mov	r3, r1
 80056fa:	4905      	ldr	r1, [pc, #20]	@ (8005710 <getTimeBCD+0x60>)
 80056fc:	4805      	ldr	r0, [pc, #20]	@ (8005714 <getTimeBCD+0x64>)
 80056fe:	f00f fcf1 	bl	80150e4 <siprintf>
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200004e4 	.word	0x200004e4
 8005710:	08018c5c 	.word	0x08018c5c
 8005714:	20000a54 	.word	0x20000a54

08005718 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b092      	sub	sp, #72	@ 0x48
 800571c:	af00      	add	r7, sp, #0
 800571e:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005722:	463b      	mov	r3, r7
 8005724:	4618      	mov	r0, r3
 8005726:	f00f fd4d 	bl	80151c4 <localtime>
 800572a:	4603      	mov	r3, r0
 800572c:	f107 040c 	add.w	r4, r7, #12
 8005730:	461d      	mov	r5, r3
 8005732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005756:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800575a:	2200      	movs	r2, #0
 800575c:	4619      	mov	r1, r3
 800575e:	4826      	ldr	r0, [pc, #152]	@ (80057f8 <writeRTC+0xe0>)
 8005760:	f00b fd7a 	bl	8011258 <HAL_RTC_SetTime>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <writeRTC+0xe4>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <writeRTC+0x6c>
 8005776:	4922      	ldr	r1, [pc, #136]	@ (8005800 <writeRTC+0xe8>)
 8005778:	4822      	ldr	r0, [pc, #136]	@ (8005804 <writeRTC+0xec>)
 800577a:	f00f fcb3 	bl	80150e4 <siprintf>
 800577e:	4821      	ldr	r0, [pc, #132]	@ (8005804 <writeRTC+0xec>)
 8005780:	f7ff ff5c 	bl	800563c <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <writeRTC+0x76>
 800578a:	2307      	movs	r3, #7
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	3301      	adds	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3b64      	subs	r3, #100	@ 0x64
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80057b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	480e      	ldr	r0, [pc, #56]	@ (80057f8 <writeRTC+0xe0>)
 80057c0:	f00b fe6a 	bl	8011498 <HAL_RTC_SetDate>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80057ca:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <writeRTC+0xe4>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <writeRTC+0xcc>
 80057d6:	490c      	ldr	r1, [pc, #48]	@ (8005808 <writeRTC+0xf0>)
 80057d8:	480a      	ldr	r0, [pc, #40]	@ (8005804 <writeRTC+0xec>)
 80057da:	f00f fc83 	bl	80150e4 <siprintf>
 80057de:	4809      	ldr	r0, [pc, #36]	@ (8005804 <writeRTC+0xec>)
 80057e0:	f7ff ff2c 	bl	800563c <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057e4:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80057e8:	2100      	movs	r1, #0
 80057ea:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <writeRTC+0xe0>)
 80057ec:	f00b ffdb 	bl	80117a6 <HAL_RTCEx_BKUPWrite>

}
 80057f0:	bf00      	nop
 80057f2:	3748      	adds	r7, #72	@ 0x48
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bdb0      	pop	{r4, r5, r7, pc}
 80057f8:	200004e4 	.word	0x200004e4
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	08018c6c 	.word	0x08018c6c
 8005804:	20000b5c 	.word	0x20000b5c
 8005808:	08018c94 	.word	0x08018c94

0800580c <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b094      	sub	sp, #80	@ 0x50
 8005810:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 800581e:	463b      	mov	r3, r7
 8005820:	2224      	movs	r2, #36	@ 0x24
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f00f fcc4 	bl	80151b2 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800582a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	4619      	mov	r1, r3
 8005832:	4822      	ldr	r0, [pc, #136]	@ (80058bc <readRTC+0xb0>)
 8005834:	f00b fdd4 	bl	80113e0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8005838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	4619      	mov	r1, r3
 8005840:	481e      	ldr	r0, [pc, #120]	@ (80058bc <readRTC+0xb0>)
 8005842:	f00b fed7 	bl	80115f4 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 8005846:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800584a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 800584e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005852:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 8005856:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800585a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 800585e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005862:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 8005866:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 800586e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005872:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 8005876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800587a:	3364      	adds	r3, #100	@ 0x64
 800587c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 800587e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005880:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 8005882:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005886:	3b01      	subs	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 800588a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800588e:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8005890:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005894:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 8005896:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800589a:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 800589c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80058a0:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80058a2:	463b      	mov	r3, r7
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00f fe6f 	bl	8015588 <mktime>
 80058aa:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 80058ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	3750      	adds	r7, #80	@ 0x50
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200004e4 	.word	0x200004e4

080058c0 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ca:	2301      	movs	r3, #1
 80058cc:	80fb      	strh	r3, [r7, #6]
 80058ce:	e010      	b.n	80058f2 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005904 <LoadAllEEPROM+0x44>)
 80058d6:	441a      	add	r2, r3
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fe73 	bl	80045c8 <EE_ReadVariable32bits>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	88bb      	ldrh	r3, [r7, #4]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	3301      	adds	r3, #1
 80058f0:	80fb      	strh	r3, [r7, #6]
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2b32      	cmp	r3, #50	@ 0x32
 80058f6:	d9eb      	bls.n	80058d0 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058f8:	88bb      	ldrh	r3, [r7, #4]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000984 	.word	0x20000984

08005908 <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005918:	f009 f924 	bl	800eb64 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800591c:	4b1c      	ldr	r3, [pc, #112]	@ (8005990 <StoreEEPROM+0x88>)
 800591e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005922:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005924:	bf00      	nop
 8005926:	4b1a      	ldr	r3, [pc, #104]	@ (8005990 <StoreEEPROM+0x88>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800592e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005932:	d0f8      	beq.n	8005926 <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005934:	bf00      	nop
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <StoreEEPROM+0x8c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d0fb      	beq.n	8005936 <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fe64 	bl	8004612 <EE_WriteVariable32bits>
 800594a:	4603      	mov	r3, r0
 800594c:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 800594e:	463a      	mov	r2, r7
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fe37 	bl	80045c8 <EE_ReadVariable32bits>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	4313      	orrs	r3, r2
 8005962:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <StoreEEPROM+0x7a>
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <StoreEEPROM+0x8c>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f7fe fefa 	bl	800476c <EE_CleanUp_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4313      	orrs	r3, r2
 8005980:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005982:	f009 f911 	bl	800eba8 <HAL_FLASH_Lock>

  return eeStatus;
 8005986:	89fb      	ldrh	r3, [r7, #14]

    */



}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	58004000 	.word	0x58004000
 8005994:	20000980 	.word	0x20000980

08005998 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d82f      	bhi.n	8005a08 <switchLedOn+0x70>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <switchLedOn+0x18>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059f7 	.word	0x080059f7
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <switchLedOn+0x7c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <switchLedOn+0x80>)
 80059c6:	8811      	ldrh	r1, [r2, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	4618      	mov	r0, r3
 80059cc:	f009 fc28 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 80059d0:	e01b      	b.n	8005a0a <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <switchLedOn+0x84>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <switchLedOn+0x88>)
 80059d8:	8811      	ldrh	r1, [r2, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f009 fc1f 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 80059e2:	e012      	b.n	8005a0a <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <switchLedOn+0x8c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <switchLedOn+0x90>)
 80059ea:	8811      	ldrh	r1, [r2, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f009 fc16 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 80059f4:	e009      	b.n	8005a0a <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <switchLedOn+0x94>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <switchLedOn+0x98>)
 80059fc:	8811      	ldrh	r1, [r2, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f009 fc0d 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 8005a06:	e000      	b.n	8005a0a <switchLedOn+0x72>
      default: break;
 8005a08:	bf00      	nop
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000ce8 	.word	0x20000ce8
 8005a18:	20000ce6 	.word	0x20000ce6
 8005a1c:	20000cf0 	.word	0x20000cf0
 8005a20:	20000cec 	.word	0x20000cec
 8005a24:	20000cf8 	.word	0x20000cf8
 8005a28:	20000cf4 	.word	0x20000cf4
 8005a2c:	20000d00 	.word	0x20000d00
 8005a30:	20000cfc 	.word	0x20000cfc

08005a34 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d82f      	bhi.n	8005aa4 <switchLedOff+0x70>
 8005a44:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <switchLedOff+0x18>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6f 	.word	0x08005a6f
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a93 	.word	0x08005a93
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a5c:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <switchLedOff+0x7c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a14      	ldr	r2, [pc, #80]	@ (8005ab4 <switchLedOff+0x80>)
 8005a62:	8811      	ldrh	r1, [r2, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f009 fbda 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 8005a6c:	e01b      	b.n	8005aa6 <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <switchLedOff+0x84>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a12      	ldr	r2, [pc, #72]	@ (8005abc <switchLedOff+0x88>)
 8005a74:	8811      	ldrh	r1, [r2, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f009 fbd1 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 8005a7e:	e012      	b.n	8005aa6 <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <switchLedOff+0x8c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac4 <switchLedOff+0x90>)
 8005a86:	8811      	ldrh	r1, [r2, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f009 fbc8 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 8005a90:	e009      	b.n	8005aa6 <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <switchLedOff+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0d      	ldr	r2, [pc, #52]	@ (8005acc <switchLedOff+0x98>)
 8005a98:	8811      	ldrh	r1, [r2, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f009 fbbf 	bl	800f220 <HAL_GPIO_WritePin>
          break;
 8005aa2:	e000      	b.n	8005aa6 <switchLedOff+0x72>
      default: break;
 8005aa4:	bf00      	nop
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000ce8 	.word	0x20000ce8
 8005ab4:	20000ce6 	.word	0x20000ce6
 8005ab8:	20000cf0 	.word	0x20000cf0
 8005abc:	20000cec 	.word	0x20000cec
 8005ac0:	20000cf8 	.word	0x20000cf8
 8005ac4:	20000cf4 	.word	0x20000cf4
 8005ac8:	20000d00 	.word	0x20000d00
 8005acc:	20000cfc 	.word	0x20000cfc

08005ad0 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005ada:	4b39      	ldr	r3, [pc, #228]	@ (8005bc0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d068      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d103      	bne.n	8005af6 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005aee:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005af4:	e05f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005af6:	4b35      	ldr	r3, [pc, #212]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d11c      	bne.n	8005b3a <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005b00:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_GPIO_EXTI_Callback+0x100>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a31      	ldr	r2, [pc, #196]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f009 fb70 	bl	800f1f0 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b20:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005b22:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_EXTI_Callback+0x62>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7ff ff34 	bl	8005998 <switchLedOn>
}
 8005b30:	e041      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7ff ff7e 	bl	8005a34 <switchLedOff>
}
 8005b38:	e03d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005b3a:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <HAL_GPIO_EXTI_Callback+0x108>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d038      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d103      	bne.n	8005b56 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b4e:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <HAL_GPIO_EXTI_Callback+0x110>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
}
 8005b54:	e02f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b56:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11c      	bne.n	8005b9a <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b60:	4b21      	ldr	r3, [pc, #132]	@ (8005be8 <HAL_GPIO_EXTI_Callback+0x118>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f009 fb40 	bl	800f1f0 <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b80:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b82:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_EXTI_Callback+0xc2>
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7ff ff04 	bl	8005998 <switchLedOn>
}
 8005b90:	e011      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7ff ff4e 	bl	8005a34 <switchLedOff>
}
 8005b98:	e00d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d008      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_GPIO_EXTI_Callback+0x124>)
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	429a      	cmp	r2, r3
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000c56 	.word	0x20000c56
 8005bc4:	20000c5e 	.word	0x20000c5e
 8005bc8:	20000d1f 	.word	0x20000d1f
 8005bcc:	20000c66 	.word	0x20000c66
 8005bd0:	20000c68 	.word	0x20000c68
 8005bd4:	20000d1e 	.word	0x20000d1e
 8005bd8:	20000c74 	.word	0x20000c74
 8005bdc:	20000c7e 	.word	0x20000c7e
 8005be0:	20000d1d 	.word	0x20000d1d
 8005be4:	20000c86 	.word	0x20000c86
 8005be8:	20000c88 	.word	0x20000c88
 8005bec:	20000d1c 	.word	0x20000d1c
 8005bf0:	20000cc4 	.word	0x20000cc4
 8005bf4:	20000cce 	.word	0x20000cce
 8005bf8:	20000cd6 	.word	0x20000cd6

08005bfc <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d140      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005c10:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c18:	6013      	str	r3, [r2, #0]
    decSec++;
 8005c1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c24:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005c26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d117      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005c34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f009 fb02 	bl	800f250 <HAL_GPIO_TogglePin>
 8005c4c:	e007      	b.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c54:	8812      	ldrh	r2, [r2, #0]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f009 faf9 	bl	800f250 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	0899      	lsrs	r1, r3, #2
 8005c7e:	460b      	mov	r3, r1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200005d0 	.word	0x200005d0
 8005ca0:	20000d20 	.word	0x20000d20
 8005ca4:	20000d24 	.word	0x20000d24
 8005ca8:	20000a50 	.word	0x20000a50
 8005cac:	20000cf8 	.word	0x20000cf8
 8005cb0:	20000cf4 	.word	0x20000cf4
 8005cb4:	20000d00 	.word	0x20000d00
 8005cb8:	20000cfc 	.word	0x20000cfc
 8005cbc:	20000d25 	.word	0x20000d25
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	20000d26 	.word	0x20000d26

08005cc8 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005cd2:	f008 ff47 	bl	800eb64 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005cd6:	492f      	ldr	r1, [pc, #188]	@ (8005d94 <eepromDefaults+0xcc>)
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fe fc9a 	bl	8004612 <EE_WriteVariable32bits>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <eepromDefaults+0x3e>
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <eepromDefaults+0xd0>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f7fe fd38 	bl	800476c <EE_CleanUp_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d06:	bf00      	nop
 8005d08:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1fb      	bne.n	8005d08 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005d10:	4922      	ldr	r1, [pc, #136]	@ (8005d9c <eepromDefaults+0xd4>)
 8005d12:	2002      	movs	r0, #2
 8005d14:	f7fe fc7d 	bl	8004612 <EE_WriteVariable32bits>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <eepromDefaults+0x78>
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f7fe fd1b 	bl	800476c <EE_CleanUp_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d40:	bf00      	nop
 8005d42:	4b15      	ldr	r3, [pc, #84]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1fb      	bne.n	8005d42 <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	f7fe fc60 	bl	8004612 <EE_WriteVariable32bits>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <eepromDefaults+0xb2>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f7fe fcfe 	bl	800476c <EE_CleanUp_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d7a:	bf00      	nop
 8005d7c:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1fb      	bne.n	8005d7c <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d84:	f008 ff10 	bl	800eba8 <HAL_FLASH_Lock>

  return eeStatus;
 8005d88:	88fb      	ldrh	r3, [r7, #6]

}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	50616c61 	.word	0x50616c61
 8005d98:	20000980 	.word	0x20000980
 8005d9c:	746f7621 	.word	0x746f7621

08005da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005daa:	f008 fc1f 	bl	800e5ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dae:	f000 f8bb 	bl	8005f28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005db2:	f000 f925 	bl	8006000 <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005db6:	f000 fb67 	bl	8006488 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005dba:	f000 fa13 	bl	80061e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005dbe:	f000 fa4f 	bl	8006260 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005dc2:	f000 f987 	bl	80060d4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005dc6:	f000 fb37 	bl	8006438 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005dca:	f000 f9cf 	bl	800616c <MX_PKA_Init>
  MX_RTC_Init();
 8005dce:	f000 f9e1 	bl	8006194 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005dd2:	f000 f933 	bl	800603c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005dd6:	f000 fa81 	bl	80062dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2004      	movs	r0, #4
 8005de0:	f008 fd89 	bl	800e8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005de4:	2004      	movs	r0, #4
 8005de6:	f008 fda0 	bl	800e92a <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005dea:	f008 febb 	bl	800eb64 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005dee:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <main+0x164>)
 8005df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005df4:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005df6:	bf00      	nop
 8005df8:	4b42      	ldr	r3, [pc, #264]	@ (8005f04 <main+0x164>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e04:	d0f8      	beq.n	8005df8 <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005e06:	4b40      	ldr	r3, [pc, #256]	@ (8005f08 <main+0x168>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005e14:	2000      	movs	r0, #0
 8005e16:	f7fd fe4d 	bl	8003ab4 <EE_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <main+0xb8>
 8005e24:	f000 ffbe 	bl	8006da4 <Error_Handler>
 8005e28:	e016      	b.n	8005e58 <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005e2a:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <main+0x168>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005e32:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <main+0x168>)
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e3e:	4b32      	ldr	r3, [pc, #200]	@ (8005f08 <main+0x168>)
 8005e40:	2204      	movs	r2, #4
 8005e42:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7fd fe35 	bl	8003ab4 <EE_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <main+0xb8>
 8005e54:	f000 ffa6 	bl	8006da4 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e58:	f7ff fd32 	bl	80058c0 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <main+0x16c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	@ (8005f10 <main+0x170>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d104      	bne.n	8005e70 <main+0xd0>
 8005e66:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <main+0x16c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f14 <main+0x174>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d005      	beq.n	8005e7c <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e70:	f7ff ff2a 	bl	8005cc8 <eepromDefaults>
 8005e74:	4603      	mov	r3, r0
 8005e76:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e78:	f7ff fd22 	bl	80058c0 <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e7c:	f008 fe94 	bl	800eba8 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7ff fd89 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e86:	20fa      	movs	r0, #250	@ 0xfa
 8005e88:	f008 fc36 	bl	800e6f8 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7ff fdd1 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f7ff fd80 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e98:	20fa      	movs	r0, #250	@ 0xfa
 8005e9a:	f008 fc2d 	bl	800e6f8 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f7ff fdc8 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f7ff fd77 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005eaa:	20fa      	movs	r0, #250	@ 0xfa
 8005eac:	f008 fc24 	bl	800e6f8 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005eb0:	2002      	movs	r0, #2
 8005eb2:	f7ff fdbf 	bl	8005a34 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	f7ff fd6e 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005ebc:	20fa      	movs	r0, #250	@ 0xfa
 8005ebe:	f008 fc1b 	bl	800e6f8 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005ec2:	2003      	movs	r0, #3
 8005ec4:	f7ff fdb6 	bl	8005a34 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005ec8:	4813      	ldr	r0, [pc, #76]	@ (8005f18 <main+0x178>)
 8005eca:	f00c f903 	bl	80120d4 <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005ece:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <main+0x17c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <main+0x180>)
 8005ed4:	8811      	ldrh	r1, [r2, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f009 f9a1 	bl	800f220 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fb f8a0 	bl	8001024 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb f89d 	bl	8001024 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <main+0x184>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7fb f896 	bl	8001024 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ef8:	f001 f880 	bl	8006ffc <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005efc:	f001 fa4a 	bl	8007394 <PCU_Tasks>
 8005f00:	e7fc      	b.n	8005efc <main+0x15c>
 8005f02:	bf00      	nop
 8005f04:	58004000 	.word	0x58004000
 8005f08:	58000400 	.word	0x58000400
 8005f0c:	20000984 	.word	0x20000984
 8005f10:	50616c61 	.word	0x50616c61
 8005f14:	746f7621 	.word	0x746f7621
 8005f18:	200005d0 	.word	0x200005d0
 8005f1c:	20000d10 	.word	0x20000d10
 8005f20:	20000d0c 	.word	0x20000d0c
 8005f24:	20000a50 	.word	0x20000a50

08005f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b09a      	sub	sp, #104	@ 0x68
 8005f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f2e:	f107 0320 	add.w	r3, r7, #32
 8005f32:	2248      	movs	r2, #72	@ 0x48
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f00f f93b 	bl	80151b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	615a      	str	r2, [r3, #20]
 8005f4c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f4e:	f009 fb07 	bl	800f560 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f52:	2010      	movs	r0, #16
 8005f54:	f7ff fb42 	bl	80055dc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f58:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f74:	2307      	movs	r3, #7
 8005f76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f88:	2340      	movs	r3, #64	@ 0x40
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f90:	2303      	movs	r3, #3
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f94:	2310      	movs	r3, #16
 8005f96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005fa2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005fa6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f009 fe68 	bl	800fc88 <HAL_RCC_OscConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005fbe:	f000 fef1 	bl	8006da4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005fc2:	236f      	movs	r3, #111	@ 0x6f
 8005fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	2103      	movs	r1, #3
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00a f9c4 	bl	8010370 <HAL_RCC_ClockConfig>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fee:	f000 fed9 	bl	8006da4 <Error_Handler>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3768      	adds	r7, #104	@ 0x68
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	58000400 	.word	0x58000400

08006000 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b094      	sub	sp, #80	@ 0x50
 8006004:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006006:	463b      	mov	r3, r7
 8006008:	2250      	movs	r2, #80	@ 0x50
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f00f f8d0 	bl	80151b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8006012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006016:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006018:	2302      	movs	r3, #2
 800601a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800601c:	2310      	movs	r3, #16
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006020:	463b      	mov	r3, r7
 8006022:	4618      	mov	r0, r3
 8006024:	f00a fde1 	bl	8010bea <HAL_RCCEx_PeriphCLKConfig>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800602e:	f000 feb9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006032:	bf00      	nop
 8006034:	3750      	adds	r7, #80	@ 0x50
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006040:	4b22      	ldr	r3, [pc, #136]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <MX_LPUART1_UART_Init+0x94>)
 8006044:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800604c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800604e:	4b1f      	ldr	r3, [pc, #124]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006054:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006056:	2200      	movs	r2, #0
 8006058:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800605a:	4b1c      	ldr	r3, [pc, #112]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006060:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006062:	220c      	movs	r2, #12
 8006064:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006066:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800606e:	2200      	movs	r2, #0
 8006070:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006074:	2200      	movs	r2, #0
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006078:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006080:	2200      	movs	r2, #0
 8006082:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006084:	4811      	ldr	r0, [pc, #68]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006086:	f00d f8d5 	bl	8013234 <HAL_UART_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006090:	f000 fe88 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006094:	2100      	movs	r1, #0
 8006096:	480d      	ldr	r0, [pc, #52]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006098:	f00e f9c7 	bl	801442a <HAL_UARTEx_SetTxFifoThreshold>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060a2:	f000 fe7f 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060a6:	2100      	movs	r1, #0
 80060a8:	4808      	ldr	r0, [pc, #32]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060aa:	f00e f9fc 	bl	80144a6 <HAL_UARTEx_SetRxFifoThreshold>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80060b4:	f000 fe76 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80060b8:	4804      	ldr	r0, [pc, #16]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060ba:	f00e f97d 	bl	80143b8 <HAL_UARTEx_DisableFifoMode>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80060c4:	f000 fe6e 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200003b0 	.word	0x200003b0
 80060d0:	40008000 	.word	0x40008000

080060d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060d8:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060da:	4a23      	ldr	r2, [pc, #140]	@ (8006168 <MX_USART1_UART_Init+0x94>)
 80060dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060de:	4b21      	ldr	r3, [pc, #132]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060fa:	220c      	movs	r2, #12
 80060fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060fe:	4b19      	ldr	r3, [pc, #100]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006100:	2200      	movs	r2, #0
 8006102:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006104:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800610a:	4b16      	ldr	r3, [pc, #88]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800610c:	2200      	movs	r2, #0
 800610e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006110:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006112:	2200      	movs	r2, #0
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006118:	2200      	movs	r2, #0
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800611c:	4811      	ldr	r0, [pc, #68]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800611e:	f00d f889 	bl	8013234 <HAL_UART_Init>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006128:	f000 fe3c 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800612c:	2100      	movs	r1, #0
 800612e:	480d      	ldr	r0, [pc, #52]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006130:	f00e f97b 	bl	801442a <HAL_UARTEx_SetTxFifoThreshold>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800613a:	f000 fe33 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800613e:	2100      	movs	r1, #0
 8006140:	4808      	ldr	r0, [pc, #32]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006142:	f00e f9b0 	bl	80144a6 <HAL_UARTEx_SetRxFifoThreshold>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800614c:	f000 fe2a 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006150:	4804      	ldr	r0, [pc, #16]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006152:	f00e f931 	bl	80143b8 <HAL_UARTEx_DisableFifoMode>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800615c:	f000 fe22 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000444 	.word	0x20000444
 8006168:	40013800 	.word	0x40013800

0800616c <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8006170:	4b06      	ldr	r3, [pc, #24]	@ (800618c <MX_PKA_Init+0x20>)
 8006172:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <MX_PKA_Init+0x24>)
 8006174:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8006176:	4805      	ldr	r0, [pc, #20]	@ (800618c <MX_PKA_Init+0x20>)
 8006178:	f009 f9c3 	bl	800f502 <HAL_PKA_Init>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8006182:	f000 fe0f 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200004d8 	.word	0x200004d8
 8006190:	58002000 	.word	0x58002000

08006194 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <MX_RTC_Init+0x48>)
 800619a:	4a11      	ldr	r2, [pc, #68]	@ (80061e0 <MX_RTC_Init+0x4c>)
 800619c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a6:	227f      	movs	r2, #127	@ 0x7f
 80061a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061aa:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ac:	22ff      	movs	r2, #255	@ 0xff
 80061ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061bc:	4b07      	ldr	r3, [pc, #28]	@ (80061dc <MX_RTC_Init+0x48>)
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <MX_RTC_Init+0x48>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061c8:	4804      	ldr	r0, [pc, #16]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ca:	f00a ff95 	bl	80110f8 <HAL_RTC_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061d4:	f000 fde6 	bl	8006da4 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 80061d8:	bf00      	nop
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	200004e4 	.word	0x200004e4
 80061e0:	40002800 	.word	0x40002800

080061e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061ea:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <MX_SPI1_Init+0x78>)
 80061ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061fc:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006202:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <MX_SPI1_Init+0x74>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006210:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006216:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_SPI1_Init+0x74>)
 800621a:	2208      	movs	r2, #8
 800621c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006220:	2200      	movs	r2, #0
 8006222:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <MX_SPI1_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006232:	2207      	movs	r2, #7
 8006234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_SPI1_Init+0x74>)
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006244:	f00b fac7 	bl	80117d6 <HAL_SPI_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800624e:	f000 fda9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000508 	.word	0x20000508
 800625c:	40013000 	.word	0x40013000

08006260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006266:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <MX_SPI2_Init+0x78>)
 8006268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800626a:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800626c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006272:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006278:	4b16      	ldr	r3, [pc, #88]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800627a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800627e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800628c:	4b11      	ldr	r3, [pc, #68]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800628e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006292:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800629a:	4b0e      	ldr	r3, [pc, #56]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ae:	2207      	movs	r2, #7
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ba:	2208      	movs	r2, #8
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062be:	4805      	ldr	r0, [pc, #20]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062c0:	f00b fa89 	bl	80117d6 <HAL_SPI_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80062ca:	f000 fd6b 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000056c 	.word	0x2000056c
 80062d8:	40003800 	.word	0x40003800

080062dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	@ 0x70
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]
 800630c:	615a      	str	r2, [r3, #20]
 800630e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	2234      	movs	r2, #52	@ 0x34
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f00e ff4b 	bl	80151b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800631c:	4b44      	ldr	r3, [pc, #272]	@ (8006430 <MX_TIM1_Init+0x154>)
 800631e:	4a45      	ldr	r2, [pc, #276]	@ (8006434 <MX_TIM1_Init+0x158>)
 8006320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006324:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006328:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632a:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <MX_TIM1_Init+0x154>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8006330:	4b3f      	ldr	r3, [pc, #252]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006332:	2263      	movs	r2, #99	@ 0x63
 8006334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006336:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800633c:	4b3c      	ldr	r3, [pc, #240]	@ (8006430 <MX_TIM1_Init+0x154>)
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006342:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006348:	4839      	ldr	r0, [pc, #228]	@ (8006430 <MX_TIM1_Init+0x154>)
 800634a:	f00b fe5f 	bl	801200c <HAL_TIM_Base_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006354:	f000 fd26 	bl	8006da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800635c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800635e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006362:	4619      	mov	r1, r3
 8006364:	4832      	ldr	r0, [pc, #200]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006366:	f00c f92d 	bl	80125c4 <HAL_TIM_ConfigClockSource>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006370:	f000 fd18 	bl	8006da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006374:	482e      	ldr	r0, [pc, #184]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006376:	f00b fefb 	bl	8012170 <HAL_TIM_OC_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006380:	f000 fd10 	bl	8006da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006384:	2300      	movs	r3, #0
 8006386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006388:	2300      	movs	r3, #0
 800638a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006394:	4619      	mov	r1, r3
 8006396:	4826      	ldr	r0, [pc, #152]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006398:	f00c fe14 	bl	8012fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80063a2:	f000 fcff 	bl	8006da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063ae:	2300      	movs	r3, #0
 80063b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063b2:	2300      	movs	r3, #0
 80063b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063c6:	2200      	movs	r2, #0
 80063c8:	4619      	mov	r1, r3
 80063ca:	4819      	ldr	r0, [pc, #100]	@ (8006430 <MX_TIM1_Init+0x154>)
 80063cc:	f00c f880 	bl	80124d0 <HAL_TIM_OC_ConfigChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80063d6:	f000 fce5 	bl	8006da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063f8:	2300      	movs	r3, #0
 80063fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800640a:	2300      	movs	r3, #0
 800640c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4806      	ldr	r0, [pc, #24]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006418:	f00c fe34 	bl	8013084 <HAL_TIMEx_ConfigBreakDeadTime>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8006422:	f000 fcbf 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006426:	bf00      	nop
 8006428:	3770      	adds	r7, #112	@ 0x70
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	200005d0 	.word	0x200005d0
 8006434:	40012c00 	.word	0x40012c00

08006438 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800643e:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <MX_USB_PCD_Init+0x4c>)
 8006440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006444:	2208      	movs	r2, #8
 8006446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800644a:	2202      	movs	r2, #2
 800644c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006450:	2202      	movs	r2, #2
 8006452:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006456:	2200      	movs	r2, #0
 8006458:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800645c:	2200      	movs	r2, #0
 800645e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006468:	2200      	movs	r2, #0
 800646a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800646c:	4804      	ldr	r0, [pc, #16]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800646e:	f008 ff45 	bl	800f2fc <HAL_PCD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006478:	f000 fc94 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	2000068c 	.word	0x2000068c
 8006484:	40006800 	.word	0x40006800

08006488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800649c:	4b9d      	ldr	r3, [pc, #628]	@ (8006714 <MX_GPIO_Init+0x28c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 81c5 	bne.w	8006830 <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 80064a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006718 <MX_GPIO_Init+0x290>)
 80064a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ac:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 80064ae:	4b9b      	ldr	r3, [pc, #620]	@ (800671c <MX_GPIO_Init+0x294>)
 80064b0:	4a9b      	ldr	r2, [pc, #620]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064b2:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80064b4:	4b9b      	ldr	r3, [pc, #620]	@ (8006724 <MX_GPIO_Init+0x29c>)
 80064b6:	2217      	movs	r2, #23
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 80064ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 80064bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c0:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 80064c2:	4b9a      	ldr	r3, [pc, #616]	@ (800672c <MX_GPIO_Init+0x2a4>)
 80064c4:	4a96      	ldr	r2, [pc, #600]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064c6:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80064c8:	4b99      	ldr	r3, [pc, #612]	@ (8006730 <MX_GPIO_Init+0x2a8>)
 80064ca:	2217      	movs	r2, #23
 80064cc:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80064ce:	4b99      	ldr	r3, [pc, #612]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80064d4:	4b98      	ldr	r3, [pc, #608]	@ (8006738 <MX_GPIO_Init+0x2b0>)
 80064d6:	4a99      	ldr	r2, [pc, #612]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064d8:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80064da:	4b99      	ldr	r3, [pc, #612]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80064dc:	2208      	movs	r2, #8
 80064de:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064e0:	4b98      	ldr	r3, [pc, #608]	@ (8006744 <MX_GPIO_Init+0x2bc>)
 80064e2:	4a96      	ldr	r2, [pc, #600]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064e4:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064e6:	4b98      	ldr	r3, [pc, #608]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80064e8:	2220      	movs	r2, #32
 80064ea:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064ec:	4b97      	ldr	r3, [pc, #604]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80064ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80064f2:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064f4:	4b96      	ldr	r3, [pc, #600]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 80064f6:	2210      	movs	r2, #16
 80064f8:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064fa:	4b96      	ldr	r3, [pc, #600]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80064fc:	4a8f      	ldr	r2, [pc, #572]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064fe:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006500:	4b95      	ldr	r3, [pc, #596]	@ (8006758 <MX_GPIO_Init+0x2d0>)
 8006502:	220a      	movs	r2, #10
 8006504:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 8006506:	4b95      	ldr	r3, [pc, #596]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006508:	2220      	movs	r2, #32
 800650a:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 800650c:	4b94      	ldr	r3, [pc, #592]	@ (8006760 <MX_GPIO_Init+0x2d8>)
 800650e:	4a8b      	ldr	r2, [pc, #556]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006510:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 8006512:	4b94      	ldr	r3, [pc, #592]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 8006514:	2201      	movs	r2, #1
 8006516:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006518:	4b93      	ldr	r3, [pc, #588]	@ (8006768 <MX_GPIO_Init+0x2e0>)
 800651a:	4a81      	ldr	r2, [pc, #516]	@ (8006720 <MX_GPIO_Init+0x298>)
 800651c:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 800651e:	4b93      	ldr	r3, [pc, #588]	@ (800676c <MX_GPIO_Init+0x2e4>)
 8006520:	2202      	movs	r2, #2
 8006522:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006524:	4b92      	ldr	r3, [pc, #584]	@ (8006770 <MX_GPIO_Init+0x2e8>)
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006528:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 800652a:	4b92      	ldr	r3, [pc, #584]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800652c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006530:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 8006532:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <MX_GPIO_Init+0x2f0>)
 8006534:	4a7a      	ldr	r2, [pc, #488]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006536:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006538:	4b90      	ldr	r3, [pc, #576]	@ (800677c <MX_GPIO_Init+0x2f4>)
 800653a:	2228      	movs	r2, #40	@ 0x28
 800653c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 800653e:	4b90      	ldr	r3, [pc, #576]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006544:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 8006546:	4b8f      	ldr	r3, [pc, #572]	@ (8006784 <MX_GPIO_Init+0x2fc>)
 8006548:	4a75      	ldr	r2, [pc, #468]	@ (8006720 <MX_GPIO_Init+0x298>)
 800654a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800654c:	4b8e      	ldr	r3, [pc, #568]	@ (8006788 <MX_GPIO_Init+0x300>)
 800654e:	2228      	movs	r2, #40	@ 0x28
 8006550:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 8006552:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <MX_GPIO_Init+0x304>)
 8006554:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006558:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 800655a:	4b8d      	ldr	r3, [pc, #564]	@ (8006790 <MX_GPIO_Init+0x308>)
 800655c:	4a70      	ldr	r2, [pc, #448]	@ (8006720 <MX_GPIO_Init+0x298>)
 800655e:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006560:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <MX_GPIO_Init+0x30c>)
 8006562:	2228      	movs	r2, #40	@ 0x28
 8006564:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 8006566:	4b8c      	ldr	r3, [pc, #560]	@ (8006798 <MX_GPIO_Init+0x310>)
 8006568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800656c:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 800656e:	4b8b      	ldr	r3, [pc, #556]	@ (800679c <MX_GPIO_Init+0x314>)
 8006570:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006574:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006576:	4b8a      	ldr	r3, [pc, #552]	@ (80067a0 <MX_GPIO_Init+0x318>)
 8006578:	2228      	movs	r2, #40	@ 0x28
 800657a:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 800657c:	4b89      	ldr	r3, [pc, #548]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 800657e:	2201      	movs	r2, #1
 8006580:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 8006582:	4b89      	ldr	r3, [pc, #548]	@ (80067a8 <MX_GPIO_Init+0x320>)
 8006584:	4a89      	ldr	r2, [pc, #548]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006586:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006588:	4b89      	ldr	r3, [pc, #548]	@ (80067b0 <MX_GPIO_Init+0x328>)
 800658a:	2206      	movs	r2, #6
 800658c:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 800658e:	4b89      	ldr	r3, [pc, #548]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006590:	2202      	movs	r2, #2
 8006592:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006594:	4b88      	ldr	r3, [pc, #544]	@ (80067b8 <MX_GPIO_Init+0x330>)
 8006596:	4a85      	ldr	r2, [pc, #532]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006598:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <MX_GPIO_Init+0x334>)
 800659c:	2207      	movs	r2, #7
 800659e:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 80065a0:	4b87      	ldr	r3, [pc, #540]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80065a2:	2220      	movs	r2, #32
 80065a4:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 80065a6:	4b87      	ldr	r3, [pc, #540]	@ (80067c4 <MX_GPIO_Init+0x33c>)
 80065a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006720 <MX_GPIO_Init+0x298>)
 80065aa:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ac:	2004      	movs	r0, #4
 80065ae:	f7ff f82b 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b2:	2002      	movs	r0, #2
 80065b4:	f7ff f828 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b8:	2001      	movs	r0, #1
 80065ba:	f7ff f825 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065be:	2008      	movs	r0, #8
 80065c0:	f7ff f822 	bl	8005608 <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80065c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	4b5d      	ldr	r3, [pc, #372]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	4b62      	ldr	r3, [pc, #392]	@ (800675c <MX_GPIO_Init+0x2d4>)
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	4857      	ldr	r0, [pc, #348]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80065de:	f008 fe1f 	bl	800f220 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065e2:	4b5a      	ldr	r3, [pc, #360]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a58      	ldr	r2, [pc, #352]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80065e8:	8811      	ldrh	r1, [r2, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f008 fe17 	bl	800f220 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	4b5d      	ldr	r3, [pc, #372]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	4b70      	ldr	r3, [pc, #448]	@ (80067c0 <MX_GPIO_Init+0x338>)
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	2200      	movs	r2, #0
 8006608:	4619      	mov	r1, r3
 800660a:	4845      	ldr	r0, [pc, #276]	@ (8006720 <MX_GPIO_Init+0x298>)
 800660c:	f008 fe08 	bl	800f220 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 8006610:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <MX_GPIO_Init+0x290>)
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	4b44      	ldr	r3, [pc, #272]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	4b55      	ldr	r3, [pc, #340]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	b29a      	uxth	r2, r3
 8006624:	4b56      	ldr	r3, [pc, #344]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	4b57      	ldr	r3, [pc, #348]	@ (800678c <MX_GPIO_Init+0x304>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 8006634:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006636:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800663a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4836      	ldr	r0, [pc, #216]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006646:	f008 fc63 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800664a:	4b3a      	ldr	r3, [pc, #232]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	4b3c      	ldr	r3, [pc, #240]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	b29a      	uxth	r2, r3
 8006656:	4b41      	ldr	r3, [pc, #260]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006660:	2301      	movs	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4832      	ldr	r0, [pc, #200]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006672:	f008 fc4d 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006676:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667c:	2301      	movs	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8006688:	4b30      	ldr	r3, [pc, #192]	@ (800674c <MX_GPIO_Init+0x2c4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	1d3a      	adds	r2, r7, #4
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f008 fc3d 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 8006696:	4b2e      	ldr	r3, [pc, #184]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800669c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80066a0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066a2:	2301      	movs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80066a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	1d3a      	adds	r2, r7, #4
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f008 fc2e 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80066b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	4b2c      	ldr	r3, [pc, #176]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	4b3f      	ldr	r3, [pc, #252]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ca:	2301      	movs	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4811      	ldr	r0, [pc, #68]	@ (8006720 <MX_GPIO_Init+0x298>)
 80066dc:	f008 fc18 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <MX_GPIO_Init+0x310>)
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <MX_GPIO_Init+0x314>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	1d3a      	adds	r2, r7, #4
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f008 fc09 	bl	800ef10 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800670c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006710:	e05a      	b.n	80067c8 <MX_GPIO_Init+0x340>
 8006712:	bf00      	nop
 8006714:	20000a50 	.word	0x20000a50
 8006718:	20000c5e 	.word	0x20000c5e
 800671c:	20000c60 	.word	0x20000c60
 8006720:	48000400 	.word	0x48000400
 8006724:	20000c64 	.word	0x20000c64
 8006728:	20000c66 	.word	0x20000c66
 800672c:	20000c68 	.word	0x20000c68
 8006730:	20000c6c 	.word	0x20000c6c
 8006734:	20000cb4 	.word	0x20000cb4
 8006738:	20000cb8 	.word	0x20000cb8
 800673c:	48000800 	.word	0x48000800
 8006740:	20000cbc 	.word	0x20000cbc
 8006744:	20000cc0 	.word	0x20000cc0
 8006748:	20000c6e 	.word	0x20000c6e
 800674c:	20000c70 	.word	0x20000c70
 8006750:	20000cc4 	.word	0x20000cc4
 8006754:	20000cc8 	.word	0x20000cc8
 8006758:	20000ccc 	.word	0x20000ccc
 800675c:	20000c8e 	.word	0x20000c8e
 8006760:	20000c90 	.word	0x20000c90
 8006764:	20000ce6 	.word	0x20000ce6
 8006768:	20000ce8 	.word	0x20000ce8
 800676c:	20000cec 	.word	0x20000cec
 8006770:	20000cf0 	.word	0x20000cf0
 8006774:	20000c74 	.word	0x20000c74
 8006778:	20000c78 	.word	0x20000c78
 800677c:	20000c7c 	.word	0x20000c7c
 8006780:	20000c7e 	.word	0x20000c7e
 8006784:	20000c80 	.word	0x20000c80
 8006788:	20000c84 	.word	0x20000c84
 800678c:	20000c86 	.word	0x20000c86
 8006790:	20000c88 	.word	0x20000c88
 8006794:	20000c8c 	.word	0x20000c8c
 8006798:	20000c56 	.word	0x20000c56
 800679c:	20000c58 	.word	0x20000c58
 80067a0:	20000c5c 	.word	0x20000c5c
 80067a4:	20000cce 	.word	0x20000cce
 80067a8:	20000cd0 	.word	0x20000cd0
 80067ac:	48000c00 	.word	0x48000c00
 80067b0:	20000cd4 	.word	0x20000cd4
 80067b4:	20000cd6 	.word	0x20000cd6
 80067b8:	20000cd8 	.word	0x20000cd8
 80067bc:	20000cdc 	.word	0x20000cdc
 80067c0:	20000cf4 	.word	0x20000cf4
 80067c4:	20000cf8 	.word	0x20000cf8
 80067c8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4816      	ldr	r0, [pc, #88]	@ (800682c <MX_GPIO_Init+0x3a4>)
 80067d4:	f008 fb9c 	bl	800ef10 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	2006      	movs	r0, #6
 80067de:	f008 f88a 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067e2:	2006      	movs	r0, #6
 80067e4:	f008 f8a1 	bl	800e92a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	2007      	movs	r0, #7
 80067ee:	f008 f882 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067f2:	2007      	movs	r0, #7
 80067f4:	f008 f899 	bl	800e92a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	2100      	movs	r1, #0
 80067fc:	200a      	movs	r0, #10
 80067fe:	f008 f87a 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006802:	200a      	movs	r0, #10
 8006804:	f008 f891 	bl	800e92a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	2017      	movs	r0, #23
 800680e:	f008 f872 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006812:	2017      	movs	r0, #23
 8006814:	f008 f889 	bl	800e92a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	2028      	movs	r0, #40	@ 0x28
 800681e:	f008 f86a 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006822:	2028      	movs	r0, #40	@ 0x28
 8006824:	f008 f881 	bl	800e92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 8006828:	e290      	b.n	8006d4c <MX_GPIO_Init+0x8c4>
 800682a:	bf00      	nop
 800682c:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006830:	4b9d      	ldr	r3, [pc, #628]	@ (8006aa8 <MX_GPIO_Init+0x620>)
 8006832:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 8006838:	4b9c      	ldr	r3, [pc, #624]	@ (8006aac <MX_GPIO_Init+0x624>)
 800683a:	4a9d      	ldr	r2, [pc, #628]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800683c:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800683e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ab4 <MX_GPIO_Init+0x62c>)
 8006840:	2228      	movs	r2, #40	@ 0x28
 8006842:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006844:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006846:	2240      	movs	r2, #64	@ 0x40
 8006848:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800684a:	4b9c      	ldr	r3, [pc, #624]	@ (8006abc <MX_GPIO_Init+0x634>)
 800684c:	4a9c      	ldr	r2, [pc, #624]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800684e:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006850:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac4 <MX_GPIO_Init+0x63c>)
 8006852:	2217      	movs	r2, #23
 8006854:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006856:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006858:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800685c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 800685e:	4b9b      	ldr	r3, [pc, #620]	@ (8006acc <MX_GPIO_Init+0x644>)
 8006860:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006864:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006866:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad0 <MX_GPIO_Init+0x648>)
 8006868:	2228      	movs	r2, #40	@ 0x28
 800686a:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800686c:	4b99      	ldr	r3, [pc, #612]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 800686e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006872:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006874:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <MX_GPIO_Init+0x650>)
 8006876:	4a8e      	ldr	r2, [pc, #568]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006878:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800687a:	4b98      	ldr	r3, [pc, #608]	@ (8006adc <MX_GPIO_Init+0x654>)
 800687c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006880:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006882:	4b97      	ldr	r3, [pc, #604]	@ (8006ae0 <MX_GPIO_Init+0x658>)
 8006884:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006886:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006888:	4b96      	ldr	r3, [pc, #600]	@ (8006ae4 <MX_GPIO_Init+0x65c>)
 800688a:	2228      	movs	r2, #40	@ 0x28
 800688c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 800688e:	4b96      	ldr	r3, [pc, #600]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006894:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 8006896:	4b95      	ldr	r3, [pc, #596]	@ (8006aec <MX_GPIO_Init+0x664>)
 8006898:	4a89      	ldr	r2, [pc, #548]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800689a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800689c:	4b94      	ldr	r3, [pc, #592]	@ (8006af0 <MX_GPIO_Init+0x668>)
 800689e:	2228      	movs	r2, #40	@ 0x28
 80068a0:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80068a2:	4b94      	ldr	r3, [pc, #592]	@ (8006af4 <MX_GPIO_Init+0x66c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80068a8:	4b93      	ldr	r3, [pc, #588]	@ (8006af8 <MX_GPIO_Init+0x670>)
 80068aa:	4a94      	ldr	r2, [pc, #592]	@ (8006afc <MX_GPIO_Init+0x674>)
 80068ac:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80068ae:	4b94      	ldr	r3, [pc, #592]	@ (8006b00 <MX_GPIO_Init+0x678>)
 80068b0:	2206      	movs	r2, #6
 80068b2:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80068b4:	4b93      	ldr	r3, [pc, #588]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 80068b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068ba:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80068bc:	4b92      	ldr	r3, [pc, #584]	@ (8006b08 <MX_GPIO_Init+0x680>)
 80068be:	4a80      	ldr	r2, [pc, #512]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80068c0:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <MX_GPIO_Init+0x684>)
 80068c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068c8:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80068ca:	4b91      	ldr	r3, [pc, #580]	@ (8006b10 <MX_GPIO_Init+0x688>)
 80068cc:	4a78      	ldr	r2, [pc, #480]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068ce:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80068d0:	4b90      	ldr	r3, [pc, #576]	@ (8006b14 <MX_GPIO_Init+0x68c>)
 80068d2:	2217      	movs	r2, #23
 80068d4:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80068d6:	4b90      	ldr	r3, [pc, #576]	@ (8006b18 <MX_GPIO_Init+0x690>)
 80068d8:	2210      	movs	r2, #16
 80068da:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068dc:	4b8f      	ldr	r3, [pc, #572]	@ (8006b1c <MX_GPIO_Init+0x694>)
 80068de:	4a74      	ldr	r2, [pc, #464]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068e0:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006b20 <MX_GPIO_Init+0x698>)
 80068e4:	220a      	movs	r2, #10
 80068e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b24 <MX_GPIO_Init+0x69c>)
 80068ea:	2220      	movs	r2, #32
 80068ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006b28 <MX_GPIO_Init+0x6a0>)
 80068f0:	4a6f      	ldr	r2, [pc, #444]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068f2:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068f4:	4b8d      	ldr	r3, [pc, #564]	@ (8006b2c <MX_GPIO_Init+0x6a4>)
 80068f6:	2217      	movs	r2, #23
 80068f8:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 80068fc:	2202      	movs	r2, #2
 80068fe:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006900:	4b8c      	ldr	r3, [pc, #560]	@ (8006b34 <MX_GPIO_Init+0x6ac>)
 8006902:	4a7e      	ldr	r2, [pc, #504]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006904:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006906:	4b8c      	ldr	r3, [pc, #560]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 8006908:	2201      	movs	r2, #1
 800690a:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800690c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b3c <MX_GPIO_Init+0x6b4>)
 800690e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006910:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006912:	4b8b      	ldr	r3, [pc, #556]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 8006914:	2208      	movs	r2, #8
 8006916:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 8006918:	4b8a      	ldr	r3, [pc, #552]	@ (8006b44 <MX_GPIO_Init+0x6bc>)
 800691a:	4a69      	ldr	r2, [pc, #420]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800691c:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 800691e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b48 <MX_GPIO_Init+0x6c0>)
 8006920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006924:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006926:	4b89      	ldr	r3, [pc, #548]	@ (8006b4c <MX_GPIO_Init+0x6c4>)
 8006928:	4a61      	ldr	r2, [pc, #388]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800692a:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800692c:	4b88      	ldr	r3, [pc, #544]	@ (8006b50 <MX_GPIO_Init+0x6c8>)
 800692e:	2228      	movs	r2, #40	@ 0x28
 8006930:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 8006932:	4b88      	ldr	r3, [pc, #544]	@ (8006b54 <MX_GPIO_Init+0x6cc>)
 8006934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006938:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800693a:	4b87      	ldr	r3, [pc, #540]	@ (8006b58 <MX_GPIO_Init+0x6d0>)
 800693c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800693e:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 8006940:	4b86      	ldr	r3, [pc, #536]	@ (8006b5c <MX_GPIO_Init+0x6d4>)
 8006942:	2228      	movs	r2, #40	@ 0x28
 8006944:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 8006946:	4b86      	ldr	r3, [pc, #536]	@ (8006b60 <MX_GPIO_Init+0x6d8>)
 8006948:	2204      	movs	r2, #4
 800694a:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800694c:	4b85      	ldr	r3, [pc, #532]	@ (8006b64 <MX_GPIO_Init+0x6dc>)
 800694e:	4a58      	ldr	r2, [pc, #352]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006950:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006952:	4b85      	ldr	r3, [pc, #532]	@ (8006b68 <MX_GPIO_Init+0x6e0>)
 8006954:	2208      	movs	r2, #8
 8006956:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 8006958:	4b84      	ldr	r3, [pc, #528]	@ (8006b6c <MX_GPIO_Init+0x6e4>)
 800695a:	2220      	movs	r2, #32
 800695c:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 800695e:	4b84      	ldr	r3, [pc, #528]	@ (8006b70 <MX_GPIO_Init+0x6e8>)
 8006960:	4a57      	ldr	r2, [pc, #348]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006962:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006964:	4b83      	ldr	r3, [pc, #524]	@ (8006b74 <MX_GPIO_Init+0x6ec>)
 8006966:	2217      	movs	r2, #23
 8006968:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 800696a:	4b83      	ldr	r3, [pc, #524]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 800696c:	2201      	movs	r2, #1
 800696e:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006970:	4b82      	ldr	r3, [pc, #520]	@ (8006b7c <MX_GPIO_Init+0x6f4>)
 8006972:	4a4f      	ldr	r2, [pc, #316]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006974:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 8006976:	4b82      	ldr	r3, [pc, #520]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006978:	2202      	movs	r2, #2
 800697a:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 800697c:	4b81      	ldr	r3, [pc, #516]	@ (8006b84 <MX_GPIO_Init+0x6fc>)
 800697e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006980:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 8006982:	4b81      	ldr	r3, [pc, #516]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006984:	2210      	movs	r2, #16
 8006986:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 8006988:	4b80      	ldr	r3, [pc, #512]	@ (8006b8c <MX_GPIO_Init+0x704>)
 800698a:	4a81      	ldr	r2, [pc, #516]	@ (8006b90 <MX_GPIO_Init+0x708>)
 800698c:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 800698e:	4b81      	ldr	r3, [pc, #516]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006994:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 8006996:	4b80      	ldr	r3, [pc, #512]	@ (8006b98 <MX_GPIO_Init+0x710>)
 8006998:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800699a:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 800699c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b9c <MX_GPIO_Init+0x714>)
 800699e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a2:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 80069a4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba0 <MX_GPIO_Init+0x718>)
 80069a6:	4a42      	ldr	r2, [pc, #264]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80069a8:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 80069aa:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba4 <MX_GPIO_Init+0x71c>)
 80069ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80069b0:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 80069b2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ba8 <MX_GPIO_Init+0x720>)
 80069b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069b8:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 80069ba:	4b7c      	ldr	r3, [pc, #496]	@ (8006bac <MX_GPIO_Init+0x724>)
 80069bc:	2210      	movs	r2, #16
 80069be:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 80069c0:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <MX_GPIO_Init+0x728>)
 80069c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069c6:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c8:	2001      	movs	r0, #1
 80069ca:	f7fe fe1d 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ce:	2002      	movs	r0, #2
 80069d0:	f7fe fe1a 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069d4:	2004      	movs	r0, #4
 80069d6:	f7fe fe17 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069da:	2008      	movs	r0, #8
 80069dc:	f7fe fe14 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069e0:	2010      	movs	r0, #16
 80069e2:	f7fe fe11 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069e6:	4b54      	ldr	r3, [pc, #336]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	4b55      	ldr	r3, [pc, #340]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2201      	movs	r2, #1
 80069f4:	4619      	mov	r1, r3
 80069f6:	4832      	ldr	r0, [pc, #200]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80069f8:	f008 fc12 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069fc:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	482a      	ldr	r0, [pc, #168]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a06:	f008 fc0b 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4619      	mov	r1, r3
 8006a12:	482b      	ldr	r0, [pc, #172]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a14:	f008 fc04 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 8006a18:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4836      	ldr	r0, [pc, #216]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006a22:	f008 fbfd 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 8006a26:	4b54      	ldr	r3, [pc, #336]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	4b55      	ldr	r3, [pc, #340]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b58      	ldr	r3, [pc, #352]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	481c      	ldr	r0, [pc, #112]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a40:	f008 fbee 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a44:	4b50      	ldr	r3, [pc, #320]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4850      	ldr	r0, [pc, #320]	@ (8006b90 <MX_GPIO_Init+0x708>)
 8006a4e:	f008 fbe7 	bl	800f220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a52:	4b56      	ldr	r3, [pc, #344]	@ (8006bac <MX_GPIO_Init+0x724>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a5e:	f008 fbdf 	bl	800f220 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a62:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <MX_GPIO_Init+0x654>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a78:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	480e      	ldr	r0, [pc, #56]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a88:	f008 fa42 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a92:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a96:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	1d3b      	adds	r3, r7, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006aa4:	e086      	b.n	8006bb4 <MX_GPIO_Init+0x72c>
 8006aa6:	bf00      	nop
 8006aa8:	20000c56 	.word	0x20000c56
 8006aac:	20000c58 	.word	0x20000c58
 8006ab0:	48000400 	.word	0x48000400
 8006ab4:	20000c5c 	.word	0x20000c5c
 8006ab8:	20000c5e 	.word	0x20000c5e
 8006abc:	20000c60 	.word	0x20000c60
 8006ac0:	48000800 	.word	0x48000800
 8006ac4:	20000c64 	.word	0x20000c64
 8006ac8:	20000c66 	.word	0x20000c66
 8006acc:	20000c68 	.word	0x20000c68
 8006ad0:	20000c6c 	.word	0x20000c6c
 8006ad4:	20000c6e 	.word	0x20000c6e
 8006ad8:	20000c70 	.word	0x20000c70
 8006adc:	20000c74 	.word	0x20000c74
 8006ae0:	20000c78 	.word	0x20000c78
 8006ae4:	20000c7c 	.word	0x20000c7c
 8006ae8:	20000c7e 	.word	0x20000c7e
 8006aec:	20000c80 	.word	0x20000c80
 8006af0:	20000c84 	.word	0x20000c84
 8006af4:	20000c86 	.word	0x20000c86
 8006af8:	20000c88 	.word	0x20000c88
 8006afc:	48000c00 	.word	0x48000c00
 8006b00:	20000c8c 	.word	0x20000c8c
 8006b04:	20000c8e 	.word	0x20000c8e
 8006b08:	20000c90 	.word	0x20000c90
 8006b0c:	20000c94 	.word	0x20000c94
 8006b10:	20000c98 	.word	0x20000c98
 8006b14:	20000c9c 	.word	0x20000c9c
 8006b18:	20000c9e 	.word	0x20000c9e
 8006b1c:	20000ca0 	.word	0x20000ca0
 8006b20:	20000ca4 	.word	0x20000ca4
 8006b24:	20000ca6 	.word	0x20000ca6
 8006b28:	20000ca8 	.word	0x20000ca8
 8006b2c:	20000cac 	.word	0x20000cac
 8006b30:	20000cae 	.word	0x20000cae
 8006b34:	20000cb0 	.word	0x20000cb0
 8006b38:	20000cb4 	.word	0x20000cb4
 8006b3c:	20000cb8 	.word	0x20000cb8
 8006b40:	20000cbc 	.word	0x20000cbc
 8006b44:	20000cc0 	.word	0x20000cc0
 8006b48:	20000cc4 	.word	0x20000cc4
 8006b4c:	20000cc8 	.word	0x20000cc8
 8006b50:	20000ccc 	.word	0x20000ccc
 8006b54:	20000cce 	.word	0x20000cce
 8006b58:	20000cd0 	.word	0x20000cd0
 8006b5c:	20000cd4 	.word	0x20000cd4
 8006b60:	20000cd6 	.word	0x20000cd6
 8006b64:	20000cd8 	.word	0x20000cd8
 8006b68:	20000cdc 	.word	0x20000cdc
 8006b6c:	20000cde 	.word	0x20000cde
 8006b70:	20000ce0 	.word	0x20000ce0
 8006b74:	20000ce4 	.word	0x20000ce4
 8006b78:	20000ce6 	.word	0x20000ce6
 8006b7c:	20000ce8 	.word	0x20000ce8
 8006b80:	20000cec 	.word	0x20000cec
 8006b84:	20000cf0 	.word	0x20000cf0
 8006b88:	20000cf4 	.word	0x20000cf4
 8006b8c:	20000cf8 	.word	0x20000cf8
 8006b90:	48001000 	.word	0x48001000
 8006b94:	20000cfc 	.word	0x20000cfc
 8006b98:	20000d00 	.word	0x20000d00
 8006b9c:	20000d04 	.word	0x20000d04
 8006ba0:	20000d08 	.word	0x20000d08
 8006ba4:	20000d0c 	.word	0x20000d0c
 8006ba8:	20000d10 	.word	0x20000d10
 8006bac:	20000d14 	.word	0x20000d14
 8006bb0:	20000d18 	.word	0x20000d18
 8006bb4:	f008 f9ac 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006bb8:	4b66      	ldr	r3, [pc, #408]	@ (8006d54 <MX_GPIO_Init+0x8cc>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006bc2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4862      	ldr	r0, [pc, #392]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006bce:	f008 f99f 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006bd2:	4b62      	ldr	r3, [pc, #392]	@ (8006d5c <MX_GPIO_Init+0x8d4>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006bd8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bde:	2301      	movs	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	485e      	ldr	r0, [pc, #376]	@ (8006d60 <MX_GPIO_Init+0x8d8>)
 8006be8:	f008 f992 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bec:	4b5d      	ldr	r3, [pc, #372]	@ (8006d64 <MX_GPIO_Init+0x8dc>)
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <MX_GPIO_Init+0x8e0>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d6c <MX_GPIO_Init+0x8e4>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c02:	2301      	movs	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4857      	ldr	r0, [pc, #348]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c14:	f008 f97c 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006c18:	4b56      	ldr	r3, [pc, #344]	@ (8006d74 <MX_GPIO_Init+0x8ec>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	484a      	ldr	r0, [pc, #296]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c30:	f008 f96e 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006c34:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <MX_GPIO_Init+0x8f0>)
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <MX_GPIO_Init+0x8f4>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	4b4f      	ldr	r3, [pc, #316]	@ (8006d80 <MX_GPIO_Init+0x8f8>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c50:	2301      	movs	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	483f      	ldr	r0, [pc, #252]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c5a:	f008 f959 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c5e:	4b49      	ldr	r3, [pc, #292]	@ (8006d84 <MX_GPIO_Init+0x8fc>)
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c68:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c6e:	1d3b      	adds	r3, r7, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	483f      	ldr	r0, [pc, #252]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c74:	f008 f94c 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c78:	4b43      	ldr	r3, [pc, #268]	@ (8006d88 <MX_GPIO_Init+0x900>)
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <MX_GPIO_Init+0x904>)
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b42      	ldr	r3, [pc, #264]	@ (8006d90 <MX_GPIO_Init+0x908>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	482e      	ldr	r0, [pc, #184]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006ca0:	f008 f936 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <MX_GPIO_Init+0x90c>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006caa:	2301      	movs	r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4837      	ldr	r0, [pc, #220]	@ (8006d98 <MX_GPIO_Init+0x910>)
 8006cbc:	f008 f928 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006cc0:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <MX_GPIO_Init+0x914>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cda:	f008 f919 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006cde:	4b30      	ldr	r3, [pc, #192]	@ (8006da0 <MX_GPIO_Init+0x918>)
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cf8:	f008 f90a 	bl	800ef10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2006      	movs	r0, #6
 8006d02:	f007 fdf8 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006d06:	2006      	movs	r0, #6
 8006d08:	f007 fe0f 	bl	800e92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2008      	movs	r0, #8
 8006d12:	f007 fdf0 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d16:	2008      	movs	r0, #8
 8006d18:	f007 fe07 	bl	800e92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	200a      	movs	r0, #10
 8006d22:	f007 fde8 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006d26:	200a      	movs	r0, #10
 8006d28:	f007 fdff 	bl	800e92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2017      	movs	r0, #23
 8006d32:	f007 fde0 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d36:	2017      	movs	r0, #23
 8006d38:	f007 fdf7 	bl	800e92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2028      	movs	r0, #40	@ 0x28
 8006d42:	f007 fdd8 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d46:	2028      	movs	r0, #40	@ 0x28
 8006d48:	f007 fdef 	bl	800e92a <HAL_NVIC_EnableIRQ>
}
 8006d4c:	bf00      	nop
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000c56 	.word	0x20000c56
 8006d58:	48000400 	.word	0x48000400
 8006d5c:	20000c86 	.word	0x20000c86
 8006d60:	48000c00 	.word	0x48000c00
 8006d64:	20000cb4 	.word	0x20000cb4
 8006d68:	20000cbc 	.word	0x20000cbc
 8006d6c:	20000c8e 	.word	0x20000c8e
 8006d70:	48000800 	.word	0x48000800
 8006d74:	20000c6e 	.word	0x20000c6e
 8006d78:	20000cc4 	.word	0x20000cc4
 8006d7c:	20000cce 	.word	0x20000cce
 8006d80:	20000cd6 	.word	0x20000cd6
 8006d84:	20000cde 	.word	0x20000cde
 8006d88:	20000ce6 	.word	0x20000ce6
 8006d8c:	20000cec 	.word	0x20000cec
 8006d90:	20000cfc 	.word	0x20000cfc
 8006d94:	20000cf4 	.word	0x20000cf4
 8006d98:	48001000 	.word	0x48001000
 8006d9c:	20000d0c 	.word	0x20000d0c
 8006da0:	20000d14 	.word	0x20000d14

08006da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006da8:	4904      	ldr	r1, [pc, #16]	@ (8006dbc <Error_Handler+0x18>)
 8006daa:	4805      	ldr	r0, [pc, #20]	@ (8006dc0 <Error_Handler+0x1c>)
 8006dac:	f00e f99a 	bl	80150e4 <siprintf>
 8006db0:	4803      	ldr	r0, [pc, #12]	@ (8006dc0 <Error_Handler+0x1c>)
 8006db2:	f7fe fc43 	bl	800563c <serialOut>
  return;
 8006db6:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	08018cbc 	.word	0x08018cbc
 8006dc0:	20000b5c 	.word	0x20000b5c

08006dc4 <MCU_ShouldLogMessage>:

/***************************************************************************************************************
*     M C U _ S h o u l d L o g M e s s a g e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
static bool MCU_ShouldLogMessage(uint16_t messageId, bool isTx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460a      	mov	r2, r1
 8006dce:	80fb      	strh	r3, [r7, #6]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	717b      	strb	r3, [r7, #5]
  // Check if general COMMS debug is enabled
  if((debugLevel & DBG_COMMS) == 0) return false;
 8006dd4:	4b87      	ldr	r3, [pc, #540]	@ (8006ff4 <MCU_ShouldLogMessage+0x230>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <MCU_ShouldLogMessage+0x20>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e100      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
  
  // Map message IDs to debug flags
  switch(messageId){
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8006dea:	2b1f      	cmp	r3, #31
 8006dec:	f200 80fa 	bhi.w	8006fe4 <MCU_ShouldLogMessage+0x220>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <MCU_ShouldLogMessage+0x34>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e8d 	.word	0x08006e8d
 8006dfc:	08006f2d 	.word	0x08006f2d
 8006e00:	08006ec9 	.word	0x08006ec9
 8006e04:	08006edd 	.word	0x08006edd
 8006e08:	08006ef1 	.word	0x08006ef1
 8006e0c:	08006f41 	.word	0x08006f41
 8006e10:	08006f7d 	.word	0x08006f7d
 8006e14:	08006f55 	.word	0x08006f55
 8006e18:	08006f69 	.word	0x08006f69
 8006e1c:	08006fe5 	.word	0x08006fe5
 8006e20:	08006fe5 	.word	0x08006fe5
 8006e24:	08006fe5 	.word	0x08006fe5
 8006e28:	08006fe5 	.word	0x08006fe5
 8006e2c:	08006fe5 	.word	0x08006fe5
 8006e30:	08006fe5 	.word	0x08006fe5
 8006e34:	08006fe5 	.word	0x08006fe5
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006f19 	.word	0x08006f19
 8006e40:	08006eb5 	.word	0x08006eb5
 8006e44:	08006fe5 	.word	0x08006fe5
 8006e48:	08006f05 	.word	0x08006f05
 8006e4c:	08006fe5 	.word	0x08006fe5
 8006e50:	08006f91 	.word	0x08006f91
 8006e54:	08006fa5 	.word	0x08006fa5
 8006e58:	08006fa9 	.word	0x08006fa9
 8006e5c:	08006fe5 	.word	0x08006fe5
 8006e60:	08006fe5 	.word	0x08006fe5
 8006e64:	08006fe5 	.word	0x08006fe5
 8006e68:	08006fe5 	.word	0x08006fe5
 8006e6c:	08006e79 	.word	0x08006e79
 8006e70:	08006fd1 	.word	0x08006fd1
 8006e74:	08006fbd 	.word	0x08006fbd
    case ID_MODULE_ANNOUNCE_REQUEST:  return (debugMessages & DBG_MSG_ANNOUNCE_REQ) != 0;
 8006e78:	4b5f      	ldr	r3, [pc, #380]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e0ac      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ANNOUNCEMENT:      return (debugMessages & DBG_MSG_ANNOUNCE) != 0;
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e0a2      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_REGISTRATION:      return (debugMessages & DBG_MSG_REGISTRATION) != 0;
 8006ea0:	4b55      	ldr	r3, [pc, #340]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e098      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_REQUEST:    return (debugMessages & DBG_MSG_STATUS_REQ) != 0;
 8006eb4:	4b50      	ldr	r3, [pc, #320]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e08e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_1:          return (debugMessages & DBG_MSG_STATUS1) != 0;
 8006ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	e084      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_2:          return (debugMessages & DBG_MSG_STATUS2) != 0;
 8006edc:	4b46      	ldr	r3, [pc, #280]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e07a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_3:          return (debugMessages & DBG_MSG_STATUS3) != 0;
 8006ef0:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e070      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATE_CHANGE:      return (debugMessages & DBG_MSG_STATE_CHANGE) != 0;
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e066      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE_REQUEST:  return (debugMessages & DBG_MSG_HARDWARE_REQ) != 0;
 8006f18:	4b37      	ldr	r3, [pc, #220]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e05c      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE:          return (debugMessages & DBG_MSG_HARDWARE) != 0;
 8006f2c:	4b32      	ldr	r3, [pc, #200]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e052      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DETAIL:            return (debugMessages & DBG_MSG_CELL_DETAIL) != 0;
 8006f40:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e048      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS1: return (debugMessages & DBG_MSG_CELL_STATUS1) != 0;
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e03e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS2: return (debugMessages & DBG_MSG_CELL_STATUS2) != 0;
 8006f68:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e034      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_TIME_REQUEST:      return (debugMessages & DBG_MSG_TIME_REQ) != 0;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	e02a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_SET_TIME:          return (debugMessages & DBG_MSG_SET_TIME) != 0;
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e020      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_MAX_STATE:         return false; // Never log 0x517 to prevent flooding
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e01e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DEREGISTER:        return (debugMessages & DBG_MSG_DEREGISTER) != 0;
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e014      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_ISOLATE:       return (debugMessages & DBG_MSG_ISOLATE_ALL) != 0;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e00a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_DEREGISTER:    return (debugMessages & DBG_MSG_DEREGISTER_ALL) != 0;
 8006fd0:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e000      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    default:                          return false; // Unknown messages not logged unless DBG_MSG_ALL
 8006fe4:	2300      	movs	r3, #0
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
 8006ff8:	20000010 	.word	0x20000010

08006ffc <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8007002:	f7fe fc5d 	bl	80058c0 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8007006:	2254      	movs	r2, #84	@ 0x54
 8007008:	2100      	movs	r1, #0
 800700a:	48ac      	ldr	r0, [pc, #688]	@ (80072bc <PCU_Initialize+0x2c0>)
 800700c:	f00e f8d1 	bl	80151b2 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8007010:	4bab      	ldr	r3, [pc, #684]	@ (80072c0 <PCU_Initialize+0x2c4>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4ba9      	ldr	r3, [pc, #676]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007018:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 800701a:	4ba8      	ldr	r3, [pc, #672]	@ (80072bc <PCU_Initialize+0x2c0>)
 800701c:	2200      	movs	r2, #0
 800701e:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8007020:	4ba6      	ldr	r3, [pc, #664]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007022:	2200      	movs	r2, #0
 8007024:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8007026:	4ba5      	ldr	r3, [pc, #660]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 800702c:	4ba3      	ldr	r3, [pc, #652]	@ (80072bc <PCU_Initialize+0x2c0>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8007034:	4ba1      	ldr	r3, [pc, #644]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007036:	2200      	movs	r2, #0
 8007038:	815a      	strh	r2, [r3, #10]
 800703a:	e007      	b.n	800704c <PCU_Initialize+0x50>
  else if (pack.id == 1)
 800703c:	4b9f      	ldr	r3, [pc, #636]	@ (80072bc <PCU_Initialize+0x2c0>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8007044:	4b9d      	ldr	r3, [pc, #628]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800704a:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 800704c:	4b9b      	ldr	r3, [pc, #620]	@ (80072bc <PCU_Initialize+0x2c0>)
 800704e:	2200      	movs	r2, #0
 8007050:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8007052:	4b9a      	ldr	r3, [pc, #616]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007054:	2200      	movs	r2, #0
 8007056:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8007058:	4b98      	ldr	r3, [pc, #608]	@ (80072bc <PCU_Initialize+0x2c0>)
 800705a:	2200      	movs	r2, #0
 800705c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800705e:	4b97      	ldr	r3, [pc, #604]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007060:	2200      	movs	r2, #0
 8007062:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8007064:	4b95      	ldr	r3, [pc, #596]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007066:	2200      	movs	r2, #0
 8007068:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800706a:	4b94      	ldr	r3, [pc, #592]	@ (80072bc <PCU_Initialize+0x2c0>)
 800706c:	2200      	movs	r2, #0
 800706e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8007070:	4b92      	ldr	r3, [pc, #584]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007072:	2200      	movs	r2, #0
 8007074:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8007076:	4b91      	ldr	r3, [pc, #580]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007078:	2200      	movs	r2, #0
 800707a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800707c:	4b8f      	ldr	r3, [pc, #572]	@ (80072bc <PCU_Initialize+0x2c0>)
 800707e:	2200      	movs	r2, #0
 8007080:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 8007082:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007084:	2200      	movs	r2, #0
 8007086:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 8007088:	4b8c      	ldr	r3, [pc, #560]	@ (80072bc <PCU_Initialize+0x2c0>)
 800708a:	2200      	movs	r2, #0
 800708c:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 800708e:	4b8b      	ldr	r3, [pc, #556]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007090:	2200      	movs	r2, #0
 8007092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 8007094:	4b89      	ldr	r3, [pc, #548]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007096:	2200      	movs	r2, #0
 8007098:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 800709a:	4b88      	ldr	r3, [pc, #544]	@ (80072bc <PCU_Initialize+0x2c0>)
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 80070a2:	4b86      	ldr	r3, [pc, #536]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 80070aa:	4b84      	ldr	r3, [pc, #528]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 80070b2:	4b82      	ldr	r3, [pc, #520]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 80070ba:	4b80      	ldr	r3, [pc, #512]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 80070c2:	4b7e      	ldr	r3, [pc, #504]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 80070ca:	4b7c      	ldr	r3, [pc, #496]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 80070d0:	4b7a      	ldr	r3, [pc, #488]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 80070d6:	4b79      	ldr	r3, [pc, #484]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 80070dc:	4b77      	ldr	r3, [pc, #476]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 80070e2:	4b76      	ldr	r3, [pc, #472]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 80070e8:	4b74      	ldr	r3, [pc, #464]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80070f0:	2300      	movs	r3, #0
 80070f2:	71fb      	strb	r3, [r7, #7]
 80070f4:	e00f      	b.n	8007116 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	4a70      	ldr	r2, [pc, #448]	@ (80072c4 <PCU_Initialize+0x2c8>)
 8007102:	4413      	add	r3, r2
 8007104:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f00e f851 	bl	80151b2 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	3301      	adds	r3, #1
 8007114:	71fb      	strb	r3, [r7, #7]
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	2b1f      	cmp	r3, #31
 800711a:	d9ec      	bls.n	80070f6 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 800711c:	486a      	ldr	r0, [pc, #424]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800711e:	f7fe fa8d 	bl	800563c <serialOut>
  serialOut("");
 8007122:	4869      	ldr	r0, [pc, #420]	@ (80072c8 <PCU_Initialize+0x2cc>)
 8007124:	f7fe fa8a 	bl	800563c <serialOut>
  serialOut("        ██    ██");
 8007128:	4868      	ldr	r0, [pc, #416]	@ (80072cc <PCU_Initialize+0x2d0>)
 800712a:	f7fe fa87 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 800712e:	4868      	ldr	r0, [pc, #416]	@ (80072d0 <PCU_Initialize+0x2d4>)
 8007130:	f7fe fa84 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8007134:	4867      	ldr	r0, [pc, #412]	@ (80072d4 <PCU_Initialize+0x2d8>)
 8007136:	f7fe fa81 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800713a:	4867      	ldr	r0, [pc, #412]	@ (80072d8 <PCU_Initialize+0x2dc>)
 800713c:	f7fe fa7e 	bl	800563c <serialOut>
  serialOut("     ██    ██    ██");
 8007140:	4866      	ldr	r0, [pc, #408]	@ (80072dc <PCU_Initialize+0x2e0>)
 8007142:	f7fe fa7b 	bl	800563c <serialOut>
  serialOut("     m o d b a t t");
 8007146:	4866      	ldr	r0, [pc, #408]	@ (80072e0 <PCU_Initialize+0x2e4>)
 8007148:	f7fe fa78 	bl	800563c <serialOut>
  serialOut("");
 800714c:	485e      	ldr	r0, [pc, #376]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800714e:	f7fe fa75 	bl	800563c <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8007152:	2000      	movs	r0, #0
 8007154:	f004 fd72 	bl	800bc3c <CAN_TestRamAccess>
 8007158:	4603      	mov	r3, r0
 800715a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <PCU_Initialize+0x176>
 8007162:	4960      	ldr	r1, [pc, #384]	@ (80072e4 <PCU_Initialize+0x2e8>)
 8007164:	4860      	ldr	r0, [pc, #384]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007166:	f00d ffbd 	bl	80150e4 <siprintf>
 800716a:	485f      	ldr	r0, [pc, #380]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800716c:	f7fe fa66 	bl	800563c <serialOut>
 8007170:	e006      	b.n	8007180 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8007172:	495e      	ldr	r1, [pc, #376]	@ (80072ec <PCU_Initialize+0x2f0>)
 8007174:	485c      	ldr	r0, [pc, #368]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007176:	f00d ffb5 	bl	80150e4 <siprintf>
 800717a:	485b      	ldr	r0, [pc, #364]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800717c:	f7fe fa5e 	bl	800563c <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8007180:	2000      	movs	r0, #0
 8007182:	f004 fce1 	bl	800bb48 <CAN_TestRegisterAccess>
 8007186:	4603      	mov	r3, r0
 8007188:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800718a:	79bb      	ldrb	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <PCU_Initialize+0x1a4>
 8007190:	4957      	ldr	r1, [pc, #348]	@ (80072f0 <PCU_Initialize+0x2f4>)
 8007192:	4855      	ldr	r0, [pc, #340]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007194:	f00d ffa6 	bl	80150e4 <siprintf>
 8007198:	4853      	ldr	r0, [pc, #332]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800719a:	f7fe fa4f 	bl	800563c <serialOut>
 800719e:	e006      	b.n	80071ae <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 80071a0:	4954      	ldr	r1, [pc, #336]	@ (80072f4 <PCU_Initialize+0x2f8>)
 80071a2:	4851      	ldr	r0, [pc, #324]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071a4:	f00d ff9e 	bl	80150e4 <siprintf>
 80071a8:	484f      	ldr	r0, [pc, #316]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071aa:	f7fe fa47 	bl	800563c <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80071ae:	4952      	ldr	r1, [pc, #328]	@ (80072f8 <PCU_Initialize+0x2fc>)
 80071b0:	484d      	ldr	r0, [pc, #308]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b2:	f00d ff97 	bl	80150e4 <siprintf>
 80071b6:	484c      	ldr	r0, [pc, #304]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b8:	f7fe fa40 	bl	800563c <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 80071bc:	4b4f      	ldr	r3, [pc, #316]	@ (80072fc <PCU_Initialize+0x300>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d135      	bne.n	8007230 <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f004 fd39 	bl	800bc3c <CAN_TestRamAccess>
 80071ca:	4603      	mov	r3, r0
 80071cc:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <PCU_Initialize+0x1e8>
 80071d4:	494a      	ldr	r1, [pc, #296]	@ (8007300 <PCU_Initialize+0x304>)
 80071d6:	4844      	ldr	r0, [pc, #272]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071d8:	f00d ff84 	bl	80150e4 <siprintf>
 80071dc:	4842      	ldr	r0, [pc, #264]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071de:	f7fe fa2d 	bl	800563c <serialOut>
 80071e2:	e006      	b.n	80071f2 <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 80071e4:	4947      	ldr	r1, [pc, #284]	@ (8007304 <PCU_Initialize+0x308>)
 80071e6:	4840      	ldr	r0, [pc, #256]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071e8:	f00d ff7c 	bl	80150e4 <siprintf>
 80071ec:	483e      	ldr	r0, [pc, #248]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071ee:	f7fe fa25 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 80071f2:	2001      	movs	r0, #1
 80071f4:	f004 fca8 	bl	800bb48 <CAN_TestRegisterAccess>
 80071f8:	4603      	mov	r3, r0
 80071fa:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <PCU_Initialize+0x216>
 8007202:	4941      	ldr	r1, [pc, #260]	@ (8007308 <PCU_Initialize+0x30c>)
 8007204:	4838      	ldr	r0, [pc, #224]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007206:	f00d ff6d 	bl	80150e4 <siprintf>
 800720a:	4837      	ldr	r0, [pc, #220]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800720c:	f7fe fa16 	bl	800563c <serialOut>
 8007210:	e006      	b.n	8007220 <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007212:	493e      	ldr	r1, [pc, #248]	@ (800730c <PCU_Initialize+0x310>)
 8007214:	4834      	ldr	r0, [pc, #208]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007216:	f00d ff65 	bl	80150e4 <siprintf>
 800721a:	4833      	ldr	r0, [pc, #204]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800721c:	f7fe fa0e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007220:	4935      	ldr	r1, [pc, #212]	@ (80072f8 <PCU_Initialize+0x2fc>)
 8007222:	4831      	ldr	r0, [pc, #196]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007224:	f00d ff5e 	bl	80150e4 <siprintf>
 8007228:	482f      	ldr	r0, [pc, #188]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800722a:	f7fe fa07 	bl	800563c <serialOut>
 800722e:	e09e      	b.n	800736e <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8007230:	2001      	movs	r0, #1
 8007232:	f004 fd03 	bl	800bc3c <CAN_TestRamAccess>
 8007236:	4603      	mov	r3, r0
 8007238:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 800723a:	79bb      	ldrb	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <PCU_Initialize+0x254>
 8007240:	4933      	ldr	r1, [pc, #204]	@ (8007310 <PCU_Initialize+0x314>)
 8007242:	4829      	ldr	r0, [pc, #164]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007244:	f00d ff4e 	bl	80150e4 <siprintf>
 8007248:	4827      	ldr	r0, [pc, #156]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800724a:	f7fe f9f7 	bl	800563c <serialOut>
 800724e:	e006      	b.n	800725e <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007250:	4930      	ldr	r1, [pc, #192]	@ (8007314 <PCU_Initialize+0x318>)
 8007252:	4825      	ldr	r0, [pc, #148]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007254:	f00d ff46 	bl	80150e4 <siprintf>
 8007258:	4823      	ldr	r0, [pc, #140]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800725a:	f7fe f9ef 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 800725e:	2001      	movs	r0, #1
 8007260:	f004 fc72 	bl	800bb48 <CAN_TestRegisterAccess>
 8007264:	4603      	mov	r3, r0
 8007266:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8007268:	79bb      	ldrb	r3, [r7, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <PCU_Initialize+0x282>
 800726e:	492a      	ldr	r1, [pc, #168]	@ (8007318 <PCU_Initialize+0x31c>)
 8007270:	481d      	ldr	r0, [pc, #116]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007272:	f00d ff37 	bl	80150e4 <siprintf>
 8007276:	481c      	ldr	r0, [pc, #112]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007278:	f7fe f9e0 	bl	800563c <serialOut>
 800727c:	e006      	b.n	800728c <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 800727e:	4927      	ldr	r1, [pc, #156]	@ (800731c <PCU_Initialize+0x320>)
 8007280:	4819      	ldr	r0, [pc, #100]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007282:	f00d ff2f 	bl	80150e4 <siprintf>
 8007286:	4818      	ldr	r0, [pc, #96]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007288:	f7fe f9d8 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 800728c:	491a      	ldr	r1, [pc, #104]	@ (80072f8 <PCU_Initialize+0x2fc>)
 800728e:	4816      	ldr	r0, [pc, #88]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007290:	f00d ff28 	bl	80150e4 <siprintf>
 8007294:	4814      	ldr	r0, [pc, #80]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007296:	f7fe f9d1 	bl	800563c <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 800729a:	2002      	movs	r0, #2
 800729c:	f004 fcce 	bl	800bc3c <CAN_TestRamAccess>
 80072a0:	4603      	mov	r3, r0
 80072a2:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 80072a4:	79bb      	ldrb	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03c      	beq.n	8007324 <PCU_Initialize+0x328>
 80072aa:	491d      	ldr	r1, [pc, #116]	@ (8007320 <PCU_Initialize+0x324>)
 80072ac:	480e      	ldr	r0, [pc, #56]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072ae:	f00d ff19 	bl	80150e4 <siprintf>
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072b4:	f7fe f9c2 	bl	800563c <serialOut>
 80072b8:	e03b      	b.n	8007332 <PCU_Initialize+0x336>
 80072ba:	bf00      	nop
 80072bc:	2000a6ec 	.word	0x2000a6ec
 80072c0:	20000984 	.word	0x20000984
 80072c4:	20000dec 	.word	0x20000dec
 80072c8:	08018ccc 	.word	0x08018ccc
 80072cc:	08018cd0 	.word	0x08018cd0
 80072d0:	08018cec 	.word	0x08018cec
 80072d4:	08018d14 	.word	0x08018d14
 80072d8:	08018d64 	.word	0x08018d64
 80072dc:	08018db4 	.word	0x08018db4
 80072e0:	08018dd4 	.word	0x08018dd4
 80072e4:	08018de8 	.word	0x08018de8
 80072e8:	20000b5c 	.word	0x20000b5c
 80072ec:	08018e18 	.word	0x08018e18
 80072f0:	08018e50 	.word	0x08018e50
 80072f4:	08018e80 	.word	0x08018e80
 80072f8:	08018eb8 	.word	0x08018eb8
 80072fc:	20000a50 	.word	0x20000a50
 8007300:	08018ebc 	.word	0x08018ebc
 8007304:	08018eec 	.word	0x08018eec
 8007308:	08018f24 	.word	0x08018f24
 800730c:	08018f54 	.word	0x08018f54
 8007310:	08018f8c 	.word	0x08018f8c
 8007314:	08018fbc 	.word	0x08018fbc
 8007318:	08018ff4 	.word	0x08018ff4
 800731c:	08019024 	.word	0x08019024
 8007320:	0801905c 	.word	0x0801905c
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007324:	4915      	ldr	r1, [pc, #84]	@ (800737c <PCU_Initialize+0x380>)
 8007326:	4816      	ldr	r0, [pc, #88]	@ (8007380 <PCU_Initialize+0x384>)
 8007328:	f00d fedc 	bl	80150e4 <siprintf>
 800732c:	4814      	ldr	r0, [pc, #80]	@ (8007380 <PCU_Initialize+0x384>)
 800732e:	f7fe f985 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 8007332:	2002      	movs	r0, #2
 8007334:	f004 fc08 	bl	800bb48 <CAN_TestRegisterAccess>
 8007338:	4603      	mov	r3, r0
 800733a:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 800733c:	79bb      	ldrb	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <PCU_Initialize+0x356>
 8007342:	4910      	ldr	r1, [pc, #64]	@ (8007384 <PCU_Initialize+0x388>)
 8007344:	480e      	ldr	r0, [pc, #56]	@ (8007380 <PCU_Initialize+0x384>)
 8007346:	f00d fecd 	bl	80150e4 <siprintf>
 800734a:	480d      	ldr	r0, [pc, #52]	@ (8007380 <PCU_Initialize+0x384>)
 800734c:	f7fe f976 	bl	800563c <serialOut>
 8007350:	e006      	b.n	8007360 <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007352:	490d      	ldr	r1, [pc, #52]	@ (8007388 <PCU_Initialize+0x38c>)
 8007354:	480a      	ldr	r0, [pc, #40]	@ (8007380 <PCU_Initialize+0x384>)
 8007356:	f00d fec5 	bl	80150e4 <siprintf>
 800735a:	4809      	ldr	r0, [pc, #36]	@ (8007380 <PCU_Initialize+0x384>)
 800735c:	f7fe f96e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007360:	490a      	ldr	r1, [pc, #40]	@ (800738c <PCU_Initialize+0x390>)
 8007362:	4807      	ldr	r0, [pc, #28]	@ (8007380 <PCU_Initialize+0x384>)
 8007364:	f00d febe 	bl	80150e4 <siprintf>
 8007368:	4805      	ldr	r0, [pc, #20]	@ (8007380 <PCU_Initialize+0x384>)
 800736a:	f7fe f967 	bl	800563c <serialOut>

  }
  appData.state = PC_STATE_INIT;
 800736e:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <PCU_Initialize+0x394>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	0801908c 	.word	0x0801908c
 8007380:	20000b5c 	.word	0x20000b5c
 8007384:	080190c4 	.word	0x080190c4
 8007388:	080190f4 	.word	0x080190f4
 800738c:	08018eb8 	.word	0x08018eb8
 8007390:	20000d28 	.word	0x20000d28

08007394 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b08b      	sub	sp, #44	@ 0x2c
 8007398:	af04      	add	r7, sp, #16
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;
  static uint8_t nextModuleToPoll = 0;
  static lastContact lastStatusPoll = {0, 0};

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800739a:	4b63      	ldr	r3, [pc, #396]	@ (8007528 <PCU_Tasks+0x194>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d12f      	bne.n	8007402 <PCU_Tasks+0x6e>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 80073a2:	2000      	movs	r0, #0
 80073a4:	f000 ff72 	bl	800828c <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 80073a8:	2001      	movs	r0, #1
 80073aa:	f000 ff6f 	bl	800828c <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 80073ae:	f002 f9bf 	bl	8009730 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 80073b2:	f002 f947 	bl	8009644 <MCU_DeRegisterAllModules>
    
    // Always show startup message
    sprintf(tempBuffer,"MCU STARTUP - Pack controller initialized, module count=%d", pack.moduleCount); 
 80073b6:	4b5d      	ldr	r3, [pc, #372]	@ (800752c <PCU_Tasks+0x198>)
 80073b8:	7d1b      	ldrb	r3, [r3, #20]
 80073ba:	461a      	mov	r2, r3
 80073bc:	495c      	ldr	r1, [pc, #368]	@ (8007530 <PCU_Tasks+0x19c>)
 80073be:	485d      	ldr	r0, [pc, #372]	@ (8007534 <PCU_Tasks+0x1a0>)
 80073c0:	f00d fe90 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 80073c4:	485b      	ldr	r0, [pc, #364]	@ (8007534 <PCU_Tasks+0x1a0>)
 80073c6:	f7fe f939 	bl	800563c <serialOut>
    
    // Request module announcements on startup
    MCU_RequestModuleAnnouncement();
 80073ca:	f002 fa0b 	bl	80097e4 <MCU_RequestModuleAnnouncement>
    lastAnnounceRequest.ticks = htim1.Instance->CNT;
 80073ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007538 <PCU_Tasks+0x1a4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	4a59      	ldr	r2, [pc, #356]	@ (800753c <PCU_Tasks+0x1a8>)
 80073d6:	6013      	str	r3, [r2, #0]
    lastAnnounceRequest.overflows = etTimerOverflows;
 80073d8:	4b59      	ldr	r3, [pc, #356]	@ (8007540 <PCU_Tasks+0x1ac>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a57      	ldr	r2, [pc, #348]	@ (800753c <PCU_Tasks+0x1a8>)
 80073de:	6053      	str	r3, [r2, #4]

    pack.vcuRequestedState = packOff;
 80073e0:	4b52      	ldr	r3, [pc, #328]	@ (800752c <PCU_Tasks+0x198>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <PCU_Tasks+0x1ac>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a4f      	ldr	r2, [pc, #316]	@ (800752c <PCU_Tasks+0x198>)
 80073ee:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 80073f0:	4b51      	ldr	r3, [pc, #324]	@ (8007538 <PCU_Tasks+0x1a4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	4a4d      	ldr	r2, [pc, #308]	@ (800752c <PCU_Tasks+0x198>)
 80073f8:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 80073fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007528 <PCU_Tasks+0x194>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e311      	b.n	8007a26 <PCU_Tasks+0x692>

  }else if (appData.state == PC_STATE_RUN){
 8007402:	4b49      	ldr	r3, [pc, #292]	@ (8007528 <PCU_Tasks+0x194>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	f040 830d 	bne.w	8007a26 <PCU_Tasks+0x692>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800740c:	4b4d      	ldr	r3, [pc, #308]	@ (8007544 <PCU_Tasks+0x1b0>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <PCU_Tasks+0x84>
      VCU_ReceiveMessages();
 8007414:	f005 f902 	bl	800c61c <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 8007418:	4b4b      	ldr	r3, [pc, #300]	@ (8007548 <PCU_Tasks+0x1b4>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <PCU_Tasks+0x90>
      MCU_ReceiveMessages();
 8007420:	f001 fcf4 	bl	8008e0c <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 8007424:	f005 fdf2 	bl	800d00c <VCU_TicksSinceLastMessage>
 8007428:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007430:	d920      	bls.n	8007474 <PCU_Tasks+0xe0>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 8007432:	4b3e      	ldr	r3, [pc, #248]	@ (800752c <PCU_Tasks+0x198>)
 8007434:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007438:	2b03      	cmp	r3, #3
 800743a:	d009      	beq.n	8007450 <PCU_Tasks+0xbc>
 800743c:	4b3b      	ldr	r3, [pc, #236]	@ (800752c <PCU_Tasks+0x198>)
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d004      	beq.n	8007450 <PCU_Tasks+0xbc>
 8007446:	4b39      	ldr	r3, [pc, #228]	@ (800752c <PCU_Tasks+0x198>)
 8007448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744c:	2b02      	cmp	r3, #2
 800744e:	d130      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 8007450:	4b3e      	ldr	r3, [pc, #248]	@ (800754c <PCU_Tasks+0x1b8>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0311 	and.w	r3, r3, #17
 8007458:	2b11      	cmp	r3, #17
 800745a:	d106      	bne.n	800746a <PCU_Tasks+0xd6>
 800745c:	493c      	ldr	r1, [pc, #240]	@ (8007550 <PCU_Tasks+0x1bc>)
 800745e:	4835      	ldr	r0, [pc, #212]	@ (8007534 <PCU_Tasks+0x1a0>)
 8007460:	f00d fe40 	bl	80150e4 <siprintf>
 8007464:	4833      	ldr	r0, [pc, #204]	@ (8007534 <PCU_Tasks+0x1a0>)
 8007466:	f7fe f8e9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packOff;
 800746a:	4b30      	ldr	r3, [pc, #192]	@ (800752c <PCU_Tasks+0x198>)
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007472:	e01e      	b.n	80074b2 <PCU_Tasks+0x11e>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800747a:	d91a      	bls.n	80074b2 <PCU_Tasks+0x11e>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 800747c:	4b2b      	ldr	r3, [pc, #172]	@ (800752c <PCU_Tasks+0x198>)
 800747e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007482:	2b03      	cmp	r3, #3
 8007484:	d004      	beq.n	8007490 <PCU_Tasks+0xfc>
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <PCU_Tasks+0x198>)
 8007488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800748c:	2b02      	cmp	r3, #2
 800748e:	d110      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8007490:	4b2e      	ldr	r3, [pc, #184]	@ (800754c <PCU_Tasks+0x1b8>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 0311 	and.w	r3, r3, #17
 8007498:	2b11      	cmp	r3, #17
 800749a:	d106      	bne.n	80074aa <PCU_Tasks+0x116>
 800749c:	492d      	ldr	r1, [pc, #180]	@ (8007554 <PCU_Tasks+0x1c0>)
 800749e:	4825      	ldr	r0, [pc, #148]	@ (8007534 <PCU_Tasks+0x1a0>)
 80074a0:	f00d fe20 	bl	80150e4 <siprintf>
 80074a4:	4823      	ldr	r0, [pc, #140]	@ (8007534 <PCU_Tasks+0x1a0>)
 80074a6:	f7fe f8c9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packStandby;
 80074aa:	4b20      	ldr	r3, [pc, #128]	@ (800752c <PCU_Tasks+0x198>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }
    
    // Send periodic announcement requests
    uint32_t timeSinceLastAnnounce = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
    if ((etTimerOverflows - lastAnnounceRequest.overflows) == 0){
 80074b6:	4b21      	ldr	r3, [pc, #132]	@ (800753c <PCU_Tasks+0x1a8>)
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	4b21      	ldr	r3, [pc, #132]	@ (8007540 <PCU_Tasks+0x1ac>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d107      	bne.n	80074d2 <PCU_Tasks+0x13e>
      timeSinceLastAnnounce = htim1.Instance->CNT - lastAnnounceRequest.ticks;
 80074c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c8:	4b1c      	ldr	r3, [pc, #112]	@ (800753c <PCU_Tasks+0x1a8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e016      	b.n	8007500 <PCU_Tasks+0x16c>
    } else {
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074d2:	4b19      	ldr	r3, [pc, #100]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b19      	ldr	r3, [pc, #100]	@ (800753c <PCU_Tasks+0x1a8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1ad2      	subs	r2, r2, r3
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074dc:	4b16      	ldr	r3, [pc, #88]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4917      	ldr	r1, [pc, #92]	@ (8007540 <PCU_Tasks+0x1ac>)
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	4915      	ldr	r1, [pc, #84]	@ (800753c <PCU_Tasks+0x1a8>)
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	1a41      	subs	r1, r0, r1
 80074ec:	3901      	subs	r1, #1
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074f2:	441a      	add	r2, r3
                              (htim1.Instance->CNT);
 80074f4:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074fa:	4413      	add	r3, r2
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
    }
    
    if(timeSinceLastAnnounce > MCU_ANNOUNCE_REQUEST_INTERVAL){
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007506:	4293      	cmp	r3, r2
 8007508:	d90a      	bls.n	8007520 <PCU_Tasks+0x18c>
      MCU_RequestModuleAnnouncement();
 800750a:	f002 f96b 	bl	80097e4 <MCU_RequestModuleAnnouncement>
      lastAnnounceRequest.ticks = htim1.Instance->CNT;
 800750e:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <PCU_Tasks+0x1a4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	4a09      	ldr	r2, [pc, #36]	@ (800753c <PCU_Tasks+0x1a8>)
 8007516:	6013      	str	r3, [r2, #0]
      lastAnnounceRequest.overflows = etTimerOverflows;
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <PCU_Tasks+0x1ac>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a07      	ldr	r2, [pc, #28]	@ (800753c <PCU_Tasks+0x1a8>)
 800751e:	6053      	str	r3, [r2, #4]
    //Check for expired last contact from module
    /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
      sprintf(tempBuffer,"MCU DEBUG - Checking %d modules", pack.moduleCount); 
      serialOut(tempBuffer);
    }*/
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e1fb      	b.n	800791e <PCU_Tasks+0x58a>
 8007526:	bf00      	nop
 8007528:	20000d28 	.word	0x20000d28
 800752c:	2000a6ec 	.word	0x2000a6ec
 8007530:	0801912c 	.word	0x0801912c
 8007534:	20000b5c 	.word	0x20000b5c
 8007538:	200005d0 	.word	0x200005d0
 800753c:	20000d2c 	.word	0x20000d2c
 8007540:	20000d20 	.word	0x20000d20
 8007544:	20000d1e 	.word	0x20000d1e
 8007548:	20000d1c 	.word	0x20000d1c
 800754c:	2000000c 	.word	0x2000000c
 8007550:	08019168 	.word	0x08019168
 8007554:	0801918c 	.word	0x0801918c
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	4ab9      	ldr	r2, [pc, #740]	@ (8007840 <PCU_Tasks+0x4ac>)
 800755c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	4413      	add	r3, r2
 8007566:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f083 0301 	eor.w	r3, r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 81cd 	bne.w	8007912 <PCU_Tasks+0x57e>
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	4ab1      	ldr	r2, [pc, #708]	@ (8007840 <PCU_Tasks+0x4ac>)
 800757c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 81c1 	beq.w	8007912 <PCU_Tasks+0x57e>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	4aab      	ldr	r2, [pc, #684]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007594:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	3308      	adds	r3, #8
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f004 f9b2 	bl	800b90c <MCU_TicksSinceLastMessage>
 80075a8:	60b8      	str	r0, [r7, #8]
      /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
                index, module[index].moduleId, elapsedTicks, module[index].statusPending); 
        serialOut(tempBuffer);
      }*/
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80075b0:	f240 80f2 	bls.w	8007798 <PCU_Tasks+0x404>
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	4aa2      	ldr	r2, [pc, #648]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075b8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80e5 	beq.w	8007798 <PCU_Tasks+0x404>
        // Increment consecutive timeout counter
        module[index].consecutiveTimeouts++;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	499b      	ldr	r1, [pc, #620]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075d2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80075d6:	fb03 f202 	mul.w	r2, r3, r2
 80075da:	440a      	add	r2, r1
 80075dc:	f202 42c3 	addw	r2, r2, #1219	@ 0x4c3
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	3201      	adds	r2, #1
 80075e4:	b2d0      	uxtb	r0, r2
 80075e6:	4a96      	ldr	r2, [pc, #600]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075e8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80075f6:	4602      	mov	r2, r0
 80075f8:	701a      	strb	r2, [r3, #0]
        module[index].statusMessagesReceived = 0;  // Clear any partial status
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	4a90      	ldr	r2, [pc, #576]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075fe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
        
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	4a8b      	ldr	r2, [pc, #556]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007614:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d956      	bls.n	80076d6 <PCU_Tasks+0x342>
          // Max timeouts reached - deregister the module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 8007628:	4b86      	ldr	r3, [pc, #536]	@ (8007844 <PCU_Tasks+0x4b0>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0309 	and.w	r3, r3, #9
 8007630:	2b09      	cmp	r3, #9
 8007632:	d111      	bne.n	8007658 <PCU_Tasks+0x2c4>
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
                    module[index].moduleId, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	4a82      	ldr	r2, [pc, #520]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007638:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	3308      	adds	r3, #8
 8007644:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
 8007646:	461a      	mov	r2, r3
 8007648:	2303      	movs	r3, #3
 800764a:	497f      	ldr	r1, [pc, #508]	@ (8007848 <PCU_Tasks+0x4b4>)
 800764c:	487f      	ldr	r0, [pc, #508]	@ (800784c <PCU_Tasks+0x4b8>)
 800764e:	f00d fd49 	bl	80150e4 <siprintf>
            serialOut(tempBuffer);
 8007652:	487e      	ldr	r0, [pc, #504]	@ (800784c <PCU_Tasks+0x4b8>)
 8007654:	f7fd fff2 	bl	800563c <serialOut>
          }
          
          // Send deregister message to the module
          MCU_DeRegisterModule(module[index].moduleId);
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	4a79      	ldr	r2, [pc, #484]	@ (8007840 <PCU_Tasks+0x4ac>)
 800765c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	3308      	adds	r3, #8
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f001 ff8c 	bl	8009588 <MCU_DeRegisterModule>
          
          // Log removal from pack
          if(debugMessages & DBG_MSG_DEREGISTER){
 8007670:	4b77      	ldr	r3, [pc, #476]	@ (8007850 <PCU_Tasks+0x4bc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <PCU_Tasks+0x326>
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
                    module[index].moduleId, (int)module[index].uniqueId, index);
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	4a70      	ldr	r2, [pc, #448]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007680:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3308      	adds	r3, #8
 800768c:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
 800768e:	4618      	mov	r0, r3
                    module[index].moduleId, (int)module[index].uniqueId, index);
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	4a6b      	ldr	r2, [pc, #428]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007694:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	3304      	adds	r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
 80076a2:	461a      	mov	r2, r3
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	4602      	mov	r2, r0
 80076ac:	4969      	ldr	r1, [pc, #420]	@ (8007854 <PCU_Tasks+0x4c0>)
 80076ae:	4867      	ldr	r0, [pc, #412]	@ (800784c <PCU_Tasks+0x4b8>)
 80076b0:	f00d fd18 	bl	80150e4 <siprintf>
            serialOut(tempBuffer);
 80076b4:	4865      	ldr	r0, [pc, #404]	@ (800784c <PCU_Tasks+0x4b8>)
 80076b6:	f7fd ffc1 	bl	800563c <serialOut>
          }
          
          // Mark module as deregistered (don't remove from array)
          module[index].isRegistered = false;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	4a60      	ldr	r2, [pc, #384]	@ (8007840 <PCU_Tasks+0x4ac>)
 80076be:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
          
          // Update module counts
          MCU_UpdateModuleCounts();
 80076d0:	f004 f8d2 	bl	800b878 <MCU_UpdateModuleCounts>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 80076d4:	e11f      	b.n	8007916 <PCU_Tasks+0x582>
          
          // Continue without adjusting index (no array shift)
        }
        else if( module[index].faultCode.commsError == false){
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	4a59      	ldr	r2, [pc, #356]	@ (8007840 <PCU_Tasks+0x4ac>)
 80076da:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80076e8:	789b      	ldrb	r3, [r3, #2]
 80076ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f040 8110 	bne.w	8007916 <PCU_Tasks+0x582>
          // First timeout or still under limit - isolate module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 80076f6:	4b53      	ldr	r3, [pc, #332]	@ (8007844 <PCU_Tasks+0x4b0>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0309 	and.w	r3, r3, #9
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d11f      	bne.n	8007742 <PCU_Tasks+0x3ae>
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	4a4e      	ldr	r2, [pc, #312]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007706:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	4413      	add	r3, r2
 8007710:	3308      	adds	r3, #8
 8007712:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 8007714:	4618      	mov	r0, r3
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	4a49      	ldr	r2, [pc, #292]	@ (8007840 <PCU_Tasks+0x4ac>)
 800771a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	4413      	add	r3, r2
 8007724:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8007728:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 800772a:	461a      	mov	r2, r3
 800772c:	2303      	movs	r3, #3
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	4602      	mov	r2, r0
 8007734:	4948      	ldr	r1, [pc, #288]	@ (8007858 <PCU_Tasks+0x4c4>)
 8007736:	4845      	ldr	r0, [pc, #276]	@ (800784c <PCU_Tasks+0x4b8>)
 8007738:	f00d fcd4 	bl	80150e4 <siprintf>
            serialOut(tempBuffer);
 800773c:	4843      	ldr	r0, [pc, #268]	@ (800784c <PCU_Tasks+0x4b8>)
 800773e:	f7fd ff7d 	bl	800563c <serialOut>
          }
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8007742:	4b46      	ldr	r3, [pc, #280]	@ (800785c <PCU_Tasks+0x4c8>)
 8007744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007748:	2b02      	cmp	r3, #2
 800774a:	d10d      	bne.n	8007768 <PCU_Tasks+0x3d4>
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	4a3c      	ldr	r2, [pc, #240]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007750:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	3327      	adds	r3, #39	@ 0x27
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d102      	bne.n	8007768 <PCU_Tasks+0x3d4>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 8007762:	4b3e      	ldr	r3, [pc, #248]	@ (800785c <PCU_Tasks+0x4c8>)
 8007764:	2200      	movs	r2, #0
 8007766:	76da      	strb	r2, [r3, #27]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <PCU_Tasks+0x4ac>)
 800776c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	3328      	adds	r3, #40	@ 0x28
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	4a30      	ldr	r2, [pc, #192]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007780:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	4413      	add	r3, r2
 800778a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800778e:	7893      	ldrb	r3, [r2, #2]
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	7093      	strb	r3, [r2, #2]
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007796:	e0be      	b.n	8007916 <PCU_Tasks+0x582>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800779e:	d961      	bls.n	8007864 <PCU_Tasks+0x4d0>
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	4a27      	ldr	r2, [pc, #156]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077a4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f083 0301 	eor.w	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d052      	beq.n	8007864 <PCU_Tasks+0x4d0>
        // Send State
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 80077be:	4b21      	ldr	r3, [pc, #132]	@ (8007844 <PCU_Tasks+0x4b0>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d015      	beq.n	80077f6 <PCU_Tasks+0x462>
 80077ca:	4b24      	ldr	r3, [pc, #144]	@ (800785c <PCU_Tasks+0x4c8>)
 80077cc:	7d1b      	ldrb	r3, [r3, #20]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d911      	bls.n	80077f6 <PCU_Tasks+0x462>
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
                  module[index].moduleId, index); 
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077d6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	3308      	adds	r3, #8
 80077e2:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
 80077e4:	461a      	mov	r2, r3
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	491d      	ldr	r1, [pc, #116]	@ (8007860 <PCU_Tasks+0x4cc>)
 80077ea:	4818      	ldr	r0, [pc, #96]	@ (800784c <PCU_Tasks+0x4b8>)
 80077ec:	f00d fc7a 	bl	80150e4 <siprintf>
          serialOut(tempBuffer);
 80077f0:	4816      	ldr	r0, [pc, #88]	@ (800784c <PCU_Tasks+0x4b8>)
 80077f2:	f7fd ff23 	bl	800563c <serialOut>
        }
        MCU_RequestModuleStatus(module[index].moduleId);
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	4a11      	ldr	r2, [pc, #68]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077fa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	4413      	add	r3, r2
 8007804:	3308      	adds	r3, #8
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f002 fc4b 	bl	800a0a4 <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	4a0b      	ldr	r2, [pc, #44]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007812:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d078      	beq.n	8007918 <PCU_Tasks+0x584>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	4a05      	ldr	r2, [pc, #20]	@ (8007840 <PCU_Tasks+0x4ac>)
 800782a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	3308      	adds	r3, #8
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f002 f8a1 	bl	8009980 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 800783e:	e06b      	b.n	8007918 <PCU_Tasks+0x584>
 8007840:	20000dec 	.word	0x20000dec
 8007844:	2000000c 	.word	0x2000000c
 8007848:	080191b0 	.word	0x080191b0
 800784c:	20000b5c 	.word	0x20000b5c
 8007850:	20000010 	.word	0x20000010
 8007854:	080191fc 	.word	0x080191fc
 8007858:	08019240 	.word	0x08019240
 800785c:	2000a6ec 	.word	0x2000a6ec
 8007860:	08019278 	.word	0x08019278
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	4a9c      	ldr	r2, [pc, #624]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007868:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007876:	789b      	ldrb	r3, [r3, #2]
 8007878:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b01      	cmp	r3, #1
 8007880:	d10c      	bne.n	800789c <PCU_Tasks+0x508>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	4a94      	ldr	r2, [pc, #592]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007886:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007894:	7893      	ldrb	r3, [r2, #2]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	7093      	strb	r3, [r2, #2]
        }
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1 && index == 0){ 
 800789c:	4b8f      	ldr	r3, [pc, #572]	@ (8007adc <PCU_Tasks+0x748>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d037      	beq.n	8007918 <PCU_Tasks+0x584>
 80078a8:	4b8d      	ldr	r3, [pc, #564]	@ (8007ae0 <PCU_Tasks+0x74c>)
 80078aa:	7d1b      	ldrb	r3, [r3, #20]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d933      	bls.n	8007918 <PCU_Tasks+0x584>
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d130      	bne.n	8007918 <PCU_Tasks+0x584>
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	4a87      	ldr	r2, [pc, #540]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078ba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	4413      	add	r3, r2
 80078c4:	3308      	adds	r3, #8
 80078c6:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078c8:	461c      	mov	r4, r3
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	4a82      	ldr	r2, [pc, #520]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078ce:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80078dc:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078de:	4618      	mov	r0, r3
                  module[index].faultCode.commsError); 
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	4a7d      	ldr	r2, [pc, #500]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078e4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078f8:	b2db      	uxtb	r3, r3
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4622      	mov	r2, r4
 8007902:	4978      	ldr	r1, [pc, #480]	@ (8007ae4 <PCU_Tasks+0x750>)
 8007904:	4878      	ldr	r0, [pc, #480]	@ (8007ae8 <PCU_Tasks+0x754>)
 8007906:	f00d fbed 	bl	80150e4 <siprintf>
          serialOut(tempBuffer);
 800790a:	4877      	ldr	r0, [pc, #476]	@ (8007ae8 <PCU_Tasks+0x754>)
 800790c:	f7fd fe96 	bl	800563c <serialOut>
 8007910:	e002      	b.n	8007918 <PCU_Tasks+0x584>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <PCU_Tasks+0x584>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007916:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	3301      	adds	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b1f      	cmp	r3, #31
 8007922:	f67f ae19 	bls.w	8007558 <PCU_Tasks+0x1c4>
        }
      }
    }
    
    // Round-robin polling of modules
    if(pack.moduleCount > 0){
 8007926:	4b6e      	ldr	r3, [pc, #440]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007928:	7d1b      	ldrb	r3, [r3, #20]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d07b      	beq.n	8007a26 <PCU_Tasks+0x692>
      uint32_t timeSinceLastPoll = MCU_ElapsedTicks(&lastStatusPoll);
 800792e:	486f      	ldr	r0, [pc, #444]	@ (8007aec <PCU_Tasks+0x758>)
 8007930:	f004 f8d4 	bl	800badc <MCU_ElapsedTicks>
 8007934:	6078      	str	r0, [r7, #4]
      
      // Poll one module every 100ms to distribute the load
      if(timeSinceLastPoll > 100){
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b64      	cmp	r3, #100	@ 0x64
 800793a:	d974      	bls.n	8007a26 <PCU_Tasks+0x692>
        // Find the next valid module to poll
        uint8_t modulesToCheck = pack.moduleCount;
 800793c:	4b68      	ldr	r3, [pc, #416]	@ (8007ae0 <PCU_Tasks+0x74c>)
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	73fb      	strb	r3, [r7, #15]
        while(modulesToCheck > 0){
 8007942:	e06d      	b.n	8007a20 <PCU_Tasks+0x68c>
          if(nextModuleToPoll >= pack.moduleCount){
 8007944:	4b66      	ldr	r3, [pc, #408]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007946:	7d1a      	ldrb	r2, [r3, #20]
 8007948:	4b69      	ldr	r3, [pc, #420]	@ (8007af0 <PCU_Tasks+0x75c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d802      	bhi.n	8007956 <PCU_Tasks+0x5c2>
            nextModuleToPoll = 0;
 8007950:	4b67      	ldr	r3, [pc, #412]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
          }
          
          // Only poll modules that are not in timeout/error state
          if(module[nextModuleToPoll].statusPending == false && 
 8007956:	4b66      	ldr	r3, [pc, #408]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad8 <PCU_Tasks+0x744>)
 800795e:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f083 0301 	eor.w	r3, r3, #1
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d04a      	beq.n	8007a0e <PCU_Tasks+0x67a>
             module[nextModuleToPoll].faultCode.commsError == false){
 8007978:	4b5d      	ldr	r3, [pc, #372]	@ (8007af0 <PCU_Tasks+0x75c>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	4a56      	ldr	r2, [pc, #344]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007980:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007994:	b2db      	uxtb	r3, r3
          if(module[nextModuleToPoll].statusPending == false && 
 8007996:	2b00      	cmp	r3, #0
 8007998:	d139      	bne.n	8007a0e <PCU_Tasks+0x67a>
            /*if(((debugLevel & DBG_MCU) == DBG_MCU)){ 
              sprintf(tempBuffer,"MCU DEBUG - Round-robin polling module ID=%02x (index=%d)", 
                      module[nextModuleToPoll].moduleId, nextModuleToPoll); 
              serialOut(tempBuffer);
            }*/
            MCU_RequestModuleStatus(module[nextModuleToPoll].moduleId);
 800799a:	4b55      	ldr	r3, [pc, #340]	@ (8007af0 <PCU_Tasks+0x75c>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	4a4d      	ldr	r2, [pc, #308]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079a2:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	3308      	adds	r3, #8
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fb77 	bl	800a0a4 <MCU_RequestModuleStatus>
            
            // Have we received the hardware info?
            if(module[nextModuleToPoll].hardwarePending){
 80079b6:	4b4e      	ldr	r3, [pc, #312]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4a46      	ldr	r2, [pc, #280]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079be:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <PCU_Tasks+0x65a>
              MCU_RequestHardware(module[nextModuleToPoll].moduleId);
 80079d2:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	4619      	mov	r1, r3
 80079d8:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079da:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079de:	fb01 f303 	mul.w	r3, r1, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	3308      	adds	r3, #8
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 ffc9 	bl	8009980 <MCU_RequestHardware>
            }
            
            // Move to next module for next poll
            nextModuleToPoll++;
 80079ee:	4b40      	ldr	r3, [pc, #256]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	4b3e      	ldr	r3, [pc, #248]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079f8:	701a      	strb	r2, [r3, #0]
            
            // Update last poll time
            lastStatusPoll.ticks = htim1.Instance->CNT;
 80079fa:	4b3e      	ldr	r3, [pc, #248]	@ (8007af4 <PCU_Tasks+0x760>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	4a3a      	ldr	r2, [pc, #232]	@ (8007aec <PCU_Tasks+0x758>)
 8007a02:	6013      	str	r3, [r2, #0]
            lastStatusPoll.overflows = etTimerOverflows;
 8007a04:	4b3c      	ldr	r3, [pc, #240]	@ (8007af8 <PCU_Tasks+0x764>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a38      	ldr	r2, [pc, #224]	@ (8007aec <PCU_Tasks+0x758>)
 8007a0a:	6053      	str	r3, [r2, #4]
            break;
 8007a0c:	e00b      	b.n	8007a26 <PCU_Tasks+0x692>
          }
          
          nextModuleToPoll++;
 8007a0e:	4b38      	ldr	r3, [pc, #224]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4b36      	ldr	r3, [pc, #216]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007a18:	701a      	strb	r2, [r3, #0]
          modulesToCheck--;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
        while(modulesToCheck > 0){
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d18e      	bne.n	8007944 <PCU_Tasks+0x5b0>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 8007a26:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007a28:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 8144 	bne.w	8007cba <PCU_Tasks+0x926>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
 8007a36:	e129      	b.n	8007c8c <PCU_Tasks+0x8f8>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	4a27      	ldr	r2, [pc, #156]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a3c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f083 0301 	eor.w	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 8116 	bne.w	8007c84 <PCU_Tasks+0x8f0>
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 810a 	beq.w	8007c84 <PCU_Tasks+0x8f0>
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	4a19      	ldr	r2, [pc, #100]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a74:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007a82:	789b      	ldrb	r3, [r3, #2]
 8007a84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d136      	bne.n	8007afc <PCU_Tasks+0x768>
        if (module[index].currentState != moduleOff){
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	4a11      	ldr	r2, [pc, #68]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a92:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3327      	adds	r3, #39	@ 0x27
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80f0 	beq.w	8007c86 <PCU_Tasks+0x8f2>
          // Turn off the module
          module[index].nextState = moduleOff;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007aaa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3328      	adds	r3, #40	@ 0x28
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007abe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007acc:	7893      	ldrb	r3, [r2, #2]
 8007ace:	f023 0304 	bic.w	r3, r3, #4
 8007ad2:	7093      	strb	r3, [r2, #2]
 8007ad4:	e0d7      	b.n	8007c86 <PCU_Tasks+0x8f2>
 8007ad6:	bf00      	nop
 8007ad8:	20000dec 	.word	0x20000dec
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	2000a6ec 	.word	0x2000a6ec
 8007ae4:	080192b8 	.word	0x080192b8
 8007ae8:	20000b5c 	.word	0x20000b5c
 8007aec:	2000a740 	.word	0x2000a740
 8007af0:	2000a748 	.word	0x2000a748
 8007af4:	200005d0 	.word	0x200005d0
 8007af8:	20000d20 	.word	0x20000d20
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	4aa3      	ldr	r2, [pc, #652]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b00:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 80b5 	bne.w	8007c86 <PCU_Tasks+0x8f2>
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	4a9b      	ldr	r2, [pc, #620]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b20:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 80a5 	bne.w	8007c86 <PCU_Tasks+0x8f2>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	4a93      	ldr	r2, [pc, #588]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b40:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	332a      	adds	r3, #42	@ 0x2a
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d13a      	bne.n	8007bc8 <PCU_Tasks+0x834>
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	4a8d      	ldr	r2, [pc, #564]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b56:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	3329      	adds	r3, #41	@ 0x29
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	4989      	ldr	r1, [pc, #548]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b68:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007b6c:	fb00 f303 	mul.w	r3, r0, r3
 8007b70:	440b      	add	r3, r1
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d126      	bne.n	8007bc8 <PCU_Tasks+0x834>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	4a83      	ldr	r2, [pc, #524]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b7e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	4413      	add	r3, r2
 8007b88:	3308      	adds	r3, #8
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f003 ff31 	bl	800b9f4 <MCU_TicksSinceLastStateTx>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b98:	d975      	bls.n	8007c86 <PCU_Tasks+0x8f2>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	4a7b      	ldr	r2, [pc, #492]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b9e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3308      	adds	r3, #8
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	4977      	ldr	r1, [pc, #476]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007bb0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007bb4:	fb00 f303 	mul.w	r3, r0, r3
 8007bb8:	440b      	add	r3, r1
 8007bba:	3328      	adds	r3, #40	@ 0x28
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f003 fbd1 	bl	800b368 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007bc6:	e05e      	b.n	8007c86 <PCU_Tasks+0x8f2>
          }
        }else {
          if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007bc8:	4b71      	ldr	r3, [pc, #452]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d040      	beq.n	8007c56 <PCU_Tasks+0x8c2>
 8007bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d93c      	bls.n	8007c56 <PCU_Tasks+0x8c2>
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	4a6b      	ldr	r2, [pc, #428]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007be0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3308      	adds	r3, #8
 8007bec:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007bee:	461d      	mov	r5, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	4a66      	ldr	r2, [pc, #408]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007bf4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3327      	adds	r3, #39	@ 0x27
 8007c00:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c02:	461e      	mov	r6, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	4a61      	ldr	r2, [pc, #388]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c08:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3328      	adds	r3, #40	@ 0x28
 8007c14:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c16:	4618      	mov	r0, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c1c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3329      	adds	r3, #41	@ 0x29
 8007c28:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c2a:	461c      	mov	r4, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	4a57      	ldr	r2, [pc, #348]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c30:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	332a      	adds	r3, #42	@ 0x2a
 8007c3c:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	9401      	str	r4, [sp, #4]
 8007c42:	9000      	str	r0, [sp, #0]
 8007c44:	4633      	mov	r3, r6
 8007c46:	462a      	mov	r2, r5
 8007c48:	4953      	ldr	r1, [pc, #332]	@ (8007d98 <PCU_Tasks+0xa04>)
 8007c4a:	4854      	ldr	r0, [pc, #336]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007c4c:	f00d fa4a 	bl	80150e4 <siprintf>
            serialOut(tempBuffer);
 8007c50:	4852      	ldr	r0, [pc, #328]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007c52:	f7fd fcf3 	bl	800563c <serialOut>
          }
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	4a4c      	ldr	r2, [pc, #304]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c5e:	fb01 f303 	mul.w	r3, r1, r3
 8007c62:	4413      	add	r3, r2
 8007c64:	3308      	adds	r3, #8
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	4948      	ldr	r1, [pc, #288]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c6c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007c70:	fb00 f303 	mul.w	r3, r0, r3
 8007c74:	440b      	add	r3, r1
 8007c76:	3328      	adds	r3, #40	@ 0x28
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f003 fb73 	bl	800b368 <MCU_TransmitState>
 8007c82:	e000      	b.n	8007c86 <PCU_Tasks+0x8f2>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007c84:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b1f      	cmp	r3, #31
 8007c90:	f67f aed2 	bls.w	8007a38 <PCU_Tasks+0x6a4>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007c94:	4b42      	ldr	r3, [pc, #264]	@ (8007da0 <PCU_Tasks+0xa0c>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 82eb 	beq.w	8008274 <PCU_Tasks+0xee0>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8007c9e:	f006 f889 	bl	800ddb4 <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8007ca2:	f006 f9b9 	bl	800e018 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8007ca6:	f006 fa57 	bl	800e158 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8007caa:	f006 fae9 	bl	800e280 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8007cae:	f006 fb7b 	bl	800e3a8 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007da0 <PCU_Tasks+0xa0c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8007cb8:	e2dc      	b.n	8008274 <PCU_Tasks+0xee0>
  } else if(pack.controlMode == packMode){
 8007cba:	4b36      	ldr	r3, [pc, #216]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cbc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 82d7 	bne.w	8008274 <PCU_Tasks+0xee0>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8007cc6:	4b33      	ldr	r3, [pc, #204]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d005      	beq.n	8007cdc <PCU_Tasks+0x948>
 8007cd0:	4b30      	ldr	r3, [pc, #192]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	f040 813a 	bne.w	8007f50 <PCU_Tasks+0xbbc>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cde:	7edb      	ldrb	r3, [r3, #27]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 80a1 	bne.w	8007e28 <PCU_Tasks+0xa94>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8007cee:	2b88      	cmp	r3, #136	@ 0x88
 8007cf0:	d115      	bne.n	8007d1e <PCU_Tasks+0x98a>
 8007cf2:	4b28      	ldr	r3, [pc, #160]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cf4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8007da4 <PCU_Tasks+0xa10>)
 8007cfa:	fba2 1203 	umull	r1, r2, r2, r3
 8007cfe:	0b12      	lsrs	r2, r2, #12
 8007d00:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d04:	fb01 f202 	mul.w	r2, r1, r2
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <PCU_Tasks+0x98a>
 8007d10:	4925      	ldr	r1, [pc, #148]	@ (8007da8 <PCU_Tasks+0xa14>)
 8007d12:	4822      	ldr	r0, [pc, #136]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d14:	f00d f9e6 	bl	80150e4 <siprintf>
 8007d18:	4820      	ldr	r0, [pc, #128]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d1a:	f7fd fc8f 	bl	800563c <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8007d1e:	f002 fa7f 	bl	800a220 <MCU_FindMaxVoltageModule>
 8007d22:	4603      	mov	r3, r0
 8007d24:	70fb      	strb	r3, [r7, #3]
        if (moduleId == 0){
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d141      	bne.n	8007db0 <PCU_Tasks+0xa1c>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8007d2c:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f003 0309 	and.w	r3, r3, #9
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	d115      	bne.n	8007d64 <PCU_Tasks+0x9d0>
 8007d38:	4b16      	ldr	r3, [pc, #88]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d3a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d3e:	4a19      	ldr	r2, [pc, #100]	@ (8007da4 <PCU_Tasks+0xa10>)
 8007d40:	fba2 1203 	umull	r1, r2, r2, r3
 8007d44:	0b12      	lsrs	r2, r2, #12
 8007d46:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d4a:	fb01 f202 	mul.w	r2, r1, r2
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <PCU_Tasks+0x9d0>
 8007d56:	4915      	ldr	r1, [pc, #84]	@ (8007dac <PCU_Tasks+0xa18>)
 8007d58:	4810      	ldr	r0, [pc, #64]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d5a:	f00d f9c3 	bl	80150e4 <siprintf>
 8007d5e:	480f      	ldr	r0, [pc, #60]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d60:	f7fd fc6c 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007d64:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d66:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d70:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d76:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d7a:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d952      	bls.n	8007e28 <PCU_Tasks+0xa94>
 8007d82:	4b04      	ldr	r3, [pc, #16]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007d8a:	e04d      	b.n	8007e28 <PCU_Tasks+0xa94>
 8007d8c:	20000dec 	.word	0x20000dec
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	2000a6ec 	.word	0x2000a6ec
 8007d98:	080192f8 	.word	0x080192f8
 8007d9c:	20000b5c 	.word	0x20000b5c
 8007da0:	20000d26 	.word	0x20000d26
 8007da4:	d1b71759 	.word	0xd1b71759
 8007da8:	0801933c 	.word	0x0801933c
 8007dac:	08019370 	.word	0x08019370
        }else if (moduleId == pack.moduleCount +1 ){
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4bb8      	ldr	r3, [pc, #736]	@ (8008094 <PCU_Tasks+0xd00>)
 8007db4:	7d1b      	ldrb	r3, [r3, #20]
 8007db6:	3301      	adds	r3, #1
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d12f      	bne.n	8007e1c <PCU_Tasks+0xa88>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8007dbc:	4bb6      	ldr	r3, [pc, #728]	@ (8008098 <PCU_Tasks+0xd04>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0309 	and.w	r3, r3, #9
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	d115      	bne.n	8007df4 <PCU_Tasks+0xa60>
 8007dc8:	4bb2      	ldr	r3, [pc, #712]	@ (8008094 <PCU_Tasks+0xd00>)
 8007dca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007dce:	4ab3      	ldr	r2, [pc, #716]	@ (800809c <PCU_Tasks+0xd08>)
 8007dd0:	fba2 1203 	umull	r1, r2, r2, r3
 8007dd4:	0b12      	lsrs	r2, r2, #12
 8007dd6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007dda:	fb01 f202 	mul.w	r2, r1, r2
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <PCU_Tasks+0xa60>
 8007de6:	49ae      	ldr	r1, [pc, #696]	@ (80080a0 <PCU_Tasks+0xd0c>)
 8007de8:	48ae      	ldr	r0, [pc, #696]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007dea:	f00d f97b 	bl	80150e4 <siprintf>
 8007dee:	48ad      	ldr	r0, [pc, #692]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007df0:	f7fd fc24 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007df4:	4ba7      	ldr	r3, [pc, #668]	@ (8008094 <PCU_Tasks+0xd00>)
 8007df6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007e04:	4ba3      	ldr	r3, [pc, #652]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e06:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007e0a:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d90a      	bls.n	8007e28 <PCU_Tasks+0xa94>
 8007e12:	4ba0      	ldr	r3, [pc, #640]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007e1a:	e005      	b.n	8007e28 <PCU_Tasks+0xa94>
          pack.powerStatus.firstModuleId = moduleId;
 8007e1c:	4a9d      	ldr	r2, [pc, #628]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	7693      	strb	r3, [r2, #26]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8007e22:	4b9c      	ldr	r3, [pc, #624]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	76da      	strb	r2, [r3, #27]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8007e28:	4b9a      	ldr	r3, [pc, #616]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e2a:	7edb      	ldrb	r3, [r3, #27]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f040 808f 	bne.w	8007f50 <PCU_Tasks+0xbbc>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8007e32:	4b98      	ldr	r3, [pc, #608]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e34:	7e9b      	ldrb	r3, [r3, #26]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f003 fce6 	bl	800b808 <MCU_ModuleIndexFromId>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75bb      	strb	r3, [r7, #22]
        if (firstModuleIndex < MAX_MODULES_PER_PACK){
 8007e40:	7dbb      	ldrb	r3, [r7, #22]
 8007e42:	2b1f      	cmp	r3, #31
 8007e44:	d877      	bhi.n	8007f36 <PCU_Tasks+0xba2>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8007e46:	7dbb      	ldrb	r3, [r7, #22]
 8007e48:	4a97      	ldr	r2, [pc, #604]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007e4a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007e58:	789b      	ldrb	r3, [r3, #2]
 8007e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d00e      	beq.n	8007e82 <PCU_Tasks+0xaee>
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
 8007e66:	4a90      	ldr	r2, [pc, #576]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007e68:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007e76:	789b      	ldrb	r3, [r3, #2]
 8007e78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d113      	bne.n	8007eaa <PCU_Tasks+0xb16>
             pack.powerStatus.powerStage = stageSelectModule;
 8007e82:	4b84      	ldr	r3, [pc, #528]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	76da      	strb	r2, [r3, #27]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007e88:	4b83      	ldr	r3, [pc, #524]	@ (8008098 <PCU_Tasks+0xd04>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 0309 	and.w	r3, r3, #9
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d15d      	bne.n	8007f50 <PCU_Tasks+0xbbc>
 8007e94:	4b7f      	ldr	r3, [pc, #508]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e96:	7e9b      	ldrb	r3, [r3, #26]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4984      	ldr	r1, [pc, #528]	@ (80080ac <PCU_Tasks+0xd18>)
 8007e9c:	4881      	ldr	r0, [pc, #516]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007e9e:	f00d f921 	bl	80150e4 <siprintf>
 8007ea2:	4880      	ldr	r0, [pc, #512]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007ea4:	f7fd fbca 	bl	800563c <serialOut>
 8007ea8:	e052      	b.n	8007f50 <PCU_Tasks+0xbbc>
          } else if (pack.vcuRequestedState == packOn){
 8007eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8008094 <PCU_Tasks+0xd00>)
 8007eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d11d      	bne.n	8007ef0 <PCU_Tasks+0xb5c>
            if (module[firstModuleIndex].currentState == moduleOn){
 8007eb4:	7dbb      	ldrb	r3, [r7, #22]
 8007eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007eb8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3327      	adds	r3, #39	@ 0x27
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <PCU_Tasks+0xb46>
              pack.state = packOn;
 8007eca:	4b72      	ldr	r3, [pc, #456]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007ed2:	4b70      	ldr	r3, [pc, #448]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	76da      	strb	r2, [r3, #27]
 8007ed8:	e03a      	b.n	8007f50 <PCU_Tasks+0xbbc>
                module[firstModuleIndex].nextState = moduleOn;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
 8007edc:	4a72      	ldr	r2, [pc, #456]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007ede:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3328      	adds	r3, #40	@ 0x28
 8007eea:	2203      	movs	r2, #3
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e02f      	b.n	8007f50 <PCU_Tasks+0xbbc>
          } else if (pack.vcuRequestedState == packPrecharge){
 8007ef0:	4b68      	ldr	r3, [pc, #416]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d12a      	bne.n	8007f50 <PCU_Tasks+0xbbc>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8007efa:	7dbb      	ldrb	r3, [r7, #22]
 8007efc:	4a6a      	ldr	r2, [pc, #424]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007efe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	3327      	adds	r3, #39	@ 0x27
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d107      	bne.n	8007f20 <PCU_Tasks+0xb8c>
              pack.state = packPrecharge;
 8007f10:	4b60      	ldr	r3, [pc, #384]	@ (8008094 <PCU_Tasks+0xd00>)
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007f18:	4b5e      	ldr	r3, [pc, #376]	@ (8008094 <PCU_Tasks+0xd00>)
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	76da      	strb	r2, [r3, #27]
 8007f1e:	e017      	b.n	8007f50 <PCU_Tasks+0xbbc>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
 8007f22:	4a61      	ldr	r2, [pc, #388]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f24:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3328      	adds	r3, #40	@ 0x28
 8007f30:	2202      	movs	r2, #2
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e00c      	b.n	8007f50 <PCU_Tasks+0xbbc>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007f36:	4b58      	ldr	r3, [pc, #352]	@ (8008098 <PCU_Tasks+0xd04>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0309 	and.w	r3, r3, #9
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d106      	bne.n	8007f50 <PCU_Tasks+0xbbc>
 8007f42:	495b      	ldr	r1, [pc, #364]	@ (80080b0 <PCU_Tasks+0xd1c>)
 8007f44:	4857      	ldr	r0, [pc, #348]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007f46:	f00d f8cd 	bl	80150e4 <siprintf>
 8007f4a:	4856      	ldr	r0, [pc, #344]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007f4c:	f7fd fb76 	bl	800563c <serialOut>
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007f50:	2300      	movs	r3, #0
 8007f52:	75fb      	strb	r3, [r7, #23]
 8007f54:	e15d      	b.n	8008212 <PCU_Tasks+0xe7e>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	4a53      	ldr	r2, [pc, #332]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f5e:	fb01 f303 	mul.w	r3, r1, r3
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 814a 	bne.w	800820a <PCU_Tasks+0xe76>
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	4a4b      	ldr	r2, [pc, #300]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f7a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3304      	adds	r3, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 813e 	beq.w	800820a <PCU_Tasks+0xe76>
      if(module[index].faultCode.overCurrent == true){
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	4a45      	ldr	r2, [pc, #276]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f92:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d127      	bne.n	8007ffc <PCU_Tasks+0xc68>
        if (pack.vcuRequestedState != packOff){
 8007fac:	4b39      	ldr	r3, [pc, #228]	@ (8008094 <PCU_Tasks+0xd00>)
 8007fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <PCU_Tasks+0xc38>
          module[index].nextState = moduleStandby;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3328      	adds	r3, #40	@ 0x28
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e0c1      	b.n	8008150 <PCU_Tasks+0xdbc>
          module[index].nextState = moduleOff;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	4a36      	ldr	r2, [pc, #216]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fd0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	3328      	adds	r3, #40	@ 0x28
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	4a31      	ldr	r2, [pc, #196]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fe4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007ff2:	7893      	ldrb	r3, [r2, #2]
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	7093      	strb	r3, [r2, #2]
 8007ffa:	e0a9      	b.n	8008150 <PCU_Tasks+0xdbc>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <PCU_Tasks+0xd14>)
 8008000:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	4413      	add	r3, r2
 800800a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 809a 	bne.w	8008150 <PCU_Tasks+0xdbc>
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	4a22      	ldr	r2, [pc, #136]	@ (80080a8 <PCU_Tasks+0xd14>)
 8008020:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 808a 	bne.w	8008150 <PCU_Tasks+0xdbc>
        switch (pack.vcuRequestedState){
 800803c:	4b15      	ldr	r3, [pc, #84]	@ (8008094 <PCU_Tasks+0xd00>)
 800803e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008042:	2b03      	cmp	r3, #3
 8008044:	f200 8083 	bhi.w	800814e <PCU_Tasks+0xdba>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <PCU_Tasks+0xcbc>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008129 	.word	0x08008129
 8008054:	08008103 	.word	0x08008103
 8008058:	080080d3 	.word	0x080080d3
 800805c:	08008061 	.word	0x08008061
            if(pack.state == packOn){
 8008060:	4b0c      	ldr	r3, [pc, #48]	@ (8008094 <PCU_Tasks+0xd00>)
 8008062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008066:	2b03      	cmp	r3, #3
 8008068:	d109      	bne.n	800807e <PCU_Tasks+0xcea>
              module[index].nextState = moduleOn;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	4a0e      	ldr	r2, [pc, #56]	@ (80080a8 <PCU_Tasks+0xd14>)
 800806e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	3328      	adds	r3, #40	@ 0x28
 800807a:	2203      	movs	r2, #3
 800807c:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 800807e:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <PCU_Tasks+0xd00>)
 8008080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008084:	2b09      	cmp	r3, #9
 8008086:	d815      	bhi.n	80080b4 <PCU_Tasks+0xd20>
 8008088:	4b02      	ldr	r3, [pc, #8]	@ (8008094 <PCU_Tasks+0xd00>)
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008090:	e05e      	b.n	8008150 <PCU_Tasks+0xdbc>
 8008092:	bf00      	nop
 8008094:	2000a6ec 	.word	0x2000a6ec
 8008098:	2000000c 	.word	0x2000000c
 800809c:	d1b71759 	.word	0xd1b71759
 80080a0:	08019394 	.word	0x08019394
 80080a4:	20000b5c 	.word	0x20000b5c
 80080a8:	20000dec 	.word	0x20000dec
 80080ac:	080193b8 	.word	0x080193b8
 80080b0:	080193f8 	.word	0x080193f8
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 80080b4:	4b71      	ldr	r3, [pc, #452]	@ (800827c <PCU_Tasks+0xee8>)
 80080b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ba:	2bbe      	cmp	r3, #190	@ 0xbe
 80080bc:	d904      	bls.n	80080c8 <PCU_Tasks+0xd34>
 80080be:	4b6f      	ldr	r3, [pc, #444]	@ (800827c <PCU_Tasks+0xee8>)
 80080c0:	2203      	movs	r2, #3
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80080c6:	e043      	b.n	8008150 <PCU_Tasks+0xdbc>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 80080c8:	4b6c      	ldr	r3, [pc, #432]	@ (800827c <PCU_Tasks+0xee8>)
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80080d0:	e03e      	b.n	8008150 <PCU_Tasks+0xdbc>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 80080d2:	4b6a      	ldr	r3, [pc, #424]	@ (800827c <PCU_Tasks+0xee8>)
 80080d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d10d      	bne.n	80080f8 <PCU_Tasks+0xd64>
 80080dc:	7dfa      	ldrb	r2, [r7, #23]
 80080de:	7dbb      	ldrb	r3, [r7, #22]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d009      	beq.n	80080f8 <PCU_Tasks+0xd64>
              module[index].nextState = moduleStandby;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	4a66      	ldr	r2, [pc, #408]	@ (8008280 <PCU_Tasks+0xeec>)
 80080e8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	3328      	adds	r3, #40	@ 0x28
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 80080f8:	4b60      	ldr	r3, [pc, #384]	@ (800827c <PCU_Tasks+0xee8>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008100:	e026      	b.n	8008150 <PCU_Tasks+0xdbc>
            module[index].nextState = moduleStandby;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	4a5e      	ldr	r2, [pc, #376]	@ (8008280 <PCU_Tasks+0xeec>)
 8008106:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800810a:	fb01 f303 	mul.w	r3, r1, r3
 800810e:	4413      	add	r3, r2
 8008110:	3328      	adds	r3, #40	@ 0x28
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8008116:	4b59      	ldr	r3, [pc, #356]	@ (800827c <PCU_Tasks+0xee8>)
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 800811e:	4b57      	ldr	r3, [pc, #348]	@ (800827c <PCU_Tasks+0xee8>)
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008126:	e013      	b.n	8008150 <PCU_Tasks+0xdbc>
            module[index].nextState = moduleOff;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	4a55      	ldr	r2, [pc, #340]	@ (8008280 <PCU_Tasks+0xeec>)
 800812c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008130:	fb01 f303 	mul.w	r3, r1, r3
 8008134:	4413      	add	r3, r2
 8008136:	3328      	adds	r3, #40	@ 0x28
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 800813c:	4b4f      	ldr	r3, [pc, #316]	@ (800827c <PCU_Tasks+0xee8>)
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8008144:	4b4d      	ldr	r3, [pc, #308]	@ (800827c <PCU_Tasks+0xee8>)
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 800814c:	e000      	b.n	8008150 <PCU_Tasks+0xdbc>
            break;
 800814e:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	4a4b      	ldr	r2, [pc, #300]	@ (8008280 <PCU_Tasks+0xeec>)
 8008154:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	332a      	adds	r3, #42	@ 0x2a
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d13a      	bne.n	80081dc <PCU_Tasks+0xe48>
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	4a45      	ldr	r2, [pc, #276]	@ (8008280 <PCU_Tasks+0xeec>)
 800816a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	3329      	adds	r3, #41	@ 0x29
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	4941      	ldr	r1, [pc, #260]	@ (8008280 <PCU_Tasks+0xeec>)
 800817c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8008180:	fb00 f303 	mul.w	r3, r0, r3
 8008184:	440b      	add	r3, r1
 8008186:	3328      	adds	r3, #40	@ 0x28
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d126      	bne.n	80081dc <PCU_Tasks+0xe48>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	4a3b      	ldr	r2, [pc, #236]	@ (8008280 <PCU_Tasks+0xeec>)
 8008192:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	4413      	add	r3, r2
 800819c:	3308      	adds	r3, #8
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f003 fc27 	bl	800b9f4 <MCU_TicksSinceLastStateTx>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081ac:	d92e      	bls.n	800820c <PCU_Tasks+0xe78>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <PCU_Tasks+0xeec>)
 80081b2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3308      	adds	r3, #8
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	492f      	ldr	r1, [pc, #188]	@ (8008280 <PCU_Tasks+0xeec>)
 80081c4:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80081c8:	fb00 f303 	mul.w	r3, r0, r3
 80081cc:	440b      	add	r3, r1
 80081ce:	3328      	adds	r3, #40	@ 0x28
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f003 f8c7 	bl	800b368 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80081da:	e017      	b.n	800820c <PCU_Tasks+0xe78>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	4a28      	ldr	r2, [pc, #160]	@ (8008280 <PCU_Tasks+0xeec>)
 80081e0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	3308      	adds	r3, #8
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	4923      	ldr	r1, [pc, #140]	@ (8008280 <PCU_Tasks+0xeec>)
 80081f2:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80081f6:	fb00 f303 	mul.w	r3, r0, r3
 80081fa:	440b      	add	r3, r1
 80081fc:	3328      	adds	r3, #40	@ 0x28
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f003 f8b0 	bl	800b368 <MCU_TransmitState>
 8008208:	e000      	b.n	800820c <PCU_Tasks+0xe78>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800820a:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	3301      	adds	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	2b1f      	cmp	r3, #31
 8008216:	f67f ae9e 	bls.w	8007f56 <PCU_Tasks+0xbc2>
    MCU_UpdateStats();
 800821a:	f000 f8e9 	bl	80083f0 <MCU_UpdateStats>
    if(sendMaxState >0){
 800821e:	4b19      	ldr	r3, [pc, #100]	@ (8008284 <PCU_Tasks+0xef0>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <PCU_Tasks+0xe9e>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8008226:	4b15      	ldr	r3, [pc, #84]	@ (800827c <PCU_Tasks+0xee8>)
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822c:	4618      	mov	r0, r3
 800822e:	f003 f959 	bl	800b4e4 <MCU_TransmitMaxState>
    if(sendState > 0){
 8008232:	4b15      	ldr	r3, [pc, #84]	@ (8008288 <PCU_Tasks+0xef4>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01c      	beq.n	8008274 <PCU_Tasks+0xee0>
      if (pack.rtcValid == false) VCU_RequestTime();
 800823a:	4b10      	ldr	r3, [pc, #64]	@ (800827c <PCU_Tasks+0xee8>)
 800823c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008240:	f083 0301 	eor.w	r3, r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <PCU_Tasks+0xeba>
 800824a:	f006 f941 	bl	800e4d0 <VCU_RequestTime>
      VCU_TransmitBmsState();
 800824e:	f004 ff13 	bl	800d078 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8008252:	f004 fff9 	bl	800d248 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8008256:	f005 f8db 	bl	800d410 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 800825a:	f005 fa1d 	bl	800d698 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 800825e:	f005 fb47 	bl	800d8f0 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8008262:	f005 fc65 	bl	800db30 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8008266:	f005 fcd1 	bl	800dc0c <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 800826a:	f005 fd3d 	bl	800dce8 <VCU_TransmitBmsData10>
      sendState=0;
 800826e:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <PCU_Tasks+0xef4>)
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827c:	2000a6ec 	.word	0x2000a6ec
 8008280:	20000dec 	.word	0x20000dec
 8008284:	20000d25 	.word	0x20000d25
 8008288:	20000d26 	.word	0x20000d26

0800828c <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	4618      	mov	r0, r3
 800829a:	f7f8 fec3 	bl	8001024 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fa fb76 	bl	8002992 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	21ff      	movs	r1, #255	@ 0xff
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fba5 	bl	80029fa <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 80082b0:	484a      	ldr	r0, [pc, #296]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082b2:	f7f9 fd87 	bl	8001dc4 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 80082b6:	4a49      	ldr	r2, [pc, #292]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082b8:	7813      	ldrb	r3, [r2, #0]
 80082ba:	f043 0320 	orr.w	r3, r3, #32
 80082be:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 80082c0:	4a46      	ldr	r2, [pc, #280]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082c2:	7853      	ldrb	r3, [r2, #1]
 80082c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c8:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	4943      	ldr	r1, [pc, #268]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f9 fcea 	bl	8001ca8 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80082d4:	4842      	ldr	r0, [pc, #264]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082d6:	f7f9 fe85 	bl	8001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 80082da:	4a41      	ldr	r2, [pc, #260]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082dc:	7853      	ldrb	r3, [r2, #1]
 80082de:	2107      	movs	r1, #7
 80082e0:	f361 0304 	bfi	r3, r1, #0, #5
 80082e4:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 80082e6:	4a3e      	ldr	r2, [pc, #248]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082e8:	7853      	ldrb	r3, [r2, #1]
 80082ea:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80082ee:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 80082f0:	4a3b      	ldr	r2, [pc, #236]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082f2:	7813      	ldrb	r3, [r2, #0]
 80082f4:	2101      	movs	r1, #1
 80082f6:	f361 0345 	bfi	r3, r1, #1, #5
 80082fa:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	4a38      	ldr	r2, [pc, #224]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 8008300:	2102      	movs	r1, #2
 8008302:	4618      	mov	r0, r3
 8008304:	f7f9 fe16 	bl	8001f34 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8008308:	4836      	ldr	r0, [pc, #216]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 800830a:	f7fa f8c3 	bl	8002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 800830e:	4a35      	ldr	r2, [pc, #212]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 8008310:	7813      	ldrb	r3, [r2, #0]
 8008312:	210f      	movs	r1, #15
 8008314:	f361 0345 	bfi	r3, r1, #1, #5
 8008318:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 800831a:	4a32      	ldr	r2, [pc, #200]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 800831c:	8813      	ldrh	r3, [r2, #0]
 800831e:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8008322:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	4a2f      	ldr	r2, [pc, #188]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 8008328:	2101      	movs	r1, #1
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa f866 	bl	80023fc <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8008330:	4b2d      	ldr	r3, [pc, #180]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008338:	8813      	ldrh	r3, [r2, #0]
 800833a:	f36f 030a 	bfc	r3, #0, #11
 800833e:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8008340:	4a29      	ldr	r2, [pc, #164]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008342:	78d3      	ldrb	r3, [r2, #3]
 8008344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008348:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 800834a:	4a27      	ldr	r2, [pc, #156]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	f36f 23dc 	bfc	r3, #11, #18
 8008352:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	4a24      	ldr	r2, [pc, #144]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 ffd0 	bl	8002300 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8008360:	4b22      	ldr	r3, [pc, #136]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8008366:	4a21      	ldr	r2, [pc, #132]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008368:	8813      	ldrh	r3, [r2, #0]
 800836a:	f36f 030a 	bfc	r3, #0, #11
 800836e:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8008370:	4a1e      	ldr	r2, [pc, #120]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008372:	78d3      	ldrb	r3, [r2, #3]
 8008374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008378:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 800837a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	f36f 23dc 	bfc	r3, #11, #18
 8008382:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	4a19      	ldr	r2, [pc, #100]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f7f9 ffda 	bl	8002344 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8008390:	79f8      	ldrb	r0, [r7, #7]
 8008392:	2301      	movs	r3, #1
 8008394:	2201      	movs	r2, #1
 8008396:	2100      	movs	r1, #0
 8008398:	f7f9 fff8 	bl	800238c <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 800839c:	79f8      	ldrb	r0, [r7, #7]
 800839e:	2300      	movs	r3, #0
 80083a0:	2202      	movs	r2, #2
 80083a2:	2101      	movs	r1, #1
 80083a4:	f7fa fb69 	bl	8002a7a <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fb fa82 	bl	80038b8 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2201      	movs	r2, #1
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fa fa69 	bl	8002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2103      	movs	r1, #3
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fa f9b8 	bl	800273a <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f9 fd74 	bl	8001ebc <DRV_CANFDSPI_OperationModeSelect>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000d34 	.word	0x20000d34
 80083e0:	20000d38 	.word	0x20000d38
 80083e4:	20000d8c 	.word	0x20000d8c
 80083e8:	20000d90 	.word	0x20000d90
 80083ec:	20000d94 	.word	0x20000d94

080083f0 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b094      	sub	sp, #80	@ 0x50
 80083f4:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8008418:	23ff      	movs	r3, #255	@ 0xff
 800841a:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 800841c:	23ff      	movs	r3, #255	@ 0xff
 800841e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8008428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800842c:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 8008436:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800843a:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8008466:	2300      	movs	r3, #0
 8008468:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800846c:	e2a4      	b.n	80089b8 <MCU_UpdateStats+0x5c8>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800846e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008472:	4a93      	ldr	r2, [pc, #588]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008474:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	4413      	add	r3, r2
 800847e:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f083 0301 	eor.w	r3, r3, #1
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 828e 	bne.w	80089ac <MCU_UpdateStats+0x5bc>
 8008490:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008494:	4a8a      	ldr	r2, [pc, #552]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008496:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	4413      	add	r3, r2
 80084a0:	3304      	adds	r3, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8281 	beq.w	80089ac <MCU_UpdateStats+0x5bc>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 80084aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084ae:	4a84      	ldr	r2, [pc, #528]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084b0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 8271 	bne.w	80089ae <MCU_UpdateStats+0x5be>
 80084cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084d0:	4a7b      	ldr	r2, [pc, #492]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084d2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f040 8260 	bne.w	80089ae <MCU_UpdateStats+0x5be>
 80084ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084f2:	4a73      	ldr	r2, [pc, #460]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084f4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 824f 	bne.w	80089ae <MCU_UpdateStats+0x5be>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8008510:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008514:	4a6a      	ldr	r2, [pc, #424]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008516:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	3327      	adds	r3, #39	@ 0x27
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b03      	cmp	r3, #3
 8008526:	f040 8144 	bne.w	80087b2 <MCU_UpdateStats+0x3c2>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 800852a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800852e:	4a64      	ldr	r2, [pc, #400]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008530:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	330e      	adds	r3, #14
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7f7 ffd8 	bl	80004f4 <__aeabi_i2d>
 8008544:	a358      	add	r3, pc, #352	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f8 f83d 	bl	80005c8 <__aeabi_dmul>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	a356      	add	r3, pc, #344	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe7c 	bl	8000258 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f7f8 fb26 	bl	8000bb8 <__aeabi_d2f>
 800856c:	4603      	mov	r3, r0
 800856e:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008570:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008574:	4a52      	ldr	r2, [pc, #328]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008576:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800857a:	fb01 f303 	mul.w	r3, r1, r3
 800857e:	4413      	add	r3, r2
 8008580:	3310      	adds	r3, #16
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7f7 ffb5 	bl	80004f4 <__aeabi_i2d>
 800858a:	a347      	add	r3, pc, #284	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f8 f81a 	bl	80005c8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	a344      	add	r3, pc, #272	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 fe59 	bl	8000258 <__aeabi_dsub>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	f7f8 fb03 	bl	8000bb8 <__aeabi_d2f>
 80085b2:	4603      	mov	r3, r0
 80085b4:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 80085b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085ba:	4a41      	ldr	r2, [pc, #260]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80085bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	3314      	adds	r3, #20
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085ce:	4413      	add	r3, r2
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 80085d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085d6:	3301      	adds	r3, #1
 80085d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 80085dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085e0:	4a37      	ldr	r2, [pc, #220]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80085e2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80085e6:	fb01 f303 	mul.w	r3, r1, r3
 80085ea:	4413      	add	r3, r2
 80085ec:	3316      	adds	r3, #22
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f7 ff7f 	bl	80004f4 <__aeabi_i2d>
 80085f6:	a32c      	add	r3, pc, #176	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 ffe4 	bl	80005c8 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	a329      	add	r3, pc, #164	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fe23 	bl	8000258 <__aeabi_dsub>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f7f8 facd 	bl	8000bb8 <__aeabi_d2f>
 800861e:	4603      	mov	r3, r0
 8008620:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8008622:	6938      	ldr	r0, [r7, #16]
 8008624:	f7f7 ff78 	bl	8000518 <__aeabi_f2d>
 8008628:	a323      	add	r3, pc, #140	@ (adr r3, 80086b8 <MCU_UpdateStats+0x2c8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fe13 	bl	8000258 <__aeabi_dsub>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4614      	mov	r4, r2
 8008638:	461d      	mov	r5, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7f7 ff6c 	bl	8000518 <__aeabi_f2d>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f8 fa4e 	bl	8000ae8 <__aeabi_dcmpgt>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d03e      	beq.n	80086d0 <MCU_UpdateStats+0x2e0>
         module[index].faultCode.overCurrent = true;
 8008652:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008656:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008658:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008666:	7893      	ldrb	r3, [r2, #2]
 8008668:	f043 0304 	orr.w	r3, r3, #4
 800866c:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <MCU_UpdateStats+0x2d4>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0309 	and.w	r3, r3, #9
 8008676:	2b09      	cmp	r3, #9
 8008678:	d16b      	bne.n	8008752 <MCU_UpdateStats+0x362>
 800867a:	6938      	ldr	r0, [r7, #16]
 800867c:	f7f7 ff4c 	bl	8000518 <__aeabi_f2d>
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7f7 ff47 	bl	8000518 <__aeabi_f2d>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9cd 2300 	strd	r2, r3, [sp]
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	490c      	ldr	r1, [pc, #48]	@ (80086c8 <MCU_UpdateStats+0x2d8>)
 8008698:	480c      	ldr	r0, [pc, #48]	@ (80086cc <MCU_UpdateStats+0x2dc>)
 800869a:	f00c fd23 	bl	80150e4 <siprintf>
 800869e:	480b      	ldr	r0, [pc, #44]	@ (80086cc <MCU_UpdateStats+0x2dc>)
 80086a0:	f7fc ffcc 	bl	800563c <serialOut>
 80086a4:	e055      	b.n	8008752 <MCU_UpdateStats+0x362>
 80086a6:	bf00      	nop
 80086a8:	47ae147b 	.word	0x47ae147b
 80086ac:	3f947ae1 	.word	0x3f947ae1
 80086b0:	47ae147b 	.word	0x47ae147b
 80086b4:	40847ae1 	.word	0x40847ae1
 80086b8:	33333333 	.word	0x33333333
 80086bc:	3fd33333 	.word	0x3fd33333
 80086c0:	20000dec 	.word	0x20000dec
 80086c4:	2000000c 	.word	0x2000000c
 80086c8:	0801941c 	.word	0x0801941c
 80086cc:	20000b5c 	.word	0x20000b5c
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f7f7 ff21 	bl	8000518 <__aeabi_f2d>
 80086d6:	a3b3      	add	r3, pc, #716	@ (adr r3, 80089a4 <MCU_UpdateStats+0x5b4>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fdbe 	bl	800025c <__adddf3>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	f7f7 ff15 	bl	8000518 <__aeabi_f2d>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f8 f9d9 	bl	8000aac <__aeabi_dcmplt>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d028      	beq.n	8008752 <MCU_UpdateStats+0x362>
          module[index].faultCode.overCurrent = true;
 8008700:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008704:	4aa2      	ldr	r2, [pc, #648]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008706:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008714:	7893      	ldrb	r3, [r2, #2]
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 800871c:	4b9d      	ldr	r3, [pc, #628]	@ (8008994 <MCU_UpdateStats+0x5a4>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	f003 0309 	and.w	r3, r3, #9
 8008724:	2b09      	cmp	r3, #9
 8008726:	d114      	bne.n	8008752 <MCU_UpdateStats+0x362>
 8008728:	6938      	ldr	r0, [r7, #16]
 800872a:	f7f7 fef5 	bl	8000518 <__aeabi_f2d>
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	68b8      	ldr	r0, [r7, #8]
 8008734:	f7f7 fef0 	bl	8000518 <__aeabi_f2d>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	e9cd 2300 	strd	r2, r3, [sp]
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	4994      	ldr	r1, [pc, #592]	@ (8008998 <MCU_UpdateStats+0x5a8>)
 8008746:	4895      	ldr	r0, [pc, #596]	@ (800899c <MCU_UpdateStats+0x5ac>)
 8008748:	f00c fccc 	bl	80150e4 <siprintf>
 800874c:	4893      	ldr	r0, [pc, #588]	@ (800899c <MCU_UpdateStats+0x5ac>)
 800874e:	f7fc ff75 	bl	800563c <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 8008752:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008756:	4a8e      	ldr	r2, [pc, #568]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008758:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008766:	789b      	ldrb	r3, [r3, #2]
 8008768:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <MCU_UpdateStats+0x392>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 8008772:	4b8b      	ldr	r3, [pc, #556]	@ (80089a0 <MCU_UpdateStats+0x5b0>)
 8008774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008778:	2b02      	cmp	r3, #2
 800877a:	d102      	bne.n	8008782 <MCU_UpdateStats+0x392>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 800877c:	4b88      	ldr	r3, [pc, #544]	@ (80089a0 <MCU_UpdateStats+0x5b0>)
 800877e:	2200      	movs	r2, #0
 8008780:	76da      	strb	r2, [r3, #27]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 8008782:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8008786:	edd7 7a04 	vldr	s15, [r7, #16]
 800878a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800878e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8008792:	ed97 7a08 	vldr	s14, [r7, #32]
 8008796:	edd7 7a02 	vldr	s15, [r7, #8]
 800879a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800879e:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 80087a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80087a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80087aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 80087b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087b6:	4a76      	ldr	r2, [pc, #472]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087b8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3312      	adds	r3, #18
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 80087ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087d8:	fb01 f303 	mul.w	r3, r1, r3
 80087dc:	4413      	add	r3, r2
 80087de:	3322      	adds	r3, #34	@ 0x22
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	4413      	add	r3, r2
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 80087ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087ee:	4a68      	ldr	r2, [pc, #416]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087f0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	331c      	adds	r3, #28
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	4413      	add	r3, r2
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8008806:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800880a:	4a61      	ldr	r2, [pc, #388]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800880c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008810:	fb01 f303 	mul.w	r3, r1, r3
 8008814:	4413      	add	r3, r2
 8008816:	332b      	adds	r3, #43	@ 0x2b
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800881e:	4293      	cmp	r3, r2
 8008820:	d90a      	bls.n	8008838 <MCU_UpdateStats+0x448>
 8008822:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008826:	4a5a      	ldr	r2, [pc, #360]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008828:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	332b      	adds	r3, #43	@ 0x2b
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008838:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800883c:	4a54      	ldr	r2, [pc, #336]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800883e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	332c      	adds	r3, #44	@ 0x2c
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008850:	4293      	cmp	r3, r2
 8008852:	d90a      	bls.n	800886a <MCU_UpdateStats+0x47a>
 8008854:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008858:	4a4d      	ldr	r2, [pc, #308]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800885a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	4413      	add	r3, r2
 8008864:	332c      	adds	r3, #44	@ 0x2c
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 800886a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800886e:	4a48      	ldr	r2, [pc, #288]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008870:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	4413      	add	r3, r2
 800887a:	3320      	adds	r3, #32
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008880:	429a      	cmp	r2, r3
 8008882:	d915      	bls.n	80088b0 <MCU_UpdateStats+0x4c0>
        lowestCellVolt  = module[index].cellLoVolt;
 8008884:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008888:	4a41      	ldr	r2, [pc, #260]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800888a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	4413      	add	r3, r2
 8008894:	3320      	adds	r3, #32
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 800889a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800889e:	4a3c      	ldr	r2, [pc, #240]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088a0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	3308      	adds	r3, #8
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 80088b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088b4:	4a36      	ldr	r2, [pc, #216]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088b6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	331e      	adds	r3, #30
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d215      	bcs.n	80088f6 <MCU_UpdateStats+0x506>
        highestCellVolt = module[index].cellHiVolt;
 80088ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088ce:	4a30      	ldr	r2, [pc, #192]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088d0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	331e      	adds	r3, #30
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 80088e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088e6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	3308      	adds	r3, #8
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 80088f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088fa:	4a25      	ldr	r2, [pc, #148]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088fc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	4413      	add	r3, r2
 8008906:	3318      	adds	r3, #24
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800890c:	429a      	cmp	r2, r3
 800890e:	d215      	bcs.n	800893c <MCU_UpdateStats+0x54c>
        highestCellTemp = module[index].cellHiTemp;
 8008910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008914:	4a1e      	ldr	r2, [pc, #120]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008916:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	3318      	adds	r3, #24
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 8008926:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800892a:	4a19      	ldr	r2, [pc, #100]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800892c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	3308      	adds	r3, #8
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 800893c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008940:	4a13      	ldr	r2, [pc, #76]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008942:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	331a      	adds	r3, #26
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008952:	429a      	cmp	r2, r3
 8008954:	d915      	bls.n	8008982 <MCU_UpdateStats+0x592>
        lowestCellTemp  = module[index].cellLoTemp;
 8008956:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800895a:	4a0d      	ldr	r2, [pc, #52]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800895c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008960:	fb01 f303 	mul.w	r3, r1, r3
 8008964:	4413      	add	r3, r2
 8008966:	331a      	adds	r3, #26
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 800896c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008970:	4a07      	ldr	r2, [pc, #28]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008972:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008976:	fb01 f303 	mul.w	r3, r1, r3
 800897a:	4413      	add	r3, r2
 800897c:	3308      	adds	r3, #8
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 8008982:	7efb      	ldrb	r3, [r7, #27]
 8008984:	3301      	adds	r3, #1
 8008986:	76fb      	strb	r3, [r7, #27]
 8008988:	e011      	b.n	80089ae <MCU_UpdateStats+0x5be>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	20000dec 	.word	0x20000dec
 8008994:	2000000c 	.word	0x2000000c
 8008998:	08019468 	.word	0x08019468
 800899c:	20000b5c 	.word	0x20000b5c
 80089a0:	2000a6ec 	.word	0x2000a6ec
 80089a4:	33333333 	.word	0x33333333
 80089a8:	3fd33333 	.word	0x3fd33333
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 80089ac:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 80089ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089b2:	3301      	adds	r3, #1
 80089b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80089b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089bc:	2b1f      	cmp	r3, #31
 80089be:	f67f ad56 	bls.w	800846e <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 80089c2:	4a89      	ldr	r2, [pc, #548]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089c4:	7efb      	ldrb	r3, [r7, #27]
 80089c6:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 80089c8:	4b87      	ldr	r3, [pc, #540]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ca:	7d1a      	ldrb	r2, [r3, #20]
 80089cc:	4b86      	ldr	r3, [pc, #536]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ce:	7ddb      	ldrb	r3, [r3, #23]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	4b84      	ldr	r3, [pc, #528]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089d6:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 80089d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d06d      	beq.n	8008abc <MCU_UpdateStats+0x6cc>
    pack.voltage = voltage / modulesOn;
 80089e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	4b7e      	ldr	r3, [pc, #504]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ee:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80089f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80089f4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8008bec <MCU_UpdateStats+0x7fc>
 80089f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	dd19      	ble.n	8008a36 <MCU_UpdateStats+0x646>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008a02:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	f003 0309 	and.w	r3, r3, #9
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d110      	bne.n	8008a30 <MCU_UpdateStats+0x640>
 8008a0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a10:	f7f7 fd82 	bl	8000518 <__aeabi_f2d>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	a16f      	add	r1, pc, #444	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a22:	4974      	ldr	r1, [pc, #464]	@ (8008bf4 <MCU_UpdateStats+0x804>)
 8008a24:	4874      	ldr	r0, [pc, #464]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a26:	f00c fb5d 	bl	80150e4 <siprintf>
 8008a2a:	4873      	ldr	r0, [pc, #460]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a2c:	f7fc fe06 	bl	800563c <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008a30:	4b72      	ldr	r3, [pc, #456]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a34:	e01e      	b.n	8008a74 <MCU_UpdateStats+0x684>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8008a36:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8008a3a:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d515      	bpl.n	8008a74 <MCU_UpdateStats+0x684>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008a48:	4b69      	ldr	r3, [pc, #420]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 0309 	and.w	r3, r3, #9
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d10d      	bne.n	8008a70 <MCU_UpdateStats+0x680>
 8008a54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a56:	f7f7 fd5f 	bl	8000518 <__aeabi_f2d>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4968      	ldr	r1, [pc, #416]	@ (8008c00 <MCU_UpdateStats+0x810>)
 8008a60:	9100      	str	r1, [sp, #0]
 8008a62:	4968      	ldr	r1, [pc, #416]	@ (8008c04 <MCU_UpdateStats+0x814>)
 8008a64:	4864      	ldr	r0, [pc, #400]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a66:	f00c fb3d 	bl	80150e4 <siprintf>
 8008a6a:	4863      	ldr	r0, [pc, #396]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a6c:	f7fc fde6 	bl	800563c <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 8008a70:	4b65      	ldr	r3, [pc, #404]	@ (8008c08 <MCU_UpdateStats+0x818>)
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008a74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a76:	f7f7 fd4f 	bl	8000518 <__aeabi_f2d>
 8008a7a:	a359      	add	r3, pc, #356	@ (adr r3, 8008be0 <MCU_UpdateStats+0x7f0>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fecc 	bl	800081c <__aeabi_ddiv>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	4b5e      	ldr	r3, [pc, #376]	@ (8008c0c <MCU_UpdateStats+0x81c>)
 8008a92:	f7f7 fbe3 	bl	800025c <__adddf3>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f7f8 f88b 	bl	8000bb8 <__aeabi_d2f>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aae:	ee17 3a90 	vmov	r3, s15
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008ab8:	611a      	str	r2, [r3, #16]
 8008aba:	e00e      	b.n	8008ada <MCU_UpdateStats+0x6ea>

  }else{
    pack.voltage = 0;
 8008abc:	4b4a      	ldr	r3, [pc, #296]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8008ac2:	4b53      	ldr	r3, [pc, #332]	@ (8008c10 <MCU_UpdateStats+0x820>)
 8008ac4:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ace:	ee17 3a90 	vmov	r3, s15
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b44      	ldr	r3, [pc, #272]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008ad8:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008ada:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008ade:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8008bec <MCU_UpdateStats+0x7fc>
 8008ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	dd19      	ble.n	8008b20 <MCU_UpdateStats+0x730>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008aec:	4b40      	ldr	r3, [pc, #256]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 0309 	and.w	r3, r3, #9
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d110      	bne.n	8008b1a <MCU_UpdateStats+0x72a>
 8008af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008afa:	f7f7 fd0d 	bl	8000518 <__aeabi_f2d>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	a135      	add	r1, pc, #212	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b08:	e9cd 0100 	strd	r0, r1, [sp]
 8008b0c:	4941      	ldr	r1, [pc, #260]	@ (8008c14 <MCU_UpdateStats+0x824>)
 8008b0e:	483a      	ldr	r0, [pc, #232]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b10:	f00c fae8 	bl	80150e4 <siprintf>
 8008b14:	4838      	ldr	r0, [pc, #224]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b16:	f7fc fd91 	bl	800563c <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008b1a:	4b38      	ldr	r3, [pc, #224]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1e:	e01e      	b.n	8008b5e <MCU_UpdateStats+0x76e>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8008b20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008b24:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b30:	d515      	bpl.n	8008b5e <MCU_UpdateStats+0x76e>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008b32:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 0309 	and.w	r3, r3, #9
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d10d      	bne.n	8008b5a <MCU_UpdateStats+0x76a>
 8008b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b40:	f7f7 fcea 	bl	8000518 <__aeabi_f2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	492d      	ldr	r1, [pc, #180]	@ (8008c00 <MCU_UpdateStats+0x810>)
 8008b4a:	9100      	str	r1, [sp, #0]
 8008b4c:	4932      	ldr	r1, [pc, #200]	@ (8008c18 <MCU_UpdateStats+0x828>)
 8008b4e:	482a      	ldr	r0, [pc, #168]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b50:	f00c fac8 	bl	80150e4 <siprintf>
 8008b54:	4828      	ldr	r0, [pc, #160]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b56:	f7fc fd71 	bl	800563c <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8008b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008c08 <MCU_UpdateStats+0x818>)
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b60:	f7f7 fcda 	bl	8000518 <__aeabi_f2d>
 8008b64:	a31e      	add	r3, pc, #120	@ (adr r3, 8008be0 <MCU_UpdateStats+0x7f0>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 fe57 	bl	800081c <__aeabi_ddiv>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4610      	mov	r0, r2
 8008b74:	4619      	mov	r1, r3
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	4b24      	ldr	r3, [pc, #144]	@ (8008c0c <MCU_UpdateStats+0x81c>)
 8008b7c:	f7f7 fb6e 	bl	800025c <__adddf3>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7f7 fff6 	bl	8000b78 <__aeabi_d2uiz>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	4a16      	ldr	r2, [pc, #88]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008b90:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b96:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008bec <MCU_UpdateStats+0x7fc>
 8008b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	dd3f      	ble.n	8008c24 <MCU_UpdateStats+0x834>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008ba4:	4b12      	ldr	r3, [pc, #72]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 0309 	and.w	r3, r3, #9
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d110      	bne.n	8008bd2 <MCU_UpdateStats+0x7e2>
 8008bb0:	6a38      	ldr	r0, [r7, #32]
 8008bb2:	f7f7 fcb1 	bl	8000518 <__aeabi_f2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	a107      	add	r1, pc, #28	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8008bc4:	4915      	ldr	r1, [pc, #84]	@ (8008c1c <MCU_UpdateStats+0x82c>)
 8008bc6:	480c      	ldr	r0, [pc, #48]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008bc8:	f00c fa8c 	bl	80150e4 <siprintf>
 8008bcc:	480a      	ldr	r0, [pc, #40]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008bce:	f7fc fd35 	bl	800563c <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008bd4:	623b      	str	r3, [r7, #32]
 8008bd6:	e044      	b.n	8008c62 <MCU_UpdateStats+0x872>
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	409a3300 	.word	0x409a3300
 8008be0:	9999999a 	.word	0x9999999a
 8008be4:	3fa99999 	.word	0x3fa99999
 8008be8:	2000a6ec 	.word	0x2000a6ec
 8008bec:	44d19800 	.word	0x44d19800
 8008bf0:	2000000c 	.word	0x2000000c
 8008bf4:	080194b8 	.word	0x080194b8
 8008bf8:	20000b5c 	.word	0x20000b5c
 8008bfc:	44d19800 	.word	0x44d19800
 8008c00:	fffff9c0 	.word	0xfffff9c0
 8008c04:	080194fc 	.word	0x080194fc
 8008c08:	c4c80000 	.word	0xc4c80000
 8008c0c:	40df4000 	.word	0x40df4000
 8008c10:	46fa0000 	.word	0x46fa0000
 8008c14:	08019540 	.word	0x08019540
 8008c18:	08019588 	.word	0x08019588
 8008c1c:	080195d0 	.word	0x080195d0
 8008c20:	c4c80000 	.word	0xc4c80000
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8008c24:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c28:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	d515      	bpl.n	8008c62 <MCU_UpdateStats+0x872>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008c36:	4b6e      	ldr	r3, [pc, #440]	@ (8008df0 <MCU_UpdateStats+0xa00>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 0309 	and.w	r3, r3, #9
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d10d      	bne.n	8008c5e <MCU_UpdateStats+0x86e>
 8008c42:	6a38      	ldr	r0, [r7, #32]
 8008c44:	f7f7 fc68 	bl	8000518 <__aeabi_f2d>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4969      	ldr	r1, [pc, #420]	@ (8008df4 <MCU_UpdateStats+0xa04>)
 8008c4e:	9100      	str	r1, [sp, #0]
 8008c50:	4969      	ldr	r1, [pc, #420]	@ (8008df8 <MCU_UpdateStats+0xa08>)
 8008c52:	486a      	ldr	r0, [pc, #424]	@ (8008dfc <MCU_UpdateStats+0xa0c>)
 8008c54:	f00c fa46 	bl	80150e4 <siprintf>
 8008c58:	4868      	ldr	r0, [pc, #416]	@ (8008dfc <MCU_UpdateStats+0xa0c>)
 8008c5a:	f7fc fcef 	bl	800563c <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8008c5e:	4b68      	ldr	r3, [pc, #416]	@ (8008e00 <MCU_UpdateStats+0xa10>)
 8008c60:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c64:	f7f7 fc58 	bl	8000518 <__aeabi_f2d>
 8008c68:	a35f      	add	r3, pc, #380	@ (adr r3, 8008de8 <MCU_UpdateStats+0x9f8>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fdd5 	bl	800081c <__aeabi_ddiv>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	4b61      	ldr	r3, [pc, #388]	@ (8008e04 <MCU_UpdateStats+0xa14>)
 8008c80:	f7f7 faec 	bl	800025c <__adddf3>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f7f7 ff74 	bl	8000b78 <__aeabi_d2uiz>
 8008c90:	4603      	mov	r3, r0
 8008c92:	4a5d      	ldr	r2, [pc, #372]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008c94:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008c96:	6a38      	ldr	r0, [r7, #32]
 8008c98:	f7f7 fc3e 	bl	8000518 <__aeabi_f2d>
 8008c9c:	a352      	add	r3, pc, #328	@ (adr r3, 8008de8 <MCU_UpdateStats+0x9f8>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fdbb 	bl	800081c <__aeabi_ddiv>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4610      	mov	r0, r2
 8008cac:	4619      	mov	r1, r3
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	4b54      	ldr	r3, [pc, #336]	@ (8008e04 <MCU_UpdateStats+0xa14>)
 8008cb4:	f7f7 fad2 	bl	800025c <__adddf3>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f7f7 ff5a 	bl	8000b78 <__aeabi_d2uiz>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4a50      	ldr	r2, [pc, #320]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cc8:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8008cca:	4b4f      	ldr	r3, [pc, #316]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ccc:	7ddb      	ldrb	r3, [r3, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <MCU_UpdateStats+0x8f6>
 8008cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cd4:	7ddb      	ldrb	r3, [r3, #23]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	4b49      	ldr	r3, [pc, #292]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8008ce4:	e002      	b.n	8008cec <MCU_UpdateStats+0x8fc>
  else pack.maxChargeEndV = 0;
 8008ce6:	4b48      	ldr	r3, [pc, #288]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8008cec:	4b46      	ldr	r3, [pc, #280]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cee:	7ddb      	ldrb	r3, [r3, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <MCU_UpdateStats+0x916>
 8008cf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008cf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008cf8:	d805      	bhi.n	8008d06 <MCU_UpdateStats+0x916>
 8008cfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	4b42      	ldr	r3, [pc, #264]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d04:	e003      	b.n	8008d0e <MCU_UpdateStats+0x91e>
  else pack.soc = 0;
 8008d06:	4b40      	ldr	r3, [pc, #256]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d10:	7ddb      	ldrb	r3, [r3, #23]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <MCU_UpdateStats+0x938>
 8008d16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d18:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d1a:	d805      	bhi.n	8008d28 <MCU_UpdateStats+0x938>
 8008d1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	4b39      	ldr	r3, [pc, #228]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d26:	e003      	b.n	8008d30 <MCU_UpdateStats+0x940>
  else pack.soh = 0;
 8008d28:	4b37      	ldr	r3, [pc, #220]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8008d30:	4b35      	ldr	r3, [pc, #212]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d32:	7ddb      	ldrb	r3, [r3, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <MCU_UpdateStats+0x95c>
 8008d38:	4b33      	ldr	r3, [pc, #204]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d3a:	7ddb      	ldrb	r3, [r3, #23]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	4b30      	ldr	r3, [pc, #192]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d48:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008d4a:	e002      	b.n	8008d52 <MCU_UpdateStats+0x962>
  else pack.cellAvgVolt = 0;
 8008d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8008d52:	4a2d      	ldr	r2, [pc, #180]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008d56:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8008d58:	4a2b      	ldr	r2, [pc, #172]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d5a:	7e7b      	ldrb	r3, [r7, #25]
 8008d5c:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 8008d60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <MCU_UpdateStats+0x98a>
    pack.cellLoVolt = lowestCellVolt;
 8008d6a:	4a27      	ldr	r2, [pc, #156]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008d6e:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8008d70:	4a25      	ldr	r2, [pc, #148]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d72:	7ebb      	ldrb	r3, [r7, #26]
 8008d74:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8008d78:	e006      	b.n	8008d88 <MCU_UpdateStats+0x998>
  }
  else{
    pack.cellLoVolt = 0;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 8008d80:	4b21      	ldr	r3, [pc, #132]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8008d88:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d8a:	7ddb      	ldrb	r3, [r3, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <MCU_UpdateStats+0x9b4>
 8008d90:	4b1d      	ldr	r3, [pc, #116]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d92:	7ddb      	ldrb	r3, [r3, #23]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008da0:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008da2:	e002      	b.n	8008daa <MCU_UpdateStats+0x9ba>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008da4:	4b18      	ldr	r3, [pc, #96]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8008daa:	4a17      	ldr	r2, [pc, #92]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008dae:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8008db0:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8008db8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008dba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d007      	beq.n	8008dd2 <MCU_UpdateStats+0x9e2>
    pack.cellLoTemp = lowestCellTemp;
 8008dc2:	4a11      	ldr	r2, [pc, #68]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008dc6:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dca:	7e3b      	ldrb	r3, [r7, #24]
 8008dcc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8008dd0:	e006      	b.n	8008de0 <MCU_UpdateStats+0x9f0>
    pack.cellLoTemp = 0; //-55 degrees!
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8008de0:	bf00      	nop
 8008de2:	3748      	adds	r7, #72	@ 0x48
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bdb0      	pop	{r4, r5, r7, pc}
 8008de8:	9999999a 	.word	0x9999999a
 8008dec:	3fa99999 	.word	0x3fa99999
 8008df0:	2000000c 	.word	0x2000000c
 8008df4:	fffff9c0 	.word	0xfffff9c0
 8008df8:	0801961c 	.word	0x0801961c
 8008dfc:	20000b5c 	.word	0x20000b5c
 8008e00:	c4c80000 	.word	0xc4c80000
 8008e04:	40df4000 	.word	0x40df4000
 8008e08:	2000a6ec 	.word	0x2000a6ec

08008e0c <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0e:	b08b      	sub	sp, #44	@ 0x2c
 8008e10:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008e12:	4a67      	ldr	r2, [pc, #412]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008e14:	2101      	movs	r1, #1
 8008e16:	2001      	movs	r0, #1
 8008e18:	f7f9 fd02 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008e1c:	e0bc      	b.n	8008f98 <MCU_ReceiveMessages+0x18c>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8008e1e:	2340      	movs	r3, #64	@ 0x40
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4b64      	ldr	r3, [pc, #400]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e24:	4a64      	ldr	r2, [pc, #400]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e26:	2101      	movs	r1, #1
 8008e28:	2001      	movs	r0, #1
 8008e2a:	f7f9 fb5d 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    // Log RX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(rxObj.bF.id.SID, false)){
 8008e2e:	4b62      	ldr	r3, [pc, #392]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fd ffc2 	bl	8006dc4 <MCU_ShouldLogMessage>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d033      	beq.n	8008eae <MCU_ReceiveMessages+0xa2>
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e46:	4b5c      	ldr	r3, [pc, #368]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e4e:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e50:	469c      	mov	ip, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e52:	4b59      	ldr	r3, [pc, #356]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e5a:	469e      	mov	lr, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e5c:	4b55      	ldr	r3, [pc, #340]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e60:	461a      	mov	r2, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e62:	4b54      	ldr	r3, [pc, #336]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e64:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e66:	4619      	mov	r1, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e68:	4b52      	ldr	r3, [pc, #328]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e6a:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e6c:	4618      	mov	r0, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e6e:	4b51      	ldr	r3, [pc, #324]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e70:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e72:	461c      	mov	r4, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e74:	4b4f      	ldr	r3, [pc, #316]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e76:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e78:	461d      	mov	r5, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e7c:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e7e:	461e      	mov	r6, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e80:	4b4c      	ldr	r3, [pc, #304]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e82:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e84:	607b      	str	r3, [r7, #4]
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e86:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e88:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e8a:	9307      	str	r3, [sp, #28]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	9306      	str	r3, [sp, #24]
 8008e90:	9605      	str	r6, [sp, #20]
 8008e92:	9504      	str	r5, [sp, #16]
 8008e94:	9403      	str	r4, [sp, #12]
 8008e96:	9002      	str	r0, [sp, #8]
 8008e98:	9101      	str	r1, [sp, #4]
 8008e9a:	9200      	str	r2, [sp, #0]
 8008e9c:	4673      	mov	r3, lr
 8008e9e:	4662      	mov	r2, ip
 8008ea0:	4946      	ldr	r1, [pc, #280]	@ (8008fbc <MCU_ReceiveMessages+0x1b0>)
 8008ea2:	4847      	ldr	r0, [pc, #284]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008ea4:	f00c f91e 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 8008ea8:	4845      	ldr	r0, [pc, #276]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008eaa:	f7fc fbc7 	bl	800563c <serialOut>
    }

    switch (rxObj.bF.id.SID) {
 8008eae:	4b42      	ldr	r3, [pc, #264]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	d82b      	bhi.n	8008f18 <MCU_ReceiveMessages+0x10c>
 8008ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <MCU_ReceiveMessages+0xbc>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008efb 	.word	0x08008efb
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008eef 	.word	0x08008eef
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	08008f13 	.word	0x08008f13
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008ee8:	f000 f910 	bl	800910c <MCU_RegisterModule>
        break;
 8008eec:	e04f      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8008eee:	f002 fb49 	bl	800b584 <MCU_ProcessCellDetail>
        break;
 8008ef2:	e04c      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8008ef4:	f000 fdf8 	bl	8009ae8 <MCU_ProcessModuleHardware>
        break;
 8008ef8:	e049      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8008efa:	f001 fa25 	bl	800a348 <MCU_ProcessModuleStatus1>
        break;
 8008efe:	e046      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008f00:	f001 fd96 	bl	800aa30 <MCU_ProcessModuleStatus2>
        break;
 8008f04:	e043      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8008f06:	f001 ffbf 	bl	800ae88 <MCU_ProcessModuleStatus3>
        break;
 8008f0a:	e040      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8008f0c:	f000 fcbe 	bl	800988c <MCU_ProcessModuleTime>
        break;
 8008f10:	e03d      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8008f12:	f002 f9a7 	bl	800b264 <MCU_ProcessCellCommStatus1>
        break;
 8008f16:	e03a      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008f18:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc4 <MCU_ReceiveMessages+0x1b8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0309 	and.w	r3, r3, #9
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d133      	bne.n	8008f8c <MCU_ReceiveMessages+0x180>
 8008f24:	4b24      	ldr	r3, [pc, #144]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	469c      	mov	ip, r3
 8008f30:	4b21      	ldr	r3, [pc, #132]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f48:	789b      	ldrb	r3, [r3, #2]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	4b19      	ldr	r3, [pc, #100]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f4e:	78db      	ldrb	r3, [r3, #3]
 8008f50:	461c      	mov	r4, r3
 8008f52:	4b18      	ldr	r3, [pc, #96]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	461d      	mov	r5, r3
 8008f58:	4b16      	ldr	r3, [pc, #88]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f5a:	795b      	ldrb	r3, [r3, #5]
 8008f5c:	461e      	mov	r6, r3
 8008f5e:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f60:	799b      	ldrb	r3, [r3, #6]
 8008f62:	607b      	str	r3, [r7, #4]
 8008f64:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f66:	79db      	ldrb	r3, [r3, #7]
 8008f68:	9307      	str	r3, [sp, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	9306      	str	r3, [sp, #24]
 8008f6e:	9605      	str	r6, [sp, #20]
 8008f70:	9504      	str	r5, [sp, #16]
 8008f72:	9403      	str	r4, [sp, #12]
 8008f74:	9002      	str	r0, [sp, #8]
 8008f76:	9101      	str	r1, [sp, #4]
 8008f78:	9200      	str	r2, [sp, #0]
 8008f7a:	4673      	mov	r3, lr
 8008f7c:	4662      	mov	r2, ip
 8008f7e:	4912      	ldr	r1, [pc, #72]	@ (8008fc8 <MCU_ReceiveMessages+0x1bc>)
 8008f80:	480f      	ldr	r0, [pc, #60]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008f82:	f00c f8af 	bl	80150e4 <siprintf>
 8008f86:	480e      	ldr	r0, [pc, #56]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008f88:	f7fc fb58 	bl	800563c <serialOut>
        break;
 8008f8c:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008f8e:	4a08      	ldr	r2, [pc, #32]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008f90:	2101      	movs	r1, #1
 8008f92:	2001      	movs	r0, #1
 8008f94:	f7f9 fc44 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008f98:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f af3c 	bne.w	8008e1e <MCU_ReceiveMessages+0x12>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb0:	20000d98 	.word	0x20000d98
 8008fb4:	20000da8 	.word	0x20000da8
 8008fb8:	20000d9c 	.word	0x20000d9c
 8008fbc:	08019664 	.word	0x08019664
 8008fc0:	20000b5c 	.word	0x20000b5c
 8008fc4:	2000000c 	.word	0x2000000c
 8008fc8:	080196c8 	.word	0x080196c8

08008fcc <MCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b08d      	sub	sp, #52	@ 0x34
 8008fd0:	af08      	add	r7, sp, #32
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008fd6:	2332      	movs	r3, #50	@ 0x32
 8008fd8:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	4a41      	ldr	r2, [pc, #260]	@ (80090e4 <MCU_TransmitMessageQueue+0x118>)
 8008fde:	2102      	movs	r1, #2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7f9 fbea 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11a      	bne.n	8009022 <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008fec:	bf00      	nop
        Nop();
 8008fee:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008ff0:	79f8      	ldrb	r0, [r7, #7]
 8008ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80090e8 <MCU_TransmitMessageQueue+0x11c>)
 8008ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80090ec <MCU_TransmitMessageQueue+0x120>)
 8008ff6:	493e      	ldr	r1, [pc, #248]	@ (80090f0 <MCU_TransmitMessageQueue+0x124>)
 8008ff8:	f7f9 fc99 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80090f4 <MCU_TransmitMessageQueue+0x128>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 0309 	and.w	r3, r3, #9
 8009004:	2b09      	cmp	r3, #9
 8009006:	d106      	bne.n	8009016 <MCU_TransmitMessageQueue+0x4a>
 8009008:	493b      	ldr	r1, [pc, #236]	@ (80090f8 <MCU_TransmitMessageQueue+0x12c>)
 800900a:	483c      	ldr	r0, [pc, #240]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 800900c:	f00c f86a 	bl	80150e4 <siprintf>
 8009010:	483a      	ldr	r0, [pc, #232]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 8009012:	f7fc fb13 	bl	800563c <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	2102      	movs	r1, #2
 800901a:	4618      	mov	r0, r3
 800901c:	f7f9 f910 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8009020:	e05c      	b.n	80090dc <MCU_TransmitMessageQueue+0x110>
      }
      attempts--;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	3b01      	subs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8009028:	4b2e      	ldr	r3, [pc, #184]	@ (80090e4 <MCU_TransmitMessageQueue+0x118>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0d2      	beq.n	8008fda <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8009034:	4b32      	ldr	r3, [pc, #200]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 8009036:	791b      	ldrb	r3, [r3, #4]
 8009038:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7fa fc82 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]
    
    // Log TX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(txObj.bF.id.SID, true)){
 8009048:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009050:	b29b      	uxth	r3, r3
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd feb5 	bl	8006dc4 <MCU_ShouldLogMessage>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d033      	beq.n	80090c8 <MCU_TransmitMessageQueue+0xfc>
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009068:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800906a:	469c      	mov	ip, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800906c:	4b24      	ldr	r3, [pc, #144]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009074:	469e      	mov	lr, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009076:	4b23      	ldr	r3, [pc, #140]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009078:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800907a:	461a      	mov	r2, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800907c:	4b21      	ldr	r3, [pc, #132]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800907e:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009080:	4619      	mov	r1, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009082:	4b20      	ldr	r3, [pc, #128]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009084:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009086:	4618      	mov	r0, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009088:	4b1e      	ldr	r3, [pc, #120]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800908a:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800908c:	461c      	mov	r4, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800908e:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009090:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009092:	461d      	mov	r5, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009094:	4b1b      	ldr	r3, [pc, #108]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009096:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009098:	461e      	mov	r6, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800909a:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800909c:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800909e:	603b      	str	r3, [r7, #0]
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 80090a0:	4b18      	ldr	r3, [pc, #96]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 80090a2:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	9605      	str	r6, [sp, #20]
 80090ac:	9504      	str	r5, [sp, #16]
 80090ae:	9403      	str	r4, [sp, #12]
 80090b0:	9002      	str	r0, [sp, #8]
 80090b2:	9101      	str	r1, [sp, #4]
 80090b4:	9200      	str	r2, [sp, #0]
 80090b6:	4673      	mov	r3, lr
 80090b8:	4662      	mov	r2, ip
 80090ba:	4913      	ldr	r1, [pc, #76]	@ (8009108 <MCU_TransmitMessageQueue+0x13c>)
 80090bc:	480f      	ldr	r0, [pc, #60]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 80090be:	f00c f811 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 80090c2:	480e      	ldr	r0, [pc, #56]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 80090c4:	f7fc faba 	bl	800563c <serialOut>
    }

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	79f8      	ldrb	r0, [r7, #7]
 80090cc:	2201      	movs	r2, #1
 80090ce:	9201      	str	r2, [sp, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 80090d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 80090d6:	2102      	movs	r1, #2
 80090d8:	f7f8 ffc0 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000d3c 	.word	0x20000d3c
 80090e8:	20000deb 	.word	0x20000deb
 80090ec:	20000dea 	.word	0x20000dea
 80090f0:	20000de9 	.word	0x20000de9
 80090f4:	2000000c 	.word	0x2000000c
 80090f8:	08019734 	.word	0x08019734
 80090fc:	20000b5c 	.word	0x20000b5c
 8009100:	20000d40 	.word	0x20000d40
 8009104:	20000d4c 	.word	0x20000d4c
 8009108:	08019764 	.word	0x08019764

0800910c <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b08b      	sub	sp, #44	@ 0x2c
 8009110:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8009116:	4ab5      	ldr	r2, [pc, #724]	@ (80093ec <MCU_RegisterModule+0x2e0>)
 8009118:	f107 030c 	add.w	r3, r7, #12
 800911c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009120:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugMessages & DBG_MSG_ANNOUNCE){
 8009124:	4bb2      	ldr	r3, [pc, #712]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <MCU_RegisterModule+0x46>
    sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); 
 8009130:	89bb      	ldrh	r3, [r7, #12]
 8009132:	4619      	mov	r1, r3
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	4618      	mov	r0, r3
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4603      	mov	r3, r0
 8009142:	460a      	mov	r2, r1
 8009144:	49ab      	ldr	r1, [pc, #684]	@ (80093f4 <MCU_RegisterModule+0x2e8>)
 8009146:	48ac      	ldr	r0, [pc, #688]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 8009148:	f00b ffcc 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 800914c:	48aa      	ldr	r0, [pc, #680]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 800914e:	f7fc fa75 	bl	800563c <serialOut>
  }

  // Check if module already exists (registered or not)
  moduleIndex = MAX_MODULES_PER_PACK; // Invalid index
 8009152:	2320      	movs	r3, #32
 8009154:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009156:	2300      	movs	r3, #0
 8009158:	75bb      	strb	r3, [r7, #22]
 800915a:	e011      	b.n	8009180 <MCU_RegisterModule+0x74>
    if(module[index].uniqueId == announcement.moduleUniqueId){
 800915c:	7dbb      	ldrb	r3, [r7, #22]
 800915e:	4aa7      	ldr	r2, [pc, #668]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009160:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	4413      	add	r3, r2
 800916a:	3304      	adds	r3, #4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	d102      	bne.n	800917a <MCU_RegisterModule+0x6e>
      moduleIndex = index;
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	75fb      	strb	r3, [r7, #23]
      break;
 8009178:	e005      	b.n	8009186 <MCU_RegisterModule+0x7a>
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800917a:	7dbb      	ldrb	r3, [r7, #22]
 800917c:	3301      	adds	r3, #1
 800917e:	75bb      	strb	r3, [r7, #22]
 8009180:	7dbb      	ldrb	r3, [r7, #22]
 8009182:	2b1f      	cmp	r3, #31
 8009184:	d9ea      	bls.n	800915c <MCU_RegisterModule+0x50>
    }
  }

  if(moduleIndex < MAX_MODULES_PER_PACK){
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	2b1f      	cmp	r3, #31
 800918a:	d863      	bhi.n	8009254 <MCU_RegisterModule+0x148>
    // Existing module - just mark as registered
    module[moduleIndex].isRegistered = true;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	4a9b      	ldr	r2, [pc, #620]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009190:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	4413      	add	r3, r2
 800919a:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].faultCode.commsError = 0;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	4a95      	ldr	r2, [pc, #596]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091a6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80091aa:	fb01 f303 	mul.w	r3, r1, r3
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80091b4:	7893      	ldrb	r3, [r2, #2]
 80091b6:	f023 0301 	bic.w	r3, r3, #1
 80091ba:	7093      	strb	r3, [r2, #2]
    module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 80091bc:	4b90      	ldr	r3, [pc, #576]	@ (8009400 <MCU_RegisterModule+0x2f4>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80091c4:	498d      	ldr	r1, [pc, #564]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091c6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80091ca:	fb00 f303 	mul.w	r3, r0, r3
 80091ce:	440b      	add	r3, r1
 80091d0:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80091d4:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	4a8a      	ldr	r2, [pc, #552]	@ (8009404 <MCU_RegisterModule+0x2f8>)
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	4987      	ldr	r1, [pc, #540]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091de:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80091e2:	fb00 f303 	mul.w	r3, r0, r3
 80091e6:	440b      	add	r3, r1
 80091e8:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80091ec:	601a      	str	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on re-registration
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	4a82      	ldr	r2, [pc, #520]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091f2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].statusMessagesReceived = 0;  // Reset status tracking
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	4a7d      	ldr	r2, [pc, #500]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009208:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
    
    if(debugMessages & DBG_MSG_ANNOUNCE){
 800921a:	4b75      	ldr	r3, [pc, #468]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80f8 	beq.w	8009418 <MCU_RegisterModule+0x30c>
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 8009228:	7dfa      	ldrb	r2, [r7, #23]
              moduleIndex, module[moduleIndex].moduleId, (int)announcement.moduleUniqueId);
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	4973      	ldr	r1, [pc, #460]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800922e:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009232:	fb00 f303 	mul.w	r3, r0, r3
 8009236:	440b      	add	r3, r1
 8009238:	3308      	adds	r3, #8
 800923a:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 800923c:	4619      	mov	r1, r3
              moduleIndex, module[moduleIndex].moduleId, (int)announcement.moduleUniqueId);
 800923e:	693b      	ldr	r3, [r7, #16]
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	460b      	mov	r3, r1
 8009244:	4970      	ldr	r1, [pc, #448]	@ (8009408 <MCU_RegisterModule+0x2fc>)
 8009246:	486c      	ldr	r0, [pc, #432]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 8009248:	f00b ff4c 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800924c:	486a      	ldr	r0, [pc, #424]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 800924e:	f7fc f9f5 	bl	800563c <serialOut>
 8009252:	e0e1      	b.n	8009418 <MCU_RegisterModule+0x30c>
    }
  }
  else {
    // New module - find first empty slot
    for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]
 8009258:	e010      	b.n	800927c <MCU_RegisterModule+0x170>
      if(module[index].uniqueId == 0){  // Empty slot
 800925a:	7dbb      	ldrb	r3, [r7, #22]
 800925c:	4a67      	ldr	r2, [pc, #412]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800925e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <MCU_RegisterModule+0x16a>
        moduleIndex = index;
 8009270:	7dbb      	ldrb	r3, [r7, #22]
 8009272:	75fb      	strb	r3, [r7, #23]
        break;
 8009274:	e005      	b.n	8009282 <MCU_RegisterModule+0x176>
    for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009276:	7dbb      	ldrb	r3, [r7, #22]
 8009278:	3301      	adds	r3, #1
 800927a:	75bb      	strb	r3, [r7, #22]
 800927c:	7dbb      	ldrb	r3, [r7, #22]
 800927e:	2b1f      	cmp	r3, #31
 8009280:	d9eb      	bls.n	800925a <MCU_RegisterModule+0x14e>
      }
    }
    
    if(moduleIndex < MAX_MODULES_PER_PACK){
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b1f      	cmp	r3, #31
 8009286:	f200 809f 	bhi.w	80093c8 <MCU_RegisterModule+0x2bc>
      // Initialize new module
      module[moduleIndex].moduleId = moduleIndex + 1;  // ID = index + 1
 800928a:	7dfb      	ldrb	r3, [r7, #23]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	3201      	adds	r2, #1
 8009290:	b2d0      	uxtb	r0, r2
 8009292:	4a5a      	ldr	r2, [pc, #360]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009294:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	3308      	adds	r3, #8
 80092a0:	4602      	mov	r2, r0
 80092a2:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].uniqueId = announcement.moduleUniqueId;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4954      	ldr	r1, [pc, #336]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092aa:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80092ae:	fb00 f303 	mul.w	r3, r0, r3
 80092b2:	440b      	add	r3, r1
 80092b4:	3304      	adds	r3, #4
 80092b6:	601a      	str	r2, [r3, #0]
      module[moduleIndex].isRegistered = true;
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	4a50      	ldr	r2, [pc, #320]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].fwVersion = announcement.moduleFw;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	89b8      	ldrh	r0, [r7, #12]
 80092d2:	4a4a      	ldr	r2, [pc, #296]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	4413      	add	r3, r2
 80092de:	330a      	adds	r3, #10
 80092e0:	4602      	mov	r2, r0
 80092e2:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].partId = announcement.modulePartId;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	7bf8      	ldrb	r0, [r7, #15]
 80092e8:	4a44      	ldr	r2, [pc, #272]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092ea:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3301      	adds	r3, #1
 80092f6:	4602      	mov	r2, r0
 80092f8:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].mfgId = announcement.moduleMfgId;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	7bb8      	ldrb	r0, [r7, #14]
 80092fe:	4a3f      	ldr	r2, [pc, #252]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009300:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	4602      	mov	r2, r0
 800930c:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800930e:	4b3c      	ldr	r3, [pc, #240]	@ (8009400 <MCU_RegisterModule+0x2f4>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009316:	4939      	ldr	r1, [pc, #228]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009318:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800931c:	fb00 f303 	mul.w	r3, r0, r3
 8009320:	440b      	add	r3, r1
 8009322:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8009326:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	4a36      	ldr	r2, [pc, #216]	@ (8009404 <MCU_RegisterModule+0x2f8>)
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	4933      	ldr	r1, [pc, #204]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009330:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009334:	fb00 f303 	mul.w	r3, r0, r3
 8009338:	440b      	add	r3, r1
 800933a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800933e:	601a      	str	r2, [r3, #0]
      module[moduleIndex].statusPending = true;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	4a2e      	ldr	r2, [pc, #184]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009344:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].consecutiveTimeouts = 0;  // Initialize timeout counter for new module
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	4a28      	ldr	r2, [pc, #160]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800935a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	4413      	add	r3, r2
 8009364:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].statusMessagesReceived = 0;  // Initialize status tracking
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	4a23      	ldr	r2, [pc, #140]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009370:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	4413      	add	r3, r2
 800937a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
      
      // Update module counts
      MCU_UpdateModuleCounts();
 8009382:	f002 fa79 	bl	800b878 <MCU_UpdateModuleCounts>
      
      if(debugMessages & DBG_MSG_ANNOUNCE){
 8009386:	4b1a      	ldr	r3, [pc, #104]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d042      	beq.n	8009418 <MCU_RegisterModule+0x30c>
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 8009392:	7dfa      	ldrb	r2, [r7, #23]
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	4919      	ldr	r1, [pc, #100]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009398:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800939c:	fb00 f303 	mul.w	r3, r0, r3
 80093a0:	440b      	add	r3, r1
 80093a2:	3308      	adds	r3, #8
 80093a4:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093a6:	4618      	mov	r0, r3
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 80093a8:	4b18      	ldr	r3, [pc, #96]	@ (800940c <MCU_RegisterModule+0x300>)
 80093aa:	7e5b      	ldrb	r3, [r3, #25]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093ac:	4619      	mov	r1, r3
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 80093ae:	4b17      	ldr	r3, [pc, #92]	@ (800940c <MCU_RegisterModule+0x300>)
 80093b0:	7ddb      	ldrb	r3, [r3, #23]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	9100      	str	r1, [sp, #0]
 80093b6:	4603      	mov	r3, r0
 80093b8:	4915      	ldr	r1, [pc, #84]	@ (8009410 <MCU_RegisterModule+0x304>)
 80093ba:	480f      	ldr	r0, [pc, #60]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093bc:	f00b fe92 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 80093c0:	480d      	ldr	r0, [pc, #52]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093c2:	f7fc f93b 	bl	800563c <serialOut>
 80093c6:	e027      	b.n	8009418 <MCU_RegisterModule+0x30c>
      }
    }
    else {
      // No more slots available
      if(debugMessages & DBG_MSG_ANNOUNCE){
 80093c8:	4b09      	ldr	r3, [pc, #36]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80c7 	beq.w	8009564 <MCU_RegisterModule+0x458>
        sprintf(tempBuffer,"MCU ERROR - No slots available for module UID=%08x", (int)announcement.moduleUniqueId);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	461a      	mov	r2, r3
 80093da:	490e      	ldr	r1, [pc, #56]	@ (8009414 <MCU_RegisterModule+0x308>)
 80093dc:	4806      	ldr	r0, [pc, #24]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093de:	f00b fe81 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 80093e2:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093e4:	f7fc f92a 	bl	800563c <serialOut>
 80093e8:	e0bd      	b.n	8009566 <MCU_RegisterModule+0x45a>
 80093ea:	bf00      	nop
 80093ec:	20000da8 	.word	0x20000da8
 80093f0:	20000010 	.word	0x20000010
 80093f4:	080197c8 	.word	0x080197c8
 80093f8:	20000b5c 	.word	0x20000b5c
 80093fc:	20000dec 	.word	0x20000dec
 8009400:	200005d0 	.word	0x200005d0
 8009404:	20000d20 	.word	0x20000d20
 8009408:	08019808 	.word	0x08019808
 800940c:	2000a6ec 	.word	0x2000a6ec
 8009410:	08019848 	.word	0x08019848
 8009414:	08019894 	.word	0x08019894
    }
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	4a54      	ldr	r2, [pc, #336]	@ (800956c <MCU_RegisterModule+0x460>)
 800941c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	4413      	add	r3, r2
 8009426:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800942a:	2201      	movs	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	4a4e      	ldr	r2, [pc, #312]	@ (800956c <MCU_RegisterModule+0x460>)
 8009432:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	4a49      	ldr	r2, [pc, #292]	@ (800956c <MCU_RegisterModule+0x460>)
 8009448:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	3308      	adds	r3, #8
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8009458:	4b45      	ldr	r3, [pc, #276]	@ (8009570 <MCU_RegisterModule+0x464>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4a42      	ldr	r2, [pc, #264]	@ (800956c <MCU_RegisterModule+0x460>)
 8009462:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009466:	fb01 f303 	mul.w	r3, r1, r3
 800946a:	4413      	add	r3, r2
 800946c:	3301      	adds	r3, #1
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	4a3d      	ldr	r2, [pc, #244]	@ (800956c <MCU_RegisterModule+0x460>)
 8009476:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	4a39      	ldr	r2, [pc, #228]	@ (800956c <MCU_RegisterModule+0x460>)
 8009488:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8009498:	4b36      	ldr	r3, [pc, #216]	@ (8009574 <MCU_RegisterModule+0x468>)
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800949e:	4b35      	ldr	r3, [pc, #212]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80094a4:	4b33      	ldr	r3, [pc, #204]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 80094aa:	4b33      	ldr	r3, [pc, #204]	@ (8009578 <MCU_RegisterModule+0x46c>)
 80094ac:	461a      	mov	r2, r3
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094b4:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 80094b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094ba:	8813      	ldrh	r3, [r2, #0]
 80094bc:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80094c0:	f361 030a 	bfi	r3, r1, #0, #11
 80094c4:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	4a28      	ldr	r2, [pc, #160]	@ (800956c <MCU_RegisterModule+0x460>)
 80094ca:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80094ce:	fb01 f303 	mul.w	r3, r1, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	3308      	adds	r3, #8
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80094de:	4925      	ldr	r1, [pc, #148]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094e0:	680b      	ldr	r3, [r1, #0]
 80094e2:	f362 23dc 	bfi	r3, r2, #11, #18
 80094e6:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80094e8:	4a22      	ldr	r2, [pc, #136]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094ea:	7913      	ldrb	r3, [r2, #4]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80094f2:	4a20      	ldr	r2, [pc, #128]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094f4:	7913      	ldrb	r3, [r2, #4]
 80094f6:	2108      	movs	r1, #8
 80094f8:	f361 0303 	bfi	r3, r1, #0, #4
 80094fc:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80094fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009574 <MCU_RegisterModule+0x468>)
 8009500:	7913      	ldrb	r3, [r2, #4]
 8009502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009506:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009508:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <MCU_RegisterModule+0x468>)
 800950a:	7913      	ldrb	r3, [r2, #4]
 800950c:	f043 0310 	orr.w	r3, r3, #16
 8009510:	7113      	strb	r3, [r2, #4]

  if(debugMessages & DBG_MSG_REGISTRATION){
 8009512:	4b1a      	ldr	r3, [pc, #104]	@ (800957c <MCU_RegisterModule+0x470>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d012      	beq.n	8009544 <MCU_RegisterModule+0x438>
    sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); 
 800951e:	793b      	ldrb	r3, [r7, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	797b      	ldrb	r3, [r7, #5]
 8009524:	461c      	mov	r4, r3
 8009526:	79bb      	ldrb	r3, [r7, #6]
 8009528:	79fa      	ldrb	r2, [r7, #7]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	9102      	str	r1, [sp, #8]
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4623      	mov	r3, r4
 8009534:	4602      	mov	r2, r0
 8009536:	4912      	ldr	r1, [pc, #72]	@ (8009580 <MCU_RegisterModule+0x474>)
 8009538:	4812      	ldr	r0, [pc, #72]	@ (8009584 <MCU_RegisterModule+0x478>)
 800953a:	f00b fdd3 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 800953e:	4811      	ldr	r0, [pc, #68]	@ (8009584 <MCU_RegisterModule+0x478>)
 8009540:	f7fc f87c 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009544:	2001      	movs	r0, #1
 8009546:	f7ff fd41 	bl	8008fcc <MCU_TransmitMessageQueue>
  
  // Request initial status from newly registered module
  MCU_RequestModuleStatus(module[moduleIndex].moduleId);
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	4a07      	ldr	r2, [pc, #28]	@ (800956c <MCU_RegisterModule+0x460>)
 800954e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	4413      	add	r3, r2
 8009558:	3308      	adds	r3, #8
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fda1 	bl	800a0a4 <MCU_RequestModuleStatus>
 8009562:	e000      	b.n	8009566 <MCU_RegisterModule+0x45a>
      return;
 8009564:	bf00      	nop
}
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}
 800956c:	20000dec 	.word	0x20000dec
 8009570:	2000a6ec 	.word	0x2000a6ec
 8009574:	20000d40 	.word	0x20000d40
 8009578:	20000d4c 	.word	0x20000d4c
 800957c:	20000010 	.word	0x20000010
 8009580:	080198c8 	.word	0x080198c8
 8009584:	20000b5c 	.word	0x20000b5c

08009588 <MCU_DeRegisterModule>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r M o d u l e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterModule(uint8_t moduleId){
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
    CANFRM_MODULE_DEREGISTER deRegistration;

    // configure the packet - format like other module-specific messages
    deRegistration.moduleId = moduleId;
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	733b      	strb	r3, [r7, #12]
    deRegistration.controllerId = pack.id;
 8009596:	4b25      	ldr	r3, [pc, #148]	@ (800962c <MCU_DeRegisterModule+0xa4>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	737b      	strb	r3, [r7, #13]

    // Clear transmit object
    txObj.word[0] = 0;                              // Configure transmit message
 800959c:	4b24      	ldr	r3, [pc, #144]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80095a2:	4b23      	ldr	r3, [pc, #140]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80095a8:	4b21      	ldr	r3, [pc, #132]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80095ae:	89ba      	ldrh	r2, [r7, #12]
 80095b0:	4b20      	ldr	r3, [pc, #128]	@ (8009634 <MCU_DeRegisterModule+0xac>)
 80095b2:	801a      	strh	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_DEREGISTER;         // Standard ID - 0x518 for individual deregister
 80095b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095b6:	8813      	ldrh	r3, [r2, #0]
 80095b8:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
 80095bc:	f361 030a 	bfi	r3, r1, #0, #11
 80095c0:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                     // Extended ID - specific module
 80095c2:	79fa      	ldrb	r2, [r7, #7]
 80095c4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80095c8:	4919      	ldr	r1, [pc, #100]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095ca:	680b      	ldr	r3, [r1, #0]
 80095cc:	f362 23dc 	bfi	r3, r2, #11, #18
 80095d0:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80095d2:	4a17      	ldr	r2, [pc, #92]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095d4:	7913      	ldrb	r3, [r2, #4]
 80095d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095da:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit (moduleId + controllerId)
 80095dc:	4a14      	ldr	r2, [pc, #80]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095de:	7913      	ldrb	r3, [r2, #4]
 80095e0:	2102      	movs	r1, #2
 80095e2:	f361 0303 	bfi	r3, r1, #0, #4
 80095e6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80095e8:	4a11      	ldr	r2, [pc, #68]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095ea:	7913      	ldrb	r3, [r2, #4]
 80095ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80095f2:	4a0f      	ldr	r2, [pc, #60]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095f4:	7913      	ldrb	r3, [r2, #4]
 80095f6:	f043 0310 	orr.w	r3, r3, #16
 80095fa:	7113      	strb	r3, [r2, #4]

    if(debugMessages & DBG_MSG_DEREGISTER){ 
 80095fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009638 <MCU_DeRegisterModule+0xb0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <MCU_DeRegisterModule+0x94>
        sprintf(tempBuffer,"MCU TX 0x518 De-Register module ID=%02x, CTL=%02x", moduleId, pack.id); 
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <MCU_DeRegisterModule+0xa4>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	490b      	ldr	r1, [pc, #44]	@ (800963c <MCU_DeRegisterModule+0xb4>)
 8009610:	480b      	ldr	r0, [pc, #44]	@ (8009640 <MCU_DeRegisterModule+0xb8>)
 8009612:	f00b fd67 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 8009616:	480a      	ldr	r0, [pc, #40]	@ (8009640 <MCU_DeRegisterModule+0xb8>)
 8009618:	f7fc f810 	bl	800563c <serialOut>
    }
    MCU_TransmitMessageQueue(CAN2);                  // Send it
 800961c:	2001      	movs	r0, #1
 800961e:	f7ff fcd5 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	2000a6ec 	.word	0x2000a6ec
 8009630:	20000d40 	.word	0x20000d40
 8009634:	20000d4c 	.word	0x20000d4c
 8009638:	20000010 	.word	0x20000010
 800963c:	08019914 	.word	0x08019914
 8009640:	20000b5c 	.word	0x20000b5c

08009644 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 800964a:	4b32      	ldr	r3, [pc, #200]	@ (8009714 <MCU_DeRegisterAllModules+0xd0>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	703b      	strb	r3, [r7, #0]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8009650:	4b31      	ldr	r3, [pc, #196]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009656:	4b30      	ldr	r3, [pc, #192]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009658:	2200      	movs	r2, #0
 800965a:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800965c:	4b2e      	ldr	r3, [pc, #184]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800965e:	2200      	movs	r2, #0
 8009660:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8009662:	783a      	ldrb	r2, [r7, #0]
 8009664:	4b2d      	ldr	r3, [pc, #180]	@ (800971c <MCU_DeRegisterAllModules+0xd8>)
 8009666:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8009668:	4a2b      	ldr	r2, [pc, #172]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800966a:	8813      	ldrh	r3, [r2, #0]
 800966c:	f240 511e 	movw	r1, #1310	@ 0x51e
 8009670:	f361 030a 	bfi	r3, r1, #0, #11
 8009674:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8009676:	4a28      	ldr	r2, [pc, #160]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	f36f 23dc 	bfc	r3, #11, #18
 800967e:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009680:	4a25      	ldr	r2, [pc, #148]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009682:	7913      	ldrb	r3, [r2, #4]
 8009684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009688:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800968a:	4a23      	ldr	r2, [pc, #140]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800968c:	7913      	ldrb	r3, [r2, #4]
 800968e:	2101      	movs	r1, #1
 8009690:	f361 0303 	bfi	r3, r1, #0, #4
 8009694:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009696:	4a20      	ldr	r2, [pc, #128]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009698:	7913      	ldrb	r3, [r2, #4]
 800969a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800969e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80096a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 80096a2:	7913      	ldrb	r3, [r2, #4]
 80096a4:	f043 0310 	orr.w	r3, r3, #16
 80096a8:	7113      	strb	r3, [r2, #4]

    if(debugMessages & DBG_MSG_DEREGISTER_ALL){ 
 80096aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009720 <MCU_DeRegisterAllModules+0xdc>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <MCU_DeRegisterAllModules+0x80>
        sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); 
 80096b6:	491b      	ldr	r1, [pc, #108]	@ (8009724 <MCU_DeRegisterAllModules+0xe0>)
 80096b8:	481b      	ldr	r0, [pc, #108]	@ (8009728 <MCU_DeRegisterAllModules+0xe4>)
 80096ba:	f00b fd13 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 80096be:	481a      	ldr	r0, [pc, #104]	@ (8009728 <MCU_DeRegisterAllModules+0xe4>)
 80096c0:	f7fb ffbc 	bl	800563c <serialOut>
    }
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7ff fc81 	bl	8008fcc <MCU_TransmitMessageQueue>
    
    // Mark all modules as unregistered locally
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e018      	b.n	8009702 <MCU_DeRegisterAllModules+0xbe>
        if(module[i].uniqueId != 0){
 80096d0:	4a16      	ldr	r2, [pc, #88]	@ (800972c <MCU_DeRegisterAllModules+0xe8>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3304      	adds	r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <MCU_DeRegisterAllModules+0xb8>
            module[i].isRegistered = false;
 80096e6:	4a11      	ldr	r2, [pc, #68]	@ (800972c <MCU_DeRegisterAllModules+0xe8>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3301      	adds	r3, #1
 8009700:	607b      	str	r3, [r7, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b1f      	cmp	r3, #31
 8009706:	dde3      	ble.n	80096d0 <MCU_DeRegisterAllModules+0x8c>
        }
    }
    
    // Update module counts
    MCU_UpdateModuleCounts();
 8009708:	f002 f8b6 	bl	800b878 <MCU_UpdateModuleCounts>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2000a6ec 	.word	0x2000a6ec
 8009718:	20000d40 	.word	0x20000d40
 800971c:	20000d4c 	.word	0x20000d4c
 8009720:	20000010 	.word	0x20000010
 8009724:	08019948 	.word	0x08019948
 8009728:	20000b5c 	.word	0x20000b5c
 800972c:	20000dec 	.word	0x20000dec

08009730 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	2201      	movs	r2, #1
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f00b fd38 	bl	80151b2 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8009742:	4b22      	ldr	r3, [pc, #136]	@ (80097cc <MCU_IsolateAllModules+0x9c>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8009748:	4b21      	ldr	r3, [pc, #132]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800974e:	4b20      	ldr	r3, [pc, #128]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009750:	2200      	movs	r2, #0
 8009752:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009754:	4b1e      	ldr	r3, [pc, #120]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009756:	2200      	movs	r2, #0
 8009758:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 800975a:	793a      	ldrb	r2, [r7, #4]
 800975c:	4b1d      	ldr	r3, [pc, #116]	@ (80097d4 <MCU_IsolateAllModules+0xa4>)
 800975e:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8009760:	4a1b      	ldr	r2, [pc, #108]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009762:	8813      	ldrh	r3, [r2, #0]
 8009764:	f240 511f 	movw	r1, #1311	@ 0x51f
 8009768:	f361 030a 	bfi	r3, r1, #0, #11
 800976c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800976e:	4a18      	ldr	r2, [pc, #96]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	f36f 23dc 	bfc	r3, #11, #18
 8009776:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009778:	4a15      	ldr	r2, [pc, #84]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800977a:	7913      	ldrb	r3, [r2, #4]
 800977c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009780:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8009782:	4a13      	ldr	r2, [pc, #76]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009784:	7913      	ldrb	r3, [r2, #4]
 8009786:	2101      	movs	r1, #1
 8009788:	f361 0303 	bfi	r3, r1, #0, #4
 800978c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800978e:	4a10      	ldr	r2, [pc, #64]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009790:	7913      	ldrb	r3, [r2, #4]
 8009792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009796:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009798:	4a0d      	ldr	r2, [pc, #52]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800979a:	7913      	ldrb	r3, [r2, #4]
 800979c:	f043 0310 	orr.w	r3, r3, #16
 80097a0:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 80097a2:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <MCU_IsolateAllModules+0xa8>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <MCU_IsolateAllModules+0x8c>
 80097ae:	490b      	ldr	r1, [pc, #44]	@ (80097dc <MCU_IsolateAllModules+0xac>)
 80097b0:	480b      	ldr	r0, [pc, #44]	@ (80097e0 <MCU_IsolateAllModules+0xb0>)
 80097b2:	f00b fc97 	bl	80150e4 <siprintf>
 80097b6:	480a      	ldr	r0, [pc, #40]	@ (80097e0 <MCU_IsolateAllModules+0xb0>)
 80097b8:	f7fb ff40 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80097bc:	2001      	movs	r0, #1
 80097be:	f7ff fc05 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	2000a6ec 	.word	0x2000a6ec
 80097d0:	20000d40 	.word	0x20000d40
 80097d4:	20000d4c 	.word	0x20000d4c
 80097d8:	2000000c 	.word	0x2000000c
 80097dc:	08019970 	.word	0x08019970
 80097e0:	20000b5c 	.word	0x20000b5c

080097e4 <MCU_RequestModuleAnnouncement>:

/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e A n n o u n c e m e n t                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleAnnouncement(void){
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ANNOUNCE_REQUEST announceRequest;
  
  // configure the packet
  announceRequest.controllerId = pack.id;
 80097ea:	4b22      	ldr	r3, [pc, #136]	@ (8009874 <MCU_RequestModuleAnnouncement+0x90>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	713b      	strb	r3, [r7, #4]
  
  // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80097f0:	4b21      	ldr	r3, [pc, #132]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80097f6:	4b20      	ldr	r3, [pc, #128]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80097fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097fe:	2200      	movs	r2, #0
 8009800:	609a      	str	r2, [r3, #8]
  
  // copy announcement request packet to txd structure
  memcpy(txd, &announceRequest, sizeof(announceRequest));
 8009802:	793a      	ldrb	r2, [r7, #4]
 8009804:	4b1d      	ldr	r3, [pc, #116]	@ (800987c <MCU_RequestModuleAnnouncement+0x98>)
 8009806:	701a      	strb	r2, [r3, #0]
  
  txObj.bF.id.SID = ID_MODULE_ANNOUNCE_REQUEST;   // Standard ID
 8009808:	4a1b      	ldr	r2, [pc, #108]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 800980a:	8813      	ldrh	r3, [r2, #0]
 800980c:	f240 511d 	movw	r1, #1309	@ 0x51d
 8009810:	f361 030a 	bfi	r3, r1, #0, #11
 8009814:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID - broadcast to all
 8009816:	4a18      	ldr	r2, [pc, #96]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009818:	6813      	ldr	r3, [r2, #0]
 800981a:	f36f 23dc 	bfc	r3, #11, #18
 800981e:	6013      	str	r3, [r2, #0]
  
  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009820:	4a15      	ldr	r2, [pc, #84]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009822:	7913      	ldrb	r3, [r2, #4]
 8009824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009828:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 byte to transmit
 800982a:	4a13      	ldr	r2, [pc, #76]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 800982c:	7913      	ldrb	r3, [r2, #4]
 800982e:	2101      	movs	r1, #1
 8009830:	f361 0303 	bfi	r3, r1, #0, #4
 8009834:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009836:	4a10      	ldr	r2, [pc, #64]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009838:	7913      	ldrb	r3, [r2, #4]
 800983a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800983e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009840:	4a0d      	ldr	r2, [pc, #52]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009842:	7913      	ldrb	r3, [r2, #4]
 8009844:	f043 0310 	orr.w	r3, r3, #16
 8009848:	7113      	strb	r3, [r2, #4]
  
  if(debugMessages & DBG_MSG_ANNOUNCE_REQ){
 800984a:	4b0d      	ldr	r3, [pc, #52]	@ (8009880 <MCU_RequestModuleAnnouncement+0x9c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d006      	beq.n	8009864 <MCU_RequestModuleAnnouncement+0x80>
    sprintf(tempBuffer,"MCU TX 0x51D Request module announcements"); 
 8009856:	490b      	ldr	r1, [pc, #44]	@ (8009884 <MCU_RequestModuleAnnouncement+0xa0>)
 8009858:	480b      	ldr	r0, [pc, #44]	@ (8009888 <MCU_RequestModuleAnnouncement+0xa4>)
 800985a:	f00b fc43 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 800985e:	480a      	ldr	r0, [pc, #40]	@ (8009888 <MCU_RequestModuleAnnouncement+0xa4>)
 8009860:	f7fb feec 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                  // Send it
 8009864:	2001      	movs	r0, #1
 8009866:	f7ff fbb1 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	2000a6ec 	.word	0x2000a6ec
 8009878:	20000d40 	.word	0x20000d40
 800987c:	20000d4c 	.word	0x20000d4c
 8009880:	20000010 	.word	0x20000010
 8009884:	08019994 	.word	0x08019994
 8009888:	20000b5c 	.word	0x20000b5c

0800988c <MCU_ProcessModuleTime>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 800988c:	b5b0      	push	{r4, r5, r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 8009892:	4b34      	ldr	r3, [pc, #208]	@ (8009964 <MCU_ProcessModuleTime+0xd8>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d006      	beq.n	80098ac <MCU_ProcessModuleTime+0x20>
 800989e:	4932      	ldr	r1, [pc, #200]	@ (8009968 <MCU_ProcessModuleTime+0xdc>)
 80098a0:	4832      	ldr	r0, [pc, #200]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 80098a2:	f00b fc1f 	bl	80150e4 <siprintf>
 80098a6:	4831      	ldr	r0, [pc, #196]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 80098a8:	f7fb fec8 	bl	800563c <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80098ac:	f7fb ffae 	bl	800580c <readRTC>
 80098b0:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80098b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009970 <MCU_ProcessModuleTime+0xe4>)
 80098b6:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80098c0:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80098c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098c6:	4614      	mov	r4, r2
 80098c8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80098cc:	4623      	mov	r3, r4
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	462a      	mov	r2, r5
 80098d4:	f362 031e 	bfi	r3, r2, #0, #31
 80098d8:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80098da:	4b26      	ldr	r3, [pc, #152]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80098e0:	4b24      	ldr	r3, [pc, #144]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80098e6:	4b23      	ldr	r3, [pc, #140]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 80098ec:	463b      	mov	r3, r7
 80098ee:	2208      	movs	r2, #8
 80098f0:	4619      	mov	r1, r3
 80098f2:	4821      	ldr	r0, [pc, #132]	@ (8009978 <MCU_ProcessModuleTime+0xec>)
 80098f4:	f00c fb69 	bl	8015fca <memcpy>

  txObj.bF.id.SID = ID_MODULE_SET_TIME;     // Standard ID
 80098f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098fa:	8813      	ldrh	r3, [r2, #0]
 80098fc:	f240 5116 	movw	r1, #1302	@ 0x516
 8009900:	f361 030a 	bfi	r3, r1, #0, #11
 8009904:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8009906:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	f36f 23dc 	bfc	r3, #11, #18
 800990e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009910:	4a18      	ldr	r2, [pc, #96]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009912:	7913      	ldrb	r3, [r2, #4]
 8009914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009918:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 800991c:	7913      	ldrb	r3, [r2, #4]
 800991e:	2108      	movs	r1, #8
 8009920:	f361 0303 	bfi	r3, r1, #0, #4
 8009924:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009926:	4a13      	ldr	r2, [pc, #76]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009928:	7913      	ldrb	r3, [r2, #4]
 800992a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800992e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009930:	4a10      	ldr	r2, [pc, #64]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009932:	7913      	ldrb	r3, [r2, #4]
 8009934:	f043 0310 	orr.w	r3, r3, #16
 8009938:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 800993a:	4b0a      	ldr	r3, [pc, #40]	@ (8009964 <MCU_ProcessModuleTime+0xd8>)
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d006      	beq.n	8009954 <MCU_ProcessModuleTime+0xc8>
 8009946:	490d      	ldr	r1, [pc, #52]	@ (800997c <MCU_ProcessModuleTime+0xf0>)
 8009948:	4808      	ldr	r0, [pc, #32]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 800994a:	f00b fbcb 	bl	80150e4 <siprintf>
 800994e:	4807      	ldr	r0, [pc, #28]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 8009950:	f7fb fe74 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009954:	2001      	movs	r0, #1
 8009956:	f7ff fb39 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bdb0      	pop	{r4, r5, r7, pc}
 8009962:	bf00      	nop
 8009964:	2000000c 	.word	0x2000000c
 8009968:	080199c0 	.word	0x080199c0
 800996c:	20000b5c 	.word	0x20000b5c
 8009970:	2000a6ec 	.word	0x2000a6ec
 8009974:	20000d40 	.word	0x20000d40
 8009978:	20000d4c 	.word	0x20000d4c
 800997c:	080199dc 	.word	0x080199dc

08009980 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 800998a:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac4 <MCU_RequestHardware+0x144>)
 800998c:	7d1b      	ldrb	r3, [r3, #20]
 800998e:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]
 8009994:	e02c      	b.n	80099f0 <MCU_RequestHardware+0x70>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	4a4b      	ldr	r2, [pc, #300]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 800999a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800999e:	fb01 f303 	mul.w	r3, r1, r3
 80099a2:	4413      	add	r3, r2
 80099a4:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f083 0301 	eor.w	r3, r3, #1
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d119      	bne.n	80099e8 <MCU_RequestHardware+0x68>
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	4a44      	ldr	r2, [pc, #272]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 80099b8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	3304      	adds	r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00e      	beq.n	80099e8 <MCU_RequestHardware+0x68>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	4a3e      	ldr	r2, [pc, #248]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 80099ce:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	3308      	adds	r3, #8
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	79fa      	ldrb	r2, [r7, #7]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d103      	bne.n	80099ea <MCU_RequestHardware+0x6a>
      moduleIndex = index; // found it - save the index
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	e000      	b.n	80099ea <MCU_RequestHardware+0x6a>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 80099e8:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	3301      	adds	r3, #1
 80099ee:	73bb      	strb	r3, [r7, #14]
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2b1f      	cmp	r3, #31
 80099f4:	d9cf      	bls.n	8009996 <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 80099f6:	4b33      	ldr	r3, [pc, #204]	@ (8009ac4 <MCU_RequestHardware+0x144>)
 80099f8:	7d1b      	ldrb	r3, [r3, #20]
 80099fa:	7bfa      	ldrb	r2, [r7, #15]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d10d      	bne.n	8009a1c <MCU_RequestHardware+0x9c>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 8009a00:	4b32      	ldr	r3, [pc, #200]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0309 	and.w	r3, r3, #9
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d156      	bne.n	8009aba <MCU_RequestHardware+0x13a>
 8009a0c:	4930      	ldr	r1, [pc, #192]	@ (8009ad0 <MCU_RequestHardware+0x150>)
 8009a0e:	4831      	ldr	r0, [pc, #196]	@ (8009ad4 <MCU_RequestHardware+0x154>)
 8009a10:	f00b fb68 	bl	80150e4 <siprintf>
 8009a14:	482f      	ldr	r0, [pc, #188]	@ (8009ad4 <MCU_RequestHardware+0x154>)
 8009a16:	f7fb fe11 	bl	800563c <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8009a1a:	e04e      	b.n	8009aba <MCU_RequestHardware+0x13a>
    module[moduleIndex].hardwarePending = true;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 8009a20:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009a24:	fb01 f303 	mul.w	r3, r1, r3
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009a2e:	2201      	movs	r2, #1
 8009a30:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8009a36:	4b28      	ldr	r3, [pc, #160]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009a3c:	4b26      	ldr	r3, [pc, #152]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009a42:	4b25      	ldr	r3, [pc, #148]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8009a48:	7b3a      	ldrb	r2, [r7, #12]
 8009a4a:	4b24      	ldr	r3, [pc, #144]	@ (8009adc <MCU_RequestHardware+0x15c>)
 8009a4c:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8009a4e:	4a22      	ldr	r2, [pc, #136]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a50:	8813      	ldrh	r3, [r2, #0]
 8009a52:	f240 5111 	movw	r1, #1297	@ 0x511
 8009a56:	f361 030a 	bfi	r3, r1, #0, #11
 8009a5a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8009a5c:	79fa      	ldrb	r2, [r7, #7]
 8009a5e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009a62:	491d      	ldr	r1, [pc, #116]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	f362 23dc 	bfi	r3, r2, #11, #18
 8009a6a:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a6e:	7913      	ldrb	r3, [r2, #4]
 8009a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a74:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8009a76:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a78:	7913      	ldrb	r3, [r2, #4]
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	f361 0303 	bfi	r3, r1, #0, #4
 8009a80:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009a82:	4a15      	ldr	r2, [pc, #84]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a84:	7913      	ldrb	r3, [r2, #4]
 8009a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a8a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009a8c:	4a12      	ldr	r2, [pc, #72]	@ (8009ad8 <MCU_RequestHardware+0x158>)
 8009a8e:	7913      	ldrb	r3, [r2, #4]
 8009a90:	f043 0310 	orr.w	r3, r3, #16
 8009a94:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009a96:	4b0d      	ldr	r3, [pc, #52]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	f003 0308 	and.w	r3, r3, #8
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <MCU_RequestHardware+0x134>
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	490e      	ldr	r1, [pc, #56]	@ (8009ae0 <MCU_RequestHardware+0x160>)
 8009aa8:	480a      	ldr	r0, [pc, #40]	@ (8009ad4 <MCU_RequestHardware+0x154>)
 8009aaa:	f00b fb1b 	bl	80150e4 <siprintf>
 8009aae:	4809      	ldr	r0, [pc, #36]	@ (8009ad4 <MCU_RequestHardware+0x154>)
 8009ab0:	f7fb fdc4 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f7ff fa89 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000a6ec 	.word	0x2000a6ec
 8009ac8:	20000dec 	.word	0x20000dec
 8009acc:	2000000c 	.word	0x2000000c
 8009ad0:	080199f4 	.word	0x080199f4
 8009ad4:	20000b5c 	.word	0x20000b5c
 8009ad8:	20000d40 	.word	0x20000d40
 8009adc:	20000d4c 	.word	0x20000d4c
 8009ae0:	08019a30 	.word	0x08019a30
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8009ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	b08e      	sub	sp, #56	@ 0x38
 8009aee:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8009af0:	463b      	mov	r3, r7
 8009af2:	2208      	movs	r2, #8
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f00b fb5b 	bl	80151b2 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8009afc:	4aa2      	ldr	r2, [pc, #648]	@ (8009d88 <MCU_ProcessModuleHardware+0x2a0>)
 8009afe:	463b      	mov	r3, r7
 8009b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b04:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009b08:	4ba0      	ldr	r3, [pc, #640]	@ (8009d8c <MCU_ProcessModuleHardware+0x2a4>)
 8009b0a:	7d1b      	ldrb	r3, [r3, #20]
 8009b0c:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75bb      	strb	r3, [r7, #22]
 8009b12:	e031      	b.n	8009b78 <MCU_ProcessModuleHardware+0x90>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009b14:	7dbb      	ldrb	r3, [r7, #22]
 8009b16:	4a9e      	ldr	r2, [pc, #632]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009b18:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009b1c:	fb01 f303 	mul.w	r3, r1, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f083 0301 	eor.w	r3, r3, #1
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d11e      	bne.n	8009b70 <MCU_ProcessModuleHardware+0x88>
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	4a96      	ldr	r2, [pc, #600]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009b36:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	3304      	adds	r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d013      	beq.n	8009b70 <MCU_ProcessModuleHardware+0x88>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009b48:	4b92      	ldr	r3, [pc, #584]	@ (8009d94 <MCU_ProcessModuleHardware+0x2ac>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009b50:	7dbb      	ldrb	r3, [r7, #22]
 8009b52:	498f      	ldr	r1, [pc, #572]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009b54:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009b58:	fb00 f303 	mul.w	r3, r0, r3
 8009b5c:	440b      	add	r3, r1
 8009b5e:	3308      	adds	r3, #8
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d103      	bne.n	8009b72 <MCU_ProcessModuleHardware+0x8a>
      moduleIndex = index; // found it - save the index
 8009b6a:	7dbb      	ldrb	r3, [r7, #22]
 8009b6c:	75fb      	strb	r3, [r7, #23]
 8009b6e:	e000      	b.n	8009b72 <MCU_ProcessModuleHardware+0x8a>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009b70:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009b72:	7dbb      	ldrb	r3, [r7, #22]
 8009b74:	3301      	adds	r3, #1
 8009b76:	75bb      	strb	r3, [r7, #22]
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
 8009b7a:	2b1f      	cmp	r3, #31
 8009b7c:	d9ca      	bls.n	8009b14 <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 8009b7e:	4b83      	ldr	r3, [pc, #524]	@ (8009d8c <MCU_ProcessModuleHardware+0x2a4>)
 8009b80:	7d1b      	ldrb	r3, [r3, #20]
 8009b82:	7dfa      	ldrb	r2, [r7, #23]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d10e      	bne.n	8009ba6 <MCU_ProcessModuleHardware+0xbe>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8009b88:	4b83      	ldr	r3, [pc, #524]	@ (8009d98 <MCU_ProcessModuleHardware+0x2b0>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0309 	and.w	r3, r3, #9
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	f040 825f 	bne.w	800a054 <MCU_ProcessModuleHardware+0x56c>
 8009b96:	4981      	ldr	r1, [pc, #516]	@ (8009d9c <MCU_ProcessModuleHardware+0x2b4>)
 8009b98:	4881      	ldr	r0, [pc, #516]	@ (8009da0 <MCU_ProcessModuleHardware+0x2b8>)
 8009b9a:	f00b faa3 	bl	80150e4 <siprintf>
 8009b9e:	4880      	ldr	r0, [pc, #512]	@ (8009da0 <MCU_ProcessModuleHardware+0x2b8>)
 8009ba0:	f7fb fd4c 	bl	800563c <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009ba4:	e256      	b.n	800a054 <MCU_ProcessModuleHardware+0x56c>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	8838      	ldrh	r0, [r7, #0]
 8009baa:	4a79      	ldr	r2, [pc, #484]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009bac:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bb0:	fb01 f303 	mul.w	r3, r1, r3
 8009bb4:	4413      	add	r3, r2
 8009bb6:	330e      	adds	r3, #14
 8009bb8:	4602      	mov	r2, r0
 8009bba:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	8878      	ldrh	r0, [r7, #2]
 8009bc0:	4a73      	ldr	r2, [pc, #460]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009bc2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3310      	adds	r3, #16
 8009bce:	4602      	mov	r2, r0
 8009bd0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	88b8      	ldrh	r0, [r7, #4]
 8009bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009bd8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bdc:	fb01 f303 	mul.w	r3, r1, r3
 8009be0:	4413      	add	r3, r2
 8009be2:	3312      	adds	r3, #18
 8009be4:	4602      	mov	r2, r0
 8009be6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	88f8      	ldrh	r0, [r7, #6]
 8009bec:	4a68      	ldr	r2, [pc, #416]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009bee:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009bfe:	4b69      	ldr	r3, [pc, #420]	@ (8009da4 <MCU_ProcessModuleHardware+0x2bc>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c06:	4962      	ldr	r1, [pc, #392]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009c08:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009c0c:	fb00 f303 	mul.w	r3, r0, r3
 8009c10:	440b      	add	r3, r1
 8009c12:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8009c16:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	4a63      	ldr	r2, [pc, #396]	@ (8009da8 <MCU_ProcessModuleHardware+0x2c0>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	495c      	ldr	r1, [pc, #368]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009c20:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009c24:	fb00 f303 	mul.w	r3, r0, r3
 8009c28:	440b      	add	r3, r1
 8009c2a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8009c2e:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	4a57      	ldr	r2, [pc, #348]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009c34:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	4a51      	ldr	r2, [pc, #324]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009c4a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c4e:	fb01 f303 	mul.w	r3, r1, r3
 8009c52:	4413      	add	r3, r2
 8009c54:	330e      	adds	r3, #14
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f6 fc4b 	bl	80004f4 <__aeabi_i2d>
 8009c5e:	a346      	add	r3, pc, #280	@ (adr r3, 8009d78 <MCU_ProcessModuleHardware+0x290>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f7f6 fcb0 	bl	80005c8 <__aeabi_dmul>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	a343      	add	r3, pc, #268	@ (adr r3, 8009d80 <MCU_ProcessModuleHardware+0x298>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 faef 	bl	8000258 <__aeabi_dsub>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f7f6 ff99 	bl	8000bb8 <__aeabi_d2f>
 8009c86:	4603      	mov	r3, r0
 8009c88:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	4a40      	ldr	r2, [pc, #256]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009c8e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	3310      	adds	r3, #16
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7f6 fc29 	bl	80004f4 <__aeabi_i2d>
 8009ca2:	a335      	add	r3, pc, #212	@ (adr r3, 8009d78 <MCU_ProcessModuleHardware+0x290>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fc8e 	bl	80005c8 <__aeabi_dmul>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	a332      	add	r3, pc, #200	@ (adr r3, 8009d80 <MCU_ProcessModuleHardware+0x298>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 facd 	bl	8000258 <__aeabi_dsub>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f7f6 ff77 	bl	8000bb8 <__aeabi_d2f>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8009cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cda:	d569      	bpl.n	8009db0 <MCU_ProcessModuleHardware+0x2c8>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8009d98 <MCU_ProcessModuleHardware+0x2b0>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	f003 0309 	and.w	r3, r3, #9
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d113      	bne.n	8009d10 <MCU_ProcessModuleHardware+0x228>
 8009ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8009d94 <MCU_ProcessModuleHardware+0x2ac>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009cf0:	461c      	mov	r4, r3
 8009cf2:	6938      	ldr	r0, [r7, #16]
 8009cf4:	f7f6 fc10 	bl	8000518 <__aeabi_f2d>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	e9cd 2300 	strd	r2, r3, [sp]
 8009d00:	4622      	mov	r2, r4
 8009d02:	492a      	ldr	r1, [pc, #168]	@ (8009dac <MCU_ProcessModuleHardware+0x2c4>)
 8009d04:	4826      	ldr	r0, [pc, #152]	@ (8009da0 <MCU_ProcessModuleHardware+0x2b8>)
 8009d06:	f00b f9ed 	bl	80150e4 <siprintf>
 8009d0a:	4825      	ldr	r0, [pc, #148]	@ (8009da0 <MCU_ProcessModuleHardware+0x2b8>)
 8009d0c:	f7fb fc96 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	4a1f      	ldr	r2, [pc, #124]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009d14:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	330e      	adds	r3, #14
 8009d20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009d24:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	4a19      	ldr	r2, [pc, #100]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009d2a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	3310      	adds	r3, #16
 8009d36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009d3a:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	4a14      	ldr	r2, [pc, #80]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009d40:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d44:	fb01 f303 	mul.w	r3, r1, r3
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009d4e:	7893      	ldrb	r3, [r2, #2]
 8009d50:	f043 0302 	orr.w	r3, r3, #2
 8009d54:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	4a0d      	ldr	r2, [pc, #52]	@ (8009d90 <MCU_ProcessModuleHardware+0x2a8>)
 8009d5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d5e:	fb01 f303 	mul.w	r3, r1, r3
 8009d62:	4413      	add	r3, r2
 8009d64:	3308      	adds	r3, #8
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fafc 	bl	800b368 <MCU_TransmitState>
 8009d70:	e051      	b.n	8009e16 <MCU_ProcessModuleHardware+0x32e>
 8009d72:	bf00      	nop
 8009d74:	f3af 8000 	nop.w
 8009d78:	47ae147b 	.word	0x47ae147b
 8009d7c:	3f947ae1 	.word	0x3f947ae1
 8009d80:	47ae147b 	.word	0x47ae147b
 8009d84:	40847ae1 	.word	0x40847ae1
 8009d88:	20000da8 	.word	0x20000da8
 8009d8c:	2000a6ec 	.word	0x2000a6ec
 8009d90:	20000dec 	.word	0x20000dec
 8009d94:	20000d9c 	.word	0x20000d9c
 8009d98:	2000000c 	.word	0x2000000c
 8009d9c:	08019a58 	.word	0x08019a58
 8009da0:	20000b5c 	.word	0x20000b5c
 8009da4:	200005d0 	.word	0x200005d0
 8009da8:	20000d20 	.word	0x20000d20
 8009dac:	08019a98 	.word	0x08019a98
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009db0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009db4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc0:	dd29      	ble.n	8009e16 <MCU_ProcessModuleHardware+0x32e>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8009dc2:	4bad      	ldr	r3, [pc, #692]	@ (800a078 <MCU_ProcessModuleHardware+0x590>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d018      	beq.n	8009e00 <MCU_ProcessModuleHardware+0x318>
 8009dce:	4bab      	ldr	r3, [pc, #684]	@ (800a07c <MCU_ProcessModuleHardware+0x594>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009dd6:	461c      	mov	r4, r3
 8009dd8:	6938      	ldr	r0, [r7, #16]
 8009dda:	f7f6 fb9d 	bl	8000518 <__aeabi_f2d>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	f04f 0000 	mov.w	r0, #0
 8009de6:	49a6      	ldr	r1, [pc, #664]	@ (800a080 <MCU_ProcessModuleHardware+0x598>)
 8009de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dec:	e9cd 2300 	strd	r2, r3, [sp]
 8009df0:	4622      	mov	r2, r4
 8009df2:	49a4      	ldr	r1, [pc, #656]	@ (800a084 <MCU_ProcessModuleHardware+0x59c>)
 8009df4:	48a4      	ldr	r0, [pc, #656]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009df6:	f00b f975 	bl	80150e4 <siprintf>
 8009dfa:	48a3      	ldr	r0, [pc, #652]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009dfc:	f7fb fc1e 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	4aa2      	ldr	r2, [pc, #648]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009e04:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	330e      	adds	r3, #14
 8009e10:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 8009e14:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8009e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e22:	dd4a      	ble.n	8009eba <MCU_ProcessModuleHardware+0x3d2>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8009e24:	4b94      	ldr	r3, [pc, #592]	@ (800a078 <MCU_ProcessModuleHardware+0x590>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 0309 	and.w	r3, r3, #9
 8009e2c:	2b09      	cmp	r3, #9
 8009e2e:	d113      	bne.n	8009e58 <MCU_ProcessModuleHardware+0x370>
 8009e30:	4b92      	ldr	r3, [pc, #584]	@ (800a07c <MCU_ProcessModuleHardware+0x594>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009e38:	461c      	mov	r4, r3
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7f6 fb6c 	bl	8000518 <__aeabi_f2d>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	e9cd 2300 	strd	r2, r3, [sp]
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4991      	ldr	r1, [pc, #580]	@ (800a090 <MCU_ProcessModuleHardware+0x5a8>)
 8009e4c:	488e      	ldr	r0, [pc, #568]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009e4e:	f00b f949 	bl	80150e4 <siprintf>
 8009e52:	488d      	ldr	r0, [pc, #564]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009e54:	f7fb fbf2 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	4a8c      	ldr	r2, [pc, #560]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009e5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	330e      	adds	r3, #14
 8009e68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009e6c:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	4a86      	ldr	r2, [pc, #536]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009e72:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e76:	fb01 f303 	mul.w	r3, r1, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3310      	adds	r3, #16
 8009e7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009e82:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	4a81      	ldr	r2, [pc, #516]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009e88:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009e96:	7893      	ldrb	r3, [r2, #2]
 8009e98:	f043 0302 	orr.w	r3, r3, #2
 8009e9c:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009ea2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009ea6:	fb01 f303 	mul.w	r3, r1, r3
 8009eaa:	4413      	add	r3, r2
 8009eac:	3308      	adds	r3, #8
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 fa58 	bl	800b368 <MCU_TransmitState>
 8009eb8:	e032      	b.n	8009f20 <MCU_ProcessModuleHardware+0x438>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8009eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ebe:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800a094 <MCU_ProcessModuleHardware+0x5ac>
 8009ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eca:	d529      	bpl.n	8009f20 <MCU_ProcessModuleHardware+0x438>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8009ecc:	4b6a      	ldr	r3, [pc, #424]	@ (800a078 <MCU_ProcessModuleHardware+0x590>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d018      	beq.n	8009f0a <MCU_ProcessModuleHardware+0x422>
 8009ed8:	4b68      	ldr	r3, [pc, #416]	@ (800a07c <MCU_ProcessModuleHardware+0x594>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009ee0:	461c      	mov	r4, r3
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7f6 fb18 	bl	8000518 <__aeabi_f2d>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	f04f 0000 	mov.w	r0, #0
 8009ef0:	4969      	ldr	r1, [pc, #420]	@ (800a098 <MCU_ProcessModuleHardware+0x5b0>)
 8009ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8009efa:	4622      	mov	r2, r4
 8009efc:	4967      	ldr	r1, [pc, #412]	@ (800a09c <MCU_ProcessModuleHardware+0x5b4>)
 8009efe:	4862      	ldr	r0, [pc, #392]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009f00:	f00b f8f0 	bl	80150e4 <siprintf>
 8009f04:	4860      	ldr	r0, [pc, #384]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 8009f06:	f7fb fb99 	bl	800563c <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	4a5f      	ldr	r2, [pc, #380]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009f0e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	3310      	adds	r3, #16
 8009f1a:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8009f1e:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009f20:	4b55      	ldr	r3, [pc, #340]	@ (800a078 <MCU_ProcessModuleHardware+0x590>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 8093 	beq.w	800a054 <MCU_ProcessModuleHardware+0x56c>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	4a56      	ldr	r2, [pc, #344]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009f32:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009f36:	fb01 f303 	mul.w	r3, r1, r3
 8009f3a:	4413      	add	r3, r2
 8009f3c:	330e      	adds	r3, #14
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7f6 fad7 	bl	80004f4 <__aeabi_i2d>
 8009f46:	a346      	add	r3, pc, #280	@ (adr r3, 800a060 <MCU_ProcessModuleHardware+0x578>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7f6 fb3c 	bl	80005c8 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4610      	mov	r0, r2
 8009f56:	4619      	mov	r1, r3
 8009f58:	a343      	add	r3, pc, #268	@ (adr r3, 800a068 <MCU_ProcessModuleHardware+0x580>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 f97b 	bl	8000258 <__aeabi_dsub>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f7f6 fe25 	bl	8000bb8 <__aeabi_d2f>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	4a45      	ldr	r2, [pc, #276]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009f76:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009f7a:	fb01 f303 	mul.w	r3, r1, r3
 8009f7e:	4413      	add	r3, r2
 8009f80:	3310      	adds	r3, #16
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f6 fab5 	bl	80004f4 <__aeabi_i2d>
 8009f8a:	a335      	add	r3, pc, #212	@ (adr r3, 800a060 <MCU_ProcessModuleHardware+0x578>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 fb1a 	bl	80005c8 <__aeabi_dmul>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	a332      	add	r3, pc, #200	@ (adr r3, 800a068 <MCU_ProcessModuleHardware+0x580>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 f959 	bl	8000258 <__aeabi_dsub>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	f7f6 fe03 	bl	8000bb8 <__aeabi_d2f>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	4a34      	ldr	r2, [pc, #208]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 8009fba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009fbe:	fb01 f303 	mul.w	r3, r1, r3
 8009fc2:	4413      	add	r3, r2
 8009fc4:	3312      	adds	r3, #18
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f6 fa93 	bl	80004f4 <__aeabi_i2d>
 8009fce:	a328      	add	r3, pc, #160	@ (adr r3, 800a070 <MCU_ProcessModuleHardware+0x588>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 faf8 	bl	80005c8 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	f7f6 f938 	bl	800025c <__adddf3>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f7f6 fde0 	bl	8000bb8 <__aeabi_d2f>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800a07c <MCU_ProcessModuleHardware+0x594>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 800a004:	469a      	mov	sl, r3
 800a006:	6938      	ldr	r0, [r7, #16]
 800a008:	f7f6 fa86 	bl	8000518 <__aeabi_f2d>
 800a00c:	4604      	mov	r4, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7f6 fa81 	bl	8000518 <__aeabi_f2d>
 800a016:	4680      	mov	r8, r0
 800a018:	4689      	mov	r9, r1
 800a01a:	68b8      	ldr	r0, [r7, #8]
 800a01c:	f7f6 fa7c 	bl	8000518 <__aeabi_f2d>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 800a024:	7df9      	ldrb	r1, [r7, #23]
 800a026:	4819      	ldr	r0, [pc, #100]	@ (800a08c <MCU_ProcessModuleHardware+0x5a4>)
 800a028:	f44f 6699 	mov.w	r6, #1224	@ 0x4c8
 800a02c:	fb06 f101 	mul.w	r1, r6, r1
 800a030:	4401      	add	r1, r0
 800a032:	310c      	adds	r1, #12
 800a034:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 800a036:	9106      	str	r1, [sp, #24]
 800a038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a03c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a040:	e9cd 4500 	strd	r4, r5, [sp]
 800a044:	4652      	mov	r2, sl
 800a046:	4916      	ldr	r1, [pc, #88]	@ (800a0a0 <MCU_ProcessModuleHardware+0x5b8>)
 800a048:	480f      	ldr	r0, [pc, #60]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 800a04a:	f00b f84b 	bl	80150e4 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 800a04e:	480e      	ldr	r0, [pc, #56]	@ (800a088 <MCU_ProcessModuleHardware+0x5a0>)
 800a050:	f7fb faf4 	bl	800563c <serialOut>
}
 800a054:	bf00      	nop
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05e:	bf00      	nop
 800a060:	47ae147b 	.word	0x47ae147b
 800a064:	3f947ae1 	.word	0x3f947ae1
 800a068:	47ae147b 	.word	0x47ae147b
 800a06c:	40847ae1 	.word	0x40847ae1
 800a070:	eb851eb8 	.word	0xeb851eb8
 800a074:	3f8eb851 	.word	0x3f8eb851
 800a078:	2000000c 	.word	0x2000000c
 800a07c:	20000d9c 	.word	0x20000d9c
 800a080:	40240000 	.word	0x40240000
 800a084:	08019ae0 	.word	0x08019ae0
 800a088:	20000b5c 	.word	0x20000b5c
 800a08c:	20000dec 	.word	0x20000dec
 800a090:	08019b28 	.word	0x08019b28
 800a094:	c2280000 	.word	0xc2280000
 800a098:	c0450000 	.word	0xc0450000
 800a09c:	08019b70 	.word	0x08019b70
 800a0a0:	08019bbc 	.word	0x08019bbc

0800a0a4 <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 800a0ae:	4b54      	ldr	r3, [pc, #336]	@ (800a200 <MCU_RequestModuleStatus+0x15c>)
 800a0b0:	7d1b      	ldrb	r3, [r3, #20]
 800a0b2:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73bb      	strb	r3, [r7, #14]
 800a0b8:	e02c      	b.n	800a114 <MCU_RequestModuleStatus+0x70>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	4a51      	ldr	r2, [pc, #324]	@ (800a204 <MCU_RequestModuleStatus+0x160>)
 800a0be:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0c2:	fb01 f303 	mul.w	r3, r1, r3
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f083 0301 	eor.w	r3, r3, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d119      	bne.n	800a10c <MCU_RequestModuleStatus+0x68>
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	4a4a      	ldr	r2, [pc, #296]	@ (800a204 <MCU_RequestModuleStatus+0x160>)
 800a0dc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00e      	beq.n	800a10c <MCU_RequestModuleStatus+0x68>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	4a44      	ldr	r2, [pc, #272]	@ (800a204 <MCU_RequestModuleStatus+0x160>)
 800a0f2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0f6:	fb01 f303 	mul.w	r3, r1, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	79fa      	ldrb	r2, [r7, #7]
 800a102:	429a      	cmp	r2, r3
 800a104:	d103      	bne.n	800a10e <MCU_RequestModuleStatus+0x6a>
      moduleIndex = index; // found it - save the index
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	73fb      	strb	r3, [r7, #15]
 800a10a:	e000      	b.n	800a10e <MCU_RequestModuleStatus+0x6a>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a10c:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	3301      	adds	r3, #1
 800a112:	73bb      	strb	r3, [r7, #14]
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	2b1f      	cmp	r3, #31
 800a118:	d9cf      	bls.n	800a0ba <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 800a11a:	4b39      	ldr	r3, [pc, #228]	@ (800a200 <MCU_RequestModuleStatus+0x15c>)
 800a11c:	7d1b      	ldrb	r3, [r3, #20]
 800a11e:	7bfa      	ldrb	r2, [r7, #15]
 800a120:	429a      	cmp	r2, r3
 800a122:	d10d      	bne.n	800a140 <MCU_RequestModuleStatus+0x9c>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 800a124:	4b38      	ldr	r3, [pc, #224]	@ (800a208 <MCU_RequestModuleStatus+0x164>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 0309 	and.w	r3, r3, #9
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d163      	bne.n	800a1f8 <MCU_RequestModuleStatus+0x154>
 800a130:	4936      	ldr	r1, [pc, #216]	@ (800a20c <MCU_RequestModuleStatus+0x168>)
 800a132:	4837      	ldr	r0, [pc, #220]	@ (800a210 <MCU_RequestModuleStatus+0x16c>)
 800a134:	f00a ffd6 	bl	80150e4 <siprintf>
 800a138:	4835      	ldr	r0, [pc, #212]	@ (800a210 <MCU_RequestModuleStatus+0x16c>)
 800a13a:	f7fb fa7f 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); 
      serialOut(tempBuffer);
    }
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 800a13e:	e05b      	b.n	800a1f8 <MCU_RequestModuleStatus+0x154>
    module[moduleIndex].statusPending = true;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4a30      	ldr	r2, [pc, #192]	@ (800a204 <MCU_RequestModuleStatus+0x160>)
 800a144:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	4413      	add	r3, r2
 800a14e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a152:	2201      	movs	r2, #1
 800a154:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].statusMessagesReceived = 0;  // Clear previous status bits
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	4a2a      	ldr	r2, [pc, #168]	@ (800a204 <MCU_RequestModuleStatus+0x160>)
 800a15a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 800a170:	4b28      	ldr	r3, [pc, #160]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800a176:	4b27      	ldr	r3, [pc, #156]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800a17c:	4b25      	ldr	r3, [pc, #148]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a17e:	2200      	movs	r2, #0
 800a180:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 800a182:	7b3a      	ldrb	r2, [r7, #12]
 800a184:	4b24      	ldr	r3, [pc, #144]	@ (800a218 <MCU_RequestModuleStatus+0x174>)
 800a186:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 800a188:	4a22      	ldr	r2, [pc, #136]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a18a:	8813      	ldrh	r3, [r2, #0]
 800a18c:	f240 5112 	movw	r1, #1298	@ 0x512
 800a190:	f361 030a 	bfi	r3, r1, #0, #11
 800a194:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 800a196:	79fa      	ldrb	r2, [r7, #7]
 800a198:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a19c:	491d      	ldr	r1, [pc, #116]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a19e:	680b      	ldr	r3, [r1, #0]
 800a1a0:	f362 23dc 	bfi	r3, r2, #11, #18
 800a1a4:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a1a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a1a8:	7913      	ldrb	r3, [r2, #4]
 800a1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1ae:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800a1b0:	4a18      	ldr	r2, [pc, #96]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a1b2:	7913      	ldrb	r3, [r2, #4]
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f361 0303 	bfi	r3, r1, #0, #4
 800a1ba:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a1bc:	4a15      	ldr	r2, [pc, #84]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a1be:	7913      	ldrb	r3, [r2, #4]
 800a1c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1c4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a1c6:	4a13      	ldr	r2, [pc, #76]	@ (800a214 <MCU_RequestModuleStatus+0x170>)
 800a1c8:	7913      	ldrb	r3, [r2, #4]
 800a1ca:	f043 0310 	orr.w	r3, r3, #16
 800a1ce:	7113      	strb	r3, [r2, #4]
    if(MCU_ShouldLogMessage(ID_MODULE_STATUS_REQUEST, true)){ 
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	f240 5012 	movw	r0, #1298	@ 0x512
 800a1d6:	f7fc fdf5 	bl	8006dc4 <MCU_ShouldLogMessage>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <MCU_RequestModuleStatus+0x14e>
      sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); 
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	490d      	ldr	r1, [pc, #52]	@ (800a21c <MCU_RequestModuleStatus+0x178>)
 800a1e6:	480a      	ldr	r0, [pc, #40]	@ (800a210 <MCU_RequestModuleStatus+0x16c>)
 800a1e8:	f00a ff7c 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800a1ec:	4808      	ldr	r0, [pc, #32]	@ (800a210 <MCU_RequestModuleStatus+0x16c>)
 800a1ee:	f7fb fa25 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	f7fe feea 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	2000a6ec 	.word	0x2000a6ec
 800a204:	20000dec 	.word	0x20000dec
 800a208:	2000000c 	.word	0x2000000c
 800a20c:	08019c28 	.word	0x08019c28
 800a210:	20000b5c 	.word	0x20000b5c
 800a214:	20000d40 	.word	0x20000d40
 800a218:	20000d4c 	.word	0x20000d4c
 800a21c:	08019c68 	.word	0x08019c68

0800a220 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 800a22e:	4b44      	ldr	r3, [pc, #272]	@ (800a340 <MCU_FindMaxVoltageModule+0x120>)
 800a230:	7d1b      	ldrb	r3, [r3, #20]
 800a232:	3301      	adds	r3, #1
 800a234:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a236:	2300      	movs	r3, #0
 800a238:	71fb      	strb	r3, [r7, #7]
 800a23a:	e06e      	b.n	800a31a <MCU_FindMaxVoltageModule+0xfa>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a23c:	79fb      	ldrb	r3, [r7, #7]
 800a23e:	4a41      	ldr	r2, [pc, #260]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a240:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a244:	fb01 f303 	mul.w	r3, r1, r3
 800a248:	4413      	add	r3, r2
 800a24a:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	f083 0301 	eor.w	r3, r3, #1
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d15b      	bne.n	800a312 <MCU_FindMaxVoltageModule+0xf2>
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	4a39      	ldr	r2, [pc, #228]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a25e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	4413      	add	r3, r2
 800a268:	3304      	adds	r3, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d050      	beq.n	800a312 <MCU_FindMaxVoltageModule+0xf2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	4a34      	ldr	r2, [pc, #208]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a274:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	4413      	add	r3, r2
 800a27e:	3314      	adds	r3, #20
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	88ba      	ldrh	r2, [r7, #4]
 800a284:	429a      	cmp	r2, r3
 800a286:	d245      	bcs.n	800a314 <MCU_FindMaxVoltageModule+0xf4>
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	4a2e      	ldr	r2, [pc, #184]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a28c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a290:	fb01 f303 	mul.w	r3, r1, r3
 800a294:	4413      	add	r3, r2
 800a296:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a29a:	789b      	ldrb	r3, [r3, #2]
 800a29c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d136      	bne.n	800a314 <MCU_FindMaxVoltageModule+0xf4>
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	4a26      	ldr	r2, [pc, #152]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a2aa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2ae:	fb01 f303 	mul.w	r3, r1, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a2b8:	789b      	ldrb	r3, [r3, #2]
 800a2ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d127      	bne.n	800a314 <MCU_FindMaxVoltageModule+0xf4>
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a2c8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a2d6:	789b      	ldrb	r3, [r3, #2]
 800a2d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d118      	bne.n	800a314 <MCU_FindMaxVoltageModule+0xf4>
      maxVoltage = module[index].mmv;
 800a2e2:	79fb      	ldrb	r3, [r7, #7]
 800a2e4:	4a17      	ldr	r2, [pc, #92]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a2e6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2ea:	fb01 f303 	mul.w	r3, r1, r3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3314      	adds	r3, #20
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	4a12      	ldr	r2, [pc, #72]	@ (800a344 <MCU_FindMaxVoltageModule+0x124>)
 800a2fa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2fe:	fb01 f303 	mul.w	r3, r1, r3
 800a302:	4413      	add	r3, r2
 800a304:	3308      	adds	r3, #8
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 800a30a:	79bb      	ldrb	r3, [r7, #6]
 800a30c:	3301      	adds	r3, #1
 800a30e:	71bb      	strb	r3, [r7, #6]
 800a310:	e000      	b.n	800a314 <MCU_FindMaxVoltageModule+0xf4>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a312:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	3301      	adds	r3, #1
 800a318:	71fb      	strb	r3, [r7, #7]
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b1f      	cmp	r3, #31
 800a31e:	d98d      	bls.n	800a23c <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 800a320:	88bb      	ldrh	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d104      	bne.n	800a330 <MCU_FindMaxVoltageModule+0x110>
 800a326:	79bb      	ldrb	r3, [r7, #6]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <MCU_FindMaxVoltageModule+0x110>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e000      	b.n	800a332 <MCU_FindMaxVoltageModule+0x112>
  else return moduleId;
 800a330:	78fb      	ldrb	r3, [r7, #3]
}
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	2000a6ec 	.word	0x2000a6ec
 800a344:	20000dec 	.word	0x20000dec

0800a348 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	b09d      	sub	sp, #116	@ 0x74
 800a34e:	af0a      	add	r7, sp, #40	@ 0x28
  CANFRM_MODULE_STATUS_1 status1;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 800a350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a354:	2208      	movs	r2, #8
 800a356:	2100      	movs	r1, #0
 800a358:	4618      	mov	r0, r3
 800a35a:	f00a ff2a 	bl	80151b2 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 800a35e:	4a56      	ldr	r2, [pc, #344]	@ (800a4b8 <MCU_ProcessModuleStatus1+0x170>)
 800a360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a364:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a368:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received
  if(debugMessages & DBG_MSG_STATUS1){
 800a36c:	4b53      	ldr	r3, [pc, #332]	@ (800a4bc <MCU_ProcessModuleStatus1+0x174>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d045      	beq.n	800a404 <MCU_ProcessModuleStatus1+0xbc>
    if(debugMessages & DBG_MSG_MINIMAL){
 800a378:	4b50      	ldr	r3, [pc, #320]	@ (800a4bc <MCU_ProcessModuleStatus1+0x174>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d014      	beq.n	800a3ae <MCU_ProcessModuleStatus1+0x66>
        // Minimal mode - just print module ID without leading zero or newline
        extern UART_HandleTypeDef huart1;
        sprintf(tempBuffer,"%x", rxObj.bF.id.EID);
 800a384:	4b4e      	ldr	r3, [pc, #312]	@ (800a4c0 <MCU_ProcessModuleStatus1+0x178>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a38c:	461a      	mov	r2, r3
 800a38e:	494d      	ldr	r1, [pc, #308]	@ (800a4c4 <MCU_ProcessModuleStatus1+0x17c>)
 800a390:	484d      	ldr	r0, [pc, #308]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a392:	f00a fea7 	bl	80150e4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 800a396:	484c      	ldr	r0, [pc, #304]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a398:	f7f5 ff52 	bl	8000240 <strlen>
 800a39c:	4603      	mov	r3, r0
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a4:	4948      	ldr	r1, [pc, #288]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a3a6:	4849      	ldr	r0, [pc, #292]	@ (800a4cc <MCU_ProcessModuleStatus1+0x184>)
 800a3a8:	f008 ff94 	bl	80132d4 <HAL_UART_Transmit>
 800a3ac:	e02a      	b.n	800a404 <MCU_ProcessModuleStatus1+0xbc>
    }
    else {
        // Full debug mode
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
                rxObj.bF.id.EID, 
 800a3ae:	4b44      	ldr	r3, [pc, #272]	@ (800a4c0 <MCU_ProcessModuleStatus1+0x178>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3b6:	469c      	mov	ip, r3
                status1.moduleState & 0x0F,           // Lower 4 bits
 800a3b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a3c0:	b2db      	uxtb	r3, r3
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3c2:	f003 020f 	and.w	r2, r3, #15
                (status1.moduleStatus) & 0x0F,        // Upper 4 bits  
 800a3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a3ce:	b2db      	uxtb	r3, r3
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3d0:	f003 030f 	and.w	r3, r3, #15
                status1.moduleSoc,
 800a3d4:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
                status1.moduleSoh,
 800a3d8:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
                status1.cellCount,
 800a3dc:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
                status1.moduleMmv,                     // module measured voltage
 800a3e0:	8e7d      	ldrh	r5, [r7, #50]	@ 0x32
                (int16_t)status1.moduleMmc);           // module measured current
 800a3e2:	8e3e      	ldrh	r6, [r7, #48]	@ 0x30
 800a3e4:	b236      	sxth	r6, r6
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3e6:	9605      	str	r6, [sp, #20]
 800a3e8:	9504      	str	r5, [sp, #16]
 800a3ea:	9403      	str	r4, [sp, #12]
 800a3ec:	9002      	str	r0, [sp, #8]
 800a3ee:	9101      	str	r1, [sp, #4]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	4662      	mov	r2, ip
 800a3f6:	4936      	ldr	r1, [pc, #216]	@ (800a4d0 <MCU_ProcessModuleStatus1+0x188>)
 800a3f8:	4833      	ldr	r0, [pc, #204]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a3fa:	f00a fe73 	bl	80150e4 <siprintf>
        serialOut(tempBuffer);
 800a3fe:	4832      	ldr	r0, [pc, #200]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a400:	f7fb f91c 	bl	800563c <serialOut>
    }
  }

  //find the module index
  moduleIndex = pack.moduleCount;
 800a404:	4b33      	ldr	r3, [pc, #204]	@ (800a4d4 <MCU_ProcessModuleStatus1+0x18c>)
 800a406:	7d1b      	ldrb	r3, [r3, #20]
 800a408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a412:	e038      	b.n	800a486 <MCU_ProcessModuleStatus1+0x13e>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a414:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a418:	4a2f      	ldr	r2, [pc, #188]	@ (800a4d8 <MCU_ProcessModuleStatus1+0x190>)
 800a41a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a41e:	fb01 f303 	mul.w	r3, r1, r3
 800a422:	4413      	add	r3, r2
 800a424:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f083 0301 	eor.w	r3, r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d122      	bne.n	800a47a <MCU_ProcessModuleStatus1+0x132>
 800a434:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a438:	4a27      	ldr	r2, [pc, #156]	@ (800a4d8 <MCU_ProcessModuleStatus1+0x190>)
 800a43a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	4413      	add	r3, r2
 800a444:	3304      	adds	r3, #4
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d016      	beq.n	800a47a <MCU_ProcessModuleStatus1+0x132>
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a44c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c0 <MCU_ProcessModuleStatus1+0x178>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a454:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a458:	491f      	ldr	r1, [pc, #124]	@ (800a4d8 <MCU_ProcessModuleStatus1+0x190>)
 800a45a:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a45e:	fb00 f303 	mul.w	r3, r0, r3
 800a462:	440b      	add	r3, r1
 800a464:	3308      	adds	r3, #8
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d105      	bne.n	800a47c <MCU_ProcessModuleStatus1+0x134>
      moduleIndex = index; // found it - save the index
 800a470:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a474:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a478:	e000      	b.n	800a47c <MCU_ProcessModuleStatus1+0x134>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a47a:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a47c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a480:	3301      	adds	r3, #1
 800a482:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a486:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a48a:	2b1f      	cmp	r3, #31
 800a48c:	d9c2      	bls.n	800a414 <MCU_ProcessModuleStatus1+0xcc>
    }
  if (moduleIndex == pack.moduleCount){
 800a48e:	4b11      	ldr	r3, [pc, #68]	@ (800a4d4 <MCU_ProcessModuleStatus1+0x18c>)
 800a490:	7d1b      	ldrb	r3, [r3, #20]
 800a492:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a496:	429a      	cmp	r2, r3
 800a498:	d124      	bne.n	800a4e4 <MCU_ProcessModuleStatus1+0x19c>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 800a49a:	4b10      	ldr	r3, [pc, #64]	@ (800a4dc <MCU_ProcessModuleStatus1+0x194>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	f003 0309 	and.w	r3, r3, #9
 800a4a2:	2b09      	cmp	r3, #9
 800a4a4:	f040 82a4 	bne.w	800a9f0 <MCU_ProcessModuleStatus1+0x6a8>
 800a4a8:	490d      	ldr	r1, [pc, #52]	@ (800a4e0 <MCU_ProcessModuleStatus1+0x198>)
 800a4aa:	4807      	ldr	r0, [pc, #28]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a4ac:	f00a fe1a 	bl	80150e4 <siprintf>
 800a4b0:	4805      	ldr	r0, [pc, #20]	@ (800a4c8 <MCU_ProcessModuleStatus1+0x180>)
 800a4b2:	f7fb f8c3 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 800a4b6:	e29b      	b.n	800a9f0 <MCU_ProcessModuleStatus1+0x6a8>
 800a4b8:	20000da8 	.word	0x20000da8
 800a4bc:	20000010 	.word	0x20000010
 800a4c0:	20000d9c 	.word	0x20000d9c
 800a4c4:	08019c90 	.word	0x08019c90
 800a4c8:	20000b5c 	.word	0x20000b5c
 800a4cc:	20000444 	.word	0x20000444
 800a4d0:	08019c94 	.word	0x08019c94
 800a4d4:	2000a6ec 	.word	0x2000a6ec
 800a4d8:	20000dec 	.word	0x20000dec
 800a4dc:	2000000c 	.word	0x2000000c
 800a4e0:	08019d00 	.word	0x08019d00
    module[moduleIndex].statusMessagesReceived |= (1 << 0);  // Status1 received
 800a4e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4e8:	4ac5      	ldr	r2, [pc, #788]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a4ea:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a4ee:	fb01 f303 	mul.w	r3, r1, r3
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a4f8:	781a      	ldrb	r2, [r3, #0]
 800a4fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4fe:	f042 0201 	orr.w	r2, r2, #1
 800a502:	b2d0      	uxtb	r0, r2
 800a504:	4abe      	ldr	r2, [pc, #760]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a506:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a514:	4602      	mov	r2, r0
 800a516:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800a518:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a51c:	4ab8      	ldr	r2, [pc, #736]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a51e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a522:	fb01 f303 	mul.w	r3, r1, r3
 800a526:	4413      	add	r3, r2
 800a528:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b07      	cmp	r3, #7
 800a530:	d117      	bne.n	800a562 <MCU_ProcessModuleStatus1+0x21a>
        module[moduleIndex].statusPending = false;
 800a532:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a536:	4ab2      	ldr	r2, [pc, #712]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a538:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a53c:	fb01 f303 	mul.w	r3, r1, r3
 800a540:	4413      	add	r3, r2
 800a542:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800a54a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a54e:	4aac      	ldr	r2, [pc, #688]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a550:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	4413      	add	r3, r2
 800a55a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800a562:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a566:	4aa6      	ldr	r2, [pc, #664]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a568:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	4413      	add	r3, r2
 800a572:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d023      	beq.n	800a5c4 <MCU_ProcessModuleStatus1+0x27c>
 800a57c:	4ba1      	ldr	r3, [pc, #644]	@ (800a804 <MCU_ProcessModuleStatus1+0x4bc>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01d      	beq.n	800a5c4 <MCU_ProcessModuleStatus1+0x27c>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800a588:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a58c:	4a9c      	ldr	r2, [pc, #624]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a58e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	3308      	adds	r3, #8
 800a59a:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800a59c:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800a59e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5a2:	4a97      	ldr	r2, [pc, #604]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a5a4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5a8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a5b2:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	4994      	ldr	r1, [pc, #592]	@ (800a808 <MCU_ProcessModuleStatus1+0x4c0>)
 800a5b8:	4894      	ldr	r0, [pc, #592]	@ (800a80c <MCU_ProcessModuleStatus1+0x4c4>)
 800a5ba:	f00a fd93 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800a5be:	4893      	ldr	r0, [pc, #588]	@ (800a80c <MCU_ProcessModuleStatus1+0x4c4>)
 800a5c0:	f7fb f83c 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a5c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5c8:	4a8d      	ldr	r2, [pc, #564]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a5ca:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5ce:	fb01 f303 	mul.w	r3, r1, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 800a5dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5e0:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 800a5e2:	4a87      	ldr	r2, [pc, #540]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a5e4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5e8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3316      	adds	r3, #22
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 800a5f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5f8:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800a5fa:	4a81      	ldr	r2, [pc, #516]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a5fc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a600:	fb01 f303 	mul.w	r3, r1, r3
 800a604:	4413      	add	r3, r2
 800a606:	3314      	adds	r3, #20
 800a608:	4602      	mov	r2, r0
 800a60a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 800a60c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a610:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 800a614:	4a7a      	ldr	r2, [pc, #488]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a616:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a61a:	fb01 f303 	mul.w	r3, r1, r3
 800a61e:	4413      	add	r3, r2
 800a620:	332b      	adds	r3, #43	@ 0x2b
 800a622:	4602      	mov	r2, r0
 800a624:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 800a626:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a62a:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 800a62e:	4a74      	ldr	r2, [pc, #464]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a630:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a634:	fb01 f303 	mul.w	r3, r1, r3
 800a638:	4413      	add	r3, r2
 800a63a:	332c      	adds	r3, #44	@ 0x2c
 800a63c:	4602      	mov	r2, r0
 800a63e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800a640:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a644:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a64e:	4610      	mov	r0, r2
 800a650:	4a6b      	ldr	r2, [pc, #428]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a652:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	4413      	add	r3, r2
 800a65c:	3327      	adds	r3, #39	@ 0x27
 800a65e:	4602      	mov	r2, r0
 800a660:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 800a662:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a666:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a670:	4610      	mov	r0, r2
 800a672:	4a63      	ldr	r2, [pc, #396]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a674:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a678:	fb01 f303 	mul.w	r3, r1, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	3326      	adds	r3, #38	@ 0x26
 800a680:	4602      	mov	r2, r0
 800a682:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 800a684:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a688:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 800a68c:	4a5c      	ldr	r2, [pc, #368]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a68e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a692:	fb01 f303 	mul.w	r3, r1, r3
 800a696:	4413      	add	r3, r2
 800a698:	332d      	adds	r3, #45	@ 0x2d
 800a69a:	4602      	mov	r2, r0
 800a69c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a69e:	4b5c      	ldr	r3, [pc, #368]	@ (800a810 <MCU_ProcessModuleStatus1+0x4c8>)
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6a8:	4955      	ldr	r1, [pc, #340]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a6aa:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a6ae:	fb00 f303 	mul.w	r3, r0, r3
 800a6b2:	440b      	add	r3, r1
 800a6b4:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a6b8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a6ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6be:	4a55      	ldr	r2, [pc, #340]	@ (800a814 <MCU_ProcessModuleStatus1+0x4cc>)
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	494f      	ldr	r1, [pc, #316]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a6c4:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a6c8:	fb00 f303 	mul.w	r3, r0, r3
 800a6cc:	440b      	add	r3, r1
 800a6ce:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a6d2:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 800a6d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6d8:	4a49      	ldr	r2, [pc, #292]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a6da:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a6de:	fb01 f303 	mul.w	r3, r1, r3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3327      	adds	r3, #39	@ 0x27
 800a6e6:	781a      	ldrb	r2, [r3, #0]
 800a6e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6ec:	4944      	ldr	r1, [pc, #272]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a6ee:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a6f2:	fb00 f303 	mul.w	r3, r0, r3
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3329      	adds	r3, #41	@ 0x29
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d10a      	bne.n	800a716 <MCU_ProcessModuleStatus1+0x3ce>
     module[moduleIndex].command.commandStatus = commandActive;
 800a700:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a704:	4a3e      	ldr	r2, [pc, #248]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a706:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a70a:	fb01 f303 	mul.w	r3, r1, r3
 800a70e:	4413      	add	r3, r2
 800a710:	332a      	adds	r3, #42	@ 0x2a
 800a712:	2201      	movs	r2, #1
 800a714:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a716:	4b40      	ldr	r3, [pc, #256]	@ (800a818 <MCU_ProcessModuleStatus1+0x4d0>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8166 	beq.w	800a9f0 <MCU_ProcessModuleStatus1+0x6a8>
      switch (module[moduleIndex].currentState){
 800a724:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a728:	4a35      	ldr	r2, [pc, #212]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a72a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a72e:	fb01 f303 	mul.w	r3, r1, r3
 800a732:	4413      	add	r3, r2
 800a734:	3327      	adds	r3, #39	@ 0x27
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d014      	beq.n	800a766 <MCU_ProcessModuleStatus1+0x41e>
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	dc19      	bgt.n	800a774 <MCU_ProcessModuleStatus1+0x42c>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <MCU_ProcessModuleStatus1+0x402>
 800a744:	2b01      	cmp	r3, #1
 800a746:	d007      	beq.n	800a758 <MCU_ProcessModuleStatus1+0x410>
 800a748:	e014      	b.n	800a774 <MCU_ProcessModuleStatus1+0x42c>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800a74a:	f107 031c 	add.w	r3, r7, #28
 800a74e:	4933      	ldr	r1, [pc, #204]	@ (800a81c <MCU_ProcessModuleStatus1+0x4d4>)
 800a750:	4618      	mov	r0, r3
 800a752:	f00a fcc7 	bl	80150e4 <siprintf>
 800a756:	e01f      	b.n	800a798 <MCU_ProcessModuleStatus1+0x450>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800a758:	f107 031c 	add.w	r3, r7, #28
 800a75c:	4930      	ldr	r1, [pc, #192]	@ (800a820 <MCU_ProcessModuleStatus1+0x4d8>)
 800a75e:	4618      	mov	r0, r3
 800a760:	f00a fcc0 	bl	80150e4 <siprintf>
 800a764:	e018      	b.n	800a798 <MCU_ProcessModuleStatus1+0x450>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800a766:	f107 031c 	add.w	r3, r7, #28
 800a76a:	492e      	ldr	r1, [pc, #184]	@ (800a824 <MCU_ProcessModuleStatus1+0x4dc>)
 800a76c:	4618      	mov	r0, r3
 800a76e:	f00a fcb9 	bl	80150e4 <siprintf>
 800a772:	e011      	b.n	800a798 <MCU_ProcessModuleStatus1+0x450>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 800a774:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a778:	4a21      	ldr	r2, [pc, #132]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a77a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a77e:	fb01 f303 	mul.w	r3, r1, r3
 800a782:	4413      	add	r3, r2
 800a784:	3327      	adds	r3, #39	@ 0x27
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	f107 031c 	add.w	r3, r7, #28
 800a78e:	4926      	ldr	r1, [pc, #152]	@ (800a828 <MCU_ProcessModuleStatus1+0x4e0>)
 800a790:	4618      	mov	r0, r3
 800a792:	f00a fca7 	bl	80150e4 <siprintf>
 800a796:	bf00      	nop
      switch (module[moduleIndex].status){
 800a798:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a79c:	4a18      	ldr	r2, [pc, #96]	@ (800a800 <MCU_ProcessModuleStatus1+0x4b8>)
 800a79e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a7a2:	fb01 f303 	mul.w	r3, r1, r3
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3326      	adds	r3, #38	@ 0x26
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d843      	bhi.n	800a838 <MCU_ProcessModuleStatus1+0x4f0>
 800a7b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b8 <MCU_ProcessModuleStatus1+0x470>)
 800a7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b6:	bf00      	nop
 800a7b8:	0800a7c9 	.word	0x0800a7c9
 800a7bc:	0800a7d7 	.word	0x0800a7d7
 800a7c0:	0800a7e5 	.word	0x0800a7e5
 800a7c4:	0800a7f3 	.word	0x0800a7f3
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800a7c8:	f107 030c 	add.w	r3, r7, #12
 800a7cc:	4913      	ldr	r1, [pc, #76]	@ (800a81c <MCU_ProcessModuleStatus1+0x4d4>)
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f00a fc88 	bl	80150e4 <siprintf>
 800a7d4:	e042      	b.n	800a85c <MCU_ProcessModuleStatus1+0x514>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4914      	ldr	r1, [pc, #80]	@ (800a82c <MCU_ProcessModuleStatus1+0x4e4>)
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f00a fc81 	bl	80150e4 <siprintf>
 800a7e2:	e03b      	b.n	800a85c <MCU_ProcessModuleStatus1+0x514>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 800a7e4:	f107 030c 	add.w	r3, r7, #12
 800a7e8:	4911      	ldr	r1, [pc, #68]	@ (800a830 <MCU_ProcessModuleStatus1+0x4e8>)
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f00a fc7a 	bl	80150e4 <siprintf>
 800a7f0:	e034      	b.n	800a85c <MCU_ProcessModuleStatus1+0x514>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800a7f2:	f107 030c 	add.w	r3, r7, #12
 800a7f6:	490f      	ldr	r1, [pc, #60]	@ (800a834 <MCU_ProcessModuleStatus1+0x4ec>)
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f00a fc73 	bl	80150e4 <siprintf>
 800a7fe:	e02d      	b.n	800a85c <MCU_ProcessModuleStatus1+0x514>
 800a800:	20000dec 	.word	0x20000dec
 800a804:	20000010 	.word	0x20000010
 800a808:	08019d40 	.word	0x08019d40
 800a80c:	20000b5c 	.word	0x20000b5c
 800a810:	200005d0 	.word	0x200005d0
 800a814:	20000d20 	.word	0x20000d20
 800a818:	2000000c 	.word	0x2000000c
 800a81c:	08019d84 	.word	0x08019d84
 800a820:	08019d8c 	.word	0x08019d8c
 800a824:	08019d98 	.word	0x08019d98
 800a828:	08019da0 	.word	0x08019da0
 800a82c:	08019dac 	.word	0x08019dac
 800a830:	08019db8 	.word	0x08019db8
 800a834:	08019dc4 	.word	0x08019dc4
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800a838:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a83c:	4a76      	ldr	r2, [pc, #472]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a83e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a842:	fb01 f303 	mul.w	r3, r1, r3
 800a846:	4413      	add	r3, r2
 800a848:	3326      	adds	r3, #38	@ 0x26
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	f107 030c 	add.w	r3, r7, #12
 800a852:	4972      	ldr	r1, [pc, #456]	@ (800aa1c <MCU_ProcessModuleStatus1+0x6d4>)
 800a854:	4618      	mov	r0, r3
 800a856:	f00a fc45 	bl	80150e4 <siprintf>
 800a85a:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 800a85c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a860:	4a6d      	ldr	r2, [pc, #436]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a862:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a866:	fb01 f303 	mul.w	r3, r1, r3
 800a86a:	4413      	add	r3, r2
 800a86c:	3314      	adds	r3, #20
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	4618      	mov	r0, r3
 800a872:	f7f5 fe3f 	bl	80004f4 <__aeabi_i2d>
 800a876:	a362      	add	r3, pc, #392	@ (adr r3, 800aa00 <MCU_ProcessModuleStatus1+0x6b8>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fea4 	bl	80005c8 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4610      	mov	r0, r2
 800a886:	4619      	mov	r1, r3
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	f04f 0300 	mov.w	r3, #0
 800a890:	f7f5 fce4 	bl	800025c <__adddf3>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4610      	mov	r0, r2
 800a89a:	4619      	mov	r1, r3
 800a89c:	f7f6 f98c 	bl	8000bb8 <__aeabi_d2f>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 800a8a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a8a8:	4a5b      	ldr	r2, [pc, #364]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a8aa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3316      	adds	r3, #22
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7f5 fe1b 	bl	80004f4 <__aeabi_i2d>
 800a8be:	a352      	add	r3, pc, #328	@ (adr r3, 800aa08 <MCU_ProcessModuleStatus1+0x6c0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fe80 	bl	80005c8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	a34f      	add	r3, pc, #316	@ (adr r3, 800aa10 <MCU_ProcessModuleStatus1+0x6c8>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fcbf 	bl	8000258 <__aeabi_dsub>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f7f6 f969 	bl	8000bb8 <__aeabi_d2f>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800a8ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a8ee:	4a4a      	ldr	r2, [pc, #296]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a8f0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	332b      	adds	r3, #43	@ 0x2b
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f5 fdf8 	bl	80004f4 <__aeabi_i2d>
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	4b45      	ldr	r3, [pc, #276]	@ (800aa20 <MCU_ProcessModuleStatus1+0x6d8>)
 800a90a:	f7f5 fe5d 	bl	80005c8 <__aeabi_dmul>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4610      	mov	r0, r2
 800a914:	4619      	mov	r1, r3
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	f7f5 fc9d 	bl	800025c <__adddf3>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4610      	mov	r0, r2
 800a928:	4619      	mov	r1, r3
 800a92a:	f7f6 f945 	bl	8000bb8 <__aeabi_d2f>
 800a92e:	4603      	mov	r3, r0
 800a930:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 800a932:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a936:	4a38      	ldr	r2, [pc, #224]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a938:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a93c:	fb01 f303 	mul.w	r3, r1, r3
 800a940:	4413      	add	r3, r2
 800a942:	332c      	adds	r3, #44	@ 0x2c
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	4618      	mov	r0, r3
 800a948:	f7f5 fdd4 	bl	80004f4 <__aeabi_i2d>
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	4b33      	ldr	r3, [pc, #204]	@ (800aa20 <MCU_ProcessModuleStatus1+0x6d8>)
 800a952:	f7f5 fe39 	bl	80005c8 <__aeabi_dmul>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	f7f5 fc79 	bl	800025c <__adddf3>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4610      	mov	r0, r2
 800a970:	4619      	mov	r1, r3
 800a972:	f7f6 f921 	bl	8000bb8 <__aeabi_d2f>
 800a976:	4603      	mov	r3, r0
 800a978:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a97a:	4b2a      	ldr	r3, [pc, #168]	@ (800aa24 <MCU_ProcessModuleStatus1+0x6dc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a982:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a984:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a988:	4a23      	ldr	r2, [pc, #140]	@ (800aa18 <MCU_ProcessModuleStatus1+0x6d0>)
 800a98a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a98e:	fb01 f303 	mul.w	r3, r1, r3
 800a992:	4413      	add	r3, r2
 800a994:	332d      	adds	r3, #45	@ 0x2d
 800a996:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a998:	461e      	mov	r6, r3
 800a99a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a99c:	f7f5 fdbc 	bl	8000518 <__aeabi_f2d>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9a6:	f7f5 fdb7 	bl	8000518 <__aeabi_f2d>
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	4689      	mov	r9, r1
 800a9ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9b0:	f7f5 fdb2 	bl	8000518 <__aeabi_f2d>
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	468b      	mov	fp, r1
 800a9b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a9ba:	f7f5 fdad 	bl	8000518 <__aeabi_f2d>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	f107 011c 	add.w	r1, r7, #28
 800a9c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a9ce:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a9d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a9d6:	9601      	str	r6, [sp, #4]
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	4911      	ldr	r1, [pc, #68]	@ (800aa28 <MCU_ProcessModuleStatus1+0x6e0>)
 800a9e4:	4811      	ldr	r0, [pc, #68]	@ (800aa2c <MCU_ProcessModuleStatus1+0x6e4>)
 800a9e6:	f00a fb7d 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800a9ea:	4810      	ldr	r0, [pc, #64]	@ (800aa2c <MCU_ProcessModuleStatus1+0x6e4>)
 800a9ec:	f7fa fe26 	bl	800563c <serialOut>
}
 800a9f0:	bf00      	nop
 800a9f2:	374c      	adds	r7, #76	@ 0x4c
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w
 800aa00:	eb851eb8 	.word	0xeb851eb8
 800aa04:	3f8eb851 	.word	0x3f8eb851
 800aa08:	47ae147b 	.word	0x47ae147b
 800aa0c:	3f947ae1 	.word	0x3f947ae1
 800aa10:	47ae147b 	.word	0x47ae147b
 800aa14:	40847ae1 	.word	0x40847ae1
 800aa18:	20000dec 	.word	0x20000dec
 800aa1c:	08019da0 	.word	0x08019da0
 800aa20:	3fe00000 	.word	0x3fe00000
 800aa24:	20000d9c 	.word	0x20000d9c
 800aa28:	08019dcc 	.word	0x08019dcc
 800aa2c:	20000b5c 	.word	0x20000b5c

0800aa30 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	b091      	sub	sp, #68	@ 0x44
 800aa36:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 800aa38:	1d3b      	adds	r3, r7, #4
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f00a fbb7 	bl	80151b2 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 800aa44:	4a3b      	ldr	r2, [pc, #236]	@ (800ab34 <MCU_ProcessModuleStatus2+0x104>)
 800aa46:	1d3b      	adds	r3, r7, #4
 800aa48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa4c:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received (skip in minimal mode)
  if(debugMessages & DBG_MSG_STATUS2 && !(debugMessages & DBG_MSG_MINIMAL)){
 800aa50:	4b39      	ldr	r3, [pc, #228]	@ (800ab38 <MCU_ProcessModuleStatus2+0x108>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01b      	beq.n	800aa94 <MCU_ProcessModuleStatus2+0x64>
 800aa5c:	4b36      	ldr	r3, [pc, #216]	@ (800ab38 <MCU_ProcessModuleStatus2+0x108>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d115      	bne.n	800aa94 <MCU_ProcessModuleStatus2+0x64>
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
            rxObj.bF.id.EID,
 800aa68:	4b34      	ldr	r3, [pc, #208]	@ (800ab3c <MCU_ProcessModuleStatus2+0x10c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa70:	4618      	mov	r0, r3
            status2.cellLoVolt,
 800aa72:	88bb      	ldrh	r3, [r7, #4]
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa74:	461c      	mov	r4, r3
            status2.cellHiVolt,
 800aa76:	88fb      	ldrh	r3, [r7, #6]
            status2.cellAvgVolt,
 800aa78:	893a      	ldrh	r2, [r7, #8]
            status2.cellTotalV);
 800aa7a:	8979      	ldrh	r1, [r7, #10]
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa7c:	9102      	str	r1, [sp, #8]
 800aa7e:	9201      	str	r2, [sp, #4]
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	4623      	mov	r3, r4
 800aa84:	4602      	mov	r2, r0
 800aa86:	492e      	ldr	r1, [pc, #184]	@ (800ab40 <MCU_ProcessModuleStatus2+0x110>)
 800aa88:	482e      	ldr	r0, [pc, #184]	@ (800ab44 <MCU_ProcessModuleStatus2+0x114>)
 800aa8a:	f00a fb2b 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 800aa8e:	482d      	ldr	r0, [pc, #180]	@ (800ab44 <MCU_ProcessModuleStatus2+0x114>)
 800aa90:	f7fa fdd4 	bl	800563c <serialOut>
  }

  //find the module index
  moduleIndex = pack.moduleCount;
 800aa94:	4b2c      	ldr	r3, [pc, #176]	@ (800ab48 <MCU_ProcessModuleStatus2+0x118>)
 800aa96:	7d1b      	ldrb	r3, [r3, #20]
 800aa98:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	77bb      	strb	r3, [r7, #30]
 800aa9e:	e031      	b.n	800ab04 <MCU_ProcessModuleStatus2+0xd4>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aaa0:	7fbb      	ldrb	r3, [r7, #30]
 800aaa2:	4a2a      	ldr	r2, [pc, #168]	@ (800ab4c <MCU_ProcessModuleStatus2+0x11c>)
 800aaa4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	4413      	add	r3, r2
 800aaae:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	f083 0301 	eor.w	r3, r3, #1
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d11e      	bne.n	800aafc <MCU_ProcessModuleStatus2+0xcc>
 800aabe:	7fbb      	ldrb	r3, [r7, #30]
 800aac0:	4a22      	ldr	r2, [pc, #136]	@ (800ab4c <MCU_ProcessModuleStatus2+0x11c>)
 800aac2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	4413      	add	r3, r2
 800aacc:	3304      	adds	r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d013      	beq.n	800aafc <MCU_ProcessModuleStatus2+0xcc>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800aad4:	4b19      	ldr	r3, [pc, #100]	@ (800ab3c <MCU_ProcessModuleStatus2+0x10c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800aadc:	7fbb      	ldrb	r3, [r7, #30]
 800aade:	491b      	ldr	r1, [pc, #108]	@ (800ab4c <MCU_ProcessModuleStatus2+0x11c>)
 800aae0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800aae4:	fb00 f303 	mul.w	r3, r0, r3
 800aae8:	440b      	add	r3, r1
 800aaea:	3308      	adds	r3, #8
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d103      	bne.n	800aafe <MCU_ProcessModuleStatus2+0xce>
      moduleIndex = index; // found it - save the index
 800aaf6:	7fbb      	ldrb	r3, [r7, #30]
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e000      	b.n	800aafe <MCU_ProcessModuleStatus2+0xce>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aafc:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aafe:	7fbb      	ldrb	r3, [r7, #30]
 800ab00:	3301      	adds	r3, #1
 800ab02:	77bb      	strb	r3, [r7, #30]
 800ab04:	7fbb      	ldrb	r3, [r7, #30]
 800ab06:	2b1f      	cmp	r3, #31
 800ab08:	d9ca      	bls.n	800aaa0 <MCU_ProcessModuleStatus2+0x70>
    }
  if (moduleIndex == pack.moduleCount){
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab48 <MCU_ProcessModuleStatus2+0x118>)
 800ab0c:	7d1b      	ldrb	r3, [r3, #20]
 800ab0e:	7ffa      	ldrb	r2, [r7, #31]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d121      	bne.n	800ab58 <MCU_ProcessModuleStatus2+0x128>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 800ab14:	4b0e      	ldr	r3, [pc, #56]	@ (800ab50 <MCU_ProcessModuleStatus2+0x120>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 0309 	and.w	r3, r3, #9
 800ab1c:	2b09      	cmp	r3, #9
 800ab1e:	f040 818f 	bne.w	800ae40 <MCU_ProcessModuleStatus2+0x410>
 800ab22:	490c      	ldr	r1, [pc, #48]	@ (800ab54 <MCU_ProcessModuleStatus2+0x124>)
 800ab24:	4807      	ldr	r0, [pc, #28]	@ (800ab44 <MCU_ProcessModuleStatus2+0x114>)
 800ab26:	f00a fadd 	bl	80150e4 <siprintf>
 800ab2a:	4806      	ldr	r0, [pc, #24]	@ (800ab44 <MCU_ProcessModuleStatus2+0x114>)
 800ab2c:	f7fa fd86 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 800ab30:	e186      	b.n	800ae40 <MCU_ProcessModuleStatus2+0x410>
 800ab32:	bf00      	nop
 800ab34:	20000da8 	.word	0x20000da8
 800ab38:	20000010 	.word	0x20000010
 800ab3c:	20000d9c 	.word	0x20000d9c
 800ab40:	08019e4c 	.word	0x08019e4c
 800ab44:	20000b5c 	.word	0x20000b5c
 800ab48:	2000a6ec 	.word	0x2000a6ec
 800ab4c:	20000dec 	.word	0x20000dec
 800ab50:	2000000c 	.word	0x2000000c
 800ab54:	08019e98 	.word	0x08019e98
    module[moduleIndex].statusMessagesReceived |= (1 << 1);  // Status2 received
 800ab58:	7ffb      	ldrb	r3, [r7, #31]
 800ab5a:	4ac1      	ldr	r2, [pc, #772]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ab5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab60:	fb01 f303 	mul.w	r3, r1, r3
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	7ffb      	ldrb	r3, [r7, #31]
 800ab6e:	f042 0202 	orr.w	r2, r2, #2
 800ab72:	b2d0      	uxtb	r0, r2
 800ab74:	4aba      	ldr	r2, [pc, #744]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ab76:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab7a:	fb01 f303 	mul.w	r3, r1, r3
 800ab7e:	4413      	add	r3, r2
 800ab80:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab84:	4602      	mov	r2, r0
 800ab86:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800ab88:	7ffb      	ldrb	r3, [r7, #31]
 800ab8a:	4ab5      	ldr	r2, [pc, #724]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ab8c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab90:	fb01 f303 	mul.w	r3, r1, r3
 800ab94:	4413      	add	r3, r2
 800ab96:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b07      	cmp	r3, #7
 800ab9e:	d115      	bne.n	800abcc <MCU_ProcessModuleStatus2+0x19c>
        module[moduleIndex].statusPending = false;
 800aba0:	7ffb      	ldrb	r3, [r7, #31]
 800aba2:	4aaf      	ldr	r2, [pc, #700]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800aba4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aba8:	fb01 f303 	mul.w	r3, r1, r3
 800abac:	4413      	add	r3, r2
 800abae:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800abb6:	7ffb      	ldrb	r3, [r7, #31]
 800abb8:	4aa9      	ldr	r2, [pc, #676]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800abba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abbe:	fb01 f303 	mul.w	r3, r1, r3
 800abc2:	4413      	add	r3, r2
 800abc4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800abcc:	7ffb      	ldrb	r3, [r7, #31]
 800abce:	4aa4      	ldr	r2, [pc, #656]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800abd0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	4413      	add	r3, r2
 800abda:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d021      	beq.n	800ac28 <MCU_ProcessModuleStatus2+0x1f8>
 800abe4:	4b9f      	ldr	r3, [pc, #636]	@ (800ae64 <MCU_ProcessModuleStatus2+0x434>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01b      	beq.n	800ac28 <MCU_ProcessModuleStatus2+0x1f8>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800abf0:	7ffb      	ldrb	r3, [r7, #31]
 800abf2:	4a9b      	ldr	r2, [pc, #620]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800abf4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abf8:	fb01 f303 	mul.w	r3, r1, r3
 800abfc:	4413      	add	r3, r2
 800abfe:	3308      	adds	r3, #8
 800ac00:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800ac02:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800ac04:	7ffb      	ldrb	r3, [r7, #31]
 800ac06:	4a96      	ldr	r2, [pc, #600]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac08:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac0c:	fb01 f303 	mul.w	r3, r1, r3
 800ac10:	4413      	add	r3, r2
 800ac12:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800ac16:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4993      	ldr	r1, [pc, #588]	@ (800ae68 <MCU_ProcessModuleStatus2+0x438>)
 800ac1c:	4893      	ldr	r0, [pc, #588]	@ (800ae6c <MCU_ProcessModuleStatus2+0x43c>)
 800ac1e:	f00a fa61 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800ac22:	4892      	ldr	r0, [pc, #584]	@ (800ae6c <MCU_ProcessModuleStatus2+0x43c>)
 800ac24:	f7fa fd0a 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
 800ac2a:	4a8d      	ldr	r2, [pc, #564]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac2c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac30:	fb01 f303 	mul.w	r3, r1, r3
 800ac34:	4413      	add	r3, r2
 800ac36:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 800ac3e:	7ffb      	ldrb	r3, [r7, #31]
 800ac40:	8938      	ldrh	r0, [r7, #8]
 800ac42:	4a87      	ldr	r2, [pc, #540]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac44:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3322      	adds	r3, #34	@ 0x22
 800ac50:	4602      	mov	r2, r0
 800ac52:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 800ac54:	7ffb      	ldrb	r3, [r7, #31]
 800ac56:	88f8      	ldrh	r0, [r7, #6]
 800ac58:	4a81      	ldr	r2, [pc, #516]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	331e      	adds	r3, #30
 800ac66:	4602      	mov	r2, r0
 800ac68:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	88b8      	ldrh	r0, [r7, #4]
 800ac6e:	4a7c      	ldr	r2, [pc, #496]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac70:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac74:	fb01 f303 	mul.w	r3, r1, r3
 800ac78:	4413      	add	r3, r2
 800ac7a:	3320      	adds	r3, #32
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 800ac80:	7ffb      	ldrb	r3, [r7, #31]
 800ac82:	8978      	ldrh	r0, [r7, #10]
 800ac84:	4a76      	ldr	r2, [pc, #472]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ac86:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac8a:	fb01 f303 	mul.w	r3, r1, r3
 800ac8e:	4413      	add	r3, r2
 800ac90:	3324      	adds	r3, #36	@ 0x24
 800ac92:	4602      	mov	r2, r0
 800ac94:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800ac96:	4b76      	ldr	r3, [pc, #472]	@ (800ae70 <MCU_ProcessModuleStatus2+0x440>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	7ffb      	ldrb	r3, [r7, #31]
 800ac9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac9e:	4970      	ldr	r1, [pc, #448]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800aca0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800aca4:	fb00 f303 	mul.w	r3, r0, r3
 800aca8:	440b      	add	r3, r1
 800acaa:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800acae:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800acb0:	7ffb      	ldrb	r3, [r7, #31]
 800acb2:	4a70      	ldr	r2, [pc, #448]	@ (800ae74 <MCU_ProcessModuleStatus2+0x444>)
 800acb4:	6812      	ldr	r2, [r2, #0]
 800acb6:	496a      	ldr	r1, [pc, #424]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800acb8:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800acbc:	fb00 f303 	mul.w	r3, r0, r3
 800acc0:	440b      	add	r3, r1
 800acc2:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800acc6:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800acc8:	4b6b      	ldr	r3, [pc, #428]	@ (800ae78 <MCU_ProcessModuleStatus2+0x448>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 0308 	and.w	r3, r3, #8
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 80b5 	beq.w	800ae40 <MCU_ProcessModuleStatus2+0x410>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 800acd6:	7ffb      	ldrb	r3, [r7, #31]
 800acd8:	4a61      	ldr	r2, [pc, #388]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800acda:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800acde:	fb01 f303 	mul.w	r3, r1, r3
 800ace2:	4413      	add	r3, r2
 800ace4:	3322      	adds	r3, #34	@ 0x22
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fc03 	bl	80004f4 <__aeabi_i2d>
 800acee:	a358      	add	r3, pc, #352	@ (adr r3, 800ae50 <MCU_ProcessModuleStatus2+0x420>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 fc68 	bl	80005c8 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4610      	mov	r0, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	f04f 0300 	mov.w	r3, #0
 800ad08:	f7f5 faa8 	bl	800025c <__adddf3>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4610      	mov	r0, r2
 800ad12:	4619      	mov	r1, r3
 800ad14:	f7f5 ff50 	bl	8000bb8 <__aeabi_d2f>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 800ad1c:	7ffb      	ldrb	r3, [r7, #31]
 800ad1e:	4a50      	ldr	r2, [pc, #320]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ad20:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	4413      	add	r3, r2
 800ad2a:	331e      	adds	r3, #30
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7f5 fbe0 	bl	80004f4 <__aeabi_i2d>
 800ad34:	a346      	add	r3, pc, #280	@ (adr r3, 800ae50 <MCU_ProcessModuleStatus2+0x420>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 fc45 	bl	80005c8 <__aeabi_dmul>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4610      	mov	r0, r2
 800ad44:	4619      	mov	r1, r3
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	f7f5 fa85 	bl	800025c <__adddf3>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4610      	mov	r0, r2
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7f5 ff2d 	bl	8000bb8 <__aeabi_d2f>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 800ad62:	7ffb      	ldrb	r3, [r7, #31]
 800ad64:	4a3e      	ldr	r2, [pc, #248]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800ad66:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ad6a:	fb01 f303 	mul.w	r3, r1, r3
 800ad6e:	4413      	add	r3, r2
 800ad70:	3320      	adds	r3, #32
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7f5 fbbd 	bl	80004f4 <__aeabi_i2d>
 800ad7a:	a335      	add	r3, pc, #212	@ (adr r3, 800ae50 <MCU_ProcessModuleStatus2+0x420>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f7f5 fc22 	bl	80005c8 <__aeabi_dmul>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f04f 0200 	mov.w	r2, #0
 800ad90:	f04f 0300 	mov.w	r3, #0
 800ad94:	f7f5 fa62 	bl	800025c <__adddf3>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f7f5 ff0a 	bl	8000bb8 <__aeabi_d2f>
 800ada4:	4603      	mov	r3, r0
 800ada6:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800ada8:	7ffb      	ldrb	r3, [r7, #31]
 800adaa:	4a2d      	ldr	r2, [pc, #180]	@ (800ae60 <MCU_ProcessModuleStatus2+0x430>)
 800adac:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800adb0:	fb01 f303 	mul.w	r3, r1, r3
 800adb4:	4413      	add	r3, r2
 800adb6:	3324      	adds	r3, #36	@ 0x24
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f5 fb9a 	bl	80004f4 <__aeabi_i2d>
 800adc0:	a325      	add	r3, pc, #148	@ (adr r3, 800ae58 <MCU_ProcessModuleStatus2+0x428>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fbff 	bl	80005c8 <__aeabi_dmul>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4610      	mov	r0, r2
 800add0:	4619      	mov	r1, r3
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	f7f5 fa3f 	bl	800025c <__adddf3>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	f7f5 fee7 	bl	8000bb8 <__aeabi_d2f>
 800adea:	4603      	mov	r3, r0
 800adec:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 800adee:	4b23      	ldr	r3, [pc, #140]	@ (800ae7c <MCU_ProcessModuleStatus2+0x44c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 800adf6:	461e      	mov	r6, r3
 800adf8:	69b8      	ldr	r0, [r7, #24]
 800adfa:	f7f5 fb8d 	bl	8000518 <__aeabi_f2d>
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	6978      	ldr	r0, [r7, #20]
 800ae04:	f7f5 fb88 	bl	8000518 <__aeabi_f2d>
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	6938      	ldr	r0, [r7, #16]
 800ae0e:	f7f5 fb83 	bl	8000518 <__aeabi_f2d>
 800ae12:	4682      	mov	sl, r0
 800ae14:	468b      	mov	fp, r1
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7f5 fb7e 	bl	8000518 <__aeabi_f2d>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae24:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800ae28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ae2c:	e9cd 4500 	strd	r4, r5, [sp]
 800ae30:	4632      	mov	r2, r6
 800ae32:	4913      	ldr	r1, [pc, #76]	@ (800ae80 <MCU_ProcessModuleStatus2+0x450>)
 800ae34:	480d      	ldr	r0, [pc, #52]	@ (800ae6c <MCU_ProcessModuleStatus2+0x43c>)
 800ae36:	f00a f955 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800ae3a:	480c      	ldr	r0, [pc, #48]	@ (800ae6c <MCU_ProcessModuleStatus2+0x43c>)
 800ae3c:	f7fa fbfe 	bl	800563c <serialOut>
}
 800ae40:	bf00      	nop
 800ae42:	3724      	adds	r7, #36	@ 0x24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4a:	bf00      	nop
 800ae4c:	f3af 8000 	nop.w
 800ae50:	d2f1a9fc 	.word	0xd2f1a9fc
 800ae54:	3f50624d 	.word	0x3f50624d
 800ae58:	eb851eb8 	.word	0xeb851eb8
 800ae5c:	3f8eb851 	.word	0x3f8eb851
 800ae60:	20000dec 	.word	0x20000dec
 800ae64:	20000010 	.word	0x20000010
 800ae68:	08019d40 	.word	0x08019d40
 800ae6c:	20000b5c 	.word	0x20000b5c
 800ae70:	200005d0 	.word	0x200005d0
 800ae74:	20000d20 	.word	0x20000d20
 800ae78:	2000000c 	.word	0x2000000c
 800ae7c:	20000d9c 	.word	0x20000d9c
 800ae80:	08019ed8 	.word	0x08019ed8
 800ae84:	00000000 	.word	0x00000000

0800ae88 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 800ae88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	b08d      	sub	sp, #52	@ 0x34
 800ae8e:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 800ae90:	463b      	mov	r3, r7
 800ae92:	2208      	movs	r2, #8
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f00a f98b 	bl	80151b2 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800ae9c:	4a3a      	ldr	r2, [pc, #232]	@ (800af88 <MCU_ProcessModuleStatus3+0x100>)
 800ae9e:	463b      	mov	r3, r7
 800aea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aea4:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received (skip in minimal mode)
  if(debugMessages & DBG_MSG_STATUS3 && !(debugMessages & DBG_MSG_MINIMAL)){
 800aea8:	4b38      	ldr	r3, [pc, #224]	@ (800af8c <MCU_ProcessModuleStatus3+0x104>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d019      	beq.n	800aee8 <MCU_ProcessModuleStatus3+0x60>
 800aeb4:	4b35      	ldr	r3, [pc, #212]	@ (800af8c <MCU_ProcessModuleStatus3+0x104>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d113      	bne.n	800aee8 <MCU_ProcessModuleStatus3+0x60>
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
            rxObj.bF.id.EID,
 800aec0:	4b33      	ldr	r3, [pc, #204]	@ (800af90 <MCU_ProcessModuleStatus3+0x108>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800aec8:	4619      	mov	r1, r3
            status3.cellLoTemp,
 800aeca:	883b      	ldrh	r3, [r7, #0]
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800aecc:	4618      	mov	r0, r3
            status3.cellHiTemp,
 800aece:	887b      	ldrh	r3, [r7, #2]
            status3.cellAvgTemp);
 800aed0:	88ba      	ldrh	r2, [r7, #4]
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800aed2:	9201      	str	r2, [sp, #4]
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4603      	mov	r3, r0
 800aed8:	460a      	mov	r2, r1
 800aeda:	492e      	ldr	r1, [pc, #184]	@ (800af94 <MCU_ProcessModuleStatus3+0x10c>)
 800aedc:	482e      	ldr	r0, [pc, #184]	@ (800af98 <MCU_ProcessModuleStatus3+0x110>)
 800aede:	f00a f901 	bl	80150e4 <siprintf>
    serialOut(tempBuffer);
 800aee2:	482d      	ldr	r0, [pc, #180]	@ (800af98 <MCU_ProcessModuleStatus3+0x110>)
 800aee4:	f7fa fbaa 	bl	800563c <serialOut>
  }

  //find the module index
  moduleIndex = pack.moduleCount;
 800aee8:	4b2c      	ldr	r3, [pc, #176]	@ (800af9c <MCU_ProcessModuleStatus3+0x114>)
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aeee:	2300      	movs	r3, #0
 800aef0:	75bb      	strb	r3, [r7, #22]
 800aef2:	e031      	b.n	800af58 <MCU_ProcessModuleStatus3+0xd0>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aef4:	7dbb      	ldrb	r3, [r7, #22]
 800aef6:	4a2a      	ldr	r2, [pc, #168]	@ (800afa0 <MCU_ProcessModuleStatus3+0x118>)
 800aef8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aefc:	fb01 f303 	mul.w	r3, r1, r3
 800af00:	4413      	add	r3, r2
 800af02:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f083 0301 	eor.w	r3, r3, #1
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d11e      	bne.n	800af50 <MCU_ProcessModuleStatus3+0xc8>
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	4a22      	ldr	r2, [pc, #136]	@ (800afa0 <MCU_ProcessModuleStatus3+0x118>)
 800af16:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	4413      	add	r3, r2
 800af20:	3304      	adds	r3, #4
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d013      	beq.n	800af50 <MCU_ProcessModuleStatus3+0xc8>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800af28:	4b19      	ldr	r3, [pc, #100]	@ (800af90 <MCU_ProcessModuleStatus3+0x108>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800af30:	7dbb      	ldrb	r3, [r7, #22]
 800af32:	491b      	ldr	r1, [pc, #108]	@ (800afa0 <MCU_ProcessModuleStatus3+0x118>)
 800af34:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800af38:	fb00 f303 	mul.w	r3, r0, r3
 800af3c:	440b      	add	r3, r1
 800af3e:	3308      	adds	r3, #8
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800af46:	429a      	cmp	r2, r3
 800af48:	d103      	bne.n	800af52 <MCU_ProcessModuleStatus3+0xca>
      moduleIndex = index; // found it - save the index
 800af4a:	7dbb      	ldrb	r3, [r7, #22]
 800af4c:	75fb      	strb	r3, [r7, #23]
 800af4e:	e000      	b.n	800af52 <MCU_ProcessModuleStatus3+0xca>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800af50:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800af52:	7dbb      	ldrb	r3, [r7, #22]
 800af54:	3301      	adds	r3, #1
 800af56:	75bb      	strb	r3, [r7, #22]
 800af58:	7dbb      	ldrb	r3, [r7, #22]
 800af5a:	2b1f      	cmp	r3, #31
 800af5c:	d9ca      	bls.n	800aef4 <MCU_ProcessModuleStatus3+0x6c>
    }
  if (moduleIndex == pack.moduleCount){
 800af5e:	4b0f      	ldr	r3, [pc, #60]	@ (800af9c <MCU_ProcessModuleStatus3+0x114>)
 800af60:	7d1b      	ldrb	r3, [r3, #20]
 800af62:	7dfa      	ldrb	r2, [r7, #23]
 800af64:	429a      	cmp	r2, r3
 800af66:	d121      	bne.n	800afac <MCU_ProcessModuleStatus3+0x124>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800af68:	4b0e      	ldr	r3, [pc, #56]	@ (800afa4 <MCU_ProcessModuleStatus3+0x11c>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	f003 0309 	and.w	r3, r3, #9
 800af70:	2b09      	cmp	r3, #9
 800af72:	f040 8157 	bne.w	800b224 <MCU_ProcessModuleStatus3+0x39c>
 800af76:	490c      	ldr	r1, [pc, #48]	@ (800afa8 <MCU_ProcessModuleStatus3+0x120>)
 800af78:	4807      	ldr	r0, [pc, #28]	@ (800af98 <MCU_ProcessModuleStatus3+0x110>)
 800af7a:	f00a f8b3 	bl	80150e4 <siprintf>
 800af7e:	4806      	ldr	r0, [pc, #24]	@ (800af98 <MCU_ProcessModuleStatus3+0x110>)
 800af80:	f7fa fb5c 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 800af84:	e14e      	b.n	800b224 <MCU_ProcessModuleStatus3+0x39c>
 800af86:	bf00      	nop
 800af88:	20000da8 	.word	0x20000da8
 800af8c:	20000010 	.word	0x20000010
 800af90:	20000d9c 	.word	0x20000d9c
 800af94:	08019f68 	.word	0x08019f68
 800af98:	20000b5c 	.word	0x20000b5c
 800af9c:	2000a6ec 	.word	0x2000a6ec
 800afa0:	20000dec 	.word	0x20000dec
 800afa4:	2000000c 	.word	0x2000000c
 800afa8:	08019fa4 	.word	0x08019fa4
    module[moduleIndex].statusMessagesReceived |= (1 << 2);  // Status3 received
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	4aa4      	ldr	r2, [pc, #656]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800afb0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afb4:	fb01 f303 	mul.w	r3, r1, r3
 800afb8:	4413      	add	r3, r2
 800afba:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
 800afc2:	f042 0204 	orr.w	r2, r2, #4
 800afc6:	b2d0      	uxtb	r0, r2
 800afc8:	4a9d      	ldr	r2, [pc, #628]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800afca:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afce:	fb01 f303 	mul.w	r3, r1, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800afd8:	4602      	mov	r2, r0
 800afda:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
 800afde:	4a98      	ldr	r2, [pc, #608]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800afe0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	4413      	add	r3, r2
 800afea:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	d115      	bne.n	800b020 <MCU_ProcessModuleStatus3+0x198>
        module[moduleIndex].statusPending = false;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	4a92      	ldr	r2, [pc, #584]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800aff8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800affc:	fb01 f303 	mul.w	r3, r1, r3
 800b000:	4413      	add	r3, r2
 800b002:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800b006:	2200      	movs	r2, #0
 800b008:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	4a8c      	ldr	r2, [pc, #560]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b00e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b012:	fb01 f303 	mul.w	r3, r1, r3
 800b016:	4413      	add	r3, r2
 800b018:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	4a87      	ldr	r2, [pc, #540]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b024:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	4413      	add	r3, r2
 800b02e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d021      	beq.n	800b07c <MCU_ProcessModuleStatus3+0x1f4>
 800b038:	4b82      	ldr	r3, [pc, #520]	@ (800b244 <MCU_ProcessModuleStatus3+0x3bc>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01b      	beq.n	800b07c <MCU_ProcessModuleStatus3+0x1f4>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	4a7e      	ldr	r2, [pc, #504]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b048:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	4413      	add	r3, r2
 800b052:	3308      	adds	r3, #8
 800b054:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800b056:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800b058:	7dfb      	ldrb	r3, [r7, #23]
 800b05a:	4a79      	ldr	r2, [pc, #484]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b05c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b060:	fb01 f303 	mul.w	r3, r1, r3
 800b064:	4413      	add	r3, r2
 800b066:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800b06a:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800b06c:	4602      	mov	r2, r0
 800b06e:	4976      	ldr	r1, [pc, #472]	@ (800b248 <MCU_ProcessModuleStatus3+0x3c0>)
 800b070:	4876      	ldr	r0, [pc, #472]	@ (800b24c <MCU_ProcessModuleStatus3+0x3c4>)
 800b072:	f00a f837 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800b076:	4875      	ldr	r0, [pc, #468]	@ (800b24c <MCU_ProcessModuleStatus3+0x3c4>)
 800b078:	f7fa fae0 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	4a70      	ldr	r2, [pc, #448]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b080:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	4413      	add	r3, r2
 800b08a:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800b08e:	2200      	movs	r2, #0
 800b090:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	88b8      	ldrh	r0, [r7, #4]
 800b096:	4a6a      	ldr	r2, [pc, #424]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b098:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b09c:	fb01 f303 	mul.w	r3, r1, r3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	331c      	adds	r3, #28
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	8878      	ldrh	r0, [r7, #2]
 800b0ac:	4a64      	ldr	r2, [pc, #400]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b0ae:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b0b2:	fb01 f303 	mul.w	r3, r1, r3
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3318      	adds	r3, #24
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	8838      	ldrh	r0, [r7, #0]
 800b0c2:	4a5f      	ldr	r2, [pc, #380]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b0c4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	331a      	adds	r3, #26
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800b0d4:	4b5e      	ldr	r3, [pc, #376]	@ (800b250 <MCU_ProcessModuleStatus3+0x3c8>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b0dc:	4958      	ldr	r1, [pc, #352]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b0de:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b0e2:	fb00 f303 	mul.w	r3, r0, r3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b0ec:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	4a58      	ldr	r2, [pc, #352]	@ (800b254 <MCU_ProcessModuleStatus3+0x3cc>)
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	4952      	ldr	r1, [pc, #328]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b0f6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b0fa:	fb00 f303 	mul.w	r3, r0, r3
 800b0fe:	440b      	add	r3, r1
 800b100:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b104:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800b106:	4b54      	ldr	r3, [pc, #336]	@ (800b258 <MCU_ProcessModuleStatus3+0x3d0>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	f003 0308 	and.w	r3, r3, #8
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 8088 	beq.w	800b224 <MCU_ProcessModuleStatus3+0x39c>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	4a4a      	ldr	r2, [pc, #296]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b118:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b11c:	fb01 f303 	mul.w	r3, r1, r3
 800b120:	4413      	add	r3, r2
 800b122:	331c      	adds	r3, #28
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7f5 f9e4 	bl	80004f4 <__aeabi_i2d>
 800b12c:	a340      	add	r3, pc, #256	@ (adr r3, 800b230 <MCU_ProcessModuleStatus3+0x3a8>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 fa49 	bl	80005c8 <__aeabi_dmul>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4610      	mov	r0, r2
 800b13c:	4619      	mov	r1, r3
 800b13e:	a33e      	add	r3, pc, #248	@ (adr r3, 800b238 <MCU_ProcessModuleStatus3+0x3b0>)
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 f888 	bl	8000258 <__aeabi_dsub>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4610      	mov	r0, r2
 800b14e:	4619      	mov	r1, r3
 800b150:	f7f5 fd32 	bl	8000bb8 <__aeabi_d2f>
 800b154:	4603      	mov	r3, r0
 800b156:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	4a39      	ldr	r2, [pc, #228]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b15c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b160:	fb01 f303 	mul.w	r3, r1, r3
 800b164:	4413      	add	r3, r2
 800b166:	3318      	adds	r3, #24
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 f9c2 	bl	80004f4 <__aeabi_i2d>
 800b170:	a32f      	add	r3, pc, #188	@ (adr r3, 800b230 <MCU_ProcessModuleStatus3+0x3a8>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f5 fa27 	bl	80005c8 <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4610      	mov	r0, r2
 800b180:	4619      	mov	r1, r3
 800b182:	a32d      	add	r3, pc, #180	@ (adr r3, 800b238 <MCU_ProcessModuleStatus3+0x3b0>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 f866 	bl	8000258 <__aeabi_dsub>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4610      	mov	r0, r2
 800b192:	4619      	mov	r1, r3
 800b194:	f7f5 fd10 	bl	8000bb8 <__aeabi_d2f>
 800b198:	4603      	mov	r3, r0
 800b19a:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	4a28      	ldr	r2, [pc, #160]	@ (800b240 <MCU_ProcessModuleStatus3+0x3b8>)
 800b1a0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	4413      	add	r3, r2
 800b1aa:	331a      	adds	r3, #26
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f5 f9a0 	bl	80004f4 <__aeabi_i2d>
 800b1b4:	a31e      	add	r3, pc, #120	@ (adr r3, 800b230 <MCU_ProcessModuleStatus3+0x3a8>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f5 fa05 	bl	80005c8 <__aeabi_dmul>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	a31c      	add	r3, pc, #112	@ (adr r3, 800b238 <MCU_ProcessModuleStatus3+0x3b0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 f844 	bl	8000258 <__aeabi_dsub>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f7f5 fcee 	bl	8000bb8 <__aeabi_d2f>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800b1e0:	4b1e      	ldr	r3, [pc, #120]	@ (800b25c <MCU_ProcessModuleStatus3+0x3d4>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800b1e8:	461e      	mov	r6, r3
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f7f5 f994 	bl	8000518 <__aeabi_f2d>
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7f5 f98f 	bl	8000518 <__aeabi_f2d>
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	68b8      	ldr	r0, [r7, #8]
 800b200:	f7f5 f98a 	bl	8000518 <__aeabi_f2d>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b20c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b210:	e9cd 4500 	strd	r4, r5, [sp]
 800b214:	4632      	mov	r2, r6
 800b216:	4912      	ldr	r1, [pc, #72]	@ (800b260 <MCU_ProcessModuleStatus3+0x3d8>)
 800b218:	480c      	ldr	r0, [pc, #48]	@ (800b24c <MCU_ProcessModuleStatus3+0x3c4>)
 800b21a:	f009 ff63 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800b21e:	480b      	ldr	r0, [pc, #44]	@ (800b24c <MCU_ProcessModuleStatus3+0x3c4>)
 800b220:	f7fa fa0c 	bl	800563c <serialOut>
}
 800b224:	bf00      	nop
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b22e:	bf00      	nop
 800b230:	47ae147b 	.word	0x47ae147b
 800b234:	3f847ae1 	.word	0x3f847ae1
 800b238:	cccccccd 	.word	0xcccccccd
 800b23c:	404baccc 	.word	0x404baccc
 800b240:	20000dec 	.word	0x20000dec
 800b244:	20000010 	.word	0x20000010
 800b248:	08019d40 	.word	0x08019d40
 800b24c:	20000b5c 	.word	0x20000b5c
 800b250:	200005d0 	.word	0x200005d0
 800b254:	20000d20 	.word	0x20000d20
 800b258:	2000000c 	.word	0x2000000c
 800b25c:	20000d9c 	.word	0x20000d9c
 800b260:	08019fe4 	.word	0x08019fe4

0800b264 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800b264:	b580      	push	{r7, lr}
 800b266:	b094      	sub	sp, #80	@ 0x50
 800b268:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800b26a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b26e:	2208      	movs	r2, #8
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f009 ff9d 	bl	80151b2 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800b278:	4a31      	ldr	r2, [pc, #196]	@ (800b340 <MCU_ProcessCellCommStatus1+0xdc>)
 800b27a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b27e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b282:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800b286:	4b2f      	ldr	r3, [pc, #188]	@ (800b344 <MCU_ProcessCellCommStatus1+0xe0>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f003 0308 	and.w	r3, r3, #8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d052      	beq.n	800b338 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800b292:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b296:	2bff      	cmp	r3, #255	@ 0xff
 800b298:	d10a      	bne.n	800b2b0 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800b29a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800b2a2:	f107 0318 	add.w	r3, r7, #24
 800b2a6:	4928      	ldr	r1, [pc, #160]	@ (800b348 <MCU_ProcessCellCommStatus1+0xe4>)
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f009 ff1b 	bl	80150e4 <siprintf>
 800b2ae:	e019      	b.n	800b2e4 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800b2b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b2b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d109      	bne.n	800b2d0 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800b2bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4921      	ldr	r1, [pc, #132]	@ (800b34c <MCU_ProcessCellCommStatus1+0xe8>)
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f009 ff0b 	bl	80150e4 <siprintf>
 800b2ce:	e009      	b.n	800b2e4 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800b2d0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b2da:	f107 0018 	add.w	r0, r7, #24
 800b2de:	491c      	ldr	r1, [pc, #112]	@ (800b350 <MCU_ProcessCellCommStatus1+0xec>)
 800b2e0:	f009 ff00 	bl	80150e4 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800b2e4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b2e8:	2bff      	cmp	r3, #255	@ 0xff
 800b2ea:	d105      	bne.n	800b2f8 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800b2ec:	1d3b      	adds	r3, r7, #4
 800b2ee:	4919      	ldr	r1, [pc, #100]	@ (800b354 <MCU_ProcessCellCommStatus1+0xf0>)
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f009 fef7 	bl	80150e4 <siprintf>
 800b2f6:	e007      	b.n	800b308 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800b2f8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	1d3b      	adds	r3, r7, #4
 800b300:	4915      	ldr	r1, [pc, #84]	@ (800b358 <MCU_ProcessCellCommStatus1+0xf4>)
 800b302:	4618      	mov	r0, r3
 800b304:	f009 feee 	bl	80150e4 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b308:	4b14      	ldr	r3, [pc, #80]	@ (800b35c <MCU_ProcessCellCommStatus1+0xf8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b310:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b312:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b314:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b316:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b31a:	f107 0218 	add.w	r2, r7, #24
 800b31e:	9302      	str	r3, [sp, #8]
 800b320:	1d3b      	adds	r3, r7, #4
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	9100      	str	r1, [sp, #0]
 800b326:	4613      	mov	r3, r2
 800b328:	4602      	mov	r2, r0
 800b32a:	490d      	ldr	r1, [pc, #52]	@ (800b360 <MCU_ProcessCellCommStatus1+0xfc>)
 800b32c:	480d      	ldr	r0, [pc, #52]	@ (800b364 <MCU_ProcessCellCommStatus1+0x100>)
 800b32e:	f009 fed9 	bl	80150e4 <siprintf>

    serialOut(tempBuffer);
 800b332:	480c      	ldr	r0, [pc, #48]	@ (800b364 <MCU_ProcessCellCommStatus1+0x100>)
 800b334:	f7fa f982 	bl	800563c <serialOut>
  }
}
 800b338:	bf00      	nop
 800b33a:	3740      	adds	r7, #64	@ 0x40
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20000da8 	.word	0x20000da8
 800b344:	2000000c 	.word	0x2000000c
 800b348:	0801a050 	.word	0x0801a050
 800b34c:	0801a05c 	.word	0x0801a05c
 800b350:	0801a068 	.word	0x0801a068
 800b354:	0801a074 	.word	0x0801a074
 800b358:	0801a07c 	.word	0x0801a07c
 800b35c:	20000d9c 	.word	0x20000d9c
 800b360:	0801a090 	.word	0x0801a090
 800b364:	20000b5c 	.word	0x20000b5c

0800b368 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800b368:	b5b0      	push	{r4, r5, r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	4603      	mov	r3, r0
 800b370:	460a      	mov	r2, r1
 800b372:	71fb      	strb	r3, [r7, #7]
 800b374:	4613      	mov	r3, r2
 800b376:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800b37c:	79bb      	ldrb	r3, [r7, #6]
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	b2da      	uxtb	r2, r3
 800b384:	7a7b      	ldrb	r3, [r7, #9]
 800b386:	f362 0303 	bfi	r3, r2, #0, #4
 800b38a:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800b38c:	7a7b      	ldrb	r3, [r7, #9]
 800b38e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b392:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800b394:	4b4a      	ldr	r3, [pc, #296]	@ (800b4c0 <MCU_TransmitState+0x158>)
 800b396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b39a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800b39c:	4b49      	ldr	r3, [pc, #292]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800b3a2:	4b48      	ldr	r3, [pc, #288]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800b3a8:	4b46      	ldr	r3, [pc, #280]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	4a45      	ldr	r2, [pc, #276]	@ (800b4c8 <MCU_TransmitState+0x160>)
 800b3b2:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800b3b4:	4a43      	ldr	r2, [pc, #268]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3b6:	8813      	ldrh	r3, [r2, #0]
 800b3b8:	f240 5114 	movw	r1, #1300	@ 0x514
 800b3bc:	f361 030a 	bfi	r3, r1, #0, #11
 800b3c0:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800b3c2:	79fa      	ldrb	r2, [r7, #7]
 800b3c4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800b3c8:	493e      	ldr	r1, [pc, #248]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3ca:	680b      	ldr	r3, [r1, #0]
 800b3cc:	f362 23dc 	bfi	r3, r2, #11, #18
 800b3d0:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800b3d2:	4a3c      	ldr	r2, [pc, #240]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3d4:	7913      	ldrb	r3, [r2, #4]
 800b3d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3da:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800b3dc:	4a39      	ldr	r2, [pc, #228]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3de:	7913      	ldrb	r3, [r2, #4]
 800b3e0:	2104      	movs	r1, #4
 800b3e2:	f361 0303 	bfi	r3, r1, #0, #4
 800b3e6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b3e8:	4a36      	ldr	r2, [pc, #216]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3ea:	7913      	ldrb	r3, [r2, #4]
 800b3ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3f0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800b3f2:	4a34      	ldr	r2, [pc, #208]	@ (800b4c4 <MCU_TransmitState+0x15c>)
 800b3f4:	7913      	ldrb	r3, [r2, #4]
 800b3f6:	f043 0310 	orr.w	r3, r3, #16
 800b3fa:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800b3fc:	4b33      	ldr	r3, [pc, #204]	@ (800b4cc <MCU_TransmitState+0x164>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 0308 	and.w	r3, r3, #8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d019      	beq.n	800b43c <MCU_TransmitState+0xd4>
 800b408:	79fc      	ldrb	r4, [r7, #7]
 800b40a:	79bd      	ldrb	r5, [r7, #6]
 800b40c:	4b2c      	ldr	r3, [pc, #176]	@ (800b4c0 <MCU_TransmitState+0x158>)
 800b40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b412:	4618      	mov	r0, r3
 800b414:	f7f5 f86e 	bl	80004f4 <__aeabi_i2d>
 800b418:	a327      	add	r3, pc, #156	@ (adr r3, 800b4b8 <MCU_TransmitState+0x150>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	f7f5 f8d3 	bl	80005c8 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	e9cd 2300 	strd	r2, r3, [sp]
 800b42a:	462b      	mov	r3, r5
 800b42c:	4622      	mov	r2, r4
 800b42e:	4928      	ldr	r1, [pc, #160]	@ (800b4d0 <MCU_TransmitState+0x168>)
 800b430:	4828      	ldr	r0, [pc, #160]	@ (800b4d4 <MCU_TransmitState+0x16c>)
 800b432:	f009 fe57 	bl	80150e4 <siprintf>
 800b436:	4827      	ldr	r0, [pc, #156]	@ (800b4d4 <MCU_TransmitState+0x16c>)
 800b438:	f7fa f900 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800b43c:	2001      	movs	r0, #1
 800b43e:	f7fd fdc5 	bl	8008fcc <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f9df 	bl	800b808 <MCU_ModuleIndexFromId>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73fb      	strb	r3, [r7, #15]
  if(index < MAX_MODULES_PER_PACK){
 800b44e:	7bfb      	ldrb	r3, [r7, #15]
 800b450:	2b1f      	cmp	r3, #31
 800b452:	d82c      	bhi.n	800b4ae <MCU_TransmitState+0x146>
    module[index].command.commandedState  = state;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	4a20      	ldr	r2, [pc, #128]	@ (800b4d8 <MCU_TransmitState+0x170>)
 800b458:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b45c:	fb01 f303 	mul.w	r3, r1, r3
 800b460:	4413      	add	r3, r2
 800b462:	3329      	adds	r3, #41	@ 0x29
 800b464:	79ba      	ldrb	r2, [r7, #6]
 800b466:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4d8 <MCU_TransmitState+0x170>)
 800b46c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b470:	fb01 f303 	mul.w	r3, r1, r3
 800b474:	4413      	add	r3, r2
 800b476:	332a      	adds	r3, #42	@ 0x2a
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800b47c:	4b17      	ldr	r3, [pc, #92]	@ (800b4dc <MCU_TransmitState+0x174>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b484:	4914      	ldr	r1, [pc, #80]	@ (800b4d8 <MCU_TransmitState+0x170>)
 800b486:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b48a:	fb00 f303 	mul.w	r3, r0, r3
 800b48e:	440b      	add	r3, r1
 800b490:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b494:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	4a11      	ldr	r2, [pc, #68]	@ (800b4e0 <MCU_TransmitState+0x178>)
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	490e      	ldr	r1, [pc, #56]	@ (800b4d8 <MCU_TransmitState+0x170>)
 800b49e:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b4a2:	fb00 f303 	mul.w	r3, r0, r3
 800b4a6:	440b      	add	r3, r1
 800b4a8:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800b4ac:	601a      	str	r2, [r3, #0]
  }
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	eb851eb8 	.word	0xeb851eb8
 800b4bc:	3f8eb851 	.word	0x3f8eb851
 800b4c0:	2000a6ec 	.word	0x2000a6ec
 800b4c4:	20000d40 	.word	0x20000d40
 800b4c8:	20000d4c 	.word	0x20000d4c
 800b4cc:	2000000c 	.word	0x2000000c
 800b4d0:	0801a114 	.word	0x0801a114
 800b4d4:	20000b5c 	.word	0x20000b5c
 800b4d8:	20000dec 	.word	0x20000dec
 800b4dc:	200005d0 	.word	0x200005d0
 800b4e0:	20000d20 	.word	0x20000d20

0800b4e4 <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	f003 030f 	and.w	r3, r3, #15
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	7b3b      	ldrb	r3, [r7, #12]
 800b4f8:	f362 0303 	bfi	r3, r2, #0, #4
 800b4fc:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800b4fe:	7b3b      	ldrb	r3, [r7, #12]
 800b500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b504:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800b506:	4b1c      	ldr	r3, [pc, #112]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800b50c:	4b1a      	ldr	r3, [pc, #104]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b50e:	2200      	movs	r2, #0
 800b510:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800b512:	4b19      	ldr	r3, [pc, #100]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b514:	2200      	movs	r2, #0
 800b516:	609a      	str	r2, [r3, #8]

  memcpy(txd, &maxState, sizeof(maxState));
 800b518:	7b3a      	ldrb	r2, [r7, #12]
 800b51a:	4b18      	ldr	r3, [pc, #96]	@ (800b57c <MCU_TransmitMaxState+0x98>)
 800b51c:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800b51e:	4a16      	ldr	r2, [pc, #88]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b520:	8813      	ldrh	r3, [r2, #0]
 800b522:	f240 5117 	movw	r1, #1303	@ 0x517
 800b526:	f361 030a 	bfi	r3, r1, #0, #11
 800b52a:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800b52c:	4b14      	ldr	r3, [pc, #80]	@ (800b580 <MCU_TransmitMaxState+0x9c>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800b536:	4910      	ldr	r1, [pc, #64]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b538:	680b      	ldr	r3, [r1, #0]
 800b53a:	f362 23dc 	bfi	r3, r2, #11, #18
 800b53e:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800b540:	4a0d      	ldr	r2, [pc, #52]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b542:	7913      	ldrb	r3, [r2, #4]
 800b544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b548:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800b54a:	4a0b      	ldr	r2, [pc, #44]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b54c:	7913      	ldrb	r3, [r2, #4]
 800b54e:	2101      	movs	r1, #1
 800b550:	f361 0303 	bfi	r3, r1, #0, #4
 800b554:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b556:	4a08      	ldr	r2, [pc, #32]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b558:	7913      	ldrb	r3, [r2, #4]
 800b55a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b55e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800b560:	4a05      	ldr	r2, [pc, #20]	@ (800b578 <MCU_TransmitMaxState+0x94>)
 800b562:	7913      	ldrb	r3, [r2, #4]
 800b564:	f043 0310 	orr.w	r3, r3, #16
 800b568:	7113      	strb	r3, [r2, #4]

//  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800b56a:	2001      	movs	r0, #1
 800b56c:	f7fd fd2e 	bl	8008fcc <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20000d40 	.word	0x20000d40
 800b57c:	20000d4c 	.word	0x20000d4c
 800b580:	2000a6ec 	.word	0x2000a6ec

0800b584 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800b584:	b5b0      	push	{r4, r5, r7, lr}
 800b586:	b08a      	sub	sp, #40	@ 0x28
 800b588:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800b58e:	4a92      	ldr	r2, [pc, #584]	@ (800b7d8 <MCU_ProcessCellDetail+0x254>)
 800b590:	1d3b      	adds	r3, r7, #4
 800b592:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b596:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800b59a:	4b90      	ldr	r3, [pc, #576]	@ (800b7dc <MCU_ProcessCellDetail+0x258>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d017      	beq.n	800b5d6 <MCU_ProcessCellDetail+0x52>
 800b5a6:	4b8e      	ldr	r3, [pc, #568]	@ (800b7e0 <MCU_ProcessCellDetail+0x25c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b5ae:	461c      	mov	r4, r3
 800b5b0:	797b      	ldrb	r3, [r7, #5]
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	793b      	ldrb	r3, [r7, #4]
 800b5b6:	7aba      	ldrb	r2, [r7, #10]
 800b5b8:	88f9      	ldrh	r1, [r7, #6]
 800b5ba:	8938      	ldrh	r0, [r7, #8]
 800b5bc:	9003      	str	r0, [sp, #12]
 800b5be:	9102      	str	r1, [sp, #8]
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	462b      	mov	r3, r5
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	4986      	ldr	r1, [pc, #536]	@ (800b7e4 <MCU_ProcessCellDetail+0x260>)
 800b5ca:	4887      	ldr	r0, [pc, #540]	@ (800b7e8 <MCU_ProcessCellDetail+0x264>)
 800b5cc:	f009 fd8a 	bl	80150e4 <siprintf>
 800b5d0:	4885      	ldr	r0, [pc, #532]	@ (800b7e8 <MCU_ProcessCellDetail+0x264>)
 800b5d2:	f7fa f833 	bl	800563c <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800b5d6:	4b85      	ldr	r3, [pc, #532]	@ (800b7ec <MCU_ProcessCellDetail+0x268>)
 800b5d8:	7d1b      	ldrb	r3, [r3, #20]
 800b5da:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b5dc:	2300      	movs	r3, #0
 800b5de:	75bb      	strb	r3, [r7, #22]
 800b5e0:	e031      	b.n	800b646 <MCU_ProcessCellDetail+0xc2>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800b5e2:	7dbb      	ldrb	r3, [r7, #22]
 800b5e4:	4a82      	ldr	r2, [pc, #520]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b5e6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b5ea:	fb01 f303 	mul.w	r3, r1, r3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f083 0301 	eor.w	r3, r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11e      	bne.n	800b63e <MCU_ProcessCellDetail+0xba>
 800b600:	7dbb      	ldrb	r3, [r7, #22]
 800b602:	4a7b      	ldr	r2, [pc, #492]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b604:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	3304      	adds	r3, #4
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d013      	beq.n	800b63e <MCU_ProcessCellDetail+0xba>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800b616:	4b72      	ldr	r3, [pc, #456]	@ (800b7e0 <MCU_ProcessCellDetail+0x25c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800b61e:	7dbb      	ldrb	r3, [r7, #22]
 800b620:	4973      	ldr	r1, [pc, #460]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b622:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b626:	fb00 f303 	mul.w	r3, r0, r3
 800b62a:	440b      	add	r3, r1
 800b62c:	3308      	adds	r3, #8
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800b634:	429a      	cmp	r2, r3
 800b636:	d103      	bne.n	800b640 <MCU_ProcessCellDetail+0xbc>
      moduleIndex = index; // module is already registered, save the index
 800b638:	7dbb      	ldrb	r3, [r7, #22]
 800b63a:	75fb      	strb	r3, [r7, #23]
 800b63c:	e000      	b.n	800b640 <MCU_ProcessCellDetail+0xbc>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800b63e:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b640:	7dbb      	ldrb	r3, [r7, #22]
 800b642:	3301      	adds	r3, #1
 800b644:	75bb      	strb	r3, [r7, #22]
 800b646:	7dbb      	ldrb	r3, [r7, #22]
 800b648:	2b1f      	cmp	r3, #31
 800b64a:	d9ca      	bls.n	800b5e2 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	7978      	ldrb	r0, [r7, #5]
 800b650:	4a67      	ldr	r2, [pc, #412]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b652:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b656:	fb01 f303 	mul.w	r3, r1, r3
 800b65a:	4413      	add	r3, r2
 800b65c:	332d      	adds	r3, #45	@ 0x2d
 800b65e:	4602      	mov	r2, r0
 800b660:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800b662:	7dfa      	ldrb	r2, [r7, #23]
 800b664:	793b      	ldrb	r3, [r7, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	7abc      	ldrb	r4, [r7, #10]
 800b66a:	4961      	ldr	r1, [pc, #388]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b66c:	4603      	mov	r3, r0
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	4403      	add	r3, r0
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b678:	fb00 f202 	mul.w	r2, r0, r2
 800b67c:	4413      	add	r3, r2
 800b67e:	440b      	add	r3, r1
 800b680:	3332      	adds	r3, #50	@ 0x32
 800b682:	4622      	mov	r2, r4
 800b684:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800b686:	7dfa      	ldrb	r2, [r7, #23]
 800b688:	793b      	ldrb	r3, [r7, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	7afc      	ldrb	r4, [r7, #11]
 800b68e:	4958      	ldr	r1, [pc, #352]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b690:	4603      	mov	r3, r0
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	4403      	add	r3, r0
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b69c:	fb00 f202 	mul.w	r2, r0, r2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	440b      	add	r3, r1
 800b6a4:	3333      	adds	r3, #51	@ 0x33
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800b6aa:	7dfa      	ldrb	r2, [r7, #23]
 800b6ac:	793b      	ldrb	r3, [r7, #4]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	88fc      	ldrh	r4, [r7, #6]
 800b6b2:	494f      	ldr	r1, [pc, #316]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	4403      	add	r3, r0
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6c0:	fb00 f202 	mul.w	r2, r0, r2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	440b      	add	r3, r1
 800b6c8:	3330      	adds	r3, #48	@ 0x30
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800b6ce:	7dfa      	ldrb	r2, [r7, #23]
 800b6d0:	793b      	ldrb	r3, [r7, #4]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	893c      	ldrh	r4, [r7, #8]
 800b6d6:	4946      	ldr	r1, [pc, #280]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b6d8:	4603      	mov	r3, r0
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	4403      	add	r3, r0
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6e4:	fb00 f202 	mul.w	r2, r0, r2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	440b      	add	r3, r1
 800b6ec:	332e      	adds	r3, #46	@ 0x2e
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800b6f2:	4b40      	ldr	r3, [pc, #256]	@ (800b7f4 <MCU_ProcessCellDetail+0x270>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b6fa:	493d      	ldr	r1, [pc, #244]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b6fc:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b700:	fb00 f303 	mul.w	r3, r0, r3
 800b704:	440b      	add	r3, r1
 800b706:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b70a:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	4a3a      	ldr	r2, [pc, #232]	@ (800b7f8 <MCU_ProcessCellDetail+0x274>)
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	4937      	ldr	r1, [pc, #220]	@ (800b7f0 <MCU_ProcessCellDetail+0x26c>)
 800b714:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b718:	fb00 f303 	mul.w	r3, r0, r3
 800b71c:	440b      	add	r3, r1
 800b71e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b722:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800b724:	793b      	ldrb	r3, [r7, #4]
 800b726:	461a      	mov	r2, r3
 800b728:	797b      	ldrb	r3, [r7, #5]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	429a      	cmp	r2, r3
 800b72e:	da4f      	bge.n	800b7d0 <MCU_ProcessCellDetail+0x24c>

    detailRequest.cellId = cellDetail.cellId +1;
 800b730:	793b      	ldrb	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800b738:	4b30      	ldr	r3, [pc, #192]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800b73e:	4b2f      	ldr	r3, [pc, #188]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800b744:	4b2d      	ldr	r3, [pc, #180]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b746:	2200      	movs	r2, #0
 800b748:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800b74a:	4b2d      	ldr	r3, [pc, #180]	@ (800b800 <MCU_ProcessCellDetail+0x27c>)
 800b74c:	461a      	mov	r2, r3
 800b74e:	f107 030c 	add.w	r3, r7, #12
 800b752:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b756:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800b75a:	4a28      	ldr	r2, [pc, #160]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b75c:	8813      	ldrh	r3, [r2, #0]
 800b75e:	f240 5115 	movw	r1, #1301	@ 0x515
 800b762:	f361 030a 	bfi	r3, r1, #0, #11
 800b766:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800b768:	4b1d      	ldr	r3, [pc, #116]	@ (800b7e0 <MCU_ProcessCellDetail+0x25c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800b770:	4a22      	ldr	r2, [pc, #136]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b772:	6813      	ldr	r3, [r2, #0]
 800b774:	f361 23dc 	bfi	r3, r1, #11, #18
 800b778:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b77a:	4a20      	ldr	r2, [pc, #128]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b77c:	7913      	ldrb	r3, [r2, #4]
 800b77e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b782:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800b784:	4a1d      	ldr	r2, [pc, #116]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b786:	7913      	ldrb	r3, [r2, #4]
 800b788:	2102      	movs	r1, #2
 800b78a:	f361 0303 	bfi	r3, r1, #0, #4
 800b78e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b790:	4a1a      	ldr	r2, [pc, #104]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b792:	7913      	ldrb	r3, [r2, #4]
 800b794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b798:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b79a:	4a18      	ldr	r2, [pc, #96]	@ (800b7fc <MCU_ProcessCellDetail+0x278>)
 800b79c:	7913      	ldrb	r3, [r2, #4]
 800b79e:	f043 0310 	orr.w	r3, r3, #16
 800b7a2:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800b7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b7dc <MCU_ProcessCellDetail+0x258>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <MCU_ProcessCellDetail+0x246>
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e0 <MCU_ProcessCellDetail+0x25c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	7b7b      	ldrb	r3, [r7, #13]
 800b7bc:	4911      	ldr	r1, [pc, #68]	@ (800b804 <MCU_ProcessCellDetail+0x280>)
 800b7be:	480a      	ldr	r0, [pc, #40]	@ (800b7e8 <MCU_ProcessCellDetail+0x264>)
 800b7c0:	f009 fc90 	bl	80150e4 <siprintf>
 800b7c4:	4808      	ldr	r0, [pc, #32]	@ (800b7e8 <MCU_ProcessCellDetail+0x264>)
 800b7c6:	f7f9 ff39 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800b7ca:	2001      	movs	r0, #1
 800b7cc:	f7fd fbfe 	bl	8008fcc <MCU_TransmitMessageQueue>
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d8:	20000da8 	.word	0x20000da8
 800b7dc:	2000000c 	.word	0x2000000c
 800b7e0:	20000d9c 	.word	0x20000d9c
 800b7e4:	0801a14c 	.word	0x0801a14c
 800b7e8:	20000b5c 	.word	0x20000b5c
 800b7ec:	2000a6ec 	.word	0x2000a6ec
 800b7f0:	20000dec 	.word	0x20000dec
 800b7f4:	200005d0 	.word	0x200005d0
 800b7f8:	20000d20 	.word	0x20000d20
 800b7fc:	20000d40 	.word	0x20000d40
 800b800:	20000d4c 	.word	0x20000d4c
 800b804:	0801a1a8 	.word	0x0801a1a8

0800b808 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = MAX_MODULES_PER_PACK;
 800b812:	2320      	movs	r3, #32
 800b814:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b816:	2300      	movs	r3, #0
 800b818:	73bb      	strb	r3, [r7, #14]
 800b81a:	e01c      	b.n	800b856 <MCU_ModuleIndexFromId+0x4e>
     if(moduleId == module[index].moduleId && module[index].isRegistered)
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	4a15      	ldr	r2, [pc, #84]	@ (800b874 <MCU_ModuleIndexFromId+0x6c>)
 800b820:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b824:	fb01 f303 	mul.w	r3, r1, r3
 800b828:	4413      	add	r3, r2
 800b82a:	3308      	adds	r3, #8
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	79fa      	ldrb	r2, [r7, #7]
 800b830:	429a      	cmp	r2, r3
 800b832:	d10d      	bne.n	800b850 <MCU_ModuleIndexFromId+0x48>
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	4a0f      	ldr	r2, [pc, #60]	@ (800b874 <MCU_ModuleIndexFromId+0x6c>)
 800b838:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	4413      	add	r3, r2
 800b842:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <MCU_ModuleIndexFromId+0x48>
       moduleIndex = index; // found it - save the index
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b850:	7bbb      	ldrb	r3, [r7, #14]
 800b852:	3301      	adds	r3, #1
 800b854:	73bb      	strb	r3, [r7, #14]
 800b856:	7bbb      	ldrb	r3, [r7, #14]
 800b858:	2b1f      	cmp	r3, #31
 800b85a:	d9df      	bls.n	800b81c <MCU_ModuleIndexFromId+0x14>
     }
   if (moduleIndex != MAX_MODULES_PER_PACK) return moduleIndex;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d001      	beq.n	800b866 <MCU_ModuleIndexFromId+0x5e>
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	e000      	b.n	800b868 <MCU_ModuleIndexFromId+0x60>
   else return MAX_MODULES_PER_PACK; // unregistered module
 800b866:	2320      	movs	r3, #32

}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	20000dec 	.word	0x20000dec

0800b878 <MCU_UpdateModuleCounts>:

/***************************************************************************************************************
*     M C U _ U p d a t e M o d u l e C o u n t s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateModuleCounts(void)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
    pack.totalModules = 0;
 800b87e:	4b21      	ldr	r3, [pc, #132]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b880:	2200      	movs	r2, #0
 800b882:	765a      	strb	r2, [r3, #25]
    pack.activeModules = 0;
 800b884:	4b1f      	ldr	r3, [pc, #124]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b886:	2200      	movs	r2, #0
 800b888:	75da      	strb	r2, [r3, #23]
    pack.moduleCount = 0;  // Keep for compatibility
 800b88a:	4b1e      	ldr	r3, [pc, #120]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	751a      	strb	r2, [r3, #20]
    
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 800b890:	2300      	movs	r3, #0
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	e02b      	b.n	800b8ee <MCU_UpdateModuleCounts+0x76>
        if(module[i].uniqueId != 0){
 800b896:	4a1c      	ldr	r2, [pc, #112]	@ (800b908 <MCU_UpdateModuleCounts+0x90>)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b89e:	fb01 f303 	mul.w	r3, r1, r3
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01d      	beq.n	800b8e8 <MCU_UpdateModuleCounts+0x70>
            pack.totalModules++;
 800b8ac:	4b15      	ldr	r3, [pc, #84]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8ae:	7e5b      	ldrb	r3, [r3, #25]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	4b13      	ldr	r3, [pc, #76]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8b6:	765a      	strb	r2, [r3, #25]
            if(module[i].isRegistered){
 800b8b8:	4a13      	ldr	r2, [pc, #76]	@ (800b908 <MCU_UpdateModuleCounts+0x90>)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b8c0:	fb01 f303 	mul.w	r3, r1, r3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <MCU_UpdateModuleCounts+0x70>
                pack.activeModules++;
 800b8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8d2:	7ddb      	ldrb	r3, [r3, #23]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8da:	75da      	strb	r2, [r3, #23]
                pack.moduleCount++;  // Keep for compatibility
 800b8dc:	4b09      	ldr	r3, [pc, #36]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8de:	7d1b      	ldrb	r3, [r3, #20]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	4b07      	ldr	r3, [pc, #28]	@ (800b904 <MCU_UpdateModuleCounts+0x8c>)
 800b8e6:	751a      	strb	r2, [r3, #20]
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b1f      	cmp	r3, #31
 800b8f2:	ddd0      	ble.n	800b896 <MCU_UpdateModuleCounts+0x1e>
            }
        }
    }
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	2000a6ec 	.word	0x2000a6ec
 800b908:	20000dec 	.word	0x20000dec

0800b90c <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b916:	4b31      	ldr	r3, [pc, #196]	@ (800b9dc <MCU_TicksSinceLastMessage+0xd0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b91e:	4b30      	ldr	r3, [pc, #192]	@ (800b9e0 <MCU_TicksSinceLastMessage+0xd4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff ff6e 	bl	800b808 <MCU_ModuleIndexFromId>
 800b92c:	4603      	mov	r3, r0
 800b92e:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex < MAX_MODULES_PER_PACK){
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	2b1f      	cmp	r3, #31
 800b934:	d840      	bhi.n	800b9b8 <MCU_TicksSinceLastMessage+0xac>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800b936:	7afb      	ldrb	r3, [r7, #11]
 800b938:	4a2a      	ldr	r2, [pc, #168]	@ (800b9e4 <MCU_TicksSinceLastMessage+0xd8>)
 800b93a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b93e:	fb01 f303 	mul.w	r3, r1, r3
 800b942:	4413      	add	r3, r2
 800b944:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d10d      	bne.n	800b96c <MCU_TicksSinceLastMessage+0x60>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800b950:	7afb      	ldrb	r3, [r7, #11]
 800b952:	4a24      	ldr	r2, [pc, #144]	@ (800b9e4 <MCU_TicksSinceLastMessage+0xd8>)
 800b954:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b958:	fb01 f303 	mul.w	r3, r1, r3
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e023      	b.n	800b9b4 <MCU_TicksSinceLastMessage+0xa8>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800b96c:	4b1b      	ldr	r3, [pc, #108]	@ (800b9dc <MCU_TicksSinceLastMessage+0xd0>)
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	491c      	ldr	r1, [pc, #112]	@ (800b9e4 <MCU_TicksSinceLastMessage+0xd8>)
 800b974:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b978:	fb00 f303 	mul.w	r3, r0, r3
 800b97c:	440b      	add	r3, r1
 800b97e:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	1ad2      	subs	r2, r2, r3
 800b986:	4b15      	ldr	r3, [pc, #84]	@ (800b9dc <MCU_TicksSinceLastMessage+0xd0>)
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	3301      	adds	r3, #1
 800b98c:	7af9      	ldrb	r1, [r7, #11]
 800b98e:	4815      	ldr	r0, [pc, #84]	@ (800b9e4 <MCU_TicksSinceLastMessage+0xd8>)
 800b990:	f44f 6499 	mov.w	r4, #1224	@ 0x4c8
 800b994:	fb04 f101 	mul.w	r1, r4, r1
 800b998:	4401      	add	r1, r0
 800b99a:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 800b99e:	6809      	ldr	r1, [r1, #0]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	1a41      	subs	r1, r0, r1
 800b9a4:	3901      	subs	r1, #1
 800b9a6:	fb01 f303 	mul.w	r3, r1, r3
 800b9aa:	441a      	add	r2, r3
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	e00d      	b.n	800b9d4 <MCU_TicksSinceLastMessage+0xc8>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800b9b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e8 <MCU_TicksSinceLastMessage+0xdc>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	f003 0309 	and.w	r3, r3, #9
 800b9c0:	2b09      	cmp	r3, #9
 800b9c2:	d106      	bne.n	800b9d2 <MCU_TicksSinceLastMessage+0xc6>
 800b9c4:	4909      	ldr	r1, [pc, #36]	@ (800b9ec <MCU_TicksSinceLastMessage+0xe0>)
 800b9c6:	480a      	ldr	r0, [pc, #40]	@ (800b9f0 <MCU_TicksSinceLastMessage+0xe4>)
 800b9c8:	f009 fb8c 	bl	80150e4 <siprintf>
 800b9cc:	4808      	ldr	r0, [pc, #32]	@ (800b9f0 <MCU_TicksSinceLastMessage+0xe4>)
 800b9ce:	f7f9 fe35 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800b9d2:	2300      	movs	r3, #0
  }
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	371c      	adds	r7, #28
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd90      	pop	{r4, r7, pc}
 800b9dc:	200005d0 	.word	0x200005d0
 800b9e0:	20000d20 	.word	0x20000d20
 800b9e4:	20000dec 	.word	0x20000dec
 800b9e8:	2000000c 	.word	0x2000000c
 800b9ec:	0801a1d8 	.word	0x0801a1d8
 800b9f0:	20000b5c 	.word	0x20000b5c

0800b9f4 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800b9f4:	b590      	push	{r4, r7, lr}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b9fe:	4b31      	ldr	r3, [pc, #196]	@ (800bac4 <MCU_TicksSinceLastStateTx+0xd0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba04:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800ba06:	4b30      	ldr	r3, [pc, #192]	@ (800bac8 <MCU_TicksSinceLastStateTx+0xd4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fefa 	bl	800b808 <MCU_ModuleIndexFromId>
 800ba14:	4603      	mov	r3, r0
 800ba16:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex < MAX_MODULES_PER_PACK){
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	2b1f      	cmp	r3, #31
 800ba1c:	d840      	bhi.n	800baa0 <MCU_TicksSinceLastStateTx+0xac>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800ba1e:	7afb      	ldrb	r3, [r7, #11]
 800ba20:	4a2a      	ldr	r2, [pc, #168]	@ (800bacc <MCU_TicksSinceLastStateTx+0xd8>)
 800ba22:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ba26:	fb01 f303 	mul.w	r3, r1, r3
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d10d      	bne.n	800ba54 <MCU_TicksSinceLastStateTx+0x60>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800ba38:	7afb      	ldrb	r3, [r7, #11]
 800ba3a:	4a24      	ldr	r2, [pc, #144]	@ (800bacc <MCU_TicksSinceLastStateTx+0xd8>)
 800ba3c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	e023      	b.n	800ba9c <MCU_TicksSinceLastStateTx+0xa8>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800ba54:	4b1b      	ldr	r3, [pc, #108]	@ (800bac4 <MCU_TicksSinceLastStateTx+0xd0>)
 800ba56:	68da      	ldr	r2, [r3, #12]
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	491c      	ldr	r1, [pc, #112]	@ (800bacc <MCU_TicksSinceLastStateTx+0xd8>)
 800ba5c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800ba60:	fb00 f303 	mul.w	r3, r0, r3
 800ba64:	440b      	add	r3, r1
 800ba66:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	1ad2      	subs	r2, r2, r3
 800ba6e:	4b15      	ldr	r3, [pc, #84]	@ (800bac4 <MCU_TicksSinceLastStateTx+0xd0>)
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	3301      	adds	r3, #1
 800ba74:	7af9      	ldrb	r1, [r7, #11]
 800ba76:	4815      	ldr	r0, [pc, #84]	@ (800bacc <MCU_TicksSinceLastStateTx+0xd8>)
 800ba78:	f44f 6499 	mov.w	r4, #1224	@ 0x4c8
 800ba7c:	fb04 f101 	mul.w	r1, r4, r1
 800ba80:	4401      	add	r1, r0
 800ba82:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 800ba86:	6809      	ldr	r1, [r1, #0]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	1a41      	subs	r1, r0, r1
 800ba8c:	3901      	subs	r1, #1
 800ba8e:	fb01 f303 	mul.w	r3, r1, r3
 800ba92:	441a      	add	r2, r3
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	4413      	add	r3, r2
 800ba98:	3301      	adds	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	e00d      	b.n	800babc <MCU_TicksSinceLastStateTx+0xc8>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800baa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bad0 <MCU_TicksSinceLastStateTx+0xdc>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 0309 	and.w	r3, r3, #9
 800baa8:	2b09      	cmp	r3, #9
 800baaa:	d106      	bne.n	800baba <MCU_TicksSinceLastStateTx+0xc6>
 800baac:	4909      	ldr	r1, [pc, #36]	@ (800bad4 <MCU_TicksSinceLastStateTx+0xe0>)
 800baae:	480a      	ldr	r0, [pc, #40]	@ (800bad8 <MCU_TicksSinceLastStateTx+0xe4>)
 800bab0:	f009 fb18 	bl	80150e4 <siprintf>
 800bab4:	4808      	ldr	r0, [pc, #32]	@ (800bad8 <MCU_TicksSinceLastStateTx+0xe4>)
 800bab6:	f7f9 fdc1 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800baba:	2300      	movs	r3, #0
  }
}
 800babc:	4618      	mov	r0, r3
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd90      	pop	{r4, r7, pc}
 800bac4:	200005d0 	.word	0x200005d0
 800bac8:	20000d20 	.word	0x20000d20
 800bacc:	20000dec 	.word	0x20000dec
 800bad0:	2000000c 	.word	0x2000000c
 800bad4:	0801a218 	.word	0x0801a218
 800bad8:	20000b5c 	.word	0x20000b5c

0800badc <MCU_ElapsedTicks>:

/***************************************************************************************************************
*     M C U _ E l a p s e d T i c k s                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_ElapsedTicks(lastContact* pLastContact)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800bae4:	4b16      	ldr	r3, [pc, #88]	@ (800bb40 <MCU_ElapsedTicks+0x64>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baea:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800baec:	4b15      	ldr	r3, [pc, #84]	@ (800bb44 <MCU_ElapsedTicks+0x68>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]

  if ((overFlows - pLastContact->overflows) == 0){
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d105      	bne.n	800bb08 <MCU_ElapsedTicks+0x2c>
    elapsedTicks = timerCNT - pLastContact->ticks;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	e013      	b.n	800bb30 <MCU_ElapsedTicks+0x54>
  } else {
    //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pLastContact->ticks) + ( (htim1.Init.Period +1) * (overFlows - (pLastContact->overflows +1))) + (timerCNT);
 800bb08:	4b0d      	ldr	r3, [pc, #52]	@ (800bb40 <MCU_ElapsedTicks+0x64>)
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	1ad2      	subs	r2, r2, r3
 800bb12:	4b0b      	ldr	r3, [pc, #44]	@ (800bb40 <MCU_ElapsedTicks+0x64>)
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	6849      	ldr	r1, [r1, #4]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	1a41      	subs	r1, r0, r1
 800bb20:	3901      	subs	r1, #1
 800bb22:	fb01 f303 	mul.w	r3, r1, r3
 800bb26:	441a      	add	r2, r3
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
  }
  return elapsedTicks;
 800bb30:	697b      	ldr	r3, [r7, #20]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	200005d0 	.word	0x200005d0
 800bb44:	20000d20 	.word	0x20000d20

0800bb48 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	4603      	mov	r3, r0
 800bb50:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73bb      	strb	r3, [r7, #14]
  Nop();
 800bb56:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800bb58:	2301      	movs	r3, #1
 800bb5a:	73fb      	strb	r3, [r7, #15]
 800bb5c:	e05d      	b.n	800bc1a <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800bb5e:	4b34      	ldr	r3, [pc, #208]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
 800bb64:	e016      	b.n	800bb94 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800bb66:	f008 fd67 	bl	8014638 <rand>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	4a30      	ldr	r2, [pc, #192]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb70:	7812      	ldrb	r2, [r2, #0]
 800bb72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb76:	b2d9      	uxtb	r1, r3
 800bb78:	4b2e      	ldr	r3, [pc, #184]	@ (800bc34 <CAN_TestRegisterAccess+0xec>)
 800bb7a:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800bb7c:	4b2c      	ldr	r3, [pc, #176]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b2d      	ldr	r3, [pc, #180]	@ (800bc38 <CAN_TestRegisterAccess+0xf0>)
 800bb84:	21ff      	movs	r1, #255	@ 0xff
 800bb86:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800bb88:	4b29      	ldr	r3, [pc, #164]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	4b27      	ldr	r3, [pc, #156]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	4b26      	ldr	r3, [pc, #152]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	7bfa      	ldrb	r2, [r7, #15]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d8e3      	bhi.n	800bb66 <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800bb9e:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	79f8      	ldrb	r0, [r7, #7]
 800bba6:	4a23      	ldr	r2, [pc, #140]	@ (800bc34 <CAN_TestRegisterAccess+0xec>)
 800bba8:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800bbac:	f7f5 ff08 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	79f8      	ldrb	r0, [r7, #7]
 800bbb6:	4a20      	ldr	r2, [pc, #128]	@ (800bc38 <CAN_TestRegisterAccess+0xf0>)
 800bbb8:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800bbbc:	f7f5 fe4e 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e01e      	b.n	800bc0a <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800bbcc:	4b18      	ldr	r3, [pc, #96]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	4b18      	ldr	r3, [pc, #96]	@ (800bc34 <CAN_TestRegisterAccess+0xec>)
 800bbd4:	5c9a      	ldrb	r2, [r3, r2]
 800bbd6:	4b16      	ldr	r3, [pc, #88]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4b16      	ldr	r3, [pc, #88]	@ (800bc38 <CAN_TestRegisterAccess+0xf0>)
 800bbde:	5c5b      	ldrb	r3, [r3, r1]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	bf0c      	ite	eq
 800bbe4:	2301      	moveq	r3, #1
 800bbe6:	2300      	movne	r3, #0
 800bbe8:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	f083 0301 	eor.w	r3, r3, #1
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <CAN_TestRegisterAccess+0xb6>
        Nop();
 800bbf6:	bf00      	nop
        Nop();
 800bbf8:	bf00      	nop

        // Data mismatch
        return false;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e013      	b.n	800bc26 <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	4b0a      	ldr	r3, [pc, #40]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bc08:	701a      	strb	r2, [r3, #0]
 800bc0a:	4b09      	ldr	r3, [pc, #36]	@ (800bc30 <CAN_TestRegisterAccess+0xe8>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	7bfa      	ldrb	r2, [r7, #15]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d8db      	bhi.n	800bbcc <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	3301      	adds	r3, #1
 800bc18:	73fb      	strb	r3, [r7, #15]
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	2b40      	cmp	r3, #64	@ 0x40
 800bc1e:	d99e      	bls.n	800bb5e <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800bc20:	bf00      	nop
  Nop();
 800bc22:	bf00      	nop
  return true;
 800bc24:	2301      	movs	r3, #1
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000de8 	.word	0x20000de8
 800bc34:	20000d4c 	.word	0x20000d4c
 800bc38:	20000da8 	.word	0x20000da8

0800bc3c <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73bb      	strb	r3, [r7, #14]
  Nop();
 800bc4a:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800bc4c:	2304      	movs	r3, #4
 800bc4e:	73fb      	strb	r3, [r7, #15]
 800bc50:	e05b      	b.n	800bd0a <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800bc52:	4b32      	ldr	r3, [pc, #200]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	e014      	b.n	800bc84 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800bc5a:	f008 fced 	bl	8014638 <rand>
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4b2e      	ldr	r3, [pc, #184]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	b2c9      	uxtb	r1, r1
 800bc68:	4b2d      	ldr	r3, [pc, #180]	@ (800bd20 <CAN_TestRamAccess+0xe4>)
 800bc6a:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800bc6c:	4b2b      	ldr	r3, [pc, #172]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b2c      	ldr	r3, [pc, #176]	@ (800bd24 <CAN_TestRamAccess+0xe8>)
 800bc74:	21ff      	movs	r1, #255	@ 0xff
 800bc76:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800bc78:	4b28      	ldr	r3, [pc, #160]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	4b26      	ldr	r3, [pc, #152]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	4b25      	ldr	r3, [pc, #148]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	7bfa      	ldrb	r2, [r7, #15]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d8e5      	bhi.n	800bc5a <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800bc8e:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	79f8      	ldrb	r0, [r7, #7]
 800bc96:	4a22      	ldr	r2, [pc, #136]	@ (800bd20 <CAN_TestRamAccess+0xe4>)
 800bc98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc9c:	f7f5 fe90 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	79f8      	ldrb	r0, [r7, #7]
 800bca6:	4a1f      	ldr	r2, [pc, #124]	@ (800bd24 <CAN_TestRamAccess+0xe8>)
 800bca8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bcac:	f7f5 fdd6 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800bcb4:	4b19      	ldr	r3, [pc, #100]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	e01e      	b.n	800bcfa <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800bcbc:	4b17      	ldr	r3, [pc, #92]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4b17      	ldr	r3, [pc, #92]	@ (800bd20 <CAN_TestRamAccess+0xe4>)
 800bcc4:	5c9a      	ldrb	r2, [r3, r2]
 800bcc6:	4b15      	ldr	r3, [pc, #84]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	4619      	mov	r1, r3
 800bccc:	4b15      	ldr	r3, [pc, #84]	@ (800bd24 <CAN_TestRamAccess+0xe8>)
 800bcce:	5c5b      	ldrb	r3, [r3, r1]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	bf0c      	ite	eq
 800bcd4:	2301      	moveq	r3, #1
 800bcd6:	2300      	movne	r3, #0
 800bcd8:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	f083 0301 	eor.w	r3, r3, #1
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <CAN_TestRamAccess+0xb2>
        Nop();
 800bce6:	bf00      	nop
        Nop();
 800bce8:	bf00      	nop

        // Data mismatch
        return false;
 800bcea:	2300      	movs	r3, #0
 800bcec:	e011      	b.n	800bd12 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800bcee:	4b0b      	ldr	r3, [pc, #44]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcf8:	701a      	strb	r2, [r3, #0]
 800bcfa:	4b08      	ldr	r3, [pc, #32]	@ (800bd1c <CAN_TestRamAccess+0xe0>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	7bfa      	ldrb	r2, [r7, #15]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d8db      	bhi.n	800bcbc <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	3304      	adds	r3, #4
 800bd08:	73fb      	strb	r3, [r7, #15]
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	2b40      	cmp	r3, #64	@ 0x40
 800bd0e:	d9a0      	bls.n	800bc52 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800bd10:	2301      	movs	r3, #1
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20000de8 	.word	0x20000de8
 800bd20:	20000d4c 	.word	0x20000d4c
 800bd24:	20000da8 	.word	0x20000da8

0800bd28 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800bd2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd40:	bf00      	nop
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <LL_AHB2_GRP1_EnableClock>:
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800bd52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800bd62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
}
 800bd70:	bf00      	nop
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bd84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bda0:	68fb      	ldr	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b085      	sub	sp, #20
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bdb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bdbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bdc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4013      	ands	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800bde8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800bdf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be04:	68fb      	ldr	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800be12:	b480      	push	{r7}
 800be14:	b085      	sub	sp, #20
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800be1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be1e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4313      	orrs	r3, r2
 800be28:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800be2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4013      	ands	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be36:	68fb      	ldr	r3, [r7, #12]
}
 800be38:	bf00      	nop
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800be48:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800be4c:	f7ff ff96 	bl	800bd7c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800be50:	2200      	movs	r2, #0
 800be52:	2100      	movs	r1, #0
 800be54:	202e      	movs	r0, #46	@ 0x2e
 800be56:	f002 fd4e 	bl	800e8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800be5a:	202e      	movs	r0, #46	@ 0x2e
 800be5c:	f002 fd65 	bl	800e92a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800be60:	bf00      	nop
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b09c      	sub	sp, #112	@ 0x70
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	605a      	str	r2, [r3, #4]
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	60da      	str	r2, [r3, #12]
 800be7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be7c:	f107 030c 	add.w	r3, r7, #12
 800be80:	2250      	movs	r2, #80	@ 0x50
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f009 f994 	bl	80151b2 <memset>
  if(huart->Instance==LPUART1)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a2f      	ldr	r2, [pc, #188]	@ (800bf4c <HAL_UART_MspInit+0xe8>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d125      	bne.n	800bee0 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800be94:	2302      	movs	r3, #2
 800be96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800be98:	2300      	movs	r3, #0
 800be9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be9c:	f107 030c 	add.w	r3, r7, #12
 800bea0:	4618      	mov	r0, r3
 800bea2:	f004 fea2 	bl	8010bea <HAL_RCCEx_PeriphCLKConfig>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800beac:	f7fa ff7a 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800beb0:	2001      	movs	r0, #1
 800beb2:	f7ff ff95 	bl	800bde0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	2001      	movs	r0, #1
 800beb8:	f7ff ff47 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bebc:	230c      	movs	r3, #12
 800bebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec0:	2302      	movs	r3, #2
 800bec2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bec8:	2300      	movs	r3, #0
 800beca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800becc:	2308      	movs	r3, #8
 800bece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bed0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bed4:	4619      	mov	r1, r3
 800bed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800beda:	f003 f819 	bl	800ef10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bede:	e031      	b.n	800bf44 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1a      	ldr	r2, [pc, #104]	@ (800bf50 <HAL_UART_MspInit+0xec>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d12c      	bne.n	800bf44 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800beea:	2301      	movs	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800beee:	2302      	movs	r3, #2
 800bef0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bef2:	f107 030c 	add.w	r3, r7, #12
 800bef6:	4618      	mov	r0, r3
 800bef8:	f004 fe77 	bl	8010bea <HAL_RCCEx_PeriphCLKConfig>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800bf02:	f7fa ff4f 	bl	8006da4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800bf06:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bf0a:	f7ff ff82 	bl	800be12 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf0e:	2002      	movs	r0, #2
 800bf10:	f7ff ff1b 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bf14:	23c0      	movs	r3, #192	@ 0xc0
 800bf16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf20:	2300      	movs	r3, #0
 800bf22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bf24:	2307      	movs	r3, #7
 800bf26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4809      	ldr	r0, [pc, #36]	@ (800bf54 <HAL_UART_MspInit+0xf0>)
 800bf30:	f002 ffee 	bl	800ef10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	2024      	movs	r0, #36	@ 0x24
 800bf3a:	f002 fcdc 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800bf3e:	2024      	movs	r0, #36	@ 0x24
 800bf40:	f002 fcf3 	bl	800e92a <HAL_NVIC_EnableIRQ>
}
 800bf44:	bf00      	nop
 800bf46:	3770      	adds	r7, #112	@ 0x70
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40008000 	.word	0x40008000
 800bf50:	40013800 	.word	0x40013800
 800bf54:	48000400 	.word	0x48000400

0800bf58 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a05      	ldr	r2, [pc, #20]	@ (800bf7c <HAL_PKA_MspInit+0x24>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d103      	bne.n	800bf72 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800bf6a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bf6e:	f7ff ff05 	bl	800bd7c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	58002000 	.word	0x58002000

0800bf80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b096      	sub	sp, #88	@ 0x58
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	2250      	movs	r2, #80	@ 0x50
 800bf8e:	2100      	movs	r1, #0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f009 f90e 	bl	80151b2 <memset>
  if(hrtc->Instance==RTC)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bfd4 <HAL_RTC_MspInit+0x54>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d115      	bne.n	800bfcc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bfa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bfa4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bfa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfaa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f004 fe1a 	bl	8010bea <HAL_RCCEx_PeriphCLKConfig>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800bfbc:	f7fa fef2 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bfc0:	f7ff feb2 	bl	800bd28 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bfc4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800bfc8:	f7ff fef1 	bl	800bdae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800bfcc:	bf00      	nop
 800bfce:	3758      	adds	r7, #88	@ 0x58
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	40002800 	.word	0x40002800

0800bfd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	605a      	str	r2, [r3, #4]
 800bfea:	609a      	str	r2, [r3, #8]
 800bfec:	60da      	str	r2, [r3, #12]
 800bfee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a30      	ldr	r2, [pc, #192]	@ (800c0b8 <HAL_SPI_MspInit+0xe0>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d118      	bne.n	800c02c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bffa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bffe:	f7ff ff08 	bl	800be12 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c002:	2001      	movs	r0, #1
 800c004:	f7ff fea1 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800c008:	23c2      	movs	r3, #194	@ 0xc2
 800c00a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c00c:	2302      	movs	r3, #2
 800c00e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c014:	2300      	movs	r3, #0
 800c016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c018:	2305      	movs	r3, #5
 800c01a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	4619      	mov	r1, r3
 800c022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c026:	f002 ff73 	bl	800ef10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c02a:	e040      	b.n	800c0ae <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a22      	ldr	r2, [pc, #136]	@ (800c0bc <HAL_SPI_MspInit+0xe4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d13b      	bne.n	800c0ae <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c036:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c03a:	f7ff feb8 	bl	800bdae <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c03e:	2004      	movs	r0, #4
 800c040:	f7ff fe83 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c044:	2001      	movs	r0, #1
 800c046:	f7ff fe80 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c04a:	2302      	movs	r3, #2
 800c04c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c04e:	2302      	movs	r3, #2
 800c050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c052:	2300      	movs	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c056:	2300      	movs	r3, #0
 800c058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800c05a:	2303      	movs	r3, #3
 800c05c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c05e:	f107 030c 	add.w	r3, r7, #12
 800c062:	4619      	mov	r1, r3
 800c064:	4816      	ldr	r0, [pc, #88]	@ (800c0c0 <HAL_SPI_MspInit+0xe8>)
 800c066:	f002 ff53 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c06a:	2304      	movs	r3, #4
 800c06c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c06e:	2302      	movs	r3, #2
 800c070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c076:	2300      	movs	r3, #0
 800c078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c07a:	2305      	movs	r3, #5
 800c07c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	4619      	mov	r1, r3
 800c084:	480e      	ldr	r0, [pc, #56]	@ (800c0c0 <HAL_SPI_MspInit+0xe8>)
 800c086:	f002 ff43 	bl	800ef10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c08a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c08e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c090:	2302      	movs	r3, #2
 800c092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c09c:	2305      	movs	r3, #5
 800c09e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0aa:	f002 ff31 	bl	800ef10 <HAL_GPIO_Init>
}
 800c0ae:	bf00      	nop
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	40013000 	.word	0x40013000
 800c0bc:	40003800 	.word	0x40003800
 800c0c0:	48000800 	.word	0x48000800

0800c0c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a09      	ldr	r2, [pc, #36]	@ (800c0f8 <HAL_TIM_Base_MspInit+0x34>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d10b      	bne.n	800c0ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c0d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c0da:	f7ff fe9a 	bl	800be12 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	2019      	movs	r0, #25
 800c0e4:	f002 fc07 	bl	800e8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800c0e8:	2019      	movs	r0, #25
 800c0ea:	f002 fc1e 	bl	800e92a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800c0ee:	bf00      	nop
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40012c00 	.word	0x40012c00

0800c0fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b09c      	sub	sp, #112	@ 0x70
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c104:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	605a      	str	r2, [r3, #4]
 800c10e:	609a      	str	r2, [r3, #8]
 800c110:	60da      	str	r2, [r3, #12]
 800c112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c114:	f107 030c 	add.w	r3, r7, #12
 800c118:	2250      	movs	r2, #80	@ 0x50
 800c11a:	2100      	movs	r1, #0
 800c11c:	4618      	mov	r0, r3
 800c11e:	f009 f848 	bl	80151b2 <memset>
  if(hpcd->Instance==USB)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a1f      	ldr	r2, [pc, #124]	@ (800c1a4 <HAL_PCD_MspInit+0xa8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d136      	bne.n	800c19a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c12c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c130:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800c132:	2306      	movs	r3, #6
 800c134:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800c136:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c13a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800c13c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c140:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800c142:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c146:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800c148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c14c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c14e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c152:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c154:	f107 030c 	add.w	r3, r7, #12
 800c158:	4618      	mov	r0, r3
 800c15a:	f004 fd46 	bl	8010bea <HAL_RCCEx_PeriphCLKConfig>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800c164:	f7fa fe1e 	bl	8006da4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c168:	2001      	movs	r0, #1
 800c16a:	f7ff fdee 	bl	800bd4a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c16e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c172:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c174:	2302      	movs	r3, #2
 800c176:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c17c:	2300      	movs	r3, #0
 800c17e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800c180:	230a      	movs	r3, #10
 800c182:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c184:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c188:	4619      	mov	r1, r3
 800c18a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c18e:	f002 febf 	bl	800ef10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c192:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800c196:	f7ff fe0a 	bl	800bdae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800c19a:	bf00      	nop
 800c19c:	3770      	adds	r7, #112	@ 0x70
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	40006800 	.word	0x40006800

0800c1a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c1ac:	bf00      	nop
 800c1ae:	e7fd      	b.n	800c1ac <NMI_Handler+0x4>

0800c1b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <HardFault_Handler+0x4>

0800c1b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1bc:	bf00      	nop
 800c1be:	e7fd      	b.n	800c1bc <MemManage_Handler+0x4>

0800c1c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1c4:	bf00      	nop
 800c1c6:	e7fd      	b.n	800c1c4 <BusFault_Handler+0x4>

0800c1c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1cc:	bf00      	nop
 800c1ce:	e7fd      	b.n	800c1cc <UsageFault_Handler+0x4>

0800c1d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1d4:	bf00      	nop
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1e2:	bf00      	nop
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c1f0:	bf00      	nop
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c1fe:	f002 fa4f 	bl	800e6a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c202:	bf00      	nop
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c20c:	4b08      	ldr	r3, [pc, #32]	@ (800c230 <EXTI0_IRQHandler+0x28>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800c214:	4b07      	ldr	r3, [pc, #28]	@ (800c234 <EXTI0_IRQHandler+0x2c>)
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	4618      	mov	r0, r3
 800c21a:	f003 f833 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800c21e:	e004      	b.n	800c22a <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800c220:	4b05      	ldr	r3, [pc, #20]	@ (800c238 <EXTI0_IRQHandler+0x30>)
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	4618      	mov	r0, r3
 800c226:	f003 f82d 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
}
 800c22a:	bf00      	nop
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000a50 	.word	0x20000a50
 800c234:	20000cce 	.word	0x20000cce
 800c238:	20000c86 	.word	0x20000c86

0800c23c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800c240:	4b05      	ldr	r3, [pc, #20]	@ (800c258 <EXTI1_IRQHandler+0x1c>)
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d104      	bne.n	800c252 <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800c248:	4b04      	ldr	r3, [pc, #16]	@ (800c25c <EXTI1_IRQHandler+0x20>)
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f003 f819 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800c252:	bf00      	nop
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000a50 	.word	0x20000a50
 800c25c:	20000cd6 	.word	0x20000cd6

0800c260 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800c264:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <EXTI2_IRQHandler+0x1c>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d004      	beq.n	800c276 <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800c26c:	4b04      	ldr	r3, [pc, #16]	@ (800c280 <EXTI2_IRQHandler+0x20>)
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	4618      	mov	r0, r3
 800c272:	f003 f807 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800c276:	bf00      	nop
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20000a50 	.word	0x20000a50
 800c280:	20000cd6 	.word	0x20000cd6

0800c284 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c288:	4b08      	ldr	r3, [pc, #32]	@ (800c2ac <EXTI4_IRQHandler+0x28>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800c290:	4b07      	ldr	r3, [pc, #28]	@ (800c2b0 <EXTI4_IRQHandler+0x2c>)
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	4618      	mov	r0, r3
 800c296:	f002 fff5 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800c29a:	e004      	b.n	800c2a6 <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800c29c:	4b05      	ldr	r3, [pc, #20]	@ (800c2b4 <EXTI4_IRQHandler+0x30>)
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f002 ffef 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
}
 800c2a6:	bf00      	nop
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000a50 	.word	0x20000a50
 800c2b0:	20000cc4 	.word	0x20000cc4
 800c2b4:	20000c9e 	.word	0x20000c9e

0800c2b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c2bc:	4b12      	ldr	r3, [pc, #72]	@ (800c308 <EXTI9_5_IRQHandler+0x50>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10a      	bne.n	800c2da <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800c2c4:	4b11      	ldr	r3, [pc, #68]	@ (800c30c <EXTI9_5_IRQHandler+0x54>)
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f002 ffdb 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800c2ce:	4b10      	ldr	r3, [pc, #64]	@ (800c310 <EXTI9_5_IRQHandler+0x58>)
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f002 ffd6 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c2d8:	e013      	b.n	800c302 <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800c2da:	4b0c      	ldr	r3, [pc, #48]	@ (800c30c <EXTI9_5_IRQHandler+0x54>)
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f002 ffd0 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800c2e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c314 <EXTI9_5_IRQHandler+0x5c>)
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f002 ffcb 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800c2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c318 <EXTI9_5_IRQHandler+0x60>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f002 ffc6 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800c2f8:	4b08      	ldr	r3, [pc, #32]	@ (800c31c <EXTI9_5_IRQHandler+0x64>)
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f002 ffc1 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
}
 800c302:	bf00      	nop
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000a50 	.word	0x20000a50
 800c30c:	20000c5e 	.word	0x20000c5e
 800c310:	20000c66 	.word	0x20000c66
 800c314:	20000c94 	.word	0x20000c94
 800c318:	20000ca6 	.word	0x20000ca6
 800c31c:	20000cde 	.word	0x20000cde

0800c320 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c324:	4802      	ldr	r0, [pc, #8]	@ (800c330 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800c326:	f005 ff91 	bl	801224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800c32a:	bf00      	nop
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	200005d0 	.word	0x200005d0

0800c334 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c338:	4802      	ldr	r0, [pc, #8]	@ (800c344 <USART1_IRQHandler+0x10>)
 800c33a:	f007 f859 	bl	80133f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000444 	.word	0x20000444

0800c348 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c34c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3c0 <EXTI15_10_IRQHandler+0x78>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d114      	bne.n	800c37e <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800c354:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c4 <EXTI15_10_IRQHandler+0x7c>)
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f002 ff93 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800c35e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c8 <EXTI15_10_IRQHandler+0x80>)
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	4618      	mov	r0, r3
 800c364:	f002 ff8e 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800c368:	4b18      	ldr	r3, [pc, #96]	@ (800c3cc <EXTI15_10_IRQHandler+0x84>)
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f002 ff89 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800c372:	4b17      	ldr	r3, [pc, #92]	@ (800c3d0 <EXTI15_10_IRQHandler+0x88>)
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f002 ff84 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c37c:	e01d      	b.n	800c3ba <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800c37e:	4b11      	ldr	r3, [pc, #68]	@ (800c3c4 <EXTI15_10_IRQHandler+0x7c>)
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	4618      	mov	r0, r3
 800c384:	f002 ff7e 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800c388:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <EXTI15_10_IRQHandler+0x8c>)
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f002 ff79 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800c392:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c8 <EXTI15_10_IRQHandler+0x80>)
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f002 ff74 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800c39c:	4b0b      	ldr	r3, [pc, #44]	@ (800c3cc <EXTI15_10_IRQHandler+0x84>)
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f002 ff6f 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d8 <EXTI15_10_IRQHandler+0x90>)
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f002 ff6a 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3dc <EXTI15_10_IRQHandler+0x94>)
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f002 ff65 	bl	800f284 <HAL_GPIO_EXTI_IRQHandler>
}
 800c3ba:	bf00      	nop
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20000a50 	.word	0x20000a50
 800c3c4:	20000c56 	.word	0x20000c56
 800c3c8:	20000c74 	.word	0x20000c74
 800c3cc:	20000c7e 	.word	0x20000c7e
 800c3d0:	20000c86 	.word	0x20000c86
 800c3d4:	20000c66 	.word	0x20000c66
 800c3d8:	20000cc4 	.word	0x20000cc4
 800c3dc:	20000cce 	.word	0x20000cce

0800c3e0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800c3e4:	f002 ff66 	bl	800f2b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800c3e8:	bf00      	nop
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
  return 1;
 800c3f0:	2301      	movs	r3, #1
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <_kill>:

int _kill(int pid, int sig)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c406:	f009 fda9 	bl	8015f5c <__errno>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2216      	movs	r2, #22
 800c40e:	601a      	str	r2, [r3, #0]
  return -1;
 800c410:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_exit>:

void _exit (int status)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c424:	f04f 31ff 	mov.w	r1, #4294967295
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff ffe7 	bl	800c3fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <_exit+0x12>

0800c432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e00a      	b.n	800c45a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c444:	f3af 8000 	nop.w
 800c448:	4601      	mov	r1, r0
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	1c5a      	adds	r2, r3, #1
 800c44e:	60ba      	str	r2, [r7, #8]
 800c450:	b2ca      	uxtb	r2, r1
 800c452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	3301      	adds	r3, #1
 800c458:	617b      	str	r3, [r7, #20]
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	429a      	cmp	r2, r3
 800c460:	dbf0      	blt.n	800c444 <_read+0x12>
  }

  return len;
 800c462:	687b      	ldr	r3, [r7, #4]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	e009      	b.n	800c492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	60ba      	str	r2, [r7, #8]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	4618      	mov	r0, r3
 800c488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	3301      	adds	r3, #1
 800c490:	617b      	str	r3, [r7, #20]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	429a      	cmp	r2, r3
 800c498:	dbf1      	blt.n	800c47e <_write+0x12>
  }
  return len;
 800c49a:	687b      	ldr	r3, [r7, #4]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <_close>:

int _close(int file)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c4ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c4cc:	605a      	str	r2, [r3, #4]
  return 0;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <_isatty>:

int _isatty(int file)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c4e4:	2301      	movs	r3, #1
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b085      	sub	sp, #20
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c514:	4a14      	ldr	r2, [pc, #80]	@ (800c568 <_sbrk+0x5c>)
 800c516:	4b15      	ldr	r3, [pc, #84]	@ (800c56c <_sbrk+0x60>)
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c520:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <_sbrk+0x64>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c528:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <_sbrk+0x64>)
 800c52a:	4a12      	ldr	r2, [pc, #72]	@ (800c574 <_sbrk+0x68>)
 800c52c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c52e:	4b10      	ldr	r3, [pc, #64]	@ (800c570 <_sbrk+0x64>)
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4413      	add	r3, r2
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d207      	bcs.n	800c54c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c53c:	f009 fd0e 	bl	8015f5c <__errno>
 800c540:	4603      	mov	r3, r0
 800c542:	220c      	movs	r2, #12
 800c544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c546:	f04f 33ff 	mov.w	r3, #4294967295
 800c54a:	e009      	b.n	800c560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c54c:	4b08      	ldr	r3, [pc, #32]	@ (800c570 <_sbrk+0x64>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c552:	4b07      	ldr	r3, [pc, #28]	@ (800c570 <_sbrk+0x64>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4413      	add	r3, r2
 800c55a:	4a05      	ldr	r2, [pc, #20]	@ (800c570 <_sbrk+0x64>)
 800c55c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c55e:	68fb      	ldr	r3, [r7, #12]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20030000 	.word	0x20030000
 800c56c:	00000400 	.word	0x00000400
 800c570:	2000a750 	.word	0x2000a750
 800c574:	2000a988 	.word	0x2000a988

0800c578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800c57c:	4b24      	ldr	r3, [pc, #144]	@ (800c610 <SystemInit+0x98>)
 800c57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c582:	4a23      	ldr	r2, [pc, #140]	@ (800c610 <SystemInit+0x98>)
 800c584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800c58c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800c59c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5a0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800c5a4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800c5a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5b0:	4b18      	ldr	r3, [pc, #96]	@ (800c614 <SystemInit+0x9c>)
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800c5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5c2:	f023 0305 	bic.w	r3, r3, #5
 800c5c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800c5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5d6:	f023 0301 	bic.w	r3, r3, #1
 800c5da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800c5de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5e2:	4a0d      	ldr	r2, [pc, #52]	@ (800c618 <SystemInit+0xa0>)
 800c5e4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800c5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5ea:	4a0b      	ldr	r2, [pc, #44]	@ (800c618 <SystemInit+0xa0>)
 800c5ec:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c5ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c5fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c602:	2200      	movs	r2, #0
 800c604:	619a      	str	r2, [r3, #24]
}
 800c606:	bf00      	nop
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	e000ed00 	.word	0xe000ed00
 800c614:	faf6fefb 	.word	0xfaf6fefb
 800c618:	22041000 	.word	0x22041000

0800c61c <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61e:	b08b      	sub	sp, #44	@ 0x2c
 800c620:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800c622:	4a7a      	ldr	r2, [pc, #488]	@ (800c80c <VCU_ReceiveMessages+0x1f0>)
 800c624:	2101      	movs	r1, #1
 800c626:	2000      	movs	r0, #0
 800c628:	f7f6 f8fa 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800c62c:	e0e2      	b.n	800c7f4 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800c62e:	2340      	movs	r3, #64	@ 0x40
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	4b77      	ldr	r3, [pc, #476]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c634:	4a77      	ldr	r2, [pc, #476]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c636:	2101      	movs	r1, #1
 800c638:	2000      	movs	r0, #0
 800c63a:	f7f5 ff55 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800c63e:	4b76      	ldr	r3, [pc, #472]	@ (800c818 <VCU_ReceiveMessages+0x1fc>)
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	f003 0312 	and.w	r3, r3, #18
 800c646:	2b12      	cmp	r3, #18
 800c648:	d12c      	bne.n	800c6a4 <VCU_ReceiveMessages+0x88>
 800c64a:	4b72      	ldr	r3, [pc, #456]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c652:	b29b      	uxth	r3, r3
 800c654:	469c      	mov	ip, r3
 800c656:	4b6e      	ldr	r3, [pc, #440]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	469e      	mov	lr, r3
 800c65c:	4b6c      	ldr	r3, [pc, #432]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c65e:	785b      	ldrb	r3, [r3, #1]
 800c660:	461a      	mov	r2, r3
 800c662:	4b6b      	ldr	r3, [pc, #428]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c664:	789b      	ldrb	r3, [r3, #2]
 800c666:	4619      	mov	r1, r3
 800c668:	4b69      	ldr	r3, [pc, #420]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c66a:	78db      	ldrb	r3, [r3, #3]
 800c66c:	4618      	mov	r0, r3
 800c66e:	4b68      	ldr	r3, [pc, #416]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c670:	791b      	ldrb	r3, [r3, #4]
 800c672:	461c      	mov	r4, r3
 800c674:	4b66      	ldr	r3, [pc, #408]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c676:	795b      	ldrb	r3, [r3, #5]
 800c678:	461d      	mov	r5, r3
 800c67a:	4b65      	ldr	r3, [pc, #404]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c67c:	799b      	ldrb	r3, [r3, #6]
 800c67e:	461e      	mov	r6, r3
 800c680:	4b63      	ldr	r3, [pc, #396]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c682:	79db      	ldrb	r3, [r3, #7]
 800c684:	9306      	str	r3, [sp, #24]
 800c686:	9605      	str	r6, [sp, #20]
 800c688:	9504      	str	r5, [sp, #16]
 800c68a:	9403      	str	r4, [sp, #12]
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	9101      	str	r1, [sp, #4]
 800c690:	9200      	str	r2, [sp, #0]
 800c692:	4673      	mov	r3, lr
 800c694:	4662      	mov	r2, ip
 800c696:	4961      	ldr	r1, [pc, #388]	@ (800c81c <VCU_ReceiveMessages+0x200>)
 800c698:	4861      	ldr	r0, [pc, #388]	@ (800c820 <VCU_ReceiveMessages+0x204>)
 800c69a:	f008 fd23 	bl	80150e4 <siprintf>
 800c69e:	4860      	ldr	r0, [pc, #384]	@ (800c820 <VCU_ReceiveMessages+0x204>)
 800c6a0:	f7f8 ffcc 	bl	800563c <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	4b5c      	ldr	r3, [pc, #368]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c6b2:	895b      	ldrh	r3, [r3, #10]
 800c6b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d102      	bne.n	800c6c2 <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800c6bc:	f000 f950 	bl	800c960 <VCU_ProcessVcuCommand>
 800c6c0:	e093      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800c6c2:	4b54      	ldr	r3, [pc, #336]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	4b55      	ldr	r3, [pc, #340]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c6d0:	895b      	ldrh	r3, [r3, #10]
 800c6d2:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d102      	bne.n	800c6e0 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800c6da:	f000 fac7 	bl	800cc6c <VCU_ProcessVcuTime>
 800c6de:	e084      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800c6e0:	4b4c      	ldr	r3, [pc, #304]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b4d      	ldr	r3, [pc, #308]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c6ee:	895b      	ldrh	r3, [r3, #10]
 800c6f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d102      	bne.n	800c6fe <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800c6f8:	f000 fb04 	bl	800cd04 <VCU_ProcessReadEeprom>
 800c6fc:	e075      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800c6fe:	4b45      	ldr	r3, [pc, #276]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c706:	b29b      	uxth	r3, r3
 800c708:	461a      	mov	r2, r3
 800c70a:	4b46      	ldr	r3, [pc, #280]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c70c:	895b      	ldrh	r3, [r3, #10]
 800c70e:	f203 4303 	addw	r3, r3, #1027	@ 0x403
 800c712:	429a      	cmp	r2, r3
 800c714:	d102      	bne.n	800c71c <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800c716:	f000 fbb1 	bl	800ce7c <VCU_ProcessWriteEeprom>
 800c71a:	e066      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800c71c:	4b3d      	ldr	r3, [pc, #244]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c71e:	881b      	ldrh	r3, [r3, #0]
 800c720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c724:	b29b      	uxth	r3, r3
 800c726:	461a      	mov	r2, r3
 800c728:	4b3e      	ldr	r3, [pc, #248]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c730:	429a      	cmp	r2, r3
 800c732:	d102      	bne.n	800c73a <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800c734:	f000 f9be 	bl	800cab4 <VCU_ProcessVcuModuleCommand>
 800c738:	e057      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800c73a:	4b36      	ldr	r3, [pc, #216]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c742:	b29b      	uxth	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	4b37      	ldr	r3, [pc, #220]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c748:	895b      	ldrh	r3, [r3, #10]
 800c74a:	f203 4305 	addw	r3, r3, #1029	@ 0x405
 800c74e:	429a      	cmp	r2, r3
 800c750:	d102      	bne.n	800c758 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800c752:	f000 fa3b 	bl	800cbcc <VCU_ProcessVcuKeepAlive>
 800c756:	e048      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800c758:	4b2e      	ldr	r3, [pc, #184]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c760:	b29b      	uxth	r3, r3
 800c762:	461a      	mov	r2, r3
 800c764:	4b2f      	ldr	r3, [pc, #188]	@ (800c824 <VCU_ReceiveMessages+0x208>)
 800c766:	895b      	ldrh	r3, [r3, #10]
 800c768:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d102      	bne.n	800c776 <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800c770:	f000 fc44 	bl	800cffc <VCU_ProcessVcuRequestModuleList>
 800c774:	e039      	b.n	800c7ea <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800c776:	4b28      	ldr	r3, [pc, #160]	@ (800c818 <VCU_ReceiveMessages+0x1fc>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 0311 	and.w	r3, r3, #17
 800c77e:	2b11      	cmp	r3, #17
 800c780:	d133      	bne.n	800c7ea <VCU_ReceiveMessages+0x1ce>
 800c782:	4b24      	ldr	r3, [pc, #144]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	469c      	mov	ip, r3
 800c78e:	4b21      	ldr	r3, [pc, #132]	@ (800c814 <VCU_ReceiveMessages+0x1f8>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800c796:	469e      	mov	lr, r3
 800c798:	4b1d      	ldr	r3, [pc, #116]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b1c      	ldr	r3, [pc, #112]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7a0:	785b      	ldrb	r3, [r3, #1]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7a6:	789b      	ldrb	r3, [r3, #2]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	4b19      	ldr	r3, [pc, #100]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7ac:	78db      	ldrb	r3, [r3, #3]
 800c7ae:	461c      	mov	r4, r3
 800c7b0:	4b17      	ldr	r3, [pc, #92]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7b2:	791b      	ldrb	r3, [r3, #4]
 800c7b4:	461d      	mov	r5, r3
 800c7b6:	4b16      	ldr	r3, [pc, #88]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7b8:	795b      	ldrb	r3, [r3, #5]
 800c7ba:	461e      	mov	r6, r3
 800c7bc:	4b14      	ldr	r3, [pc, #80]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7be:	799b      	ldrb	r3, [r3, #6]
 800c7c0:	607b      	str	r3, [r7, #4]
 800c7c2:	4b13      	ldr	r3, [pc, #76]	@ (800c810 <VCU_ReceiveMessages+0x1f4>)
 800c7c4:	79db      	ldrb	r3, [r3, #7]
 800c7c6:	9307      	str	r3, [sp, #28]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	9306      	str	r3, [sp, #24]
 800c7cc:	9605      	str	r6, [sp, #20]
 800c7ce:	9504      	str	r5, [sp, #16]
 800c7d0:	9403      	str	r4, [sp, #12]
 800c7d2:	9002      	str	r0, [sp, #8]
 800c7d4:	9101      	str	r1, [sp, #4]
 800c7d6:	9200      	str	r2, [sp, #0]
 800c7d8:	4673      	mov	r3, lr
 800c7da:	4662      	mov	r2, ip
 800c7dc:	4912      	ldr	r1, [pc, #72]	@ (800c828 <VCU_ReceiveMessages+0x20c>)
 800c7de:	4810      	ldr	r0, [pc, #64]	@ (800c820 <VCU_ReceiveMessages+0x204>)
 800c7e0:	f008 fc80 	bl	80150e4 <siprintf>
 800c7e4:	480e      	ldr	r0, [pc, #56]	@ (800c820 <VCU_ReceiveMessages+0x204>)
 800c7e6:	f7f8 ff29 	bl	800563c <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800c7ea:	4a08      	ldr	r2, [pc, #32]	@ (800c80c <VCU_ReceiveMessages+0x1f0>)
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	f7f6 f816 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800c7f4:	4b05      	ldr	r3, [pc, #20]	@ (800c80c <VCU_ReceiveMessages+0x1f0>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f47f af16 	bne.w	800c62e <VCU_ReceiveMessages+0x12>
  }
}
 800c802:	bf00      	nop
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80c:	2000a7a4 	.word	0x2000a7a4
 800c810:	2000a7b4 	.word	0x2000a7b4
 800c814:	2000a7a8 	.word	0x2000a7a8
 800c818:	2000000c 	.word	0x2000000c
 800c81c:	0801a254 	.word	0x0801a254
 800c820:	20000b5c 	.word	0x20000b5c
 800c824:	2000a6ec 	.word	0x2000a6ec
 800c828:	0801a2ac 	.word	0x0801a2ac

0800c82c <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82e:	b08d      	sub	sp, #52	@ 0x34
 800c830:	af08      	add	r7, sp, #32
 800c832:	4603      	mov	r3, r0
 800c834:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800c836:	2332      	movs	r3, #50	@ 0x32
 800c838:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	4a3e      	ldr	r2, [pc, #248]	@ (800c938 <VCU_TransmitMessageQueue+0x10c>)
 800c83e:	2102      	movs	r1, #2
 800c840:	4618      	mov	r0, r3
 800c842:	f7f5 ffba 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d11a      	bne.n	800c882 <VCU_TransmitMessageQueue+0x56>
      Nop();
 800c84c:	bf00      	nop
      Nop();
 800c84e:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800c850:	79f8      	ldrb	r0, [r7, #7]
 800c852:	4b3a      	ldr	r3, [pc, #232]	@ (800c93c <VCU_TransmitMessageQueue+0x110>)
 800c854:	4a3a      	ldr	r2, [pc, #232]	@ (800c940 <VCU_TransmitMessageQueue+0x114>)
 800c856:	493b      	ldr	r1, [pc, #236]	@ (800c944 <VCU_TransmitMessageQueue+0x118>)
 800c858:	f7f6 f869 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800c85c:	4b3a      	ldr	r3, [pc, #232]	@ (800c948 <VCU_TransmitMessageQueue+0x11c>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	f003 0311 	and.w	r3, r3, #17
 800c864:	2b11      	cmp	r3, #17
 800c866:	d106      	bne.n	800c876 <VCU_TransmitMessageQueue+0x4a>
 800c868:	4938      	ldr	r1, [pc, #224]	@ (800c94c <VCU_TransmitMessageQueue+0x120>)
 800c86a:	4839      	ldr	r0, [pc, #228]	@ (800c950 <VCU_TransmitMessageQueue+0x124>)
 800c86c:	f008 fc3a 	bl	80150e4 <siprintf>
 800c870:	4837      	ldr	r0, [pc, #220]	@ (800c950 <VCU_TransmitMessageQueue+0x124>)
 800c872:	f7f8 fee3 	bl	800563c <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	2102      	movs	r1, #2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f5 fce0 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800c880:	e056      	b.n	800c930 <VCU_TransmitMessageQueue+0x104>
    }
    attempts--;
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	3b01      	subs	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800c888:	4b2b      	ldr	r3, [pc, #172]	@ (800c938 <VCU_TransmitMessageQueue+0x10c>)
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d0d2      	beq.n	800c83a <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800c894:	4b2f      	ldr	r3, [pc, #188]	@ (800c954 <VCU_TransmitMessageQueue+0x128>)
 800c896:	791b      	ldrb	r3, [r3, #4]
 800c898:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f7 f852 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73bb      	strb	r3, [r7, #14]
  
  // Log TX message if DBG_COMMS is enabled
  if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){
 800c8a8:	4b27      	ldr	r3, [pc, #156]	@ (800c948 <VCU_TransmitMessageQueue+0x11c>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	f003 0312 	and.w	r3, r3, #18
 800c8b0:	2b12      	cmp	r3, #18
 800c8b2:	d133      	bne.n	800c91c <VCU_TransmitMessageQueue+0xf0>
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8b4:	4b27      	ldr	r3, [pc, #156]	@ (800c954 <VCU_TransmitMessageQueue+0x128>)
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8bc:	b29b      	uxth	r3, r3
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8be:	469c      	mov	ip, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8c0:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <VCU_TransmitMessageQueue+0x128>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8c8:	469e      	mov	lr, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8ca:	4b23      	ldr	r3, [pc, #140]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8ce:	461a      	mov	r2, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8d0:	4b21      	ldr	r3, [pc, #132]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8d2:	785b      	ldrb	r3, [r3, #1]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8d4:	4619      	mov	r1, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8d6:	4b20      	ldr	r3, [pc, #128]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8d8:	789b      	ldrb	r3, [r3, #2]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8da:	4618      	mov	r0, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8de:	78db      	ldrb	r3, [r3, #3]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8e0:	461c      	mov	r4, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8e4:	791b      	ldrb	r3, [r3, #4]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8e6:	461d      	mov	r5, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8ea:	795b      	ldrb	r3, [r3, #5]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8ec:	461e      	mov	r6, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8f0:	799b      	ldrb	r3, [r3, #6]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8f2:	603b      	str	r3, [r7, #0]
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8f4:	4b18      	ldr	r3, [pc, #96]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c8f6:	79db      	ldrb	r3, [r3, #7]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8f8:	9307      	str	r3, [sp, #28]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	9306      	str	r3, [sp, #24]
 800c8fe:	9605      	str	r6, [sp, #20]
 800c900:	9504      	str	r5, [sp, #16]
 800c902:	9403      	str	r4, [sp, #12]
 800c904:	9002      	str	r0, [sp, #8]
 800c906:	9101      	str	r1, [sp, #4]
 800c908:	9200      	str	r2, [sp, #0]
 800c90a:	4673      	mov	r3, lr
 800c90c:	4662      	mov	r2, ip
 800c90e:	4913      	ldr	r1, [pc, #76]	@ (800c95c <VCU_TransmitMessageQueue+0x130>)
 800c910:	480f      	ldr	r0, [pc, #60]	@ (800c950 <VCU_TransmitMessageQueue+0x124>)
 800c912:	f008 fbe7 	bl	80150e4 <siprintf>
      serialOut(tempBuffer);
 800c916:	480e      	ldr	r0, [pc, #56]	@ (800c950 <VCU_TransmitMessageQueue+0x124>)
 800c918:	f7f8 fe90 	bl	800563c <serialOut>
  }

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
 800c91e:	79f8      	ldrb	r0, [r7, #7]
 800c920:	2201      	movs	r2, #1
 800c922:	9201      	str	r2, [sp, #4]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <VCU_TransmitMessageQueue+0x12c>)
 800c928:	4a0a      	ldr	r2, [pc, #40]	@ (800c954 <VCU_TransmitMessageQueue+0x128>)
 800c92a:	2102      	movs	r1, #2
 800c92c:	f7f5 fb96 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c936:	bf00      	nop
 800c938:	2000a754 	.word	0x2000a754
 800c93c:	2000a7f6 	.word	0x2000a7f6
 800c940:	2000a7f5 	.word	0x2000a7f5
 800c944:	2000a7f4 	.word	0x2000a7f4
 800c948:	2000000c 	.word	0x2000000c
 800c94c:	0801a318 	.word	0x0801a318
 800c950:	20000b5c 	.word	0x20000b5c
 800c954:	2000a758 	.word	0x2000a758
 800c958:	2000a764 	.word	0x2000a764
 800c95c:	0801a348 	.word	0x0801a348

0800c960 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800c960:	b5b0      	push	{r4, r5, r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c966:	4b4a      	ldr	r3, [pc, #296]	@ (800ca90 <VCU_ProcessVcuCommand+0x130>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a4a      	ldr	r2, [pc, #296]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c96c:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c96e:	4b4a      	ldr	r3, [pc, #296]	@ (800ca98 <VCU_ProcessVcuCommand+0x138>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c974:	4a47      	ldr	r2, [pc, #284]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c976:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800c978:	4b46      	ldr	r3, [pc, #280]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800c980:	463b      	mov	r3, r7
 800c982:	2208      	movs	r2, #8
 800c984:	2100      	movs	r1, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f008 fc13 	bl	80151b2 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800c98c:	4a43      	ldr	r2, [pc, #268]	@ (800ca9c <VCU_ProcessVcuCommand+0x13c>)
 800c98e:	463b      	mov	r3, r7
 800c990:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c994:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800c998:	887a      	ldrh	r2, [r7, #2]
 800c99a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c99c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800c9a0:	4b3c      	ldr	r3, [pc, #240]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9a6:	783a      	ldrb	r2, [r7, #0]
 800c9a8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800c9ac:	b2d2      	uxtb	r2, r2
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d03d      	beq.n	800ca2e <VCU_ProcessVcuCommand+0xce>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800c9b2:	783b      	ldrb	r3, [r7, #0]
 800c9b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	4b35      	ldr	r3, [pc, #212]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 800c9c2:	4b34      	ldr	r3, [pc, #208]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d81b      	bhi.n	800ca04 <VCU_ProcessVcuCommand+0xa4>
 800c9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d4 <VCU_ProcessVcuCommand+0x74>)
 800c9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d2:	bf00      	nop
 800c9d4:	0800ca29 	.word	0x0800ca29
 800c9d8:	0800ca29 	.word	0x0800ca29
 800c9dc:	0800c9f5 	.word	0x0800c9f5
 800c9e0:	0800c9e5 	.word	0x0800c9e5
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800c9e4:	4b2b      	ldr	r3, [pc, #172]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	76da      	strb	r2, [r3, #27]
        pack.errorCounts.firstModule = 0;
 800c9ea:	4b2a      	ldr	r3, [pc, #168]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c9f2:	e01c      	b.n	800ca2e <VCU_ProcessVcuCommand+0xce>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800c9f4:	4b27      	ldr	r3, [pc, #156]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	76da      	strb	r2, [r3, #27]
        pack.errorCounts.firstModule = 0;
 800c9fa:	4b26      	ldr	r3, [pc, #152]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800ca02:	e014      	b.n	800ca2e <VCU_ProcessVcuCommand+0xce>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800ca04:	4b26      	ldr	r3, [pc, #152]	@ (800caa0 <VCU_ProcessVcuCommand+0x140>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	f003 0311 	and.w	r3, r3, #17
 800ca0c:	2b11      	cmp	r3, #17
 800ca0e:	d10d      	bne.n	800ca2c <VCU_ProcessVcuCommand+0xcc>
 800ca10:	4b20      	ldr	r3, [pc, #128]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800ca12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca16:	461a      	mov	r2, r3
 800ca18:	4922      	ldr	r1, [pc, #136]	@ (800caa4 <VCU_ProcessVcuCommand+0x144>)
 800ca1a:	4823      	ldr	r0, [pc, #140]	@ (800caa8 <VCU_ProcessVcuCommand+0x148>)
 800ca1c:	f008 fb62 	bl	80150e4 <siprintf>
 800ca20:	4821      	ldr	r0, [pc, #132]	@ (800caa8 <VCU_ProcessVcuCommand+0x148>)
 800ca22:	f7f8 fe0b 	bl	800563c <serialOut>
        break;
 800ca26:	e001      	b.n	800ca2c <VCU_ProcessVcuCommand+0xcc>
        break;
 800ca28:	bf00      	nop
 800ca2a:	e000      	b.n	800ca2e <VCU_ProcessVcuCommand+0xce>
        break;
 800ca2c:	bf00      	nop
    }
  }
  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800ca2e:	4b1c      	ldr	r3, [pc, #112]	@ (800caa0 <VCU_ProcessVcuCommand+0x140>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	f003 0310 	and.w	r3, r3, #16
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d021      	beq.n	800ca7e <VCU_ProcessVcuCommand+0x11e>
 800ca3a:	4b1c      	ldr	r3, [pc, #112]	@ (800caac <VCU_ProcessVcuCommand+0x14c>)
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	461c      	mov	r4, r3
 800ca46:	4b13      	ldr	r3, [pc, #76]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800ca48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca4c:	461d      	mov	r5, r3
 800ca4e:	4b11      	ldr	r3, [pc, #68]	@ (800ca94 <VCU_ProcessVcuCommand+0x134>)
 800ca50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7f3 fd4d 	bl	80004f4 <__aeabi_i2d>
 800ca5a:	a30b      	add	r3, pc, #44	@ (adr r3, 800ca88 <VCU_ProcessVcuCommand+0x128>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fdb2 	bl	80005c8 <__aeabi_dmul>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	e9cd 2300 	strd	r2, r3, [sp]
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	4622      	mov	r2, r4
 800ca70:	490f      	ldr	r1, [pc, #60]	@ (800cab0 <VCU_ProcessVcuCommand+0x150>)
 800ca72:	480d      	ldr	r0, [pc, #52]	@ (800caa8 <VCU_ProcessVcuCommand+0x148>)
 800ca74:	f008 fb36 	bl	80150e4 <siprintf>
 800ca78:	480b      	ldr	r0, [pc, #44]	@ (800caa8 <VCU_ProcessVcuCommand+0x148>)
 800ca7a:	f7f8 fddf 	bl	800563c <serialOut>
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	eb851eb8 	.word	0xeb851eb8
 800ca8c:	3f8eb851 	.word	0x3f8eb851
 800ca90:	20000d20 	.word	0x20000d20
 800ca94:	2000a6ec 	.word	0x2000a6ec
 800ca98:	200005d0 	.word	0x200005d0
 800ca9c:	2000a7b4 	.word	0x2000a7b4
 800caa0:	2000000c 	.word	0x2000000c
 800caa4:	0801a3ac 	.word	0x0801a3ac
 800caa8:	20000b5c 	.word	0x20000b5c
 800caac:	2000a758 	.word	0x2000a758
 800cab0:	0801a3d4 	.word	0x0801a3d4

0800cab4 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800caba:	4b3a      	ldr	r3, [pc, #232]	@ (800cba4 <VCU_ProcessVcuModuleCommand+0xf0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a3a      	ldr	r2, [pc, #232]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cac0:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cac2:	4b3a      	ldr	r3, [pc, #232]	@ (800cbac <VCU_ProcessVcuModuleCommand+0xf8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac8:	4a37      	ldr	r2, [pc, #220]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800caca:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800cacc:	4b36      	ldr	r3, [pc, #216]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800cad4:	463b      	mov	r3, r7
 800cad6:	220c      	movs	r2, #12
 800cad8:	2100      	movs	r1, #0
 800cada:	4618      	mov	r0, r3
 800cadc:	f008 fb69 	bl	80151b2 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800cae0:	4a33      	ldr	r2, [pc, #204]	@ (800cbb0 <VCU_ProcessVcuModuleCommand+0xfc>)
 800cae2:	463b      	mov	r3, r7
 800cae4:	ca07      	ldmia	r2, {r0, r1, r2}
 800cae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800caea:	783a      	ldrb	r2, [r7, #0]
 800caec:	4b2e      	ldr	r3, [pc, #184]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800caee:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800caf2:	4b2d      	ldr	r3, [pc, #180]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800caf4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fe85 	bl	800b808 <MCU_ModuleIndexFromId>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cb02:	4b29      	ldr	r3, [pc, #164]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cb04:	7d1b      	ldrb	r3, [r3, #20]
 800cb06:	7bfa      	ldrb	r2, [r7, #15]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d111      	bne.n	800cb30 <VCU_ProcessVcuModuleCommand+0x7c>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800cb0c:	4b29      	ldr	r3, [pc, #164]	@ (800cbb4 <VCU_ProcessVcuModuleCommand+0x100>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	f003 0311 	and.w	r3, r3, #17
 800cb14:	2b11      	cmp	r3, #17
 800cb16:	d140      	bne.n	800cb9a <VCU_ProcessVcuModuleCommand+0xe6>
 800cb18:	4b23      	ldr	r3, [pc, #140]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cb1a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4925      	ldr	r1, [pc, #148]	@ (800cbb8 <VCU_ProcessVcuModuleCommand+0x104>)
 800cb22:	4826      	ldr	r0, [pc, #152]	@ (800cbbc <VCU_ProcessVcuModuleCommand+0x108>)
 800cb24:	f008 fade 	bl	80150e4 <siprintf>
 800cb28:	4824      	ldr	r0, [pc, #144]	@ (800cbbc <VCU_ProcessVcuModuleCommand+0x108>)
 800cb2a:	f7f8 fd87 	bl	800563c <serialOut>
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
  }
}
 800cb2e:	e034      	b.n	800cb9a <VCU_ProcessVcuModuleCommand+0xe6>
    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	4a23      	ldr	r2, [pc, #140]	@ (800cbc0 <VCU_ProcessVcuModuleCommand+0x10c>)
 800cb34:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800cb38:	fb01 f303 	mul.w	r3, r1, r3
 800cb3c:	4413      	add	r3, r2
 800cb3e:	3327      	adds	r3, #39	@ 0x27
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	787a      	ldrb	r2, [r7, #1]
 800cb44:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800cb48:	b2d2      	uxtb	r2, r2
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00e      	beq.n	800cb6c <VCU_ProcessVcuModuleCommand+0xb8>
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800cb4e:	787b      	ldrb	r3, [r7, #1]
 800cb50:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	4610      	mov	r0, r2
 800cb5a:	4a19      	ldr	r2, [pc, #100]	@ (800cbc0 <VCU_ProcessVcuModuleCommand+0x10c>)
 800cb5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800cb60:	fb01 f303 	mul.w	r3, r1, r3
 800cb64:	4413      	add	r3, r2
 800cb66:	3328      	adds	r3, #40	@ 0x28
 800cb68:	4602      	mov	r2, r0
 800cb6a:	701a      	strb	r2, [r3, #0]
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800cb6c:	4b11      	ldr	r3, [pc, #68]	@ (800cbb4 <VCU_ProcessVcuModuleCommand+0x100>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	f003 0310 	and.w	r3, r3, #16
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d010      	beq.n	800cb9a <VCU_ProcessVcuModuleCommand+0xe6>
 800cb78:	4b12      	ldr	r3, [pc, #72]	@ (800cbc4 <VCU_ProcessVcuModuleCommand+0x110>)
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	461a      	mov	r2, r3
 800cb84:	787b      	ldrb	r3, [r7, #1]
 800cb86:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	490e      	ldr	r1, [pc, #56]	@ (800cbc8 <VCU_ProcessVcuModuleCommand+0x114>)
 800cb8e:	480b      	ldr	r0, [pc, #44]	@ (800cbbc <VCU_ProcessVcuModuleCommand+0x108>)
 800cb90:	f008 faa8 	bl	80150e4 <siprintf>
 800cb94:	4809      	ldr	r0, [pc, #36]	@ (800cbbc <VCU_ProcessVcuModuleCommand+0x108>)
 800cb96:	f7f8 fd51 	bl	800563c <serialOut>
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000d20 	.word	0x20000d20
 800cba8:	2000a6ec 	.word	0x2000a6ec
 800cbac:	200005d0 	.word	0x200005d0
 800cbb0:	2000a7b4 	.word	0x2000a7b4
 800cbb4:	2000000c 	.word	0x2000000c
 800cbb8:	0801a404 	.word	0x0801a404
 800cbbc:	20000b5c 	.word	0x20000b5c
 800cbc0:	20000dec 	.word	0x20000dec
 800cbc4:	2000a758 	.word	0x2000a758
 800cbc8:	0801a444 	.word	0x0801a444

0800cbcc <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cbd2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc4c <VCU_ProcessVcuKeepAlive+0x80>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a1e      	ldr	r2, [pc, #120]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbd8:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cbda:	4b1e      	ldr	r3, [pc, #120]	@ (800cc54 <VCU_ProcessVcuKeepAlive+0x88>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe0:	4a1b      	ldr	r2, [pc, #108]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbe2:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	2208      	movs	r2, #8
 800cbe8:	2100      	movs	r1, #0
 800cbea:	4618      	mov	r0, r3
 800cbec:	f008 fae1 	bl	80151b2 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800cbf0:	4a19      	ldr	r2, [pc, #100]	@ (800cc58 <VCU_ProcessVcuKeepAlive+0x8c>)
 800cbf2:	463b      	mov	r3, r7
 800cbf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbf8:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800cbfc:	783b      	ldrb	r3, [r7, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d008      	beq.n	800cc14 <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800cc02:	4b13      	ldr	r3, [pc, #76]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x84>)
 800cc04:	2201      	movs	r2, #1
 800cc06:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800cc0a:	783a      	ldrb	r2, [r7, #0]
 800cc0c:	4b10      	ldr	r3, [pc, #64]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x84>)
 800cc0e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800cc12:	e003      	b.n	800cc1c <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800cc14:	4b0e      	ldr	r3, [pc, #56]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x84>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cc1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc5c <VCU_ProcessVcuKeepAlive+0x90>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	f003 0310 	and.w	r3, r3, #16
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00c      	beq.n	800cc42 <VCU_ProcessVcuKeepAlive+0x76>
 800cc28:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <VCU_ProcessVcuKeepAlive+0x94>)
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	461a      	mov	r2, r3
 800cc34:	490b      	ldr	r1, [pc, #44]	@ (800cc64 <VCU_ProcessVcuKeepAlive+0x98>)
 800cc36:	480c      	ldr	r0, [pc, #48]	@ (800cc68 <VCU_ProcessVcuKeepAlive+0x9c>)
 800cc38:	f008 fa54 	bl	80150e4 <siprintf>
 800cc3c:	480a      	ldr	r0, [pc, #40]	@ (800cc68 <VCU_ProcessVcuKeepAlive+0x9c>)
 800cc3e:	f7f8 fcfd 	bl	800563c <serialOut>
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000d20 	.word	0x20000d20
 800cc50:	2000a6ec 	.word	0x2000a6ec
 800cc54:	200005d0 	.word	0x200005d0
 800cc58:	2000a7b4 	.word	0x2000a7b4
 800cc5c:	2000000c 	.word	0x2000000c
 800cc60:	2000a758 	.word	0x2000a758
 800cc64:	0801a474 	.word	0x0801a474
 800cc68:	20000b5c 	.word	0x20000b5c

0800cc6c <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cc72:	4b1c      	ldr	r3, [pc, #112]	@ (800cce4 <VCU_ProcessVcuTime+0x78>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	f003 0310 	and.w	r3, r3, #16
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00c      	beq.n	800cc98 <VCU_ProcessVcuTime+0x2c>
 800cc7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cce8 <VCU_ProcessVcuTime+0x7c>)
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4918      	ldr	r1, [pc, #96]	@ (800ccec <VCU_ProcessVcuTime+0x80>)
 800cc8c:	4818      	ldr	r0, [pc, #96]	@ (800ccf0 <VCU_ProcessVcuTime+0x84>)
 800cc8e:	f008 fa29 	bl	80150e4 <siprintf>
 800cc92:	4817      	ldr	r0, [pc, #92]	@ (800ccf0 <VCU_ProcessVcuTime+0x84>)
 800cc94:	f7f8 fcd2 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cc98:	4b16      	ldr	r3, [pc, #88]	@ (800ccf4 <VCU_ProcessVcuTime+0x88>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a16      	ldr	r2, [pc, #88]	@ (800ccf8 <VCU_ProcessVcuTime+0x8c>)
 800cc9e:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cca0:	4b16      	ldr	r3, [pc, #88]	@ (800ccfc <VCU_ProcessVcuTime+0x90>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca6:	4a14      	ldr	r2, [pc, #80]	@ (800ccf8 <VCU_ProcessVcuTime+0x8c>)
 800cca8:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800ccaa:	463b      	mov	r3, r7
 800ccac:	2208      	movs	r2, #8
 800ccae:	2100      	movs	r1, #0
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f008 fa7e 	bl	80151b2 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	2208      	movs	r2, #8
 800ccba:	4911      	ldr	r1, [pc, #68]	@ (800cd00 <VCU_ProcessVcuTime+0x94>)
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f009 f984 	bl	8015fca <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800ccc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc6:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800ccca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ccce:	f7f8 fd23 	bl	8005718 <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800ccd2:	4b09      	ldr	r3, [pc, #36]	@ (800ccf8 <VCU_ProcessVcuTime+0x8c>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	2000000c 	.word	0x2000000c
 800cce8:	2000a758 	.word	0x2000a758
 800ccec:	0801a494 	.word	0x0801a494
 800ccf0:	20000b5c 	.word	0x20000b5c
 800ccf4:	20000d20 	.word	0x20000d20
 800ccf8:	2000a6ec 	.word	0x2000a6ec
 800ccfc:	200005d0 	.word	0x200005d0
 800cd00:	2000a7b4 	.word	0x2000a7b4

0800cd04 <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cd0e:	4b50      	ldr	r3, [pc, #320]	@ (800ce50 <VCU_ProcessReadEeprom+0x14c>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	f003 0310 	and.w	r3, r3, #16
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00c      	beq.n	800cd34 <VCU_ProcessReadEeprom+0x30>
 800cd1a:	4b4e      	ldr	r3, [pc, #312]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	461a      	mov	r2, r3
 800cd26:	494c      	ldr	r1, [pc, #304]	@ (800ce58 <VCU_ProcessReadEeprom+0x154>)
 800cd28:	484c      	ldr	r0, [pc, #304]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800cd2a:	f008 f9db 	bl	80150e4 <siprintf>
 800cd2e:	484b      	ldr	r0, [pc, #300]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800cd30:	f7f8 fc84 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cd34:	4b4a      	ldr	r3, [pc, #296]	@ (800ce60 <VCU_ProcessReadEeprom+0x15c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a4a      	ldr	r2, [pc, #296]	@ (800ce64 <VCU_ProcessReadEeprom+0x160>)
 800cd3a:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cd3c:	4b4a      	ldr	r3, [pc, #296]	@ (800ce68 <VCU_ProcessReadEeprom+0x164>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd42:	4a48      	ldr	r2, [pc, #288]	@ (800ce64 <VCU_ProcessReadEeprom+0x160>)
 800cd44:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800cd46:	f107 030c 	add.w	r3, r7, #12
 800cd4a:	2208      	movs	r2, #8
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f008 fa2f 	bl	80151b2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800cd54:	4a45      	ldr	r2, [pc, #276]	@ (800ce6c <VCU_ProcessReadEeprom+0x168>)
 800cd56:	f107 030c 	add.w	r3, r7, #12
 800cd5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd5e:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800cd62:	7b3b      	ldrb	r3, [r7, #12]
 800cd64:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800cd66:	463a      	mov	r2, r7
 800cd68:	8afb      	ldrh	r3, [r7, #22]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f7 fc2b 	bl	80045c8 <EE_ReadVariable32bits>
 800cd72:	4603      	mov	r3, r0
 800cd74:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800cd76:	8abb      	ldrh	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d156      	bne.n	800ce2a <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800cd82:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800cd88:	8afb      	ldrh	r3, [r7, #22]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cd8e:	4b31      	ldr	r3, [pc, #196]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cd94:	4b2f      	ldr	r3, [pc, #188]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cd9a:	4b2e      	ldr	r3, [pc, #184]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800cda0:	4b33      	ldr	r3, [pc, #204]	@ (800ce70 <VCU_ProcessReadEeprom+0x16c>)
 800cda2:	461a      	mov	r2, r3
 800cda4:	1d3b      	adds	r3, r7, #4
 800cda6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cdaa:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cdae:	4b2d      	ldr	r3, [pc, #180]	@ (800ce64 <VCU_ProcessReadEeprom+0x160>)
 800cdb0:	895b      	ldrh	r3, [r3, #10]
 800cdb2:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdbc:	b299      	uxth	r1, r3
 800cdbe:	4a25      	ldr	r2, [pc, #148]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdc0:	8813      	ldrh	r3, [r2, #0]
 800cdc2:	f361 030a 	bfi	r3, r1, #0, #11
 800cdc6:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cdc8:	4a22      	ldr	r2, [pc, #136]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdca:	6813      	ldr	r3, [r2, #0]
 800cdcc:	f36f 23dc 	bfc	r3, #11, #18
 800cdd0:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cdd2:	4a20      	ldr	r2, [pc, #128]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdd4:	7913      	ldrb	r3, [r2, #4]
 800cdd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdda:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cddc:	4a1d      	ldr	r2, [pc, #116]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdde:	7913      	ldrb	r3, [r2, #4]
 800cde0:	2108      	movs	r1, #8
 800cde2:	f361 0303 	bfi	r3, r1, #0, #4
 800cde6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cde8:	4a1a      	ldr	r2, [pc, #104]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdea:	7913      	ldrb	r3, [r2, #4]
 800cdec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdf0:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cdf2:	4a18      	ldr	r2, [pc, #96]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800cdf4:	7913      	ldrb	r3, [r2, #4]
 800cdf6:	f023 0310 	bic.w	r3, r3, #16
 800cdfa:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cdfc:	4b14      	ldr	r3, [pc, #80]	@ (800ce50 <VCU_ProcessReadEeprom+0x14c>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	f003 0310 	and.w	r3, r3, #16
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00c      	beq.n	800ce22 <VCU_ProcessReadEeprom+0x11e>
 800ce08:	4b12      	ldr	r3, [pc, #72]	@ (800ce54 <VCU_ProcessReadEeprom+0x150>)
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	461a      	mov	r2, r3
 800ce14:	4917      	ldr	r1, [pc, #92]	@ (800ce74 <VCU_ProcessReadEeprom+0x170>)
 800ce16:	4811      	ldr	r0, [pc, #68]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800ce18:	f008 f964 	bl	80150e4 <siprintf>
 800ce1c:	480f      	ldr	r0, [pc, #60]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800ce1e:	f7f8 fc0d 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ce22:	2000      	movs	r0, #0
 800ce24:	f7ff fd02 	bl	800c82c <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800ce28:	e00e      	b.n	800ce48 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800ce2a:	4b09      	ldr	r3, [pc, #36]	@ (800ce50 <VCU_ProcessReadEeprom+0x14c>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d008      	beq.n	800ce48 <VCU_ProcessReadEeprom+0x144>
 800ce36:	8abb      	ldrh	r3, [r7, #20]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	490f      	ldr	r1, [pc, #60]	@ (800ce78 <VCU_ProcessReadEeprom+0x174>)
 800ce3c:	4807      	ldr	r0, [pc, #28]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800ce3e:	f008 f951 	bl	80150e4 <siprintf>
 800ce42:	4806      	ldr	r0, [pc, #24]	@ (800ce5c <VCU_ProcessReadEeprom+0x158>)
 800ce44:	f7f8 fbfa 	bl	800563c <serialOut>
}
 800ce48:	bf00      	nop
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	2000000c 	.word	0x2000000c
 800ce54:	2000a758 	.word	0x2000a758
 800ce58:	0801a4ac 	.word	0x0801a4ac
 800ce5c:	20000b5c 	.word	0x20000b5c
 800ce60:	20000d20 	.word	0x20000d20
 800ce64:	2000a6ec 	.word	0x2000a6ec
 800ce68:	200005d0 	.word	0x200005d0
 800ce6c:	2000a7b4 	.word	0x2000a7b4
 800ce70:	2000a764 	.word	0x2000a764
 800ce74:	0801a4cc 	.word	0x0801a4cc
 800ce78:	0801a4ec 	.word	0x0801a4ec

0800ce7c <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce86:	4b52      	ldr	r3, [pc, #328]	@ (800cfd0 <VCU_ProcessWriteEeprom+0x154>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 0310 	and.w	r3, r3, #16
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00c      	beq.n	800ceac <VCU_ProcessWriteEeprom+0x30>
 800ce92:	4b50      	ldr	r3, [pc, #320]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	494e      	ldr	r1, [pc, #312]	@ (800cfd8 <VCU_ProcessWriteEeprom+0x15c>)
 800cea0:	484e      	ldr	r0, [pc, #312]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cea2:	f008 f91f 	bl	80150e4 <siprintf>
 800cea6:	484d      	ldr	r0, [pc, #308]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cea8:	f7f8 fbc8 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ceac:	4b4c      	ldr	r3, [pc, #304]	@ (800cfe0 <VCU_ProcessWriteEeprom+0x164>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a4c      	ldr	r2, [pc, #304]	@ (800cfe4 <VCU_ProcessWriteEeprom+0x168>)
 800ceb2:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ceb4:	4b4c      	ldr	r3, [pc, #304]	@ (800cfe8 <VCU_ProcessWriteEeprom+0x16c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceba:	4a4a      	ldr	r2, [pc, #296]	@ (800cfe4 <VCU_ProcessWriteEeprom+0x168>)
 800cebc:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	2208      	movs	r2, #8
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f008 f973 	bl	80151b2 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800cecc:	4a47      	ldr	r2, [pc, #284]	@ (800cfec <VCU_ProcessWriteEeprom+0x170>)
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ced6:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800ceda:	7a3b      	ldrb	r3, [r7, #8]
 800cedc:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800cee2:	8a7b      	ldrh	r3, [r7, #18]
 800cee4:	6979      	ldr	r1, [r7, #20]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f8 fd0e 	bl	8005908 <StoreEEPROM>
 800ceec:	4603      	mov	r3, r0
 800ceee:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800cef0:	8a3b      	ldrh	r3, [r7, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d156      	bne.n	800cfa4 <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800cefc:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800cf02:	8a7b      	ldrh	r3, [r7, #18]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cf08:	4b32      	ldr	r3, [pc, #200]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cf0e:	4b31      	ldr	r3, [pc, #196]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cf14:	4b2f      	ldr	r3, [pc, #188]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800cf1a:	4b35      	ldr	r3, [pc, #212]	@ (800cff0 <VCU_ProcessWriteEeprom+0x174>)
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	463b      	mov	r3, r7
 800cf20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf24:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cf28:	4b2e      	ldr	r3, [pc, #184]	@ (800cfe4 <VCU_ProcessWriteEeprom+0x168>)
 800cf2a:	895b      	ldrh	r3, [r3, #10]
 800cf2c:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf36:	b299      	uxth	r1, r3
 800cf38:	4a26      	ldr	r2, [pc, #152]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf3a:	8813      	ldrh	r3, [r2, #0]
 800cf3c:	f361 030a 	bfi	r3, r1, #0, #11
 800cf40:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cf42:	4a24      	ldr	r2, [pc, #144]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf44:	6813      	ldr	r3, [r2, #0]
 800cf46:	f36f 23dc 	bfc	r3, #11, #18
 800cf4a:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cf4c:	4a21      	ldr	r2, [pc, #132]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf4e:	7913      	ldrb	r3, [r2, #4]
 800cf50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf54:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cf56:	4a1f      	ldr	r2, [pc, #124]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf58:	7913      	ldrb	r3, [r2, #4]
 800cf5a:	2108      	movs	r1, #8
 800cf5c:	f361 0303 	bfi	r3, r1, #0, #4
 800cf60:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cf62:	4a1c      	ldr	r2, [pc, #112]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf64:	7913      	ldrb	r3, [r2, #4]
 800cf66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf6a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cf6c:	4a19      	ldr	r2, [pc, #100]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf6e:	7913      	ldrb	r3, [r2, #4]
 800cf70:	f023 0310 	bic.w	r3, r3, #16
 800cf74:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cf76:	4b16      	ldr	r3, [pc, #88]	@ (800cfd0 <VCU_ProcessWriteEeprom+0x154>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	f003 0310 	and.w	r3, r3, #16
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00c      	beq.n	800cf9c <VCU_ProcessWriteEeprom+0x120>
 800cf82:	4b14      	ldr	r3, [pc, #80]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x158>)
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	4919      	ldr	r1, [pc, #100]	@ (800cff4 <VCU_ProcessWriteEeprom+0x178>)
 800cf90:	4812      	ldr	r0, [pc, #72]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cf92:	f008 f8a7 	bl	80150e4 <siprintf>
 800cf96:	4811      	ldr	r0, [pc, #68]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cf98:	f7f8 fb50 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	f7ff fc45 	bl	800c82c <VCU_TransmitMessageQueue>
 800cfa2:	e00e      	b.n	800cfc2 <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd0 <VCU_ProcessWriteEeprom+0x154>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <VCU_ProcessWriteEeprom+0x146>
 800cfb0:	8a3b      	ldrh	r3, [r7, #16]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	4910      	ldr	r1, [pc, #64]	@ (800cff8 <VCU_ProcessWriteEeprom+0x17c>)
 800cfb6:	4809      	ldr	r0, [pc, #36]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cfb8:	f008 f894 	bl	80150e4 <siprintf>
 800cfbc:	4807      	ldr	r0, [pc, #28]	@ (800cfdc <VCU_ProcessWriteEeprom+0x160>)
 800cfbe:	f7f8 fb3d 	bl	800563c <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800cfc2:	f7fa f81b 	bl	8006ffc <PCU_Initialize>
}
 800cfc6:	bf00      	nop
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	2000000c 	.word	0x2000000c
 800cfd4:	2000a758 	.word	0x2000a758
 800cfd8:	0801a510 	.word	0x0801a510
 800cfdc:	20000b5c 	.word	0x20000b5c
 800cfe0:	20000d20 	.word	0x20000d20
 800cfe4:	2000a6ec 	.word	0x2000a6ec
 800cfe8:	200005d0 	.word	0x200005d0
 800cfec:	2000a7b4 	.word	0x2000a7b4
 800cff0:	2000a764 	.word	0x2000a764
 800cff4:	0801a4cc 	.word	0x0801a4cc
 800cff8:	0801a530 	.word	0x0801a530

0800cffc <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0

}
 800d000:	bf00      	nop
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
	...

0800d00c <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800d012:	4b16      	ldr	r3, [pc, #88]	@ (800d06c <VCU_TicksSinceLastMessage+0x60>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d018:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800d01a:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <VCU_TicksSinceLastMessage+0x64>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800d020:	4b14      	ldr	r3, [pc, #80]	@ (800d074 <VCU_TicksSinceLastMessage+0x68>)
 800d022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	429a      	cmp	r2, r3
 800d028:	d105      	bne.n	800d036 <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800d02a:	4b12      	ldr	r3, [pc, #72]	@ (800d074 <VCU_TicksSinceLastMessage+0x68>)
 800d02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	e013      	b.n	800d05e <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800d036:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <VCU_TicksSinceLastMessage+0x60>)
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	4b0e      	ldr	r3, [pc, #56]	@ (800d074 <VCU_TicksSinceLastMessage+0x68>)
 800d03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d03e:	1ad2      	subs	r2, r2, r3
 800d040:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <VCU_TicksSinceLastMessage+0x60>)
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	3301      	adds	r3, #1
 800d046:	490b      	ldr	r1, [pc, #44]	@ (800d074 <VCU_TicksSinceLastMessage+0x68>)
 800d048:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	1a41      	subs	r1, r0, r1
 800d04e:	3901      	subs	r1, #1
 800d050:	fb01 f303 	mul.w	r3, r1, r3
 800d054:	441a      	add	r2, r3
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	4413      	add	r3, r2
 800d05a:	3301      	adds	r3, #1
 800d05c:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800d05e:	68fb      	ldr	r3, [r7, #12]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	200005d0 	.word	0x200005d0
 800d070:	20000d20 	.word	0x20000d20
 800d074:	2000a6ec 	.word	0x2000a6ec

0800d078 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800d07e:	f04f 0300 	mov.w	r3, #0
 800d082:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800d084:	f04f 0300 	mov.w	r3, #0
 800d088:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800d08a:	4b67      	ldr	r3, [pc, #412]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d08c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d090:	4618      	mov	r0, r3
 800d092:	f7f3 fa2f 	bl	80004f4 <__aeabi_i2d>
 800d096:	f04f 0200 	mov.w	r2, #0
 800d09a:	4b64      	ldr	r3, [pc, #400]	@ (800d22c <VCU_TransmitBmsState+0x1b4>)
 800d09c:	f7f3 fa94 	bl	80005c8 <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	f04f 0200 	mov.w	r2, #0
 800d0ac:	f04f 0300 	mov.w	r3, #0
 800d0b0:	f7f3 f8d4 	bl	800025c <__adddf3>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	f7f3 fd7c 	bl	8000bb8 <__aeabi_d2f>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800d0c4:	6978      	ldr	r0, [r7, #20]
 800d0c6:	f7f3 fa27 	bl	8000518 <__aeabi_f2d>
 800d0ca:	a355      	add	r3, pc, #340	@ (adr r3, 800d220 <VCU_TransmitBmsState+0x1a8>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 fba4 	bl	800081c <__aeabi_ddiv>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f7f3 fd6c 	bl	8000bb8 <__aeabi_d2f>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800d0e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ec:	edc7 7a01 	vstr	s15, [r7, #4]
 800d0f0:	793b      	ldrb	r3, [r7, #4]
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	893b      	ldrh	r3, [r7, #8]
 800d0f6:	f362 0389 	bfi	r3, r2, #2, #8
 800d0fa:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800d0fc:	4b4a      	ldr	r3, [pc, #296]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d102:	f003 0303 	and.w	r3, r3, #3
 800d106:	b2da      	uxtb	r2, r3
 800d108:	7a3b      	ldrb	r3, [r7, #8]
 800d10a:	f362 0301 	bfi	r3, r2, #0, #2
 800d10e:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800d110:	4b45      	ldr	r3, [pc, #276]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	7a7b      	ldrb	r3, [r7, #9]
 800d11e:	f362 0383 	bfi	r3, r2, #2, #2
 800d122:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800d124:	4b40      	ldr	r3, [pc, #256]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d126:	7d9b      	ldrb	r3, [r3, #22]
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	7a7b      	ldrb	r3, [r7, #9]
 800d130:	f362 1304 	bfi	r3, r2, #4, #1
 800d134:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800d136:	4b3c      	ldr	r3, [pc, #240]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d138:	7d5b      	ldrb	r3, [r3, #21]
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	7a7b      	ldrb	r3, [r7, #9]
 800d142:	f362 1345 	bfi	r3, r2, #5, #1
 800d146:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800d148:	4b37      	ldr	r3, [pc, #220]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d14a:	7ddb      	ldrb	r3, [r3, #23]
 800d14c:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800d14e:	4b36      	ldr	r3, [pc, #216]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d150:	7e1b      	ldrb	r3, [r3, #24]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d004      	beq.n	800d160 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800d156:	7a7b      	ldrb	r3, [r7, #9]
 800d158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d15c:	727b      	strb	r3, [r7, #9]
 800d15e:	e003      	b.n	800d168 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800d160:	7a7b      	ldrb	r3, [r7, #9]
 800d162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d166:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800d168:	4b2f      	ldr	r3, [pc, #188]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d16a:	7d1b      	ldrb	r3, [r3, #20]
 800d16c:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800d16e:	7a7b      	ldrb	r3, [r7, #9]
 800d170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d174:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d17a:	4b2d      	ldr	r3, [pc, #180]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d180:	4b2b      	ldr	r3, [pc, #172]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d182:	2200      	movs	r2, #0
 800d184:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d186:	4b2a      	ldr	r3, [pc, #168]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d188:	2200      	movs	r2, #0
 800d18a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800d18c:	4b29      	ldr	r3, [pc, #164]	@ (800d234 <VCU_TransmitBmsState+0x1bc>)
 800d18e:	461a      	mov	r2, r3
 800d190:	f107 0308 	add.w	r3, r7, #8
 800d194:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d198:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d19c:	4b22      	ldr	r3, [pc, #136]	@ (800d228 <VCU_TransmitBmsState+0x1b0>)
 800d19e:	895b      	ldrh	r3, [r3, #10]
 800d1a0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1aa:	b299      	uxth	r1, r3
 800d1ac:	4a20      	ldr	r2, [pc, #128]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1ae:	8813      	ldrh	r3, [r2, #0]
 800d1b0:	f361 030a 	bfi	r3, r1, #0, #11
 800d1b4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d1b6:	4a1e      	ldr	r2, [pc, #120]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1b8:	6813      	ldr	r3, [r2, #0]
 800d1ba:	f36f 23dc 	bfc	r3, #11, #18
 800d1be:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d1c0:	4a1b      	ldr	r2, [pc, #108]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1c2:	7913      	ldrb	r3, [r2, #4]
 800d1c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1c8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d1ca:	4a19      	ldr	r2, [pc, #100]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1cc:	7913      	ldrb	r3, [r2, #4]
 800d1ce:	2108      	movs	r1, #8
 800d1d0:	f361 0303 	bfi	r3, r1, #0, #4
 800d1d4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d1d6:	4a16      	ldr	r2, [pc, #88]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1d8:	7913      	ldrb	r3, [r2, #4]
 800d1da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1de:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d1e0:	4a13      	ldr	r2, [pc, #76]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1e2:	7913      	ldrb	r3, [r2, #4]
 800d1e4:	f023 0310 	bic.w	r3, r3, #16
 800d1e8:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d1ea:	4b13      	ldr	r3, [pc, #76]	@ (800d238 <VCU_TransmitBmsState+0x1c0>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	f003 0310 	and.w	r3, r3, #16
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00c      	beq.n	800d210 <VCU_TransmitBmsState+0x198>
 800d1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d230 <VCU_TransmitBmsState+0x1b8>)
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	461a      	mov	r2, r3
 800d202:	490e      	ldr	r1, [pc, #56]	@ (800d23c <VCU_TransmitBmsState+0x1c4>)
 800d204:	480e      	ldr	r0, [pc, #56]	@ (800d240 <VCU_TransmitBmsState+0x1c8>)
 800d206:	f007 ff6d 	bl	80150e4 <siprintf>
 800d20a:	480d      	ldr	r0, [pc, #52]	@ (800d240 <VCU_TransmitBmsState+0x1c8>)
 800d20c:	f7f8 fa16 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d210:	2000      	movs	r0, #0
 800d212:	f7ff fb0b 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800d216:	bf00      	nop
 800d218:	3718      	adds	r7, #24
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	9999999a 	.word	0x9999999a
 800d224:	3fd99999 	.word	0x3fd99999
 800d228:	2000a6ec 	.word	0x2000a6ec
 800d22c:	3fe00000 	.word	0x3fe00000
 800d230:	2000a758 	.word	0x2000a758
 800d234:	2000a764 	.word	0x2000a764
 800d238:	2000000c 	.word	0x2000000c
 800d23c:	0801a554 	.word	0x0801a554
 800d240:	20000b5c 	.word	0x20000b5c
 800d244:	00000000 	.word	0x00000000

0800d248 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d254:	f04f 0300 	mov.w	r3, #0
 800d258:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800d25a:	4b65      	ldr	r3, [pc, #404]	@ (800d3f0 <VCU_TransmitBmsData1+0x1a8>)
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f3 f938 	bl	80004d4 <__aeabi_ui2d>
 800d264:	a35e      	add	r3, pc, #376	@ (adr r3, 800d3e0 <VCU_TransmitBmsData1+0x198>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	f7f3 f9ad 	bl	80005c8 <__aeabi_dmul>
 800d26e:	4602      	mov	r2, r0
 800d270:	460b      	mov	r3, r1
 800d272:	4610      	mov	r0, r2
 800d274:	4619      	mov	r1, r3
 800d276:	f04f 0200 	mov.w	r2, #0
 800d27a:	4b5e      	ldr	r3, [pc, #376]	@ (800d3f4 <VCU_TransmitBmsData1+0x1ac>)
 800d27c:	f7f2 ffec 	bl	8000258 <__aeabi_dsub>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4610      	mov	r0, r2
 800d286:	4619      	mov	r1, r3
 800d288:	f7f3 fc96 	bl	8000bb8 <__aeabi_d2f>
 800d28c:	4603      	mov	r3, r0
 800d28e:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7f3 f941 	bl	8000518 <__aeabi_f2d>
 800d296:	a352      	add	r3, pc, #328	@ (adr r3, 800d3e0 <VCU_TransmitBmsData1+0x198>)
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	f7f3 fabe 	bl	800081c <__aeabi_ddiv>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	f04f 0200 	mov.w	r2, #0
 800d2ac:	4b52      	ldr	r3, [pc, #328]	@ (800d3f8 <VCU_TransmitBmsData1+0x1b0>)
 800d2ae:	f7f2 ffd5 	bl	800025c <__adddf3>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	f7f3 fc7d 	bl	8000bb8 <__aeabi_d2f>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800d2c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800d2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ca:	ee17 3a90 	vmov	r3, s15
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800d2d2:	4b47      	ldr	r3, [pc, #284]	@ (800d3f0 <VCU_TransmitBmsData1+0x1a8>)
 800d2d4:	899b      	ldrh	r3, [r3, #12]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7f3 f90c 	bl	80004f4 <__aeabi_i2d>
 800d2dc:	a342      	add	r3, pc, #264	@ (adr r3, 800d3e8 <VCU_TransmitBmsData1+0x1a0>)
 800d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e2:	f7f3 f971 	bl	80005c8 <__aeabi_dmul>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	f04f 0200 	mov.w	r2, #0
 800d2f2:	f04f 0300 	mov.w	r3, #0
 800d2f6:	f7f2 ffb1 	bl	800025c <__adddf3>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4610      	mov	r0, r2
 800d300:	4619      	mov	r1, r3
 800d302:	f7f3 fc59 	bl	8000bb8 <__aeabi_d2f>
 800d306:	4603      	mov	r3, r0
 800d308:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	f7f3 f904 	bl	8000518 <__aeabi_f2d>
 800d310:	a333      	add	r3, pc, #204	@ (adr r3, 800d3e0 <VCU_TransmitBmsData1+0x198>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f7f3 fa81 	bl	800081c <__aeabi_ddiv>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4610      	mov	r0, r2
 800d320:	4619      	mov	r1, r3
 800d322:	f7f3 fc49 	bl	8000bb8 <__aeabi_d2f>
 800d326:	4603      	mov	r3, r0
 800d328:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800d32a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d332:	ee17 3a90 	vmov	r3, s15
 800d336:	b29b      	uxth	r3, r3
 800d338:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d33e:	4b2f      	ldr	r3, [pc, #188]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d344:	4b2d      	ldr	r3, [pc, #180]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d346:	2200      	movs	r2, #0
 800d348:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d34a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800d350:	4b2b      	ldr	r3, [pc, #172]	@ (800d400 <VCU_TransmitBmsData1+0x1b8>)
 800d352:	461a      	mov	r2, r3
 800d354:	463b      	mov	r3, r7
 800d356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d35a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d35e:	4b24      	ldr	r3, [pc, #144]	@ (800d3f0 <VCU_TransmitBmsData1+0x1a8>)
 800d360:	895b      	ldrh	r3, [r3, #10]
 800d362:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 800d366:	b29b      	uxth	r3, r3
 800d368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d36c:	b299      	uxth	r1, r3
 800d36e:	4a23      	ldr	r2, [pc, #140]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d370:	8813      	ldrh	r3, [r2, #0]
 800d372:	f361 030a 	bfi	r3, r1, #0, #11
 800d376:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d378:	4a20      	ldr	r2, [pc, #128]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d37a:	6813      	ldr	r3, [r2, #0]
 800d37c:	f36f 23dc 	bfc	r3, #11, #18
 800d380:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d382:	4a1e      	ldr	r2, [pc, #120]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d384:	7913      	ldrb	r3, [r2, #4]
 800d386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d38a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d38c:	4a1b      	ldr	r2, [pc, #108]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d38e:	7913      	ldrb	r3, [r2, #4]
 800d390:	2108      	movs	r1, #8
 800d392:	f361 0303 	bfi	r3, r1, #0, #4
 800d396:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d398:	4a18      	ldr	r2, [pc, #96]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d39a:	7913      	ldrb	r3, [r2, #4]
 800d39c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3a0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d3a2:	4a16      	ldr	r2, [pc, #88]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d3a4:	7913      	ldrb	r3, [r2, #4]
 800d3a6:	f023 0310 	bic.w	r3, r3, #16
 800d3aa:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d3ac:	4b15      	ldr	r3, [pc, #84]	@ (800d404 <VCU_TransmitBmsData1+0x1bc>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f003 0310 	and.w	r3, r3, #16
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00c      	beq.n	800d3d2 <VCU_TransmitBmsData1+0x18a>
 800d3b8:	4b10      	ldr	r3, [pc, #64]	@ (800d3fc <VCU_TransmitBmsData1+0x1b4>)
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4910      	ldr	r1, [pc, #64]	@ (800d408 <VCU_TransmitBmsData1+0x1c0>)
 800d3c6:	4811      	ldr	r0, [pc, #68]	@ (800d40c <VCU_TransmitBmsData1+0x1c4>)
 800d3c8:	f007 fe8c 	bl	80150e4 <siprintf>
 800d3cc:	480f      	ldr	r0, [pc, #60]	@ (800d40c <VCU_TransmitBmsData1+0x1c4>)
 800d3ce:	f7f8 f935 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f7ff fa2a 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	9999999a 	.word	0x9999999a
 800d3e4:	3fa99999 	.word	0x3fa99999
 800d3e8:	eb851eb8 	.word	0xeb851eb8
 800d3ec:	3f8eb851 	.word	0x3f8eb851
 800d3f0:	2000a6ec 	.word	0x2000a6ec
 800d3f4:	40990000 	.word	0x40990000
 800d3f8:	40df4000 	.word	0x40df4000
 800d3fc:	2000a758 	.word	0x2000a758
 800d400:	2000a764 	.word	0x2000a764
 800d404:	2000000c 	.word	0x2000000c
 800d408:	0801a56c 	.word	0x0801a56c
 800d40c:	20000b5c 	.word	0x20000b5c

0800d410 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d41c:	f04f 0300 	mov.w	r3, #0
 800d420:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800d422:	4b95      	ldr	r3, [pc, #596]	@ (800d678 <VCU_TransmitBmsData2+0x268>)
 800d424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f3 f863 	bl	80004f4 <__aeabi_i2d>
 800d42e:	f04f 0200 	mov.w	r2, #0
 800d432:	4b92      	ldr	r3, [pc, #584]	@ (800d67c <VCU_TransmitBmsData2+0x26c>)
 800d434:	f7f3 f8c8 	bl	80005c8 <__aeabi_dmul>
 800d438:	4602      	mov	r2, r0
 800d43a:	460b      	mov	r3, r1
 800d43c:	4610      	mov	r0, r2
 800d43e:	4619      	mov	r1, r3
 800d440:	f04f 0200 	mov.w	r2, #0
 800d444:	f04f 0300 	mov.w	r3, #0
 800d448:	f7f2 ff08 	bl	800025c <__adddf3>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4610      	mov	r0, r2
 800d452:	4619      	mov	r1, r3
 800d454:	f7f3 fbb0 	bl	8000bb8 <__aeabi_d2f>
 800d458:	4603      	mov	r3, r0
 800d45a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f7f3 f85b 	bl	8000518 <__aeabi_f2d>
 800d462:	a381      	add	r3, pc, #516	@ (adr r3, 800d668 <VCU_TransmitBmsData2+0x258>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	f7f3 f9d8 	bl	800081c <__aeabi_ddiv>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4610      	mov	r0, r2
 800d472:	4619      	mov	r1, r3
 800d474:	f7f3 fba0 	bl	8000bb8 <__aeabi_d2f>
 800d478:	4603      	mov	r3, r0
 800d47a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800d47c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d484:	ee17 3a90 	vmov	r3, s15
 800d488:	b29b      	uxth	r3, r3
 800d48a:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800d48c:	4b7a      	ldr	r3, [pc, #488]	@ (800d678 <VCU_TransmitBmsData2+0x268>)
 800d48e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800d490:	4618      	mov	r0, r3
 800d492:	f7f3 f82f 	bl	80004f4 <__aeabi_i2d>
 800d496:	a376      	add	r3, pc, #472	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	f7f3 f894 	bl	80005c8 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	f04f 0200 	mov.w	r2, #0
 800d4ac:	f04f 0300 	mov.w	r3, #0
 800d4b0:	f7f2 fed4 	bl	800025c <__adddf3>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f7f3 fb7c 	bl	8000bb8 <__aeabi_d2f>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7f3 f827 	bl	8000518 <__aeabi_f2d>
 800d4ca:	a369      	add	r3, pc, #420	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	f7f3 f9a4 	bl	800081c <__aeabi_ddiv>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f7f3 fb6c 	bl	8000bb8 <__aeabi_d2f>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800d4e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ec:	ee17 3a90 	vmov	r3, s15
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800d4f4:	4b60      	ldr	r3, [pc, #384]	@ (800d678 <VCU_TransmitBmsData2+0x268>)
 800d4f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f2 fffb 	bl	80004f4 <__aeabi_i2d>
 800d4fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f3 f860 	bl	80005c8 <__aeabi_dmul>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4610      	mov	r0, r2
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	f7f2 fea0 	bl	800025c <__adddf3>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4610      	mov	r0, r2
 800d522:	4619      	mov	r1, r3
 800d524:	f7f3 fb48 	bl	8000bb8 <__aeabi_d2f>
 800d528:	4603      	mov	r3, r0
 800d52a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7f2 fff3 	bl	8000518 <__aeabi_f2d>
 800d532:	a34f      	add	r3, pc, #316	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	f7f3 f970 	bl	800081c <__aeabi_ddiv>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	4610      	mov	r0, r2
 800d542:	4619      	mov	r1, r3
 800d544:	f7f3 fb38 	bl	8000bb8 <__aeabi_d2f>
 800d548:	4603      	mov	r3, r0
 800d54a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800d54c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d554:	ee17 3a90 	vmov	r3, s15
 800d558:	b29b      	uxth	r3, r3
 800d55a:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800d55c:	4b46      	ldr	r3, [pc, #280]	@ (800d678 <VCU_TransmitBmsData2+0x268>)
 800d55e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d560:	4618      	mov	r0, r3
 800d562:	f7f2 ffc7 	bl	80004f4 <__aeabi_i2d>
 800d566:	a342      	add	r3, pc, #264	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	f7f3 f82c 	bl	80005c8 <__aeabi_dmul>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4610      	mov	r0, r2
 800d576:	4619      	mov	r1, r3
 800d578:	f04f 0200 	mov.w	r2, #0
 800d57c:	f04f 0300 	mov.w	r3, #0
 800d580:	f7f2 fe6c 	bl	800025c <__adddf3>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4610      	mov	r0, r2
 800d58a:	4619      	mov	r1, r3
 800d58c:	f7f3 fb14 	bl	8000bb8 <__aeabi_d2f>
 800d590:	4603      	mov	r3, r0
 800d592:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f7f2 ffbf 	bl	8000518 <__aeabi_f2d>
 800d59a:	a335      	add	r3, pc, #212	@ (adr r3, 800d670 <VCU_TransmitBmsData2+0x260>)
 800d59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a0:	f7f3 f93c 	bl	800081c <__aeabi_ddiv>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	f7f3 fb04 	bl	8000bb8 <__aeabi_d2f>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800d5b4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5bc:	ee17 3a90 	vmov	r3, s15
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d5c4:	4b2e      	ldr	r3, [pc, #184]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d5ca:	4b2d      	ldr	r3, [pc, #180]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d5d0:	4b2b      	ldr	r3, [pc, #172]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800d5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800d684 <VCU_TransmitBmsData2+0x274>)
 800d5d8:	461a      	mov	r2, r3
 800d5da:	463b      	mov	r3, r7
 800d5dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5e0:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d5e4:	4b24      	ldr	r3, [pc, #144]	@ (800d678 <VCU_TransmitBmsData2+0x268>)
 800d5e6:	895b      	ldrh	r3, [r3, #10]
 800d5e8:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5f2:	b299      	uxth	r1, r3
 800d5f4:	4a22      	ldr	r2, [pc, #136]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d5f6:	8813      	ldrh	r3, [r2, #0]
 800d5f8:	f361 030a 	bfi	r3, r1, #0, #11
 800d5fc:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d5fe:	4a20      	ldr	r2, [pc, #128]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d600:	6813      	ldr	r3, [r2, #0]
 800d602:	f36f 23dc 	bfc	r3, #11, #18
 800d606:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d608:	4a1d      	ldr	r2, [pc, #116]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d60a:	7913      	ldrb	r3, [r2, #4]
 800d60c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d610:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d612:	4a1b      	ldr	r2, [pc, #108]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d614:	7913      	ldrb	r3, [r2, #4]
 800d616:	2108      	movs	r1, #8
 800d618:	f361 0303 	bfi	r3, r1, #0, #4
 800d61c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d61e:	4a18      	ldr	r2, [pc, #96]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d620:	7913      	ldrb	r3, [r2, #4]
 800d622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d626:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d628:	4a15      	ldr	r2, [pc, #84]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d62a:	7913      	ldrb	r3, [r2, #4]
 800d62c:	f023 0310 	bic.w	r3, r3, #16
 800d630:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d632:	4b15      	ldr	r3, [pc, #84]	@ (800d688 <VCU_TransmitBmsData2+0x278>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	f003 0310 	and.w	r3, r3, #16
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00c      	beq.n	800d658 <VCU_TransmitBmsData2+0x248>
 800d63e:	4b10      	ldr	r3, [pc, #64]	@ (800d680 <VCU_TransmitBmsData2+0x270>)
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d646:	b29b      	uxth	r3, r3
 800d648:	461a      	mov	r2, r3
 800d64a:	4910      	ldr	r1, [pc, #64]	@ (800d68c <VCU_TransmitBmsData2+0x27c>)
 800d64c:	4810      	ldr	r0, [pc, #64]	@ (800d690 <VCU_TransmitBmsData2+0x280>)
 800d64e:	f007 fd49 	bl	80150e4 <siprintf>
 800d652:	480f      	ldr	r0, [pc, #60]	@ (800d690 <VCU_TransmitBmsData2+0x280>)
 800d654:	f7f7 fff2 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d658:	2000      	movs	r0, #0
 800d65a:	f7ff f8e7 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	9999999a 	.word	0x9999999a
 800d66c:	3f599999 	.word	0x3f599999
 800d670:	d2f1a9fc 	.word	0xd2f1a9fc
 800d674:	3f50624d 	.word	0x3f50624d
 800d678:	2000a6ec 	.word	0x2000a6ec
 800d67c:	3fe00000 	.word	0x3fe00000
 800d680:	2000a758 	.word	0x2000a758
 800d684:	2000a764 	.word	0x2000a764
 800d688:	2000000c 	.word	0x2000000c
 800d68c:	0801a588 	.word	0x0801a588
 800d690:	20000b5c 	.word	0x20000b5c
 800d694:	00000000 	.word	0x00000000

0800d698 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800d69e:	f04f 0300 	mov.w	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d6a4:	f04f 0300 	mov.w	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800d6aa:	4b89      	ldr	r3, [pc, #548]	@ (800d8d0 <VCU_TransmitBmsData3+0x238>)
 800d6ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f2 ff20 	bl	80004f4 <__aeabi_i2d>
 800d6b4:	a380      	add	r3, pc, #512	@ (adr r3, 800d8b8 <VCU_TransmitBmsData3+0x220>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f7f2 ff85 	bl	80005c8 <__aeabi_dmul>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4610      	mov	r0, r2
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	a37e      	add	r3, pc, #504	@ (adr r3, 800d8c0 <VCU_TransmitBmsData3+0x228>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f7f2 fdc4 	bl	8000258 <__aeabi_dsub>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f7f3 fa6e 	bl	8000bb8 <__aeabi_d2f>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7f2 ff19 	bl	8000518 <__aeabi_f2d>
 800d6e6:	f04f 0200 	mov.w	r2, #0
 800d6ea:	4b7a      	ldr	r3, [pc, #488]	@ (800d8d4 <VCU_TransmitBmsData3+0x23c>)
 800d6ec:	f7f3 f896 	bl	800081c <__aeabi_ddiv>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	a373      	add	r3, pc, #460	@ (adr r3, 800d8c8 <VCU_TransmitBmsData3+0x230>)
 800d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fe:	f7f2 fdad 	bl	800025c <__adddf3>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	4610      	mov	r0, r2
 800d708:	4619      	mov	r1, r3
 800d70a:	f7f3 fa55 	bl	8000bb8 <__aeabi_d2f>
 800d70e:	4603      	mov	r3, r0
 800d710:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800d712:	edd7 7a02 	vldr	s15, [r7, #8]
 800d716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d71a:	ee17 3a90 	vmov	r3, s15
 800d71e:	b29b      	uxth	r3, r3
 800d720:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800d722:	4b6b      	ldr	r3, [pc, #428]	@ (800d8d0 <VCU_TransmitBmsData3+0x238>)
 800d724:	8bdb      	ldrh	r3, [r3, #30]
 800d726:	4618      	mov	r0, r3
 800d728:	f7f2 fee4 	bl	80004f4 <__aeabi_i2d>
 800d72c:	a362      	add	r3, pc, #392	@ (adr r3, 800d8b8 <VCU_TransmitBmsData3+0x220>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 ff49 	bl	80005c8 <__aeabi_dmul>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4610      	mov	r0, r2
 800d73c:	4619      	mov	r1, r3
 800d73e:	a360      	add	r3, pc, #384	@ (adr r3, 800d8c0 <VCU_TransmitBmsData3+0x228>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	f7f2 fd88 	bl	8000258 <__aeabi_dsub>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4610      	mov	r0, r2
 800d74e:	4619      	mov	r1, r3
 800d750:	f7f3 fa32 	bl	8000bb8 <__aeabi_d2f>
 800d754:	4603      	mov	r3, r0
 800d756:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7f2 fedd 	bl	8000518 <__aeabi_f2d>
 800d75e:	f04f 0200 	mov.w	r2, #0
 800d762:	4b5c      	ldr	r3, [pc, #368]	@ (800d8d4 <VCU_TransmitBmsData3+0x23c>)
 800d764:	f7f3 f85a 	bl	800081c <__aeabi_ddiv>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	4610      	mov	r0, r2
 800d76e:	4619      	mov	r1, r3
 800d770:	a355      	add	r3, pc, #340	@ (adr r3, 800d8c8 <VCU_TransmitBmsData3+0x230>)
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	f7f2 fd71 	bl	800025c <__adddf3>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4610      	mov	r0, r2
 800d780:	4619      	mov	r1, r3
 800d782:	f7f3 fa19 	bl	8000bb8 <__aeabi_d2f>
 800d786:	4603      	mov	r3, r0
 800d788:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800d78a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d792:	ee17 3a90 	vmov	r3, s15
 800d796:	b29b      	uxth	r3, r3
 800d798:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800d79a:	4b4d      	ldr	r3, [pc, #308]	@ (800d8d0 <VCU_TransmitBmsData3+0x238>)
 800d79c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f2 fea8 	bl	80004f4 <__aeabi_i2d>
 800d7a4:	a344      	add	r3, pc, #272	@ (adr r3, 800d8b8 <VCU_TransmitBmsData3+0x220>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 ff0d 	bl	80005c8 <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	a342      	add	r3, pc, #264	@ (adr r3, 800d8c0 <VCU_TransmitBmsData3+0x228>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 fd4c 	bl	8000258 <__aeabi_dsub>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	f7f3 f9f6 	bl	8000bb8 <__aeabi_d2f>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f7f2 fea1 	bl	8000518 <__aeabi_f2d>
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	4b3e      	ldr	r3, [pc, #248]	@ (800d8d4 <VCU_TransmitBmsData3+0x23c>)
 800d7dc:	f7f3 f81e 	bl	800081c <__aeabi_ddiv>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	a337      	add	r3, pc, #220	@ (adr r3, 800d8c8 <VCU_TransmitBmsData3+0x230>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 fd35 	bl	800025c <__adddf3>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f7f3 f9dd 	bl	8000bb8 <__aeabi_d2f>
 800d7fe:	4603      	mov	r3, r0
 800d800:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800d802:	edd7 7a02 	vldr	s15, [r7, #8]
 800d806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d80a:	ee17 3a90 	vmov	r3, s15
 800d80e:	b29b      	uxth	r3, r3
 800d810:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d816:	4b30      	ldr	r3, [pc, #192]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d81c:	4b2e      	ldr	r3, [pc, #184]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d81e:	2200      	movs	r2, #0
 800d820:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d822:	4b2d      	ldr	r3, [pc, #180]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d824:	2200      	movs	r2, #0
 800d826:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800d828:	4b2c      	ldr	r3, [pc, #176]	@ (800d8dc <VCU_TransmitBmsData3+0x244>)
 800d82a:	461a      	mov	r2, r3
 800d82c:	463b      	mov	r3, r7
 800d82e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d832:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d836:	4b26      	ldr	r3, [pc, #152]	@ (800d8d0 <VCU_TransmitBmsData3+0x238>)
 800d838:	895b      	ldrh	r3, [r3, #10]
 800d83a:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 800d83e:	b29b      	uxth	r3, r3
 800d840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d844:	b299      	uxth	r1, r3
 800d846:	4a24      	ldr	r2, [pc, #144]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d848:	8813      	ldrh	r3, [r2, #0]
 800d84a:	f361 030a 	bfi	r3, r1, #0, #11
 800d84e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800d850:	4a21      	ldr	r2, [pc, #132]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	f36f 23dc 	bfc	r3, #11, #18
 800d858:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d85a:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d85c:	7913      	ldrb	r3, [r2, #4]
 800d85e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d862:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d864:	4a1c      	ldr	r2, [pc, #112]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d866:	7913      	ldrb	r3, [r2, #4]
 800d868:	2108      	movs	r1, #8
 800d86a:	f361 0303 	bfi	r3, r1, #0, #4
 800d86e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d870:	4a19      	ldr	r2, [pc, #100]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d872:	7913      	ldrb	r3, [r2, #4]
 800d874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d878:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d87a:	4a17      	ldr	r2, [pc, #92]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d87c:	7913      	ldrb	r3, [r2, #4]
 800d87e:	f023 0310 	bic.w	r3, r3, #16
 800d882:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d884:	4b16      	ldr	r3, [pc, #88]	@ (800d8e0 <VCU_TransmitBmsData3+0x248>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00c      	beq.n	800d8aa <VCU_TransmitBmsData3+0x212>
 800d890:	4b11      	ldr	r3, [pc, #68]	@ (800d8d8 <VCU_TransmitBmsData3+0x240>)
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d898:	b29b      	uxth	r3, r3
 800d89a:	461a      	mov	r2, r3
 800d89c:	4911      	ldr	r1, [pc, #68]	@ (800d8e4 <VCU_TransmitBmsData3+0x24c>)
 800d89e:	4812      	ldr	r0, [pc, #72]	@ (800d8e8 <VCU_TransmitBmsData3+0x250>)
 800d8a0:	f007 fc20 	bl	80150e4 <siprintf>
 800d8a4:	4810      	ldr	r0, [pc, #64]	@ (800d8e8 <VCU_TransmitBmsData3+0x250>)
 800d8a6:	f7f7 fec9 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	f7fe ffbe 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	47ae147b 	.word	0x47ae147b
 800d8bc:	3f847ae1 	.word	0x3f847ae1
 800d8c0:	cccccccd 	.word	0xcccccccd
 800d8c4:	404baccc 	.word	0x404baccc
 800d8c8:	00000000 	.word	0x00000000
 800d8cc:	40c11000 	.word	0x40c11000
 800d8d0:	2000a6ec 	.word	0x2000a6ec
 800d8d4:	3fa00000 	.word	0x3fa00000
 800d8d8:	2000a758 	.word	0x2000a758
 800d8dc:	2000a764 	.word	0x2000a764
 800d8e0:	2000000c 	.word	0x2000000c
 800d8e4:	0801a5a4 	.word	0x0801a5a4
 800d8e8:	20000b5c 	.word	0x20000b5c
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800d8f6:	f04f 0300 	mov.w	r3, #0
 800d8fa:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d8fc:	f04f 0300 	mov.w	r3, #0
 800d900:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800d902:	4b83      	ldr	r3, [pc, #524]	@ (800db10 <VCU_TransmitBmsData5+0x220>)
 800d904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d906:	4618      	mov	r0, r3
 800d908:	f7f2 fde4 	bl	80004d4 <__aeabi_ui2d>
 800d90c:	a37c      	add	r3, pc, #496	@ (adr r3, 800db00 <VCU_TransmitBmsData5+0x210>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fe59 	bl	80005c8 <__aeabi_dmul>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4610      	mov	r0, r2
 800d91c:	4619      	mov	r1, r3
 800d91e:	f04f 0200 	mov.w	r2, #0
 800d922:	4b7c      	ldr	r3, [pc, #496]	@ (800db14 <VCU_TransmitBmsData5+0x224>)
 800d924:	f7f2 fc98 	bl	8000258 <__aeabi_dsub>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4610      	mov	r0, r2
 800d92e:	4619      	mov	r1, r3
 800d930:	f7f3 f942 	bl	8000bb8 <__aeabi_d2f>
 800d934:	4603      	mov	r3, r0
 800d936:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7f2 fded 	bl	8000518 <__aeabi_f2d>
 800d93e:	a370      	add	r3, pc, #448	@ (adr r3, 800db00 <VCU_TransmitBmsData5+0x210>)
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	f7f2 ff6a 	bl	800081c <__aeabi_ddiv>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4610      	mov	r0, r2
 800d94e:	4619      	mov	r1, r3
 800d950:	f04f 0200 	mov.w	r2, #0
 800d954:	4b70      	ldr	r3, [pc, #448]	@ (800db18 <VCU_TransmitBmsData5+0x228>)
 800d956:	f7f2 fc81 	bl	800025c <__adddf3>
 800d95a:	4602      	mov	r2, r0
 800d95c:	460b      	mov	r3, r1
 800d95e:	4610      	mov	r0, r2
 800d960:	4619      	mov	r1, r3
 800d962:	f7f3 f929 	bl	8000bb8 <__aeabi_d2f>
 800d966:	4603      	mov	r3, r0
 800d968:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800d96a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d96e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d972:	ee17 3a90 	vmov	r3, s15
 800d976:	b29b      	uxth	r3, r3
 800d978:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800d97a:	4b65      	ldr	r3, [pc, #404]	@ (800db10 <VCU_TransmitBmsData5+0x220>)
 800d97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f2 fda8 	bl	80004d4 <__aeabi_ui2d>
 800d984:	a35e      	add	r3, pc, #376	@ (adr r3, 800db00 <VCU_TransmitBmsData5+0x210>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fe1d 	bl	80005c8 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4610      	mov	r0, r2
 800d994:	4619      	mov	r1, r3
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	4b5e      	ldr	r3, [pc, #376]	@ (800db14 <VCU_TransmitBmsData5+0x224>)
 800d99c:	f7f2 fc5c 	bl	8000258 <__aeabi_dsub>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f7f3 f906 	bl	8000bb8 <__aeabi_d2f>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7f2 fdb1 	bl	8000518 <__aeabi_f2d>
 800d9b6:	a352      	add	r3, pc, #328	@ (adr r3, 800db00 <VCU_TransmitBmsData5+0x210>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f7f2 ff2e 	bl	800081c <__aeabi_ddiv>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f04f 0200 	mov.w	r2, #0
 800d9cc:	4b52      	ldr	r3, [pc, #328]	@ (800db18 <VCU_TransmitBmsData5+0x228>)
 800d9ce:	f7f2 fc45 	bl	800025c <__adddf3>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	4619      	mov	r1, r3
 800d9da:	f7f3 f8ed 	bl	8000bb8 <__aeabi_d2f>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800d9e2:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9ea:	ee17 3a90 	vmov	r3, s15
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800d9f2:	4b47      	ldr	r3, [pc, #284]	@ (800db10 <VCU_TransmitBmsData5+0x220>)
 800d9f4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f2 fd7c 	bl	80004f4 <__aeabi_i2d>
 800d9fc:	a342      	add	r3, pc, #264	@ (adr r3, 800db08 <VCU_TransmitBmsData5+0x218>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f7f2 fde1 	bl	80005c8 <__aeabi_dmul>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4610      	mov	r0, r2
 800da0c:	4619      	mov	r1, r3
 800da0e:	f04f 0200 	mov.w	r2, #0
 800da12:	f04f 0300 	mov.w	r3, #0
 800da16:	f7f2 fc21 	bl	800025c <__adddf3>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	4610      	mov	r0, r2
 800da20:	4619      	mov	r1, r3
 800da22:	f7f3 f8c9 	bl	8000bb8 <__aeabi_d2f>
 800da26:	4603      	mov	r3, r0
 800da28:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f7f2 fd74 	bl	8000518 <__aeabi_f2d>
 800da30:	a333      	add	r3, pc, #204	@ (adr r3, 800db00 <VCU_TransmitBmsData5+0x210>)
 800da32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da36:	f7f2 fef1 	bl	800081c <__aeabi_ddiv>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	4610      	mov	r0, r2
 800da40:	4619      	mov	r1, r3
 800da42:	f7f3 f8b9 	bl	8000bb8 <__aeabi_d2f>
 800da46:	4603      	mov	r3, r0
 800da48:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800da4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800da4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da52:	ee17 3a90 	vmov	r3, s15
 800da56:	b29b      	uxth	r3, r3
 800da58:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800da5e:	4b2f      	ldr	r3, [pc, #188]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800da60:	2200      	movs	r2, #0
 800da62:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800da64:	4b2d      	ldr	r3, [pc, #180]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800da66:	2200      	movs	r2, #0
 800da68:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800da6a:	4b2c      	ldr	r3, [pc, #176]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800da70:	4b2b      	ldr	r3, [pc, #172]	@ (800db20 <VCU_TransmitBmsData5+0x230>)
 800da72:	461a      	mov	r2, r3
 800da74:	463b      	mov	r3, r7
 800da76:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da7a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800da7e:	4b24      	ldr	r3, [pc, #144]	@ (800db10 <VCU_TransmitBmsData5+0x220>)
 800da80:	895b      	ldrh	r3, [r3, #10]
 800da82:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 800da86:	b29b      	uxth	r3, r3
 800da88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da8c:	b299      	uxth	r1, r3
 800da8e:	4a23      	ldr	r2, [pc, #140]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800da90:	8813      	ldrh	r3, [r2, #0]
 800da92:	f361 030a 	bfi	r3, r1, #0, #11
 800da96:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800da98:	4a20      	ldr	r2, [pc, #128]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800da9a:	6813      	ldr	r3, [r2, #0]
 800da9c:	f36f 23dc 	bfc	r3, #11, #18
 800daa0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800daa2:	4a1e      	ldr	r2, [pc, #120]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800daa4:	7913      	ldrb	r3, [r2, #4]
 800daa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800daaa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800daac:	4a1b      	ldr	r2, [pc, #108]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800daae:	7913      	ldrb	r3, [r2, #4]
 800dab0:	2108      	movs	r1, #8
 800dab2:	f361 0303 	bfi	r3, r1, #0, #4
 800dab6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dab8:	4a18      	ldr	r2, [pc, #96]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800daba:	7913      	ldrb	r3, [r2, #4]
 800dabc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dac0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dac2:	4a16      	ldr	r2, [pc, #88]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800dac4:	7913      	ldrb	r3, [r2, #4]
 800dac6:	f023 0310 	bic.w	r3, r3, #16
 800daca:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dacc:	4b15      	ldr	r3, [pc, #84]	@ (800db24 <VCU_TransmitBmsData5+0x234>)
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	f003 0310 	and.w	r3, r3, #16
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00c      	beq.n	800daf2 <VCU_TransmitBmsData5+0x202>
 800dad8:	4b10      	ldr	r3, [pc, #64]	@ (800db1c <VCU_TransmitBmsData5+0x22c>)
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	461a      	mov	r2, r3
 800dae4:	4910      	ldr	r1, [pc, #64]	@ (800db28 <VCU_TransmitBmsData5+0x238>)
 800dae6:	4811      	ldr	r0, [pc, #68]	@ (800db2c <VCU_TransmitBmsData5+0x23c>)
 800dae8:	f007 fafc 	bl	80150e4 <siprintf>
 800daec:	480f      	ldr	r0, [pc, #60]	@ (800db2c <VCU_TransmitBmsData5+0x23c>)
 800daee:	f7f7 fda5 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800daf2:	2000      	movs	r0, #0
 800daf4:	f7fe fe9a 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800daf8:	bf00      	nop
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	9999999a 	.word	0x9999999a
 800db04:	3fa99999 	.word	0x3fa99999
 800db08:	eb851eb8 	.word	0xeb851eb8
 800db0c:	3f8eb851 	.word	0x3f8eb851
 800db10:	2000a6ec 	.word	0x2000a6ec
 800db14:	40990000 	.word	0x40990000
 800db18:	40df4000 	.word	0x40df4000
 800db1c:	2000a758 	.word	0x2000a758
 800db20:	2000a764 	.word	0x2000a764
 800db24:	2000000c 	.word	0x2000000c
 800db28:	0801a5c0 	.word	0x0801a5c0
 800db2c:	20000b5c 	.word	0x20000b5c

0800db30 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800db3a:	2300      	movs	r3, #0
 800db3c:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800db3e:	4b2d      	ldr	r3, [pc, #180]	@ (800dbf4 <VCU_TransmitBmsData8+0xc4>)
 800db40:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800db44:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800db46:	2300      	movs	r3, #0
 800db48:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800db4a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbf4 <VCU_TransmitBmsData8+0xc4>)
 800db4c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800db50:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800db52:	4b29      	ldr	r3, [pc, #164]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db54:	2200      	movs	r2, #0
 800db56:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800db58:	4b27      	ldr	r3, [pc, #156]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800db5e:	4b26      	ldr	r3, [pc, #152]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db60:	2200      	movs	r2, #0
 800db62:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800db64:	4b25      	ldr	r3, [pc, #148]	@ (800dbfc <VCU_TransmitBmsData8+0xcc>)
 800db66:	461a      	mov	r2, r3
 800db68:	463b      	mov	r3, r7
 800db6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800db6e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800db72:	4b20      	ldr	r3, [pc, #128]	@ (800dbf4 <VCU_TransmitBmsData8+0xc4>)
 800db74:	895b      	ldrh	r3, [r3, #10]
 800db76:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db80:	b299      	uxth	r1, r3
 800db82:	4a1d      	ldr	r2, [pc, #116]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db84:	8813      	ldrh	r3, [r2, #0]
 800db86:	f361 030a 	bfi	r3, r1, #0, #11
 800db8a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800db8c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db8e:	6813      	ldr	r3, [r2, #0]
 800db90:	f36f 23dc 	bfc	r3, #11, #18
 800db94:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800db96:	4a18      	ldr	r2, [pc, #96]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800db98:	7913      	ldrb	r3, [r2, #4]
 800db9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db9e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dba0:	4a15      	ldr	r2, [pc, #84]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800dba2:	7913      	ldrb	r3, [r2, #4]
 800dba4:	2108      	movs	r1, #8
 800dba6:	f361 0303 	bfi	r3, r1, #0, #4
 800dbaa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dbac:	4a12      	ldr	r2, [pc, #72]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800dbae:	7913      	ldrb	r3, [r2, #4]
 800dbb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dbb4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dbb6:	4a10      	ldr	r2, [pc, #64]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800dbb8:	7913      	ldrb	r3, [r2, #4]
 800dbba:	f023 0310 	bic.w	r3, r3, #16
 800dbbe:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	@ (800dc00 <VCU_TransmitBmsData8+0xd0>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00c      	beq.n	800dbe6 <VCU_TransmitBmsData8+0xb6>
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf8 <VCU_TransmitBmsData8+0xc8>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	490a      	ldr	r1, [pc, #40]	@ (800dc04 <VCU_TransmitBmsData8+0xd4>)
 800dbda:	480b      	ldr	r0, [pc, #44]	@ (800dc08 <VCU_TransmitBmsData8+0xd8>)
 800dbdc:	f007 fa82 	bl	80150e4 <siprintf>
 800dbe0:	4809      	ldr	r0, [pc, #36]	@ (800dc08 <VCU_TransmitBmsData8+0xd8>)
 800dbe2:	f7f7 fd2b 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f7fe fe20 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	2000a6ec 	.word	0x2000a6ec
 800dbf8:	2000a758 	.word	0x2000a758
 800dbfc:	2000a764 	.word	0x2000a764
 800dc00:	2000000c 	.word	0x2000000c
 800dc04:	0801a5dc 	.word	0x0801a5dc
 800dc08:	20000b5c 	.word	0x20000b5c

0800dc0c <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800dc16:	2300      	movs	r3, #0
 800dc18:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800dc1a:	4b2d      	ldr	r3, [pc, #180]	@ (800dcd0 <VCU_TransmitBmsData9+0xc4>)
 800dc1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc20:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800dc22:	2300      	movs	r3, #0
 800dc24:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800dc26:	4b2a      	ldr	r3, [pc, #168]	@ (800dcd0 <VCU_TransmitBmsData9+0xc4>)
 800dc28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc2c:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dc2e:	4b29      	ldr	r3, [pc, #164]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dc34:	4b27      	ldr	r3, [pc, #156]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dc3a:	4b26      	ldr	r3, [pc, #152]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800dc40:	4b25      	ldr	r3, [pc, #148]	@ (800dcd8 <VCU_TransmitBmsData9+0xcc>)
 800dc42:	461a      	mov	r2, r3
 800dc44:	463b      	mov	r3, r7
 800dc46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc4a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dc4e:	4b20      	ldr	r3, [pc, #128]	@ (800dcd0 <VCU_TransmitBmsData9+0xc4>)
 800dc50:	895b      	ldrh	r3, [r3, #10]
 800dc52:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc5c:	b299      	uxth	r1, r3
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc60:	8813      	ldrh	r3, [r2, #0]
 800dc62:	f361 030a 	bfi	r3, r1, #0, #11
 800dc66:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dc68:	4a1a      	ldr	r2, [pc, #104]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc6a:	6813      	ldr	r3, [r2, #0]
 800dc6c:	f36f 23dc 	bfc	r3, #11, #18
 800dc70:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dc72:	4a18      	ldr	r2, [pc, #96]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc74:	7913      	ldrb	r3, [r2, #4]
 800dc76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc7a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dc7c:	4a15      	ldr	r2, [pc, #84]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc7e:	7913      	ldrb	r3, [r2, #4]
 800dc80:	2108      	movs	r1, #8
 800dc82:	f361 0303 	bfi	r3, r1, #0, #4
 800dc86:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dc88:	4a12      	ldr	r2, [pc, #72]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc8a:	7913      	ldrb	r3, [r2, #4]
 800dc8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc90:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dc92:	4a10      	ldr	r2, [pc, #64]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dc94:	7913      	ldrb	r3, [r2, #4]
 800dc96:	f023 0310 	bic.w	r3, r3, #16
 800dc9a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dcdc <VCU_TransmitBmsData9+0xd0>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	f003 0310 	and.w	r3, r3, #16
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00c      	beq.n	800dcc2 <VCU_TransmitBmsData9+0xb6>
 800dca8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd4 <VCU_TransmitBmsData9+0xc8>)
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	490a      	ldr	r1, [pc, #40]	@ (800dce0 <VCU_TransmitBmsData9+0xd4>)
 800dcb6:	480b      	ldr	r0, [pc, #44]	@ (800dce4 <VCU_TransmitBmsData9+0xd8>)
 800dcb8:	f007 fa14 	bl	80150e4 <siprintf>
 800dcbc:	4809      	ldr	r0, [pc, #36]	@ (800dce4 <VCU_TransmitBmsData9+0xd8>)
 800dcbe:	f7f7 fcbd 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	f7fe fdb2 	bl	800c82c <VCU_TransmitMessageQueue>

}
 800dcc8:	bf00      	nop
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	2000a6ec 	.word	0x2000a6ec
 800dcd4:	2000a758 	.word	0x2000a758
 800dcd8:	2000a764 	.word	0x2000a764
 800dcdc:	2000000c 	.word	0x2000000c
 800dce0:	0801a5f8 	.word	0x0801a5f8
 800dce4:	20000b5c 	.word	0x20000b5c

0800dce8 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dcfa:	4b28      	ldr	r3, [pc, #160]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dd00:	4b26      	ldr	r3, [pc, #152]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dd06:	4b25      	ldr	r3, [pc, #148]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800dd0c:	4b24      	ldr	r3, [pc, #144]	@ (800dda0 <VCU_TransmitBmsData10+0xb8>)
 800dd0e:	461a      	mov	r2, r3
 800dd10:	463b      	mov	r3, r7
 800dd12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd16:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dd1a:	4b22      	ldr	r3, [pc, #136]	@ (800dda4 <VCU_TransmitBmsData10+0xbc>)
 800dd1c:	895b      	ldrh	r3, [r3, #10]
 800dd1e:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd28:	b299      	uxth	r1, r3
 800dd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd2c:	8813      	ldrh	r3, [r2, #0]
 800dd2e:	f361 030a 	bfi	r3, r1, #0, #11
 800dd32:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dd34:	4a19      	ldr	r2, [pc, #100]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	f36f 23dc 	bfc	r3, #11, #18
 800dd3c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dd3e:	4a17      	ldr	r2, [pc, #92]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd40:	7913      	ldrb	r3, [r2, #4]
 800dd42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd46:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dd48:	4a14      	ldr	r2, [pc, #80]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd4a:	7913      	ldrb	r3, [r2, #4]
 800dd4c:	2108      	movs	r1, #8
 800dd4e:	f361 0303 	bfi	r3, r1, #0, #4
 800dd52:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dd54:	4a11      	ldr	r2, [pc, #68]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd56:	7913      	ldrb	r3, [r2, #4]
 800dd58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd5c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dd5e:	4a0f      	ldr	r2, [pc, #60]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd60:	7913      	ldrb	r3, [r2, #4]
 800dd62:	f023 0310 	bic.w	r3, r3, #16
 800dd66:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dd68:	4b0f      	ldr	r3, [pc, #60]	@ (800dda8 <VCU_TransmitBmsData10+0xc0>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00c      	beq.n	800dd8e <VCU_TransmitBmsData10+0xa6>
 800dd74:	4b09      	ldr	r3, [pc, #36]	@ (800dd9c <VCU_TransmitBmsData10+0xb4>)
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	461a      	mov	r2, r3
 800dd80:	490a      	ldr	r1, [pc, #40]	@ (800ddac <VCU_TransmitBmsData10+0xc4>)
 800dd82:	480b      	ldr	r0, [pc, #44]	@ (800ddb0 <VCU_TransmitBmsData10+0xc8>)
 800dd84:	f007 f9ae 	bl	80150e4 <siprintf>
 800dd88:	4809      	ldr	r0, [pc, #36]	@ (800ddb0 <VCU_TransmitBmsData10+0xc8>)
 800dd8a:	f7f7 fc57 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f7fe fd4c 	bl	800c82c <VCU_TransmitMessageQueue>

}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	2000a758 	.word	0x2000a758
 800dda0:	2000a764 	.word	0x2000a764
 800dda4:	2000a6ec 	.word	0x2000a6ec
 800dda8:	2000000c 	.word	0x2000000c
 800ddac:	0801a614 	.word	0x0801a614
 800ddb0:	20000b5c 	.word	0x20000b5c

0800ddb4 <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800ddba:	4b8f      	ldr	r3, [pc, #572]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800ddbc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fd fd21 	bl	800b808 <MCU_ModuleIndexFromId>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800ddca:	4b8b      	ldr	r3, [pc, #556]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800ddcc:	7d1b      	ldrb	r3, [r3, #20]
 800ddce:	7bfa      	ldrb	r2, [r7, #15]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d112      	bne.n	800ddfa <VCU_TransmitModuleState+0x46>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800ddd4:	4b89      	ldr	r3, [pc, #548]	@ (800dffc <VCU_TransmitModuleState+0x248>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f003 0311 	and.w	r3, r3, #17
 800dddc:	2b11      	cmp	r3, #17
 800ddde:	f040 8107 	bne.w	800dff0 <VCU_TransmitModuleState+0x23c>
 800dde2:	4b85      	ldr	r3, [pc, #532]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800dde4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dde8:	461a      	mov	r2, r3
 800ddea:	4985      	ldr	r1, [pc, #532]	@ (800e000 <VCU_TransmitModuleState+0x24c>)
 800ddec:	4885      	ldr	r0, [pc, #532]	@ (800e004 <VCU_TransmitModuleState+0x250>)
 800ddee:	f007 f979 	bl	80150e4 <siprintf>
 800ddf2:	4884      	ldr	r0, [pc, #528]	@ (800e004 <VCU_TransmitModuleState+0x250>)
 800ddf4:	f7f7 fc22 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800ddf8:	e0fa      	b.n	800dff0 <VCU_TransmitModuleState+0x23c>
    moduleState.module_id                   = pack.dmcModuleId;
 800ddfa:	4b7f      	ldr	r3, [pc, #508]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800ddfc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800de00:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	4a80      	ldr	r2, [pc, #512]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de06:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de0a:	fb01 f303 	mul.w	r3, r1, r3
 800de0e:	4413      	add	r3, r2
 800de10:	332b      	adds	r3, #43	@ 0x2b
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	4a7b      	ldr	r2, [pc, #492]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de1a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de1e:	fb01 f303 	mul.w	r3, r1, r3
 800de22:	4413      	add	r3, r2
 800de24:	3327      	adds	r3, #39	@ 0x27
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 0303 	and.w	r3, r3, #3
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	797b      	ldrb	r3, [r7, #5]
 800de30:	f362 0301 	bfi	r3, r2, #0, #2
 800de34:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
 800de38:	4a73      	ldr	r2, [pc, #460]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de3a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de3e:	fb01 f303 	mul.w	r3, r1, r3
 800de42:	4413      	add	r3, r2
 800de44:	3326      	adds	r3, #38	@ 0x26
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	f003 0303 	and.w	r3, r3, #3
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	79bb      	ldrb	r3, [r7, #6]
 800de50:	f362 0383 	bfi	r3, r2, #2, #2
 800de54:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800de56:	7bfb      	ldrb	r3, [r7, #15]
 800de58:	4a6b      	ldr	r2, [pc, #428]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de5e:	fb01 f303 	mul.w	r3, r1, r3
 800de62:	4413      	add	r3, r2
 800de64:	332c      	adds	r3, #44	@ 0x2c
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f362 2391 	bfi	r3, r2, #10, #8
 800de6e:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	4a65      	ldr	r2, [pc, #404]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de74:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de78:	fb01 f303 	mul.w	r3, r1, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800de82:	789b      	ldrb	r3, [r3, #2]
 800de84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	b25a      	sxtb	r2, r3
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	495e      	ldr	r1, [pc, #376]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800de90:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800de94:	fb00 f303 	mul.w	r3, r0, r3
 800de98:	440b      	add	r3, r1
 800de9a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800de9e:	789b      	ldrb	r3, [r3, #2]
 800dea0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	b25b      	sxtb	r3, r3
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	4313      	orrs	r3, r2
 800deae:	b25a      	sxtb	r2, r3
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4955      	ldr	r1, [pc, #340]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800deb4:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800deb8:	fb00 f303 	mul.w	r3, r0, r3
 800debc:	440b      	add	r3, r1
 800debe:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800dec2:	789b      	ldrb	r3, [r3, #2]
 800dec4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	b25b      	sxtb	r3, r3
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	b25b      	sxtb	r3, r3
 800ded0:	4313      	orrs	r3, r2
 800ded2:	b25a      	sxtb	r2, r3
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
 800ded6:	494c      	ldr	r1, [pc, #304]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800ded8:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800dedc:	fb00 f303 	mul.w	r3, r0, r3
 800dee0:	440b      	add	r3, r1
 800dee2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800dee6:	789b      	ldrb	r3, [r3, #2]
 800dee8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800deec:	b2db      	uxtb	r3, r3
 800deee:	b25b      	sxtb	r3, r3
 800def0:	00db      	lsls	r3, r3, #3
 800def2:	b25b      	sxtb	r3, r3
 800def4:	4313      	orrs	r3, r2
 800def6:	b25a      	sxtb	r2, r3
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	4943      	ldr	r1, [pc, #268]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800defc:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800df00:	fb00 f303 	mul.w	r3, r0, r3
 800df04:	440b      	add	r3, r1
 800df06:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800df0a:	789b      	ldrb	r3, [r3, #2]
 800df0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	b25b      	sxtb	r3, r3
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	b25b      	sxtb	r3, r3
 800df18:	4313      	orrs	r3, r2
 800df1a:	b25b      	sxtb	r3, r3
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	88fb      	ldrh	r3, [r7, #6]
 800df20:	f362 138d 	bfi	r3, r2, #6, #8
 800df24:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800df26:	79bb      	ldrb	r3, [r7, #6]
 800df28:	f023 0320 	bic.w	r3, r3, #32
 800df2c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800df2e:	79bb      	ldrb	r3, [r7, #6]
 800df30:	f023 0310 	bic.w	r3, r3, #16
 800df34:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800df36:	4b30      	ldr	r3, [pc, #192]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800df38:	7d1b      	ldrb	r3, [r3, #20]
 800df3a:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800df3c:	4b2e      	ldr	r3, [pc, #184]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800df3e:	7ddb      	ldrb	r3, [r3, #23]
 800df40:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	4a30      	ldr	r2, [pc, #192]	@ (800e008 <VCU_TransmitModuleState+0x254>)
 800df46:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800df4a:	fb01 f303 	mul.w	r3, r1, r3
 800df4e:	4413      	add	r3, r2
 800df50:	332d      	adds	r3, #45	@ 0x2d
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	72fb      	strb	r3, [r7, #11]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800df56:	4b2d      	ldr	r3, [pc, #180]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800df5c:	4b2b      	ldr	r3, [pc, #172]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df5e:	2200      	movs	r2, #0
 800df60:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800df62:	4b2a      	ldr	r3, [pc, #168]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df64:	2200      	movs	r2, #0
 800df66:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800df68:	4b29      	ldr	r3, [pc, #164]	@ (800e010 <VCU_TransmitModuleState+0x25c>)
 800df6a:	461a      	mov	r2, r3
 800df6c:	1d3b      	adds	r3, r7, #4
 800df6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df72:	e882 0003 	stmia.w	r2, {r0, r1}
    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800df76:	4b20      	ldr	r3, [pc, #128]	@ (800dff8 <VCU_TransmitModuleState+0x244>)
 800df78:	895b      	ldrh	r3, [r3, #10]
 800df7a:	f203 4311 	addw	r3, r3, #1041	@ 0x411
 800df7e:	b29b      	uxth	r3, r3
 800df80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df84:	b299      	uxth	r1, r3
 800df86:	4a21      	ldr	r2, [pc, #132]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df88:	8813      	ldrh	r3, [r2, #0]
 800df8a:	f361 030a 	bfi	r3, r1, #0, #11
 800df8e:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800df90:	4a1e      	ldr	r2, [pc, #120]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df92:	6813      	ldr	r3, [r2, #0]
 800df94:	f36f 23dc 	bfc	r3, #11, #18
 800df98:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800df9a:	4a1c      	ldr	r2, [pc, #112]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800df9c:	7913      	ldrb	r3, [r2, #4]
 800df9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfa2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dfa4:	4a19      	ldr	r2, [pc, #100]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800dfa6:	7913      	ldrb	r3, [r2, #4]
 800dfa8:	2108      	movs	r1, #8
 800dfaa:	f361 0303 	bfi	r3, r1, #0, #4
 800dfae:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dfb0:	4a16      	ldr	r2, [pc, #88]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800dfb2:	7913      	ldrb	r3, [r2, #4]
 800dfb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfb8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dfba:	4a14      	ldr	r2, [pc, #80]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800dfbc:	7913      	ldrb	r3, [r2, #4]
 800dfbe:	f023 0310 	bic.w	r3, r3, #16
 800dfc2:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dfc4:	4b0d      	ldr	r3, [pc, #52]	@ (800dffc <VCU_TransmitModuleState+0x248>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 0310 	and.w	r3, r3, #16
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00c      	beq.n	800dfea <VCU_TransmitModuleState+0x236>
 800dfd0:	4b0e      	ldr	r3, [pc, #56]	@ (800e00c <VCU_TransmitModuleState+0x258>)
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	490d      	ldr	r1, [pc, #52]	@ (800e014 <VCU_TransmitModuleState+0x260>)
 800dfde:	4809      	ldr	r0, [pc, #36]	@ (800e004 <VCU_TransmitModuleState+0x250>)
 800dfe0:	f007 f880 	bl	80150e4 <siprintf>
 800dfe4:	4807      	ldr	r0, [pc, #28]	@ (800e004 <VCU_TransmitModuleState+0x250>)
 800dfe6:	f7f7 fb29 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dfea:	2000      	movs	r0, #0
 800dfec:	f7fe fc1e 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	2000a6ec 	.word	0x2000a6ec
 800dffc:	2000000c 	.word	0x2000000c
 800e000:	0801a630 	.word	0x0801a630
 800e004:	20000b5c 	.word	0x20000b5c
 800e008:	20000dec 	.word	0x20000dec
 800e00c:	2000a758 	.word	0x2000a758
 800e010:	2000a764 	.word	0x2000a764
 800e014:	0801a66c 	.word	0x0801a66c

0800e018 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e01e:	4b46      	ldr	r3, [pc, #280]	@ (800e138 <VCU_TransmitModulePower+0x120>)
 800e020:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd fbef 	bl	800b808 <MCU_ModuleIndexFromId>
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e02e:	4b42      	ldr	r3, [pc, #264]	@ (800e138 <VCU_TransmitModulePower+0x120>)
 800e030:	7d1b      	ldrb	r3, [r3, #20]
 800e032:	7bfa      	ldrb	r2, [r7, #15]
 800e034:	429a      	cmp	r2, r3
 800e036:	d111      	bne.n	800e05c <VCU_TransmitModulePower+0x44>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800e038:	4b40      	ldr	r3, [pc, #256]	@ (800e13c <VCU_TransmitModulePower+0x124>)
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 0311 	and.w	r3, r3, #17
 800e040:	2b11      	cmp	r3, #17
 800e042:	d175      	bne.n	800e130 <VCU_TransmitModulePower+0x118>
 800e044:	4b3c      	ldr	r3, [pc, #240]	@ (800e138 <VCU_TransmitModulePower+0x120>)
 800e046:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e04a:	461a      	mov	r2, r3
 800e04c:	493c      	ldr	r1, [pc, #240]	@ (800e140 <VCU_TransmitModulePower+0x128>)
 800e04e:	483d      	ldr	r0, [pc, #244]	@ (800e144 <VCU_TransmitModulePower+0x12c>)
 800e050:	f007 f848 	bl	80150e4 <siprintf>
 800e054:	483b      	ldr	r0, [pc, #236]	@ (800e144 <VCU_TransmitModulePower+0x12c>)
 800e056:	f7f7 faf1 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800e05a:	e069      	b.n	800e130 <VCU_TransmitModulePower+0x118>
    modulePower.module_id       = pack.dmcModuleId;
 800e05c:	4b36      	ldr	r3, [pc, #216]	@ (800e138 <VCU_TransmitModulePower+0x120>)
 800e05e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e062:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800e064:	7bfb      	ldrb	r3, [r7, #15]
 800e066:	4a38      	ldr	r2, [pc, #224]	@ (800e148 <VCU_TransmitModulePower+0x130>)
 800e068:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e06c:	fb01 f303 	mul.w	r3, r1, r3
 800e070:	4413      	add	r3, r2
 800e072:	3316      	adds	r3, #22
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	4a33      	ldr	r2, [pc, #204]	@ (800e148 <VCU_TransmitModulePower+0x130>)
 800e07c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e080:	fb01 f303 	mul.w	r3, r1, r3
 800e084:	4413      	add	r3, r2
 800e086:	3314      	adds	r3, #20
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	813b      	strh	r3, [r7, #8]
 800e092:	2300      	movs	r3, #0
 800e094:	72bb      	strb	r3, [r7, #10]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e096:	4b2d      	ldr	r3, [pc, #180]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e09c:	4b2b      	ldr	r3, [pc, #172]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800e0a8:	4b29      	ldr	r3, [pc, #164]	@ (800e150 <VCU_TransmitModulePower+0x138>)
 800e0aa:	461c      	mov	r4, r3
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e0b6:	4b20      	ldr	r3, [pc, #128]	@ (800e138 <VCU_TransmitModulePower+0x120>)
 800e0b8:	895b      	ldrh	r3, [r3, #10]
 800e0ba:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0c4:	b299      	uxth	r1, r3
 800e0c6:	4a21      	ldr	r2, [pc, #132]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0c8:	8813      	ldrh	r3, [r2, #0]
 800e0ca:	f361 030a 	bfi	r3, r1, #0, #11
 800e0ce:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e0d0:	4a1e      	ldr	r2, [pc, #120]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	f36f 23dc 	bfc	r3, #11, #18
 800e0d8:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e0da:	4a1c      	ldr	r2, [pc, #112]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0dc:	7913      	ldrb	r3, [r2, #4]
 800e0de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0e2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e0e4:	4a19      	ldr	r2, [pc, #100]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0e6:	7913      	ldrb	r3, [r2, #4]
 800e0e8:	2108      	movs	r1, #8
 800e0ea:	f361 0303 	bfi	r3, r1, #0, #4
 800e0ee:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e0f0:	4a16      	ldr	r2, [pc, #88]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0f2:	7913      	ldrb	r3, [r2, #4]
 800e0f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0f8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e0fa:	4a14      	ldr	r2, [pc, #80]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e0fc:	7913      	ldrb	r3, [r2, #4]
 800e0fe:	f023 0310 	bic.w	r3, r3, #16
 800e102:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e104:	4b0d      	ldr	r3, [pc, #52]	@ (800e13c <VCU_TransmitModulePower+0x124>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	f003 0310 	and.w	r3, r3, #16
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00c      	beq.n	800e12a <VCU_TransmitModulePower+0x112>
 800e110:	4b0e      	ldr	r3, [pc, #56]	@ (800e14c <VCU_TransmitModulePower+0x134>)
 800e112:	881b      	ldrh	r3, [r3, #0]
 800e114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e118:	b29b      	uxth	r3, r3
 800e11a:	461a      	mov	r2, r3
 800e11c:	490d      	ldr	r1, [pc, #52]	@ (800e154 <VCU_TransmitModulePower+0x13c>)
 800e11e:	4809      	ldr	r0, [pc, #36]	@ (800e144 <VCU_TransmitModulePower+0x12c>)
 800e120:	f006 ffe0 	bl	80150e4 <siprintf>
 800e124:	4807      	ldr	r0, [pc, #28]	@ (800e144 <VCU_TransmitModulePower+0x12c>)
 800e126:	f7f7 fa89 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e12a:	2000      	movs	r0, #0
 800e12c:	f7fe fb7e 	bl	800c82c <VCU_TransmitMessageQueue>
}
 800e130:	bf00      	nop
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	bd90      	pop	{r4, r7, pc}
 800e138:	2000a6ec 	.word	0x2000a6ec
 800e13c:	2000000c 	.word	0x2000000c
 800e140:	0801a688 	.word	0x0801a688
 800e144:	20000b5c 	.word	0x20000b5c
 800e148:	20000dec 	.word	0x20000dec
 800e14c:	2000a758 	.word	0x2000a758
 800e150:	2000a764 	.word	0x2000a764
 800e154:	0801a6c4 	.word	0x0801a6c4

0800e158 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e15e:	4b41      	ldr	r3, [pc, #260]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x10c>)
 800e160:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e164:	4618      	mov	r0, r3
 800e166:	f7fd fb4f 	bl	800b808 <MCU_ModuleIndexFromId>
 800e16a:	4603      	mov	r3, r0
 800e16c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e16e:	4b3d      	ldr	r3, [pc, #244]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x10c>)
 800e170:	7d1b      	ldrb	r3, [r3, #20]
 800e172:	7bfa      	ldrb	r2, [r7, #15]
 800e174:	429a      	cmp	r2, r3
 800e176:	d071      	beq.n	800e25c <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800e178:	4b3a      	ldr	r3, [pc, #232]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x10c>)
 800e17a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e17e:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	4a39      	ldr	r2, [pc, #228]	@ (800e268 <VCU_TransmitModuleCellVoltage+0x110>)
 800e184:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e188:	fb01 f303 	mul.w	r3, r1, r3
 800e18c:	4413      	add	r3, r2
 800e18e:	3322      	adds	r3, #34	@ 0x22
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	4a34      	ldr	r2, [pc, #208]	@ (800e268 <VCU_TransmitModuleCellVoltage+0x110>)
 800e198:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e19c:	fb01 f303 	mul.w	r3, r1, r3
 800e1a0:	4413      	add	r3, r2
 800e1a2:	331e      	adds	r3, #30
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	4a2e      	ldr	r2, [pc, #184]	@ (800e268 <VCU_TransmitModuleCellVoltage+0x110>)
 800e1ae:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e1b2:	fb01 f303 	mul.w	r3, r1, r3
 800e1b6:	4413      	add	r3, r2
 800e1b8:	3320      	adds	r3, #32
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e1c8:	4b28      	ldr	r3, [pc, #160]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e1ce:	4b27      	ldr	r3, [pc, #156]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800e1d4:	4b26      	ldr	r3, [pc, #152]	@ (800e270 <VCU_TransmitModuleCellVoltage+0x118>)
 800e1d6:	461c      	mov	r4, r3
 800e1d8:	463b      	mov	r3, r7
 800e1da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e1e2:	4b20      	ldr	r3, [pc, #128]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x10c>)
 800e1e4:	895b      	ldrh	r3, [r3, #10]
 800e1e6:	f203 4313 	addw	r3, r3, #1043	@ 0x413
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1f0:	b299      	uxth	r1, r3
 800e1f2:	4a1e      	ldr	r2, [pc, #120]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e1f4:	8813      	ldrh	r3, [r2, #0]
 800e1f6:	f361 030a 	bfi	r3, r1, #0, #11
 800e1fa:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e1fe:	6813      	ldr	r3, [r2, #0]
 800e200:	f36f 23dc 	bfc	r3, #11, #18
 800e204:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e206:	4a19      	ldr	r2, [pc, #100]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e208:	7913      	ldrb	r3, [r2, #4]
 800e20a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e20e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e210:	4a16      	ldr	r2, [pc, #88]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e212:	7913      	ldrb	r3, [r2, #4]
 800e214:	2108      	movs	r1, #8
 800e216:	f361 0303 	bfi	r3, r1, #0, #4
 800e21a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e21c:	4a13      	ldr	r2, [pc, #76]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e21e:	7913      	ldrb	r3, [r2, #4]
 800e220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e224:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e226:	4a11      	ldr	r2, [pc, #68]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e228:	7913      	ldrb	r3, [r2, #4]
 800e22a:	f023 0310 	bic.w	r3, r3, #16
 800e22e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e230:	4b10      	ldr	r3, [pc, #64]	@ (800e274 <VCU_TransmitModuleCellVoltage+0x11c>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	f003 0310 	and.w	r3, r3, #16
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00c      	beq.n	800e256 <VCU_TransmitModuleCellVoltage+0xfe>
 800e23c:	4b0b      	ldr	r3, [pc, #44]	@ (800e26c <VCU_TransmitModuleCellVoltage+0x114>)
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e244:	b29b      	uxth	r3, r3
 800e246:	461a      	mov	r2, r3
 800e248:	490b      	ldr	r1, [pc, #44]	@ (800e278 <VCU_TransmitModuleCellVoltage+0x120>)
 800e24a:	480c      	ldr	r0, [pc, #48]	@ (800e27c <VCU_TransmitModuleCellVoltage+0x124>)
 800e24c:	f006 ff4a 	bl	80150e4 <siprintf>
 800e250:	480a      	ldr	r0, [pc, #40]	@ (800e27c <VCU_TransmitModuleCellVoltage+0x124>)
 800e252:	f7f7 f9f3 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e256:	2000      	movs	r0, #0
 800e258:	f7fe fae8 	bl	800c82c <VCU_TransmitMessageQueue>
  }
}
 800e25c:	bf00      	nop
 800e25e:	3714      	adds	r7, #20
 800e260:	46bd      	mov	sp, r7
 800e262:	bd90      	pop	{r4, r7, pc}
 800e264:	2000a6ec 	.word	0x2000a6ec
 800e268:	20000dec 	.word	0x20000dec
 800e26c:	2000a758 	.word	0x2000a758
 800e270:	2000a764 	.word	0x2000a764
 800e274:	2000000c 	.word	0x2000000c
 800e278:	0801a6e0 	.word	0x0801a6e0
 800e27c:	20000b5c 	.word	0x20000b5c

0800e280 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800e280:	b590      	push	{r4, r7, lr}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e286:	4b41      	ldr	r3, [pc, #260]	@ (800e38c <VCU_TransmitModuleCellTemp+0x10c>)
 800e288:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fabb 	bl	800b808 <MCU_ModuleIndexFromId>
 800e292:	4603      	mov	r3, r0
 800e294:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e296:	4b3d      	ldr	r3, [pc, #244]	@ (800e38c <VCU_TransmitModuleCellTemp+0x10c>)
 800e298:	7d1b      	ldrb	r3, [r3, #20]
 800e29a:	7bfa      	ldrb	r2, [r7, #15]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d071      	beq.n	800e384 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800e2a0:	4b3a      	ldr	r3, [pc, #232]	@ (800e38c <VCU_TransmitModuleCellTemp+0x10c>)
 800e2a2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e2a6:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	4a39      	ldr	r2, [pc, #228]	@ (800e390 <VCU_TransmitModuleCellTemp+0x110>)
 800e2ac:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e2b0:	fb01 f303 	mul.w	r3, r1, r3
 800e2b4:	4413      	add	r3, r2
 800e2b6:	331c      	adds	r3, #28
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	4a34      	ldr	r2, [pc, #208]	@ (800e390 <VCU_TransmitModuleCellTemp+0x110>)
 800e2c0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e2c4:	fb01 f303 	mul.w	r3, r1, r3
 800e2c8:	4413      	add	r3, r2
 800e2ca:	3318      	adds	r3, #24
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	4a2e      	ldr	r2, [pc, #184]	@ (800e390 <VCU_TransmitModuleCellTemp+0x110>)
 800e2d6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e2da:	fb01 f303 	mul.w	r3, r1, r3
 800e2de:	4413      	add	r3, r2
 800e2e0:	331a      	adds	r3, #26
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e2ea:	4b2a      	ldr	r3, [pc, #168]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e2f0:	4b28      	ldr	r3, [pc, #160]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e2f6:	4b27      	ldr	r3, [pc, #156]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800e2fc:	4b26      	ldr	r3, [pc, #152]	@ (800e398 <VCU_TransmitModuleCellTemp+0x118>)
 800e2fe:	461c      	mov	r4, r3
 800e300:	463b      	mov	r3, r7
 800e302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e306:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e30a:	4b20      	ldr	r3, [pc, #128]	@ (800e38c <VCU_TransmitModuleCellTemp+0x10c>)
 800e30c:	895b      	ldrh	r3, [r3, #10]
 800e30e:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800e312:	b29b      	uxth	r3, r3
 800e314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e318:	b299      	uxth	r1, r3
 800e31a:	4a1e      	ldr	r2, [pc, #120]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e31c:	8813      	ldrh	r3, [r2, #0]
 800e31e:	f361 030a 	bfi	r3, r1, #0, #11
 800e322:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e324:	4a1b      	ldr	r2, [pc, #108]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e326:	6813      	ldr	r3, [r2, #0]
 800e328:	f36f 23dc 	bfc	r3, #11, #18
 800e32c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e32e:	4a19      	ldr	r2, [pc, #100]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e330:	7913      	ldrb	r3, [r2, #4]
 800e332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e336:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e338:	4a16      	ldr	r2, [pc, #88]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e33a:	7913      	ldrb	r3, [r2, #4]
 800e33c:	2108      	movs	r1, #8
 800e33e:	f361 0303 	bfi	r3, r1, #0, #4
 800e342:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e344:	4a13      	ldr	r2, [pc, #76]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e346:	7913      	ldrb	r3, [r2, #4]
 800e348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e34c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e34e:	4a11      	ldr	r2, [pc, #68]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e350:	7913      	ldrb	r3, [r2, #4]
 800e352:	f023 0310 	bic.w	r3, r3, #16
 800e356:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e358:	4b10      	ldr	r3, [pc, #64]	@ (800e39c <VCU_TransmitModuleCellTemp+0x11c>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	f003 0310 	and.w	r3, r3, #16
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00c      	beq.n	800e37e <VCU_TransmitModuleCellTemp+0xfe>
 800e364:	4b0b      	ldr	r3, [pc, #44]	@ (800e394 <VCU_TransmitModuleCellTemp+0x114>)
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	461a      	mov	r2, r3
 800e370:	490b      	ldr	r1, [pc, #44]	@ (800e3a0 <VCU_TransmitModuleCellTemp+0x120>)
 800e372:	480c      	ldr	r0, [pc, #48]	@ (800e3a4 <VCU_TransmitModuleCellTemp+0x124>)
 800e374:	f006 feb6 	bl	80150e4 <siprintf>
 800e378:	480a      	ldr	r0, [pc, #40]	@ (800e3a4 <VCU_TransmitModuleCellTemp+0x124>)
 800e37a:	f7f7 f95f 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e37e:	2000      	movs	r0, #0
 800e380:	f7fe fa54 	bl	800c82c <VCU_TransmitMessageQueue>
  }
}
 800e384:	bf00      	nop
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd90      	pop	{r4, r7, pc}
 800e38c:	2000a6ec 	.word	0x2000a6ec
 800e390:	20000dec 	.word	0x20000dec
 800e394:	2000a758 	.word	0x2000a758
 800e398:	2000a764 	.word	0x2000a764
 800e39c:	2000000c 	.word	0x2000000c
 800e3a0:	0801a704 	.word	0x0801a704
 800e3a4:	20000b5c 	.word	0x20000b5c

0800e3a8 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e3ae:	4b41      	ldr	r3, [pc, #260]	@ (800e4b4 <VCU_TransmitModuleLimits+0x10c>)
 800e3b0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fd fa27 	bl	800b808 <MCU_ModuleIndexFromId>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e3be:	4b3d      	ldr	r3, [pc, #244]	@ (800e4b4 <VCU_TransmitModuleLimits+0x10c>)
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
 800e3c2:	7bfa      	ldrb	r2, [r7, #15]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d071      	beq.n	800e4ac <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800e3c8:	4b3a      	ldr	r3, [pc, #232]	@ (800e4b4 <VCU_TransmitModuleLimits+0x10c>)
 800e3ca:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e3ce:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	4a39      	ldr	r2, [pc, #228]	@ (800e4b8 <VCU_TransmitModuleLimits+0x110>)
 800e3d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e3d8:	fb01 f303 	mul.w	r3, r1, r3
 800e3dc:	4413      	add	r3, r2
 800e3de:	3312      	adds	r3, #18
 800e3e0:	881b      	ldrh	r3, [r3, #0]
 800e3e2:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	4a34      	ldr	r2, [pc, #208]	@ (800e4b8 <VCU_TransmitModuleLimits+0x110>)
 800e3e8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e3ec:	fb01 f303 	mul.w	r3, r1, r3
 800e3f0:	4413      	add	r3, r2
 800e3f2:	330e      	adds	r3, #14
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
 800e3fa:	4a2f      	ldr	r2, [pc, #188]	@ (800e4b8 <VCU_TransmitModuleLimits+0x110>)
 800e3fc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e400:	fb01 f303 	mul.w	r3, r1, r3
 800e404:	4413      	add	r3, r2
 800e406:	3310      	adds	r3, #16
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e412:	4b2a      	ldr	r3, [pc, #168]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e414:	2200      	movs	r2, #0
 800e416:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e418:	4b28      	ldr	r3, [pc, #160]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e41e:	4b27      	ldr	r3, [pc, #156]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e420:	2200      	movs	r2, #0
 800e422:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800e424:	4b26      	ldr	r3, [pc, #152]	@ (800e4c0 <VCU_TransmitModuleLimits+0x118>)
 800e426:	461c      	mov	r4, r3
 800e428:	463b      	mov	r3, r7
 800e42a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e42e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e432:	4b20      	ldr	r3, [pc, #128]	@ (800e4b4 <VCU_TransmitModuleLimits+0x10c>)
 800e434:	895b      	ldrh	r3, [r3, #10]
 800e436:	f203 4316 	addw	r3, r3, #1046	@ 0x416
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e440:	b299      	uxth	r1, r3
 800e442:	4a1e      	ldr	r2, [pc, #120]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e444:	8813      	ldrh	r3, [r2, #0]
 800e446:	f361 030a 	bfi	r3, r1, #0, #11
 800e44a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e44c:	4a1b      	ldr	r2, [pc, #108]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e44e:	6813      	ldr	r3, [r2, #0]
 800e450:	f36f 23dc 	bfc	r3, #11, #18
 800e454:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e456:	4a19      	ldr	r2, [pc, #100]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e458:	7913      	ldrb	r3, [r2, #4]
 800e45a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e45e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e460:	4a16      	ldr	r2, [pc, #88]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e462:	7913      	ldrb	r3, [r2, #4]
 800e464:	2108      	movs	r1, #8
 800e466:	f361 0303 	bfi	r3, r1, #0, #4
 800e46a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e46c:	4a13      	ldr	r2, [pc, #76]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e46e:	7913      	ldrb	r3, [r2, #4]
 800e470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e474:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e476:	4a11      	ldr	r2, [pc, #68]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e478:	7913      	ldrb	r3, [r2, #4]
 800e47a:	f023 0310 	bic.w	r3, r3, #16
 800e47e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e480:	4b10      	ldr	r3, [pc, #64]	@ (800e4c4 <VCU_TransmitModuleLimits+0x11c>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	f003 0310 	and.w	r3, r3, #16
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00c      	beq.n	800e4a6 <VCU_TransmitModuleLimits+0xfe>
 800e48c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4bc <VCU_TransmitModuleLimits+0x114>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e494:	b29b      	uxth	r3, r3
 800e496:	461a      	mov	r2, r3
 800e498:	490b      	ldr	r1, [pc, #44]	@ (800e4c8 <VCU_TransmitModuleLimits+0x120>)
 800e49a:	480c      	ldr	r0, [pc, #48]	@ (800e4cc <VCU_TransmitModuleLimits+0x124>)
 800e49c:	f006 fe22 	bl	80150e4 <siprintf>
 800e4a0:	480a      	ldr	r0, [pc, #40]	@ (800e4cc <VCU_TransmitModuleLimits+0x124>)
 800e4a2:	f7f7 f8cb 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f7fe f9c0 	bl	800c82c <VCU_TransmitMessageQueue>
  }

}
 800e4ac:	bf00      	nop
 800e4ae:	3714      	adds	r7, #20
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd90      	pop	{r4, r7, pc}
 800e4b4:	2000a6ec 	.word	0x2000a6ec
 800e4b8:	20000dec 	.word	0x20000dec
 800e4bc:	2000a758 	.word	0x2000a758
 800e4c0:	2000a764 	.word	0x2000a764
 800e4c4:	2000000c 	.word	0x2000000c
 800e4c8:	0801a724 	.word	0x0801a724
 800e4cc:	20000b5c 	.word	0x20000b5c

0800e4d0 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e4d4:	4b23      	ldr	r3, [pc, #140]	@ (800e564 <VCU_RequestTime+0x94>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800e4da:	4b22      	ldr	r3, [pc, #136]	@ (800e564 <VCU_RequestTime+0x94>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800e4e0:	4b20      	ldr	r3, [pc, #128]	@ (800e564 <VCU_RequestTime+0x94>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e4e6:	4b20      	ldr	r3, [pc, #128]	@ (800e568 <VCU_RequestTime+0x98>)
 800e4e8:	895b      	ldrh	r3, [r3, #10]
 800e4ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4f4:	b299      	uxth	r1, r3
 800e4f6:	4a1b      	ldr	r2, [pc, #108]	@ (800e564 <VCU_RequestTime+0x94>)
 800e4f8:	8813      	ldrh	r3, [r2, #0]
 800e4fa:	f361 030a 	bfi	r3, r1, #0, #11
 800e4fe:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e500:	4a18      	ldr	r2, [pc, #96]	@ (800e564 <VCU_RequestTime+0x94>)
 800e502:	6813      	ldr	r3, [r2, #0]
 800e504:	f36f 23dc 	bfc	r3, #11, #18
 800e508:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e50a:	4a16      	ldr	r2, [pc, #88]	@ (800e564 <VCU_RequestTime+0x94>)
 800e50c:	7913      	ldrb	r3, [r2, #4]
 800e50e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e512:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e514:	4a13      	ldr	r2, [pc, #76]	@ (800e564 <VCU_RequestTime+0x94>)
 800e516:	7913      	ldrb	r3, [r2, #4]
 800e518:	2108      	movs	r1, #8
 800e51a:	f361 0303 	bfi	r3, r1, #0, #4
 800e51e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e520:	4a10      	ldr	r2, [pc, #64]	@ (800e564 <VCU_RequestTime+0x94>)
 800e522:	7913      	ldrb	r3, [r2, #4]
 800e524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e528:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e52a:	4a0e      	ldr	r2, [pc, #56]	@ (800e564 <VCU_RequestTime+0x94>)
 800e52c:	7913      	ldrb	r3, [r2, #4]
 800e52e:	f023 0310 	bic.w	r3, r3, #16
 800e532:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e534:	4b0d      	ldr	r3, [pc, #52]	@ (800e56c <VCU_RequestTime+0x9c>)
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	f003 0310 	and.w	r3, r3, #16
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00c      	beq.n	800e55a <VCU_RequestTime+0x8a>
 800e540:	4b08      	ldr	r3, [pc, #32]	@ (800e564 <VCU_RequestTime+0x94>)
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e548:	b29b      	uxth	r3, r3
 800e54a:	461a      	mov	r2, r3
 800e54c:	4908      	ldr	r1, [pc, #32]	@ (800e570 <VCU_RequestTime+0xa0>)
 800e54e:	4809      	ldr	r0, [pc, #36]	@ (800e574 <VCU_RequestTime+0xa4>)
 800e550:	f006 fdc8 	bl	80150e4 <siprintf>
 800e554:	4807      	ldr	r0, [pc, #28]	@ (800e574 <VCU_RequestTime+0xa4>)
 800e556:	f7f7 f871 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e55a:	2000      	movs	r0, #0
 800e55c:	f7fe f966 	bl	800c82c <VCU_TransmitMessageQueue>

}
 800e560:	bf00      	nop
 800e562:	bd80      	pop	{r7, pc}
 800e564:	2000a758 	.word	0x2000a758
 800e568:	2000a6ec 	.word	0x2000a6ec
 800e56c:	2000000c 	.word	0x2000000c
 800e570:	0801a740 	.word	0x0801a740
 800e574:	20000b5c 	.word	0x20000b5c

0800e578 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800e578:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e57a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e57c:	3304      	adds	r3, #4

0800e57e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e57e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e580:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800e582:	d3f9      	bcc.n	800e578 <CopyDataInit>
  bx lr
 800e584:	4770      	bx	lr

0800e586 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800e586:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800e588:	3004      	adds	r0, #4

0800e58a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800e58a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800e58c:	d3fb      	bcc.n	800e586 <FillZerobss>
  bx lr
 800e58e:	4770      	bx	lr

0800e590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e590:	480c      	ldr	r0, [pc, #48]	@ (800e5c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e594:	f7fd fff0 	bl	800c578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800e598:	480b      	ldr	r0, [pc, #44]	@ (800e5c8 <LoopForever+0x6>)
 800e59a:	490c      	ldr	r1, [pc, #48]	@ (800e5cc <LoopForever+0xa>)
 800e59c:	4a0c      	ldr	r2, [pc, #48]	@ (800e5d0 <LoopForever+0xe>)
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f7ff ffed 	bl	800e57e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800e5a4:	480b      	ldr	r0, [pc, #44]	@ (800e5d4 <LoopForever+0x12>)
 800e5a6:	490c      	ldr	r1, [pc, #48]	@ (800e5d8 <LoopForever+0x16>)
 800e5a8:	4a0c      	ldr	r2, [pc, #48]	@ (800e5dc <LoopForever+0x1a>)
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f7ff ffe7 	bl	800e57e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800e5b0:	480b      	ldr	r0, [pc, #44]	@ (800e5e0 <LoopForever+0x1e>)
 800e5b2:	490c      	ldr	r1, [pc, #48]	@ (800e5e4 <LoopForever+0x22>)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f7ff ffe8 	bl	800e58a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e5ba:	f007 fcd5 	bl	8015f68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800e5be:	f7f7 fbef 	bl	8005da0 <main>

0800e5c2 <LoopForever>:

LoopForever:
  b LoopForever
 800e5c2:	e7fe      	b.n	800e5c2 <LoopForever>
  ldr   r0, =_estack
 800e5c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800e5c8:	20000008 	.word	0x20000008
 800e5cc:	200002c8 	.word	0x200002c8
 800e5d0:	0801adbc 	.word	0x0801adbc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800e5d4:	20030000 	.word	0x20030000
 800e5d8:	20030000 	.word	0x20030000
 800e5dc:	0801b07c 	.word	0x0801b07c
  INIT_BSS _sbss, _ebss
 800e5e0:	200002c8 	.word	0x200002c8
 800e5e4:	2000a984 	.word	0x2000a984

0800e5e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e5e8:	e7fe      	b.n	800e5e8 <ADC1_IRQHandler>
	...

0800e5ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e628 <HAL_Init+0x3c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a0b      	ldr	r2, [pc, #44]	@ (800e628 <HAL_Init+0x3c>)
 800e5fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e600:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e602:	2003      	movs	r0, #3
 800e604:	f000 f96c 	bl	800e8e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e608:	200f      	movs	r0, #15
 800e60a:	f000 f80f 	bl	800e62c <HAL_InitTick>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	71fb      	strb	r3, [r7, #7]
 800e618:	e001      	b.n	800e61e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e61a:	f7fd fc13 	bl	800be44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e61e:	79fb      	ldrb	r3, [r7, #7]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	58004000 	.word	0x58004000

0800e62c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800e638:	4b17      	ldr	r3, [pc, #92]	@ (800e698 <HAL_InitTick+0x6c>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d024      	beq.n	800e68a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800e640:	f002 f842 	bl	80106c8 <HAL_RCC_GetHCLKFreq>
 800e644:	4602      	mov	r2, r0
 800e646:	4b14      	ldr	r3, [pc, #80]	@ (800e698 <HAL_InitTick+0x6c>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	4619      	mov	r1, r3
 800e64c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e650:	fbb3 f3f1 	udiv	r3, r3, r1
 800e654:	fbb2 f3f3 	udiv	r3, r2, r3
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f974 	bl	800e946 <HAL_SYSTICK_Config>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10f      	bne.n	800e684 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b0f      	cmp	r3, #15
 800e668:	d809      	bhi.n	800e67e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e66a:	2200      	movs	r2, #0
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	f04f 30ff 	mov.w	r0, #4294967295
 800e672:	f000 f940 	bl	800e8f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e676:	4a09      	ldr	r2, [pc, #36]	@ (800e69c <HAL_InitTick+0x70>)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	e007      	b.n	800e68e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	73fb      	strb	r3, [r7, #15]
 800e682:	e004      	b.n	800e68e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	73fb      	strb	r3, [r7, #15]
 800e688:	e001      	b.n	800e68e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800e68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	20000020 	.word	0x20000020
 800e69c:	2000001c 	.word	0x2000001c

0800e6a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e6a4:	4b06      	ldr	r3, [pc, #24]	@ (800e6c0 <HAL_IncTick+0x20>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4b06      	ldr	r3, [pc, #24]	@ (800e6c4 <HAL_IncTick+0x24>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	4a04      	ldr	r2, [pc, #16]	@ (800e6c4 <HAL_IncTick+0x24>)
 800e6b2:	6013      	str	r3, [r2, #0]
}
 800e6b4:	bf00      	nop
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	20000020 	.word	0x20000020
 800e6c4:	2000a7f8 	.word	0x2000a7f8

0800e6c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
  return uwTick;
 800e6cc:	4b03      	ldr	r3, [pc, #12]	@ (800e6dc <HAL_GetTick+0x14>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	2000a7f8 	.word	0x2000a7f8

0800e6e0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800e6e4:	4b03      	ldr	r3, [pc, #12]	@ (800e6f4 <HAL_GetTickPrio+0x14>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	2000001c 	.word	0x2000001c

0800e6f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e700:	f7ff ffe2 	bl	800e6c8 <HAL_GetTick>
 800e704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e710:	d005      	beq.n	800e71e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e712:	4b0a      	ldr	r3, [pc, #40]	@ (800e73c <HAL_Delay+0x44>)
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4413      	add	r3, r2
 800e71c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e71e:	bf00      	nop
 800e720:	f7ff ffd2 	bl	800e6c8 <HAL_GetTick>
 800e724:	4602      	mov	r2, r0
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d8f7      	bhi.n	800e720 <HAL_Delay+0x28>
  {
  }
}
 800e730:	bf00      	nop
 800e732:	bf00      	nop
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20000020 	.word	0x20000020

0800e740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f003 0307 	and.w	r3, r3, #7
 800e74e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e750:	4b0c      	ldr	r3, [pc, #48]	@ (800e784 <__NVIC_SetPriorityGrouping+0x44>)
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e75c:	4013      	ands	r3, r2
 800e75e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e76c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e772:	4a04      	ldr	r2, [pc, #16]	@ (800e784 <__NVIC_SetPriorityGrouping+0x44>)
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	60d3      	str	r3, [r2, #12]
}
 800e778:	bf00      	nop
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	e000ed00 	.word	0xe000ed00

0800e788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e788:	b480      	push	{r7}
 800e78a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e78c:	4b04      	ldr	r3, [pc, #16]	@ (800e7a0 <__NVIC_GetPriorityGrouping+0x18>)
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	0a1b      	lsrs	r3, r3, #8
 800e792:	f003 0307 	and.w	r3, r3, #7
}
 800e796:	4618      	mov	r0, r3
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	e000ed00 	.word	0xe000ed00

0800e7a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	db0b      	blt.n	800e7ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	f003 021f 	and.w	r2, r3, #31
 800e7bc:	4907      	ldr	r1, [pc, #28]	@ (800e7dc <__NVIC_EnableIRQ+0x38>)
 800e7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7c2:	095b      	lsrs	r3, r3, #5
 800e7c4:	2001      	movs	r0, #1
 800e7c6:	fa00 f202 	lsl.w	r2, r0, r2
 800e7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e7ce:	bf00      	nop
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	e000e100 	.word	0xe000e100

0800e7e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	6039      	str	r1, [r7, #0]
 800e7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	db0a      	blt.n	800e80a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	490c      	ldr	r1, [pc, #48]	@ (800e82c <__NVIC_SetPriority+0x4c>)
 800e7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7fe:	0112      	lsls	r2, r2, #4
 800e800:	b2d2      	uxtb	r2, r2
 800e802:	440b      	add	r3, r1
 800e804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e808:	e00a      	b.n	800e820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	4908      	ldr	r1, [pc, #32]	@ (800e830 <__NVIC_SetPriority+0x50>)
 800e810:	79fb      	ldrb	r3, [r7, #7]
 800e812:	f003 030f 	and.w	r3, r3, #15
 800e816:	3b04      	subs	r3, #4
 800e818:	0112      	lsls	r2, r2, #4
 800e81a:	b2d2      	uxtb	r2, r2
 800e81c:	440b      	add	r3, r1
 800e81e:	761a      	strb	r2, [r3, #24]
}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	e000e100 	.word	0xe000e100
 800e830:	e000ed00 	.word	0xe000ed00

0800e834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e834:	b480      	push	{r7}
 800e836:	b089      	sub	sp, #36	@ 0x24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f003 0307 	and.w	r3, r3, #7
 800e846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	f1c3 0307 	rsb	r3, r3, #7
 800e84e:	2b04      	cmp	r3, #4
 800e850:	bf28      	it	cs
 800e852:	2304      	movcs	r3, #4
 800e854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	3304      	adds	r3, #4
 800e85a:	2b06      	cmp	r3, #6
 800e85c:	d902      	bls.n	800e864 <NVIC_EncodePriority+0x30>
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	3b03      	subs	r3, #3
 800e862:	e000      	b.n	800e866 <NVIC_EncodePriority+0x32>
 800e864:	2300      	movs	r3, #0
 800e866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e868:	f04f 32ff 	mov.w	r2, #4294967295
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	fa02 f303 	lsl.w	r3, r2, r3
 800e872:	43da      	mvns	r2, r3
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	401a      	ands	r2, r3
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e87c:	f04f 31ff 	mov.w	r1, #4294967295
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	fa01 f303 	lsl.w	r3, r1, r3
 800e886:	43d9      	mvns	r1, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e88c:	4313      	orrs	r3, r2
         );
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3724      	adds	r7, #36	@ 0x24
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
	...

0800e89c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e8ac:	d301      	bcc.n	800e8b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e00f      	b.n	800e8d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e8b2:	4a0a      	ldr	r2, [pc, #40]	@ (800e8dc <SysTick_Config+0x40>)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e8ba:	210f      	movs	r1, #15
 800e8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c0:	f7ff ff8e 	bl	800e7e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <SysTick_Config+0x40>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e8ca:	4b04      	ldr	r3, [pc, #16]	@ (800e8dc <SysTick_Config+0x40>)
 800e8cc:	2207      	movs	r2, #7
 800e8ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	e000e010 	.word	0xe000e010

0800e8e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ff29 	bl	800e740 <__NVIC_SetPriorityGrouping>
}
 800e8ee:	bf00      	nop
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b086      	sub	sp, #24
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	60b9      	str	r1, [r7, #8]
 800e900:	607a      	str	r2, [r7, #4]
 800e902:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e904:	f7ff ff40 	bl	800e788 <__NVIC_GetPriorityGrouping>
 800e908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	68b9      	ldr	r1, [r7, #8]
 800e90e:	6978      	ldr	r0, [r7, #20]
 800e910:	f7ff ff90 	bl	800e834 <NVIC_EncodePriority>
 800e914:	4602      	mov	r2, r0
 800e916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff ff5f 	bl	800e7e0 <__NVIC_SetPriority>
}
 800e922:	bf00      	nop
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	4603      	mov	r3, r0
 800e932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff ff33 	bl	800e7a4 <__NVIC_EnableIRQ>
}
 800e93e:	bf00      	nop
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff ffa4 	bl	800e89c <SysTick_Config>
 800e954:	4603      	mov	r3, r0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e04f      	b.n	800ea10 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d008      	beq.n	800e98e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2204      	movs	r2, #4
 800e980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e040      	b.n	800ea10 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f022 020e 	bic.w	r2, r2, #14
 800e99c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f022 0201 	bic.w	r2, r2, #1
 800e9bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9c2:	f003 021c 	and.w	r2, r3, #28
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	fa01 f202 	lsl.w	r2, r1, r2
 800e9d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00c      	beq.n	800e9fe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800e9fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2201      	movs	r2, #1
 800ea02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d005      	beq.n	800ea40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2204      	movs	r2, #4
 800ea38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	73fb      	strb	r3, [r7, #15]
 800ea3e:	e047      	b.n	800ead0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f022 020e 	bic.w	r2, r2, #14
 800ea4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f022 0201 	bic.w	r2, r2, #1
 800ea5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ea6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea74:	f003 021c 	and.w	r2, r3, #28
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	fa01 f202 	lsl.w	r2, r1, r2
 800ea82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ea8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00c      	beq.n	800eab0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800eaa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800eaae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d003      	beq.n	800ead0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
    }
  }
  return status;
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800eaea:	4b1c      	ldr	r3, [pc, #112]	@ (800eb5c <HAL_FLASH_Program+0x80>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d101      	bne.n	800eaf6 <HAL_FLASH_Program+0x1a>
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e02d      	b.n	800eb52 <HAL_FLASH_Program+0x76>
 800eaf6:	4b19      	ldr	r3, [pc, #100]	@ (800eb5c <HAL_FLASH_Program+0x80>)
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800eafc:	4b17      	ldr	r3, [pc, #92]	@ (800eb5c <HAL_FLASH_Program+0x80>)
 800eafe:	2200      	movs	r2, #0
 800eb00:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eb02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eb06:	f000 f869 	bl	800ebdc <FLASH_WaitForLastOperation>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d11a      	bne.n	800eb4a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d105      	bne.n	800eb26 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800eb1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb1e:	68b8      	ldr	r0, [r7, #8]
 800eb20:	f000 f8ca 	bl	800ecb8 <FLASH_Program_DoubleWord>
 800eb24:	e004      	b.n	800eb30 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	68b8      	ldr	r0, [r7, #8]
 800eb2c:	f00a f87c 	bl	8018c28 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eb30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eb34:	f000 f852 	bl	800ebdc <FLASH_WaitForLastOperation>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800eb3c:	4b08      	ldr	r3, [pc, #32]	@ (800eb60 <HAL_FLASH_Program+0x84>)
 800eb3e:	695a      	ldr	r2, [r3, #20]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	43db      	mvns	r3, r3
 800eb44:	4906      	ldr	r1, [pc, #24]	@ (800eb60 <HAL_FLASH_Program+0x84>)
 800eb46:	4013      	ands	r3, r2
 800eb48:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800eb4a:	4b04      	ldr	r3, [pc, #16]	@ (800eb5c <HAL_FLASH_Program+0x80>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800eb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	2000a7fc 	.word	0x2000a7fc
 800eb60:	58004000 	.word	0x58004000

0800eb64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800eb6e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb9c <HAL_FLASH_Unlock+0x38>)
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	da0b      	bge.n	800eb8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800eb76:	4b09      	ldr	r3, [pc, #36]	@ (800eb9c <HAL_FLASH_Unlock+0x38>)
 800eb78:	4a09      	ldr	r2, [pc, #36]	@ (800eba0 <HAL_FLASH_Unlock+0x3c>)
 800eb7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800eb7c:	4b07      	ldr	r3, [pc, #28]	@ (800eb9c <HAL_FLASH_Unlock+0x38>)
 800eb7e:	4a09      	ldr	r2, [pc, #36]	@ (800eba4 <HAL_FLASH_Unlock+0x40>)
 800eb80:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800eb82:	4b06      	ldr	r3, [pc, #24]	@ (800eb9c <HAL_FLASH_Unlock+0x38>)
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	da01      	bge.n	800eb8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr
 800eb9c:	58004000 	.word	0x58004000
 800eba0:	45670123 	.word	0x45670123
 800eba4:	cdef89ab 	.word	0xcdef89ab

0800eba8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ebb2:	4b09      	ldr	r3, [pc, #36]	@ (800ebd8 <HAL_FLASH_Lock+0x30>)
 800ebb4:	695b      	ldr	r3, [r3, #20]
 800ebb6:	4a08      	ldr	r2, [pc, #32]	@ (800ebd8 <HAL_FLASH_Lock+0x30>)
 800ebb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ebbc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800ebbe:	4b06      	ldr	r3, [pc, #24]	@ (800ebd8 <HAL_FLASH_Lock+0x30>)
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	db01      	blt.n	800ebca <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ebca:	79fb      	ldrb	r3, [r7, #7]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	58004000 	.word	0x58004000

0800ebdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800ebe4:	f7ff fd70 	bl	800e6c8 <HAL_GetTick>
 800ebe8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ebea:	e009      	b.n	800ec00 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800ebec:	f7ff fd6c 	bl	800e6c8 <HAL_GetTick>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d801      	bhi.n	800ec00 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e053      	b.n	800eca8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ec00:	4b2b      	ldr	r3, [pc, #172]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec0c:	d0ee      	beq.n	800ebec <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800ec0e:	4b28      	ldr	r3, [pc, #160]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ec1e:	4b24      	ldr	r3, [pc, #144]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d007      	beq.n	800ec3e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800ec2e:	4b20      	ldr	r3, [pc, #128]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ec34:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ec3c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800ec44:	4013      	ands	r3, r2
 800ec46:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec4e:	d307      	bcc.n	800ec60 <FLASH_WaitForLastOperation+0x84>
 800ec50:	4b17      	ldr	r3, [pc, #92]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec52:	699a      	ldr	r2, [r3, #24]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ec5a:	4915      	ldr	r1, [pc, #84]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	618b      	str	r3, [r1, #24]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d004      	beq.n	800ec74 <FLASH_WaitForLastOperation+0x98>
 800ec6a:	4a11      	ldr	r2, [pc, #68]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ec72:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00e      	beq.n	800ec98 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800ec7a:	4a0e      	ldr	r2, [pc, #56]	@ (800ecb4 <FLASH_WaitForLastOperation+0xd8>)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e011      	b.n	800eca8 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800ec84:	f7ff fd20 	bl	800e6c8 <HAL_GetTick>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d801      	bhi.n	800ec98 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e007      	b.n	800eca8 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800ec98:	4b05      	ldr	r3, [pc, #20]	@ (800ecb0 <FLASH_WaitForLastOperation+0xd4>)
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eca4:	d0ee      	beq.n	800ec84 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	58004000 	.word	0x58004000
 800ecb4:	2000a7fc 	.word	0x2000a7fc

0800ecb8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ecc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ed00 <FLASH_Program_DoubleWord+0x48>)
 800ecc6:	695b      	ldr	r3, [r3, #20]
 800ecc8:	4a0d      	ldr	r2, [pc, #52]	@ (800ed00 <FLASH_Program_DoubleWord+0x48>)
 800ecca:	f043 0301 	orr.w	r3, r3, #1
 800ecce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	683a      	ldr	r2, [r7, #0]
 800ecd4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ecd6:	f3bf 8f6f 	isb	sy
}
 800ecda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800ecdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ece0:	f04f 0200 	mov.w	r2, #0
 800ece4:	f04f 0300 	mov.w	r3, #0
 800ece8:	000a      	movs	r2, r1
 800ecea:	2300      	movs	r3, #0
 800ecec:	68f9      	ldr	r1, [r7, #12]
 800ecee:	3104      	adds	r1, #4
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	600b      	str	r3, [r1, #0]
}
 800ecf4:	bf00      	nop
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	58004000 	.word	0x58004000

0800ed04 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ed0e:	4b24      	ldr	r3, [pc, #144]	@ (800eda0 <HAL_FLASHEx_Erase+0x9c>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d101      	bne.n	800ed1a <HAL_FLASHEx_Erase+0x16>
 800ed16:	2302      	movs	r3, #2
 800ed18:	e03d      	b.n	800ed96 <HAL_FLASHEx_Erase+0x92>
 800ed1a:	4b21      	ldr	r3, [pc, #132]	@ (800eda0 <HAL_FLASHEx_Erase+0x9c>)
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed20:	4b1f      	ldr	r3, [pc, #124]	@ (800eda0 <HAL_FLASHEx_Erase+0x9c>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ed2a:	f7ff ff57 	bl	800ebdc <FLASH_WaitForLastOperation>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d12a      	bne.n	800ed8e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d124      	bne.n	800ed8a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	f04f 32ff 	mov.w	r2, #4294967295
 800ed46:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	60bb      	str	r3, [r7, #8]
 800ed4e:	e012      	b.n	800ed76 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800ed50:	68b8      	ldr	r0, [r7, #8]
 800ed52:	f000 f869 	bl	800ee28 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ed5a:	f7ff ff3f 	bl	800ebdc <FLASH_WaitForLastOperation>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800ed62:	7bfb      	ldrb	r3, [r7, #15]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d003      	beq.n	800ed70 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	601a      	str	r2, [r3, #0]
          break;
 800ed6e:	e00a      	b.n	800ed86 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	3301      	adds	r3, #1
 800ed74:	60bb      	str	r3, [r7, #8]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	4413      	add	r3, r2
 800ed80:	68ba      	ldr	r2, [r7, #8]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d3e4      	bcc.n	800ed50 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800ed86:	f000 f8b1 	bl	800eeec <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ed8a:	f000 f867 	bl	800ee5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ed8e:	4b04      	ldr	r3, [pc, #16]	@ (800eda0 <HAL_FLASHEx_Erase+0x9c>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	701a      	strb	r2, [r3, #0]

  return status;
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	2000a7fc 	.word	0x2000a7fc

0800eda4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800edac:	4b1c      	ldr	r3, [pc, #112]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d101      	bne.n	800edb8 <HAL_FLASHEx_Erase_IT+0x14>
 800edb4:	2302      	movs	r3, #2
 800edb6:	e02e      	b.n	800ee16 <HAL_FLASHEx_Erase_IT+0x72>
 800edb8:	4b19      	ldr	r3, [pc, #100]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edba:	2201      	movs	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800edbe:	4b18      	ldr	r3, [pc, #96]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a15      	ldr	r2, [pc, #84]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edca:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800edcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800edd0:	f7ff ff04 	bl	800ebdc <FLASH_WaitForLastOperation>
 800edd4:	4603      	mov	r3, r0
 800edd6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800edd8:	7bfb      	ldrb	r3, [r7, #15]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800edde:	4b10      	ldr	r3, [pc, #64]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	701a      	strb	r2, [r3, #0]
 800ede4:	e016      	b.n	800ee14 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800ede6:	4b0f      	ldr	r3, [pc, #60]	@ (800ee24 <HAL_FLASHEx_Erase_IT+0x80>)
 800ede8:	695b      	ldr	r3, [r3, #20]
 800edea:	4a0e      	ldr	r2, [pc, #56]	@ (800ee24 <HAL_FLASHEx_Erase_IT+0x80>)
 800edec:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800edf0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	d10c      	bne.n	800ee14 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	4a08      	ldr	r2, [pc, #32]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800ee00:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	4a06      	ldr	r2, [pc, #24]	@ (800ee20 <HAL_FLASHEx_Erase_IT+0x7c>)
 800ee08:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 f80a 	bl	800ee28 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	2000a7fc 	.word	0x2000a7fc
 800ee24:	58004000 	.word	0x58004000

0800ee28 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800ee30:	4b09      	ldr	r3, [pc, #36]	@ (800ee58 <FLASH_PageErase+0x30>)
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	00db      	lsls	r3, r3, #3
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	4a06      	ldr	r2, [pc, #24]	@ (800ee58 <FLASH_PageErase+0x30>)
 800ee40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee44:	f043 0302 	orr.w	r3, r3, #2
 800ee48:	6153      	str	r3, [r2, #20]
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	58004000 	.word	0x58004000

0800ee5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800ee60:	4b21      	ldr	r3, [pc, #132]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee6c:	d117      	bne.n	800ee9e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ee6e:	4b1e      	ldr	r3, [pc, #120]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a1d      	ldr	r2, [pc, #116]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee78:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ee7a:	4b1b      	ldr	r3, [pc, #108]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a1a      	ldr	r2, [pc, #104]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ee84:	6013      	str	r3, [r2, #0]
 800ee86:	4b18      	ldr	r3, [pc, #96]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a17      	ldr	r2, [pc, #92]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee90:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ee92:	4b15      	ldr	r3, [pc, #84]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a14      	ldr	r2, [pc, #80]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800ee98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ee9c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800ee9e:	4b12      	ldr	r3, [pc, #72]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eeaa:	d117      	bne.n	800eedc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800eeac:	4b0e      	ldr	r3, [pc, #56]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a0d      	ldr	r2, [pc, #52]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eeb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eeb6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eeb8:	4b0b      	ldr	r3, [pc, #44]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a0a      	ldr	r2, [pc, #40]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eebe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	4b08      	ldr	r3, [pc, #32]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a07      	ldr	r2, [pc, #28]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eeca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eece:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eed0:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a04      	ldr	r2, [pc, #16]	@ (800eee8 <FLASH_FlushCaches+0x8c>)
 800eed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eeda:	6013      	str	r3, [r2, #0]
  }
}
 800eedc:	bf00      	nop
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	58004000 	.word	0x58004000

0800eeec <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800eef0:	4b06      	ldr	r3, [pc, #24]	@ (800ef0c <FLASH_AcknowledgePageErase+0x20>)
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	4a05      	ldr	r2, [pc, #20]	@ (800ef0c <FLASH_AcknowledgePageErase+0x20>)
 800eef6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800eefa:	f023 0302 	bic.w	r3, r3, #2
 800eefe:	6153      	str	r3, [r2, #20]
}
 800ef00:	bf00      	nop
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	58004000 	.word	0x58004000

0800ef10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b087      	sub	sp, #28
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ef1e:	e14c      	b.n	800f1ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	2101      	movs	r1, #1
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	fa01 f303 	lsl.w	r3, r1, r3
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f000 813e 	beq.w	800f1b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	f003 0303 	and.w	r3, r3, #3
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d005      	beq.n	800ef50 <HAL_GPIO_Init+0x40>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	f003 0303 	and.w	r3, r3, #3
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d130      	bne.n	800efb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	2203      	movs	r2, #3
 800ef5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef60:	43db      	mvns	r3, r3
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	4013      	ands	r3, r2
 800ef66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	68da      	ldr	r2, [r3, #12]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	fa02 f303 	lsl.w	r3, r2, r3
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ef86:	2201      	movs	r2, #1
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef8e:	43db      	mvns	r3, r3
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	4013      	ands	r3, r2
 800ef94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	091b      	lsrs	r3, r3, #4
 800ef9c:	f003 0201 	and.w	r2, r3, #1
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	fa02 f303 	lsl.w	r3, r2, r3
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	f003 0303 	and.w	r3, r3, #3
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d017      	beq.n	800efee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	2203      	movs	r2, #3
 800efca:	fa02 f303 	lsl.w	r3, r2, r3
 800efce:	43db      	mvns	r3, r3
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	4013      	ands	r3, r2
 800efd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	689a      	ldr	r2, [r3, #8]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	fa02 f303 	lsl.w	r3, r2, r3
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d123      	bne.n	800f042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	08da      	lsrs	r2, r3, #3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	3208      	adds	r2, #8
 800f002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	220f      	movs	r2, #15
 800f012:	fa02 f303 	lsl.w	r3, r2, r3
 800f016:	43db      	mvns	r3, r3
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	4013      	ands	r3, r2
 800f01c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f003 0307 	and.w	r3, r3, #7
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	fa02 f303 	lsl.w	r3, r2, r3
 800f02e:	693a      	ldr	r2, [r7, #16]
 800f030:	4313      	orrs	r3, r2
 800f032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	08da      	lsrs	r2, r3, #3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3208      	adds	r2, #8
 800f03c:	6939      	ldr	r1, [r7, #16]
 800f03e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	2203      	movs	r2, #3
 800f04e:	fa02 f303 	lsl.w	r3, r2, r3
 800f052:	43db      	mvns	r3, r3
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	4013      	ands	r3, r2
 800f058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f003 0203 	and.w	r2, r3, #3
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	fa02 f303 	lsl.w	r3, r2, r3
 800f06a:	693a      	ldr	r2, [r7, #16]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 8098 	beq.w	800f1b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800f084:	4a54      	ldr	r2, [pc, #336]	@ (800f1d8 <HAL_GPIO_Init+0x2c8>)
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	089b      	lsrs	r3, r3, #2
 800f08a:	3302      	adds	r3, #2
 800f08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f003 0303 	and.w	r3, r3, #3
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	220f      	movs	r2, #15
 800f09c:	fa02 f303 	lsl.w	r3, r2, r3
 800f0a0:	43db      	mvns	r3, r3
 800f0a2:	693a      	ldr	r2, [r7, #16]
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800f0ae:	d019      	beq.n	800f0e4 <HAL_GPIO_Init+0x1d4>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a4a      	ldr	r2, [pc, #296]	@ (800f1dc <HAL_GPIO_Init+0x2cc>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d013      	beq.n	800f0e0 <HAL_GPIO_Init+0x1d0>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a49      	ldr	r2, [pc, #292]	@ (800f1e0 <HAL_GPIO_Init+0x2d0>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d00d      	beq.n	800f0dc <HAL_GPIO_Init+0x1cc>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a48      	ldr	r2, [pc, #288]	@ (800f1e4 <HAL_GPIO_Init+0x2d4>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d007      	beq.n	800f0d8 <HAL_GPIO_Init+0x1c8>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a47      	ldr	r2, [pc, #284]	@ (800f1e8 <HAL_GPIO_Init+0x2d8>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d101      	bne.n	800f0d4 <HAL_GPIO_Init+0x1c4>
 800f0d0:	2304      	movs	r3, #4
 800f0d2:	e008      	b.n	800f0e6 <HAL_GPIO_Init+0x1d6>
 800f0d4:	2307      	movs	r3, #7
 800f0d6:	e006      	b.n	800f0e6 <HAL_GPIO_Init+0x1d6>
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e004      	b.n	800f0e6 <HAL_GPIO_Init+0x1d6>
 800f0dc:	2302      	movs	r3, #2
 800f0de:	e002      	b.n	800f0e6 <HAL_GPIO_Init+0x1d6>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e000      	b.n	800f0e6 <HAL_GPIO_Init+0x1d6>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	697a      	ldr	r2, [r7, #20]
 800f0e8:	f002 0203 	and.w	r2, r2, #3
 800f0ec:	0092      	lsls	r2, r2, #2
 800f0ee:	4093      	lsls	r3, r2
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f0f6:	4938      	ldr	r1, [pc, #224]	@ (800f1d8 <HAL_GPIO_Init+0x2c8>)
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	089b      	lsrs	r3, r3, #2
 800f0fc:	3302      	adds	r3, #2
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f104:	4b39      	ldr	r3, [pc, #228]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	43db      	mvns	r3, r3
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	4013      	ands	r3, r2
 800f112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	4313      	orrs	r3, r2
 800f126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f128:	4a30      	ldr	r2, [pc, #192]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f12e:	4b2f      	ldr	r3, [pc, #188]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	43db      	mvns	r3, r3
 800f138:	693a      	ldr	r2, [r7, #16]
 800f13a:	4013      	ands	r3, r2
 800f13c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f146:	2b00      	cmp	r3, #0
 800f148:	d003      	beq.n	800f152 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800f14a:	693a      	ldr	r2, [r7, #16]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4313      	orrs	r3, r2
 800f150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f152:	4a26      	ldr	r2, [pc, #152]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800f158:	4b24      	ldr	r3, [pc, #144]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f15e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	43db      	mvns	r3, r3
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	4013      	ands	r3, r2
 800f168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4313      	orrs	r3, r2
 800f17c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f17e:	4a1b      	ldr	r2, [pc, #108]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800f186:	4b19      	ldr	r3, [pc, #100]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f18c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	43db      	mvns	r3, r3
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	4013      	ands	r3, r2
 800f196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d003      	beq.n	800f1ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800f1a4:	693a      	ldr	r2, [r7, #16]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f1ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f1ec <HAL_GPIO_Init+0x2dc>)
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f47f aeab 	bne.w	800ef20 <HAL_GPIO_Init+0x10>
  }
}
 800f1ca:	bf00      	nop
 800f1cc:	bf00      	nop
 800f1ce:	371c      	adds	r7, #28
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	40010000 	.word	0x40010000
 800f1dc:	48000400 	.word	0x48000400
 800f1e0:	48000800 	.word	0x48000800
 800f1e4:	48000c00 	.word	0x48000c00
 800f1e8:	48001000 	.word	0x48001000
 800f1ec:	58000800 	.word	0x58000800

0800f1f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	691a      	ldr	r2, [r3, #16]
 800f200:	887b      	ldrh	r3, [r7, #2]
 800f202:	4013      	ands	r3, r2
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f208:	2301      	movs	r3, #1
 800f20a:	73fb      	strb	r3, [r7, #15]
 800f20c:	e001      	b.n	800f212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f212:	7bfb      	ldrb	r3, [r7, #15]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	807b      	strh	r3, [r7, #2]
 800f22c:	4613      	mov	r3, r2
 800f22e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f230:	787b      	ldrb	r3, [r7, #1]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d003      	beq.n	800f23e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f236:	887a      	ldrh	r2, [r7, #2]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f23c:	e002      	b.n	800f244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f23e:	887a      	ldrh	r2, [r7, #2]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f244:	bf00      	nop
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f262:	887a      	ldrh	r2, [r7, #2]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	4013      	ands	r3, r2
 800f268:	041a      	lsls	r2, r3, #16
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	43d9      	mvns	r1, r3
 800f26e:	887b      	ldrh	r3, [r7, #2]
 800f270:	400b      	ands	r3, r1
 800f272:	431a      	orrs	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	619a      	str	r2, [r3, #24]
}
 800f278:	bf00      	nop
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f28e:	4b08      	ldr	r3, [pc, #32]	@ (800f2b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	88fb      	ldrh	r3, [r7, #6]
 800f294:	4013      	ands	r3, r2
 800f296:	2b00      	cmp	r3, #0
 800f298:	d006      	beq.n	800f2a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f29a:	4a05      	ldr	r2, [pc, #20]	@ (800f2b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f29c:	88fb      	ldrh	r3, [r7, #6]
 800f29e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f2a0:	88fb      	ldrh	r3, [r7, #6]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7f6 fc14 	bl	8005ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	58000800 	.word	0x58000800

0800f2b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800f2ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e4 <HAL_HSEM_IRQHandler+0x30>)
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800f2c0:	4b08      	ldr	r3, [pc, #32]	@ (800f2e4 <HAL_HSEM_IRQHandler+0x30>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	43db      	mvns	r3, r3
 800f2c8:	4906      	ldr	r1, [pc, #24]	@ (800f2e4 <HAL_HSEM_IRQHandler+0x30>)
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800f2ce:	4a05      	ldr	r2, [pc, #20]	@ (800f2e4 <HAL_HSEM_IRQHandler+0x30>)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 f807 	bl	800f2e8 <HAL_HSEM_FreeCallback>
}
 800f2da:	bf00      	nop
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	58001500 	.word	0x58001500

0800f2e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fe:	b08b      	sub	sp, #44	@ 0x2c
 800f300:	af06      	add	r7, sp, #24
 800f302:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f30a:	2301      	movs	r3, #1
 800f30c:	e0cb      	b.n	800f4a6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d106      	bne.n	800f328 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7fc feea 	bl	800c0fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2203      	movs	r2, #3
 800f32c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4618      	mov	r0, r3
 800f336:	f005 f943 	bl	80145c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]
 800f33e:	e040      	b.n	800f3c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	6879      	ldr	r1, [r7, #4]
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	4613      	mov	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	440b      	add	r3, r1
 800f350:	3301      	adds	r3, #1
 800f352:	2201      	movs	r2, #1
 800f354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	6879      	ldr	r1, [r7, #4]
 800f35a:	1c5a      	adds	r2, r3, #1
 800f35c:	4613      	mov	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	440b      	add	r3, r1
 800f366:	7bfa      	ldrb	r2, [r7, #15]
 800f368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	4613      	mov	r3, r2
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4413      	add	r3, r2
 800f376:	00db      	lsls	r3, r3, #3
 800f378:	440b      	add	r3, r1
 800f37a:	3303      	adds	r3, #3
 800f37c:	2200      	movs	r2, #0
 800f37e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f380:	7bfa      	ldrb	r2, [r7, #15]
 800f382:	6879      	ldr	r1, [r7, #4]
 800f384:	4613      	mov	r3, r2
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	4413      	add	r3, r2
 800f38a:	00db      	lsls	r3, r3, #3
 800f38c:	440b      	add	r3, r1
 800f38e:	3338      	adds	r3, #56	@ 0x38
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f394:	7bfa      	ldrb	r2, [r7, #15]
 800f396:	6879      	ldr	r1, [r7, #4]
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	440b      	add	r3, r1
 800f3a2:	333c      	adds	r3, #60	@ 0x3c
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f3a8:	7bfa      	ldrb	r2, [r7, #15]
 800f3aa:	6879      	ldr	r1, [r7, #4]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	440b      	add	r3, r1
 800f3b6:	3340      	adds	r3, #64	@ 0x40
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	73fb      	strb	r3, [r7, #15]
 800f3c2:	7bfa      	ldrb	r2, [r7, #15]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d3b9      	bcc.n	800f340 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73fb      	strb	r3, [r7, #15]
 800f3d0:	e044      	b.n	800f45c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f3d2:	7bfa      	ldrb	r2, [r7, #15]
 800f3d4:	6879      	ldr	r1, [r7, #4]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4413      	add	r3, r2
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	440b      	add	r3, r1
 800f3e0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f3e8:	7bfa      	ldrb	r2, [r7, #15]
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	4613      	mov	r3, r2
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	00db      	lsls	r3, r3, #3
 800f3f4:	440b      	add	r3, r1
 800f3f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800f3fa:	7bfa      	ldrb	r2, [r7, #15]
 800f3fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f3fe:	7bfa      	ldrb	r2, [r7, #15]
 800f400:	6879      	ldr	r1, [r7, #4]
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	00db      	lsls	r3, r3, #3
 800f40a:	440b      	add	r3, r1
 800f40c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800f410:	2200      	movs	r2, #0
 800f412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f414:	7bfa      	ldrb	r2, [r7, #15]
 800f416:	6879      	ldr	r1, [r7, #4]
 800f418:	4613      	mov	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4413      	add	r3, r2
 800f41e:	00db      	lsls	r3, r3, #3
 800f420:	440b      	add	r3, r1
 800f422:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f42a:	7bfa      	ldrb	r2, [r7, #15]
 800f42c:	6879      	ldr	r1, [r7, #4]
 800f42e:	4613      	mov	r3, r2
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	440b      	add	r3, r1
 800f438:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f440:	7bfa      	ldrb	r2, [r7, #15]
 800f442:	6879      	ldr	r1, [r7, #4]
 800f444:	4613      	mov	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	440b      	add	r3, r1
 800f44e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	3301      	adds	r3, #1
 800f45a:	73fb      	strb	r3, [r7, #15]
 800f45c:	7bfa      	ldrb	r2, [r7, #15]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	429a      	cmp	r2, r3
 800f464:	d3b5      	bcc.n	800f3d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	603b      	str	r3, [r7, #0]
 800f46c:	687e      	ldr	r6, [r7, #4]
 800f46e:	466d      	mov	r5, sp
 800f470:	f106 0410 	add.w	r4, r6, #16
 800f474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f478:	6823      	ldr	r3, [r4, #0]
 800f47a:	602b      	str	r3, [r5, #0]
 800f47c:	1d33      	adds	r3, r6, #4
 800f47e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f480:	6838      	ldr	r0, [r7, #0]
 800f482:	f005 f8b8 	bl	80145f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2201      	movs	r2, #1
 800f492:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	69db      	ldr	r3, [r3, #28]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d102      	bne.n	800f4a4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f805 	bl	800f4ae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f4a4:	2300      	movs	r3, #0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3714      	adds	r7, #20
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b085      	sub	sp, #20
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	f043 0301 	orr.w	r3, r3, #1
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	f043 0302 	orr.w	r3, r3, #2
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800f50a:	2300      	movs	r3, #0
 800f50c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d01d      	beq.n	800f550 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	791b      	ldrb	r3, [r3, #4]
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d102      	bne.n	800f524 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7fc fd1a 	bl	800bf58 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2202      	movs	r2, #2
 800f528:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2201      	movs	r2, #1
 800f530:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	689a      	ldr	r2, [r3, #8]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800f540:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	711a      	strb	r2, [r3, #4]
 800f54e:	e001      	b.n	800f554 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800f554:	7bfb      	ldrb	r3, [r7, #15]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
	...

0800f560 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f560:	b480      	push	{r7}
 800f562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f564:	4b05      	ldr	r3, [pc, #20]	@ (800f57c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a04      	ldr	r2, [pc, #16]	@ (800f57c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f56a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f56e:	6013      	str	r3, [r2, #0]
}
 800f570:	bf00      	nop
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	58000400 	.word	0x58000400

0800f580 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f580:	b480      	push	{r7}
 800f582:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800f584:	4b04      	ldr	r3, [pc, #16]	@ (800f598 <HAL_PWREx_GetVoltageRange+0x18>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	58000400 	.word	0x58000400

0800f59c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800f59c:	b480      	push	{r7}
 800f59e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800f5a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f5aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5ae:	d101      	bne.n	800f5b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e000      	b.n	800f5b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <LL_RCC_HSE_Enable>:
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800f5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f5d2:	6013      	str	r3, [r2, #0]
}
 800f5d4:	bf00      	nop
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <LL_RCC_HSE_Disable>:
{
 800f5de:	b480      	push	{r7}
 800f5e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800f5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5f0:	6013      	str	r3, [r2, #0]
}
 800f5f2:	bf00      	nop
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <LL_RCC_HSE_IsReady>:
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800f600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f60a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f60e:	d101      	bne.n	800f614 <LL_RCC_HSE_IsReady+0x18>
 800f610:	2301      	movs	r3, #1
 800f612:	e000      	b.n	800f616 <LL_RCC_HSE_IsReady+0x1a>
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <LL_RCC_HSI_Enable>:
{
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f62e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f632:	6013      	str	r3, [r2, #0]
}
 800f634:	bf00      	nop
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <LL_RCC_HSI_Disable>:
{
 800f63e:	b480      	push	{r7}
 800f640:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800f642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f64c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f650:	6013      	str	r3, [r2, #0]
}
 800f652:	bf00      	nop
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <LL_RCC_HSI_IsReady>:
{
 800f65c:	b480      	push	{r7}
 800f65e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f66a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f66e:	d101      	bne.n	800f674 <LL_RCC_HSI_IsReady+0x18>
 800f670:	2301      	movs	r3, #1
 800f672:	e000      	b.n	800f676 <LL_RCC_HSI_IsReady+0x1a>
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <LL_RCC_HSI_SetCalibTrimming>:
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800f688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	061b      	lsls	r3, r3, #24
 800f696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f69a:	4313      	orrs	r3, r2
 800f69c:	604b      	str	r3, [r1, #4]
}
 800f69e:	bf00      	nop
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <LL_RCC_HSI48_Enable>:
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800f6ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f6b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f6ba:	f043 0301 	orr.w	r3, r3, #1
 800f6be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800f6c2:	bf00      	nop
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <LL_RCC_HSI48_Disable>:
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800f6d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f6d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f6dc:	f023 0301 	bic.w	r3, r3, #1
 800f6e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800f6e4:	bf00      	nop
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <LL_RCC_HSI48_IsReady>:
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800f6f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f6fa:	f003 0302 	and.w	r3, r3, #2
 800f6fe:	2b02      	cmp	r3, #2
 800f700:	d101      	bne.n	800f706 <LL_RCC_HSI48_IsReady+0x18>
 800f702:	2301      	movs	r3, #1
 800f704:	e000      	b.n	800f708 <LL_RCC_HSI48_IsReady+0x1a>
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <LL_RCC_LSE_Enable>:
{
 800f712:	b480      	push	{r7}
 800f714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f71e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f722:	f043 0301 	orr.w	r3, r3, #1
 800f726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f72a:	bf00      	nop
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <LL_RCC_LSE_Disable>:
{
 800f734:	b480      	push	{r7}
 800f736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f744:	f023 0301 	bic.w	r3, r3, #1
 800f748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f74c:	bf00      	nop
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <LL_RCC_LSE_EnableBypass>:
{
 800f756:	b480      	push	{r7}
 800f758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f75a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f766:	f043 0304 	orr.w	r3, r3, #4
 800f76a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f76e:	bf00      	nop
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <LL_RCC_LSE_DisableBypass>:
{
 800f778:	b480      	push	{r7}
 800f77a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f77c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f788:	f023 0304 	bic.w	r3, r3, #4
 800f78c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f790:	bf00      	nop
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr

0800f79a <LL_RCC_LSE_IsReady>:
{
 800f79a:	b480      	push	{r7}
 800f79c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f79e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7a6:	f003 0302 	and.w	r3, r3, #2
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d101      	bne.n	800f7b2 <LL_RCC_LSE_IsReady+0x18>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e000      	b.n	800f7b4 <LL_RCC_LSE_IsReady+0x1a>
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <LL_RCC_LSI1_Enable>:
{
 800f7be:	b480      	push	{r7}
 800f7c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800f7c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7ce:	f043 0301 	orr.w	r3, r3, #1
 800f7d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f7d6:	bf00      	nop
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <LL_RCC_LSI1_Disable>:
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800f7e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7f0:	f023 0301 	bic.w	r3, r3, #1
 800f7f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f7f8:	bf00      	nop
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <LL_RCC_LSI1_IsReady>:
{
 800f802:	b480      	push	{r7}
 800f804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800f806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f80a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f80e:	f003 0302 	and.w	r3, r3, #2
 800f812:	2b02      	cmp	r3, #2
 800f814:	d101      	bne.n	800f81a <LL_RCC_LSI1_IsReady+0x18>
 800f816:	2301      	movs	r3, #1
 800f818:	e000      	b.n	800f81c <LL_RCC_LSI1_IsReady+0x1a>
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <LL_RCC_LSI2_Enable>:
{
 800f826:	b480      	push	{r7}
 800f828:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f82a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f82e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f836:	f043 0304 	orr.w	r3, r3, #4
 800f83a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f83e:	bf00      	nop
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <LL_RCC_LSI2_Disable>:
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f84c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f858:	f023 0304 	bic.w	r3, r3, #4
 800f85c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f860:	bf00      	nop
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <LL_RCC_LSI2_IsReady>:
{
 800f86a:	b480      	push	{r7}
 800f86c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800f86e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f876:	f003 0308 	and.w	r3, r3, #8
 800f87a:	2b08      	cmp	r3, #8
 800f87c:	d101      	bne.n	800f882 <LL_RCC_LSI2_IsReady+0x18>
 800f87e:	2301      	movs	r3, #1
 800f880:	e000      	b.n	800f884 <LL_RCC_LSI2_IsReady+0x1a>
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <LL_RCC_LSI2_SetTrimming>:
{
 800f88e:	b480      	push	{r7}
 800f890:	b083      	sub	sp, #12
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800f896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f89a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f89e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	021b      	lsls	r3, r3, #8
 800f8a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <LL_RCC_MSI_Enable>:
{
 800f8bc:	b480      	push	{r7}
 800f8be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f8c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8ca:	f043 0301 	orr.w	r3, r3, #1
 800f8ce:	6013      	str	r3, [r2, #0]
}
 800f8d0:	bf00      	nop
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <LL_RCC_MSI_Disable>:
{
 800f8da:	b480      	push	{r7}
 800f8dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f8de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8e8:	f023 0301 	bic.w	r3, r3, #1
 800f8ec:	6013      	str	r3, [r2, #0]
}
 800f8ee:	bf00      	nop
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <LL_RCC_MSI_IsReady>:
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f8fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 0302 	and.w	r3, r3, #2
 800f906:	2b02      	cmp	r3, #2
 800f908:	d101      	bne.n	800f90e <LL_RCC_MSI_IsReady+0x16>
 800f90a:	2301      	movs	r3, #1
 800f90c:	e000      	b.n	800f910 <LL_RCC_MSI_IsReady+0x18>
 800f90e:	2300      	movs	r3, #0
}
 800f910:	4618      	mov	r0, r3
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <LL_RCC_MSI_SetRange>:
{
 800f91a:	b480      	push	{r7}
 800f91c:	b083      	sub	sp, #12
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800f922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f92c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4313      	orrs	r3, r2
 800f934:	600b      	str	r3, [r1, #0]
}
 800f936:	bf00      	nop
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr

0800f942 <LL_RCC_MSI_GetRange>:
{
 800f942:	b480      	push	{r7}
 800f944:	b083      	sub	sp, #12
 800f946:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800f948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f952:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2bb0      	cmp	r3, #176	@ 0xb0
 800f958:	d901      	bls.n	800f95e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800f95a:	23b0      	movs	r3, #176	@ 0xb0
 800f95c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800f95e:	687b      	ldr	r3, [r7, #4]
}
 800f960:	4618      	mov	r0, r3
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <LL_RCC_MSI_SetCalibTrimming>:
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	021b      	lsls	r3, r3, #8
 800f982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f986:	4313      	orrs	r3, r2
 800f988:	604b      	str	r3, [r1, #4]
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <LL_RCC_SetSysClkSource>:
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f99e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	f023 0203 	bic.w	r2, r3, #3
 800f9a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	608b      	str	r3, [r1, #8]
}
 800f9b2:	bf00      	nop
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <LL_RCC_GetSysClkSource>:
{
 800f9be:	b480      	push	{r7}
 800f9c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f9c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	f003 030c 	and.w	r3, r3, #12
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <LL_RCC_SetAHBPrescaler>:
{
 800f9d6:	b480      	push	{r7}
 800f9d8:	b083      	sub	sp, #12
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f9de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f9e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	608b      	str	r3, [r1, #8]
}
 800f9f2:	bf00      	nop
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <LL_C2_RCC_SetAHBPrescaler>:
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b083      	sub	sp, #12
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800fa06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fa0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800fa1e:	bf00      	nop
 800fa20:	370c      	adds	r7, #12
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr

0800fa2a <LL_RCC_SetAHB4Prescaler>:
{
 800fa2a:	b480      	push	{r7}
 800fa2c:	b083      	sub	sp, #12
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800fa32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fa3a:	f023 020f 	bic.w	r2, r3, #15
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	091b      	lsrs	r3, r3, #4
 800fa42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa46:	4313      	orrs	r3, r2
 800fa48:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <LL_RCC_SetAPB1Prescaler>:
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800fa60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800fa6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	608b      	str	r3, [r1, #8]
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <LL_RCC_SetAPB2Prescaler>:
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800fa88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800fa92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	608b      	str	r3, [r1, #8]
}
 800fa9c:	bf00      	nop
 800fa9e:	370c      	adds	r7, #12
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <LL_RCC_GetAHBPrescaler>:
{
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800faac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <LL_RCC_GetAHB4Prescaler>:
{
 800fac0:	b480      	push	{r7}
 800fac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800fac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fac8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800facc:	011b      	lsls	r3, r3, #4
 800face:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <LL_RCC_GetAPB1Prescaler>:
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800fae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800faea:	4618      	mov	r0, r3
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr

0800faf4 <LL_RCC_GetAPB2Prescaler>:
{
 800faf4:	b480      	push	{r7}
 800faf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800faf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800fb10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb1e:	6013      	str	r3, [r2, #0]
}
 800fb20:	bf00      	nop
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800fb2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb3c:	6013      	str	r3, [r2, #0]
}
 800fb3e:	bf00      	nop
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800fb4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb5a:	d101      	bne.n	800fb60 <LL_RCC_PLL_IsReady+0x18>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e000      	b.n	800fb62 <LL_RCC_PLL_IsReady+0x1a>
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800fb70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	0a1b      	lsrs	r3, r3, #8
 800fb78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800fb86:	b480      	push	{r7}
 800fb88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800fb8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800fba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800fbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	f003 0303 	and.w	r3, r3, #3
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr

0800fbce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800fbd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbe0:	d101      	bne.n	800fbe6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e000      	b.n	800fbe8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800fbf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fbfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc06:	d101      	bne.n	800fc0c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e000      	b.n	800fc0e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800fc1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fc24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fc28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc2c:	d101      	bne.n	800fc32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e000      	b.n	800fc34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr

0800fc3e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800fc3e:	b480      	push	{r7}
 800fc40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800fc42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc50:	d101      	bne.n	800fc56 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800fc52:	2301      	movs	r3, #1
 800fc54:	e000      	b.n	800fc58 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800fc62:	b480      	push	{r7}
 800fc64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800fc66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fc70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fc74:	d101      	bne.n	800fc7a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800fc76:	2301      	movs	r3, #1
 800fc78:	e000      	b.n	800fc7c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
	...

0800fc88 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc88:	b590      	push	{r4, r7, lr}
 800fc8a:	b08d      	sub	sp, #52	@ 0x34
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc96:	2301      	movs	r3, #1
 800fc98:	e363      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f003 0320 	and.w	r3, r3, #32
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 808d 	beq.w	800fdc2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fca8:	f7ff fe89 	bl	800f9be <LL_RCC_GetSysClkSource>
 800fcac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fcae:	f7ff ff82 	bl	800fbb6 <LL_RCC_PLL_GetMainSource>
 800fcb2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800fcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d005      	beq.n	800fcc6 <HAL_RCC_OscConfig+0x3e>
 800fcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbc:	2b0c      	cmp	r3, #12
 800fcbe:	d147      	bne.n	800fd50 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800fcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d144      	bne.n	800fd50 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d101      	bne.n	800fcd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e347      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fcd6:	f7ff fe34 	bl	800f942 <LL_RCC_MSI_GetRange>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	429c      	cmp	r4, r3
 800fcde:	d914      	bls.n	800fd0a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 fd2f 	bl	8010748 <RCC_SetFlashLatencyFromMSIRange>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e336      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff fe0e 	bl	800f91a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7ff fe32 	bl	800f96c <LL_RCC_MSI_SetCalibTrimming>
 800fd08:	e013      	b.n	800fd32 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff fe03 	bl	800f91a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7ff fe27 	bl	800f96c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 fd10 	bl	8010748 <RCC_SetFlashLatencyFromMSIRange>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d001      	beq.n	800fd32 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e317      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fd32:	f000 fcc9 	bl	80106c8 <HAL_RCC_GetHCLKFreq>
 800fd36:	4603      	mov	r3, r0
 800fd38:	4aa4      	ldr	r2, [pc, #656]	@ (800ffcc <HAL_RCC_OscConfig+0x344>)
 800fd3a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800fd3c:	4ba4      	ldr	r3, [pc, #656]	@ (800ffd0 <HAL_RCC_OscConfig+0x348>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fe fc73 	bl	800e62c <HAL_InitTick>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d039      	beq.n	800fdc0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e308      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d01e      	beq.n	800fd96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fd58:	f7ff fdb0 	bl	800f8bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fd5c:	f7fe fcb4 	bl	800e6c8 <HAL_GetTick>
 800fd60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800fd62:	e008      	b.n	800fd76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd64:	f7fe fcb0 	bl	800e6c8 <HAL_GetTick>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d901      	bls.n	800fd76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e2f5      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800fd76:	f7ff fdbf 	bl	800f8f8 <LL_RCC_MSI_IsReady>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d0f1      	beq.n	800fd64 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff fdc8 	bl	800f91a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7ff fdec 	bl	800f96c <LL_RCC_MSI_SetCalibTrimming>
 800fd94:	e015      	b.n	800fdc2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd96:	f7ff fda0 	bl	800f8da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fd9a:	f7fe fc95 	bl	800e6c8 <HAL_GetTick>
 800fd9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800fda0:	e008      	b.n	800fdb4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fda2:	f7fe fc91 	bl	800e6c8 <HAL_GetTick>
 800fda6:	4602      	mov	r2, r0
 800fda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d901      	bls.n	800fdb4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	e2d6      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800fdb4:	f7ff fda0 	bl	800f8f8 <LL_RCC_MSI_IsReady>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1f1      	bne.n	800fda2 <HAL_RCC_OscConfig+0x11a>
 800fdbe:	e000      	b.n	800fdc2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800fdc0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f003 0301 	and.w	r3, r3, #1
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d047      	beq.n	800fe5e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fdce:	f7ff fdf6 	bl	800f9be <LL_RCC_GetSysClkSource>
 800fdd2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fdd4:	f7ff feef 	bl	800fbb6 <LL_RCC_PLL_GetMainSource>
 800fdd8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800fdda:	6a3b      	ldr	r3, [r7, #32]
 800fddc:	2b08      	cmp	r3, #8
 800fdde:	d005      	beq.n	800fdec <HAL_RCC_OscConfig+0x164>
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	2b0c      	cmp	r3, #12
 800fde4:	d108      	bne.n	800fdf8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d105      	bne.n	800fdf8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d134      	bne.n	800fe5e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e2b4      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe00:	d102      	bne.n	800fe08 <HAL_RCC_OscConfig+0x180>
 800fe02:	f7ff fbdd 	bl	800f5c0 <LL_RCC_HSE_Enable>
 800fe06:	e001      	b.n	800fe0c <HAL_RCC_OscConfig+0x184>
 800fe08:	f7ff fbe9 	bl	800f5de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d012      	beq.n	800fe3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe14:	f7fe fc58 	bl	800e6c8 <HAL_GetTick>
 800fe18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800fe1a:	e008      	b.n	800fe2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe1c:	f7fe fc54 	bl	800e6c8 <HAL_GetTick>
 800fe20:	4602      	mov	r2, r0
 800fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	2b64      	cmp	r3, #100	@ 0x64
 800fe28:	d901      	bls.n	800fe2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	e299      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800fe2e:	f7ff fbe5 	bl	800f5fc <LL_RCC_HSE_IsReady>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d0f1      	beq.n	800fe1c <HAL_RCC_OscConfig+0x194>
 800fe38:	e011      	b.n	800fe5e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe3a:	f7fe fc45 	bl	800e6c8 <HAL_GetTick>
 800fe3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800fe40:	e008      	b.n	800fe54 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe42:	f7fe fc41 	bl	800e6c8 <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	2b64      	cmp	r3, #100	@ 0x64
 800fe4e:	d901      	bls.n	800fe54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e286      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800fe54:	f7ff fbd2 	bl	800f5fc <LL_RCC_HSE_IsReady>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1f1      	bne.n	800fe42 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f003 0302 	and.w	r3, r3, #2
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d04c      	beq.n	800ff04 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe6a:	f7ff fda8 	bl	800f9be <LL_RCC_GetSysClkSource>
 800fe6e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fe70:	f7ff fea1 	bl	800fbb6 <LL_RCC_PLL_GetMainSource>
 800fe74:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	2b04      	cmp	r3, #4
 800fe7a:	d005      	beq.n	800fe88 <HAL_RCC_OscConfig+0x200>
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	2b0c      	cmp	r3, #12
 800fe80:	d10e      	bne.n	800fea0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d10b      	bne.n	800fea0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d101      	bne.n	800fe94 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	e266      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7ff fbf1 	bl	800f680 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800fe9e:	e031      	b.n	800ff04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d019      	beq.n	800fedc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fea8:	f7ff fbba 	bl	800f620 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800feac:	f7fe fc0c 	bl	800e6c8 <HAL_GetTick>
 800feb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800feb2:	e008      	b.n	800fec6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800feb4:	f7fe fc08 	bl	800e6c8 <HAL_GetTick>
 800feb8:	4602      	mov	r2, r0
 800feba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d901      	bls.n	800fec6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800fec2:	2303      	movs	r3, #3
 800fec4:	e24d      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800fec6:	f7ff fbc9 	bl	800f65c <LL_RCC_HSI_IsReady>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d0f1      	beq.n	800feb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7ff fbd3 	bl	800f680 <LL_RCC_HSI_SetCalibTrimming>
 800feda:	e013      	b.n	800ff04 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fedc:	f7ff fbaf 	bl	800f63e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fee0:	f7fe fbf2 	bl	800e6c8 <HAL_GetTick>
 800fee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800fee6:	e008      	b.n	800fefa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fee8:	f7fe fbee 	bl	800e6c8 <HAL_GetTick>
 800feec:	4602      	mov	r2, r0
 800feee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d901      	bls.n	800fefa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800fef6:	2303      	movs	r3, #3
 800fef8:	e233      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800fefa:	f7ff fbaf 	bl	800f65c <LL_RCC_HSI_IsReady>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1f1      	bne.n	800fee8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f003 0308 	and.w	r3, r3, #8
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 80a3 	beq.w	8010064 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	695b      	ldr	r3, [r3, #20]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d076      	beq.n	8010014 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f003 0310 	and.w	r3, r3, #16
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d046      	beq.n	800ffc0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ff32:	f7ff fc66 	bl	800f802 <LL_RCC_LSI1_IsReady>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d113      	bne.n	800ff64 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ff3c:	f7ff fc3f 	bl	800f7be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ff40:	f7fe fbc2 	bl	800e6c8 <HAL_GetTick>
 800ff44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ff46:	e008      	b.n	800ff5a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ff48:	f7fe fbbe 	bl	800e6c8 <HAL_GetTick>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d901      	bls.n	800ff5a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ff56:	2303      	movs	r3, #3
 800ff58:	e203      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ff5a:	f7ff fc52 	bl	800f802 <LL_RCC_LSI1_IsReady>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d0f1      	beq.n	800ff48 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ff64:	f7ff fc5f 	bl	800f826 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff68:	f7fe fbae 	bl	800e6c8 <HAL_GetTick>
 800ff6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ff6e:	e008      	b.n	800ff82 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ff70:	f7fe fbaa 	bl	800e6c8 <HAL_GetTick>
 800ff74:	4602      	mov	r2, r0
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	1ad3      	subs	r3, r2, r3
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d901      	bls.n	800ff82 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ff7e:	2303      	movs	r3, #3
 800ff80:	e1ef      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ff82:	f7ff fc72 	bl	800f86a <LL_RCC_LSI2_IsReady>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d0f1      	beq.n	800ff70 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7ff fc7c 	bl	800f88e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ff96:	f7ff fc23 	bl	800f7e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff9a:	f7fe fb95 	bl	800e6c8 <HAL_GetTick>
 800ff9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ffa0:	e008      	b.n	800ffb4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ffa2:	f7fe fb91 	bl	800e6c8 <HAL_GetTick>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d901      	bls.n	800ffb4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	e1d6      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ffb4:	f7ff fc25 	bl	800f802 <LL_RCC_LSI1_IsReady>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1f1      	bne.n	800ffa2 <HAL_RCC_OscConfig+0x31a>
 800ffbe:	e051      	b.n	8010064 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ffc0:	f7ff fbfd 	bl	800f7be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffc4:	f7fe fb80 	bl	800e6c8 <HAL_GetTick>
 800ffc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ffca:	e00c      	b.n	800ffe6 <HAL_RCC_OscConfig+0x35e>
 800ffcc:	20000018 	.word	0x20000018
 800ffd0:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ffd4:	f7fe fb78 	bl	800e6c8 <HAL_GetTick>
 800ffd8:	4602      	mov	r2, r0
 800ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d901      	bls.n	800ffe6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e1bd      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ffe6:	f7ff fc0c 	bl	800f802 <LL_RCC_LSI1_IsReady>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d0f1      	beq.n	800ffd4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800fff0:	f7ff fc2a 	bl	800f848 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800fff4:	e008      	b.n	8010008 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800fff6:	f7fe fb67 	bl	800e6c8 <HAL_GetTick>
 800fffa:	4602      	mov	r2, r0
 800fffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffe:	1ad3      	subs	r3, r2, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d901      	bls.n	8010008 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8010004:	2303      	movs	r3, #3
 8010006:	e1ac      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8010008:	f7ff fc2f 	bl	800f86a <LL_RCC_LSI2_IsReady>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1f1      	bne.n	800fff6 <HAL_RCC_OscConfig+0x36e>
 8010012:	e027      	b.n	8010064 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8010014:	f7ff fc18 	bl	800f848 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010018:	f7fe fb56 	bl	800e6c8 <HAL_GetTick>
 801001c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801001e:	e008      	b.n	8010032 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8010020:	f7fe fb52 	bl	800e6c8 <HAL_GetTick>
 8010024:	4602      	mov	r2, r0
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	2b03      	cmp	r3, #3
 801002c:	d901      	bls.n	8010032 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801002e:	2303      	movs	r3, #3
 8010030:	e197      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8010032:	f7ff fc1a 	bl	800f86a <LL_RCC_LSI2_IsReady>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1f1      	bne.n	8010020 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801003c:	f7ff fbd0 	bl	800f7e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010040:	f7fe fb42 	bl	800e6c8 <HAL_GetTick>
 8010044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8010046:	e008      	b.n	801005a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8010048:	f7fe fb3e 	bl	800e6c8 <HAL_GetTick>
 801004c:	4602      	mov	r2, r0
 801004e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	2b02      	cmp	r3, #2
 8010054:	d901      	bls.n	801005a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8010056:	2303      	movs	r3, #3
 8010058:	e183      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801005a:	f7ff fbd2 	bl	800f802 <LL_RCC_LSI1_IsReady>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1f1      	bne.n	8010048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f003 0304 	and.w	r3, r3, #4
 801006c:	2b00      	cmp	r3, #0
 801006e:	d05b      	beq.n	8010128 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010070:	4ba7      	ldr	r3, [pc, #668]	@ (8010310 <HAL_RCC_OscConfig+0x688>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010078:	2b00      	cmp	r3, #0
 801007a:	d114      	bne.n	80100a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801007c:	f7ff fa70 	bl	800f560 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010080:	f7fe fb22 	bl	800e6c8 <HAL_GetTick>
 8010084:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010086:	e008      	b.n	801009a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010088:	f7fe fb1e 	bl	800e6c8 <HAL_GetTick>
 801008c:	4602      	mov	r2, r0
 801008e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	2b02      	cmp	r3, #2
 8010094:	d901      	bls.n	801009a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8010096:	2303      	movs	r3, #3
 8010098:	e163      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801009a:	4b9d      	ldr	r3, [pc, #628]	@ (8010310 <HAL_RCC_OscConfig+0x688>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d0f0      	beq.n	8010088 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d102      	bne.n	80100b4 <HAL_RCC_OscConfig+0x42c>
 80100ae:	f7ff fb30 	bl	800f712 <LL_RCC_LSE_Enable>
 80100b2:	e00c      	b.n	80100ce <HAL_RCC_OscConfig+0x446>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	2b05      	cmp	r3, #5
 80100ba:	d104      	bne.n	80100c6 <HAL_RCC_OscConfig+0x43e>
 80100bc:	f7ff fb4b 	bl	800f756 <LL_RCC_LSE_EnableBypass>
 80100c0:	f7ff fb27 	bl	800f712 <LL_RCC_LSE_Enable>
 80100c4:	e003      	b.n	80100ce <HAL_RCC_OscConfig+0x446>
 80100c6:	f7ff fb35 	bl	800f734 <LL_RCC_LSE_Disable>
 80100ca:	f7ff fb55 	bl	800f778 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d014      	beq.n	8010100 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80100d6:	f7fe faf7 	bl	800e6c8 <HAL_GetTick>
 80100da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80100dc:	e00a      	b.n	80100f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100de:	f7fe faf3 	bl	800e6c8 <HAL_GetTick>
 80100e2:	4602      	mov	r2, r0
 80100e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d901      	bls.n	80100f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80100f0:	2303      	movs	r3, #3
 80100f2:	e136      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80100f4:	f7ff fb51 	bl	800f79a <LL_RCC_LSE_IsReady>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d0ef      	beq.n	80100de <HAL_RCC_OscConfig+0x456>
 80100fe:	e013      	b.n	8010128 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010100:	f7fe fae2 	bl	800e6c8 <HAL_GetTick>
 8010104:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8010106:	e00a      	b.n	801011e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010108:	f7fe fade 	bl	800e6c8 <HAL_GetTick>
 801010c:	4602      	mov	r2, r0
 801010e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010116:	4293      	cmp	r3, r2
 8010118:	d901      	bls.n	801011e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801011a:	2303      	movs	r3, #3
 801011c:	e121      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801011e:	f7ff fb3c 	bl	800f79a <LL_RCC_LSE_IsReady>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1ef      	bne.n	8010108 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010130:	2b00      	cmp	r3, #0
 8010132:	d02c      	beq.n	801018e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010138:	2b00      	cmp	r3, #0
 801013a:	d014      	beq.n	8010166 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801013c:	f7ff fab5 	bl	800f6aa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010140:	f7fe fac2 	bl	800e6c8 <HAL_GetTick>
 8010144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8010146:	e008      	b.n	801015a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010148:	f7fe fabe 	bl	800e6c8 <HAL_GetTick>
 801014c:	4602      	mov	r2, r0
 801014e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	2b02      	cmp	r3, #2
 8010154:	d901      	bls.n	801015a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8010156:	2303      	movs	r3, #3
 8010158:	e103      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801015a:	f7ff fac8 	bl	800f6ee <LL_RCC_HSI48_IsReady>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0f1      	beq.n	8010148 <HAL_RCC_OscConfig+0x4c0>
 8010164:	e013      	b.n	801018e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010166:	f7ff fab1 	bl	800f6cc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801016a:	f7fe faad 	bl	800e6c8 <HAL_GetTick>
 801016e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8010170:	e008      	b.n	8010184 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010172:	f7fe faa9 	bl	800e6c8 <HAL_GetTick>
 8010176:	4602      	mov	r2, r0
 8010178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	2b02      	cmp	r3, #2
 801017e:	d901      	bls.n	8010184 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8010180:	2303      	movs	r3, #3
 8010182:	e0ee      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8010184:	f7ff fab3 	bl	800f6ee <LL_RCC_HSI48_IsReady>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1f1      	bne.n	8010172 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 80e4 	beq.w	8010360 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010198:	f7ff fc11 	bl	800f9be <LL_RCC_GetSysClkSource>
 801019c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801019e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	f040 80b4 	bne.w	8010318 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f003 0203 	and.w	r2, r3, #3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d123      	bne.n	8010206 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d11c      	bne.n	8010206 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	0a1b      	lsrs	r3, r3, #8
 80101d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80101d8:	429a      	cmp	r2, r3
 80101da:	d114      	bne.n	8010206 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d10d      	bne.n	8010206 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d106      	bne.n	8010206 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8010202:	429a      	cmp	r2, r3
 8010204:	d05d      	beq.n	80102c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	2b0c      	cmp	r3, #12
 801020a:	d058      	beq.n	80102be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801020c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	e0a1      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801021e:	f7ff fc84 	bl	800fb2a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010222:	f7fe fa51 	bl	800e6c8 <HAL_GetTick>
 8010226:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010228:	e008      	b.n	801023c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801022a:	f7fe fa4d 	bl	800e6c8 <HAL_GetTick>
 801022e:	4602      	mov	r2, r0
 8010230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	2b02      	cmp	r3, #2
 8010236:	d901      	bls.n	801023c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8010238:	2303      	movs	r3, #3
 801023a:	e092      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801023c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1ef      	bne.n	801022a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801024a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801024e:	68da      	ldr	r2, [r3, #12]
 8010250:	4b30      	ldr	r3, [pc, #192]	@ (8010314 <HAL_RCC_OscConfig+0x68c>)
 8010252:	4013      	ands	r3, r2
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801025c:	4311      	orrs	r1, r2
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010262:	0212      	lsls	r2, r2, #8
 8010264:	4311      	orrs	r1, r2
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801026a:	4311      	orrs	r1, r2
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010270:	4311      	orrs	r1, r2
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8010276:	430a      	orrs	r2, r1
 8010278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801027c:	4313      	orrs	r3, r2
 801027e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010280:	f7ff fc44 	bl	800fb0c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801028e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010294:	f7fe fa18 	bl	800e6c8 <HAL_GetTick>
 8010298:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801029a:	e008      	b.n	80102ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801029c:	f7fe fa14 	bl	800e6c8 <HAL_GetTick>
 80102a0:	4602      	mov	r2, r0
 80102a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d901      	bls.n	80102ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e059      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d0ef      	beq.n	801029c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80102bc:	e050      	b.n	8010360 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e04f      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d147      	bne.n	8010360 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80102d0:	f7ff fc1c 	bl	800fb0c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80102d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80102de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80102e4:	f7fe f9f0 	bl	800e6c8 <HAL_GetTick>
 80102e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102ea:	e008      	b.n	80102fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102ec:	f7fe f9ec 	bl	800e6c8 <HAL_GetTick>
 80102f0:	4602      	mov	r2, r0
 80102f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d901      	bls.n	80102fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e031      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010308:	2b00      	cmp	r3, #0
 801030a:	d0ef      	beq.n	80102ec <HAL_RCC_OscConfig+0x664>
 801030c:	e028      	b.n	8010360 <HAL_RCC_OscConfig+0x6d8>
 801030e:	bf00      	nop
 8010310:	58000400 	.word	0x58000400
 8010314:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	2b0c      	cmp	r3, #12
 801031c:	d01e      	beq.n	801035c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801031e:	f7ff fc04 	bl	800fb2a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010322:	f7fe f9d1 	bl	800e6c8 <HAL_GetTick>
 8010326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010328:	e008      	b.n	801033c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801032a:	f7fe f9cd 	bl	800e6c8 <HAL_GetTick>
 801032e:	4602      	mov	r2, r0
 8010330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	2b02      	cmp	r3, #2
 8010336:	d901      	bls.n	801033c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8010338:	2303      	movs	r3, #3
 801033a:	e012      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801033c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1ef      	bne.n	801032a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801034a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801034e:	68da      	ldr	r2, [r3, #12]
 8010350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010354:	4b05      	ldr	r3, [pc, #20]	@ (801036c <HAL_RCC_OscConfig+0x6e4>)
 8010356:	4013      	ands	r3, r2
 8010358:	60cb      	str	r3, [r1, #12]
 801035a:	e001      	b.n	8010360 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	e000      	b.n	8010362 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3734      	adds	r7, #52	@ 0x34
 8010366:	46bd      	mov	sp, r7
 8010368:	bd90      	pop	{r4, r7, pc}
 801036a:	bf00      	nop
 801036c:	eefefffc 	.word	0xeefefffc

08010370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010380:	2301      	movs	r3, #1
 8010382:	e12d      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010384:	4b98      	ldr	r3, [pc, #608]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 0307 	and.w	r3, r3, #7
 801038c:	683a      	ldr	r2, [r7, #0]
 801038e:	429a      	cmp	r2, r3
 8010390:	d91b      	bls.n	80103ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010392:	4b95      	ldr	r3, [pc, #596]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f023 0207 	bic.w	r2, r3, #7
 801039a:	4993      	ldr	r1, [pc, #588]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	4313      	orrs	r3, r2
 80103a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103a2:	f7fe f991 	bl	800e6c8 <HAL_GetTick>
 80103a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80103a8:	e008      	b.n	80103bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80103aa:	f7fe f98d 	bl	800e6c8 <HAL_GetTick>
 80103ae:	4602      	mov	r2, r0
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d901      	bls.n	80103bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80103b8:	2303      	movs	r3, #3
 80103ba:	e111      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80103bc:	4b8a      	ldr	r3, [pc, #552]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f003 0307 	and.w	r3, r3, #7
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d1ef      	bne.n	80103aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f003 0302 	and.w	r3, r3, #2
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d016      	beq.n	8010404 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff fafb 	bl	800f9d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80103e0:	f7fe f972 	bl	800e6c8 <HAL_GetTick>
 80103e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80103e6:	e008      	b.n	80103fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80103e8:	f7fe f96e 	bl	800e6c8 <HAL_GetTick>
 80103ec:	4602      	mov	r2, r0
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d901      	bls.n	80103fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80103f6:	2303      	movs	r3, #3
 80103f8:	e0f2      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80103fa:	f7ff fbe8 	bl	800fbce <LL_RCC_IsActiveFlag_HPRE>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d0f1      	beq.n	80103e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f003 0320 	and.w	r3, r3, #32
 801040c:	2b00      	cmp	r3, #0
 801040e:	d016      	beq.n	801043e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff faf2 	bl	800f9fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801041a:	f7fe f955 	bl	800e6c8 <HAL_GetTick>
 801041e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8010420:	e008      	b.n	8010434 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8010422:	f7fe f951 	bl	800e6c8 <HAL_GetTick>
 8010426:	4602      	mov	r2, r0
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	2b02      	cmp	r3, #2
 801042e:	d901      	bls.n	8010434 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8010430:	2303      	movs	r3, #3
 8010432:	e0d5      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8010434:	f7ff fbdd 	bl	800fbf2 <LL_RCC_IsActiveFlag_C2HPRE>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d0f1      	beq.n	8010422 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010446:	2b00      	cmp	r3, #0
 8010448:	d016      	beq.n	8010478 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	699b      	ldr	r3, [r3, #24]
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff faeb 	bl	800fa2a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8010454:	f7fe f938 	bl	800e6c8 <HAL_GetTick>
 8010458:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801045a:	e008      	b.n	801046e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801045c:	f7fe f934 	bl	800e6c8 <HAL_GetTick>
 8010460:	4602      	mov	r2, r0
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	2b02      	cmp	r3, #2
 8010468:	d901      	bls.n	801046e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801046a:	2303      	movs	r3, #3
 801046c:	e0b8      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801046e:	f7ff fbd3 	bl	800fc18 <LL_RCC_IsActiveFlag_SHDHPRE>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d0f1      	beq.n	801045c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 0304 	and.w	r3, r3, #4
 8010480:	2b00      	cmp	r3, #0
 8010482:	d016      	beq.n	80104b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fae5 	bl	800fa58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801048e:	f7fe f91b 	bl	800e6c8 <HAL_GetTick>
 8010492:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8010494:	e008      	b.n	80104a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8010496:	f7fe f917 	bl	800e6c8 <HAL_GetTick>
 801049a:	4602      	mov	r2, r0
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	2b02      	cmp	r3, #2
 80104a2:	d901      	bls.n	80104a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80104a4:	2303      	movs	r3, #3
 80104a6:	e09b      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80104a8:	f7ff fbc9 	bl	800fc3e <LL_RCC_IsActiveFlag_PPRE1>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d0f1      	beq.n	8010496 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f003 0308 	and.w	r3, r3, #8
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d017      	beq.n	80104ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	691b      	ldr	r3, [r3, #16]
 80104c2:	00db      	lsls	r3, r3, #3
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fadb 	bl	800fa80 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80104ca:	f7fe f8fd 	bl	800e6c8 <HAL_GetTick>
 80104ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80104d0:	e008      	b.n	80104e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80104d2:	f7fe f8f9 	bl	800e6c8 <HAL_GetTick>
 80104d6:	4602      	mov	r2, r0
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	2b02      	cmp	r3, #2
 80104de:	d901      	bls.n	80104e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80104e0:	2303      	movs	r3, #3
 80104e2:	e07d      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80104e4:	f7ff fbbd 	bl	800fc62 <LL_RCC_IsActiveFlag_PPRE2>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d0f1      	beq.n	80104d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0301 	and.w	r3, r3, #1
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d043      	beq.n	8010582 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d106      	bne.n	8010510 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8010502:	f7ff f87b 	bl	800f5fc <LL_RCC_HSE_IsReady>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d11e      	bne.n	801054a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	e067      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	2b03      	cmp	r3, #3
 8010516:	d106      	bne.n	8010526 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8010518:	f7ff fb16 	bl	800fb48 <LL_RCC_PLL_IsReady>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d113      	bne.n	801054a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8010522:	2301      	movs	r3, #1
 8010524:	e05c      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d106      	bne.n	801053c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801052e:	f7ff f9e3 	bl	800f8f8 <LL_RCC_MSI_IsReady>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d108      	bne.n	801054a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8010538:	2301      	movs	r3, #1
 801053a:	e051      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801053c:	f7ff f88e 	bl	800f65c <LL_RCC_HSI_IsReady>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8010546:	2301      	movs	r3, #1
 8010548:	e04a      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff fa21 	bl	800f996 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010554:	f7fe f8b8 	bl	800e6c8 <HAL_GetTick>
 8010558:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801055a:	e00a      	b.n	8010572 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801055c:	f7fe f8b4 	bl	800e6c8 <HAL_GetTick>
 8010560:	4602      	mov	r2, r0
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	f241 3288 	movw	r2, #5000	@ 0x1388
 801056a:	4293      	cmp	r3, r2
 801056c:	d901      	bls.n	8010572 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801056e:	2303      	movs	r3, #3
 8010570:	e036      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010572:	f7ff fa24 	bl	800f9be <LL_RCC_GetSysClkSource>
 8010576:	4602      	mov	r2, r0
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	429a      	cmp	r2, r3
 8010580:	d1ec      	bne.n	801055c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010582:	4b19      	ldr	r3, [pc, #100]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f003 0307 	and.w	r3, r3, #7
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	429a      	cmp	r2, r3
 801058e:	d21b      	bcs.n	80105c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010590:	4b15      	ldr	r3, [pc, #84]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f023 0207 	bic.w	r2, r3, #7
 8010598:	4913      	ldr	r1, [pc, #76]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	4313      	orrs	r3, r2
 801059e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105a0:	f7fe f892 	bl	800e6c8 <HAL_GetTick>
 80105a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105a6:	e008      	b.n	80105ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80105a8:	f7fe f88e 	bl	800e6c8 <HAL_GetTick>
 80105ac:	4602      	mov	r2, r0
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	d901      	bls.n	80105ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80105b6:	2303      	movs	r3, #3
 80105b8:	e012      	b.n	80105e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105ba:	4b0b      	ldr	r3, [pc, #44]	@ (80105e8 <HAL_RCC_ClockConfig+0x278>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f003 0307 	and.w	r3, r3, #7
 80105c2:	683a      	ldr	r2, [r7, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d1ef      	bne.n	80105a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80105c8:	f000 f87e 	bl	80106c8 <HAL_RCC_GetHCLKFreq>
 80105cc:	4603      	mov	r3, r0
 80105ce:	4a07      	ldr	r2, [pc, #28]	@ (80105ec <HAL_RCC_ClockConfig+0x27c>)
 80105d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80105d2:	f7fe f885 	bl	800e6e0 <HAL_GetTickPrio>
 80105d6:	4603      	mov	r3, r0
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fe f827 	bl	800e62c <HAL_InitTick>
 80105de:	4603      	mov	r3, r0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	58004000 	.word	0x58004000
 80105ec:	20000018 	.word	0x20000018

080105f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80105f6:	f7ff f9e2 	bl	800f9be <LL_RCC_GetSysClkSource>
 80105fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d10a      	bne.n	8010618 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8010602:	f7ff f99e 	bl	800f942 <LL_RCC_MSI_GetRange>
 8010606:	4603      	mov	r3, r0
 8010608:	091b      	lsrs	r3, r3, #4
 801060a:	f003 030f 	and.w	r3, r3, #15
 801060e:	4a2b      	ldr	r2, [pc, #172]	@ (80106bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8010610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010614:	60fb      	str	r3, [r7, #12]
 8010616:	e04b      	b.n	80106b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2b04      	cmp	r3, #4
 801061c:	d102      	bne.n	8010624 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801061e:	4b28      	ldr	r3, [pc, #160]	@ (80106c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8010620:	60fb      	str	r3, [r7, #12]
 8010622:	e045      	b.n	80106b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b08      	cmp	r3, #8
 8010628:	d10a      	bne.n	8010640 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801062a:	f7fe ffb7 	bl	800f59c <LL_RCC_HSE_IsEnabledDiv2>
 801062e:	4603      	mov	r3, r0
 8010630:	2b01      	cmp	r3, #1
 8010632:	d102      	bne.n	801063a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8010634:	4b22      	ldr	r3, [pc, #136]	@ (80106c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8010636:	60fb      	str	r3, [r7, #12]
 8010638:	e03a      	b.n	80106b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801063a:	4b22      	ldr	r3, [pc, #136]	@ (80106c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801063c:	60fb      	str	r3, [r7, #12]
 801063e:	e037      	b.n	80106b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8010640:	f7ff fab9 	bl	800fbb6 <LL_RCC_PLL_GetMainSource>
 8010644:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b02      	cmp	r3, #2
 801064a:	d003      	beq.n	8010654 <HAL_RCC_GetSysClockFreq+0x64>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b03      	cmp	r3, #3
 8010650:	d003      	beq.n	801065a <HAL_RCC_GetSysClockFreq+0x6a>
 8010652:	e00d      	b.n	8010670 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8010654:	4b1a      	ldr	r3, [pc, #104]	@ (80106c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8010656:	60bb      	str	r3, [r7, #8]
        break;
 8010658:	e015      	b.n	8010686 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801065a:	f7fe ff9f 	bl	800f59c <LL_RCC_HSE_IsEnabledDiv2>
 801065e:	4603      	mov	r3, r0
 8010660:	2b01      	cmp	r3, #1
 8010662:	d102      	bne.n	801066a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8010664:	4b16      	ldr	r3, [pc, #88]	@ (80106c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8010666:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8010668:	e00d      	b.n	8010686 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801066a:	4b16      	ldr	r3, [pc, #88]	@ (80106c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801066c:	60bb      	str	r3, [r7, #8]
        break;
 801066e:	e00a      	b.n	8010686 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8010670:	f7ff f967 	bl	800f942 <LL_RCC_MSI_GetRange>
 8010674:	4603      	mov	r3, r0
 8010676:	091b      	lsrs	r3, r3, #4
 8010678:	f003 030f 	and.w	r3, r3, #15
 801067c:	4a0f      	ldr	r2, [pc, #60]	@ (80106bc <HAL_RCC_GetSysClockFreq+0xcc>)
 801067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010682:	60bb      	str	r3, [r7, #8]
        break;
 8010684:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8010686:	f7ff fa71 	bl	800fb6c <LL_RCC_PLL_GetN>
 801068a:	4602      	mov	r2, r0
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	fb03 f402 	mul.w	r4, r3, r2
 8010692:	f7ff fa84 	bl	800fb9e <LL_RCC_PLL_GetDivider>
 8010696:	4603      	mov	r3, r0
 8010698:	091b      	lsrs	r3, r3, #4
 801069a:	3301      	adds	r3, #1
 801069c:	fbb4 f4f3 	udiv	r4, r4, r3
 80106a0:	f7ff fa71 	bl	800fb86 <LL_RCC_PLL_GetR>
 80106a4:	4603      	mov	r3, r0
 80106a6:	0f5b      	lsrs	r3, r3, #29
 80106a8:	3301      	adds	r3, #1
 80106aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80106ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80106b0:	68fb      	ldr	r3, [r7, #12]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd90      	pop	{r4, r7, pc}
 80106ba:	bf00      	nop
 80106bc:	0801a7f8 	.word	0x0801a7f8
 80106c0:	00f42400 	.word	0x00f42400
 80106c4:	01e84800 	.word	0x01e84800

080106c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80106c8:	b598      	push	{r3, r4, r7, lr}
 80106ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80106cc:	f7ff ff90 	bl	80105f0 <HAL_RCC_GetSysClockFreq>
 80106d0:	4604      	mov	r4, r0
 80106d2:	f7ff f9e9 	bl	800faa8 <LL_RCC_GetAHBPrescaler>
 80106d6:	4603      	mov	r3, r0
 80106d8:	091b      	lsrs	r3, r3, #4
 80106da:	f003 030f 	and.w	r3, r3, #15
 80106de:	4a03      	ldr	r2, [pc, #12]	@ (80106ec <HAL_RCC_GetHCLKFreq+0x24>)
 80106e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	bd98      	pop	{r3, r4, r7, pc}
 80106ec:	0801a798 	.word	0x0801a798

080106f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80106f0:	b598      	push	{r3, r4, r7, lr}
 80106f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80106f4:	f7ff ffe8 	bl	80106c8 <HAL_RCC_GetHCLKFreq>
 80106f8:	4604      	mov	r4, r0
 80106fa:	f7ff f9ef 	bl	800fadc <LL_RCC_GetAPB1Prescaler>
 80106fe:	4603      	mov	r3, r0
 8010700:	0a1b      	lsrs	r3, r3, #8
 8010702:	f003 0307 	and.w	r3, r3, #7
 8010706:	4a04      	ldr	r2, [pc, #16]	@ (8010718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801070c:	f003 031f 	and.w	r3, r3, #31
 8010710:	fa24 f303 	lsr.w	r3, r4, r3
}
 8010714:	4618      	mov	r0, r3
 8010716:	bd98      	pop	{r3, r4, r7, pc}
 8010718:	0801a7d8 	.word	0x0801a7d8

0801071c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801071c:	b598      	push	{r3, r4, r7, lr}
 801071e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8010720:	f7ff ffd2 	bl	80106c8 <HAL_RCC_GetHCLKFreq>
 8010724:	4604      	mov	r4, r0
 8010726:	f7ff f9e5 	bl	800faf4 <LL_RCC_GetAPB2Prescaler>
 801072a:	4603      	mov	r3, r0
 801072c:	0adb      	lsrs	r3, r3, #11
 801072e:	f003 0307 	and.w	r3, r3, #7
 8010732:	4a04      	ldr	r2, [pc, #16]	@ (8010744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010738:	f003 031f 	and.w	r3, r3, #31
 801073c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8010740:	4618      	mov	r0, r3
 8010742:	bd98      	pop	{r3, r4, r7, pc}
 8010744:	0801a7d8 	.word	0x0801a7d8

08010748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2bb0      	cmp	r3, #176	@ 0xb0
 8010754:	d903      	bls.n	801075e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8010756:	4b15      	ldr	r3, [pc, #84]	@ (80107ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8010758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	e007      	b.n	801076e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	091b      	lsrs	r3, r3, #4
 8010762:	f003 030f 	and.w	r3, r3, #15
 8010766:	4a11      	ldr	r2, [pc, #68]	@ (80107ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8010768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801076c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801076e:	f7ff f9a7 	bl	800fac0 <LL_RCC_GetAHB4Prescaler>
 8010772:	4603      	mov	r3, r0
 8010774:	091b      	lsrs	r3, r3, #4
 8010776:	f003 030f 	and.w	r3, r3, #15
 801077a:	4a0d      	ldr	r2, [pc, #52]	@ (80107b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801077c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	fbb2 f3f3 	udiv	r3, r2, r3
 8010786:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	4a0a      	ldr	r2, [pc, #40]	@ (80107b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801078c:	fba2 2303 	umull	r2, r3, r2, r3
 8010790:	0c9c      	lsrs	r4, r3, #18
 8010792:	f7fe fef5 	bl	800f580 <HAL_PWREx_GetVoltageRange>
 8010796:	4603      	mov	r3, r0
 8010798:	4619      	mov	r1, r3
 801079a:	4620      	mov	r0, r4
 801079c:	f000 f80c 	bl	80107b8 <RCC_SetFlashLatency>
 80107a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd90      	pop	{r4, r7, pc}
 80107aa:	bf00      	nop
 80107ac:	0801a7f8 	.word	0x0801a7f8
 80107b0:	0801a798 	.word	0x0801a798
 80107b4:	431bde83 	.word	0x431bde83

080107b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80107b8:	b590      	push	{r4, r7, lr}
 80107ba:	b093      	sub	sp, #76	@ 0x4c
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80107c2:	4b37      	ldr	r3, [pc, #220]	@ (80108a0 <RCC_SetFlashLatency+0xe8>)
 80107c4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80107c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80107ce:	4a35      	ldr	r2, [pc, #212]	@ (80108a4 <RCC_SetFlashLatency+0xec>)
 80107d0:	f107 031c 	add.w	r3, r7, #28
 80107d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80107d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80107da:	4b33      	ldr	r3, [pc, #204]	@ (80108a8 <RCC_SetFlashLatency+0xf0>)
 80107dc:	f107 040c 	add.w	r4, r7, #12
 80107e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80107e6:	2300      	movs	r3, #0
 80107e8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107f0:	d11a      	bne.n	8010828 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80107f2:	2300      	movs	r3, #0
 80107f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80107f6:	e013      	b.n	8010820 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80107f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	3348      	adds	r3, #72	@ 0x48
 80107fe:	443b      	add	r3, r7
 8010800:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d807      	bhi.n	801081a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801080a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	3348      	adds	r3, #72	@ 0x48
 8010810:	443b      	add	r3, r7
 8010812:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010816:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8010818:	e020      	b.n	801085c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801081a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801081c:	3301      	adds	r3, #1
 801081e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010822:	2b03      	cmp	r3, #3
 8010824:	d9e8      	bls.n	80107f8 <RCC_SetFlashLatency+0x40>
 8010826:	e019      	b.n	801085c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010828:	2300      	movs	r3, #0
 801082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801082c:	e013      	b.n	8010856 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801082e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	3348      	adds	r3, #72	@ 0x48
 8010834:	443b      	add	r3, r7
 8010836:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	429a      	cmp	r2, r3
 801083e:	d807      	bhi.n	8010850 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	3348      	adds	r3, #72	@ 0x48
 8010846:	443b      	add	r3, r7
 8010848:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801084c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 801084e:	e005      	b.n	801085c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010852:	3301      	adds	r3, #1
 8010854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010858:	2b02      	cmp	r3, #2
 801085a:	d9e8      	bls.n	801082e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801085c:	4b13      	ldr	r3, [pc, #76]	@ (80108ac <RCC_SetFlashLatency+0xf4>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f023 0207 	bic.w	r2, r3, #7
 8010864:	4911      	ldr	r1, [pc, #68]	@ (80108ac <RCC_SetFlashLatency+0xf4>)
 8010866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010868:	4313      	orrs	r3, r2
 801086a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801086c:	f7fd ff2c 	bl	800e6c8 <HAL_GetTick>
 8010870:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010872:	e008      	b.n	8010886 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010874:	f7fd ff28 	bl	800e6c8 <HAL_GetTick>
 8010878:	4602      	mov	r2, r0
 801087a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	2b02      	cmp	r3, #2
 8010880:	d901      	bls.n	8010886 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8010882:	2303      	movs	r3, #3
 8010884:	e007      	b.n	8010896 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010886:	4b09      	ldr	r3, [pc, #36]	@ (80108ac <RCC_SetFlashLatency+0xf4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f003 0307 	and.w	r3, r3, #7
 801088e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010890:	429a      	cmp	r2, r3
 8010892:	d1ef      	bne.n	8010874 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	374c      	adds	r7, #76	@ 0x4c
 801089a:	46bd      	mov	sp, r7
 801089c:	bd90      	pop	{r4, r7, pc}
 801089e:	bf00      	nop
 80108a0:	0801a760 	.word	0x0801a760
 80108a4:	0801a770 	.word	0x0801a770
 80108a8:	0801a77c 	.word	0x0801a77c
 80108ac:	58004000 	.word	0x58004000

080108b0 <LL_RCC_LSE_IsEnabled>:
{
 80108b0:	b480      	push	{r7}
 80108b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80108b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108bc:	f003 0301 	and.w	r3, r3, #1
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d101      	bne.n	80108c8 <LL_RCC_LSE_IsEnabled+0x18>
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <LL_RCC_LSE_IsEnabled+0x1a>
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <LL_RCC_LSE_IsReady>:
{
 80108d4:	b480      	push	{r7}
 80108d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80108d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108e0:	f003 0302 	and.w	r3, r3, #2
 80108e4:	2b02      	cmp	r3, #2
 80108e6:	d101      	bne.n	80108ec <LL_RCC_LSE_IsReady+0x18>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e000      	b.n	80108ee <LL_RCC_LSE_IsReady+0x1a>
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <LL_RCC_SetRFWKPClockSource>:
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8010900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010908:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801090c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4313      	orrs	r3, r2
 8010914:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <LL_RCC_SetSMPSClockSource>:
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801092c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010932:	f023 0203 	bic.w	r2, r3, #3
 8010936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4313      	orrs	r3, r2
 801093e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010940:	bf00      	nop
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <LL_RCC_SetSMPSPrescaler>:
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8010954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801095a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801095e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4313      	orrs	r3, r2
 8010966:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <LL_RCC_SetUSARTClockSource>:
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801097c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010984:	f023 0203 	bic.w	r2, r3, #3
 8010988:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	4313      	orrs	r3, r2
 8010990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010994:	bf00      	nop
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <LL_RCC_SetLPUARTClockSource>:
{
 80109a0:	b480      	push	{r7}
 80109a2:	b083      	sub	sp, #12
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80109a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80109ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80109b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4313      	orrs	r3, r2
 80109bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80109c0:	bf00      	nop
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <LL_RCC_SetI2CClockSource>:
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80109d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80109d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	091b      	lsrs	r3, r3, #4
 80109e0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80109e4:	43db      	mvns	r3, r3
 80109e6:	401a      	ands	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	011b      	lsls	r3, r3, #4
 80109ec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80109f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80109f4:	4313      	orrs	r3, r2
 80109f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80109fa:	bf00      	nop
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <LL_RCC_SetLPTIMClockSource>:
{
 8010a06:	b480      	push	{r7}
 8010a08:	b083      	sub	sp, #12
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8010a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	0c1b      	lsrs	r3, r3, #16
 8010a1a:	041b      	lsls	r3, r3, #16
 8010a1c:	43db      	mvns	r3, r3
 8010a1e:	401a      	ands	r2, r3
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	041b      	lsls	r3, r3, #16
 8010a24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <LL_RCC_SetSAIClockSource>:
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8010a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8010a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a5a:	bf00      	nop
 8010a5c:	370c      	adds	r7, #12
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <LL_RCC_SetRNGClockSource>:
{
 8010a66:	b480      	push	{r7}
 8010a68:	b083      	sub	sp, #12
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8010a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8010a7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4313      	orrs	r3, r2
 8010a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <LL_RCC_SetCLK48ClockSource>:
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8010a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010ab2:	bf00      	nop
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr

08010abe <LL_RCC_SetUSBClockSource>:
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b082      	sub	sp, #8
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7ff ffe3 	bl	8010a92 <LL_RCC_SetCLK48ClockSource>
}
 8010acc:	bf00      	nop
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <LL_RCC_SetADCClockSource>:
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8010adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ae4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010ae8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010af4:	bf00      	nop
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <LL_RCC_SetRTCClockSource>:
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8010b20:	bf00      	nop
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <LL_RCC_GetRTCClockSource>:
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8010b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <LL_RCC_ForceBackupDomainReset>:
{
 8010b46:	b480      	push	{r7}
 8010b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8010b5e:	bf00      	nop
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8010b68:	b480      	push	{r7}
 8010b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8010b80:	bf00      	nop
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <LL_RCC_PLLSAI1_Enable>:
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8010b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010b9c:	6013      	str	r3, [r2, #0]
}
 8010b9e:	bf00      	nop
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <LL_RCC_PLLSAI1_Disable>:
{
 8010ba8:	b480      	push	{r7}
 8010baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8010bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010bb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010bba:	6013      	str	r3, [r2, #0]
}
 8010bbc:	bf00      	nop
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <LL_RCC_PLLSAI1_IsReady>:
{
 8010bc6:	b480      	push	{r7}
 8010bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8010bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010bd8:	d101      	bne.n	8010bde <LL_RCC_PLLSAI1_IsReady+0x18>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e000      	b.n	8010be0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b088      	sub	sp, #32
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d034      	beq.n	8010c70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010c0e:	d021      	beq.n	8010c54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8010c10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010c14:	d81b      	bhi.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010c1a:	d01d      	beq.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8010c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010c20:	d815      	bhi.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d00b      	beq.n	8010c3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8010c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010c2a:	d110      	bne.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8010c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010c3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8010c3c:	e00d      	b.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	3304      	adds	r3, #4
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f947 	bl	8010ed6 <RCCEx_PLLSAI1_ConfigNP>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8010c4c:	e005      	b.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	77fb      	strb	r3, [r7, #31]
        break;
 8010c52:	e002      	b.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010c54:	bf00      	nop
 8010c56:	e000      	b.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c5a:	7ffb      	ldrb	r3, [r7, #31]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d105      	bne.n	8010c6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff fee8 	bl	8010a3a <LL_RCC_SetSAIClockSource>
 8010c6a:	e001      	b.n	8010c70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c6c:	7ffb      	ldrb	r3, [r7, #31]
 8010c6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d046      	beq.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8010c7c:	f7ff ff56 	bl	8010b2c <LL_RCC_GetRTCClockSource>
 8010c80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c86:	69ba      	ldr	r2, [r7, #24]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d03c      	beq.n	8010d06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8010c8c:	f7fe fc68 	bl	800f560 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d105      	bne.n	8010ca2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7ff ff30 	bl	8010b00 <LL_RCC_SetRTCClockSource>
 8010ca0:	e02e      	b.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8010ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010caa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8010cac:	f7ff ff4b 	bl	8010b46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8010cb0:	f7ff ff5a 	bl	8010b68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8010cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8010ccc:	f7ff fdf0 	bl	80108b0 <LL_RCC_LSE_IsEnabled>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d114      	bne.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010cd6:	f7fd fcf7 	bl	800e6c8 <HAL_GetTick>
 8010cda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8010cdc:	e00b      	b.n	8010cf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010cde:	f7fd fcf3 	bl	800e6c8 <HAL_GetTick>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d902      	bls.n	8010cf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	77fb      	strb	r3, [r7, #31]
              break;
 8010cf4:	e004      	b.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8010cf6:	f7ff fded 	bl	80108d4 <LL_RCC_LSE_IsReady>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d1ee      	bne.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8010d00:	7ffb      	ldrb	r3, [r7, #31]
 8010d02:	77bb      	strb	r3, [r7, #30]
 8010d04:	e001      	b.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d06:	7ffb      	ldrb	r3, [r7, #31]
 8010d08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f003 0301 	and.w	r3, r3, #1
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d004      	beq.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	699b      	ldr	r3, [r3, #24]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fe2a 	bl	8010974 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f003 0302 	and.w	r3, r3, #2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d004      	beq.n	8010d36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	69db      	ldr	r3, [r3, #28]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff fe35 	bl	80109a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 0310 	and.w	r3, r3, #16
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff fe5d 	bl	8010a06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f003 0320 	and.w	r3, r3, #32
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d004      	beq.n	8010d62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff fe52 	bl	8010a06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f003 0304 	and.w	r3, r3, #4
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d004      	beq.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7ff fe2a 	bl	80109cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 0308 	and.w	r3, r3, #8
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7ff fe1f 	bl	80109cc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d022      	beq.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7ff fe8d 	bl	8010abe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010dac:	d107      	bne.n	8010dbe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8010dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010db8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010dbc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010dc6:	d10b      	bne.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	3304      	adds	r3, #4
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f000 f8dd 	bl	8010f8c <RCCEx_PLLSAI1_ConfigNQ>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8010dd6:	7ffb      	ldrb	r3, [r7, #31]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8010ddc:	7ffb      	ldrb	r3, [r7, #31]
 8010dde:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d02b      	beq.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010df4:	d008      	beq.n	8010e08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010dfe:	d003      	beq.n	8010e08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d105      	bne.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff fe2a 	bl	8010a66 <LL_RCC_SetRNGClockSource>
 8010e12:	e00a      	b.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e1c:	60fb      	str	r3, [r7, #12]
 8010e1e:	2000      	movs	r0, #0
 8010e20:	f7ff fe21 	bl	8010a66 <LL_RCC_SetRNGClockSource>
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff fe34 	bl	8010a92 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e2e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010e32:	d107      	bne.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d022      	beq.n	8010e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff fe3d 	bl	8010ad4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e62:	d107      	bne.n	8010e74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e7c:	d10b      	bne.n	8010e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	3304      	adds	r3, #4
 8010e82:	4618      	mov	r0, r3
 8010e84:	f000 f8dd 	bl	8011042 <RCCEx_PLLSAI1_ConfigNR>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8010e8c:	7ffb      	ldrb	r3, [r7, #31]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d001      	beq.n	8010e96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8010e92:	7ffb      	ldrb	r3, [r7, #31]
 8010e94:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d004      	beq.n	8010eac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff fd26 	bl	80108f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d009      	beq.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fd45 	bl	801094c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff fd2c 	bl	8010924 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8010ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3720      	adds	r7, #32
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010ee2:	f7ff fe61 	bl	8010ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010ee6:	f7fd fbef 	bl	800e6c8 <HAL_GetTick>
 8010eea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010eec:	e009      	b.n	8010f02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010eee:	f7fd fbeb 	bl	800e6c8 <HAL_GetTick>
 8010ef2:	4602      	mov	r2, r0
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d902      	bls.n	8010f02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8010efc:	2303      	movs	r3, #3
 8010efe:	73fb      	strb	r3, [r7, #15]
      break;
 8010f00:	e004      	b.n	8010f0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010f02:	f7ff fe60 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1f0      	bne.n	8010eee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d137      	bne.n	8010f82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f16:	691b      	ldr	r3, [r3, #16]
 8010f18:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	021b      	lsls	r3, r3, #8
 8010f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f26:	4313      	orrs	r3, r2
 8010f28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8010f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f2e:	691b      	ldr	r3, [r3, #16]
 8010f30:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010f40:	f7ff fe23 	bl	8010b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f44:	f7fd fbc0 	bl	800e6c8 <HAL_GetTick>
 8010f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010f4a:	e009      	b.n	8010f60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010f4c:	f7fd fbbc 	bl	800e6c8 <HAL_GetTick>
 8010f50:	4602      	mov	r2, r0
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	2b02      	cmp	r3, #2
 8010f58:	d902      	bls.n	8010f60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8010f5a:	2303      	movs	r3, #3
 8010f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8010f5e:	e004      	b.n	8010f6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010f60:	f7ff fe31 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d1f0      	bne.n	8010f4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d108      	bne.n	8010f82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f74:	691a      	ldr	r2, [r3, #16]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010f98:	f7ff fe06 	bl	8010ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010f9c:	f7fd fb94 	bl	800e6c8 <HAL_GetTick>
 8010fa0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010fa2:	e009      	b.n	8010fb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010fa4:	f7fd fb90 	bl	800e6c8 <HAL_GetTick>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d902      	bls.n	8010fb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8010fb2:	2303      	movs	r3, #3
 8010fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8010fb6:	e004      	b.n	8010fc2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010fb8:	f7ff fe05 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1f0      	bne.n	8010fa4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8010fc2:	7bfb      	ldrb	r3, [r7, #15]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d137      	bne.n	8011038 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	021b      	lsls	r3, r3, #8
 8010fd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8010fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010fe4:	691b      	ldr	r3, [r3, #16]
 8010fe6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	689b      	ldr	r3, [r3, #8]
 8010fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010ff6:	f7ff fdc8 	bl	8010b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010ffa:	f7fd fb65 	bl	800e6c8 <HAL_GetTick>
 8010ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8011000:	e009      	b.n	8011016 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011002:	f7fd fb61 	bl	800e6c8 <HAL_GetTick>
 8011006:	4602      	mov	r2, r0
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	2b02      	cmp	r3, #2
 801100e:	d902      	bls.n	8011016 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8011010:	2303      	movs	r3, #3
 8011012:	73fb      	strb	r3, [r7, #15]
        break;
 8011014:	e004      	b.n	8011020 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8011016:	f7ff fdd6 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 801101a:	4603      	mov	r3, r0
 801101c:	2b01      	cmp	r3, #1
 801101e:	d1f0      	bne.n	8011002 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8011020:	7bfb      	ldrb	r3, [r7, #15]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d108      	bne.n	8011038 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8011026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801102a:	691a      	ldr	r2, [r3, #16]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011034:	4313      	orrs	r3, r2
 8011036:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8011038:	7bfb      	ldrb	r3, [r7, #15]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b084      	sub	sp, #16
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801104e:	f7ff fdab 	bl	8010ba8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011052:	f7fd fb39 	bl	800e6c8 <HAL_GetTick>
 8011056:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8011058:	e009      	b.n	801106e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801105a:	f7fd fb35 	bl	800e6c8 <HAL_GetTick>
 801105e:	4602      	mov	r2, r0
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	2b02      	cmp	r3, #2
 8011066:	d902      	bls.n	801106e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8011068:	2303      	movs	r3, #3
 801106a:	73fb      	strb	r3, [r7, #15]
      break;
 801106c:	e004      	b.n	8011078 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801106e:	f7ff fdaa 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1f0      	bne.n	801105a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8011078:	7bfb      	ldrb	r3, [r7, #15]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d137      	bne.n	80110ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801107e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	021b      	lsls	r3, r3, #8
 801108e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011092:	4313      	orrs	r3, r2
 8011094:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8011096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801109a:	691b      	ldr	r3, [r3, #16]
 801109c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80110a8:	4313      	orrs	r3, r2
 80110aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80110ac:	f7ff fd6d 	bl	8010b8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110b0:	f7fd fb0a 	bl	800e6c8 <HAL_GetTick>
 80110b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80110b6:	e009      	b.n	80110cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80110b8:	f7fd fb06 	bl	800e6c8 <HAL_GetTick>
 80110bc:	4602      	mov	r2, r0
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d902      	bls.n	80110cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80110c6:	2303      	movs	r3, #3
 80110c8:	73fb      	strb	r3, [r7, #15]
        break;
 80110ca:	e004      	b.n	80110d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80110cc:	f7ff fd7b 	bl	8010bc6 <LL_RCC_PLLSAI1_IsReady>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b01      	cmp	r3, #1
 80110d4:	d1f0      	bne.n	80110b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d108      	bne.n	80110ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80110dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80110e0:	691a      	ldr	r2, [r3, #16]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80110ea:	4313      	orrs	r3, r2
 80110ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80110ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d101      	bne.n	801110a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	e09f      	b.n	801124a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7fa ff2e 	bl	800bf80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2202      	movs	r2, #2
 8011128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801112c:	4b49      	ldr	r3, [pc, #292]	@ (8011254 <HAL_RTC_Init+0x15c>)
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	f003 0310 	and.w	r3, r3, #16
 8011134:	2b10      	cmp	r3, #16
 8011136:	d07e      	beq.n	8011236 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	22ca      	movs	r2, #202	@ 0xca
 801113e:	625a      	str	r2, [r3, #36]	@ 0x24
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2253      	movs	r2, #83	@ 0x53
 8011146:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 fac6 	bl	80116da <RTC_EnterInitMode>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00a      	beq.n	801116a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	22ff      	movs	r2, #255	@ 0xff
 801115a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2204      	movs	r2, #4
 8011160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8011164:	2301      	movs	r3, #1
 8011166:	73fb      	strb	r3, [r7, #15]
 8011168:	e067      	b.n	801123a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	689b      	ldr	r3, [r3, #8]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	6812      	ldr	r2, [r2, #0]
 8011174:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801117c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	6899      	ldr	r1, [r3, #8]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685a      	ldr	r2, [r3, #4]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	431a      	orrs	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	431a      	orrs	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	430a      	orrs	r2, r1
 801119a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	68d2      	ldr	r2, [r2, #12]
 80111a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	6919      	ldr	r1, [r3, #16]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	041a      	lsls	r2, r3, #16
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	430a      	orrs	r2, r1
 80111b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68da      	ldr	r2, [r3, #12]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80111c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f022 0203 	bic.w	r2, r2, #3
 80111d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	69da      	ldr	r2, [r3, #28]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	695b      	ldr	r3, [r3, #20]
 80111e8:	431a      	orrs	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	430a      	orrs	r2, r1
 80111f0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	f003 0320 	and.w	r3, r3, #32
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d113      	bne.n	8011228 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fa44 	bl	801168e <HAL_RTC_WaitForSynchro>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00d      	beq.n	8011228 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	22ff      	movs	r2, #255	@ 0xff
 8011212:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2204      	movs	r2, #4
 8011218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	e010      	b.n	801124a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	22ff      	movs	r2, #255	@ 0xff
 801122e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8011230:	2300      	movs	r3, #0
 8011232:	73fb      	strb	r3, [r7, #15]
 8011234:	e001      	b.n	801123a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8011236:	2300      	movs	r3, #0
 8011238:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 801123a:	7bfb      	ldrb	r3, [r7, #15]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d103      	bne.n	8011248 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8011248:	7bfb      	ldrb	r3, [r7, #15]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	40002800 	.word	0x40002800

08011258 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011258:	b590      	push	{r4, r7, lr}
 801125a:	b087      	sub	sp, #28
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f893 3020 	ldrb.w	r3, [r3, #32]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d101      	bne.n	8011272 <HAL_RTC_SetTime+0x1a>
 801126e:	2302      	movs	r3, #2
 8011270:	e0b2      	b.n	80113d8 <HAL_RTC_SetTime+0x180>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2201      	movs	r2, #1
 8011276:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2202      	movs	r2, #2
 801127e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d126      	bne.n	80112d6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011292:	2b00      	cmp	r3, #0
 8011294:	d102      	bne.n	801129c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	2200      	movs	r2, #0
 801129a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 fa44 	bl	801172e <RTC_ByteToBcd2>
 80112a6:	4603      	mov	r3, r0
 80112a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	785b      	ldrb	r3, [r3, #1]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f000 fa3d 	bl	801172e <RTC_ByteToBcd2>
 80112b4:	4603      	mov	r3, r0
 80112b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80112b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	789b      	ldrb	r3, [r3, #2]
 80112be:	4618      	mov	r0, r3
 80112c0:	f000 fa35 	bl	801172e <RTC_ByteToBcd2>
 80112c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80112c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	78db      	ldrb	r3, [r3, #3]
 80112ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80112d0:	4313      	orrs	r3, r2
 80112d2:	617b      	str	r3, [r7, #20]
 80112d4:	e018      	b.n	8011308 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d102      	bne.n	80112ea <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2200      	movs	r2, #0
 80112e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	785b      	ldrb	r3, [r3, #1]
 80112f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80112f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80112fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	78db      	ldrb	r3, [r3, #3]
 8011302:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8011304:	4313      	orrs	r3, r2
 8011306:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	22ca      	movs	r2, #202	@ 0xca
 801130e:	625a      	str	r2, [r3, #36]	@ 0x24
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2253      	movs	r2, #83	@ 0x53
 8011316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f000 f9de 	bl	80116da <RTC_EnterInitMode>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00d      	beq.n	8011340 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	22ff      	movs	r2, #255	@ 0xff
 801132a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2204      	movs	r2, #4
 8011330:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2200      	movs	r2, #0
 8011338:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801133c:	2301      	movs	r3, #1
 801133e:	e04b      	b.n	80113d8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801134a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801134e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	689a      	ldr	r2, [r3, #8]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801135e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6899      	ldr	r1, [r3, #8]
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	68da      	ldr	r2, [r3, #12]
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	691b      	ldr	r3, [r3, #16]
 801136e:	431a      	orrs	r2, r3
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	430a      	orrs	r2, r1
 8011376:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68da      	ldr	r2, [r3, #12]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011386:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	f003 0320 	and.w	r3, r3, #32
 8011392:	2b00      	cmp	r3, #0
 8011394:	d113      	bne.n	80113be <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f000 f979 	bl	801168e <HAL_RTC_WaitForSynchro>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00d      	beq.n	80113be <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	22ff      	movs	r2, #255	@ 0xff
 80113a8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2204      	movs	r2, #4
 80113ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2200      	movs	r2, #0
 80113b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80113ba:	2301      	movs	r3, #1
 80113bc:	e00c      	b.n	80113d8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	22ff      	movs	r2, #255	@ 0xff
 80113c4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2201      	movs	r2, #1
 80113ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2200      	movs	r2, #0
 80113d2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80113d6:	2300      	movs	r3, #0
  }
}
 80113d8:	4618      	mov	r0, r3
 80113da:	371c      	adds	r7, #28
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd90      	pop	{r4, r7, pc}

080113e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801140e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	0c1b      	lsrs	r3, r3, #16
 8011418:	b2db      	uxtb	r3, r3
 801141a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801141e:	b2da      	uxtb	r2, r3
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	0a1b      	lsrs	r3, r3, #8
 8011428:	b2db      	uxtb	r3, r3
 801142a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801142e:	b2da      	uxtb	r2, r3
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	b2db      	uxtb	r3, r3
 8011438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801143c:	b2da      	uxtb	r2, r3
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	0c1b      	lsrs	r3, r3, #16
 8011446:	b2db      	uxtb	r3, r3
 8011448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801144c:	b2da      	uxtb	r2, r3
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d11a      	bne.n	801148e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	4618      	mov	r0, r3
 801145e:	f000 f986 	bl	801176e <RTC_Bcd2ToByte>
 8011462:	4603      	mov	r3, r0
 8011464:	461a      	mov	r2, r3
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	785b      	ldrb	r3, [r3, #1]
 801146e:	4618      	mov	r0, r3
 8011470:	f000 f97d 	bl	801176e <RTC_Bcd2ToByte>
 8011474:	4603      	mov	r3, r0
 8011476:	461a      	mov	r2, r3
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	789b      	ldrb	r3, [r3, #2]
 8011480:	4618      	mov	r0, r3
 8011482:	f000 f974 	bl	801176e <RTC_Bcd2ToByte>
 8011486:	4603      	mov	r3, r0
 8011488:	461a      	mov	r2, r3
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801148e:	2300      	movs	r3, #0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3718      	adds	r7, #24
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011498:	b590      	push	{r4, r7, lr}
 801149a:	b087      	sub	sp, #28
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d101      	bne.n	80114b2 <HAL_RTC_SetDate+0x1a>
 80114ae:	2302      	movs	r3, #2
 80114b0:	e09c      	b.n	80115ec <HAL_RTC_SetDate+0x154>
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2201      	movs	r2, #1
 80114b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2202      	movs	r2, #2
 80114be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d10e      	bne.n	80114e6 <HAL_RTC_SetDate+0x4e>
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	785b      	ldrb	r3, [r3, #1]
 80114cc:	f003 0310 	and.w	r3, r3, #16
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d008      	beq.n	80114e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	785b      	ldrb	r3, [r3, #1]
 80114d8:	f023 0310 	bic.w	r3, r3, #16
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	330a      	adds	r3, #10
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d11c      	bne.n	8011526 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	78db      	ldrb	r3, [r3, #3]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 f91c 	bl	801172e <RTC_ByteToBcd2>
 80114f6:	4603      	mov	r3, r0
 80114f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	785b      	ldrb	r3, [r3, #1]
 80114fe:	4618      	mov	r0, r3
 8011500:	f000 f915 	bl	801172e <RTC_ByteToBcd2>
 8011504:	4603      	mov	r3, r0
 8011506:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8011508:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	789b      	ldrb	r3, [r3, #2]
 801150e:	4618      	mov	r0, r3
 8011510:	f000 f90d 	bl	801172e <RTC_ByteToBcd2>
 8011514:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8011516:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8011520:	4313      	orrs	r3, r2
 8011522:	617b      	str	r3, [r7, #20]
 8011524:	e00e      	b.n	8011544 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	78db      	ldrb	r3, [r3, #3]
 801152a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	785b      	ldrb	r3, [r3, #1]
 8011530:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011532:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8011538:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011540:	4313      	orrs	r3, r2
 8011542:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	22ca      	movs	r2, #202	@ 0xca
 801154a:	625a      	str	r2, [r3, #36]	@ 0x24
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2253      	movs	r2, #83	@ 0x53
 8011552:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	f000 f8c0 	bl	80116da <RTC_EnterInitMode>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d00d      	beq.n	801157c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	22ff      	movs	r2, #255	@ 0xff
 8011566:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2204      	movs	r2, #4
 801156c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2200      	movs	r2, #0
 8011574:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	e037      	b.n	80115ec <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011586:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801158a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	68da      	ldr	r2, [r3, #12]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801159a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f003 0320 	and.w	r3, r3, #32
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d113      	bne.n	80115d2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f000 f86f 	bl	801168e <HAL_RTC_WaitForSynchro>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00d      	beq.n	80115d2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	22ff      	movs	r2, #255	@ 0xff
 80115bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2204      	movs	r2, #4
 80115c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80115ce:	2301      	movs	r3, #1
 80115d0:	e00c      	b.n	80115ec <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	22ff      	movs	r2, #255	@ 0xff
 80115d8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2201      	movs	r2, #1
 80115de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80115ea:	2300      	movs	r3, #0
  }
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	371c      	adds	r7, #28
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd90      	pop	{r4, r7, pc}

080115f4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b086      	sub	sp, #24
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801160a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801160e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	0c1b      	lsrs	r3, r3, #16
 8011614:	b2da      	uxtb	r2, r3
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	0a1b      	lsrs	r3, r3, #8
 801161e:	b2db      	uxtb	r3, r3
 8011620:	f003 031f 	and.w	r3, r3, #31
 8011624:	b2da      	uxtb	r2, r3
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	b2db      	uxtb	r3, r3
 801162e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011632:	b2da      	uxtb	r2, r3
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	0b5b      	lsrs	r3, r3, #13
 801163c:	b2db      	uxtb	r3, r3
 801163e:	f003 0307 	and.w	r3, r3, #7
 8011642:	b2da      	uxtb	r2, r3
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d11a      	bne.n	8011684 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	78db      	ldrb	r3, [r3, #3]
 8011652:	4618      	mov	r0, r3
 8011654:	f000 f88b 	bl	801176e <RTC_Bcd2ToByte>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	785b      	ldrb	r3, [r3, #1]
 8011664:	4618      	mov	r0, r3
 8011666:	f000 f882 	bl	801176e <RTC_Bcd2ToByte>
 801166a:	4603      	mov	r3, r0
 801166c:	461a      	mov	r2, r3
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	789b      	ldrb	r3, [r3, #2]
 8011676:	4618      	mov	r0, r3
 8011678:	f000 f879 	bl	801176e <RTC_Bcd2ToByte>
 801167c:	4603      	mov	r3, r0
 801167e:	461a      	mov	r2, r3
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b084      	sub	sp, #16
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	68da      	ldr	r2, [r3, #12]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80116a4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80116a6:	f7fd f80f 	bl	800e6c8 <HAL_GetTick>
 80116aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80116ac:	e009      	b.n	80116c2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80116ae:	f7fd f80b 	bl	800e6c8 <HAL_GetTick>
 80116b2:	4602      	mov	r2, r0
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116bc:	d901      	bls.n	80116c2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80116be:	2303      	movs	r3, #3
 80116c0:	e007      	b.n	80116d2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	f003 0320 	and.w	r3, r3, #32
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d0ee      	beq.n	80116ae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b084      	sub	sp, #16
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d119      	bne.n	8011724 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f04f 32ff 	mov.w	r2, #4294967295
 80116f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80116fa:	f7fc ffe5 	bl	800e6c8 <HAL_GetTick>
 80116fe:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011700:	e009      	b.n	8011716 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011702:	f7fc ffe1 	bl	800e6c8 <HAL_GetTick>
 8011706:	4602      	mov	r2, r0
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011710:	d901      	bls.n	8011716 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8011712:	2303      	movs	r3, #3
 8011714:	e007      	b.n	8011726 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011720:	2b00      	cmp	r3, #0
 8011722:	d0ee      	beq.n	8011702 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801172e:	b480      	push	{r7}
 8011730:	b085      	sub	sp, #20
 8011732:	af00      	add	r7, sp, #0
 8011734:	4603      	mov	r3, r0
 8011736:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011738:	2300      	movs	r3, #0
 801173a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 801173c:	79fb      	ldrb	r3, [r7, #7]
 801173e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8011740:	e005      	b.n	801174e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	3301      	adds	r3, #1
 8011746:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8011748:	7afb      	ldrb	r3, [r7, #11]
 801174a:	3b0a      	subs	r3, #10
 801174c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 801174e:	7afb      	ldrb	r3, [r7, #11]
 8011750:	2b09      	cmp	r3, #9
 8011752:	d8f6      	bhi.n	8011742 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	b2db      	uxtb	r3, r3
 8011758:	011b      	lsls	r3, r3, #4
 801175a:	b2da      	uxtb	r2, r3
 801175c:	7afb      	ldrb	r3, [r7, #11]
 801175e:	4313      	orrs	r3, r2
 8011760:	b2db      	uxtb	r3, r3
}
 8011762:	4618      	mov	r0, r3
 8011764:	3714      	adds	r7, #20
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr

0801176e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801176e:	b480      	push	{r7}
 8011770:	b085      	sub	sp, #20
 8011772:	af00      	add	r7, sp, #0
 8011774:	4603      	mov	r3, r0
 8011776:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8011778:	79fb      	ldrb	r3, [r7, #7]
 801177a:	091b      	lsrs	r3, r3, #4
 801177c:	b2db      	uxtb	r3, r3
 801177e:	461a      	mov	r2, r3
 8011780:	4613      	mov	r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	4413      	add	r3, r2
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	b2da      	uxtb	r2, r3
 801178e:	79fb      	ldrb	r3, [r7, #7]
 8011790:	f003 030f 	and.w	r3, r3, #15
 8011794:	b2db      	uxtb	r3, r3
 8011796:	4413      	add	r3, r2
 8011798:	b2db      	uxtb	r3, r3
}
 801179a:	4618      	mov	r0, r3
 801179c:	3714      	adds	r7, #20
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr

080117a6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80117a6:	b480      	push	{r7}
 80117a8:	b087      	sub	sp, #28
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	60b9      	str	r1, [r7, #8]
 80117b0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3350      	adds	r3, #80	@ 0x50
 80117b8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	601a      	str	r2, [r3, #0]
}
 80117ca:	bf00      	nop
 80117cc:	371c      	adds	r7, #28
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b084      	sub	sp, #16
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	e095      	b.n	8011914 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d108      	bne.n	8011802 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80117f8:	d009      	beq.n	801180e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	61da      	str	r2, [r3, #28]
 8011800:	e005      	b.n	801180e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801181a:	b2db      	uxtb	r3, r3
 801181c:	2b00      	cmp	r3, #0
 801181e:	d106      	bne.n	801182e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7fa fbd5 	bl	800bfd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2202      	movs	r2, #2
 8011832:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011844:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801184e:	d902      	bls.n	8011856 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011850:	2300      	movs	r3, #0
 8011852:	60fb      	str	r3, [r7, #12]
 8011854:	e002      	b.n	801185c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801185a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011864:	d007      	beq.n	8011876 <HAL_SPI_Init+0xa0>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801186e:	d002      	beq.n	8011876 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011886:	431a      	orrs	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	691b      	ldr	r3, [r3, #16]
 801188c:	f003 0302 	and.w	r3, r3, #2
 8011890:	431a      	orrs	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	695b      	ldr	r3, [r3, #20]
 8011896:	f003 0301 	and.w	r3, r3, #1
 801189a:	431a      	orrs	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	699b      	ldr	r3, [r3, #24]
 80118a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118a4:	431a      	orrs	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	69db      	ldr	r3, [r3, #28]
 80118aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118ae:	431a      	orrs	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a1b      	ldr	r3, [r3, #32]
 80118b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118b8:	ea42 0103 	orr.w	r1, r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	430a      	orrs	r2, r1
 80118ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	699b      	ldr	r3, [r3, #24]
 80118d0:	0c1b      	lsrs	r3, r3, #16
 80118d2:	f003 0204 	and.w	r2, r3, #4
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118da:	f003 0310 	and.w	r3, r3, #16
 80118de:	431a      	orrs	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118e4:	f003 0308 	and.w	r3, r3, #8
 80118e8:	431a      	orrs	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80118f2:	ea42 0103 	orr.w	r1, r2, r3
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	430a      	orrs	r2, r1
 8011902:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2201      	movs	r2, #1
 801190e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	4618      	mov	r0, r3
 8011916:	3710      	adds	r7, #16
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b08a      	sub	sp, #40	@ 0x28
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
 8011928:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801192a:	2301      	movs	r3, #1
 801192c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801192e:	2300      	movs	r3, #0
 8011930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801193a:	2b01      	cmp	r3, #1
 801193c:	d101      	bne.n	8011942 <HAL_SPI_TransmitReceive+0x26>
 801193e:	2302      	movs	r3, #2
 8011940:	e1fb      	b.n	8011d3a <HAL_SPI_TransmitReceive+0x41e>
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2201      	movs	r2, #1
 8011946:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801194a:	f7fc febd 	bl	800e6c8 <HAL_GetTick>
 801194e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011956:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801195e:	887b      	ldrh	r3, [r7, #2]
 8011960:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011962:	887b      	ldrh	r3, [r7, #2]
 8011964:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011966:	7efb      	ldrb	r3, [r7, #27]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d00e      	beq.n	801198a <HAL_SPI_TransmitReceive+0x6e>
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011972:	d106      	bne.n	8011982 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d102      	bne.n	8011982 <HAL_SPI_TransmitReceive+0x66>
 801197c:	7efb      	ldrb	r3, [r7, #27]
 801197e:	2b04      	cmp	r3, #4
 8011980:	d003      	beq.n	801198a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8011982:	2302      	movs	r3, #2
 8011984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8011988:	e1cd      	b.n	8011d26 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d005      	beq.n	801199c <HAL_SPI_TransmitReceive+0x80>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d002      	beq.n	801199c <HAL_SPI_TransmitReceive+0x80>
 8011996:	887b      	ldrh	r3, [r7, #2]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801199c:	2301      	movs	r3, #1
 801199e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80119a2:	e1c0      	b.n	8011d26 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	2b04      	cmp	r3, #4
 80119ae:	d003      	beq.n	80119b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2205      	movs	r2, #5
 80119b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2200      	movs	r2, #0
 80119bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	887a      	ldrh	r2, [r7, #2]
 80119c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	887a      	ldrh	r2, [r7, #2]
 80119d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	887a      	ldrh	r2, [r7, #2]
 80119de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	887a      	ldrh	r2, [r7, #2]
 80119e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2200      	movs	r2, #0
 80119ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80119fa:	d802      	bhi.n	8011a02 <HAL_SPI_TransmitReceive+0xe6>
 80119fc:	8a3b      	ldrh	r3, [r7, #16]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d908      	bls.n	8011a14 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	685a      	ldr	r2, [r3, #4]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011a10:	605a      	str	r2, [r3, #4]
 8011a12:	e007      	b.n	8011a24 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011a22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a2e:	2b40      	cmp	r3, #64	@ 0x40
 8011a30:	d007      	beq.n	8011a42 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011a4a:	d97c      	bls.n	8011b46 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <HAL_SPI_TransmitReceive+0x13e>
 8011a54:	8a7b      	ldrh	r3, [r7, #18]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d169      	bne.n	8011b2e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a5e:	881a      	ldrh	r2, [r3, #0]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a6a:	1c9a      	adds	r2, r3, #2
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	3b01      	subs	r3, #1
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a7e:	e056      	b.n	8011b2e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f003 0302 	and.w	r3, r3, #2
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	d11b      	bne.n	8011ac6 <HAL_SPI_TransmitReceive+0x1aa>
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d016      	beq.n	8011ac6 <HAL_SPI_TransmitReceive+0x1aa>
 8011a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d113      	bne.n	8011ac6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aa2:	881a      	ldrh	r2, [r3, #0]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aae:	1c9a      	adds	r2, r3, #2
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	3b01      	subs	r3, #1
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	f003 0301 	and.w	r3, r3, #1
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d11c      	bne.n	8011b0e <HAL_SPI_TransmitReceive+0x1f2>
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d016      	beq.n	8011b0e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	68da      	ldr	r2, [r3, #12]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011aea:	b292      	uxth	r2, r2
 8011aec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011af2:	1c9a      	adds	r2, r3, #2
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	3b01      	subs	r3, #1
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011b0e:	f7fc fddb 	bl	800e6c8 <HAL_GetTick>
 8011b12:	4602      	mov	r2, r0
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	1ad3      	subs	r3, r2, r3
 8011b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d807      	bhi.n	8011b2e <HAL_SPI_TransmitReceive+0x212>
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b24:	d003      	beq.n	8011b2e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011b26:	2303      	movs	r3, #3
 8011b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8011b2c:	e0fb      	b.n	8011d26 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1a3      	bne.n	8011a80 <HAL_SPI_TransmitReceive+0x164>
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d19d      	bne.n	8011a80 <HAL_SPI_TransmitReceive+0x164>
 8011b44:	e0df      	b.n	8011d06 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d003      	beq.n	8011b56 <HAL_SPI_TransmitReceive+0x23a>
 8011b4e:	8a7b      	ldrh	r3, [r7, #18]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	f040 80cb 	bne.w	8011cec <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d912      	bls.n	8011b86 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b64:	881a      	ldrh	r2, [r3, #0]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b70:	1c9a      	adds	r2, r3, #2
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	3b02      	subs	r3, #2
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b84:	e0b2      	b.n	8011cec <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	330c      	adds	r3, #12
 8011b90:	7812      	ldrb	r2, [r2, #0]
 8011b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b98:	1c5a      	adds	r2, r3, #1
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011bac:	e09e      	b.n	8011cec <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	f003 0302 	and.w	r3, r3, #2
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d134      	bne.n	8011c26 <HAL_SPI_TransmitReceive+0x30a>
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d02f      	beq.n	8011c26 <HAL_SPI_TransmitReceive+0x30a>
 8011bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d12c      	bne.n	8011c26 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d912      	bls.n	8011bfc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bda:	881a      	ldrh	r2, [r3, #0]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011be6:	1c9a      	adds	r2, r3, #2
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	3b02      	subs	r3, #2
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011bfa:	e012      	b.n	8011c22 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	330c      	adds	r3, #12
 8011c06:	7812      	ldrb	r2, [r2, #0]
 8011c08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c0e:	1c5a      	adds	r2, r3, #1
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	3b01      	subs	r3, #1
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	f003 0301 	and.w	r3, r3, #1
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d148      	bne.n	8011cc6 <HAL_SPI_TransmitReceive+0x3aa>
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d042      	beq.n	8011cc6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d923      	bls.n	8011c94 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	68da      	ldr	r2, [r3, #12]
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c56:	b292      	uxth	r2, r2
 8011c58:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c5e:	1c9a      	adds	r2, r3, #2
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	3b02      	subs	r3, #2
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d81f      	bhi.n	8011cc2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	685a      	ldr	r2, [r3, #4]
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c90:	605a      	str	r2, [r3, #4]
 8011c92:	e016      	b.n	8011cc2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f103 020c 	add.w	r2, r3, #12
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ca0:	7812      	ldrb	r2, [r2, #0]
 8011ca2:	b2d2      	uxtb	r2, r2
 8011ca4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011caa:	1c5a      	adds	r2, r3, #1
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011cc6:	f7fc fcff 	bl	800e6c8 <HAL_GetTick>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	1ad3      	subs	r3, r2, r3
 8011cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d803      	bhi.n	8011cde <HAL_SPI_TransmitReceive+0x3c2>
 8011cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cdc:	d102      	bne.n	8011ce4 <HAL_SPI_TransmitReceive+0x3c8>
 8011cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d103      	bne.n	8011cec <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8011cea:	e01c      	b.n	8011d26 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	f47f af5b 	bne.w	8011bae <HAL_SPI_TransmitReceive+0x292>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	f47f af54 	bne.w	8011bae <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011d06:	69fa      	ldr	r2, [r7, #28]
 8011d08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f000 f938 	bl	8011f80 <SPI_EndRxTxTransaction>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d006      	beq.n	8011d24 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011d16:	2301      	movs	r3, #1
 8011d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2220      	movs	r2, #32
 8011d20:	661a      	str	r2, [r3, #96]	@ 0x60
 8011d22:	e000      	b.n	8011d26 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2200      	movs	r2, #0
 8011d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8011d36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3728      	adds	r7, #40	@ 0x28
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
	...

08011d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	4613      	mov	r3, r2
 8011d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011d54:	f7fc fcb8 	bl	800e6c8 <HAL_GetTick>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d5c:	1a9b      	subs	r3, r3, r2
 8011d5e:	683a      	ldr	r2, [r7, #0]
 8011d60:	4413      	add	r3, r2
 8011d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011d64:	f7fc fcb0 	bl	800e6c8 <HAL_GetTick>
 8011d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011d6a:	4b39      	ldr	r3, [pc, #228]	@ (8011e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	015b      	lsls	r3, r3, #5
 8011d70:	0d1b      	lsrs	r3, r3, #20
 8011d72:	69fa      	ldr	r2, [r7, #28]
 8011d74:	fb02 f303 	mul.w	r3, r2, r3
 8011d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011d7a:	e054      	b.n	8011e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d82:	d050      	beq.n	8011e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011d84:	f7fc fca0 	bl	800e6c8 <HAL_GetTick>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	69fa      	ldr	r2, [r7, #28]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d902      	bls.n	8011d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d13d      	bne.n	8011e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011db2:	d111      	bne.n	8011dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011dbc:	d004      	beq.n	8011dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011dc6:	d107      	bne.n	8011dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011de0:	d10f      	bne.n	8011e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011df0:	601a      	str	r2, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2201      	movs	r2, #1
 8011e06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011e12:	2303      	movs	r3, #3
 8011e14:	e017      	b.n	8011e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d101      	bne.n	8011e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	3b01      	subs	r3, #1
 8011e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	689a      	ldr	r2, [r3, #8]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	4013      	ands	r3, r2
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	bf0c      	ite	eq
 8011e36:	2301      	moveq	r3, #1
 8011e38:	2300      	movne	r3, #0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d19b      	bne.n	8011d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3720      	adds	r7, #32
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	20000018 	.word	0x20000018

08011e54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b08a      	sub	sp, #40	@ 0x28
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011e66:	f7fc fc2f 	bl	800e6c8 <HAL_GetTick>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	683a      	ldr	r2, [r7, #0]
 8011e72:	4413      	add	r3, r2
 8011e74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011e76:	f7fc fc27 	bl	800e6c8 <HAL_GetTick>
 8011e7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	330c      	adds	r3, #12
 8011e82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011e84:	4b3d      	ldr	r3, [pc, #244]	@ (8011f7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	4413      	add	r3, r2
 8011e8e:	00da      	lsls	r2, r3, #3
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	0d1b      	lsrs	r3, r3, #20
 8011e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e96:	fb02 f303 	mul.w	r3, r2, r3
 8011e9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011e9c:	e060      	b.n	8011f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011ea4:	d107      	bne.n	8011eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d104      	bne.n	8011eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011eb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ebc:	d050      	beq.n	8011f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011ebe:	f7fc fc03 	bl	800e6c8 <HAL_GetTick>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d902      	bls.n	8011ed4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8011ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d13d      	bne.n	8011f50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	685a      	ldr	r2, [r3, #4]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011ee2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011eec:	d111      	bne.n	8011f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ef6:	d004      	beq.n	8011f02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f00:	d107      	bne.n	8011f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011f10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011f1a:	d10f      	bne.n	8011f3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011f2a:	601a      	str	r2, [r3, #0]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011f3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011f4c:	2303      	movs	r3, #3
 8011f4e:	e010      	b.n	8011f72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011f50:	69bb      	ldr	r3, [r7, #24]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011f56:	2300      	movs	r3, #0
 8011f58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	3b01      	subs	r3, #1
 8011f5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	689a      	ldr	r2, [r3, #8]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	4013      	ands	r3, r2
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d196      	bne.n	8011e9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3728      	adds	r7, #40	@ 0x28
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20000018 	.word	0x20000018

08011f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b086      	sub	sp, #24
 8011f84:	af02      	add	r7, sp, #8
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2200      	movs	r2, #0
 8011f94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7ff ff5b 	bl	8011e54 <SPI_WaitFifoStateUntilTimeout>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d007      	beq.n	8011fb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fa8:	f043 0220 	orr.w	r2, r3, #32
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011fb0:	2303      	movs	r3, #3
 8011fb2:	e027      	b.n	8012004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	2180      	movs	r1, #128	@ 0x80
 8011fbe:	68f8      	ldr	r0, [r7, #12]
 8011fc0:	f7ff fec0 	bl	8011d44 <SPI_WaitFlagStateUntilTimeout>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d007      	beq.n	8011fda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fce:	f043 0220 	orr.w	r2, r3, #32
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	e014      	b.n	8012004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	9300      	str	r3, [sp, #0]
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff ff34 	bl	8011e54 <SPI_WaitFifoStateUntilTimeout>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d007      	beq.n	8012002 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011ff6:	f043 0220 	orr.w	r2, r3, #32
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011ffe:	2303      	movs	r3, #3
 8012000:	e000      	b.n	8012004 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d101      	bne.n	801201e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801201a:	2301      	movs	r3, #1
 801201c:	e054      	b.n	80120c8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d111      	bne.n	801204e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2200      	movs	r2, #0
 801202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 ff68 	bl	8012f08 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801203c:	2b00      	cmp	r3, #0
 801203e:	d102      	bne.n	8012046 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	4a23      	ldr	r2, [pc, #140]	@ (80120d0 <HAL_TIM_Base_Init+0xc4>)
 8012044:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2202      	movs	r2, #2
 8012052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	3304      	adds	r3, #4
 801205e:	4619      	mov	r1, r3
 8012060:	4610      	mov	r0, r2
 8012062:	f000 fbd3 	bl	801280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2201      	movs	r2, #1
 8012072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2201      	movs	r2, #1
 801207a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2201      	movs	r2, #1
 8012082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2201      	movs	r2, #1
 801208a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2201      	movs	r2, #1
 8012092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2201      	movs	r2, #1
 801209a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2201      	movs	r2, #1
 80120a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2201      	movs	r2, #1
 80120aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2201      	movs	r2, #1
 80120b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2201      	movs	r2, #1
 80120ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2201      	movs	r2, #1
 80120c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80120c6:	2300      	movs	r3, #0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	0800c0c5 	.word	0x0800c0c5

080120d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d001      	beq.n	80120ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80120e8:	2301      	movs	r3, #1
 80120ea:	e036      	b.n	801215a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2202      	movs	r2, #2
 80120f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	68da      	ldr	r2, [r3, #12]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f042 0201 	orr.w	r2, r2, #1
 8012102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4a17      	ldr	r2, [pc, #92]	@ (8012168 <HAL_TIM_Base_Start_IT+0x94>)
 801210a:	4293      	cmp	r3, r2
 801210c:	d004      	beq.n	8012118 <HAL_TIM_Base_Start_IT+0x44>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012116:	d115      	bne.n	8012144 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	689a      	ldr	r2, [r3, #8]
 801211e:	4b13      	ldr	r3, [pc, #76]	@ (801216c <HAL_TIM_Base_Start_IT+0x98>)
 8012120:	4013      	ands	r3, r2
 8012122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b06      	cmp	r3, #6
 8012128:	d015      	beq.n	8012156 <HAL_TIM_Base_Start_IT+0x82>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012130:	d011      	beq.n	8012156 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f042 0201 	orr.w	r2, r2, #1
 8012140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012142:	e008      	b.n	8012156 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f042 0201 	orr.w	r2, r2, #1
 8012152:	601a      	str	r2, [r3, #0]
 8012154:	e000      	b.n	8012158 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012158:	2300      	movs	r3, #0
}
 801215a:	4618      	mov	r0, r3
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	40012c00 	.word	0x40012c00
 801216c:	00010007 	.word	0x00010007

08012170 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d101      	bne.n	8012182 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801217e:	2301      	movs	r3, #1
 8012180:	e054      	b.n	801222c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012188:	b2db      	uxtb	r3, r3
 801218a:	2b00      	cmp	r3, #0
 801218c:	d111      	bne.n	80121b2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 feb6 	bl	8012f08 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d102      	bne.n	80121aa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4a23      	ldr	r2, [pc, #140]	@ (8012234 <HAL_TIM_OC_Init+0xc4>)
 80121a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2202      	movs	r2, #2
 80121b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	3304      	adds	r3, #4
 80121c2:	4619      	mov	r1, r3
 80121c4:	4610      	mov	r0, r2
 80121c6:	f000 fb21 	bl	801280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2201      	movs	r2, #1
 80121ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2201      	movs	r2, #1
 80121d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2201      	movs	r2, #1
 80121e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2201      	movs	r2, #1
 80121fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2201      	movs	r2, #1
 801221e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2201      	movs	r2, #1
 8012226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	08012239 	.word	0x08012239

08012238 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012240:	bf00      	nop
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	691b      	ldr	r3, [r3, #16]
 801225a:	f003 0302 	and.w	r3, r3, #2
 801225e:	2b02      	cmp	r3, #2
 8012260:	d128      	bne.n	80122b4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	f003 0302 	and.w	r3, r3, #2
 801226c:	2b02      	cmp	r3, #2
 801226e:	d121      	bne.n	80122b4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f06f 0202 	mvn.w	r2, #2
 8012278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2201      	movs	r2, #1
 801227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	f003 0303 	and.w	r3, r3, #3
 801228a:	2b00      	cmp	r3, #0
 801228c:	d005      	beq.n	801229a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	4798      	blx	r3
 8012298:	e009      	b.n	80122ae <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	691b      	ldr	r3, [r3, #16]
 80122ba:	f003 0304 	and.w	r3, r3, #4
 80122be:	2b04      	cmp	r3, #4
 80122c0:	d128      	bne.n	8012314 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	f003 0304 	and.w	r3, r3, #4
 80122cc:	2b04      	cmp	r3, #4
 80122ce:	d121      	bne.n	8012314 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f06f 0204 	mvn.w	r2, #4
 80122d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2202      	movs	r2, #2
 80122de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	699b      	ldr	r3, [r3, #24]
 80122e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d005      	beq.n	80122fa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	4798      	blx	r3
 80122f8:	e009      	b.n	801230e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	691b      	ldr	r3, [r3, #16]
 801231a:	f003 0308 	and.w	r3, r3, #8
 801231e:	2b08      	cmp	r3, #8
 8012320:	d128      	bne.n	8012374 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	f003 0308 	and.w	r3, r3, #8
 801232c:	2b08      	cmp	r3, #8
 801232e:	d121      	bne.n	8012374 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f06f 0208 	mvn.w	r2, #8
 8012338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2204      	movs	r2, #4
 801233e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	69db      	ldr	r3, [r3, #28]
 8012346:	f003 0303 	and.w	r3, r3, #3
 801234a:	2b00      	cmp	r3, #0
 801234c:	d005      	beq.n	801235a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	4798      	blx	r3
 8012358:	e009      	b.n	801236e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2200      	movs	r2, #0
 8012372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	f003 0310 	and.w	r3, r3, #16
 801237e:	2b10      	cmp	r3, #16
 8012380:	d128      	bne.n	80123d4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	f003 0310 	and.w	r3, r3, #16
 801238c:	2b10      	cmp	r3, #16
 801238e:	d121      	bne.n	80123d4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	f06f 0210 	mvn.w	r2, #16
 8012398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2208      	movs	r2, #8
 801239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	69db      	ldr	r3, [r3, #28]
 80123a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d005      	beq.n	80123ba <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	4798      	blx	r3
 80123b8:	e009      	b.n	80123ce <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d110      	bne.n	8012404 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d109      	bne.n	8012404 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f06f 0201 	mvn.w	r2, #1
 80123f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801240e:	2b80      	cmp	r3, #128	@ 0x80
 8012410:	d110      	bne.n	8012434 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801241c:	2b80      	cmp	r3, #128	@ 0x80
 801241e:	d109      	bne.n	8012434 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8012428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801243e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012442:	d110      	bne.n	8012466 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801244e:	2b80      	cmp	r3, #128	@ 0x80
 8012450:	d109      	bne.n	8012466 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801245a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	691b      	ldr	r3, [r3, #16]
 801246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012470:	2b40      	cmp	r3, #64	@ 0x40
 8012472:	d110      	bne.n	8012496 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801247e:	2b40      	cmp	r3, #64	@ 0x40
 8012480:	d109      	bne.n	8012496 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801248a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	691b      	ldr	r3, [r3, #16]
 801249c:	f003 0320 	and.w	r3, r3, #32
 80124a0:	2b20      	cmp	r3, #32
 80124a2:	d110      	bne.n	80124c6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	f003 0320 	and.w	r3, r3, #32
 80124ae:	2b20      	cmp	r3, #32
 80124b0:	d109      	bne.n	80124c6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f06f 0220 	mvn.w	r2, #32
 80124ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80124c6:	bf00      	nop
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
	...

080124d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d101      	bne.n	80124ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80124ea:	2302      	movs	r3, #2
 80124ec:	e066      	b.n	80125bc <HAL_TIM_OC_ConfigChannel+0xec>
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	2201      	movs	r2, #1
 80124f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2b14      	cmp	r3, #20
 80124fa:	d857      	bhi.n	80125ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80124fc:	a201      	add	r2, pc, #4	@ (adr r2, 8012504 <HAL_TIM_OC_ConfigChannel+0x34>)
 80124fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012502:	bf00      	nop
 8012504:	08012559 	.word	0x08012559
 8012508:	080125ad 	.word	0x080125ad
 801250c:	080125ad 	.word	0x080125ad
 8012510:	080125ad 	.word	0x080125ad
 8012514:	08012567 	.word	0x08012567
 8012518:	080125ad 	.word	0x080125ad
 801251c:	080125ad 	.word	0x080125ad
 8012520:	080125ad 	.word	0x080125ad
 8012524:	08012575 	.word	0x08012575
 8012528:	080125ad 	.word	0x080125ad
 801252c:	080125ad 	.word	0x080125ad
 8012530:	080125ad 	.word	0x080125ad
 8012534:	08012583 	.word	0x08012583
 8012538:	080125ad 	.word	0x080125ad
 801253c:	080125ad 	.word	0x080125ad
 8012540:	080125ad 	.word	0x080125ad
 8012544:	08012591 	.word	0x08012591
 8012548:	080125ad 	.word	0x080125ad
 801254c:	080125ad 	.word	0x080125ad
 8012550:	080125ad 	.word	0x080125ad
 8012554:	0801259f 	.word	0x0801259f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f9b8 	bl	80128d4 <TIM_OC1_SetConfig>
      break;
 8012564:	e025      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	4618      	mov	r0, r3
 801256e:	f000 fa2d 	bl	80129cc <TIM_OC2_SetConfig>
      break;
 8012572:	e01e      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	68b9      	ldr	r1, [r7, #8]
 801257a:	4618      	mov	r0, r3
 801257c:	f000 faa0 	bl	8012ac0 <TIM_OC3_SetConfig>
      break;
 8012580:	e017      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	68b9      	ldr	r1, [r7, #8]
 8012588:	4618      	mov	r0, r3
 801258a:	f000 fb11 	bl	8012bb0 <TIM_OC4_SetConfig>
      break;
 801258e:	e010      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	68b9      	ldr	r1, [r7, #8]
 8012596:	4618      	mov	r0, r3
 8012598:	f000 fb68 	bl	8012c6c <TIM_OC5_SetConfig>
      break;
 801259c:	e009      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68b9      	ldr	r1, [r7, #8]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f000 fbb9 	bl	8012d1c <TIM_OC6_SetConfig>
      break;
 80125aa:	e002      	b.n	80125b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	75fb      	strb	r3, [r7, #23]
      break;
 80125b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80125ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3718      	adds	r7, #24
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d101      	bne.n	80125e0 <HAL_TIM_ConfigClockSource+0x1c>
 80125dc:	2302      	movs	r3, #2
 80125de:	e0b6      	b.n	801274e <HAL_TIM_ConfigClockSource+0x18a>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2201      	movs	r2, #1
 80125e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2202      	movs	r2, #2
 80125ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80125fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8012602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801260a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801261c:	d03e      	beq.n	801269c <HAL_TIM_ConfigClockSource+0xd8>
 801261e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012622:	f200 8087 	bhi.w	8012734 <HAL_TIM_ConfigClockSource+0x170>
 8012626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801262a:	f000 8086 	beq.w	801273a <HAL_TIM_ConfigClockSource+0x176>
 801262e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012632:	d87f      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 8012634:	2b70      	cmp	r3, #112	@ 0x70
 8012636:	d01a      	beq.n	801266e <HAL_TIM_ConfigClockSource+0xaa>
 8012638:	2b70      	cmp	r3, #112	@ 0x70
 801263a:	d87b      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 801263c:	2b60      	cmp	r3, #96	@ 0x60
 801263e:	d050      	beq.n	80126e2 <HAL_TIM_ConfigClockSource+0x11e>
 8012640:	2b60      	cmp	r3, #96	@ 0x60
 8012642:	d877      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 8012644:	2b50      	cmp	r3, #80	@ 0x50
 8012646:	d03c      	beq.n	80126c2 <HAL_TIM_ConfigClockSource+0xfe>
 8012648:	2b50      	cmp	r3, #80	@ 0x50
 801264a:	d873      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 801264c:	2b40      	cmp	r3, #64	@ 0x40
 801264e:	d058      	beq.n	8012702 <HAL_TIM_ConfigClockSource+0x13e>
 8012650:	2b40      	cmp	r3, #64	@ 0x40
 8012652:	d86f      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 8012654:	2b30      	cmp	r3, #48	@ 0x30
 8012656:	d064      	beq.n	8012722 <HAL_TIM_ConfigClockSource+0x15e>
 8012658:	2b30      	cmp	r3, #48	@ 0x30
 801265a:	d86b      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 801265c:	2b20      	cmp	r3, #32
 801265e:	d060      	beq.n	8012722 <HAL_TIM_ConfigClockSource+0x15e>
 8012660:	2b20      	cmp	r3, #32
 8012662:	d867      	bhi.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
 8012664:	2b00      	cmp	r3, #0
 8012666:	d05c      	beq.n	8012722 <HAL_TIM_ConfigClockSource+0x15e>
 8012668:	2b10      	cmp	r3, #16
 801266a:	d05a      	beq.n	8012722 <HAL_TIM_ConfigClockSource+0x15e>
 801266c:	e062      	b.n	8012734 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801267e:	f000 fc23 	bl	8012ec8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	68ba      	ldr	r2, [r7, #8]
 8012698:	609a      	str	r2, [r3, #8]
      break;
 801269a:	e04f      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80126ac:	f000 fc0c 	bl	8012ec8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	689a      	ldr	r2, [r3, #8]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80126be:	609a      	str	r2, [r3, #8]
      break;
 80126c0:	e03c      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80126ce:	461a      	mov	r2, r3
 80126d0:	f000 fb7e 	bl	8012dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2150      	movs	r1, #80	@ 0x50
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 fbd7 	bl	8012e8e <TIM_ITRx_SetConfig>
      break;
 80126e0:	e02c      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80126ee:	461a      	mov	r2, r3
 80126f0:	f000 fb9d 	bl	8012e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2160      	movs	r1, #96	@ 0x60
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 fbc7 	bl	8012e8e <TIM_ITRx_SetConfig>
      break;
 8012700:	e01c      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801270e:	461a      	mov	r2, r3
 8012710:	f000 fb5e 	bl	8012dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2140      	movs	r1, #64	@ 0x40
 801271a:	4618      	mov	r0, r3
 801271c:	f000 fbb7 	bl	8012e8e <TIM_ITRx_SetConfig>
      break;
 8012720:	e00c      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	4619      	mov	r1, r3
 801272c:	4610      	mov	r0, r2
 801272e:	f000 fbae 	bl	8012e8e <TIM_ITRx_SetConfig>
      break;
 8012732:	e003      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8012734:	2301      	movs	r3, #1
 8012736:	73fb      	strb	r3, [r7, #15]
      break;
 8012738:	e000      	b.n	801273c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801273a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2201      	movs	r2, #1
 8012740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801274c:	7bfb      	ldrb	r3, [r7, #15]
}
 801274e:	4618      	mov	r0, r3
 8012750:	3710      	adds	r7, #16
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012756:	b480      	push	{r7}
 8012758:	b083      	sub	sp, #12
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 801275e:	bf00      	nop
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr

0801276a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012772:	bf00      	nop
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr

0801277e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801277e:	b480      	push	{r7}
 8012780:	b083      	sub	sp, #12
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012786:	bf00      	nop
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012792:	b480      	push	{r7}
 8012794:	b083      	sub	sp, #12
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801279a:	bf00      	nop
 801279c:	370c      	adds	r7, #12
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80127a6:	b480      	push	{r7}
 80127a8:	b083      	sub	sp, #12
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80127ae:	bf00      	nop
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr

080127ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80127ba:	b480      	push	{r7}
 80127bc:	b083      	sub	sp, #12
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80127c2:	bf00      	nop
 80127c4:	370c      	adds	r7, #12
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr

080127ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80127ce:	b480      	push	{r7}
 80127d0:	b083      	sub	sp, #12
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80127d6:	bf00      	nop
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr

080127e2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80127e2:	b480      	push	{r7}
 80127e4:	b083      	sub	sp, #12
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80127ea:	bf00      	nop
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr

080127f6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80127f6:	b480      	push	{r7}
 80127f8:	b083      	sub	sp, #12
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80127fe:	bf00      	nop
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
	...

0801280c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4a2a      	ldr	r2, [pc, #168]	@ (80128c8 <TIM_Base_SetConfig+0xbc>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d003      	beq.n	801282c <TIM_Base_SetConfig+0x20>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801282a:	d108      	bne.n	801283e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	4313      	orrs	r3, r2
 801283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4a21      	ldr	r2, [pc, #132]	@ (80128c8 <TIM_Base_SetConfig+0xbc>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d00b      	beq.n	801285e <TIM_Base_SetConfig+0x52>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801284c:	d007      	beq.n	801285e <TIM_Base_SetConfig+0x52>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a1e      	ldr	r2, [pc, #120]	@ (80128cc <TIM_Base_SetConfig+0xc0>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d003      	beq.n	801285e <TIM_Base_SetConfig+0x52>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4a1d      	ldr	r2, [pc, #116]	@ (80128d0 <TIM_Base_SetConfig+0xc4>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d108      	bne.n	8012870 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	4313      	orrs	r3, r2
 801286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	695b      	ldr	r3, [r3, #20]
 801287a:	4313      	orrs	r3, r2
 801287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	689a      	ldr	r2, [r3, #8]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	4a0c      	ldr	r2, [pc, #48]	@ (80128c8 <TIM_Base_SetConfig+0xbc>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d007      	beq.n	80128ac <TIM_Base_SetConfig+0xa0>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	4a0b      	ldr	r2, [pc, #44]	@ (80128cc <TIM_Base_SetConfig+0xc0>)
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d003      	beq.n	80128ac <TIM_Base_SetConfig+0xa0>
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	4a0a      	ldr	r2, [pc, #40]	@ (80128d0 <TIM_Base_SetConfig+0xc4>)
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d103      	bne.n	80128b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	691a      	ldr	r2, [r3, #16]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2201      	movs	r2, #1
 80128b8:	615a      	str	r2, [r3, #20]
}
 80128ba:	bf00      	nop
 80128bc:	3714      	adds	r7, #20
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	40012c00 	.word	0x40012c00
 80128cc:	40014400 	.word	0x40014400
 80128d0:	40014800 	.word	0x40014800

080128d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b087      	sub	sp, #28
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6a1b      	ldr	r3, [r3, #32]
 80128e2:	f023 0201 	bic.w	r2, r3, #1
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a1b      	ldr	r3, [r3, #32]
 80128ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f023 0303 	bic.w	r3, r3, #3
 801290e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	4313      	orrs	r3, r2
 8012918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	f023 0302 	bic.w	r3, r3, #2
 8012920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	689b      	ldr	r3, [r3, #8]
 8012926:	697a      	ldr	r2, [r7, #20]
 8012928:	4313      	orrs	r3, r2
 801292a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4a24      	ldr	r2, [pc, #144]	@ (80129c0 <TIM_OC1_SetConfig+0xec>)
 8012930:	4293      	cmp	r3, r2
 8012932:	d007      	beq.n	8012944 <TIM_OC1_SetConfig+0x70>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4a23      	ldr	r2, [pc, #140]	@ (80129c4 <TIM_OC1_SetConfig+0xf0>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d003      	beq.n	8012944 <TIM_OC1_SetConfig+0x70>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	4a22      	ldr	r2, [pc, #136]	@ (80129c8 <TIM_OC1_SetConfig+0xf4>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d10c      	bne.n	801295e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f023 0308 	bic.w	r3, r3, #8
 801294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	697a      	ldr	r2, [r7, #20]
 8012952:	4313      	orrs	r3, r2
 8012954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f023 0304 	bic.w	r3, r3, #4
 801295c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4a17      	ldr	r2, [pc, #92]	@ (80129c0 <TIM_OC1_SetConfig+0xec>)
 8012962:	4293      	cmp	r3, r2
 8012964:	d007      	beq.n	8012976 <TIM_OC1_SetConfig+0xa2>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4a17      	ldr	r2, [pc, #92]	@ (80129c8 <TIM_OC1_SetConfig+0xf4>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d003      	beq.n	8012976 <TIM_OC1_SetConfig+0xa2>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4a14      	ldr	r2, [pc, #80]	@ (80129c4 <TIM_OC1_SetConfig+0xf0>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d111      	bne.n	801299a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801297c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	695b      	ldr	r3, [r3, #20]
 801298a:	693a      	ldr	r2, [r7, #16]
 801298c:	4313      	orrs	r3, r2
 801298e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	699b      	ldr	r3, [r3, #24]
 8012994:	693a      	ldr	r2, [r7, #16]
 8012996:	4313      	orrs	r3, r2
 8012998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	693a      	ldr	r2, [r7, #16]
 801299e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	697a      	ldr	r2, [r7, #20]
 80129b2:	621a      	str	r2, [r3, #32]
}
 80129b4:	bf00      	nop
 80129b6:	371c      	adds	r7, #28
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	40012c00 	.word	0x40012c00
 80129c4:	40014800 	.word	0x40014800
 80129c8:	40014400 	.word	0x40014400

080129cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b087      	sub	sp, #28
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6a1b      	ldr	r3, [r3, #32]
 80129da:	f023 0210 	bic.w	r2, r3, #16
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6a1b      	ldr	r3, [r3, #32]
 80129e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	699b      	ldr	r3, [r3, #24]
 80129f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80129fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80129fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	021b      	lsls	r3, r3, #8
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	4313      	orrs	r3, r2
 8012a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	f023 0320 	bic.w	r3, r3, #32
 8012a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	689b      	ldr	r3, [r3, #8]
 8012a20:	011b      	lsls	r3, r3, #4
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	4a22      	ldr	r2, [pc, #136]	@ (8012ab4 <TIM_OC2_SetConfig+0xe8>)
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d10d      	bne.n	8012a4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	011b      	lsls	r3, r3, #4
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	4313      	orrs	r3, r2
 8012a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	4a19      	ldr	r2, [pc, #100]	@ (8012ab4 <TIM_OC2_SetConfig+0xe8>)
 8012a50:	4293      	cmp	r3, r2
 8012a52:	d007      	beq.n	8012a64 <TIM_OC2_SetConfig+0x98>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	4a18      	ldr	r2, [pc, #96]	@ (8012ab8 <TIM_OC2_SetConfig+0xec>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d003      	beq.n	8012a64 <TIM_OC2_SetConfig+0x98>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	4a17      	ldr	r2, [pc, #92]	@ (8012abc <TIM_OC2_SetConfig+0xf0>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d113      	bne.n	8012a8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	695b      	ldr	r3, [r3, #20]
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	693a      	ldr	r2, [r7, #16]
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	699b      	ldr	r3, [r3, #24]
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	693a      	ldr	r2, [r7, #16]
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	693a      	ldr	r2, [r7, #16]
 8012a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	685a      	ldr	r2, [r3, #4]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	697a      	ldr	r2, [r7, #20]
 8012aa4:	621a      	str	r2, [r3, #32]
}
 8012aa6:	bf00      	nop
 8012aa8:	371c      	adds	r7, #28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr
 8012ab2:	bf00      	nop
 8012ab4:	40012c00 	.word	0x40012c00
 8012ab8:	40014400 	.word	0x40014400
 8012abc:	40014800 	.word	0x40014800

08012ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b087      	sub	sp, #28
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a1b      	ldr	r3, [r3, #32]
 8012ace:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	69db      	ldr	r3, [r3, #28]
 8012ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f023 0303 	bic.w	r3, r3, #3
 8012afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	689b      	ldr	r3, [r3, #8]
 8012b12:	021b      	lsls	r3, r3, #8
 8012b14:	697a      	ldr	r2, [r7, #20]
 8012b16:	4313      	orrs	r3, r2
 8012b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4a21      	ldr	r2, [pc, #132]	@ (8012ba4 <TIM_OC3_SetConfig+0xe4>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d10d      	bne.n	8012b3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	021b      	lsls	r3, r3, #8
 8012b30:	697a      	ldr	r2, [r7, #20]
 8012b32:	4313      	orrs	r3, r2
 8012b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a18      	ldr	r2, [pc, #96]	@ (8012ba4 <TIM_OC3_SetConfig+0xe4>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d007      	beq.n	8012b56 <TIM_OC3_SetConfig+0x96>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a17      	ldr	r2, [pc, #92]	@ (8012ba8 <TIM_OC3_SetConfig+0xe8>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d003      	beq.n	8012b56 <TIM_OC3_SetConfig+0x96>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a16      	ldr	r2, [pc, #88]	@ (8012bac <TIM_OC3_SetConfig+0xec>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d113      	bne.n	8012b7e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	695b      	ldr	r3, [r3, #20]
 8012b6a:	011b      	lsls	r3, r3, #4
 8012b6c:	693a      	ldr	r2, [r7, #16]
 8012b6e:	4313      	orrs	r3, r2
 8012b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	011b      	lsls	r3, r3, #4
 8012b78:	693a      	ldr	r2, [r7, #16]
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	693a      	ldr	r2, [r7, #16]
 8012b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	685a      	ldr	r2, [r3, #4]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	697a      	ldr	r2, [r7, #20]
 8012b96:	621a      	str	r2, [r3, #32]
}
 8012b98:	bf00      	nop
 8012b9a:	371c      	adds	r7, #28
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr
 8012ba4:	40012c00 	.word	0x40012c00
 8012ba8:	40014400 	.word	0x40014400
 8012bac:	40014800 	.word	0x40014800

08012bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6a1b      	ldr	r3, [r3, #32]
 8012bbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a1b      	ldr	r3, [r3, #32]
 8012bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	69db      	ldr	r3, [r3, #28]
 8012bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	021b      	lsls	r3, r3, #8
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	031b      	lsls	r3, r3, #12
 8012c06:	693a      	ldr	r2, [r7, #16]
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	4a14      	ldr	r2, [pc, #80]	@ (8012c60 <TIM_OC4_SetConfig+0xb0>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d007      	beq.n	8012c24 <TIM_OC4_SetConfig+0x74>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4a13      	ldr	r2, [pc, #76]	@ (8012c64 <TIM_OC4_SetConfig+0xb4>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d003      	beq.n	8012c24 <TIM_OC4_SetConfig+0x74>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4a12      	ldr	r2, [pc, #72]	@ (8012c68 <TIM_OC4_SetConfig+0xb8>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d109      	bne.n	8012c38 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	695b      	ldr	r3, [r3, #20]
 8012c30:	019b      	lsls	r3, r3, #6
 8012c32:	697a      	ldr	r2, [r7, #20]
 8012c34:	4313      	orrs	r3, r2
 8012c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	697a      	ldr	r2, [r7, #20]
 8012c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	685a      	ldr	r2, [r3, #4]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	693a      	ldr	r2, [r7, #16]
 8012c50:	621a      	str	r2, [r3, #32]
}
 8012c52:	bf00      	nop
 8012c54:	371c      	adds	r7, #28
 8012c56:	46bd      	mov	sp, r7
 8012c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	40012c00 	.word	0x40012c00
 8012c64:	40014400 	.word	0x40014400
 8012c68:	40014800 	.word	0x40014800

08012c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b087      	sub	sp, #28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6a1b      	ldr	r3, [r3, #32]
 8012c7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a1b      	ldr	r3, [r3, #32]
 8012c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68fa      	ldr	r2, [r7, #12]
 8012ca6:	4313      	orrs	r3, r2
 8012ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	041b      	lsls	r3, r3, #16
 8012cb8:	693a      	ldr	r2, [r7, #16]
 8012cba:	4313      	orrs	r3, r2
 8012cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4a13      	ldr	r2, [pc, #76]	@ (8012d10 <TIM_OC5_SetConfig+0xa4>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d007      	beq.n	8012cd6 <TIM_OC5_SetConfig+0x6a>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4a12      	ldr	r2, [pc, #72]	@ (8012d14 <TIM_OC5_SetConfig+0xa8>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d003      	beq.n	8012cd6 <TIM_OC5_SetConfig+0x6a>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4a11      	ldr	r2, [pc, #68]	@ (8012d18 <TIM_OC5_SetConfig+0xac>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d109      	bne.n	8012cea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	695b      	ldr	r3, [r3, #20]
 8012ce2:	021b      	lsls	r3, r3, #8
 8012ce4:	697a      	ldr	r2, [r7, #20]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	697a      	ldr	r2, [r7, #20]
 8012cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	685a      	ldr	r2, [r3, #4]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	693a      	ldr	r2, [r7, #16]
 8012d02:	621a      	str	r2, [r3, #32]
}
 8012d04:	bf00      	nop
 8012d06:	371c      	adds	r7, #28
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr
 8012d10:	40012c00 	.word	0x40012c00
 8012d14:	40014400 	.word	0x40014400
 8012d18:	40014800 	.word	0x40014800

08012d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b087      	sub	sp, #28
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6a1b      	ldr	r3, [r3, #32]
 8012d2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a1b      	ldr	r3, [r3, #32]
 8012d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	021b      	lsls	r3, r3, #8
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4313      	orrs	r3, r2
 8012d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	051b      	lsls	r3, r3, #20
 8012d6a:	693a      	ldr	r2, [r7, #16]
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	4a14      	ldr	r2, [pc, #80]	@ (8012dc4 <TIM_OC6_SetConfig+0xa8>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d007      	beq.n	8012d88 <TIM_OC6_SetConfig+0x6c>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	4a13      	ldr	r2, [pc, #76]	@ (8012dc8 <TIM_OC6_SetConfig+0xac>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d003      	beq.n	8012d88 <TIM_OC6_SetConfig+0x6c>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a12      	ldr	r2, [pc, #72]	@ (8012dcc <TIM_OC6_SetConfig+0xb0>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d109      	bne.n	8012d9c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	695b      	ldr	r3, [r3, #20]
 8012d94:	029b      	lsls	r3, r3, #10
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	697a      	ldr	r2, [r7, #20]
 8012da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	685a      	ldr	r2, [r3, #4]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	693a      	ldr	r2, [r7, #16]
 8012db4:	621a      	str	r2, [r3, #32]
}
 8012db6:	bf00      	nop
 8012db8:	371c      	adds	r7, #28
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	40012c00 	.word	0x40012c00
 8012dc8:	40014400 	.word	0x40014400
 8012dcc:	40014800 	.word	0x40014800

08012dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b087      	sub	sp, #28
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	6a1b      	ldr	r3, [r3, #32]
 8012de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6a1b      	ldr	r3, [r3, #32]
 8012de6:	f023 0201 	bic.w	r2, r3, #1
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	699b      	ldr	r3, [r3, #24]
 8012df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	011b      	lsls	r3, r3, #4
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	4313      	orrs	r3, r2
 8012e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	f023 030a 	bic.w	r3, r3, #10
 8012e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	4313      	orrs	r3, r2
 8012e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	697a      	ldr	r2, [r7, #20]
 8012e20:	621a      	str	r2, [r3, #32]
}
 8012e22:	bf00      	nop
 8012e24:	371c      	adds	r7, #28
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr

08012e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e2e:	b480      	push	{r7}
 8012e30:	b087      	sub	sp, #28
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	60f8      	str	r0, [r7, #12]
 8012e36:	60b9      	str	r1, [r7, #8]
 8012e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	6a1b      	ldr	r3, [r3, #32]
 8012e3e:	f023 0210 	bic.w	r2, r3, #16
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	699b      	ldr	r3, [r3, #24]
 8012e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	6a1b      	ldr	r3, [r3, #32]
 8012e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	031b      	lsls	r3, r3, #12
 8012e5e:	697a      	ldr	r2, [r7, #20]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	011b      	lsls	r3, r3, #4
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	697a      	ldr	r2, [r7, #20]
 8012e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	693a      	ldr	r2, [r7, #16]
 8012e80:	621a      	str	r2, [r3, #32]
}
 8012e82:	bf00      	nop
 8012e84:	371c      	adds	r7, #28
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr

08012e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012e8e:	b480      	push	{r7}
 8012e90:	b085      	sub	sp, #20
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8012ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012eaa:	683a      	ldr	r2, [r7, #0]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	f043 0307 	orr.w	r3, r3, #7
 8012eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	68fa      	ldr	r2, [r7, #12]
 8012eba:	609a      	str	r2, [r3, #8]
}
 8012ebc:	bf00      	nop
 8012ebe:	3714      	adds	r7, #20
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr

08012ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b087      	sub	sp, #28
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	021a      	lsls	r2, r3, #8
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	431a      	orrs	r2, r3
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	697a      	ldr	r2, [r7, #20]
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	609a      	str	r2, [r3, #8]
}
 8012efc:	bf00      	nop
 8012efe:	371c      	adds	r7, #28
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4a1e      	ldr	r2, [pc, #120]	@ (8012f8c <TIM_ResetCallback+0x84>)
 8012f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8012f90 <TIM_ResetCallback+0x88>)
 8012f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4a1c      	ldr	r2, [pc, #112]	@ (8012f94 <TIM_ResetCallback+0x8c>)
 8012f24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8012f98 <TIM_ResetCallback+0x90>)
 8012f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4a1a      	ldr	r2, [pc, #104]	@ (8012f9c <TIM_ResetCallback+0x94>)
 8012f34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4a19      	ldr	r2, [pc, #100]	@ (8012fa0 <TIM_ResetCallback+0x98>)
 8012f3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4a18      	ldr	r2, [pc, #96]	@ (8012fa4 <TIM_ResetCallback+0x9c>)
 8012f44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4a17      	ldr	r2, [pc, #92]	@ (8012fa8 <TIM_ResetCallback+0xa0>)
 8012f4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4a16      	ldr	r2, [pc, #88]	@ (8012fac <TIM_ResetCallback+0xa4>)
 8012f54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	4a15      	ldr	r2, [pc, #84]	@ (8012fb0 <TIM_ResetCallback+0xa8>)
 8012f5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	4a14      	ldr	r2, [pc, #80]	@ (8012fb4 <TIM_ResetCallback+0xac>)
 8012f64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4a13      	ldr	r2, [pc, #76]	@ (8012fb8 <TIM_ResetCallback+0xb0>)
 8012f6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4a12      	ldr	r2, [pc, #72]	@ (8012fbc <TIM_ResetCallback+0xb4>)
 8012f74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	4a11      	ldr	r2, [pc, #68]	@ (8012fc0 <TIM_ResetCallback+0xb8>)
 8012f7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8012f80:	bf00      	nop
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr
 8012f8c:	08005bfd 	.word	0x08005bfd
 8012f90:	08012757 	.word	0x08012757
 8012f94:	080127cf 	.word	0x080127cf
 8012f98:	080127e3 	.word	0x080127e3
 8012f9c:	0801277f 	.word	0x0801277f
 8012fa0:	08012793 	.word	0x08012793
 8012fa4:	0801276b 	.word	0x0801276b
 8012fa8:	080127a7 	.word	0x080127a7
 8012fac:	080127bb 	.word	0x080127bb
 8012fb0:	080127f7 	.word	0x080127f7
 8012fb4:	080131a5 	.word	0x080131a5
 8012fb8:	080131b9 	.word	0x080131b9
 8012fbc:	080131cd 	.word	0x080131cd
 8012fc0:	080131e1 	.word	0x080131e1

08012fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d101      	bne.n	8012fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012fd8:	2302      	movs	r3, #2
 8012fda:	e04a      	b.n	8013072 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2201      	movs	r2, #1
 8012fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2202      	movs	r2, #2
 8012fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4a1f      	ldr	r2, [pc, #124]	@ (8013080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d108      	bne.n	8013018 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801300c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	68fa      	ldr	r2, [r7, #12]
 8013014:	4313      	orrs	r3, r2
 8013016:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801301e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	4313      	orrs	r3, r2
 8013028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	68fa      	ldr	r2, [r7, #12]
 8013030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4a12      	ldr	r2, [pc, #72]	@ (8013080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8013038:	4293      	cmp	r3, r2
 801303a:	d004      	beq.n	8013046 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013044:	d10c      	bne.n	8013060 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801304c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	68ba      	ldr	r2, [r7, #8]
 8013054:	4313      	orrs	r3, r2
 8013056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2201      	movs	r2, #1
 8013064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	40012c00 	.word	0x40012c00

08013084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013084:	b480      	push	{r7}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801308e:	2300      	movs	r3, #0
 8013090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013098:	2b01      	cmp	r3, #1
 801309a:	d101      	bne.n	80130a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801309c:	2302      	movs	r3, #2
 801309e:	e078      	b.n	8013192 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2201      	movs	r2, #1
 80130a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	68db      	ldr	r3, [r3, #12]
 80130b2:	4313      	orrs	r3, r2
 80130b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	689b      	ldr	r3, [r3, #8]
 80130c0:	4313      	orrs	r3, r2
 80130c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4313      	orrs	r3, r2
 80130d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4313      	orrs	r3, r2
 80130de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	691b      	ldr	r3, [r3, #16]
 80130ea:	4313      	orrs	r3, r2
 80130ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	695b      	ldr	r3, [r3, #20]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013106:	4313      	orrs	r3, r2
 8013108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	041b      	lsls	r3, r3, #16
 8013116:	4313      	orrs	r3, r2
 8013118:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a20      	ldr	r2, [pc, #128]	@ (80131a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d106      	bne.n	8013132 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	69db      	ldr	r3, [r3, #28]
 801312e:	4313      	orrs	r3, r2
 8013130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	4a1a      	ldr	r2, [pc, #104]	@ (80131a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8013138:	4293      	cmp	r3, r2
 801313a:	d121      	bne.n	8013180 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013146:	051b      	lsls	r3, r3, #20
 8013148:	4313      	orrs	r3, r2
 801314a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	6a1b      	ldr	r3, [r3, #32]
 8013156:	4313      	orrs	r3, r2
 8013158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013164:	4313      	orrs	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4a0c      	ldr	r2, [pc, #48]	@ (80131a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d106      	bne.n	8013180 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801317c:	4313      	orrs	r3, r2
 801317e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2200      	movs	r2, #0
 801318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	3714      	adds	r7, #20
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr
 801319e:	bf00      	nop
 80131a0:	40012c00 	.word	0x40012c00

080131a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80131ac:	bf00      	nop
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80131c0:	bf00      	nop
 80131c2:	370c      	adds	r7, #12
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr

080131cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80131d4:	bf00      	nop
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80131e8:	bf00      	nop
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr

080131f4 <LL_RCC_GetUSARTClockSource>:
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80131fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013200:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	4013      	ands	r3, r2
}
 8013208:	4618      	mov	r0, r3
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <LL_RCC_GetLPUARTClockSource>:
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801321c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013220:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	4013      	ands	r3, r2
}
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013242:	2301      	movs	r3, #1
 8013244:	e042      	b.n	80132cc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801324c:	2b00      	cmp	r3, #0
 801324e:	d106      	bne.n	801325e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7f8 fe03 	bl	800be64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2224      	movs	r2, #36	@ 0x24
 8013262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f022 0201 	bic.w	r2, r2, #1
 8013274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f000 fbfe 	bl	8013a78 <UART_SetConfig>
 801327c:	4603      	mov	r3, r0
 801327e:	2b01      	cmp	r3, #1
 8013280:	d101      	bne.n	8013286 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013282:	2301      	movs	r3, #1
 8013284:	e022      	b.n	80132cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801328a:	2b00      	cmp	r3, #0
 801328c:	d002      	beq.n	8013294 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 fe1a 	bl	8013ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	685a      	ldr	r2, [r3, #4]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80132a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	689a      	ldr	r2, [r3, #8]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80132b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f042 0201 	orr.w	r2, r2, #1
 80132c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fea1 	bl	801400c <UART_CheckIdleState>
 80132ca:	4603      	mov	r3, r0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b08a      	sub	sp, #40	@ 0x28
 80132d8:	af02      	add	r7, sp, #8
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	603b      	str	r3, [r7, #0]
 80132e0:	4613      	mov	r3, r2
 80132e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80132ea:	2b20      	cmp	r3, #32
 80132ec:	d17b      	bne.n	80133e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <HAL_UART_Transmit+0x26>
 80132f4:	88fb      	ldrh	r3, [r7, #6]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d101      	bne.n	80132fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80132fa:	2301      	movs	r3, #1
 80132fc:	e074      	b.n	80133e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2221      	movs	r2, #33	@ 0x21
 801330a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801330e:	f7fb f9db 	bl	800e6c8 <HAL_GetTick>
 8013312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	88fa      	ldrh	r2, [r7, #6]
 8013318:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	88fa      	ldrh	r2, [r7, #6]
 8013320:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801332c:	d108      	bne.n	8013340 <HAL_UART_Transmit+0x6c>
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	691b      	ldr	r3, [r3, #16]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d104      	bne.n	8013340 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	61bb      	str	r3, [r7, #24]
 801333e:	e003      	b.n	8013348 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013344:	2300      	movs	r3, #0
 8013346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013348:	e030      	b.n	80133ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2200      	movs	r2, #0
 8013352:	2180      	movs	r1, #128	@ 0x80
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f000 ff03 	bl	8014160 <UART_WaitOnFlagUntilTimeout>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d005      	beq.n	801336c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2220      	movs	r2, #32
 8013364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013368:	2303      	movs	r3, #3
 801336a:	e03d      	b.n	80133e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d10b      	bne.n	801338a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	881b      	ldrh	r3, [r3, #0]
 8013376:	461a      	mov	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	3302      	adds	r3, #2
 8013386:	61bb      	str	r3, [r7, #24]
 8013388:	e007      	b.n	801339a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	781a      	ldrb	r2, [r3, #0]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	3301      	adds	r3, #1
 8013398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	3b01      	subs	r3, #1
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d1c8      	bne.n	801334a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	2200      	movs	r2, #0
 80133c0:	2140      	movs	r1, #64	@ 0x40
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f000 fecc 	bl	8014160 <UART_WaitOnFlagUntilTimeout>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d005      	beq.n	80133da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2220      	movs	r2, #32
 80133d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80133d6:	2303      	movs	r3, #3
 80133d8:	e006      	b.n	80133e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2220      	movs	r2, #32
 80133de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	e000      	b.n	80133e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80133e6:	2302      	movs	r3, #2
  }
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3720      	adds	r7, #32
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b0ba      	sub	sp, #232	@ 0xe8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	69db      	ldr	r3, [r3, #28]
 80133fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013416:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801341a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801341e:	4013      	ands	r3, r2
 8013420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8013424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013428:	2b00      	cmp	r3, #0
 801342a:	d11b      	bne.n	8013464 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013430:	f003 0320 	and.w	r3, r3, #32
 8013434:	2b00      	cmp	r3, #0
 8013436:	d015      	beq.n	8013464 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801343c:	f003 0320 	and.w	r3, r3, #32
 8013440:	2b00      	cmp	r3, #0
 8013442:	d105      	bne.n	8013450 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801344c:	2b00      	cmp	r3, #0
 801344e:	d009      	beq.n	8013464 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013454:	2b00      	cmp	r3, #0
 8013456:	f000 82e3 	beq.w	8013a20 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	4798      	blx	r3
      }
      return;
 8013462:	e2dd      	b.n	8013a20 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013468:	2b00      	cmp	r3, #0
 801346a:	f000 8123 	beq.w	80136b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801346e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013472:	4b8d      	ldr	r3, [pc, #564]	@ (80136a8 <HAL_UART_IRQHandler+0x2b8>)
 8013474:	4013      	ands	r3, r2
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801347a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801347e:	4b8b      	ldr	r3, [pc, #556]	@ (80136ac <HAL_UART_IRQHandler+0x2bc>)
 8013480:	4013      	ands	r3, r2
 8013482:	2b00      	cmp	r3, #0
 8013484:	f000 8116 	beq.w	80136b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	2b00      	cmp	r3, #0
 8013492:	d011      	beq.n	80134b8 <HAL_UART_IRQHandler+0xc8>
 8013494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00b      	beq.n	80134b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2201      	movs	r2, #1
 80134a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80134ae:	f043 0201 	orr.w	r2, r3, #1
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80134b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80134bc:	f003 0302 	and.w	r3, r3, #2
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d011      	beq.n	80134e8 <HAL_UART_IRQHandler+0xf8>
 80134c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134c8:	f003 0301 	and.w	r3, r3, #1
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d00b      	beq.n	80134e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2202      	movs	r2, #2
 80134d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80134de:	f043 0204 	orr.w	r2, r3, #4
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80134e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80134ec:	f003 0304 	and.w	r3, r3, #4
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d011      	beq.n	8013518 <HAL_UART_IRQHandler+0x128>
 80134f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134f8:	f003 0301 	and.w	r3, r3, #1
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00b      	beq.n	8013518 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2204      	movs	r2, #4
 8013506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801350e:	f043 0202 	orr.w	r2, r3, #2
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801351c:	f003 0308 	and.w	r3, r3, #8
 8013520:	2b00      	cmp	r3, #0
 8013522:	d017      	beq.n	8013554 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013528:	f003 0320 	and.w	r3, r3, #32
 801352c:	2b00      	cmp	r3, #0
 801352e:	d105      	bne.n	801353c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013530:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013534:	4b5c      	ldr	r3, [pc, #368]	@ (80136a8 <HAL_UART_IRQHandler+0x2b8>)
 8013536:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00b      	beq.n	8013554 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2208      	movs	r2, #8
 8013542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801354a:	f043 0208 	orr.w	r2, r3, #8
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801355c:	2b00      	cmp	r3, #0
 801355e:	d012      	beq.n	8013586 <HAL_UART_IRQHandler+0x196>
 8013560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013564:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00c      	beq.n	8013586 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801357c:	f043 0220 	orr.w	r2, r3, #32
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801358c:	2b00      	cmp	r3, #0
 801358e:	f000 8249 	beq.w	8013a24 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013596:	f003 0320 	and.w	r3, r3, #32
 801359a:	2b00      	cmp	r3, #0
 801359c:	d013      	beq.n	80135c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80135a2:	f003 0320 	and.w	r3, r3, #32
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d105      	bne.n	80135b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80135aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80135ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d007      	beq.n	80135c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d003      	beq.n	80135c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80135cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	689b      	ldr	r3, [r3, #8]
 80135d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135da:	2b40      	cmp	r3, #64	@ 0x40
 80135dc:	d005      	beq.n	80135ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80135de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80135e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d054      	beq.n	8013694 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f000 fe1f 	bl	801422e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135fa:	2b40      	cmp	r3, #64	@ 0x40
 80135fc:	d146      	bne.n	801368c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	3308      	adds	r3, #8
 8013604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801360c:	e853 3f00 	ldrex	r3, [r3]
 8013610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8013614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801361c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	3308      	adds	r3, #8
 8013626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801362a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801362e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801363a:	e841 2300 	strex	r3, r2, [r1]
 801363e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8013642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1d9      	bne.n	80135fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013650:	2b00      	cmp	r3, #0
 8013652:	d017      	beq.n	8013684 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801365a:	4a15      	ldr	r2, [pc, #84]	@ (80136b0 <HAL_UART_IRQHandler+0x2c0>)
 801365c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013664:	4618      	mov	r0, r3
 8013666:	f7fb f9d9 	bl	800ea1c <HAL_DMA_Abort_IT>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d019      	beq.n	80136a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801367e:	4610      	mov	r0, r2
 8013680:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013682:	e00f      	b.n	80136a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 f9e1 	bl	8013a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801368a:	e00b      	b.n	80136a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 f9dd 	bl	8013a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013692:	e007      	b.n	80136a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f9d9 	bl	8013a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80136a2:	e1bf      	b.n	8013a24 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136a4:	bf00      	nop
    return;
 80136a6:	e1bd      	b.n	8013a24 <HAL_UART_IRQHandler+0x634>
 80136a8:	10000001 	.word	0x10000001
 80136ac:	04000120 	.word	0x04000120
 80136b0:	080142fb 	.word	0x080142fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	f040 8153 	bne.w	8013964 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80136be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80136c2:	f003 0310 	and.w	r3, r3, #16
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 814c 	beq.w	8013964 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80136cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80136d0:	f003 0310 	and.w	r3, r3, #16
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 8145 	beq.w	8013964 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2210      	movs	r2, #16
 80136e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136ec:	2b40      	cmp	r3, #64	@ 0x40
 80136ee:	f040 80bb 	bne.w	8013868 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 818f 	beq.w	8013a28 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013710:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013714:	429a      	cmp	r2, r3
 8013716:	f080 8187 	bcs.w	8013a28 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013720:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f003 0320 	and.w	r3, r3, #32
 8013732:	2b00      	cmp	r3, #0
 8013734:	f040 8087 	bne.w	8013846 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013744:	e853 3f00 	ldrex	r3, [r3]
 8013748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	461a      	mov	r2, r3
 801375e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013766:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801376a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801376e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013772:	e841 2300 	strex	r3, r2, [r1]
 8013776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1da      	bne.n	8013738 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3308      	adds	r3, #8
 8013788:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801378c:	e853 3f00 	ldrex	r3, [r3]
 8013790:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8013792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013794:	f023 0301 	bic.w	r3, r3, #1
 8013798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	3308      	adds	r3, #8
 80137a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80137a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80137aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80137ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80137b2:	e841 2300 	strex	r3, r2, [r1]
 80137b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80137b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d1e1      	bne.n	8013782 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	3308      	adds	r3, #8
 80137c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80137c8:	e853 3f00 	ldrex	r3, [r3]
 80137cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80137ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80137d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	3308      	adds	r3, #8
 80137de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80137e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80137e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80137e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80137ea:	e841 2300 	strex	r3, r2, [r1]
 80137ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80137f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d1e3      	bne.n	80137be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2220      	movs	r2, #32
 80137fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2200      	movs	r2, #0
 8013802:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801380a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801380c:	e853 3f00 	ldrex	r3, [r3]
 8013810:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013814:	f023 0310 	bic.w	r3, r3, #16
 8013818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	461a      	mov	r2, r3
 8013822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013826:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013828:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801382a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801382c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801382e:	e841 2300 	strex	r3, r2, [r1]
 8013832:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013836:	2b00      	cmp	r3, #0
 8013838:	d1e4      	bne.n	8013804 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013840:	4618      	mov	r0, r3
 8013842:	f7fb f88c 	bl	800e95e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2202      	movs	r2, #2
 801384a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013858:	b29b      	uxth	r3, r3
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	b29b      	uxth	r3, r3
 801385e:	4619      	mov	r1, r3
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f8fd 	bl	8013a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013866:	e0df      	b.n	8013a28 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013874:	b29b      	uxth	r3, r3
 8013876:	1ad3      	subs	r3, r2, r3
 8013878:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013882:	b29b      	uxth	r3, r3
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 80d1 	beq.w	8013a2c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801388a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 80cc 	beq.w	8013a2c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801389a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389c:	e853 3f00 	ldrex	r3, [r3]
 80138a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80138a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80138a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	461a      	mov	r2, r3
 80138b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80138b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80138b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80138bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138be:	e841 2300 	strex	r3, r2, [r1]
 80138c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80138c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d1e4      	bne.n	8013894 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	3308      	adds	r3, #8
 80138d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d4:	e853 3f00 	ldrex	r3, [r3]
 80138d8:	623b      	str	r3, [r7, #32]
   return(result);
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80138e0:	f023 0301 	bic.w	r3, r3, #1
 80138e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	3308      	adds	r3, #8
 80138ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80138f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80138f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138fa:	e841 2300 	strex	r3, r2, [r1]
 80138fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013902:	2b00      	cmp	r3, #0
 8013904:	d1e1      	bne.n	80138ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2220      	movs	r2, #32
 801390a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2200      	movs	r2, #0
 8013912:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2200      	movs	r2, #0
 8013918:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	e853 3f00 	ldrex	r3, [r3]
 8013926:	60fb      	str	r3, [r7, #12]
   return(result);
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	f023 0310 	bic.w	r3, r3, #16
 801392e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	461a      	mov	r2, r3
 8013938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801393c:	61fb      	str	r3, [r7, #28]
 801393e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013940:	69b9      	ldr	r1, [r7, #24]
 8013942:	69fa      	ldr	r2, [r7, #28]
 8013944:	e841 2300 	strex	r3, r2, [r1]
 8013948:	617b      	str	r3, [r7, #20]
   return(result);
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d1e4      	bne.n	801391a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2202      	movs	r2, #2
 8013954:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801395a:	4619      	mov	r1, r3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f000 f87f 	bl	8013a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013962:	e063      	b.n	8013a2c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <HAL_UART_IRQHandler+0x59e>
 8013970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013978:	2b00      	cmp	r3, #0
 801397a:	d008      	beq.n	801398e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8013984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 fcf8 	bl	801437c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801398c:	e051      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013996:	2b00      	cmp	r3, #0
 8013998:	d014      	beq.n	80139c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801399e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d105      	bne.n	80139b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80139a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80139aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d008      	beq.n	80139c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d03a      	beq.n	8013a30 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	4798      	blx	r3
    }
    return;
 80139c2:	e035      	b.n	8013a30 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80139c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80139c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d009      	beq.n	80139e4 <HAL_UART_IRQHandler+0x5f4>
 80139d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80139d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d003      	beq.n	80139e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 fca2 	bl	8014326 <UART_EndTransmit_IT>
    return;
 80139e2:	e026      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80139e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80139e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d009      	beq.n	8013a04 <HAL_UART_IRQHandler+0x614>
 80139f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80139f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d003      	beq.n	8013a04 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f000 fcd1 	bl	80143a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013a02:	e016      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d010      	beq.n	8013a32 <HAL_UART_IRQHandler+0x642>
 8013a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	da0c      	bge.n	8013a32 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 fcb9 	bl	8014390 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013a1e:	e008      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
      return;
 8013a20:	bf00      	nop
 8013a22:	e006      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
    return;
 8013a24:	bf00      	nop
 8013a26:	e004      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
      return;
 8013a28:	bf00      	nop
 8013a2a:	e002      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
      return;
 8013a2c:	bf00      	nop
 8013a2e:	e000      	b.n	8013a32 <HAL_UART_IRQHandler+0x642>
    return;
 8013a30:	bf00      	nop
  }
}
 8013a32:	37e8      	adds	r7, #232	@ 0xe8
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013a40:	bf00      	nop
 8013a42:	370c      	adds	r7, #12
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr

08013a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b083      	sub	sp, #12
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013a54:	bf00      	nop
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013a6c:	bf00      	nop
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a7c:	b08c      	sub	sp, #48	@ 0x30
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a82:	2300      	movs	r3, #0
 8013a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	689a      	ldr	r2, [r3, #8]
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	691b      	ldr	r3, [r3, #16]
 8013a90:	431a      	orrs	r2, r3
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	695b      	ldr	r3, [r3, #20]
 8013a96:	431a      	orrs	r2, r3
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	4baf      	ldr	r3, [pc, #700]	@ (8013d64 <UART_SetConfig+0x2ec>)
 8013aa8:	4013      	ands	r3, r2
 8013aaa:	697a      	ldr	r2, [r7, #20]
 8013aac:	6812      	ldr	r2, [r2, #0]
 8013aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ab0:	430b      	orrs	r3, r1
 8013ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	68da      	ldr	r2, [r3, #12]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	430a      	orrs	r2, r1
 8013ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	699b      	ldr	r3, [r3, #24]
 8013ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4aa4      	ldr	r2, [pc, #656]	@ (8013d68 <UART_SetConfig+0x2f0>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d004      	beq.n	8013ae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	6a1b      	ldr	r3, [r3, #32]
 8013ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	689b      	ldr	r3, [r3, #8]
 8013aea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8013aee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	6812      	ldr	r2, [r2, #0]
 8013af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013af8:	430b      	orrs	r3, r1
 8013afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b02:	f023 010f 	bic.w	r1, r3, #15
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	430a      	orrs	r2, r1
 8013b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	4a95      	ldr	r2, [pc, #596]	@ (8013d6c <UART_SetConfig+0x2f4>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d125      	bne.n	8013b68 <UART_SetConfig+0xf0>
 8013b1c:	2003      	movs	r0, #3
 8013b1e:	f7ff fb69 	bl	80131f4 <LL_RCC_GetUSARTClockSource>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b03      	cmp	r3, #3
 8013b26:	d81b      	bhi.n	8013b60 <UART_SetConfig+0xe8>
 8013b28:	a201      	add	r2, pc, #4	@ (adr r2, 8013b30 <UART_SetConfig+0xb8>)
 8013b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b2e:	bf00      	nop
 8013b30:	08013b41 	.word	0x08013b41
 8013b34:	08013b51 	.word	0x08013b51
 8013b38:	08013b49 	.word	0x08013b49
 8013b3c:	08013b59 	.word	0x08013b59
 8013b40:	2301      	movs	r3, #1
 8013b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b46:	e042      	b.n	8013bce <UART_SetConfig+0x156>
 8013b48:	2302      	movs	r3, #2
 8013b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b4e:	e03e      	b.n	8013bce <UART_SetConfig+0x156>
 8013b50:	2304      	movs	r3, #4
 8013b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b56:	e03a      	b.n	8013bce <UART_SetConfig+0x156>
 8013b58:	2308      	movs	r3, #8
 8013b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b5e:	e036      	b.n	8013bce <UART_SetConfig+0x156>
 8013b60:	2310      	movs	r3, #16
 8013b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b66:	e032      	b.n	8013bce <UART_SetConfig+0x156>
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	4a7e      	ldr	r2, [pc, #504]	@ (8013d68 <UART_SetConfig+0x2f0>)
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d12a      	bne.n	8013bc8 <UART_SetConfig+0x150>
 8013b72:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8013b76:	f7ff fb4d 	bl	8013214 <LL_RCC_GetLPUARTClockSource>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013b80:	d01a      	beq.n	8013bb8 <UART_SetConfig+0x140>
 8013b82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013b86:	d81b      	bhi.n	8013bc0 <UART_SetConfig+0x148>
 8013b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013b8c:	d00c      	beq.n	8013ba8 <UART_SetConfig+0x130>
 8013b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013b92:	d815      	bhi.n	8013bc0 <UART_SetConfig+0x148>
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d003      	beq.n	8013ba0 <UART_SetConfig+0x128>
 8013b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013b9c:	d008      	beq.n	8013bb0 <UART_SetConfig+0x138>
 8013b9e:	e00f      	b.n	8013bc0 <UART_SetConfig+0x148>
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013ba6:	e012      	b.n	8013bce <UART_SetConfig+0x156>
 8013ba8:	2302      	movs	r3, #2
 8013baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013bae:	e00e      	b.n	8013bce <UART_SetConfig+0x156>
 8013bb0:	2304      	movs	r3, #4
 8013bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013bb6:	e00a      	b.n	8013bce <UART_SetConfig+0x156>
 8013bb8:	2308      	movs	r3, #8
 8013bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013bbe:	e006      	b.n	8013bce <UART_SetConfig+0x156>
 8013bc0:	2310      	movs	r3, #16
 8013bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013bc6:	e002      	b.n	8013bce <UART_SetConfig+0x156>
 8013bc8:	2310      	movs	r3, #16
 8013bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4a65      	ldr	r2, [pc, #404]	@ (8013d68 <UART_SetConfig+0x2f0>)
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	f040 8097 	bne.w	8013d08 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013bda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013bde:	2b08      	cmp	r3, #8
 8013be0:	d823      	bhi.n	8013c2a <UART_SetConfig+0x1b2>
 8013be2:	a201      	add	r2, pc, #4	@ (adr r2, 8013be8 <UART_SetConfig+0x170>)
 8013be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013be8:	08013c0d 	.word	0x08013c0d
 8013bec:	08013c2b 	.word	0x08013c2b
 8013bf0:	08013c15 	.word	0x08013c15
 8013bf4:	08013c2b 	.word	0x08013c2b
 8013bf8:	08013c1b 	.word	0x08013c1b
 8013bfc:	08013c2b 	.word	0x08013c2b
 8013c00:	08013c2b 	.word	0x08013c2b
 8013c04:	08013c2b 	.word	0x08013c2b
 8013c08:	08013c23 	.word	0x08013c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013c0c:	f7fc fd70 	bl	80106f0 <HAL_RCC_GetPCLK1Freq>
 8013c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013c12:	e010      	b.n	8013c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013c14:	4b56      	ldr	r3, [pc, #344]	@ (8013d70 <UART_SetConfig+0x2f8>)
 8013c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013c18:	e00d      	b.n	8013c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013c1a:	f7fc fce9 	bl	80105f0 <HAL_RCC_GetSysClockFreq>
 8013c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013c20:	e009      	b.n	8013c36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013c28:	e005      	b.n	8013c36 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f000 812b 	beq.w	8013e94 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c42:	4a4c      	ldr	r2, [pc, #304]	@ (8013d74 <UART_SetConfig+0x2fc>)
 8013c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	4613      	mov	r3, r2
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	4413      	add	r3, r2
 8013c5c:	69ba      	ldr	r2, [r7, #24]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d305      	bcc.n	8013c6e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c68:	69ba      	ldr	r2, [r7, #24]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d903      	bls.n	8013c76 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013c74:	e10e      	b.n	8013e94 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c78:	2200      	movs	r2, #0
 8013c7a:	60bb      	str	r3, [r7, #8]
 8013c7c:	60fa      	str	r2, [r7, #12]
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c82:	4a3c      	ldr	r2, [pc, #240]	@ (8013d74 <UART_SetConfig+0x2fc>)
 8013c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	603b      	str	r3, [r7, #0]
 8013c8e:	607a      	str	r2, [r7, #4]
 8013c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013c98:	f7ed f82e 	bl	8000cf8 <__aeabi_uldivmod>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	f04f 0200 	mov.w	r2, #0
 8013ca8:	f04f 0300 	mov.w	r3, #0
 8013cac:	020b      	lsls	r3, r1, #8
 8013cae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013cb2:	0202      	lsls	r2, r0, #8
 8013cb4:	6979      	ldr	r1, [r7, #20]
 8013cb6:	6849      	ldr	r1, [r1, #4]
 8013cb8:	0849      	lsrs	r1, r1, #1
 8013cba:	2000      	movs	r0, #0
 8013cbc:	460c      	mov	r4, r1
 8013cbe:	4605      	mov	r5, r0
 8013cc0:	eb12 0804 	adds.w	r8, r2, r4
 8013cc4:	eb43 0905 	adc.w	r9, r3, r5
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	469a      	mov	sl, r3
 8013cd0:	4693      	mov	fp, r2
 8013cd2:	4652      	mov	r2, sl
 8013cd4:	465b      	mov	r3, fp
 8013cd6:	4640      	mov	r0, r8
 8013cd8:	4649      	mov	r1, r9
 8013cda:	f7ed f80d 	bl	8000cf8 <__aeabi_uldivmod>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013cec:	d308      	bcc.n	8013d00 <UART_SetConfig+0x288>
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013cf4:	d204      	bcs.n	8013d00 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	6a3a      	ldr	r2, [r7, #32]
 8013cfc:	60da      	str	r2, [r3, #12]
 8013cfe:	e0c9      	b.n	8013e94 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8013d00:	2301      	movs	r3, #1
 8013d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013d06:	e0c5      	b.n	8013e94 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	69db      	ldr	r3, [r3, #28]
 8013d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013d10:	d16d      	bne.n	8013dee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8013d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013d16:	3b01      	subs	r3, #1
 8013d18:	2b07      	cmp	r3, #7
 8013d1a:	d82d      	bhi.n	8013d78 <UART_SetConfig+0x300>
 8013d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8013d24 <UART_SetConfig+0x2ac>)
 8013d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d22:	bf00      	nop
 8013d24:	08013d45 	.word	0x08013d45
 8013d28:	08013d4d 	.word	0x08013d4d
 8013d2c:	08013d79 	.word	0x08013d79
 8013d30:	08013d53 	.word	0x08013d53
 8013d34:	08013d79 	.word	0x08013d79
 8013d38:	08013d79 	.word	0x08013d79
 8013d3c:	08013d79 	.word	0x08013d79
 8013d40:	08013d5b 	.word	0x08013d5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013d44:	f7fc fcea 	bl	801071c <HAL_RCC_GetPCLK2Freq>
 8013d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013d4a:	e01b      	b.n	8013d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013d4c:	4b08      	ldr	r3, [pc, #32]	@ (8013d70 <UART_SetConfig+0x2f8>)
 8013d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013d50:	e018      	b.n	8013d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013d52:	f7fc fc4d 	bl	80105f0 <HAL_RCC_GetSysClockFreq>
 8013d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013d58:	e014      	b.n	8013d84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013d60:	e010      	b.n	8013d84 <UART_SetConfig+0x30c>
 8013d62:	bf00      	nop
 8013d64:	cfff69f3 	.word	0xcfff69f3
 8013d68:	40008000 	.word	0x40008000
 8013d6c:	40013800 	.word	0x40013800
 8013d70:	00f42400 	.word	0x00f42400
 8013d74:	0801a838 	.word	0x0801a838
      default:
        pclk = 0U;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f000 8084 	beq.w	8013e94 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d90:	4a4b      	ldr	r2, [pc, #300]	@ (8013ec0 <UART_SetConfig+0x448>)
 8013d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d96:	461a      	mov	r2, r3
 8013d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d9e:	005a      	lsls	r2, r3, #1
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	085b      	lsrs	r3, r3, #1
 8013da6:	441a      	add	r2, r3
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8013db0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013db2:	6a3b      	ldr	r3, [r7, #32]
 8013db4:	2b0f      	cmp	r3, #15
 8013db6:	d916      	bls.n	8013de6 <UART_SetConfig+0x36e>
 8013db8:	6a3b      	ldr	r3, [r7, #32]
 8013dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013dbe:	d212      	bcs.n	8013de6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013dc0:	6a3b      	ldr	r3, [r7, #32]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	f023 030f 	bic.w	r3, r3, #15
 8013dc8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013dca:	6a3b      	ldr	r3, [r7, #32]
 8013dcc:	085b      	lsrs	r3, r3, #1
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	f003 0307 	and.w	r3, r3, #7
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	8bfb      	ldrh	r3, [r7, #30]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	8bfa      	ldrh	r2, [r7, #30]
 8013de2:	60da      	str	r2, [r3, #12]
 8013de4:	e056      	b.n	8013e94 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013de6:	2301      	movs	r3, #1
 8013de8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013dec:	e052      	b.n	8013e94 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013dee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013df2:	3b01      	subs	r3, #1
 8013df4:	2b07      	cmp	r3, #7
 8013df6:	d822      	bhi.n	8013e3e <UART_SetConfig+0x3c6>
 8013df8:	a201      	add	r2, pc, #4	@ (adr r2, 8013e00 <UART_SetConfig+0x388>)
 8013dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfe:	bf00      	nop
 8013e00:	08013e21 	.word	0x08013e21
 8013e04:	08013e29 	.word	0x08013e29
 8013e08:	08013e3f 	.word	0x08013e3f
 8013e0c:	08013e2f 	.word	0x08013e2f
 8013e10:	08013e3f 	.word	0x08013e3f
 8013e14:	08013e3f 	.word	0x08013e3f
 8013e18:	08013e3f 	.word	0x08013e3f
 8013e1c:	08013e37 	.word	0x08013e37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013e20:	f7fc fc7c 	bl	801071c <HAL_RCC_GetPCLK2Freq>
 8013e24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013e26:	e010      	b.n	8013e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013e28:	4b26      	ldr	r3, [pc, #152]	@ (8013ec4 <UART_SetConfig+0x44c>)
 8013e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013e2c:	e00d      	b.n	8013e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013e2e:	f7fc fbdf 	bl	80105f0 <HAL_RCC_GetSysClockFreq>
 8013e32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013e34:	e009      	b.n	8013e4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013e3c:	e005      	b.n	8013e4a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013e42:	2301      	movs	r3, #1
 8013e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013e48:	bf00      	nop
    }

    if (pclk != 0U)
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d021      	beq.n	8013e94 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e54:	4a1a      	ldr	r2, [pc, #104]	@ (8013ec0 <UART_SetConfig+0x448>)
 8013e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	085b      	lsrs	r3, r3, #1
 8013e68:	441a      	add	r2, r3
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013e74:	6a3b      	ldr	r3, [r7, #32]
 8013e76:	2b0f      	cmp	r3, #15
 8013e78:	d909      	bls.n	8013e8e <UART_SetConfig+0x416>
 8013e7a:	6a3b      	ldr	r3, [r7, #32]
 8013e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e80:	d205      	bcs.n	8013e8e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013e82:	6a3b      	ldr	r3, [r7, #32]
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	60da      	str	r2, [r3, #12]
 8013e8c:	e002      	b.n	8013e94 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013e8e:	2301      	movs	r3, #1
 8013e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	2201      	movs	r2, #1
 8013e98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	2200      	movs	r2, #0
 8013eae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013eb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3730      	adds	r7, #48	@ 0x30
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013ebe:	bf00      	nop
 8013ec0:	0801a838 	.word	0x0801a838
 8013ec4:	00f42400 	.word	0x00f42400

08013ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ed4:	f003 0301 	and.w	r3, r3, #1
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d00a      	beq.n	8013ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	430a      	orrs	r2, r1
 8013ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ef6:	f003 0302 	and.w	r3, r3, #2
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d00a      	beq.n	8013f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	430a      	orrs	r2, r1
 8013f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f18:	f003 0304 	and.w	r3, r3, #4
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d00a      	beq.n	8013f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	430a      	orrs	r2, r1
 8013f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f3a:	f003 0308 	and.w	r3, r3, #8
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d00a      	beq.n	8013f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	430a      	orrs	r2, r1
 8013f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f5c:	f003 0310 	and.w	r3, r3, #16
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00a      	beq.n	8013f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	430a      	orrs	r2, r1
 8013f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f7e:	f003 0320 	and.w	r3, r3, #32
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d00a      	beq.n	8013f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	430a      	orrs	r2, r1
 8013f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d01a      	beq.n	8013fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	430a      	orrs	r2, r1
 8013fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013fc6:	d10a      	bne.n	8013fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	430a      	orrs	r2, r1
 8013fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00a      	beq.n	8014000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	430a      	orrs	r2, r1
 8013ffe:	605a      	str	r2, [r3, #4]
  }
}
 8014000:	bf00      	nop
 8014002:	370c      	adds	r7, #12
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b098      	sub	sp, #96	@ 0x60
 8014010:	af02      	add	r7, sp, #8
 8014012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2200      	movs	r2, #0
 8014018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801401c:	f7fa fb54 	bl	800e6c8 <HAL_GetTick>
 8014020:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f003 0308 	and.w	r3, r3, #8
 801402c:	2b08      	cmp	r3, #8
 801402e:	d12f      	bne.n	8014090 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014038:	2200      	movs	r2, #0
 801403a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 f88e 	bl	8014160 <UART_WaitOnFlagUntilTimeout>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d022      	beq.n	8014090 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014052:	e853 3f00 	ldrex	r3, [r3]
 8014056:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801405a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801405e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	461a      	mov	r2, r3
 8014066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014068:	647b      	str	r3, [r7, #68]	@ 0x44
 801406a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801406c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801406e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014070:	e841 2300 	strex	r3, r2, [r1]
 8014074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1e6      	bne.n	801404a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2220      	movs	r2, #32
 8014080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2200      	movs	r2, #0
 8014088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801408c:	2303      	movs	r3, #3
 801408e:	e063      	b.n	8014158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f003 0304 	and.w	r3, r3, #4
 801409a:	2b04      	cmp	r3, #4
 801409c:	d149      	bne.n	8014132 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801409e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140a6:	2200      	movs	r2, #0
 80140a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 f857 	bl	8014160 <UART_WaitOnFlagUntilTimeout>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d03c      	beq.n	8014132 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c0:	e853 3f00 	ldrex	r3, [r3]
 80140c4:	623b      	str	r3, [r7, #32]
   return(result);
 80140c6:	6a3b      	ldr	r3, [r7, #32]
 80140c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80140cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	461a      	mov	r2, r3
 80140d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80140d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80140dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140de:	e841 2300 	strex	r3, r2, [r1]
 80140e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80140e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1e6      	bne.n	80140b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	3308      	adds	r3, #8
 80140f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	e853 3f00 	ldrex	r3, [r3]
 80140f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	f023 0301 	bic.w	r3, r3, #1
 8014100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	3308      	adds	r3, #8
 8014108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801410a:	61fa      	str	r2, [r7, #28]
 801410c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801410e:	69b9      	ldr	r1, [r7, #24]
 8014110:	69fa      	ldr	r2, [r7, #28]
 8014112:	e841 2300 	strex	r3, r2, [r1]
 8014116:	617b      	str	r3, [r7, #20]
   return(result);
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d1e5      	bne.n	80140ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2220      	movs	r2, #32
 8014122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2200      	movs	r2, #0
 801412a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801412e:	2303      	movs	r3, #3
 8014130:	e012      	b.n	8014158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2220      	movs	r2, #32
 8014136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2220      	movs	r2, #32
 801413e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2200      	movs	r2, #0
 8014152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014156:	2300      	movs	r3, #0
}
 8014158:	4618      	mov	r0, r3
 801415a:	3758      	adds	r7, #88	@ 0x58
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}

08014160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	4613      	mov	r3, r2
 801416e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014170:	e049      	b.n	8014206 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014178:	d045      	beq.n	8014206 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801417a:	f7fa faa5 	bl	800e6c8 <HAL_GetTick>
 801417e:	4602      	mov	r2, r0
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	69ba      	ldr	r2, [r7, #24]
 8014186:	429a      	cmp	r2, r3
 8014188:	d302      	bcc.n	8014190 <UART_WaitOnFlagUntilTimeout+0x30>
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d101      	bne.n	8014194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014190:	2303      	movs	r3, #3
 8014192:	e048      	b.n	8014226 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f003 0304 	and.w	r3, r3, #4
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d031      	beq.n	8014206 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	69db      	ldr	r3, [r3, #28]
 80141a8:	f003 0308 	and.w	r3, r3, #8
 80141ac:	2b08      	cmp	r3, #8
 80141ae:	d110      	bne.n	80141d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2208      	movs	r2, #8
 80141b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f000 f838 	bl	801422e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2208      	movs	r2, #8
 80141c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	2200      	movs	r2, #0
 80141ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80141ce:	2301      	movs	r3, #1
 80141d0:	e029      	b.n	8014226 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	69db      	ldr	r3, [r3, #28]
 80141d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80141dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80141e0:	d111      	bne.n	8014206 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80141ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f000 f81e 	bl	801422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2220      	movs	r2, #32
 80141f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	2200      	movs	r2, #0
 80141fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014202:	2303      	movs	r3, #3
 8014204:	e00f      	b.n	8014226 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	69da      	ldr	r2, [r3, #28]
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	4013      	ands	r3, r2
 8014210:	68ba      	ldr	r2, [r7, #8]
 8014212:	429a      	cmp	r2, r3
 8014214:	bf0c      	ite	eq
 8014216:	2301      	moveq	r3, #1
 8014218:	2300      	movne	r3, #0
 801421a:	b2db      	uxtb	r3, r3
 801421c:	461a      	mov	r2, r3
 801421e:	79fb      	ldrb	r3, [r7, #7]
 8014220:	429a      	cmp	r2, r3
 8014222:	d0a6      	beq.n	8014172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014224:	2300      	movs	r3, #0
}
 8014226:	4618      	mov	r0, r3
 8014228:	3710      	adds	r7, #16
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801422e:	b480      	push	{r7}
 8014230:	b095      	sub	sp, #84	@ 0x54
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801423e:	e853 3f00 	ldrex	r3, [r3]
 8014242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	461a      	mov	r2, r3
 8014252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014254:	643b      	str	r3, [r7, #64]	@ 0x40
 8014256:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014258:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801425a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801425c:	e841 2300 	strex	r3, r2, [r1]
 8014260:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1e6      	bne.n	8014236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	3308      	adds	r3, #8
 801426e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014270:	6a3b      	ldr	r3, [r7, #32]
 8014272:	e853 3f00 	ldrex	r3, [r3]
 8014276:	61fb      	str	r3, [r7, #28]
   return(result);
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801427e:	f023 0301 	bic.w	r3, r3, #1
 8014282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	3308      	adds	r3, #8
 801428a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801428c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801428e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014294:	e841 2300 	strex	r3, r2, [r1]
 8014298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801429c:	2b00      	cmp	r3, #0
 801429e:	d1e3      	bne.n	8014268 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d118      	bne.n	80142da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	e853 3f00 	ldrex	r3, [r3]
 80142b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	f023 0310 	bic.w	r3, r3, #16
 80142bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	461a      	mov	r2, r3
 80142c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142c6:	61bb      	str	r3, [r7, #24]
 80142c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ca:	6979      	ldr	r1, [r7, #20]
 80142cc:	69ba      	ldr	r2, [r7, #24]
 80142ce:	e841 2300 	strex	r3, r2, [r1]
 80142d2:	613b      	str	r3, [r7, #16]
   return(result);
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d1e6      	bne.n	80142a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2220      	movs	r2, #32
 80142de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2200      	movs	r2, #0
 80142e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2200      	movs	r2, #0
 80142ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80142ee:	bf00      	nop
 80142f0:	3754      	adds	r7, #84	@ 0x54
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr

080142fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b084      	sub	sp, #16
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	2200      	movs	r2, #0
 801430c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2200      	movs	r2, #0
 8014314:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f7ff fb97 	bl	8013a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801431e:	bf00      	nop
 8014320:	3710      	adds	r7, #16
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014326:	b580      	push	{r7, lr}
 8014328:	b088      	sub	sp, #32
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	e853 3f00 	ldrex	r3, [r3]
 801433a:	60bb      	str	r3, [r7, #8]
   return(result);
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014342:	61fb      	str	r3, [r7, #28]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	461a      	mov	r2, r3
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	61bb      	str	r3, [r7, #24]
 801434e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014350:	6979      	ldr	r1, [r7, #20]
 8014352:	69ba      	ldr	r2, [r7, #24]
 8014354:	e841 2300 	strex	r3, r2, [r1]
 8014358:	613b      	str	r3, [r7, #16]
   return(result);
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d1e6      	bne.n	801432e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2220      	movs	r2, #32
 8014364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f7ff fb62 	bl	8013a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014374:	bf00      	nop
 8014376:	3720      	adds	r7, #32
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014384:	bf00      	nop
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014398:	bf00      	nop
 801439a:	370c      	adds	r7, #12
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80143ac:	bf00      	nop
 80143ae:	370c      	adds	r7, #12
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr

080143b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b085      	sub	sp, #20
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d101      	bne.n	80143ce <HAL_UARTEx_DisableFifoMode+0x16>
 80143ca:	2302      	movs	r3, #2
 80143cc:	e027      	b.n	801441e <HAL_UARTEx_DisableFifoMode+0x66>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2201      	movs	r2, #1
 80143d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2224      	movs	r2, #36	@ 0x24
 80143da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	f022 0201 	bic.w	r2, r2, #1
 80143f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80143fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2200      	movs	r2, #0
 8014402:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68fa      	ldr	r2, [r7, #12]
 801440a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2220      	movs	r2, #32
 8014410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2200      	movs	r2, #0
 8014418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801441c:	2300      	movs	r3, #0
}
 801441e:	4618      	mov	r0, r3
 8014420:	3714      	adds	r7, #20
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr

0801442a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b084      	sub	sp, #16
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
 8014432:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801443a:	2b01      	cmp	r3, #1
 801443c:	d101      	bne.n	8014442 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801443e:	2302      	movs	r3, #2
 8014440:	e02d      	b.n	801449e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2201      	movs	r2, #1
 8014446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2224      	movs	r2, #36	@ 0x24
 801444e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f022 0201 	bic.w	r2, r2, #1
 8014468:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	683a      	ldr	r2, [r7, #0]
 801447a:	430a      	orrs	r2, r1
 801447c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 f850 	bl	8014524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	68fa      	ldr	r2, [r7, #12]
 801448a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2220      	movs	r2, #32
 8014490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2200      	movs	r2, #0
 8014498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801449c:	2300      	movs	r3, #0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b084      	sub	sp, #16
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
 80144ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d101      	bne.n	80144be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80144ba:	2302      	movs	r3, #2
 80144bc:	e02d      	b.n	801451a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2201      	movs	r2, #1
 80144c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2224      	movs	r2, #36	@ 0x24
 80144ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f022 0201 	bic.w	r2, r2, #1
 80144e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	689b      	ldr	r3, [r3, #8]
 80144ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	683a      	ldr	r2, [r7, #0]
 80144f6:	430a      	orrs	r2, r1
 80144f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 f812 	bl	8014524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	68fa      	ldr	r2, [r7, #12]
 8014506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2220      	movs	r2, #32
 801450c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2200      	movs	r2, #0
 8014514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	3710      	adds	r7, #16
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
	...

08014524 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014530:	2b00      	cmp	r3, #0
 8014532:	d108      	bne.n	8014546 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2201      	movs	r2, #1
 8014538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2201      	movs	r2, #1
 8014540:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014544:	e031      	b.n	80145aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014546:	2308      	movs	r3, #8
 8014548:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801454a:	2308      	movs	r3, #8
 801454c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	0e5b      	lsrs	r3, r3, #25
 8014556:	b2db      	uxtb	r3, r3
 8014558:	f003 0307 	and.w	r3, r3, #7
 801455c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	689b      	ldr	r3, [r3, #8]
 8014564:	0f5b      	lsrs	r3, r3, #29
 8014566:	b2db      	uxtb	r3, r3
 8014568:	f003 0307 	and.w	r3, r3, #7
 801456c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801456e:	7bbb      	ldrb	r3, [r7, #14]
 8014570:	7b3a      	ldrb	r2, [r7, #12]
 8014572:	4911      	ldr	r1, [pc, #68]	@ (80145b8 <UARTEx_SetNbDataToProcess+0x94>)
 8014574:	5c8a      	ldrb	r2, [r1, r2]
 8014576:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801457a:	7b3a      	ldrb	r2, [r7, #12]
 801457c:	490f      	ldr	r1, [pc, #60]	@ (80145bc <UARTEx_SetNbDataToProcess+0x98>)
 801457e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014580:	fb93 f3f2 	sdiv	r3, r3, r2
 8014584:	b29a      	uxth	r2, r3
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801458c:	7bfb      	ldrb	r3, [r7, #15]
 801458e:	7b7a      	ldrb	r2, [r7, #13]
 8014590:	4909      	ldr	r1, [pc, #36]	@ (80145b8 <UARTEx_SetNbDataToProcess+0x94>)
 8014592:	5c8a      	ldrb	r2, [r1, r2]
 8014594:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014598:	7b7a      	ldrb	r2, [r7, #13]
 801459a:	4908      	ldr	r1, [pc, #32]	@ (80145bc <UARTEx_SetNbDataToProcess+0x98>)
 801459c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801459e:	fb93 f3f2 	sdiv	r3, r3, r2
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80145aa:	bf00      	nop
 80145ac:	3714      	adds	r7, #20
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr
 80145b6:	bf00      	nop
 80145b8:	0801a850 	.word	0x0801a850
 80145bc:	0801a858 	.word	0x0801a858

080145c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80145c8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80145cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80145d4:	b29a      	uxth	r2, r3
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	b29b      	uxth	r3, r3
 80145da:	43db      	mvns	r3, r3
 80145dc:	b29b      	uxth	r3, r3
 80145de:	4013      	ands	r3, r2
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3714      	adds	r7, #20
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr

080145f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80145f6:	b084      	sub	sp, #16
 80145f8:	b480      	push	{r7}
 80145fa:	b083      	sub	sp, #12
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	f107 0014 	add.w	r0, r7, #20
 8014604:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2201      	movs	r2, #1
 801460c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8014628:	2300      	movs	r3, #0
}
 801462a:	4618      	mov	r0, r3
 801462c:	370c      	adds	r7, #12
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	b004      	add	sp, #16
 8014636:	4770      	bx	lr

08014638 <rand>:
 8014638:	4b16      	ldr	r3, [pc, #88]	@ (8014694 <rand+0x5c>)
 801463a:	b510      	push	{r4, lr}
 801463c:	681c      	ldr	r4, [r3, #0]
 801463e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014640:	b9b3      	cbnz	r3, 8014670 <rand+0x38>
 8014642:	2018      	movs	r0, #24
 8014644:	f002 fbde 	bl	8016e04 <malloc>
 8014648:	4602      	mov	r2, r0
 801464a:	6320      	str	r0, [r4, #48]	@ 0x30
 801464c:	b920      	cbnz	r0, 8014658 <rand+0x20>
 801464e:	4b12      	ldr	r3, [pc, #72]	@ (8014698 <rand+0x60>)
 8014650:	4812      	ldr	r0, [pc, #72]	@ (801469c <rand+0x64>)
 8014652:	2152      	movs	r1, #82	@ 0x52
 8014654:	f001 fcc8 	bl	8015fe8 <__assert_func>
 8014658:	4911      	ldr	r1, [pc, #68]	@ (80146a0 <rand+0x68>)
 801465a:	4b12      	ldr	r3, [pc, #72]	@ (80146a4 <rand+0x6c>)
 801465c:	e9c0 1300 	strd	r1, r3, [r0]
 8014660:	4b11      	ldr	r3, [pc, #68]	@ (80146a8 <rand+0x70>)
 8014662:	6083      	str	r3, [r0, #8]
 8014664:	230b      	movs	r3, #11
 8014666:	8183      	strh	r3, [r0, #12]
 8014668:	2100      	movs	r1, #0
 801466a:	2001      	movs	r0, #1
 801466c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014670:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014672:	480e      	ldr	r0, [pc, #56]	@ (80146ac <rand+0x74>)
 8014674:	690b      	ldr	r3, [r1, #16]
 8014676:	694c      	ldr	r4, [r1, #20]
 8014678:	4a0d      	ldr	r2, [pc, #52]	@ (80146b0 <rand+0x78>)
 801467a:	4358      	muls	r0, r3
 801467c:	fb02 0004 	mla	r0, r2, r4, r0
 8014680:	fba3 3202 	umull	r3, r2, r3, r2
 8014684:	3301      	adds	r3, #1
 8014686:	eb40 0002 	adc.w	r0, r0, r2
 801468a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801468e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014692:	bd10      	pop	{r4, pc}
 8014694:	20000038 	.word	0x20000038
 8014698:	0801a860 	.word	0x0801a860
 801469c:	0801a877 	.word	0x0801a877
 80146a0:	abcd330e 	.word	0xabcd330e
 80146a4:	e66d1234 	.word	0xe66d1234
 80146a8:	0005deec 	.word	0x0005deec
 80146ac:	5851f42d 	.word	0x5851f42d
 80146b0:	4c957f2d 	.word	0x4c957f2d

080146b4 <__cvt>:
 80146b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146b8:	ec57 6b10 	vmov	r6, r7, d0
 80146bc:	2f00      	cmp	r7, #0
 80146be:	460c      	mov	r4, r1
 80146c0:	4619      	mov	r1, r3
 80146c2:	463b      	mov	r3, r7
 80146c4:	bfbb      	ittet	lt
 80146c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80146ca:	461f      	movlt	r7, r3
 80146cc:	2300      	movge	r3, #0
 80146ce:	232d      	movlt	r3, #45	@ 0x2d
 80146d0:	700b      	strb	r3, [r1, #0]
 80146d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80146d8:	4691      	mov	r9, r2
 80146da:	f023 0820 	bic.w	r8, r3, #32
 80146de:	bfbc      	itt	lt
 80146e0:	4632      	movlt	r2, r6
 80146e2:	4616      	movlt	r6, r2
 80146e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80146e8:	d005      	beq.n	80146f6 <__cvt+0x42>
 80146ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80146ee:	d100      	bne.n	80146f2 <__cvt+0x3e>
 80146f0:	3401      	adds	r4, #1
 80146f2:	2102      	movs	r1, #2
 80146f4:	e000      	b.n	80146f8 <__cvt+0x44>
 80146f6:	2103      	movs	r1, #3
 80146f8:	ab03      	add	r3, sp, #12
 80146fa:	9301      	str	r3, [sp, #4]
 80146fc:	ab02      	add	r3, sp, #8
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	ec47 6b10 	vmov	d0, r6, r7
 8014704:	4653      	mov	r3, sl
 8014706:	4622      	mov	r2, r4
 8014708:	f001 fd1e 	bl	8016148 <_dtoa_r>
 801470c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014710:	4605      	mov	r5, r0
 8014712:	d119      	bne.n	8014748 <__cvt+0x94>
 8014714:	f019 0f01 	tst.w	r9, #1
 8014718:	d00e      	beq.n	8014738 <__cvt+0x84>
 801471a:	eb00 0904 	add.w	r9, r0, r4
 801471e:	2200      	movs	r2, #0
 8014720:	2300      	movs	r3, #0
 8014722:	4630      	mov	r0, r6
 8014724:	4639      	mov	r1, r7
 8014726:	f7ec f9b7 	bl	8000a98 <__aeabi_dcmpeq>
 801472a:	b108      	cbz	r0, 8014730 <__cvt+0x7c>
 801472c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014730:	2230      	movs	r2, #48	@ 0x30
 8014732:	9b03      	ldr	r3, [sp, #12]
 8014734:	454b      	cmp	r3, r9
 8014736:	d31e      	bcc.n	8014776 <__cvt+0xc2>
 8014738:	9b03      	ldr	r3, [sp, #12]
 801473a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801473c:	1b5b      	subs	r3, r3, r5
 801473e:	4628      	mov	r0, r5
 8014740:	6013      	str	r3, [r2, #0]
 8014742:	b004      	add	sp, #16
 8014744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801474c:	eb00 0904 	add.w	r9, r0, r4
 8014750:	d1e5      	bne.n	801471e <__cvt+0x6a>
 8014752:	7803      	ldrb	r3, [r0, #0]
 8014754:	2b30      	cmp	r3, #48	@ 0x30
 8014756:	d10a      	bne.n	801476e <__cvt+0xba>
 8014758:	2200      	movs	r2, #0
 801475a:	2300      	movs	r3, #0
 801475c:	4630      	mov	r0, r6
 801475e:	4639      	mov	r1, r7
 8014760:	f7ec f99a 	bl	8000a98 <__aeabi_dcmpeq>
 8014764:	b918      	cbnz	r0, 801476e <__cvt+0xba>
 8014766:	f1c4 0401 	rsb	r4, r4, #1
 801476a:	f8ca 4000 	str.w	r4, [sl]
 801476e:	f8da 3000 	ldr.w	r3, [sl]
 8014772:	4499      	add	r9, r3
 8014774:	e7d3      	b.n	801471e <__cvt+0x6a>
 8014776:	1c59      	adds	r1, r3, #1
 8014778:	9103      	str	r1, [sp, #12]
 801477a:	701a      	strb	r2, [r3, #0]
 801477c:	e7d9      	b.n	8014732 <__cvt+0x7e>

0801477e <__exponent>:
 801477e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014780:	2900      	cmp	r1, #0
 8014782:	bfba      	itte	lt
 8014784:	4249      	neglt	r1, r1
 8014786:	232d      	movlt	r3, #45	@ 0x2d
 8014788:	232b      	movge	r3, #43	@ 0x2b
 801478a:	2909      	cmp	r1, #9
 801478c:	7002      	strb	r2, [r0, #0]
 801478e:	7043      	strb	r3, [r0, #1]
 8014790:	dd29      	ble.n	80147e6 <__exponent+0x68>
 8014792:	f10d 0307 	add.w	r3, sp, #7
 8014796:	461d      	mov	r5, r3
 8014798:	270a      	movs	r7, #10
 801479a:	461a      	mov	r2, r3
 801479c:	fbb1 f6f7 	udiv	r6, r1, r7
 80147a0:	fb07 1416 	mls	r4, r7, r6, r1
 80147a4:	3430      	adds	r4, #48	@ 0x30
 80147a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80147aa:	460c      	mov	r4, r1
 80147ac:	2c63      	cmp	r4, #99	@ 0x63
 80147ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80147b2:	4631      	mov	r1, r6
 80147b4:	dcf1      	bgt.n	801479a <__exponent+0x1c>
 80147b6:	3130      	adds	r1, #48	@ 0x30
 80147b8:	1e94      	subs	r4, r2, #2
 80147ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80147be:	1c41      	adds	r1, r0, #1
 80147c0:	4623      	mov	r3, r4
 80147c2:	42ab      	cmp	r3, r5
 80147c4:	d30a      	bcc.n	80147dc <__exponent+0x5e>
 80147c6:	f10d 0309 	add.w	r3, sp, #9
 80147ca:	1a9b      	subs	r3, r3, r2
 80147cc:	42ac      	cmp	r4, r5
 80147ce:	bf88      	it	hi
 80147d0:	2300      	movhi	r3, #0
 80147d2:	3302      	adds	r3, #2
 80147d4:	4403      	add	r3, r0
 80147d6:	1a18      	subs	r0, r3, r0
 80147d8:	b003      	add	sp, #12
 80147da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80147e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80147e4:	e7ed      	b.n	80147c2 <__exponent+0x44>
 80147e6:	2330      	movs	r3, #48	@ 0x30
 80147e8:	3130      	adds	r1, #48	@ 0x30
 80147ea:	7083      	strb	r3, [r0, #2]
 80147ec:	70c1      	strb	r1, [r0, #3]
 80147ee:	1d03      	adds	r3, r0, #4
 80147f0:	e7f1      	b.n	80147d6 <__exponent+0x58>
	...

080147f4 <_printf_float>:
 80147f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f8:	b08d      	sub	sp, #52	@ 0x34
 80147fa:	460c      	mov	r4, r1
 80147fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014800:	4616      	mov	r6, r2
 8014802:	461f      	mov	r7, r3
 8014804:	4605      	mov	r5, r0
 8014806:	f001 fb5f 	bl	8015ec8 <_localeconv_r>
 801480a:	6803      	ldr	r3, [r0, #0]
 801480c:	9304      	str	r3, [sp, #16]
 801480e:	4618      	mov	r0, r3
 8014810:	f7eb fd16 	bl	8000240 <strlen>
 8014814:	2300      	movs	r3, #0
 8014816:	930a      	str	r3, [sp, #40]	@ 0x28
 8014818:	f8d8 3000 	ldr.w	r3, [r8]
 801481c:	9005      	str	r0, [sp, #20]
 801481e:	3307      	adds	r3, #7
 8014820:	f023 0307 	bic.w	r3, r3, #7
 8014824:	f103 0208 	add.w	r2, r3, #8
 8014828:	f894 a018 	ldrb.w	sl, [r4, #24]
 801482c:	f8d4 b000 	ldr.w	fp, [r4]
 8014830:	f8c8 2000 	str.w	r2, [r8]
 8014834:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014838:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801483c:	9307      	str	r3, [sp, #28]
 801483e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014842:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801484a:	4b9c      	ldr	r3, [pc, #624]	@ (8014abc <_printf_float+0x2c8>)
 801484c:	f04f 32ff 	mov.w	r2, #4294967295
 8014850:	f7ec f954 	bl	8000afc <__aeabi_dcmpun>
 8014854:	bb70      	cbnz	r0, 80148b4 <_printf_float+0xc0>
 8014856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801485a:	4b98      	ldr	r3, [pc, #608]	@ (8014abc <_printf_float+0x2c8>)
 801485c:	f04f 32ff 	mov.w	r2, #4294967295
 8014860:	f7ec f92e 	bl	8000ac0 <__aeabi_dcmple>
 8014864:	bb30      	cbnz	r0, 80148b4 <_printf_float+0xc0>
 8014866:	2200      	movs	r2, #0
 8014868:	2300      	movs	r3, #0
 801486a:	4640      	mov	r0, r8
 801486c:	4649      	mov	r1, r9
 801486e:	f7ec f91d 	bl	8000aac <__aeabi_dcmplt>
 8014872:	b110      	cbz	r0, 801487a <_printf_float+0x86>
 8014874:	232d      	movs	r3, #45	@ 0x2d
 8014876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801487a:	4a91      	ldr	r2, [pc, #580]	@ (8014ac0 <_printf_float+0x2cc>)
 801487c:	4b91      	ldr	r3, [pc, #580]	@ (8014ac4 <_printf_float+0x2d0>)
 801487e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014882:	bf8c      	ite	hi
 8014884:	4690      	movhi	r8, r2
 8014886:	4698      	movls	r8, r3
 8014888:	2303      	movs	r3, #3
 801488a:	6123      	str	r3, [r4, #16]
 801488c:	f02b 0304 	bic.w	r3, fp, #4
 8014890:	6023      	str	r3, [r4, #0]
 8014892:	f04f 0900 	mov.w	r9, #0
 8014896:	9700      	str	r7, [sp, #0]
 8014898:	4633      	mov	r3, r6
 801489a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801489c:	4621      	mov	r1, r4
 801489e:	4628      	mov	r0, r5
 80148a0:	f000 f9d2 	bl	8014c48 <_printf_common>
 80148a4:	3001      	adds	r0, #1
 80148a6:	f040 808d 	bne.w	80149c4 <_printf_float+0x1d0>
 80148aa:	f04f 30ff 	mov.w	r0, #4294967295
 80148ae:	b00d      	add	sp, #52	@ 0x34
 80148b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b4:	4642      	mov	r2, r8
 80148b6:	464b      	mov	r3, r9
 80148b8:	4640      	mov	r0, r8
 80148ba:	4649      	mov	r1, r9
 80148bc:	f7ec f91e 	bl	8000afc <__aeabi_dcmpun>
 80148c0:	b140      	cbz	r0, 80148d4 <_printf_float+0xe0>
 80148c2:	464b      	mov	r3, r9
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	bfbc      	itt	lt
 80148c8:	232d      	movlt	r3, #45	@ 0x2d
 80148ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80148ce:	4a7e      	ldr	r2, [pc, #504]	@ (8014ac8 <_printf_float+0x2d4>)
 80148d0:	4b7e      	ldr	r3, [pc, #504]	@ (8014acc <_printf_float+0x2d8>)
 80148d2:	e7d4      	b.n	801487e <_printf_float+0x8a>
 80148d4:	6863      	ldr	r3, [r4, #4]
 80148d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80148da:	9206      	str	r2, [sp, #24]
 80148dc:	1c5a      	adds	r2, r3, #1
 80148de:	d13b      	bne.n	8014958 <_printf_float+0x164>
 80148e0:	2306      	movs	r3, #6
 80148e2:	6063      	str	r3, [r4, #4]
 80148e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80148e8:	2300      	movs	r3, #0
 80148ea:	6022      	str	r2, [r4, #0]
 80148ec:	9303      	str	r3, [sp, #12]
 80148ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80148f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80148f4:	ab09      	add	r3, sp, #36	@ 0x24
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	6861      	ldr	r1, [r4, #4]
 80148fa:	ec49 8b10 	vmov	d0, r8, r9
 80148fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014902:	4628      	mov	r0, r5
 8014904:	f7ff fed6 	bl	80146b4 <__cvt>
 8014908:	9b06      	ldr	r3, [sp, #24]
 801490a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801490c:	2b47      	cmp	r3, #71	@ 0x47
 801490e:	4680      	mov	r8, r0
 8014910:	d129      	bne.n	8014966 <_printf_float+0x172>
 8014912:	1cc8      	adds	r0, r1, #3
 8014914:	db02      	blt.n	801491c <_printf_float+0x128>
 8014916:	6863      	ldr	r3, [r4, #4]
 8014918:	4299      	cmp	r1, r3
 801491a:	dd41      	ble.n	80149a0 <_printf_float+0x1ac>
 801491c:	f1aa 0a02 	sub.w	sl, sl, #2
 8014920:	fa5f fa8a 	uxtb.w	sl, sl
 8014924:	3901      	subs	r1, #1
 8014926:	4652      	mov	r2, sl
 8014928:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801492c:	9109      	str	r1, [sp, #36]	@ 0x24
 801492e:	f7ff ff26 	bl	801477e <__exponent>
 8014932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014934:	1813      	adds	r3, r2, r0
 8014936:	2a01      	cmp	r2, #1
 8014938:	4681      	mov	r9, r0
 801493a:	6123      	str	r3, [r4, #16]
 801493c:	dc02      	bgt.n	8014944 <_printf_float+0x150>
 801493e:	6822      	ldr	r2, [r4, #0]
 8014940:	07d2      	lsls	r2, r2, #31
 8014942:	d501      	bpl.n	8014948 <_printf_float+0x154>
 8014944:	3301      	adds	r3, #1
 8014946:	6123      	str	r3, [r4, #16]
 8014948:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801494c:	2b00      	cmp	r3, #0
 801494e:	d0a2      	beq.n	8014896 <_printf_float+0xa2>
 8014950:	232d      	movs	r3, #45	@ 0x2d
 8014952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014956:	e79e      	b.n	8014896 <_printf_float+0xa2>
 8014958:	9a06      	ldr	r2, [sp, #24]
 801495a:	2a47      	cmp	r2, #71	@ 0x47
 801495c:	d1c2      	bne.n	80148e4 <_printf_float+0xf0>
 801495e:	2b00      	cmp	r3, #0
 8014960:	d1c0      	bne.n	80148e4 <_printf_float+0xf0>
 8014962:	2301      	movs	r3, #1
 8014964:	e7bd      	b.n	80148e2 <_printf_float+0xee>
 8014966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801496a:	d9db      	bls.n	8014924 <_printf_float+0x130>
 801496c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014970:	d118      	bne.n	80149a4 <_printf_float+0x1b0>
 8014972:	2900      	cmp	r1, #0
 8014974:	6863      	ldr	r3, [r4, #4]
 8014976:	dd0b      	ble.n	8014990 <_printf_float+0x19c>
 8014978:	6121      	str	r1, [r4, #16]
 801497a:	b913      	cbnz	r3, 8014982 <_printf_float+0x18e>
 801497c:	6822      	ldr	r2, [r4, #0]
 801497e:	07d0      	lsls	r0, r2, #31
 8014980:	d502      	bpl.n	8014988 <_printf_float+0x194>
 8014982:	3301      	adds	r3, #1
 8014984:	440b      	add	r3, r1
 8014986:	6123      	str	r3, [r4, #16]
 8014988:	65a1      	str	r1, [r4, #88]	@ 0x58
 801498a:	f04f 0900 	mov.w	r9, #0
 801498e:	e7db      	b.n	8014948 <_printf_float+0x154>
 8014990:	b913      	cbnz	r3, 8014998 <_printf_float+0x1a4>
 8014992:	6822      	ldr	r2, [r4, #0]
 8014994:	07d2      	lsls	r2, r2, #31
 8014996:	d501      	bpl.n	801499c <_printf_float+0x1a8>
 8014998:	3302      	adds	r3, #2
 801499a:	e7f4      	b.n	8014986 <_printf_float+0x192>
 801499c:	2301      	movs	r3, #1
 801499e:	e7f2      	b.n	8014986 <_printf_float+0x192>
 80149a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80149a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149a6:	4299      	cmp	r1, r3
 80149a8:	db05      	blt.n	80149b6 <_printf_float+0x1c2>
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	6121      	str	r1, [r4, #16]
 80149ae:	07d8      	lsls	r0, r3, #31
 80149b0:	d5ea      	bpl.n	8014988 <_printf_float+0x194>
 80149b2:	1c4b      	adds	r3, r1, #1
 80149b4:	e7e7      	b.n	8014986 <_printf_float+0x192>
 80149b6:	2900      	cmp	r1, #0
 80149b8:	bfd4      	ite	le
 80149ba:	f1c1 0202 	rsble	r2, r1, #2
 80149be:	2201      	movgt	r2, #1
 80149c0:	4413      	add	r3, r2
 80149c2:	e7e0      	b.n	8014986 <_printf_float+0x192>
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	055a      	lsls	r2, r3, #21
 80149c8:	d407      	bmi.n	80149da <_printf_float+0x1e6>
 80149ca:	6923      	ldr	r3, [r4, #16]
 80149cc:	4642      	mov	r2, r8
 80149ce:	4631      	mov	r1, r6
 80149d0:	4628      	mov	r0, r5
 80149d2:	47b8      	blx	r7
 80149d4:	3001      	adds	r0, #1
 80149d6:	d12b      	bne.n	8014a30 <_printf_float+0x23c>
 80149d8:	e767      	b.n	80148aa <_printf_float+0xb6>
 80149da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80149de:	f240 80dd 	bls.w	8014b9c <_printf_float+0x3a8>
 80149e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80149e6:	2200      	movs	r2, #0
 80149e8:	2300      	movs	r3, #0
 80149ea:	f7ec f855 	bl	8000a98 <__aeabi_dcmpeq>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d033      	beq.n	8014a5a <_printf_float+0x266>
 80149f2:	4a37      	ldr	r2, [pc, #220]	@ (8014ad0 <_printf_float+0x2dc>)
 80149f4:	2301      	movs	r3, #1
 80149f6:	4631      	mov	r1, r6
 80149f8:	4628      	mov	r0, r5
 80149fa:	47b8      	blx	r7
 80149fc:	3001      	adds	r0, #1
 80149fe:	f43f af54 	beq.w	80148aa <_printf_float+0xb6>
 8014a02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014a06:	4543      	cmp	r3, r8
 8014a08:	db02      	blt.n	8014a10 <_printf_float+0x21c>
 8014a0a:	6823      	ldr	r3, [r4, #0]
 8014a0c:	07d8      	lsls	r0, r3, #31
 8014a0e:	d50f      	bpl.n	8014a30 <_printf_float+0x23c>
 8014a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a14:	4631      	mov	r1, r6
 8014a16:	4628      	mov	r0, r5
 8014a18:	47b8      	blx	r7
 8014a1a:	3001      	adds	r0, #1
 8014a1c:	f43f af45 	beq.w	80148aa <_printf_float+0xb6>
 8014a20:	f04f 0900 	mov.w	r9, #0
 8014a24:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a28:	f104 0a1a 	add.w	sl, r4, #26
 8014a2c:	45c8      	cmp	r8, r9
 8014a2e:	dc09      	bgt.n	8014a44 <_printf_float+0x250>
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	079b      	lsls	r3, r3, #30
 8014a34:	f100 8103 	bmi.w	8014c3e <_printf_float+0x44a>
 8014a38:	68e0      	ldr	r0, [r4, #12]
 8014a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a3c:	4298      	cmp	r0, r3
 8014a3e:	bfb8      	it	lt
 8014a40:	4618      	movlt	r0, r3
 8014a42:	e734      	b.n	80148ae <_printf_float+0xba>
 8014a44:	2301      	movs	r3, #1
 8014a46:	4652      	mov	r2, sl
 8014a48:	4631      	mov	r1, r6
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	47b8      	blx	r7
 8014a4e:	3001      	adds	r0, #1
 8014a50:	f43f af2b 	beq.w	80148aa <_printf_float+0xb6>
 8014a54:	f109 0901 	add.w	r9, r9, #1
 8014a58:	e7e8      	b.n	8014a2c <_printf_float+0x238>
 8014a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	dc39      	bgt.n	8014ad4 <_printf_float+0x2e0>
 8014a60:	4a1b      	ldr	r2, [pc, #108]	@ (8014ad0 <_printf_float+0x2dc>)
 8014a62:	2301      	movs	r3, #1
 8014a64:	4631      	mov	r1, r6
 8014a66:	4628      	mov	r0, r5
 8014a68:	47b8      	blx	r7
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	f43f af1d 	beq.w	80148aa <_printf_float+0xb6>
 8014a70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014a74:	ea59 0303 	orrs.w	r3, r9, r3
 8014a78:	d102      	bne.n	8014a80 <_printf_float+0x28c>
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	07d9      	lsls	r1, r3, #31
 8014a7e:	d5d7      	bpl.n	8014a30 <_printf_float+0x23c>
 8014a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a84:	4631      	mov	r1, r6
 8014a86:	4628      	mov	r0, r5
 8014a88:	47b8      	blx	r7
 8014a8a:	3001      	adds	r0, #1
 8014a8c:	f43f af0d 	beq.w	80148aa <_printf_float+0xb6>
 8014a90:	f04f 0a00 	mov.w	sl, #0
 8014a94:	f104 0b1a 	add.w	fp, r4, #26
 8014a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a9a:	425b      	negs	r3, r3
 8014a9c:	4553      	cmp	r3, sl
 8014a9e:	dc01      	bgt.n	8014aa4 <_printf_float+0x2b0>
 8014aa0:	464b      	mov	r3, r9
 8014aa2:	e793      	b.n	80149cc <_printf_float+0x1d8>
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	465a      	mov	r2, fp
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	4628      	mov	r0, r5
 8014aac:	47b8      	blx	r7
 8014aae:	3001      	adds	r0, #1
 8014ab0:	f43f aefb 	beq.w	80148aa <_printf_float+0xb6>
 8014ab4:	f10a 0a01 	add.w	sl, sl, #1
 8014ab8:	e7ee      	b.n	8014a98 <_printf_float+0x2a4>
 8014aba:	bf00      	nop
 8014abc:	7fefffff 	.word	0x7fefffff
 8014ac0:	0801a8d3 	.word	0x0801a8d3
 8014ac4:	0801a8cf 	.word	0x0801a8cf
 8014ac8:	0801a8db 	.word	0x0801a8db
 8014acc:	0801a8d7 	.word	0x0801a8d7
 8014ad0:	0801aae4 	.word	0x0801aae4
 8014ad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014ad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014ada:	4553      	cmp	r3, sl
 8014adc:	bfa8      	it	ge
 8014ade:	4653      	movge	r3, sl
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	4699      	mov	r9, r3
 8014ae4:	dc36      	bgt.n	8014b54 <_printf_float+0x360>
 8014ae6:	f04f 0b00 	mov.w	fp, #0
 8014aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014aee:	f104 021a 	add.w	r2, r4, #26
 8014af2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014af4:	9306      	str	r3, [sp, #24]
 8014af6:	eba3 0309 	sub.w	r3, r3, r9
 8014afa:	455b      	cmp	r3, fp
 8014afc:	dc31      	bgt.n	8014b62 <_printf_float+0x36e>
 8014afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b00:	459a      	cmp	sl, r3
 8014b02:	dc3a      	bgt.n	8014b7a <_printf_float+0x386>
 8014b04:	6823      	ldr	r3, [r4, #0]
 8014b06:	07da      	lsls	r2, r3, #31
 8014b08:	d437      	bmi.n	8014b7a <_printf_float+0x386>
 8014b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b0c:	ebaa 0903 	sub.w	r9, sl, r3
 8014b10:	9b06      	ldr	r3, [sp, #24]
 8014b12:	ebaa 0303 	sub.w	r3, sl, r3
 8014b16:	4599      	cmp	r9, r3
 8014b18:	bfa8      	it	ge
 8014b1a:	4699      	movge	r9, r3
 8014b1c:	f1b9 0f00 	cmp.w	r9, #0
 8014b20:	dc33      	bgt.n	8014b8a <_printf_float+0x396>
 8014b22:	f04f 0800 	mov.w	r8, #0
 8014b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b2a:	f104 0b1a 	add.w	fp, r4, #26
 8014b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b30:	ebaa 0303 	sub.w	r3, sl, r3
 8014b34:	eba3 0309 	sub.w	r3, r3, r9
 8014b38:	4543      	cmp	r3, r8
 8014b3a:	f77f af79 	ble.w	8014a30 <_printf_float+0x23c>
 8014b3e:	2301      	movs	r3, #1
 8014b40:	465a      	mov	r2, fp
 8014b42:	4631      	mov	r1, r6
 8014b44:	4628      	mov	r0, r5
 8014b46:	47b8      	blx	r7
 8014b48:	3001      	adds	r0, #1
 8014b4a:	f43f aeae 	beq.w	80148aa <_printf_float+0xb6>
 8014b4e:	f108 0801 	add.w	r8, r8, #1
 8014b52:	e7ec      	b.n	8014b2e <_printf_float+0x33a>
 8014b54:	4642      	mov	r2, r8
 8014b56:	4631      	mov	r1, r6
 8014b58:	4628      	mov	r0, r5
 8014b5a:	47b8      	blx	r7
 8014b5c:	3001      	adds	r0, #1
 8014b5e:	d1c2      	bne.n	8014ae6 <_printf_float+0x2f2>
 8014b60:	e6a3      	b.n	80148aa <_printf_float+0xb6>
 8014b62:	2301      	movs	r3, #1
 8014b64:	4631      	mov	r1, r6
 8014b66:	4628      	mov	r0, r5
 8014b68:	9206      	str	r2, [sp, #24]
 8014b6a:	47b8      	blx	r7
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	f43f ae9c 	beq.w	80148aa <_printf_float+0xb6>
 8014b72:	9a06      	ldr	r2, [sp, #24]
 8014b74:	f10b 0b01 	add.w	fp, fp, #1
 8014b78:	e7bb      	b.n	8014af2 <_printf_float+0x2fe>
 8014b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b7e:	4631      	mov	r1, r6
 8014b80:	4628      	mov	r0, r5
 8014b82:	47b8      	blx	r7
 8014b84:	3001      	adds	r0, #1
 8014b86:	d1c0      	bne.n	8014b0a <_printf_float+0x316>
 8014b88:	e68f      	b.n	80148aa <_printf_float+0xb6>
 8014b8a:	9a06      	ldr	r2, [sp, #24]
 8014b8c:	464b      	mov	r3, r9
 8014b8e:	4442      	add	r2, r8
 8014b90:	4631      	mov	r1, r6
 8014b92:	4628      	mov	r0, r5
 8014b94:	47b8      	blx	r7
 8014b96:	3001      	adds	r0, #1
 8014b98:	d1c3      	bne.n	8014b22 <_printf_float+0x32e>
 8014b9a:	e686      	b.n	80148aa <_printf_float+0xb6>
 8014b9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014ba0:	f1ba 0f01 	cmp.w	sl, #1
 8014ba4:	dc01      	bgt.n	8014baa <_printf_float+0x3b6>
 8014ba6:	07db      	lsls	r3, r3, #31
 8014ba8:	d536      	bpl.n	8014c18 <_printf_float+0x424>
 8014baa:	2301      	movs	r3, #1
 8014bac:	4642      	mov	r2, r8
 8014bae:	4631      	mov	r1, r6
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	47b8      	blx	r7
 8014bb4:	3001      	adds	r0, #1
 8014bb6:	f43f ae78 	beq.w	80148aa <_printf_float+0xb6>
 8014bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bbe:	4631      	mov	r1, r6
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	47b8      	blx	r7
 8014bc4:	3001      	adds	r0, #1
 8014bc6:	f43f ae70 	beq.w	80148aa <_printf_float+0xb6>
 8014bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014bce:	2200      	movs	r2, #0
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bd6:	f7eb ff5f 	bl	8000a98 <__aeabi_dcmpeq>
 8014bda:	b9c0      	cbnz	r0, 8014c0e <_printf_float+0x41a>
 8014bdc:	4653      	mov	r3, sl
 8014bde:	f108 0201 	add.w	r2, r8, #1
 8014be2:	4631      	mov	r1, r6
 8014be4:	4628      	mov	r0, r5
 8014be6:	47b8      	blx	r7
 8014be8:	3001      	adds	r0, #1
 8014bea:	d10c      	bne.n	8014c06 <_printf_float+0x412>
 8014bec:	e65d      	b.n	80148aa <_printf_float+0xb6>
 8014bee:	2301      	movs	r3, #1
 8014bf0:	465a      	mov	r2, fp
 8014bf2:	4631      	mov	r1, r6
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	47b8      	blx	r7
 8014bf8:	3001      	adds	r0, #1
 8014bfa:	f43f ae56 	beq.w	80148aa <_printf_float+0xb6>
 8014bfe:	f108 0801 	add.w	r8, r8, #1
 8014c02:	45d0      	cmp	r8, sl
 8014c04:	dbf3      	blt.n	8014bee <_printf_float+0x3fa>
 8014c06:	464b      	mov	r3, r9
 8014c08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014c0c:	e6df      	b.n	80149ce <_printf_float+0x1da>
 8014c0e:	f04f 0800 	mov.w	r8, #0
 8014c12:	f104 0b1a 	add.w	fp, r4, #26
 8014c16:	e7f4      	b.n	8014c02 <_printf_float+0x40e>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	4642      	mov	r2, r8
 8014c1c:	e7e1      	b.n	8014be2 <_printf_float+0x3ee>
 8014c1e:	2301      	movs	r3, #1
 8014c20:	464a      	mov	r2, r9
 8014c22:	4631      	mov	r1, r6
 8014c24:	4628      	mov	r0, r5
 8014c26:	47b8      	blx	r7
 8014c28:	3001      	adds	r0, #1
 8014c2a:	f43f ae3e 	beq.w	80148aa <_printf_float+0xb6>
 8014c2e:	f108 0801 	add.w	r8, r8, #1
 8014c32:	68e3      	ldr	r3, [r4, #12]
 8014c34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014c36:	1a5b      	subs	r3, r3, r1
 8014c38:	4543      	cmp	r3, r8
 8014c3a:	dcf0      	bgt.n	8014c1e <_printf_float+0x42a>
 8014c3c:	e6fc      	b.n	8014a38 <_printf_float+0x244>
 8014c3e:	f04f 0800 	mov.w	r8, #0
 8014c42:	f104 0919 	add.w	r9, r4, #25
 8014c46:	e7f4      	b.n	8014c32 <_printf_float+0x43e>

08014c48 <_printf_common>:
 8014c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c4c:	4616      	mov	r6, r2
 8014c4e:	4698      	mov	r8, r3
 8014c50:	688a      	ldr	r2, [r1, #8]
 8014c52:	690b      	ldr	r3, [r1, #16]
 8014c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	bfb8      	it	lt
 8014c5c:	4613      	movlt	r3, r2
 8014c5e:	6033      	str	r3, [r6, #0]
 8014c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014c64:	4607      	mov	r7, r0
 8014c66:	460c      	mov	r4, r1
 8014c68:	b10a      	cbz	r2, 8014c6e <_printf_common+0x26>
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	6033      	str	r3, [r6, #0]
 8014c6e:	6823      	ldr	r3, [r4, #0]
 8014c70:	0699      	lsls	r1, r3, #26
 8014c72:	bf42      	ittt	mi
 8014c74:	6833      	ldrmi	r3, [r6, #0]
 8014c76:	3302      	addmi	r3, #2
 8014c78:	6033      	strmi	r3, [r6, #0]
 8014c7a:	6825      	ldr	r5, [r4, #0]
 8014c7c:	f015 0506 	ands.w	r5, r5, #6
 8014c80:	d106      	bne.n	8014c90 <_printf_common+0x48>
 8014c82:	f104 0a19 	add.w	sl, r4, #25
 8014c86:	68e3      	ldr	r3, [r4, #12]
 8014c88:	6832      	ldr	r2, [r6, #0]
 8014c8a:	1a9b      	subs	r3, r3, r2
 8014c8c:	42ab      	cmp	r3, r5
 8014c8e:	dc26      	bgt.n	8014cde <_printf_common+0x96>
 8014c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014c94:	6822      	ldr	r2, [r4, #0]
 8014c96:	3b00      	subs	r3, #0
 8014c98:	bf18      	it	ne
 8014c9a:	2301      	movne	r3, #1
 8014c9c:	0692      	lsls	r2, r2, #26
 8014c9e:	d42b      	bmi.n	8014cf8 <_printf_common+0xb0>
 8014ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014ca4:	4641      	mov	r1, r8
 8014ca6:	4638      	mov	r0, r7
 8014ca8:	47c8      	blx	r9
 8014caa:	3001      	adds	r0, #1
 8014cac:	d01e      	beq.n	8014cec <_printf_common+0xa4>
 8014cae:	6823      	ldr	r3, [r4, #0]
 8014cb0:	6922      	ldr	r2, [r4, #16]
 8014cb2:	f003 0306 	and.w	r3, r3, #6
 8014cb6:	2b04      	cmp	r3, #4
 8014cb8:	bf02      	ittt	eq
 8014cba:	68e5      	ldreq	r5, [r4, #12]
 8014cbc:	6833      	ldreq	r3, [r6, #0]
 8014cbe:	1aed      	subeq	r5, r5, r3
 8014cc0:	68a3      	ldr	r3, [r4, #8]
 8014cc2:	bf0c      	ite	eq
 8014cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cc8:	2500      	movne	r5, #0
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	bfc4      	itt	gt
 8014cce:	1a9b      	subgt	r3, r3, r2
 8014cd0:	18ed      	addgt	r5, r5, r3
 8014cd2:	2600      	movs	r6, #0
 8014cd4:	341a      	adds	r4, #26
 8014cd6:	42b5      	cmp	r5, r6
 8014cd8:	d11a      	bne.n	8014d10 <_printf_common+0xc8>
 8014cda:	2000      	movs	r0, #0
 8014cdc:	e008      	b.n	8014cf0 <_printf_common+0xa8>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	4652      	mov	r2, sl
 8014ce2:	4641      	mov	r1, r8
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	47c8      	blx	r9
 8014ce8:	3001      	adds	r0, #1
 8014cea:	d103      	bne.n	8014cf4 <_printf_common+0xac>
 8014cec:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cf4:	3501      	adds	r5, #1
 8014cf6:	e7c6      	b.n	8014c86 <_printf_common+0x3e>
 8014cf8:	18e1      	adds	r1, r4, r3
 8014cfa:	1c5a      	adds	r2, r3, #1
 8014cfc:	2030      	movs	r0, #48	@ 0x30
 8014cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014d02:	4422      	add	r2, r4
 8014d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014d0c:	3302      	adds	r3, #2
 8014d0e:	e7c7      	b.n	8014ca0 <_printf_common+0x58>
 8014d10:	2301      	movs	r3, #1
 8014d12:	4622      	mov	r2, r4
 8014d14:	4641      	mov	r1, r8
 8014d16:	4638      	mov	r0, r7
 8014d18:	47c8      	blx	r9
 8014d1a:	3001      	adds	r0, #1
 8014d1c:	d0e6      	beq.n	8014cec <_printf_common+0xa4>
 8014d1e:	3601      	adds	r6, #1
 8014d20:	e7d9      	b.n	8014cd6 <_printf_common+0x8e>
	...

08014d24 <_printf_i>:
 8014d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d28:	7e0f      	ldrb	r7, [r1, #24]
 8014d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014d2c:	2f78      	cmp	r7, #120	@ 0x78
 8014d2e:	4691      	mov	r9, r2
 8014d30:	4680      	mov	r8, r0
 8014d32:	460c      	mov	r4, r1
 8014d34:	469a      	mov	sl, r3
 8014d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014d3a:	d807      	bhi.n	8014d4c <_printf_i+0x28>
 8014d3c:	2f62      	cmp	r7, #98	@ 0x62
 8014d3e:	d80a      	bhi.n	8014d56 <_printf_i+0x32>
 8014d40:	2f00      	cmp	r7, #0
 8014d42:	f000 80d1 	beq.w	8014ee8 <_printf_i+0x1c4>
 8014d46:	2f58      	cmp	r7, #88	@ 0x58
 8014d48:	f000 80b8 	beq.w	8014ebc <_printf_i+0x198>
 8014d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014d54:	e03a      	b.n	8014dcc <_printf_i+0xa8>
 8014d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014d5a:	2b15      	cmp	r3, #21
 8014d5c:	d8f6      	bhi.n	8014d4c <_printf_i+0x28>
 8014d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8014d64 <_printf_i+0x40>)
 8014d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d64:	08014dbd 	.word	0x08014dbd
 8014d68:	08014dd1 	.word	0x08014dd1
 8014d6c:	08014d4d 	.word	0x08014d4d
 8014d70:	08014d4d 	.word	0x08014d4d
 8014d74:	08014d4d 	.word	0x08014d4d
 8014d78:	08014d4d 	.word	0x08014d4d
 8014d7c:	08014dd1 	.word	0x08014dd1
 8014d80:	08014d4d 	.word	0x08014d4d
 8014d84:	08014d4d 	.word	0x08014d4d
 8014d88:	08014d4d 	.word	0x08014d4d
 8014d8c:	08014d4d 	.word	0x08014d4d
 8014d90:	08014ecf 	.word	0x08014ecf
 8014d94:	08014dfb 	.word	0x08014dfb
 8014d98:	08014e89 	.word	0x08014e89
 8014d9c:	08014d4d 	.word	0x08014d4d
 8014da0:	08014d4d 	.word	0x08014d4d
 8014da4:	08014ef1 	.word	0x08014ef1
 8014da8:	08014d4d 	.word	0x08014d4d
 8014dac:	08014dfb 	.word	0x08014dfb
 8014db0:	08014d4d 	.word	0x08014d4d
 8014db4:	08014d4d 	.word	0x08014d4d
 8014db8:	08014e91 	.word	0x08014e91
 8014dbc:	6833      	ldr	r3, [r6, #0]
 8014dbe:	1d1a      	adds	r2, r3, #4
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	6032      	str	r2, [r6, #0]
 8014dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014dcc:	2301      	movs	r3, #1
 8014dce:	e09c      	b.n	8014f0a <_printf_i+0x1e6>
 8014dd0:	6833      	ldr	r3, [r6, #0]
 8014dd2:	6820      	ldr	r0, [r4, #0]
 8014dd4:	1d19      	adds	r1, r3, #4
 8014dd6:	6031      	str	r1, [r6, #0]
 8014dd8:	0606      	lsls	r6, r0, #24
 8014dda:	d501      	bpl.n	8014de0 <_printf_i+0xbc>
 8014ddc:	681d      	ldr	r5, [r3, #0]
 8014dde:	e003      	b.n	8014de8 <_printf_i+0xc4>
 8014de0:	0645      	lsls	r5, r0, #25
 8014de2:	d5fb      	bpl.n	8014ddc <_printf_i+0xb8>
 8014de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014de8:	2d00      	cmp	r5, #0
 8014dea:	da03      	bge.n	8014df4 <_printf_i+0xd0>
 8014dec:	232d      	movs	r3, #45	@ 0x2d
 8014dee:	426d      	negs	r5, r5
 8014df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014df4:	4858      	ldr	r0, [pc, #352]	@ (8014f58 <_printf_i+0x234>)
 8014df6:	230a      	movs	r3, #10
 8014df8:	e011      	b.n	8014e1e <_printf_i+0xfa>
 8014dfa:	6821      	ldr	r1, [r4, #0]
 8014dfc:	6833      	ldr	r3, [r6, #0]
 8014dfe:	0608      	lsls	r0, r1, #24
 8014e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8014e04:	d402      	bmi.n	8014e0c <_printf_i+0xe8>
 8014e06:	0649      	lsls	r1, r1, #25
 8014e08:	bf48      	it	mi
 8014e0a:	b2ad      	uxthmi	r5, r5
 8014e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8014e0e:	4852      	ldr	r0, [pc, #328]	@ (8014f58 <_printf_i+0x234>)
 8014e10:	6033      	str	r3, [r6, #0]
 8014e12:	bf14      	ite	ne
 8014e14:	230a      	movne	r3, #10
 8014e16:	2308      	moveq	r3, #8
 8014e18:	2100      	movs	r1, #0
 8014e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014e1e:	6866      	ldr	r6, [r4, #4]
 8014e20:	60a6      	str	r6, [r4, #8]
 8014e22:	2e00      	cmp	r6, #0
 8014e24:	db05      	blt.n	8014e32 <_printf_i+0x10e>
 8014e26:	6821      	ldr	r1, [r4, #0]
 8014e28:	432e      	orrs	r6, r5
 8014e2a:	f021 0104 	bic.w	r1, r1, #4
 8014e2e:	6021      	str	r1, [r4, #0]
 8014e30:	d04b      	beq.n	8014eca <_printf_i+0x1a6>
 8014e32:	4616      	mov	r6, r2
 8014e34:	fbb5 f1f3 	udiv	r1, r5, r3
 8014e38:	fb03 5711 	mls	r7, r3, r1, r5
 8014e3c:	5dc7      	ldrb	r7, [r0, r7]
 8014e3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014e42:	462f      	mov	r7, r5
 8014e44:	42bb      	cmp	r3, r7
 8014e46:	460d      	mov	r5, r1
 8014e48:	d9f4      	bls.n	8014e34 <_printf_i+0x110>
 8014e4a:	2b08      	cmp	r3, #8
 8014e4c:	d10b      	bne.n	8014e66 <_printf_i+0x142>
 8014e4e:	6823      	ldr	r3, [r4, #0]
 8014e50:	07df      	lsls	r7, r3, #31
 8014e52:	d508      	bpl.n	8014e66 <_printf_i+0x142>
 8014e54:	6923      	ldr	r3, [r4, #16]
 8014e56:	6861      	ldr	r1, [r4, #4]
 8014e58:	4299      	cmp	r1, r3
 8014e5a:	bfde      	ittt	le
 8014e5c:	2330      	movle	r3, #48	@ 0x30
 8014e5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e66:	1b92      	subs	r2, r2, r6
 8014e68:	6122      	str	r2, [r4, #16]
 8014e6a:	f8cd a000 	str.w	sl, [sp]
 8014e6e:	464b      	mov	r3, r9
 8014e70:	aa03      	add	r2, sp, #12
 8014e72:	4621      	mov	r1, r4
 8014e74:	4640      	mov	r0, r8
 8014e76:	f7ff fee7 	bl	8014c48 <_printf_common>
 8014e7a:	3001      	adds	r0, #1
 8014e7c:	d14a      	bne.n	8014f14 <_printf_i+0x1f0>
 8014e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e82:	b004      	add	sp, #16
 8014e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	f043 0320 	orr.w	r3, r3, #32
 8014e8e:	6023      	str	r3, [r4, #0]
 8014e90:	4832      	ldr	r0, [pc, #200]	@ (8014f5c <_printf_i+0x238>)
 8014e92:	2778      	movs	r7, #120	@ 0x78
 8014e94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	6831      	ldr	r1, [r6, #0]
 8014e9c:	061f      	lsls	r7, r3, #24
 8014e9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8014ea2:	d402      	bmi.n	8014eaa <_printf_i+0x186>
 8014ea4:	065f      	lsls	r7, r3, #25
 8014ea6:	bf48      	it	mi
 8014ea8:	b2ad      	uxthmi	r5, r5
 8014eaa:	6031      	str	r1, [r6, #0]
 8014eac:	07d9      	lsls	r1, r3, #31
 8014eae:	bf44      	itt	mi
 8014eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8014eb4:	6023      	strmi	r3, [r4, #0]
 8014eb6:	b11d      	cbz	r5, 8014ec0 <_printf_i+0x19c>
 8014eb8:	2310      	movs	r3, #16
 8014eba:	e7ad      	b.n	8014e18 <_printf_i+0xf4>
 8014ebc:	4826      	ldr	r0, [pc, #152]	@ (8014f58 <_printf_i+0x234>)
 8014ebe:	e7e9      	b.n	8014e94 <_printf_i+0x170>
 8014ec0:	6823      	ldr	r3, [r4, #0]
 8014ec2:	f023 0320 	bic.w	r3, r3, #32
 8014ec6:	6023      	str	r3, [r4, #0]
 8014ec8:	e7f6      	b.n	8014eb8 <_printf_i+0x194>
 8014eca:	4616      	mov	r6, r2
 8014ecc:	e7bd      	b.n	8014e4a <_printf_i+0x126>
 8014ece:	6833      	ldr	r3, [r6, #0]
 8014ed0:	6825      	ldr	r5, [r4, #0]
 8014ed2:	6961      	ldr	r1, [r4, #20]
 8014ed4:	1d18      	adds	r0, r3, #4
 8014ed6:	6030      	str	r0, [r6, #0]
 8014ed8:	062e      	lsls	r6, r5, #24
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	d501      	bpl.n	8014ee2 <_printf_i+0x1be>
 8014ede:	6019      	str	r1, [r3, #0]
 8014ee0:	e002      	b.n	8014ee8 <_printf_i+0x1c4>
 8014ee2:	0668      	lsls	r0, r5, #25
 8014ee4:	d5fb      	bpl.n	8014ede <_printf_i+0x1ba>
 8014ee6:	8019      	strh	r1, [r3, #0]
 8014ee8:	2300      	movs	r3, #0
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	4616      	mov	r6, r2
 8014eee:	e7bc      	b.n	8014e6a <_printf_i+0x146>
 8014ef0:	6833      	ldr	r3, [r6, #0]
 8014ef2:	1d1a      	adds	r2, r3, #4
 8014ef4:	6032      	str	r2, [r6, #0]
 8014ef6:	681e      	ldr	r6, [r3, #0]
 8014ef8:	6862      	ldr	r2, [r4, #4]
 8014efa:	2100      	movs	r1, #0
 8014efc:	4630      	mov	r0, r6
 8014efe:	f7eb f94f 	bl	80001a0 <memchr>
 8014f02:	b108      	cbz	r0, 8014f08 <_printf_i+0x1e4>
 8014f04:	1b80      	subs	r0, r0, r6
 8014f06:	6060      	str	r0, [r4, #4]
 8014f08:	6863      	ldr	r3, [r4, #4]
 8014f0a:	6123      	str	r3, [r4, #16]
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f12:	e7aa      	b.n	8014e6a <_printf_i+0x146>
 8014f14:	6923      	ldr	r3, [r4, #16]
 8014f16:	4632      	mov	r2, r6
 8014f18:	4649      	mov	r1, r9
 8014f1a:	4640      	mov	r0, r8
 8014f1c:	47d0      	blx	sl
 8014f1e:	3001      	adds	r0, #1
 8014f20:	d0ad      	beq.n	8014e7e <_printf_i+0x15a>
 8014f22:	6823      	ldr	r3, [r4, #0]
 8014f24:	079b      	lsls	r3, r3, #30
 8014f26:	d413      	bmi.n	8014f50 <_printf_i+0x22c>
 8014f28:	68e0      	ldr	r0, [r4, #12]
 8014f2a:	9b03      	ldr	r3, [sp, #12]
 8014f2c:	4298      	cmp	r0, r3
 8014f2e:	bfb8      	it	lt
 8014f30:	4618      	movlt	r0, r3
 8014f32:	e7a6      	b.n	8014e82 <_printf_i+0x15e>
 8014f34:	2301      	movs	r3, #1
 8014f36:	4632      	mov	r2, r6
 8014f38:	4649      	mov	r1, r9
 8014f3a:	4640      	mov	r0, r8
 8014f3c:	47d0      	blx	sl
 8014f3e:	3001      	adds	r0, #1
 8014f40:	d09d      	beq.n	8014e7e <_printf_i+0x15a>
 8014f42:	3501      	adds	r5, #1
 8014f44:	68e3      	ldr	r3, [r4, #12]
 8014f46:	9903      	ldr	r1, [sp, #12]
 8014f48:	1a5b      	subs	r3, r3, r1
 8014f4a:	42ab      	cmp	r3, r5
 8014f4c:	dcf2      	bgt.n	8014f34 <_printf_i+0x210>
 8014f4e:	e7eb      	b.n	8014f28 <_printf_i+0x204>
 8014f50:	2500      	movs	r5, #0
 8014f52:	f104 0619 	add.w	r6, r4, #25
 8014f56:	e7f5      	b.n	8014f44 <_printf_i+0x220>
 8014f58:	0801a8df 	.word	0x0801a8df
 8014f5c:	0801a8f0 	.word	0x0801a8f0

08014f60 <std>:
 8014f60:	2300      	movs	r3, #0
 8014f62:	b510      	push	{r4, lr}
 8014f64:	4604      	mov	r4, r0
 8014f66:	e9c0 3300 	strd	r3, r3, [r0]
 8014f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f6e:	6083      	str	r3, [r0, #8]
 8014f70:	8181      	strh	r1, [r0, #12]
 8014f72:	6643      	str	r3, [r0, #100]	@ 0x64
 8014f74:	81c2      	strh	r2, [r0, #14]
 8014f76:	6183      	str	r3, [r0, #24]
 8014f78:	4619      	mov	r1, r3
 8014f7a:	2208      	movs	r2, #8
 8014f7c:	305c      	adds	r0, #92	@ 0x5c
 8014f7e:	f000 f918 	bl	80151b2 <memset>
 8014f82:	4b0d      	ldr	r3, [pc, #52]	@ (8014fb8 <std+0x58>)
 8014f84:	6263      	str	r3, [r4, #36]	@ 0x24
 8014f86:	4b0d      	ldr	r3, [pc, #52]	@ (8014fbc <std+0x5c>)
 8014f88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014fc0 <std+0x60>)
 8014f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014fc4 <std+0x64>)
 8014f90:	6323      	str	r3, [r4, #48]	@ 0x30
 8014f92:	4b0d      	ldr	r3, [pc, #52]	@ (8014fc8 <std+0x68>)
 8014f94:	6224      	str	r4, [r4, #32]
 8014f96:	429c      	cmp	r4, r3
 8014f98:	d006      	beq.n	8014fa8 <std+0x48>
 8014f9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014f9e:	4294      	cmp	r4, r2
 8014fa0:	d002      	beq.n	8014fa8 <std+0x48>
 8014fa2:	33d0      	adds	r3, #208	@ 0xd0
 8014fa4:	429c      	cmp	r4, r3
 8014fa6:	d105      	bne.n	8014fb4 <std+0x54>
 8014fa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fb0:	f000 bffe 	b.w	8015fb0 <__retarget_lock_init_recursive>
 8014fb4:	bd10      	pop	{r4, pc}
 8014fb6:	bf00      	nop
 8014fb8:	08015129 	.word	0x08015129
 8014fbc:	0801514f 	.word	0x0801514f
 8014fc0:	08015187 	.word	0x08015187
 8014fc4:	080151ab 	.word	0x080151ab
 8014fc8:	2000a814 	.word	0x2000a814

08014fcc <stdio_exit_handler>:
 8014fcc:	4a02      	ldr	r2, [pc, #8]	@ (8014fd8 <stdio_exit_handler+0xc>)
 8014fce:	4903      	ldr	r1, [pc, #12]	@ (8014fdc <stdio_exit_handler+0x10>)
 8014fd0:	4803      	ldr	r0, [pc, #12]	@ (8014fe0 <stdio_exit_handler+0x14>)
 8014fd2:	f000 b869 	b.w	80150a8 <_fwalk_sglue>
 8014fd6:	bf00      	nop
 8014fd8:	20000024 	.word	0x20000024
 8014fdc:	08017b21 	.word	0x08017b21
 8014fe0:	2000003c 	.word	0x2000003c

08014fe4 <cleanup_stdio>:
 8014fe4:	6841      	ldr	r1, [r0, #4]
 8014fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8015018 <cleanup_stdio+0x34>)
 8014fe8:	4299      	cmp	r1, r3
 8014fea:	b510      	push	{r4, lr}
 8014fec:	4604      	mov	r4, r0
 8014fee:	d001      	beq.n	8014ff4 <cleanup_stdio+0x10>
 8014ff0:	f002 fd96 	bl	8017b20 <_fflush_r>
 8014ff4:	68a1      	ldr	r1, [r4, #8]
 8014ff6:	4b09      	ldr	r3, [pc, #36]	@ (801501c <cleanup_stdio+0x38>)
 8014ff8:	4299      	cmp	r1, r3
 8014ffa:	d002      	beq.n	8015002 <cleanup_stdio+0x1e>
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	f002 fd8f 	bl	8017b20 <_fflush_r>
 8015002:	68e1      	ldr	r1, [r4, #12]
 8015004:	4b06      	ldr	r3, [pc, #24]	@ (8015020 <cleanup_stdio+0x3c>)
 8015006:	4299      	cmp	r1, r3
 8015008:	d004      	beq.n	8015014 <cleanup_stdio+0x30>
 801500a:	4620      	mov	r0, r4
 801500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015010:	f002 bd86 	b.w	8017b20 <_fflush_r>
 8015014:	bd10      	pop	{r4, pc}
 8015016:	bf00      	nop
 8015018:	2000a814 	.word	0x2000a814
 801501c:	2000a87c 	.word	0x2000a87c
 8015020:	2000a8e4 	.word	0x2000a8e4

08015024 <global_stdio_init.part.0>:
 8015024:	b510      	push	{r4, lr}
 8015026:	4b0b      	ldr	r3, [pc, #44]	@ (8015054 <global_stdio_init.part.0+0x30>)
 8015028:	4c0b      	ldr	r4, [pc, #44]	@ (8015058 <global_stdio_init.part.0+0x34>)
 801502a:	4a0c      	ldr	r2, [pc, #48]	@ (801505c <global_stdio_init.part.0+0x38>)
 801502c:	601a      	str	r2, [r3, #0]
 801502e:	4620      	mov	r0, r4
 8015030:	2200      	movs	r2, #0
 8015032:	2104      	movs	r1, #4
 8015034:	f7ff ff94 	bl	8014f60 <std>
 8015038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801503c:	2201      	movs	r2, #1
 801503e:	2109      	movs	r1, #9
 8015040:	f7ff ff8e 	bl	8014f60 <std>
 8015044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015048:	2202      	movs	r2, #2
 801504a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801504e:	2112      	movs	r1, #18
 8015050:	f7ff bf86 	b.w	8014f60 <std>
 8015054:	2000a94c 	.word	0x2000a94c
 8015058:	2000a814 	.word	0x2000a814
 801505c:	08014fcd 	.word	0x08014fcd

08015060 <__sfp_lock_acquire>:
 8015060:	4801      	ldr	r0, [pc, #4]	@ (8015068 <__sfp_lock_acquire+0x8>)
 8015062:	f000 bfa7 	b.w	8015fb4 <__retarget_lock_acquire_recursive>
 8015066:	bf00      	nop
 8015068:	2000a97b 	.word	0x2000a97b

0801506c <__sfp_lock_release>:
 801506c:	4801      	ldr	r0, [pc, #4]	@ (8015074 <__sfp_lock_release+0x8>)
 801506e:	f000 bfa3 	b.w	8015fb8 <__retarget_lock_release_recursive>
 8015072:	bf00      	nop
 8015074:	2000a97b 	.word	0x2000a97b

08015078 <__sinit>:
 8015078:	b510      	push	{r4, lr}
 801507a:	4604      	mov	r4, r0
 801507c:	f7ff fff0 	bl	8015060 <__sfp_lock_acquire>
 8015080:	6a23      	ldr	r3, [r4, #32]
 8015082:	b11b      	cbz	r3, 801508c <__sinit+0x14>
 8015084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015088:	f7ff bff0 	b.w	801506c <__sfp_lock_release>
 801508c:	4b04      	ldr	r3, [pc, #16]	@ (80150a0 <__sinit+0x28>)
 801508e:	6223      	str	r3, [r4, #32]
 8015090:	4b04      	ldr	r3, [pc, #16]	@ (80150a4 <__sinit+0x2c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d1f5      	bne.n	8015084 <__sinit+0xc>
 8015098:	f7ff ffc4 	bl	8015024 <global_stdio_init.part.0>
 801509c:	e7f2      	b.n	8015084 <__sinit+0xc>
 801509e:	bf00      	nop
 80150a0:	08014fe5 	.word	0x08014fe5
 80150a4:	2000a94c 	.word	0x2000a94c

080150a8 <_fwalk_sglue>:
 80150a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150ac:	4607      	mov	r7, r0
 80150ae:	4688      	mov	r8, r1
 80150b0:	4614      	mov	r4, r2
 80150b2:	2600      	movs	r6, #0
 80150b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150b8:	f1b9 0901 	subs.w	r9, r9, #1
 80150bc:	d505      	bpl.n	80150ca <_fwalk_sglue+0x22>
 80150be:	6824      	ldr	r4, [r4, #0]
 80150c0:	2c00      	cmp	r4, #0
 80150c2:	d1f7      	bne.n	80150b4 <_fwalk_sglue+0xc>
 80150c4:	4630      	mov	r0, r6
 80150c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150ca:	89ab      	ldrh	r3, [r5, #12]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d907      	bls.n	80150e0 <_fwalk_sglue+0x38>
 80150d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150d4:	3301      	adds	r3, #1
 80150d6:	d003      	beq.n	80150e0 <_fwalk_sglue+0x38>
 80150d8:	4629      	mov	r1, r5
 80150da:	4638      	mov	r0, r7
 80150dc:	47c0      	blx	r8
 80150de:	4306      	orrs	r6, r0
 80150e0:	3568      	adds	r5, #104	@ 0x68
 80150e2:	e7e9      	b.n	80150b8 <_fwalk_sglue+0x10>

080150e4 <siprintf>:
 80150e4:	b40e      	push	{r1, r2, r3}
 80150e6:	b510      	push	{r4, lr}
 80150e8:	b09d      	sub	sp, #116	@ 0x74
 80150ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80150ec:	9002      	str	r0, [sp, #8]
 80150ee:	9006      	str	r0, [sp, #24]
 80150f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150f4:	480a      	ldr	r0, [pc, #40]	@ (8015120 <siprintf+0x3c>)
 80150f6:	9107      	str	r1, [sp, #28]
 80150f8:	9104      	str	r1, [sp, #16]
 80150fa:	490a      	ldr	r1, [pc, #40]	@ (8015124 <siprintf+0x40>)
 80150fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015100:	9105      	str	r1, [sp, #20]
 8015102:	2400      	movs	r4, #0
 8015104:	a902      	add	r1, sp, #8
 8015106:	6800      	ldr	r0, [r0, #0]
 8015108:	9301      	str	r3, [sp, #4]
 801510a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801510c:	f002 fb88 	bl	8017820 <_svfiprintf_r>
 8015110:	9b02      	ldr	r3, [sp, #8]
 8015112:	701c      	strb	r4, [r3, #0]
 8015114:	b01d      	add	sp, #116	@ 0x74
 8015116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801511a:	b003      	add	sp, #12
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	20000038 	.word	0x20000038
 8015124:	ffff0208 	.word	0xffff0208

08015128 <__sread>:
 8015128:	b510      	push	{r4, lr}
 801512a:	460c      	mov	r4, r1
 801512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015130:	f000 fef0 	bl	8015f14 <_read_r>
 8015134:	2800      	cmp	r0, #0
 8015136:	bfab      	itete	ge
 8015138:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801513a:	89a3      	ldrhlt	r3, [r4, #12]
 801513c:	181b      	addge	r3, r3, r0
 801513e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015142:	bfac      	ite	ge
 8015144:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015146:	81a3      	strhlt	r3, [r4, #12]
 8015148:	bd10      	pop	{r4, pc}

0801514a <__seofread>:
 801514a:	2000      	movs	r0, #0
 801514c:	4770      	bx	lr

0801514e <__swrite>:
 801514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015152:	461f      	mov	r7, r3
 8015154:	898b      	ldrh	r3, [r1, #12]
 8015156:	05db      	lsls	r3, r3, #23
 8015158:	4605      	mov	r5, r0
 801515a:	460c      	mov	r4, r1
 801515c:	4616      	mov	r6, r2
 801515e:	d505      	bpl.n	801516c <__swrite+0x1e>
 8015160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015164:	2302      	movs	r3, #2
 8015166:	2200      	movs	r2, #0
 8015168:	f000 fec2 	bl	8015ef0 <_lseek_r>
 801516c:	89a3      	ldrh	r3, [r4, #12]
 801516e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015176:	81a3      	strh	r3, [r4, #12]
 8015178:	4632      	mov	r2, r6
 801517a:	463b      	mov	r3, r7
 801517c:	4628      	mov	r0, r5
 801517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015182:	f000 bed9 	b.w	8015f38 <_write_r>

08015186 <__sseek>:
 8015186:	b510      	push	{r4, lr}
 8015188:	460c      	mov	r4, r1
 801518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801518e:	f000 feaf 	bl	8015ef0 <_lseek_r>
 8015192:	1c43      	adds	r3, r0, #1
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	bf15      	itete	ne
 8015198:	6560      	strne	r0, [r4, #84]	@ 0x54
 801519a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801519e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80151a2:	81a3      	strheq	r3, [r4, #12]
 80151a4:	bf18      	it	ne
 80151a6:	81a3      	strhne	r3, [r4, #12]
 80151a8:	bd10      	pop	{r4, pc}

080151aa <__sclose>:
 80151aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ae:	f000 be8f 	b.w	8015ed0 <_close_r>

080151b2 <memset>:
 80151b2:	4402      	add	r2, r0
 80151b4:	4603      	mov	r3, r0
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d100      	bne.n	80151bc <memset+0xa>
 80151ba:	4770      	bx	lr
 80151bc:	f803 1b01 	strb.w	r1, [r3], #1
 80151c0:	e7f9      	b.n	80151b6 <memset+0x4>
	...

080151c4 <localtime>:
 80151c4:	b538      	push	{r3, r4, r5, lr}
 80151c6:	4b0b      	ldr	r3, [pc, #44]	@ (80151f4 <localtime+0x30>)
 80151c8:	681d      	ldr	r5, [r3, #0]
 80151ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80151cc:	4604      	mov	r4, r0
 80151ce:	b953      	cbnz	r3, 80151e6 <localtime+0x22>
 80151d0:	2024      	movs	r0, #36	@ 0x24
 80151d2:	f001 fe17 	bl	8016e04 <malloc>
 80151d6:	4602      	mov	r2, r0
 80151d8:	6368      	str	r0, [r5, #52]	@ 0x34
 80151da:	b920      	cbnz	r0, 80151e6 <localtime+0x22>
 80151dc:	4b06      	ldr	r3, [pc, #24]	@ (80151f8 <localtime+0x34>)
 80151de:	4807      	ldr	r0, [pc, #28]	@ (80151fc <localtime+0x38>)
 80151e0:	2132      	movs	r1, #50	@ 0x32
 80151e2:	f000 ff01 	bl	8015fe8 <__assert_func>
 80151e6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80151e8:	4620      	mov	r0, r4
 80151ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151ee:	f000 b807 	b.w	8015200 <localtime_r>
 80151f2:	bf00      	nop
 80151f4:	20000038 	.word	0x20000038
 80151f8:	0801a860 	.word	0x0801a860
 80151fc:	0801a901 	.word	0x0801a901

08015200 <localtime_r>:
 8015200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015204:	460c      	mov	r4, r1
 8015206:	4607      	mov	r7, r0
 8015208:	f002 fd1c 	bl	8017c44 <__gettzinfo>
 801520c:	4621      	mov	r1, r4
 801520e:	4605      	mov	r5, r0
 8015210:	4638      	mov	r0, r7
 8015212:	f002 fd1b 	bl	8017c4c <gmtime_r>
 8015216:	6943      	ldr	r3, [r0, #20]
 8015218:	0799      	lsls	r1, r3, #30
 801521a:	4604      	mov	r4, r0
 801521c:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8015220:	d106      	bne.n	8015230 <localtime_r+0x30>
 8015222:	2264      	movs	r2, #100	@ 0x64
 8015224:	fb98 f3f2 	sdiv	r3, r8, r2
 8015228:	fb02 8313 	mls	r3, r2, r3, r8
 801522c:	2b00      	cmp	r3, #0
 801522e:	d171      	bne.n	8015314 <localtime_r+0x114>
 8015230:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015234:	fb98 f3f2 	sdiv	r3, r8, r2
 8015238:	fb02 8313 	mls	r3, r2, r3, r8
 801523c:	fab3 f383 	clz	r3, r3
 8015240:	095b      	lsrs	r3, r3, #5
 8015242:	425e      	negs	r6, r3
 8015244:	4b64      	ldr	r3, [pc, #400]	@ (80153d8 <localtime_r+0x1d8>)
 8015246:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 801524a:	441e      	add	r6, r3
 801524c:	f000 fc08 	bl	8015a60 <__tz_lock>
 8015250:	f000 fc12 	bl	8015a78 <_tzset_unlocked>
 8015254:	4b61      	ldr	r3, [pc, #388]	@ (80153dc <localtime_r+0x1dc>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d06a      	beq.n	8015332 <localtime_r+0x132>
 801525c:	686b      	ldr	r3, [r5, #4]
 801525e:	4543      	cmp	r3, r8
 8015260:	d15a      	bne.n	8015318 <localtime_r+0x118>
 8015262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015266:	682f      	ldr	r7, [r5, #0]
 8015268:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801526c:	2f00      	cmp	r7, #0
 801526e:	d15b      	bne.n	8015328 <localtime_r+0x128>
 8015270:	4282      	cmp	r2, r0
 8015272:	eb73 0101 	sbcs.w	r1, r3, r1
 8015276:	db5e      	blt.n	8015336 <localtime_r+0x136>
 8015278:	2301      	movs	r3, #1
 801527a:	6223      	str	r3, [r4, #32]
 801527c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801527e:	6861      	ldr	r1, [r4, #4]
 8015280:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8015284:	fb93 f0f2 	sdiv	r0, r3, r2
 8015288:	fb02 3310 	mls	r3, r2, r0, r3
 801528c:	223c      	movs	r2, #60	@ 0x3c
 801528e:	fb93 f5f2 	sdiv	r5, r3, r2
 8015292:	fb02 3215 	mls	r2, r2, r5, r3
 8015296:	6823      	ldr	r3, [r4, #0]
 8015298:	1a9b      	subs	r3, r3, r2
 801529a:	68a2      	ldr	r2, [r4, #8]
 801529c:	6023      	str	r3, [r4, #0]
 801529e:	1b49      	subs	r1, r1, r5
 80152a0:	1a12      	subs	r2, r2, r0
 80152a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80152a4:	6061      	str	r1, [r4, #4]
 80152a6:	60a2      	str	r2, [r4, #8]
 80152a8:	dd51      	ble.n	801534e <localtime_r+0x14e>
 80152aa:	3101      	adds	r1, #1
 80152ac:	6061      	str	r1, [r4, #4]
 80152ae:	3b3c      	subs	r3, #60	@ 0x3c
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	6863      	ldr	r3, [r4, #4]
 80152b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80152b6:	dd50      	ble.n	801535a <localtime_r+0x15a>
 80152b8:	3201      	adds	r2, #1
 80152ba:	60a2      	str	r2, [r4, #8]
 80152bc:	3b3c      	subs	r3, #60	@ 0x3c
 80152be:	6063      	str	r3, [r4, #4]
 80152c0:	68a3      	ldr	r3, [r4, #8]
 80152c2:	2b17      	cmp	r3, #23
 80152c4:	dd4f      	ble.n	8015366 <localtime_r+0x166>
 80152c6:	69e2      	ldr	r2, [r4, #28]
 80152c8:	3201      	adds	r2, #1
 80152ca:	61e2      	str	r2, [r4, #28]
 80152cc:	69a2      	ldr	r2, [r4, #24]
 80152ce:	3201      	adds	r2, #1
 80152d0:	2a07      	cmp	r2, #7
 80152d2:	bfa8      	it	ge
 80152d4:	2200      	movge	r2, #0
 80152d6:	61a2      	str	r2, [r4, #24]
 80152d8:	68e2      	ldr	r2, [r4, #12]
 80152da:	3b18      	subs	r3, #24
 80152dc:	3201      	adds	r2, #1
 80152de:	60a3      	str	r3, [r4, #8]
 80152e0:	6923      	ldr	r3, [r4, #16]
 80152e2:	60e2      	str	r2, [r4, #12]
 80152e4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80152e8:	428a      	cmp	r2, r1
 80152ea:	dd0e      	ble.n	801530a <localtime_r+0x10a>
 80152ec:	2b0b      	cmp	r3, #11
 80152ee:	eba2 0201 	sub.w	r2, r2, r1
 80152f2:	60e2      	str	r2, [r4, #12]
 80152f4:	f103 0201 	add.w	r2, r3, #1
 80152f8:	bf09      	itett	eq
 80152fa:	6963      	ldreq	r3, [r4, #20]
 80152fc:	6122      	strne	r2, [r4, #16]
 80152fe:	2200      	moveq	r2, #0
 8015300:	3301      	addeq	r3, #1
 8015302:	bf02      	ittt	eq
 8015304:	6122      	streq	r2, [r4, #16]
 8015306:	6163      	streq	r3, [r4, #20]
 8015308:	61e2      	streq	r2, [r4, #28]
 801530a:	f000 fbaf 	bl	8015a6c <__tz_unlock>
 801530e:	4620      	mov	r0, r4
 8015310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015314:	2301      	movs	r3, #1
 8015316:	e794      	b.n	8015242 <localtime_r+0x42>
 8015318:	4640      	mov	r0, r8
 801531a:	f000 faed 	bl	80158f8 <__tzcalc_limits>
 801531e:	2800      	cmp	r0, #0
 8015320:	d19f      	bne.n	8015262 <localtime_r+0x62>
 8015322:	f04f 33ff 	mov.w	r3, #4294967295
 8015326:	e004      	b.n	8015332 <localtime_r+0x132>
 8015328:	4282      	cmp	r2, r0
 801532a:	eb73 0101 	sbcs.w	r1, r3, r1
 801532e:	da02      	bge.n	8015336 <localtime_r+0x136>
 8015330:	2300      	movs	r3, #0
 8015332:	6223      	str	r3, [r4, #32]
 8015334:	e009      	b.n	801534a <localtime_r+0x14a>
 8015336:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 801533a:	4282      	cmp	r2, r0
 801533c:	418b      	sbcs	r3, r1
 801533e:	bfb4      	ite	lt
 8015340:	2301      	movlt	r3, #1
 8015342:	2300      	movge	r3, #0
 8015344:	6223      	str	r3, [r4, #32]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d198      	bne.n	801527c <localtime_r+0x7c>
 801534a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801534c:	e797      	b.n	801527e <localtime_r+0x7e>
 801534e:	2b00      	cmp	r3, #0
 8015350:	daaf      	bge.n	80152b2 <localtime_r+0xb2>
 8015352:	3901      	subs	r1, #1
 8015354:	6061      	str	r1, [r4, #4]
 8015356:	333c      	adds	r3, #60	@ 0x3c
 8015358:	e7aa      	b.n	80152b0 <localtime_r+0xb0>
 801535a:	2b00      	cmp	r3, #0
 801535c:	dab0      	bge.n	80152c0 <localtime_r+0xc0>
 801535e:	3a01      	subs	r2, #1
 8015360:	60a2      	str	r2, [r4, #8]
 8015362:	333c      	adds	r3, #60	@ 0x3c
 8015364:	e7ab      	b.n	80152be <localtime_r+0xbe>
 8015366:	2b00      	cmp	r3, #0
 8015368:	dacf      	bge.n	801530a <localtime_r+0x10a>
 801536a:	69e2      	ldr	r2, [r4, #28]
 801536c:	3a01      	subs	r2, #1
 801536e:	61e2      	str	r2, [r4, #28]
 8015370:	69a2      	ldr	r2, [r4, #24]
 8015372:	3a01      	subs	r2, #1
 8015374:	bf48      	it	mi
 8015376:	2206      	movmi	r2, #6
 8015378:	61a2      	str	r2, [r4, #24]
 801537a:	68e2      	ldr	r2, [r4, #12]
 801537c:	3318      	adds	r3, #24
 801537e:	3a01      	subs	r2, #1
 8015380:	60e2      	str	r2, [r4, #12]
 8015382:	60a3      	str	r3, [r4, #8]
 8015384:	2a00      	cmp	r2, #0
 8015386:	d1c0      	bne.n	801530a <localtime_r+0x10a>
 8015388:	6923      	ldr	r3, [r4, #16]
 801538a:	3b01      	subs	r3, #1
 801538c:	d405      	bmi.n	801539a <localtime_r+0x19a>
 801538e:	6123      	str	r3, [r4, #16]
 8015390:	6923      	ldr	r3, [r4, #16]
 8015392:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015396:	60e3      	str	r3, [r4, #12]
 8015398:	e7b7      	b.n	801530a <localtime_r+0x10a>
 801539a:	230b      	movs	r3, #11
 801539c:	6123      	str	r3, [r4, #16]
 801539e:	6963      	ldr	r3, [r4, #20]
 80153a0:	1e5a      	subs	r2, r3, #1
 80153a2:	6162      	str	r2, [r4, #20]
 80153a4:	0792      	lsls	r2, r2, #30
 80153a6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80153aa:	d105      	bne.n	80153b8 <localtime_r+0x1b8>
 80153ac:	2164      	movs	r1, #100	@ 0x64
 80153ae:	fb93 f2f1 	sdiv	r2, r3, r1
 80153b2:	fb01 3212 	mls	r2, r1, r2, r3
 80153b6:	b962      	cbnz	r2, 80153d2 <localtime_r+0x1d2>
 80153b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80153bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80153c0:	fb02 3311 	mls	r3, r2, r1, r3
 80153c4:	fab3 f383 	clz	r3, r3
 80153c8:	095b      	lsrs	r3, r3, #5
 80153ca:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80153ce:	61e3      	str	r3, [r4, #28]
 80153d0:	e7de      	b.n	8015390 <localtime_r+0x190>
 80153d2:	2301      	movs	r3, #1
 80153d4:	e7f9      	b.n	80153ca <localtime_r+0x1ca>
 80153d6:	bf00      	nop
 80153d8:	0801ab4c 	.word	0x0801ab4c
 80153dc:	2000a970 	.word	0x2000a970

080153e0 <validate_structure>:
 80153e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153e2:	6801      	ldr	r1, [r0, #0]
 80153e4:	293b      	cmp	r1, #59	@ 0x3b
 80153e6:	4604      	mov	r4, r0
 80153e8:	d911      	bls.n	801540e <validate_structure+0x2e>
 80153ea:	223c      	movs	r2, #60	@ 0x3c
 80153ec:	4668      	mov	r0, sp
 80153ee:	f000 fe19 	bl	8016024 <div>
 80153f2:	9a01      	ldr	r2, [sp, #4]
 80153f4:	6863      	ldr	r3, [r4, #4]
 80153f6:	9900      	ldr	r1, [sp, #0]
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	440b      	add	r3, r1
 80153fc:	6063      	str	r3, [r4, #4]
 80153fe:	bfbb      	ittet	lt
 8015400:	323c      	addlt	r2, #60	@ 0x3c
 8015402:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015406:	6022      	strge	r2, [r4, #0]
 8015408:	6022      	strlt	r2, [r4, #0]
 801540a:	bfb8      	it	lt
 801540c:	6063      	strlt	r3, [r4, #4]
 801540e:	6861      	ldr	r1, [r4, #4]
 8015410:	293b      	cmp	r1, #59	@ 0x3b
 8015412:	d911      	bls.n	8015438 <validate_structure+0x58>
 8015414:	223c      	movs	r2, #60	@ 0x3c
 8015416:	4668      	mov	r0, sp
 8015418:	f000 fe04 	bl	8016024 <div>
 801541c:	9a01      	ldr	r2, [sp, #4]
 801541e:	68a3      	ldr	r3, [r4, #8]
 8015420:	9900      	ldr	r1, [sp, #0]
 8015422:	2a00      	cmp	r2, #0
 8015424:	440b      	add	r3, r1
 8015426:	60a3      	str	r3, [r4, #8]
 8015428:	bfbb      	ittet	lt
 801542a:	323c      	addlt	r2, #60	@ 0x3c
 801542c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015430:	6062      	strge	r2, [r4, #4]
 8015432:	6062      	strlt	r2, [r4, #4]
 8015434:	bfb8      	it	lt
 8015436:	60a3      	strlt	r3, [r4, #8]
 8015438:	68a1      	ldr	r1, [r4, #8]
 801543a:	2917      	cmp	r1, #23
 801543c:	d911      	bls.n	8015462 <validate_structure+0x82>
 801543e:	2218      	movs	r2, #24
 8015440:	4668      	mov	r0, sp
 8015442:	f000 fdef 	bl	8016024 <div>
 8015446:	9a01      	ldr	r2, [sp, #4]
 8015448:	68e3      	ldr	r3, [r4, #12]
 801544a:	9900      	ldr	r1, [sp, #0]
 801544c:	2a00      	cmp	r2, #0
 801544e:	440b      	add	r3, r1
 8015450:	60e3      	str	r3, [r4, #12]
 8015452:	bfbb      	ittet	lt
 8015454:	3218      	addlt	r2, #24
 8015456:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801545a:	60a2      	strge	r2, [r4, #8]
 801545c:	60a2      	strlt	r2, [r4, #8]
 801545e:	bfb8      	it	lt
 8015460:	60e3      	strlt	r3, [r4, #12]
 8015462:	6921      	ldr	r1, [r4, #16]
 8015464:	290b      	cmp	r1, #11
 8015466:	d911      	bls.n	801548c <validate_structure+0xac>
 8015468:	220c      	movs	r2, #12
 801546a:	4668      	mov	r0, sp
 801546c:	f000 fdda 	bl	8016024 <div>
 8015470:	9a01      	ldr	r2, [sp, #4]
 8015472:	6963      	ldr	r3, [r4, #20]
 8015474:	9900      	ldr	r1, [sp, #0]
 8015476:	2a00      	cmp	r2, #0
 8015478:	440b      	add	r3, r1
 801547a:	6163      	str	r3, [r4, #20]
 801547c:	bfbb      	ittet	lt
 801547e:	320c      	addlt	r2, #12
 8015480:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015484:	6122      	strge	r2, [r4, #16]
 8015486:	6122      	strlt	r2, [r4, #16]
 8015488:	bfb8      	it	lt
 801548a:	6163      	strlt	r3, [r4, #20]
 801548c:	6963      	ldr	r3, [r4, #20]
 801548e:	079a      	lsls	r2, r3, #30
 8015490:	d11c      	bne.n	80154cc <validate_structure+0xec>
 8015492:	2164      	movs	r1, #100	@ 0x64
 8015494:	fb93 f2f1 	sdiv	r2, r3, r1
 8015498:	fb01 3212 	mls	r2, r1, r2, r3
 801549c:	b9c2      	cbnz	r2, 80154d0 <validate_structure+0xf0>
 801549e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80154a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80154a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80154aa:	fb02 3311 	mls	r3, r2, r1, r3
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	bf0c      	ite	eq
 80154b2:	231d      	moveq	r3, #29
 80154b4:	231c      	movne	r3, #28
 80154b6:	68e2      	ldr	r2, [r4, #12]
 80154b8:	2a00      	cmp	r2, #0
 80154ba:	dc0b      	bgt.n	80154d4 <validate_structure+0xf4>
 80154bc:	4d31      	ldr	r5, [pc, #196]	@ (8015584 <validate_structure+0x1a4>)
 80154be:	200b      	movs	r0, #11
 80154c0:	2164      	movs	r1, #100	@ 0x64
 80154c2:	68e6      	ldr	r6, [r4, #12]
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	dd30      	ble.n	801552a <validate_structure+0x14a>
 80154c8:	b003      	add	sp, #12
 80154ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154cc:	231c      	movs	r3, #28
 80154ce:	e7f2      	b.n	80154b6 <validate_structure+0xd6>
 80154d0:	231d      	movs	r3, #29
 80154d2:	e7f0      	b.n	80154b6 <validate_structure+0xd6>
 80154d4:	4d2b      	ldr	r5, [pc, #172]	@ (8015584 <validate_structure+0x1a4>)
 80154d6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80154da:	2a01      	cmp	r2, #1
 80154dc:	bf14      	ite	ne
 80154de:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80154e2:	4618      	moveq	r0, r3
 80154e4:	4281      	cmp	r1, r0
 80154e6:	ddef      	ble.n	80154c8 <validate_structure+0xe8>
 80154e8:	3201      	adds	r2, #1
 80154ea:	1a09      	subs	r1, r1, r0
 80154ec:	2a0c      	cmp	r2, #12
 80154ee:	60e1      	str	r1, [r4, #12]
 80154f0:	6122      	str	r2, [r4, #16]
 80154f2:	d1f0      	bne.n	80154d6 <validate_structure+0xf6>
 80154f4:	6963      	ldr	r3, [r4, #20]
 80154f6:	2100      	movs	r1, #0
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	6121      	str	r1, [r4, #16]
 80154fc:	0791      	lsls	r1, r2, #30
 80154fe:	6162      	str	r2, [r4, #20]
 8015500:	d13c      	bne.n	801557c <validate_structure+0x19c>
 8015502:	2164      	movs	r1, #100	@ 0x64
 8015504:	fb92 f0f1 	sdiv	r0, r2, r1
 8015508:	fb01 2210 	mls	r2, r1, r0, r2
 801550c:	2a00      	cmp	r2, #0
 801550e:	d137      	bne.n	8015580 <validate_structure+0x1a0>
 8015510:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8015514:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015518:	fb93 f1f2 	sdiv	r1, r3, r2
 801551c:	fb02 3311 	mls	r3, r2, r1, r3
 8015520:	2b00      	cmp	r3, #0
 8015522:	bf0c      	ite	eq
 8015524:	231d      	moveq	r3, #29
 8015526:	231c      	movne	r3, #28
 8015528:	e7d5      	b.n	80154d6 <validate_structure+0xf6>
 801552a:	6922      	ldr	r2, [r4, #16]
 801552c:	3a01      	subs	r2, #1
 801552e:	6122      	str	r2, [r4, #16]
 8015530:	3201      	adds	r2, #1
 8015532:	d116      	bne.n	8015562 <validate_structure+0x182>
 8015534:	6963      	ldr	r3, [r4, #20]
 8015536:	1e5a      	subs	r2, r3, #1
 8015538:	0797      	lsls	r7, r2, #30
 801553a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801553e:	d119      	bne.n	8015574 <validate_structure+0x194>
 8015540:	fb92 f7f1 	sdiv	r7, r2, r1
 8015544:	fb01 2217 	mls	r2, r1, r7, r2
 8015548:	b9b2      	cbnz	r2, 8015578 <validate_structure+0x198>
 801554a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801554e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015552:	fb93 f7f2 	sdiv	r7, r3, r2
 8015556:	fb02 3317 	mls	r3, r2, r7, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	bf0c      	ite	eq
 801555e:	231d      	moveq	r3, #29
 8015560:	231c      	movne	r3, #28
 8015562:	6922      	ldr	r2, [r4, #16]
 8015564:	2a01      	cmp	r2, #1
 8015566:	bf14      	ite	ne
 8015568:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 801556c:	461a      	moveq	r2, r3
 801556e:	4432      	add	r2, r6
 8015570:	60e2      	str	r2, [r4, #12]
 8015572:	e7a6      	b.n	80154c2 <validate_structure+0xe2>
 8015574:	231c      	movs	r3, #28
 8015576:	e7f4      	b.n	8015562 <validate_structure+0x182>
 8015578:	231d      	movs	r3, #29
 801557a:	e7f2      	b.n	8015562 <validate_structure+0x182>
 801557c:	231c      	movs	r3, #28
 801557e:	e7aa      	b.n	80154d6 <validate_structure+0xf6>
 8015580:	231d      	movs	r3, #29
 8015582:	e7a8      	b.n	80154d6 <validate_structure+0xf6>
 8015584:	0801ab1c 	.word	0x0801ab1c

08015588 <mktime>:
 8015588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558c:	b085      	sub	sp, #20
 801558e:	4607      	mov	r7, r0
 8015590:	f002 fb58 	bl	8017c44 <__gettzinfo>
 8015594:	4681      	mov	r9, r0
 8015596:	4638      	mov	r0, r7
 8015598:	f7ff ff22 	bl	80153e0 <validate_structure>
 801559c:	e9d7 4300 	ldrd	r4, r3, [r7]
 80155a0:	223c      	movs	r2, #60	@ 0x3c
 80155a2:	fb02 4403 	mla	r4, r2, r3, r4
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	697d      	ldr	r5, [r7, #20]
 80155aa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80155ae:	fb02 4403 	mla	r4, r2, r3, r4
 80155b2:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 80155b6:	4ac3      	ldr	r2, [pc, #780]	@ (80158c4 <mktime+0x33c>)
 80155b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80155bc:	3e01      	subs	r6, #1
 80155be:	2b01      	cmp	r3, #1
 80155c0:	4416      	add	r6, r2
 80155c2:	dd11      	ble.n	80155e8 <mktime+0x60>
 80155c4:	07a9      	lsls	r1, r5, #30
 80155c6:	d10f      	bne.n	80155e8 <mktime+0x60>
 80155c8:	2264      	movs	r2, #100	@ 0x64
 80155ca:	fb95 f3f2 	sdiv	r3, r5, r2
 80155ce:	fb02 5313 	mls	r3, r2, r3, r5
 80155d2:	b943      	cbnz	r3, 80155e6 <mktime+0x5e>
 80155d4:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80155d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80155dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80155e0:	fb02 3311 	mls	r3, r2, r1, r3
 80155e4:	b903      	cbnz	r3, 80155e8 <mktime+0x60>
 80155e6:	3601      	adds	r6, #1
 80155e8:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80155ec:	3310      	adds	r3, #16
 80155ee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80155f2:	4293      	cmp	r3, r2
 80155f4:	61fe      	str	r6, [r7, #28]
 80155f6:	f200 8170 	bhi.w	80158da <mktime+0x352>
 80155fa:	2d46      	cmp	r5, #70	@ 0x46
 80155fc:	f340 80b6 	ble.w	801576c <mktime+0x1e4>
 8015600:	2346      	movs	r3, #70	@ 0x46
 8015602:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8015606:	2164      	movs	r1, #100	@ 0x64
 8015608:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801560c:	079a      	lsls	r2, r3, #30
 801560e:	f040 80a7 	bne.w	8015760 <mktime+0x1d8>
 8015612:	fb93 f2f1 	sdiv	r2, r3, r1
 8015616:	fb01 3212 	mls	r2, r1, r2, r3
 801561a:	2a00      	cmp	r2, #0
 801561c:	f040 80a3 	bne.w	8015766 <mktime+0x1de>
 8015620:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8015624:	fb92 fef0 	sdiv	lr, r2, r0
 8015628:	fb00 221e 	mls	r2, r0, lr, r2
 801562c:	2a00      	cmp	r2, #0
 801562e:	bf0c      	ite	eq
 8015630:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8015634:	4662      	movne	r2, ip
 8015636:	3301      	adds	r3, #1
 8015638:	429d      	cmp	r5, r3
 801563a:	4416      	add	r6, r2
 801563c:	d1e6      	bne.n	801560c <mktime+0x84>
 801563e:	4ba2      	ldr	r3, [pc, #648]	@ (80158c8 <mktime+0x340>)
 8015640:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8015644:	fbc6 4803 	smlal	r4, r8, r6, r3
 8015648:	f000 fa0a 	bl	8015a60 <__tz_lock>
 801564c:	f000 fa14 	bl	8015a78 <_tzset_unlocked>
 8015650:	4b9e      	ldr	r3, [pc, #632]	@ (80158cc <mktime+0x344>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	f000 8147 	beq.w	80158e8 <mktime+0x360>
 801565a:	f8d7 a020 	ldr.w	sl, [r7, #32]
 801565e:	6978      	ldr	r0, [r7, #20]
 8015660:	4653      	mov	r3, sl
 8015662:	2b01      	cmp	r3, #1
 8015664:	bfa8      	it	ge
 8015666:	2301      	movge	r3, #1
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801566e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8015672:	4283      	cmp	r3, r0
 8015674:	f040 80bd 	bne.w	80157f2 <mktime+0x26a>
 8015678:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 801567c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8015680:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8015684:	1a13      	subs	r3, r2, r0
 8015686:	9303      	str	r3, [sp, #12]
 8015688:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 801568c:	9302      	str	r3, [sp, #8]
 801568e:	9a02      	ldr	r2, [sp, #8]
 8015690:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8015694:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8015698:	ebb2 0e03 	subs.w	lr, r2, r3
 801569c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80156a0:	4574      	cmp	r4, lr
 80156a2:	eb78 0201 	sbcs.w	r2, r8, r1
 80156a6:	f280 80c7 	bge.w	8015838 <mktime+0x2b0>
 80156aa:	f8d9 2000 	ldr.w	r2, [r9]
 80156ae:	2a00      	cmp	r2, #0
 80156b0:	f000 80d0 	beq.w	8015854 <mktime+0x2cc>
 80156b4:	9a03      	ldr	r2, [sp, #12]
 80156b6:	4294      	cmp	r4, r2
 80156b8:	eb78 020b 	sbcs.w	r2, r8, fp
 80156bc:	f2c0 8111 	blt.w	80158e2 <mktime+0x35a>
 80156c0:	4574      	cmp	r4, lr
 80156c2:	eb78 0101 	sbcs.w	r1, r8, r1
 80156c6:	bfb4      	ite	lt
 80156c8:	f04f 0b01 	movlt.w	fp, #1
 80156cc:	f04f 0b00 	movge.w	fp, #0
 80156d0:	f1ba 0f00 	cmp.w	sl, #0
 80156d4:	f2c0 8094 	blt.w	8015800 <mktime+0x278>
 80156d8:	9a01      	ldr	r2, [sp, #4]
 80156da:	ea82 0a0b 	eor.w	sl, r2, fp
 80156de:	f1ba 0f01 	cmp.w	sl, #1
 80156e2:	f040 808d 	bne.w	8015800 <mktime+0x278>
 80156e6:	f1bb 0f00 	cmp.w	fp, #0
 80156ea:	f000 80c2 	beq.w	8015872 <mktime+0x2ea>
 80156ee:	1a1b      	subs	r3, r3, r0
 80156f0:	683a      	ldr	r2, [r7, #0]
 80156f2:	441a      	add	r2, r3
 80156f4:	191c      	adds	r4, r3, r4
 80156f6:	603a      	str	r2, [r7, #0]
 80156f8:	4638      	mov	r0, r7
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	9201      	str	r2, [sp, #4]
 80156fe:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8015702:	f7ff fe6d 	bl	80153e0 <validate_structure>
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	9a01      	ldr	r2, [sp, #4]
 801570a:	1a9b      	subs	r3, r3, r2
 801570c:	d078      	beq.n	8015800 <mktime+0x278>
 801570e:	2b01      	cmp	r3, #1
 8015710:	f300 80b1 	bgt.w	8015876 <mktime+0x2ee>
 8015714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015718:	bfa8      	it	ge
 801571a:	469a      	movge	sl, r3
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	eb1a 0303 	adds.w	r3, sl, r3
 8015722:	4456      	add	r6, sl
 8015724:	f140 80b0 	bpl.w	8015888 <mktime+0x300>
 8015728:	1e6b      	subs	r3, r5, #1
 801572a:	0799      	lsls	r1, r3, #30
 801572c:	f040 80a6 	bne.w	801587c <mktime+0x2f4>
 8015730:	2264      	movs	r2, #100	@ 0x64
 8015732:	fb93 f1f2 	sdiv	r1, r3, r2
 8015736:	fb02 3311 	mls	r3, r2, r1, r3
 801573a:	2b00      	cmp	r3, #0
 801573c:	f040 80a1 	bne.w	8015882 <mktime+0x2fa>
 8015740:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015744:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8015748:	fb95 f2f3 	sdiv	r2, r5, r3
 801574c:	fb03 5512 	mls	r5, r3, r2, r5
 8015750:	2d00      	cmp	r5, #0
 8015752:	f240 136d 	movw	r3, #365	@ 0x16d
 8015756:	bf18      	it	ne
 8015758:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801575c:	61fb      	str	r3, [r7, #28]
 801575e:	e04f      	b.n	8015800 <mktime+0x278>
 8015760:	f240 126d 	movw	r2, #365	@ 0x16d
 8015764:	e767      	b.n	8015636 <mktime+0xae>
 8015766:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801576a:	e764      	b.n	8015636 <mktime+0xae>
 801576c:	f43f af67 	beq.w	801563e <mktime+0xb6>
 8015770:	2345      	movs	r3, #69	@ 0x45
 8015772:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8015776:	2164      	movs	r1, #100	@ 0x64
 8015778:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801577c:	e012      	b.n	80157a4 <mktime+0x21c>
 801577e:	bb62      	cbnz	r2, 80157da <mktime+0x252>
 8015780:	fb93 f2f1 	sdiv	r2, r3, r1
 8015784:	fb01 3212 	mls	r2, r1, r2, r3
 8015788:	bb52      	cbnz	r2, 80157e0 <mktime+0x258>
 801578a:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801578e:	fb92 fef0 	sdiv	lr, r2, r0
 8015792:	fb00 221e 	mls	r2, r0, lr, r2
 8015796:	2a00      	cmp	r2, #0
 8015798:	bf0c      	ite	eq
 801579a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801579e:	4662      	movne	r2, ip
 80157a0:	1ab6      	subs	r6, r6, r2
 80157a2:	3b01      	subs	r3, #1
 80157a4:	429d      	cmp	r5, r3
 80157a6:	f003 0203 	and.w	r2, r3, #3
 80157aa:	dbe8      	blt.n	801577e <mktime+0x1f6>
 80157ac:	b9da      	cbnz	r2, 80157e6 <mktime+0x25e>
 80157ae:	2264      	movs	r2, #100	@ 0x64
 80157b0:	fb95 f3f2 	sdiv	r3, r5, r2
 80157b4:	fb02 5313 	mls	r3, r2, r3, r5
 80157b8:	b9c3      	cbnz	r3, 80157ec <mktime+0x264>
 80157ba:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80157be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80157c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80157c6:	fb02 3311 	mls	r3, r2, r1, r3
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f240 136d 	movw	r3, #365	@ 0x16d
 80157d0:	bf08      	it	eq
 80157d2:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80157d6:	1af6      	subs	r6, r6, r3
 80157d8:	e731      	b.n	801563e <mktime+0xb6>
 80157da:	f240 126d 	movw	r2, #365	@ 0x16d
 80157de:	e7df      	b.n	80157a0 <mktime+0x218>
 80157e0:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80157e4:	e7dc      	b.n	80157a0 <mktime+0x218>
 80157e6:	f240 136d 	movw	r3, #365	@ 0x16d
 80157ea:	e7f4      	b.n	80157d6 <mktime+0x24e>
 80157ec:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80157f0:	e7f1      	b.n	80157d6 <mktime+0x24e>
 80157f2:	f000 f881 	bl	80158f8 <__tzcalc_limits>
 80157f6:	2800      	cmp	r0, #0
 80157f8:	f47f af3e 	bne.w	8015678 <mktime+0xf0>
 80157fc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015800:	f1bb 0f01 	cmp.w	fp, #1
 8015804:	d172      	bne.n	80158ec <mktime+0x364>
 8015806:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801580a:	191c      	adds	r4, r3, r4
 801580c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8015810:	f04f 0b01 	mov.w	fp, #1
 8015814:	f000 f92a 	bl	8015a6c <__tz_unlock>
 8015818:	3604      	adds	r6, #4
 801581a:	2307      	movs	r3, #7
 801581c:	fb96 f3f3 	sdiv	r3, r6, r3
 8015820:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015824:	1af6      	subs	r6, r6, r3
 8015826:	d456      	bmi.n	80158d6 <mktime+0x34e>
 8015828:	f8c7 b020 	str.w	fp, [r7, #32]
 801582c:	61be      	str	r6, [r7, #24]
 801582e:	4620      	mov	r0, r4
 8015830:	4641      	mov	r1, r8
 8015832:	b005      	add	sp, #20
 8015834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015838:	9a02      	ldr	r2, [sp, #8]
 801583a:	1a12      	subs	r2, r2, r0
 801583c:	9202      	str	r2, [sp, #8]
 801583e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8015842:	eb6c 0c02 	sbc.w	ip, ip, r2
 8015846:	9a02      	ldr	r2, [sp, #8]
 8015848:	4294      	cmp	r4, r2
 801584a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801584e:	f6bf af2c 	bge.w	80156aa <mktime+0x122>
 8015852:	e7d3      	b.n	80157fc <mktime+0x274>
 8015854:	9a03      	ldr	r2, [sp, #12]
 8015856:	4294      	cmp	r4, r2
 8015858:	eb78 020b 	sbcs.w	r2, r8, fp
 801585c:	f6ff af30 	blt.w	80156c0 <mktime+0x138>
 8015860:	f1ba 0f00 	cmp.w	sl, #0
 8015864:	dbcf      	blt.n	8015806 <mktime+0x27e>
 8015866:	f04f 0b01 	mov.w	fp, #1
 801586a:	e735      	b.n	80156d8 <mktime+0x150>
 801586c:	f04f 0b00 	mov.w	fp, #0
 8015870:	e732      	b.n	80156d8 <mktime+0x150>
 8015872:	1ac3      	subs	r3, r0, r3
 8015874:	e73c      	b.n	80156f0 <mktime+0x168>
 8015876:	f04f 3aff 	mov.w	sl, #4294967295
 801587a:	e74f      	b.n	801571c <mktime+0x194>
 801587c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8015880:	e76c      	b.n	801575c <mktime+0x1d4>
 8015882:	f240 136d 	movw	r3, #365	@ 0x16d
 8015886:	e769      	b.n	801575c <mktime+0x1d4>
 8015888:	07aa      	lsls	r2, r5, #30
 801588a:	d117      	bne.n	80158bc <mktime+0x334>
 801588c:	2164      	movs	r1, #100	@ 0x64
 801588e:	fb95 f2f1 	sdiv	r2, r5, r1
 8015892:	fb01 5212 	mls	r2, r1, r2, r5
 8015896:	b9da      	cbnz	r2, 80158d0 <mktime+0x348>
 8015898:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801589c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80158a0:	fb95 f1f2 	sdiv	r1, r5, r2
 80158a4:	fb02 5511 	mls	r5, r2, r1, r5
 80158a8:	2d00      	cmp	r5, #0
 80158aa:	f240 126d 	movw	r2, #365	@ 0x16d
 80158ae:	bf08      	it	eq
 80158b0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80158b4:	4293      	cmp	r3, r2
 80158b6:	bfa8      	it	ge
 80158b8:	1a9b      	subge	r3, r3, r2
 80158ba:	e74f      	b.n	801575c <mktime+0x1d4>
 80158bc:	f240 126d 	movw	r2, #365	@ 0x16d
 80158c0:	e7f8      	b.n	80158b4 <mktime+0x32c>
 80158c2:	bf00      	nop
 80158c4:	0801aaec 	.word	0x0801aaec
 80158c8:	00015180 	.word	0x00015180
 80158cc:	2000a970 	.word	0x2000a970
 80158d0:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80158d4:	e7ee      	b.n	80158b4 <mktime+0x32c>
 80158d6:	3607      	adds	r6, #7
 80158d8:	e7a6      	b.n	8015828 <mktime+0x2a0>
 80158da:	f04f 34ff 	mov.w	r4, #4294967295
 80158de:	46a0      	mov	r8, r4
 80158e0:	e7a5      	b.n	801582e <mktime+0x2a6>
 80158e2:	f1ba 0f00 	cmp.w	sl, #0
 80158e6:	dac1      	bge.n	801586c <mktime+0x2e4>
 80158e8:	f04f 0b00 	mov.w	fp, #0
 80158ec:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80158f0:	191c      	adds	r4, r3, r4
 80158f2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80158f6:	e78d      	b.n	8015814 <mktime+0x28c>

080158f8 <__tzcalc_limits>:
 80158f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158fc:	4604      	mov	r4, r0
 80158fe:	f002 f9a1 	bl	8017c44 <__gettzinfo>
 8015902:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8015906:	429c      	cmp	r4, r3
 8015908:	f340 80a3 	ble.w	8015a52 <__tzcalc_limits+0x15a>
 801590c:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8015910:	1865      	adds	r5, r4, r1
 8015912:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8015916:	f240 126d 	movw	r2, #365	@ 0x16d
 801591a:	10ad      	asrs	r5, r5, #2
 801591c:	fb02 5503 	mla	r5, r2, r3, r5
 8015920:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8015924:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8015928:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801592c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015930:	441d      	add	r5, r3
 8015932:	19a3      	adds	r3, r4, r6
 8015934:	4e48      	ldr	r6, [pc, #288]	@ (8015a58 <__tzcalc_limits+0x160>)
 8015936:	6044      	str	r4, [r0, #4]
 8015938:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801593c:	4601      	mov	r1, r0
 801593e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015942:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8015946:	441d      	add	r5, r3
 8015948:	7a0b      	ldrb	r3, [r1, #8]
 801594a:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801594e:	2b4a      	cmp	r3, #74	@ 0x4a
 8015950:	d138      	bne.n	80159c4 <__tzcalc_limits+0xcc>
 8015952:	07a2      	lsls	r2, r4, #30
 8015954:	eb05 030c 	add.w	r3, r5, ip
 8015958:	d106      	bne.n	8015968 <__tzcalc_limits+0x70>
 801595a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801595e:	fb94 f2fe 	sdiv	r2, r4, lr
 8015962:	fb0e 4212 	mls	r2, lr, r2, r4
 8015966:	b932      	cbnz	r2, 8015976 <__tzcalc_limits+0x7e>
 8015968:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801596c:	fb94 f2fe 	sdiv	r2, r4, lr
 8015970:	fb0e 4212 	mls	r2, lr, r2, r4
 8015974:	bb1a      	cbnz	r2, 80159be <__tzcalc_limits+0xc6>
 8015976:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 801597a:	bfd4      	ite	le
 801597c:	f04f 0c00 	movle.w	ip, #0
 8015980:	f04f 0c01 	movgt.w	ip, #1
 8015984:	4463      	add	r3, ip
 8015986:	3b01      	subs	r3, #1
 8015988:	698a      	ldr	r2, [r1, #24]
 801598a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 801598e:	fbc3 2c06 	smlal	r2, ip, r3, r6
 8015992:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8015994:	18d2      	adds	r2, r2, r3
 8015996:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 801599a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801599e:	3128      	adds	r1, #40	@ 0x28
 80159a0:	428f      	cmp	r7, r1
 80159a2:	d1d1      	bne.n	8015948 <__tzcalc_limits+0x50>
 80159a4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80159a8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80159ac:	428c      	cmp	r4, r1
 80159ae:	4193      	sbcs	r3, r2
 80159b0:	bfb4      	ite	lt
 80159b2:	2301      	movlt	r3, #1
 80159b4:	2300      	movge	r3, #0
 80159b6:	6003      	str	r3, [r0, #0]
 80159b8:	2001      	movs	r0, #1
 80159ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159be:	f04f 0c00 	mov.w	ip, #0
 80159c2:	e7df      	b.n	8015984 <__tzcalc_limits+0x8c>
 80159c4:	2b44      	cmp	r3, #68	@ 0x44
 80159c6:	d102      	bne.n	80159ce <__tzcalc_limits+0xd6>
 80159c8:	eb05 030c 	add.w	r3, r5, ip
 80159cc:	e7dc      	b.n	8015988 <__tzcalc_limits+0x90>
 80159ce:	07a3      	lsls	r3, r4, #30
 80159d0:	d105      	bne.n	80159de <__tzcalc_limits+0xe6>
 80159d2:	2264      	movs	r2, #100	@ 0x64
 80159d4:	fb94 f3f2 	sdiv	r3, r4, r2
 80159d8:	fb02 4313 	mls	r3, r2, r3, r4
 80159dc:	bb93      	cbnz	r3, 8015a44 <__tzcalc_limits+0x14c>
 80159de:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80159e2:	fb94 f3f2 	sdiv	r3, r4, r2
 80159e6:	fb02 4313 	mls	r3, r2, r3, r4
 80159ea:	fab3 f383 	clz	r3, r3
 80159ee:	095b      	lsrs	r3, r3, #5
 80159f0:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8015a5c <__tzcalc_limits+0x164>
 80159f4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80159f8:	425b      	negs	r3, r3
 80159fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80159fe:	462a      	mov	r2, r5
 8015a00:	f04f 0800 	mov.w	r8, #0
 8015a04:	4473      	add	r3, lr
 8015a06:	f108 0801 	add.w	r8, r8, #1
 8015a0a:	45c1      	cmp	r9, r8
 8015a0c:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8015a10:	dc1a      	bgt.n	8015a48 <__tzcalc_limits+0x150>
 8015a12:	f102 0804 	add.w	r8, r2, #4
 8015a16:	2307      	movs	r3, #7
 8015a18:	fb98 f3f3 	sdiv	r3, r8, r3
 8015a1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015a20:	eba8 0303 	sub.w	r3, r8, r3
 8015a24:	ebbc 0c03 	subs.w	ip, ip, r3
 8015a28:	690b      	ldr	r3, [r1, #16]
 8015a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a2e:	bf48      	it	mi
 8015a30:	f10c 0c07 	addmi.w	ip, ip, #7
 8015a34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015a38:	449c      	add	ip, r3
 8015a3a:	45f4      	cmp	ip, lr
 8015a3c:	da06      	bge.n	8015a4c <__tzcalc_limits+0x154>
 8015a3e:	eb02 030c 	add.w	r3, r2, ip
 8015a42:	e7a1      	b.n	8015988 <__tzcalc_limits+0x90>
 8015a44:	2301      	movs	r3, #1
 8015a46:	e7d3      	b.n	80159f0 <__tzcalc_limits+0xf8>
 8015a48:	4472      	add	r2, lr
 8015a4a:	e7dc      	b.n	8015a06 <__tzcalc_limits+0x10e>
 8015a4c:	f1ac 0c07 	sub.w	ip, ip, #7
 8015a50:	e7f3      	b.n	8015a3a <__tzcalc_limits+0x142>
 8015a52:	2000      	movs	r0, #0
 8015a54:	e7b1      	b.n	80159ba <__tzcalc_limits+0xc2>
 8015a56:	bf00      	nop
 8015a58:	00015180 	.word	0x00015180
 8015a5c:	0801ab48 	.word	0x0801ab48

08015a60 <__tz_lock>:
 8015a60:	4801      	ldr	r0, [pc, #4]	@ (8015a68 <__tz_lock+0x8>)
 8015a62:	f000 baa6 	b.w	8015fb2 <__retarget_lock_acquire>
 8015a66:	bf00      	nop
 8015a68:	2000a978 	.word	0x2000a978

08015a6c <__tz_unlock>:
 8015a6c:	4801      	ldr	r0, [pc, #4]	@ (8015a74 <__tz_unlock+0x8>)
 8015a6e:	f000 baa2 	b.w	8015fb6 <__retarget_lock_release>
 8015a72:	bf00      	nop
 8015a74:	2000a978 	.word	0x2000a978

08015a78 <_tzset_unlocked>:
 8015a78:	4b01      	ldr	r3, [pc, #4]	@ (8015a80 <_tzset_unlocked+0x8>)
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	f000 b802 	b.w	8015a84 <_tzset_unlocked_r>
 8015a80:	20000038 	.word	0x20000038

08015a84 <_tzset_unlocked_r>:
 8015a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a88:	b08d      	sub	sp, #52	@ 0x34
 8015a8a:	4607      	mov	r7, r0
 8015a8c:	f002 f8da 	bl	8017c44 <__gettzinfo>
 8015a90:	49bc      	ldr	r1, [pc, #752]	@ (8015d84 <_tzset_unlocked_r+0x300>)
 8015a92:	4dbd      	ldr	r5, [pc, #756]	@ (8015d88 <_tzset_unlocked_r+0x304>)
 8015a94:	4604      	mov	r4, r0
 8015a96:	4638      	mov	r0, r7
 8015a98:	f001 f9ac 	bl	8016df4 <_getenv_r>
 8015a9c:	4606      	mov	r6, r0
 8015a9e:	bb10      	cbnz	r0, 8015ae6 <_tzset_unlocked_r+0x62>
 8015aa0:	4bba      	ldr	r3, [pc, #744]	@ (8015d8c <_tzset_unlocked_r+0x308>)
 8015aa2:	4abb      	ldr	r2, [pc, #748]	@ (8015d90 <_tzset_unlocked_r+0x30c>)
 8015aa4:	6018      	str	r0, [r3, #0]
 8015aa6:	4bbb      	ldr	r3, [pc, #748]	@ (8015d94 <_tzset_unlocked_r+0x310>)
 8015aa8:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015aaa:	6018      	str	r0, [r3, #0]
 8015aac:	4bba      	ldr	r3, [pc, #744]	@ (8015d98 <_tzset_unlocked_r+0x314>)
 8015aae:	6520      	str	r0, [r4, #80]	@ 0x50
 8015ab0:	e9c3 2200 	strd	r2, r2, [r3]
 8015ab4:	214a      	movs	r1, #74	@ 0x4a
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2300      	movs	r3, #0
 8015aba:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8015abe:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8015ac2:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8015ac6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8015aca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015ace:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8015ad2:	6828      	ldr	r0, [r5, #0]
 8015ad4:	7221      	strb	r1, [r4, #8]
 8015ad6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8015ada:	f001 f99b 	bl	8016e14 <free>
 8015ade:	602e      	str	r6, [r5, #0]
 8015ae0:	b00d      	add	sp, #52	@ 0x34
 8015ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae6:	6829      	ldr	r1, [r5, #0]
 8015ae8:	2900      	cmp	r1, #0
 8015aea:	f040 808e 	bne.w	8015c0a <_tzset_unlocked_r+0x186>
 8015aee:	6828      	ldr	r0, [r5, #0]
 8015af0:	f001 f990 	bl	8016e14 <free>
 8015af4:	4630      	mov	r0, r6
 8015af6:	f7ea fba3 	bl	8000240 <strlen>
 8015afa:	1c41      	adds	r1, r0, #1
 8015afc:	4638      	mov	r0, r7
 8015afe:	f001 f9b3 	bl	8016e68 <_malloc_r>
 8015b02:	6028      	str	r0, [r5, #0]
 8015b04:	2800      	cmp	r0, #0
 8015b06:	f040 8086 	bne.w	8015c16 <_tzset_unlocked_r+0x192>
 8015b0a:	4aa2      	ldr	r2, [pc, #648]	@ (8015d94 <_tzset_unlocked_r+0x310>)
 8015b0c:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8015d98 <_tzset_unlocked_r+0x314>
 8015b10:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8015d8c <_tzset_unlocked_r+0x308>
 8015b14:	2300      	movs	r3, #0
 8015b16:	6013      	str	r3, [r2, #0]
 8015b18:	4aa0      	ldr	r2, [pc, #640]	@ (8015d9c <_tzset_unlocked_r+0x318>)
 8015b1a:	f8ca 3000 	str.w	r3, [sl]
 8015b1e:	2000      	movs	r0, #0
 8015b20:	2100      	movs	r1, #0
 8015b22:	e9c8 2200 	strd	r2, r2, [r8]
 8015b26:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8015b2a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8015b2e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8015b32:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015b36:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8015b3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8015b3e:	224a      	movs	r2, #74	@ 0x4a
 8015b40:	7222      	strb	r2, [r4, #8]
 8015b42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015b44:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8015b48:	6523      	str	r3, [r4, #80]	@ 0x50
 8015b4a:	7833      	ldrb	r3, [r6, #0]
 8015b4c:	2b3a      	cmp	r3, #58	@ 0x3a
 8015b4e:	bf08      	it	eq
 8015b50:	3601      	addeq	r6, #1
 8015b52:	7833      	ldrb	r3, [r6, #0]
 8015b54:	2b3c      	cmp	r3, #60	@ 0x3c
 8015b56:	d162      	bne.n	8015c1e <_tzset_unlocked_r+0x19a>
 8015b58:	1c75      	adds	r5, r6, #1
 8015b5a:	4a91      	ldr	r2, [pc, #580]	@ (8015da0 <_tzset_unlocked_r+0x31c>)
 8015b5c:	4991      	ldr	r1, [pc, #580]	@ (8015da4 <_tzset_unlocked_r+0x320>)
 8015b5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b60:	4628      	mov	r0, r5
 8015b62:	f002 f817 	bl	8017b94 <siscanf>
 8015b66:	2800      	cmp	r0, #0
 8015b68:	ddba      	ble.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b6c:	1eda      	subs	r2, r3, #3
 8015b6e:	2a07      	cmp	r2, #7
 8015b70:	d8b6      	bhi.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015b72:	5ceb      	ldrb	r3, [r5, r3]
 8015b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b76:	d1b3      	bne.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015b78:	3602      	adds	r6, #2
 8015b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b7c:	18f5      	adds	r5, r6, r3
 8015b7e:	5cf3      	ldrb	r3, [r6, r3]
 8015b80:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b82:	d15a      	bne.n	8015c3a <_tzset_unlocked_r+0x1b6>
 8015b84:	3501      	adds	r5, #1
 8015b86:	f04f 39ff 	mov.w	r9, #4294967295
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015b90:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015b94:	af08      	add	r7, sp, #32
 8015b96:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b98:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8015b9c:	9303      	str	r3, [sp, #12]
 8015b9e:	f10d 031e 	add.w	r3, sp, #30
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	4980      	ldr	r1, [pc, #512]	@ (8015da8 <_tzset_unlocked_r+0x324>)
 8015ba6:	ab0a      	add	r3, sp, #40	@ 0x28
 8015ba8:	aa07      	add	r2, sp, #28
 8015baa:	4628      	mov	r0, r5
 8015bac:	f001 fff2 	bl	8017b94 <siscanf>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	dd95      	ble.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015bb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015bb8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8015bbc:	223c      	movs	r2, #60	@ 0x3c
 8015bbe:	fb02 6603 	mla	r6, r2, r3, r6
 8015bc2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015bc6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8015bca:	fb02 6603 	mla	r6, r2, r3, r6
 8015bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bd0:	fb09 f606 	mul.w	r6, r9, r6
 8015bd4:	eb05 0903 	add.w	r9, r5, r3
 8015bd8:	5ceb      	ldrb	r3, [r5, r3]
 8015bda:	2b3c      	cmp	r3, #60	@ 0x3c
 8015bdc:	f040 80ee 	bne.w	8015dbc <_tzset_unlocked_r+0x338>
 8015be0:	f109 0501 	add.w	r5, r9, #1
 8015be4:	4a71      	ldr	r2, [pc, #452]	@ (8015dac <_tzset_unlocked_r+0x328>)
 8015be6:	496f      	ldr	r1, [pc, #444]	@ (8015da4 <_tzset_unlocked_r+0x320>)
 8015be8:	ab0a      	add	r3, sp, #40	@ 0x28
 8015bea:	4628      	mov	r0, r5
 8015bec:	f001 ffd2 	bl	8017b94 <siscanf>
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	dc28      	bgt.n	8015c46 <_tzset_unlocked_r+0x1c2>
 8015bf4:	f899 3001 	ldrb.w	r3, [r9, #1]
 8015bf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8015bfa:	d124      	bne.n	8015c46 <_tzset_unlocked_r+0x1c2>
 8015bfc:	4b68      	ldr	r3, [pc, #416]	@ (8015da0 <_tzset_unlocked_r+0x31c>)
 8015bfe:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015c00:	e9c8 3300 	strd	r3, r3, [r8]
 8015c04:	f8ca 6000 	str.w	r6, [sl]
 8015c08:	e76a      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c0a:	f7ea fab9 	bl	8000180 <strcmp>
 8015c0e:	2800      	cmp	r0, #0
 8015c10:	f47f af6d 	bne.w	8015aee <_tzset_unlocked_r+0x6a>
 8015c14:	e764      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c16:	4631      	mov	r1, r6
 8015c18:	f000 f9cf 	bl	8015fba <strcpy>
 8015c1c:	e775      	b.n	8015b0a <_tzset_unlocked_r+0x86>
 8015c1e:	4a60      	ldr	r2, [pc, #384]	@ (8015da0 <_tzset_unlocked_r+0x31c>)
 8015c20:	4963      	ldr	r1, [pc, #396]	@ (8015db0 <_tzset_unlocked_r+0x32c>)
 8015c22:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c24:	4630      	mov	r0, r6
 8015c26:	f001 ffb5 	bl	8017b94 <siscanf>
 8015c2a:	2800      	cmp	r0, #0
 8015c2c:	f77f af58 	ble.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c32:	3b03      	subs	r3, #3
 8015c34:	2b07      	cmp	r3, #7
 8015c36:	d9a0      	bls.n	8015b7a <_tzset_unlocked_r+0xf6>
 8015c38:	e752      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c3a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015c3c:	bf08      	it	eq
 8015c3e:	3501      	addeq	r5, #1
 8015c40:	f04f 0901 	mov.w	r9, #1
 8015c44:	e7a1      	b.n	8015b8a <_tzset_unlocked_r+0x106>
 8015c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c48:	1eda      	subs	r2, r3, #3
 8015c4a:	2a07      	cmp	r2, #7
 8015c4c:	f63f af48 	bhi.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c50:	5ceb      	ldrb	r3, [r5, r3]
 8015c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8015c54:	f47f af44 	bne.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015c58:	f109 0902 	add.w	r9, r9, #2
 8015c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c5e:	eb09 0503 	add.w	r5, r9, r3
 8015c62:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015c66:	2b2d      	cmp	r3, #45	@ 0x2d
 8015c68:	f040 80b7 	bne.w	8015dda <_tzset_unlocked_r+0x356>
 8015c6c:	3501      	adds	r5, #1
 8015c6e:	f04f 39ff 	mov.w	r9, #4294967295
 8015c72:	2300      	movs	r3, #0
 8015c74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015c7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c82:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c84:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8015c88:	9301      	str	r3, [sp, #4]
 8015c8a:	f10d 031e 	add.w	r3, sp, #30
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	4945      	ldr	r1, [pc, #276]	@ (8015da8 <_tzset_unlocked_r+0x324>)
 8015c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c94:	aa07      	add	r2, sp, #28
 8015c96:	4628      	mov	r0, r5
 8015c98:	f001 ff7c 	bl	8017b94 <siscanf>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	f300 80a2 	bgt.w	8015de6 <_tzset_unlocked_r+0x362>
 8015ca2:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8015ca6:	9304      	str	r3, [sp, #16]
 8015ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015caa:	4627      	mov	r7, r4
 8015cac:	441d      	add	r5, r3
 8015cae:	f04f 0b00 	mov.w	fp, #0
 8015cb2:	782b      	ldrb	r3, [r5, #0]
 8015cb4:	2b2c      	cmp	r3, #44	@ 0x2c
 8015cb6:	bf08      	it	eq
 8015cb8:	3501      	addeq	r5, #1
 8015cba:	f895 9000 	ldrb.w	r9, [r5]
 8015cbe:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8015cc2:	f040 80a3 	bne.w	8015e0c <_tzset_unlocked_r+0x388>
 8015cc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8015cc8:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8015ccc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015cd0:	aa09      	add	r2, sp, #36	@ 0x24
 8015cd2:	9200      	str	r2, [sp, #0]
 8015cd4:	4937      	ldr	r1, [pc, #220]	@ (8015db4 <_tzset_unlocked_r+0x330>)
 8015cd6:	9303      	str	r3, [sp, #12]
 8015cd8:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8015cdc:	4628      	mov	r0, r5
 8015cde:	f001 ff59 	bl	8017b94 <siscanf>
 8015ce2:	2803      	cmp	r0, #3
 8015ce4:	f47f aefc 	bne.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015ce8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8015cec:	1e4b      	subs	r3, r1, #1
 8015cee:	2b0b      	cmp	r3, #11
 8015cf0:	f63f aef6 	bhi.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015cf4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8015cf8:	1e53      	subs	r3, r2, #1
 8015cfa:	2b04      	cmp	r3, #4
 8015cfc:	f63f aef0 	bhi.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015d00:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015d04:	2b06      	cmp	r3, #6
 8015d06:	f63f aeeb 	bhi.w	8015ae0 <_tzset_unlocked_r+0x5c>
 8015d0a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8015d0e:	f887 9008 	strb.w	r9, [r7, #8]
 8015d12:	617b      	str	r3, [r7, #20]
 8015d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d16:	eb05 0903 	add.w	r9, r5, r3
 8015d1a:	2500      	movs	r5, #0
 8015d1c:	f04f 0302 	mov.w	r3, #2
 8015d20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015d24:	f8ad 501e 	strh.w	r5, [sp, #30]
 8015d28:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015d2c:	950a      	str	r5, [sp, #40]	@ 0x28
 8015d2e:	f899 3000 	ldrb.w	r3, [r9]
 8015d32:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d34:	f040 8096 	bne.w	8015e64 <_tzset_unlocked_r+0x3e0>
 8015d38:	ab0a      	add	r3, sp, #40	@ 0x28
 8015d3a:	aa08      	add	r2, sp, #32
 8015d3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015d40:	f10d 021e 	add.w	r2, sp, #30
 8015d44:	9200      	str	r2, [sp, #0]
 8015d46:	491c      	ldr	r1, [pc, #112]	@ (8015db8 <_tzset_unlocked_r+0x334>)
 8015d48:	9303      	str	r3, [sp, #12]
 8015d4a:	aa07      	add	r2, sp, #28
 8015d4c:	4648      	mov	r0, r9
 8015d4e:	f001 ff21 	bl	8017b94 <siscanf>
 8015d52:	42a8      	cmp	r0, r5
 8015d54:	f300 8086 	bgt.w	8015e64 <_tzset_unlocked_r+0x3e0>
 8015d58:	214a      	movs	r1, #74	@ 0x4a
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8015d62:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015d66:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015d6a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8015d6e:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8015d72:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8015d76:	7221      	strb	r1, [r4, #8]
 8015d78:	62a5      	str	r5, [r4, #40]	@ 0x28
 8015d7a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8015d7e:	6525      	str	r5, [r4, #80]	@ 0x50
 8015d80:	e6ae      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015d82:	bf00      	nop
 8015d84:	0801a95a 	.word	0x0801a95a
 8015d88:	2000a950 	.word	0x2000a950
 8015d8c:	2000a96c 	.word	0x2000a96c
 8015d90:	0801a95d 	.word	0x0801a95d
 8015d94:	2000a970 	.word	0x2000a970
 8015d98:	20000030 	.word	0x20000030
 8015d9c:	0801a9e3 	.word	0x0801a9e3
 8015da0:	2000a960 	.word	0x2000a960
 8015da4:	0801a961 	.word	0x0801a961
 8015da8:	0801a996 	.word	0x0801a996
 8015dac:	2000a954 	.word	0x2000a954
 8015db0:	0801a974 	.word	0x0801a974
 8015db4:	0801a982 	.word	0x0801a982
 8015db8:	0801a995 	.word	0x0801a995
 8015dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8015eb8 <_tzset_unlocked_r+0x434>)
 8015dbe:	493f      	ldr	r1, [pc, #252]	@ (8015ebc <_tzset_unlocked_r+0x438>)
 8015dc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8015dc2:	4648      	mov	r0, r9
 8015dc4:	f001 fee6 	bl	8017b94 <siscanf>
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	f77f af17 	ble.w	8015bfc <_tzset_unlocked_r+0x178>
 8015dce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dd0:	3b03      	subs	r3, #3
 8015dd2:	2b07      	cmp	r3, #7
 8015dd4:	f67f af42 	bls.w	8015c5c <_tzset_unlocked_r+0x1d8>
 8015dd8:	e682      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015dda:	2b2b      	cmp	r3, #43	@ 0x2b
 8015ddc:	bf08      	it	eq
 8015dde:	3501      	addeq	r5, #1
 8015de0:	f04f 0901 	mov.w	r9, #1
 8015de4:	e745      	b.n	8015c72 <_tzset_unlocked_r+0x1ee>
 8015de6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015dea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015dee:	213c      	movs	r1, #60	@ 0x3c
 8015df0:	fb01 3302 	mla	r3, r1, r2, r3
 8015df4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015df8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8015dfc:	fb01 3302 	mla	r3, r1, r2, r3
 8015e00:	fb09 f303 	mul.w	r3, r9, r3
 8015e04:	e74f      	b.n	8015ca6 <_tzset_unlocked_r+0x222>
 8015e06:	f04f 0b01 	mov.w	fp, #1
 8015e0a:	e752      	b.n	8015cb2 <_tzset_unlocked_r+0x22e>
 8015e0c:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8015e10:	bf06      	itte	eq
 8015e12:	3501      	addeq	r5, #1
 8015e14:	464b      	moveq	r3, r9
 8015e16:	2344      	movne	r3, #68	@ 0x44
 8015e18:	220a      	movs	r2, #10
 8015e1a:	a90b      	add	r1, sp, #44	@ 0x2c
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	9305      	str	r3, [sp, #20]
 8015e20:	f001 fc98 	bl	8017754 <strtoul>
 8015e24:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8015e28:	9b05      	ldr	r3, [sp, #20]
 8015e2a:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8015e2e:	45a9      	cmp	r9, r5
 8015e30:	d114      	bne.n	8015e5c <_tzset_unlocked_r+0x3d8>
 8015e32:	234d      	movs	r3, #77	@ 0x4d
 8015e34:	f1bb 0f00 	cmp.w	fp, #0
 8015e38:	d107      	bne.n	8015e4a <_tzset_unlocked_r+0x3c6>
 8015e3a:	7223      	strb	r3, [r4, #8]
 8015e3c:	2103      	movs	r1, #3
 8015e3e:	2302      	movs	r3, #2
 8015e40:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8015e44:	f8c4 b014 	str.w	fp, [r4, #20]
 8015e48:	e767      	b.n	8015d1a <_tzset_unlocked_r+0x296>
 8015e4a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8015e4e:	220b      	movs	r2, #11
 8015e50:	2301      	movs	r3, #1
 8015e52:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8015e56:	2300      	movs	r3, #0
 8015e58:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015e5a:	e75e      	b.n	8015d1a <_tzset_unlocked_r+0x296>
 8015e5c:	b280      	uxth	r0, r0
 8015e5e:	723b      	strb	r3, [r7, #8]
 8015e60:	6178      	str	r0, [r7, #20]
 8015e62:	e75a      	b.n	8015d1a <_tzset_unlocked_r+0x296>
 8015e64:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015e68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015e6c:	213c      	movs	r1, #60	@ 0x3c
 8015e6e:	fb01 3302 	mla	r3, r1, r2, r3
 8015e72:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015e76:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8015e7a:	fb01 3302 	mla	r3, r1, r2, r3
 8015e7e:	61bb      	str	r3, [r7, #24]
 8015e80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015e82:	3728      	adds	r7, #40	@ 0x28
 8015e84:	444d      	add	r5, r9
 8015e86:	f1bb 0f00 	cmp.w	fp, #0
 8015e8a:	d0bc      	beq.n	8015e06 <_tzset_unlocked_r+0x382>
 8015e8c:	9b04      	ldr	r3, [sp, #16]
 8015e8e:	6523      	str	r3, [r4, #80]	@ 0x50
 8015e90:	4b0b      	ldr	r3, [pc, #44]	@ (8015ec0 <_tzset_unlocked_r+0x43c>)
 8015e92:	f8c8 3000 	str.w	r3, [r8]
 8015e96:	6860      	ldr	r0, [r4, #4]
 8015e98:	4b07      	ldr	r3, [pc, #28]	@ (8015eb8 <_tzset_unlocked_r+0x434>)
 8015e9a:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015e9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8015ea0:	f7ff fd2a 	bl	80158f8 <__tzcalc_limits>
 8015ea4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015ea6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015ea8:	f8ca 2000 	str.w	r2, [sl]
 8015eac:	1a9b      	subs	r3, r3, r2
 8015eae:	4a05      	ldr	r2, [pc, #20]	@ (8015ec4 <_tzset_unlocked_r+0x440>)
 8015eb0:	bf18      	it	ne
 8015eb2:	2301      	movne	r3, #1
 8015eb4:	6013      	str	r3, [r2, #0]
 8015eb6:	e613      	b.n	8015ae0 <_tzset_unlocked_r+0x5c>
 8015eb8:	2000a954 	.word	0x2000a954
 8015ebc:	0801a974 	.word	0x0801a974
 8015ec0:	2000a960 	.word	0x2000a960
 8015ec4:	2000a970 	.word	0x2000a970

08015ec8 <_localeconv_r>:
 8015ec8:	4800      	ldr	r0, [pc, #0]	@ (8015ecc <_localeconv_r+0x4>)
 8015eca:	4770      	bx	lr
 8015ecc:	200001d0 	.word	0x200001d0

08015ed0 <_close_r>:
 8015ed0:	b538      	push	{r3, r4, r5, lr}
 8015ed2:	4d06      	ldr	r5, [pc, #24]	@ (8015eec <_close_r+0x1c>)
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	4604      	mov	r4, r0
 8015ed8:	4608      	mov	r0, r1
 8015eda:	602b      	str	r3, [r5, #0]
 8015edc:	f7f6 fae2 	bl	800c4a4 <_close>
 8015ee0:	1c43      	adds	r3, r0, #1
 8015ee2:	d102      	bne.n	8015eea <_close_r+0x1a>
 8015ee4:	682b      	ldr	r3, [r5, #0]
 8015ee6:	b103      	cbz	r3, 8015eea <_close_r+0x1a>
 8015ee8:	6023      	str	r3, [r4, #0]
 8015eea:	bd38      	pop	{r3, r4, r5, pc}
 8015eec:	2000a974 	.word	0x2000a974

08015ef0 <_lseek_r>:
 8015ef0:	b538      	push	{r3, r4, r5, lr}
 8015ef2:	4d07      	ldr	r5, [pc, #28]	@ (8015f10 <_lseek_r+0x20>)
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	4608      	mov	r0, r1
 8015ef8:	4611      	mov	r1, r2
 8015efa:	2200      	movs	r2, #0
 8015efc:	602a      	str	r2, [r5, #0]
 8015efe:	461a      	mov	r2, r3
 8015f00:	f7f6 faf7 	bl	800c4f2 <_lseek>
 8015f04:	1c43      	adds	r3, r0, #1
 8015f06:	d102      	bne.n	8015f0e <_lseek_r+0x1e>
 8015f08:	682b      	ldr	r3, [r5, #0]
 8015f0a:	b103      	cbz	r3, 8015f0e <_lseek_r+0x1e>
 8015f0c:	6023      	str	r3, [r4, #0]
 8015f0e:	bd38      	pop	{r3, r4, r5, pc}
 8015f10:	2000a974 	.word	0x2000a974

08015f14 <_read_r>:
 8015f14:	b538      	push	{r3, r4, r5, lr}
 8015f16:	4d07      	ldr	r5, [pc, #28]	@ (8015f34 <_read_r+0x20>)
 8015f18:	4604      	mov	r4, r0
 8015f1a:	4608      	mov	r0, r1
 8015f1c:	4611      	mov	r1, r2
 8015f1e:	2200      	movs	r2, #0
 8015f20:	602a      	str	r2, [r5, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	f7f6 fa85 	bl	800c432 <_read>
 8015f28:	1c43      	adds	r3, r0, #1
 8015f2a:	d102      	bne.n	8015f32 <_read_r+0x1e>
 8015f2c:	682b      	ldr	r3, [r5, #0]
 8015f2e:	b103      	cbz	r3, 8015f32 <_read_r+0x1e>
 8015f30:	6023      	str	r3, [r4, #0]
 8015f32:	bd38      	pop	{r3, r4, r5, pc}
 8015f34:	2000a974 	.word	0x2000a974

08015f38 <_write_r>:
 8015f38:	b538      	push	{r3, r4, r5, lr}
 8015f3a:	4d07      	ldr	r5, [pc, #28]	@ (8015f58 <_write_r+0x20>)
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	4608      	mov	r0, r1
 8015f40:	4611      	mov	r1, r2
 8015f42:	2200      	movs	r2, #0
 8015f44:	602a      	str	r2, [r5, #0]
 8015f46:	461a      	mov	r2, r3
 8015f48:	f7f6 fa90 	bl	800c46c <_write>
 8015f4c:	1c43      	adds	r3, r0, #1
 8015f4e:	d102      	bne.n	8015f56 <_write_r+0x1e>
 8015f50:	682b      	ldr	r3, [r5, #0]
 8015f52:	b103      	cbz	r3, 8015f56 <_write_r+0x1e>
 8015f54:	6023      	str	r3, [r4, #0]
 8015f56:	bd38      	pop	{r3, r4, r5, pc}
 8015f58:	2000a974 	.word	0x2000a974

08015f5c <__errno>:
 8015f5c:	4b01      	ldr	r3, [pc, #4]	@ (8015f64 <__errno+0x8>)
 8015f5e:	6818      	ldr	r0, [r3, #0]
 8015f60:	4770      	bx	lr
 8015f62:	bf00      	nop
 8015f64:	20000038 	.word	0x20000038

08015f68 <__libc_init_array>:
 8015f68:	b570      	push	{r4, r5, r6, lr}
 8015f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8015fa0 <__libc_init_array+0x38>)
 8015f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8015fa4 <__libc_init_array+0x3c>)
 8015f6e:	1b64      	subs	r4, r4, r5
 8015f70:	10a4      	asrs	r4, r4, #2
 8015f72:	2600      	movs	r6, #0
 8015f74:	42a6      	cmp	r6, r4
 8015f76:	d109      	bne.n	8015f8c <__libc_init_array+0x24>
 8015f78:	4d0b      	ldr	r5, [pc, #44]	@ (8015fa8 <__libc_init_array+0x40>)
 8015f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8015fac <__libc_init_array+0x44>)
 8015f7c:	f002 fe46 	bl	8018c0c <_init>
 8015f80:	1b64      	subs	r4, r4, r5
 8015f82:	10a4      	asrs	r4, r4, #2
 8015f84:	2600      	movs	r6, #0
 8015f86:	42a6      	cmp	r6, r4
 8015f88:	d105      	bne.n	8015f96 <__libc_init_array+0x2e>
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}
 8015f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f90:	4798      	blx	r3
 8015f92:	3601      	adds	r6, #1
 8015f94:	e7ee      	b.n	8015f74 <__libc_init_array+0xc>
 8015f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f9a:	4798      	blx	r3
 8015f9c:	3601      	adds	r6, #1
 8015f9e:	e7f2      	b.n	8015f86 <__libc_init_array+0x1e>
 8015fa0:	0801adb4 	.word	0x0801adb4
 8015fa4:	0801adb4 	.word	0x0801adb4
 8015fa8:	0801adb4 	.word	0x0801adb4
 8015fac:	0801adb8 	.word	0x0801adb8

08015fb0 <__retarget_lock_init_recursive>:
 8015fb0:	4770      	bx	lr

08015fb2 <__retarget_lock_acquire>:
 8015fb2:	4770      	bx	lr

08015fb4 <__retarget_lock_acquire_recursive>:
 8015fb4:	4770      	bx	lr

08015fb6 <__retarget_lock_release>:
 8015fb6:	4770      	bx	lr

08015fb8 <__retarget_lock_release_recursive>:
 8015fb8:	4770      	bx	lr

08015fba <strcpy>:
 8015fba:	4603      	mov	r3, r0
 8015fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8015fc4:	2a00      	cmp	r2, #0
 8015fc6:	d1f9      	bne.n	8015fbc <strcpy+0x2>
 8015fc8:	4770      	bx	lr

08015fca <memcpy>:
 8015fca:	440a      	add	r2, r1
 8015fcc:	4291      	cmp	r1, r2
 8015fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8015fd2:	d100      	bne.n	8015fd6 <memcpy+0xc>
 8015fd4:	4770      	bx	lr
 8015fd6:	b510      	push	{r4, lr}
 8015fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fe0:	4291      	cmp	r1, r2
 8015fe2:	d1f9      	bne.n	8015fd8 <memcpy+0xe>
 8015fe4:	bd10      	pop	{r4, pc}
	...

08015fe8 <__assert_func>:
 8015fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fea:	4614      	mov	r4, r2
 8015fec:	461a      	mov	r2, r3
 8015fee:	4b09      	ldr	r3, [pc, #36]	@ (8016014 <__assert_func+0x2c>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4605      	mov	r5, r0
 8015ff4:	68d8      	ldr	r0, [r3, #12]
 8015ff6:	b14c      	cbz	r4, 801600c <__assert_func+0x24>
 8015ff8:	4b07      	ldr	r3, [pc, #28]	@ (8016018 <__assert_func+0x30>)
 8015ffa:	9100      	str	r1, [sp, #0]
 8015ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016000:	4906      	ldr	r1, [pc, #24]	@ (801601c <__assert_func+0x34>)
 8016002:	462b      	mov	r3, r5
 8016004:	f001 fdb4 	bl	8017b70 <fiprintf>
 8016008:	f001 fed6 	bl	8017db8 <abort>
 801600c:	4b04      	ldr	r3, [pc, #16]	@ (8016020 <__assert_func+0x38>)
 801600e:	461c      	mov	r4, r3
 8016010:	e7f3      	b.n	8015ffa <__assert_func+0x12>
 8016012:	bf00      	nop
 8016014:	20000038 	.word	0x20000038
 8016018:	0801a9a8 	.word	0x0801a9a8
 801601c:	0801a9b5 	.word	0x0801a9b5
 8016020:	0801a9e3 	.word	0x0801a9e3

08016024 <div>:
 8016024:	b510      	push	{r4, lr}
 8016026:	fb91 f4f2 	sdiv	r4, r1, r2
 801602a:	fb02 1114 	mls	r1, r2, r4, r1
 801602e:	6004      	str	r4, [r0, #0]
 8016030:	6041      	str	r1, [r0, #4]
 8016032:	bd10      	pop	{r4, pc}

08016034 <quorem>:
 8016034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016038:	6903      	ldr	r3, [r0, #16]
 801603a:	690c      	ldr	r4, [r1, #16]
 801603c:	42a3      	cmp	r3, r4
 801603e:	4607      	mov	r7, r0
 8016040:	db7e      	blt.n	8016140 <quorem+0x10c>
 8016042:	3c01      	subs	r4, #1
 8016044:	f101 0814 	add.w	r8, r1, #20
 8016048:	00a3      	lsls	r3, r4, #2
 801604a:	f100 0514 	add.w	r5, r0, #20
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016054:	9301      	str	r3, [sp, #4]
 8016056:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801605a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801605e:	3301      	adds	r3, #1
 8016060:	429a      	cmp	r2, r3
 8016062:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016066:	fbb2 f6f3 	udiv	r6, r2, r3
 801606a:	d32e      	bcc.n	80160ca <quorem+0x96>
 801606c:	f04f 0a00 	mov.w	sl, #0
 8016070:	46c4      	mov	ip, r8
 8016072:	46ae      	mov	lr, r5
 8016074:	46d3      	mov	fp, sl
 8016076:	f85c 3b04 	ldr.w	r3, [ip], #4
 801607a:	b298      	uxth	r0, r3
 801607c:	fb06 a000 	mla	r0, r6, r0, sl
 8016080:	0c02      	lsrs	r2, r0, #16
 8016082:	0c1b      	lsrs	r3, r3, #16
 8016084:	fb06 2303 	mla	r3, r6, r3, r2
 8016088:	f8de 2000 	ldr.w	r2, [lr]
 801608c:	b280      	uxth	r0, r0
 801608e:	b292      	uxth	r2, r2
 8016090:	1a12      	subs	r2, r2, r0
 8016092:	445a      	add	r2, fp
 8016094:	f8de 0000 	ldr.w	r0, [lr]
 8016098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801609c:	b29b      	uxth	r3, r3
 801609e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80160a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80160a6:	b292      	uxth	r2, r2
 80160a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80160ac:	45e1      	cmp	r9, ip
 80160ae:	f84e 2b04 	str.w	r2, [lr], #4
 80160b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80160b6:	d2de      	bcs.n	8016076 <quorem+0x42>
 80160b8:	9b00      	ldr	r3, [sp, #0]
 80160ba:	58eb      	ldr	r3, [r5, r3]
 80160bc:	b92b      	cbnz	r3, 80160ca <quorem+0x96>
 80160be:	9b01      	ldr	r3, [sp, #4]
 80160c0:	3b04      	subs	r3, #4
 80160c2:	429d      	cmp	r5, r3
 80160c4:	461a      	mov	r2, r3
 80160c6:	d32f      	bcc.n	8016128 <quorem+0xf4>
 80160c8:	613c      	str	r4, [r7, #16]
 80160ca:	4638      	mov	r0, r7
 80160cc:	f001 f9ca 	bl	8017464 <__mcmp>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	db25      	blt.n	8016120 <quorem+0xec>
 80160d4:	4629      	mov	r1, r5
 80160d6:	2000      	movs	r0, #0
 80160d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80160dc:	f8d1 c000 	ldr.w	ip, [r1]
 80160e0:	fa1f fe82 	uxth.w	lr, r2
 80160e4:	fa1f f38c 	uxth.w	r3, ip
 80160e8:	eba3 030e 	sub.w	r3, r3, lr
 80160ec:	4403      	add	r3, r0
 80160ee:	0c12      	lsrs	r2, r2, #16
 80160f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80160f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160fe:	45c1      	cmp	r9, r8
 8016100:	f841 3b04 	str.w	r3, [r1], #4
 8016104:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016108:	d2e6      	bcs.n	80160d8 <quorem+0xa4>
 801610a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801610e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016112:	b922      	cbnz	r2, 801611e <quorem+0xea>
 8016114:	3b04      	subs	r3, #4
 8016116:	429d      	cmp	r5, r3
 8016118:	461a      	mov	r2, r3
 801611a:	d30b      	bcc.n	8016134 <quorem+0x100>
 801611c:	613c      	str	r4, [r7, #16]
 801611e:	3601      	adds	r6, #1
 8016120:	4630      	mov	r0, r6
 8016122:	b003      	add	sp, #12
 8016124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016128:	6812      	ldr	r2, [r2, #0]
 801612a:	3b04      	subs	r3, #4
 801612c:	2a00      	cmp	r2, #0
 801612e:	d1cb      	bne.n	80160c8 <quorem+0x94>
 8016130:	3c01      	subs	r4, #1
 8016132:	e7c6      	b.n	80160c2 <quorem+0x8e>
 8016134:	6812      	ldr	r2, [r2, #0]
 8016136:	3b04      	subs	r3, #4
 8016138:	2a00      	cmp	r2, #0
 801613a:	d1ef      	bne.n	801611c <quorem+0xe8>
 801613c:	3c01      	subs	r4, #1
 801613e:	e7ea      	b.n	8016116 <quorem+0xe2>
 8016140:	2000      	movs	r0, #0
 8016142:	e7ee      	b.n	8016122 <quorem+0xee>
 8016144:	0000      	movs	r0, r0
	...

08016148 <_dtoa_r>:
 8016148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614c:	69c7      	ldr	r7, [r0, #28]
 801614e:	b097      	sub	sp, #92	@ 0x5c
 8016150:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016154:	ec55 4b10 	vmov	r4, r5, d0
 8016158:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801615a:	9107      	str	r1, [sp, #28]
 801615c:	4681      	mov	r9, r0
 801615e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016160:	9311      	str	r3, [sp, #68]	@ 0x44
 8016162:	b97f      	cbnz	r7, 8016184 <_dtoa_r+0x3c>
 8016164:	2010      	movs	r0, #16
 8016166:	f000 fe4d 	bl	8016e04 <malloc>
 801616a:	4602      	mov	r2, r0
 801616c:	f8c9 001c 	str.w	r0, [r9, #28]
 8016170:	b920      	cbnz	r0, 801617c <_dtoa_r+0x34>
 8016172:	4ba9      	ldr	r3, [pc, #676]	@ (8016418 <_dtoa_r+0x2d0>)
 8016174:	21ef      	movs	r1, #239	@ 0xef
 8016176:	48a9      	ldr	r0, [pc, #676]	@ (801641c <_dtoa_r+0x2d4>)
 8016178:	f7ff ff36 	bl	8015fe8 <__assert_func>
 801617c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016180:	6007      	str	r7, [r0, #0]
 8016182:	60c7      	str	r7, [r0, #12]
 8016184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016188:	6819      	ldr	r1, [r3, #0]
 801618a:	b159      	cbz	r1, 80161a4 <_dtoa_r+0x5c>
 801618c:	685a      	ldr	r2, [r3, #4]
 801618e:	604a      	str	r2, [r1, #4]
 8016190:	2301      	movs	r3, #1
 8016192:	4093      	lsls	r3, r2
 8016194:	608b      	str	r3, [r1, #8]
 8016196:	4648      	mov	r0, r9
 8016198:	f000 ff32 	bl	8017000 <_Bfree>
 801619c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80161a0:	2200      	movs	r2, #0
 80161a2:	601a      	str	r2, [r3, #0]
 80161a4:	1e2b      	subs	r3, r5, #0
 80161a6:	bfb9      	ittee	lt
 80161a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80161ac:	9305      	strlt	r3, [sp, #20]
 80161ae:	2300      	movge	r3, #0
 80161b0:	6033      	strge	r3, [r6, #0]
 80161b2:	9f05      	ldr	r7, [sp, #20]
 80161b4:	4b9a      	ldr	r3, [pc, #616]	@ (8016420 <_dtoa_r+0x2d8>)
 80161b6:	bfbc      	itt	lt
 80161b8:	2201      	movlt	r2, #1
 80161ba:	6032      	strlt	r2, [r6, #0]
 80161bc:	43bb      	bics	r3, r7
 80161be:	d112      	bne.n	80161e6 <_dtoa_r+0x9e>
 80161c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80161c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80161c6:	6013      	str	r3, [r2, #0]
 80161c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80161cc:	4323      	orrs	r3, r4
 80161ce:	f000 855a 	beq.w	8016c86 <_dtoa_r+0xb3e>
 80161d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80161d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8016434 <_dtoa_r+0x2ec>
 80161d8:	2b00      	cmp	r3, #0
 80161da:	f000 855c 	beq.w	8016c96 <_dtoa_r+0xb4e>
 80161de:	f10a 0303 	add.w	r3, sl, #3
 80161e2:	f000 bd56 	b.w	8016c92 <_dtoa_r+0xb4a>
 80161e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80161ea:	2200      	movs	r2, #0
 80161ec:	ec51 0b17 	vmov	r0, r1, d7
 80161f0:	2300      	movs	r3, #0
 80161f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80161f6:	f7ea fc4f 	bl	8000a98 <__aeabi_dcmpeq>
 80161fa:	4680      	mov	r8, r0
 80161fc:	b158      	cbz	r0, 8016216 <_dtoa_r+0xce>
 80161fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016200:	2301      	movs	r3, #1
 8016202:	6013      	str	r3, [r2, #0]
 8016204:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016206:	b113      	cbz	r3, 801620e <_dtoa_r+0xc6>
 8016208:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801620a:	4b86      	ldr	r3, [pc, #536]	@ (8016424 <_dtoa_r+0x2dc>)
 801620c:	6013      	str	r3, [r2, #0]
 801620e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8016438 <_dtoa_r+0x2f0>
 8016212:	f000 bd40 	b.w	8016c96 <_dtoa_r+0xb4e>
 8016216:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801621a:	aa14      	add	r2, sp, #80	@ 0x50
 801621c:	a915      	add	r1, sp, #84	@ 0x54
 801621e:	4648      	mov	r0, r9
 8016220:	f001 f9d0 	bl	80175c4 <__d2b>
 8016224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016228:	9002      	str	r0, [sp, #8]
 801622a:	2e00      	cmp	r6, #0
 801622c:	d078      	beq.n	8016320 <_dtoa_r+0x1d8>
 801622e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016230:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8016234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801623c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016248:	4619      	mov	r1, r3
 801624a:	2200      	movs	r2, #0
 801624c:	4b76      	ldr	r3, [pc, #472]	@ (8016428 <_dtoa_r+0x2e0>)
 801624e:	f7ea f803 	bl	8000258 <__aeabi_dsub>
 8016252:	a36b      	add	r3, pc, #428	@ (adr r3, 8016400 <_dtoa_r+0x2b8>)
 8016254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016258:	f7ea f9b6 	bl	80005c8 <__aeabi_dmul>
 801625c:	a36a      	add	r3, pc, #424	@ (adr r3, 8016408 <_dtoa_r+0x2c0>)
 801625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016262:	f7e9 fffb 	bl	800025c <__adddf3>
 8016266:	4604      	mov	r4, r0
 8016268:	4630      	mov	r0, r6
 801626a:	460d      	mov	r5, r1
 801626c:	f7ea f942 	bl	80004f4 <__aeabi_i2d>
 8016270:	a367      	add	r3, pc, #412	@ (adr r3, 8016410 <_dtoa_r+0x2c8>)
 8016272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016276:	f7ea f9a7 	bl	80005c8 <__aeabi_dmul>
 801627a:	4602      	mov	r2, r0
 801627c:	460b      	mov	r3, r1
 801627e:	4620      	mov	r0, r4
 8016280:	4629      	mov	r1, r5
 8016282:	f7e9 ffeb 	bl	800025c <__adddf3>
 8016286:	4604      	mov	r4, r0
 8016288:	460d      	mov	r5, r1
 801628a:	f7ea fc4d 	bl	8000b28 <__aeabi_d2iz>
 801628e:	2200      	movs	r2, #0
 8016290:	4607      	mov	r7, r0
 8016292:	2300      	movs	r3, #0
 8016294:	4620      	mov	r0, r4
 8016296:	4629      	mov	r1, r5
 8016298:	f7ea fc08 	bl	8000aac <__aeabi_dcmplt>
 801629c:	b140      	cbz	r0, 80162b0 <_dtoa_r+0x168>
 801629e:	4638      	mov	r0, r7
 80162a0:	f7ea f928 	bl	80004f4 <__aeabi_i2d>
 80162a4:	4622      	mov	r2, r4
 80162a6:	462b      	mov	r3, r5
 80162a8:	f7ea fbf6 	bl	8000a98 <__aeabi_dcmpeq>
 80162ac:	b900      	cbnz	r0, 80162b0 <_dtoa_r+0x168>
 80162ae:	3f01      	subs	r7, #1
 80162b0:	2f16      	cmp	r7, #22
 80162b2:	d852      	bhi.n	801635a <_dtoa_r+0x212>
 80162b4:	4b5d      	ldr	r3, [pc, #372]	@ (801642c <_dtoa_r+0x2e4>)
 80162b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80162c2:	f7ea fbf3 	bl	8000aac <__aeabi_dcmplt>
 80162c6:	2800      	cmp	r0, #0
 80162c8:	d049      	beq.n	801635e <_dtoa_r+0x216>
 80162ca:	3f01      	subs	r7, #1
 80162cc:	2300      	movs	r3, #0
 80162ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80162d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80162d2:	1b9b      	subs	r3, r3, r6
 80162d4:	1e5a      	subs	r2, r3, #1
 80162d6:	bf45      	ittet	mi
 80162d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80162dc:	9300      	strmi	r3, [sp, #0]
 80162de:	2300      	movpl	r3, #0
 80162e0:	2300      	movmi	r3, #0
 80162e2:	9206      	str	r2, [sp, #24]
 80162e4:	bf54      	ite	pl
 80162e6:	9300      	strpl	r3, [sp, #0]
 80162e8:	9306      	strmi	r3, [sp, #24]
 80162ea:	2f00      	cmp	r7, #0
 80162ec:	db39      	blt.n	8016362 <_dtoa_r+0x21a>
 80162ee:	9b06      	ldr	r3, [sp, #24]
 80162f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80162f2:	443b      	add	r3, r7
 80162f4:	9306      	str	r3, [sp, #24]
 80162f6:	2300      	movs	r3, #0
 80162f8:	9308      	str	r3, [sp, #32]
 80162fa:	9b07      	ldr	r3, [sp, #28]
 80162fc:	2b09      	cmp	r3, #9
 80162fe:	d863      	bhi.n	80163c8 <_dtoa_r+0x280>
 8016300:	2b05      	cmp	r3, #5
 8016302:	bfc4      	itt	gt
 8016304:	3b04      	subgt	r3, #4
 8016306:	9307      	strgt	r3, [sp, #28]
 8016308:	9b07      	ldr	r3, [sp, #28]
 801630a:	f1a3 0302 	sub.w	r3, r3, #2
 801630e:	bfcc      	ite	gt
 8016310:	2400      	movgt	r4, #0
 8016312:	2401      	movle	r4, #1
 8016314:	2b03      	cmp	r3, #3
 8016316:	d863      	bhi.n	80163e0 <_dtoa_r+0x298>
 8016318:	e8df f003 	tbb	[pc, r3]
 801631c:	2b375452 	.word	0x2b375452
 8016320:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8016324:	441e      	add	r6, r3
 8016326:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801632a:	2b20      	cmp	r3, #32
 801632c:	bfc1      	itttt	gt
 801632e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8016332:	409f      	lslgt	r7, r3
 8016334:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016338:	fa24 f303 	lsrgt.w	r3, r4, r3
 801633c:	bfd6      	itet	le
 801633e:	f1c3 0320 	rsble	r3, r3, #32
 8016342:	ea47 0003 	orrgt.w	r0, r7, r3
 8016346:	fa04 f003 	lslle.w	r0, r4, r3
 801634a:	f7ea f8c3 	bl	80004d4 <__aeabi_ui2d>
 801634e:	2201      	movs	r2, #1
 8016350:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8016354:	3e01      	subs	r6, #1
 8016356:	9212      	str	r2, [sp, #72]	@ 0x48
 8016358:	e776      	b.n	8016248 <_dtoa_r+0x100>
 801635a:	2301      	movs	r3, #1
 801635c:	e7b7      	b.n	80162ce <_dtoa_r+0x186>
 801635e:	9010      	str	r0, [sp, #64]	@ 0x40
 8016360:	e7b6      	b.n	80162d0 <_dtoa_r+0x188>
 8016362:	9b00      	ldr	r3, [sp, #0]
 8016364:	1bdb      	subs	r3, r3, r7
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	427b      	negs	r3, r7
 801636a:	9308      	str	r3, [sp, #32]
 801636c:	2300      	movs	r3, #0
 801636e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016370:	e7c3      	b.n	80162fa <_dtoa_r+0x1b2>
 8016372:	2301      	movs	r3, #1
 8016374:	9309      	str	r3, [sp, #36]	@ 0x24
 8016376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016378:	eb07 0b03 	add.w	fp, r7, r3
 801637c:	f10b 0301 	add.w	r3, fp, #1
 8016380:	2b01      	cmp	r3, #1
 8016382:	9303      	str	r3, [sp, #12]
 8016384:	bfb8      	it	lt
 8016386:	2301      	movlt	r3, #1
 8016388:	e006      	b.n	8016398 <_dtoa_r+0x250>
 801638a:	2301      	movs	r3, #1
 801638c:	9309      	str	r3, [sp, #36]	@ 0x24
 801638e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016390:	2b00      	cmp	r3, #0
 8016392:	dd28      	ble.n	80163e6 <_dtoa_r+0x29e>
 8016394:	469b      	mov	fp, r3
 8016396:	9303      	str	r3, [sp, #12]
 8016398:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801639c:	2100      	movs	r1, #0
 801639e:	2204      	movs	r2, #4
 80163a0:	f102 0514 	add.w	r5, r2, #20
 80163a4:	429d      	cmp	r5, r3
 80163a6:	d926      	bls.n	80163f6 <_dtoa_r+0x2ae>
 80163a8:	6041      	str	r1, [r0, #4]
 80163aa:	4648      	mov	r0, r9
 80163ac:	f000 fde8 	bl	8016f80 <_Balloc>
 80163b0:	4682      	mov	sl, r0
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d142      	bne.n	801643c <_dtoa_r+0x2f4>
 80163b6:	4b1e      	ldr	r3, [pc, #120]	@ (8016430 <_dtoa_r+0x2e8>)
 80163b8:	4602      	mov	r2, r0
 80163ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80163be:	e6da      	b.n	8016176 <_dtoa_r+0x2e>
 80163c0:	2300      	movs	r3, #0
 80163c2:	e7e3      	b.n	801638c <_dtoa_r+0x244>
 80163c4:	2300      	movs	r3, #0
 80163c6:	e7d5      	b.n	8016374 <_dtoa_r+0x22c>
 80163c8:	2401      	movs	r4, #1
 80163ca:	2300      	movs	r3, #0
 80163cc:	9307      	str	r3, [sp, #28]
 80163ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80163d0:	f04f 3bff 	mov.w	fp, #4294967295
 80163d4:	2200      	movs	r2, #0
 80163d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80163da:	2312      	movs	r3, #18
 80163dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80163de:	e7db      	b.n	8016398 <_dtoa_r+0x250>
 80163e0:	2301      	movs	r3, #1
 80163e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80163e4:	e7f4      	b.n	80163d0 <_dtoa_r+0x288>
 80163e6:	f04f 0b01 	mov.w	fp, #1
 80163ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80163ee:	465b      	mov	r3, fp
 80163f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80163f4:	e7d0      	b.n	8016398 <_dtoa_r+0x250>
 80163f6:	3101      	adds	r1, #1
 80163f8:	0052      	lsls	r2, r2, #1
 80163fa:	e7d1      	b.n	80163a0 <_dtoa_r+0x258>
 80163fc:	f3af 8000 	nop.w
 8016400:	636f4361 	.word	0x636f4361
 8016404:	3fd287a7 	.word	0x3fd287a7
 8016408:	8b60c8b3 	.word	0x8b60c8b3
 801640c:	3fc68a28 	.word	0x3fc68a28
 8016410:	509f79fb 	.word	0x509f79fb
 8016414:	3fd34413 	.word	0x3fd34413
 8016418:	0801a860 	.word	0x0801a860
 801641c:	0801a9f1 	.word	0x0801a9f1
 8016420:	7ff00000 	.word	0x7ff00000
 8016424:	0801aae5 	.word	0x0801aae5
 8016428:	3ff80000 	.word	0x3ff80000
 801642c:	0801abe0 	.word	0x0801abe0
 8016430:	0801aa49 	.word	0x0801aa49
 8016434:	0801a9ed 	.word	0x0801a9ed
 8016438:	0801aae4 	.word	0x0801aae4
 801643c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016440:	6018      	str	r0, [r3, #0]
 8016442:	9b03      	ldr	r3, [sp, #12]
 8016444:	2b0e      	cmp	r3, #14
 8016446:	f200 80a1 	bhi.w	801658c <_dtoa_r+0x444>
 801644a:	2c00      	cmp	r4, #0
 801644c:	f000 809e 	beq.w	801658c <_dtoa_r+0x444>
 8016450:	2f00      	cmp	r7, #0
 8016452:	dd33      	ble.n	80164bc <_dtoa_r+0x374>
 8016454:	4b9c      	ldr	r3, [pc, #624]	@ (80166c8 <_dtoa_r+0x580>)
 8016456:	f007 020f 	and.w	r2, r7, #15
 801645a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801645e:	ed93 7b00 	vldr	d7, [r3]
 8016462:	05f8      	lsls	r0, r7, #23
 8016464:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8016468:	ea4f 1427 	mov.w	r4, r7, asr #4
 801646c:	d516      	bpl.n	801649c <_dtoa_r+0x354>
 801646e:	4b97      	ldr	r3, [pc, #604]	@ (80166cc <_dtoa_r+0x584>)
 8016470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8016474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016478:	f7ea f9d0 	bl	800081c <__aeabi_ddiv>
 801647c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016480:	f004 040f 	and.w	r4, r4, #15
 8016484:	2603      	movs	r6, #3
 8016486:	4d91      	ldr	r5, [pc, #580]	@ (80166cc <_dtoa_r+0x584>)
 8016488:	b954      	cbnz	r4, 80164a0 <_dtoa_r+0x358>
 801648a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801648e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016492:	f7ea f9c3 	bl	800081c <__aeabi_ddiv>
 8016496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801649a:	e028      	b.n	80164ee <_dtoa_r+0x3a6>
 801649c:	2602      	movs	r6, #2
 801649e:	e7f2      	b.n	8016486 <_dtoa_r+0x33e>
 80164a0:	07e1      	lsls	r1, r4, #31
 80164a2:	d508      	bpl.n	80164b6 <_dtoa_r+0x36e>
 80164a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80164a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80164ac:	f7ea f88c 	bl	80005c8 <__aeabi_dmul>
 80164b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80164b4:	3601      	adds	r6, #1
 80164b6:	1064      	asrs	r4, r4, #1
 80164b8:	3508      	adds	r5, #8
 80164ba:	e7e5      	b.n	8016488 <_dtoa_r+0x340>
 80164bc:	f000 80af 	beq.w	801661e <_dtoa_r+0x4d6>
 80164c0:	427c      	negs	r4, r7
 80164c2:	4b81      	ldr	r3, [pc, #516]	@ (80166c8 <_dtoa_r+0x580>)
 80164c4:	4d81      	ldr	r5, [pc, #516]	@ (80166cc <_dtoa_r+0x584>)
 80164c6:	f004 020f 	and.w	r2, r4, #15
 80164ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80164d6:	f7ea f877 	bl	80005c8 <__aeabi_dmul>
 80164da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164de:	1124      	asrs	r4, r4, #4
 80164e0:	2300      	movs	r3, #0
 80164e2:	2602      	movs	r6, #2
 80164e4:	2c00      	cmp	r4, #0
 80164e6:	f040 808f 	bne.w	8016608 <_dtoa_r+0x4c0>
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d1d3      	bne.n	8016496 <_dtoa_r+0x34e>
 80164ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80164f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	f000 8094 	beq.w	8016622 <_dtoa_r+0x4da>
 80164fa:	4b75      	ldr	r3, [pc, #468]	@ (80166d0 <_dtoa_r+0x588>)
 80164fc:	2200      	movs	r2, #0
 80164fe:	4620      	mov	r0, r4
 8016500:	4629      	mov	r1, r5
 8016502:	f7ea fad3 	bl	8000aac <__aeabi_dcmplt>
 8016506:	2800      	cmp	r0, #0
 8016508:	f000 808b 	beq.w	8016622 <_dtoa_r+0x4da>
 801650c:	9b03      	ldr	r3, [sp, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	f000 8087 	beq.w	8016622 <_dtoa_r+0x4da>
 8016514:	f1bb 0f00 	cmp.w	fp, #0
 8016518:	dd34      	ble.n	8016584 <_dtoa_r+0x43c>
 801651a:	4620      	mov	r0, r4
 801651c:	4b6d      	ldr	r3, [pc, #436]	@ (80166d4 <_dtoa_r+0x58c>)
 801651e:	2200      	movs	r2, #0
 8016520:	4629      	mov	r1, r5
 8016522:	f7ea f851 	bl	80005c8 <__aeabi_dmul>
 8016526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801652a:	f107 38ff 	add.w	r8, r7, #4294967295
 801652e:	3601      	adds	r6, #1
 8016530:	465c      	mov	r4, fp
 8016532:	4630      	mov	r0, r6
 8016534:	f7e9 ffde 	bl	80004f4 <__aeabi_i2d>
 8016538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801653c:	f7ea f844 	bl	80005c8 <__aeabi_dmul>
 8016540:	4b65      	ldr	r3, [pc, #404]	@ (80166d8 <_dtoa_r+0x590>)
 8016542:	2200      	movs	r2, #0
 8016544:	f7e9 fe8a 	bl	800025c <__adddf3>
 8016548:	4605      	mov	r5, r0
 801654a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801654e:	2c00      	cmp	r4, #0
 8016550:	d16a      	bne.n	8016628 <_dtoa_r+0x4e0>
 8016552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016556:	4b61      	ldr	r3, [pc, #388]	@ (80166dc <_dtoa_r+0x594>)
 8016558:	2200      	movs	r2, #0
 801655a:	f7e9 fe7d 	bl	8000258 <__aeabi_dsub>
 801655e:	4602      	mov	r2, r0
 8016560:	460b      	mov	r3, r1
 8016562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016566:	462a      	mov	r2, r5
 8016568:	4633      	mov	r3, r6
 801656a:	f7ea fabd 	bl	8000ae8 <__aeabi_dcmpgt>
 801656e:	2800      	cmp	r0, #0
 8016570:	f040 8298 	bne.w	8016aa4 <_dtoa_r+0x95c>
 8016574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016578:	462a      	mov	r2, r5
 801657a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801657e:	f7ea fa95 	bl	8000aac <__aeabi_dcmplt>
 8016582:	bb38      	cbnz	r0, 80165d4 <_dtoa_r+0x48c>
 8016584:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8016588:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801658c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801658e:	2b00      	cmp	r3, #0
 8016590:	f2c0 8157 	blt.w	8016842 <_dtoa_r+0x6fa>
 8016594:	2f0e      	cmp	r7, #14
 8016596:	f300 8154 	bgt.w	8016842 <_dtoa_r+0x6fa>
 801659a:	4b4b      	ldr	r3, [pc, #300]	@ (80166c8 <_dtoa_r+0x580>)
 801659c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80165a0:	ed93 7b00 	vldr	d7, [r3]
 80165a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	ed8d 7b00 	vstr	d7, [sp]
 80165ac:	f280 80e5 	bge.w	801677a <_dtoa_r+0x632>
 80165b0:	9b03      	ldr	r3, [sp, #12]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	f300 80e1 	bgt.w	801677a <_dtoa_r+0x632>
 80165b8:	d10c      	bne.n	80165d4 <_dtoa_r+0x48c>
 80165ba:	4b48      	ldr	r3, [pc, #288]	@ (80166dc <_dtoa_r+0x594>)
 80165bc:	2200      	movs	r2, #0
 80165be:	ec51 0b17 	vmov	r0, r1, d7
 80165c2:	f7ea f801 	bl	80005c8 <__aeabi_dmul>
 80165c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165ca:	f7ea fa83 	bl	8000ad4 <__aeabi_dcmpge>
 80165ce:	2800      	cmp	r0, #0
 80165d0:	f000 8266 	beq.w	8016aa0 <_dtoa_r+0x958>
 80165d4:	2400      	movs	r4, #0
 80165d6:	4625      	mov	r5, r4
 80165d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165da:	4656      	mov	r6, sl
 80165dc:	ea6f 0803 	mvn.w	r8, r3
 80165e0:	2700      	movs	r7, #0
 80165e2:	4621      	mov	r1, r4
 80165e4:	4648      	mov	r0, r9
 80165e6:	f000 fd0b 	bl	8017000 <_Bfree>
 80165ea:	2d00      	cmp	r5, #0
 80165ec:	f000 80bd 	beq.w	801676a <_dtoa_r+0x622>
 80165f0:	b12f      	cbz	r7, 80165fe <_dtoa_r+0x4b6>
 80165f2:	42af      	cmp	r7, r5
 80165f4:	d003      	beq.n	80165fe <_dtoa_r+0x4b6>
 80165f6:	4639      	mov	r1, r7
 80165f8:	4648      	mov	r0, r9
 80165fa:	f000 fd01 	bl	8017000 <_Bfree>
 80165fe:	4629      	mov	r1, r5
 8016600:	4648      	mov	r0, r9
 8016602:	f000 fcfd 	bl	8017000 <_Bfree>
 8016606:	e0b0      	b.n	801676a <_dtoa_r+0x622>
 8016608:	07e2      	lsls	r2, r4, #31
 801660a:	d505      	bpl.n	8016618 <_dtoa_r+0x4d0>
 801660c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016610:	f7e9 ffda 	bl	80005c8 <__aeabi_dmul>
 8016614:	3601      	adds	r6, #1
 8016616:	2301      	movs	r3, #1
 8016618:	1064      	asrs	r4, r4, #1
 801661a:	3508      	adds	r5, #8
 801661c:	e762      	b.n	80164e4 <_dtoa_r+0x39c>
 801661e:	2602      	movs	r6, #2
 8016620:	e765      	b.n	80164ee <_dtoa_r+0x3a6>
 8016622:	9c03      	ldr	r4, [sp, #12]
 8016624:	46b8      	mov	r8, r7
 8016626:	e784      	b.n	8016532 <_dtoa_r+0x3ea>
 8016628:	4b27      	ldr	r3, [pc, #156]	@ (80166c8 <_dtoa_r+0x580>)
 801662a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801662c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016634:	4454      	add	r4, sl
 8016636:	2900      	cmp	r1, #0
 8016638:	d054      	beq.n	80166e4 <_dtoa_r+0x59c>
 801663a:	4929      	ldr	r1, [pc, #164]	@ (80166e0 <_dtoa_r+0x598>)
 801663c:	2000      	movs	r0, #0
 801663e:	f7ea f8ed 	bl	800081c <__aeabi_ddiv>
 8016642:	4633      	mov	r3, r6
 8016644:	462a      	mov	r2, r5
 8016646:	f7e9 fe07 	bl	8000258 <__aeabi_dsub>
 801664a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801664e:	4656      	mov	r6, sl
 8016650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016654:	f7ea fa68 	bl	8000b28 <__aeabi_d2iz>
 8016658:	4605      	mov	r5, r0
 801665a:	f7e9 ff4b 	bl	80004f4 <__aeabi_i2d>
 801665e:	4602      	mov	r2, r0
 8016660:	460b      	mov	r3, r1
 8016662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016666:	f7e9 fdf7 	bl	8000258 <__aeabi_dsub>
 801666a:	3530      	adds	r5, #48	@ 0x30
 801666c:	4602      	mov	r2, r0
 801666e:	460b      	mov	r3, r1
 8016670:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016674:	f806 5b01 	strb.w	r5, [r6], #1
 8016678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801667c:	f7ea fa16 	bl	8000aac <__aeabi_dcmplt>
 8016680:	2800      	cmp	r0, #0
 8016682:	d172      	bne.n	801676a <_dtoa_r+0x622>
 8016684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016688:	4911      	ldr	r1, [pc, #68]	@ (80166d0 <_dtoa_r+0x588>)
 801668a:	2000      	movs	r0, #0
 801668c:	f7e9 fde4 	bl	8000258 <__aeabi_dsub>
 8016690:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016694:	f7ea fa0a 	bl	8000aac <__aeabi_dcmplt>
 8016698:	2800      	cmp	r0, #0
 801669a:	f040 80b4 	bne.w	8016806 <_dtoa_r+0x6be>
 801669e:	42a6      	cmp	r6, r4
 80166a0:	f43f af70 	beq.w	8016584 <_dtoa_r+0x43c>
 80166a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80166a8:	4b0a      	ldr	r3, [pc, #40]	@ (80166d4 <_dtoa_r+0x58c>)
 80166aa:	2200      	movs	r2, #0
 80166ac:	f7e9 ff8c 	bl	80005c8 <__aeabi_dmul>
 80166b0:	4b08      	ldr	r3, [pc, #32]	@ (80166d4 <_dtoa_r+0x58c>)
 80166b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80166b6:	2200      	movs	r2, #0
 80166b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166bc:	f7e9 ff84 	bl	80005c8 <__aeabi_dmul>
 80166c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80166c4:	e7c4      	b.n	8016650 <_dtoa_r+0x508>
 80166c6:	bf00      	nop
 80166c8:	0801abe0 	.word	0x0801abe0
 80166cc:	0801abb8 	.word	0x0801abb8
 80166d0:	3ff00000 	.word	0x3ff00000
 80166d4:	40240000 	.word	0x40240000
 80166d8:	401c0000 	.word	0x401c0000
 80166dc:	40140000 	.word	0x40140000
 80166e0:	3fe00000 	.word	0x3fe00000
 80166e4:	4631      	mov	r1, r6
 80166e6:	4628      	mov	r0, r5
 80166e8:	f7e9 ff6e 	bl	80005c8 <__aeabi_dmul>
 80166ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80166f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80166f2:	4656      	mov	r6, sl
 80166f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166f8:	f7ea fa16 	bl	8000b28 <__aeabi_d2iz>
 80166fc:	4605      	mov	r5, r0
 80166fe:	f7e9 fef9 	bl	80004f4 <__aeabi_i2d>
 8016702:	4602      	mov	r2, r0
 8016704:	460b      	mov	r3, r1
 8016706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801670a:	f7e9 fda5 	bl	8000258 <__aeabi_dsub>
 801670e:	3530      	adds	r5, #48	@ 0x30
 8016710:	f806 5b01 	strb.w	r5, [r6], #1
 8016714:	4602      	mov	r2, r0
 8016716:	460b      	mov	r3, r1
 8016718:	42a6      	cmp	r6, r4
 801671a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801671e:	f04f 0200 	mov.w	r2, #0
 8016722:	d124      	bne.n	801676e <_dtoa_r+0x626>
 8016724:	4baf      	ldr	r3, [pc, #700]	@ (80169e4 <_dtoa_r+0x89c>)
 8016726:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801672a:	f7e9 fd97 	bl	800025c <__adddf3>
 801672e:	4602      	mov	r2, r0
 8016730:	460b      	mov	r3, r1
 8016732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016736:	f7ea f9d7 	bl	8000ae8 <__aeabi_dcmpgt>
 801673a:	2800      	cmp	r0, #0
 801673c:	d163      	bne.n	8016806 <_dtoa_r+0x6be>
 801673e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016742:	49a8      	ldr	r1, [pc, #672]	@ (80169e4 <_dtoa_r+0x89c>)
 8016744:	2000      	movs	r0, #0
 8016746:	f7e9 fd87 	bl	8000258 <__aeabi_dsub>
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016752:	f7ea f9ab 	bl	8000aac <__aeabi_dcmplt>
 8016756:	2800      	cmp	r0, #0
 8016758:	f43f af14 	beq.w	8016584 <_dtoa_r+0x43c>
 801675c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801675e:	1e73      	subs	r3, r6, #1
 8016760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016762:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016766:	2b30      	cmp	r3, #48	@ 0x30
 8016768:	d0f8      	beq.n	801675c <_dtoa_r+0x614>
 801676a:	4647      	mov	r7, r8
 801676c:	e03b      	b.n	80167e6 <_dtoa_r+0x69e>
 801676e:	4b9e      	ldr	r3, [pc, #632]	@ (80169e8 <_dtoa_r+0x8a0>)
 8016770:	f7e9 ff2a 	bl	80005c8 <__aeabi_dmul>
 8016774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016778:	e7bc      	b.n	80166f4 <_dtoa_r+0x5ac>
 801677a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801677e:	4656      	mov	r6, sl
 8016780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016784:	4620      	mov	r0, r4
 8016786:	4629      	mov	r1, r5
 8016788:	f7ea f848 	bl	800081c <__aeabi_ddiv>
 801678c:	f7ea f9cc 	bl	8000b28 <__aeabi_d2iz>
 8016790:	4680      	mov	r8, r0
 8016792:	f7e9 feaf 	bl	80004f4 <__aeabi_i2d>
 8016796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801679a:	f7e9 ff15 	bl	80005c8 <__aeabi_dmul>
 801679e:	4602      	mov	r2, r0
 80167a0:	460b      	mov	r3, r1
 80167a2:	4620      	mov	r0, r4
 80167a4:	4629      	mov	r1, r5
 80167a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80167aa:	f7e9 fd55 	bl	8000258 <__aeabi_dsub>
 80167ae:	f806 4b01 	strb.w	r4, [r6], #1
 80167b2:	9d03      	ldr	r5, [sp, #12]
 80167b4:	eba6 040a 	sub.w	r4, r6, sl
 80167b8:	42a5      	cmp	r5, r4
 80167ba:	4602      	mov	r2, r0
 80167bc:	460b      	mov	r3, r1
 80167be:	d133      	bne.n	8016828 <_dtoa_r+0x6e0>
 80167c0:	f7e9 fd4c 	bl	800025c <__adddf3>
 80167c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167c8:	4604      	mov	r4, r0
 80167ca:	460d      	mov	r5, r1
 80167cc:	f7ea f98c 	bl	8000ae8 <__aeabi_dcmpgt>
 80167d0:	b9c0      	cbnz	r0, 8016804 <_dtoa_r+0x6bc>
 80167d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167d6:	4620      	mov	r0, r4
 80167d8:	4629      	mov	r1, r5
 80167da:	f7ea f95d 	bl	8000a98 <__aeabi_dcmpeq>
 80167de:	b110      	cbz	r0, 80167e6 <_dtoa_r+0x69e>
 80167e0:	f018 0f01 	tst.w	r8, #1
 80167e4:	d10e      	bne.n	8016804 <_dtoa_r+0x6bc>
 80167e6:	9902      	ldr	r1, [sp, #8]
 80167e8:	4648      	mov	r0, r9
 80167ea:	f000 fc09 	bl	8017000 <_Bfree>
 80167ee:	2300      	movs	r3, #0
 80167f0:	7033      	strb	r3, [r6, #0]
 80167f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80167f4:	3701      	adds	r7, #1
 80167f6:	601f      	str	r7, [r3, #0]
 80167f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f000 824b 	beq.w	8016c96 <_dtoa_r+0xb4e>
 8016800:	601e      	str	r6, [r3, #0]
 8016802:	e248      	b.n	8016c96 <_dtoa_r+0xb4e>
 8016804:	46b8      	mov	r8, r7
 8016806:	4633      	mov	r3, r6
 8016808:	461e      	mov	r6, r3
 801680a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801680e:	2a39      	cmp	r2, #57	@ 0x39
 8016810:	d106      	bne.n	8016820 <_dtoa_r+0x6d8>
 8016812:	459a      	cmp	sl, r3
 8016814:	d1f8      	bne.n	8016808 <_dtoa_r+0x6c0>
 8016816:	2230      	movs	r2, #48	@ 0x30
 8016818:	f108 0801 	add.w	r8, r8, #1
 801681c:	f88a 2000 	strb.w	r2, [sl]
 8016820:	781a      	ldrb	r2, [r3, #0]
 8016822:	3201      	adds	r2, #1
 8016824:	701a      	strb	r2, [r3, #0]
 8016826:	e7a0      	b.n	801676a <_dtoa_r+0x622>
 8016828:	4b6f      	ldr	r3, [pc, #444]	@ (80169e8 <_dtoa_r+0x8a0>)
 801682a:	2200      	movs	r2, #0
 801682c:	f7e9 fecc 	bl	80005c8 <__aeabi_dmul>
 8016830:	2200      	movs	r2, #0
 8016832:	2300      	movs	r3, #0
 8016834:	4604      	mov	r4, r0
 8016836:	460d      	mov	r5, r1
 8016838:	f7ea f92e 	bl	8000a98 <__aeabi_dcmpeq>
 801683c:	2800      	cmp	r0, #0
 801683e:	d09f      	beq.n	8016780 <_dtoa_r+0x638>
 8016840:	e7d1      	b.n	80167e6 <_dtoa_r+0x69e>
 8016842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016844:	2a00      	cmp	r2, #0
 8016846:	f000 80ea 	beq.w	8016a1e <_dtoa_r+0x8d6>
 801684a:	9a07      	ldr	r2, [sp, #28]
 801684c:	2a01      	cmp	r2, #1
 801684e:	f300 80cd 	bgt.w	80169ec <_dtoa_r+0x8a4>
 8016852:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016854:	2a00      	cmp	r2, #0
 8016856:	f000 80c1 	beq.w	80169dc <_dtoa_r+0x894>
 801685a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801685e:	9c08      	ldr	r4, [sp, #32]
 8016860:	9e00      	ldr	r6, [sp, #0]
 8016862:	9a00      	ldr	r2, [sp, #0]
 8016864:	441a      	add	r2, r3
 8016866:	9200      	str	r2, [sp, #0]
 8016868:	9a06      	ldr	r2, [sp, #24]
 801686a:	2101      	movs	r1, #1
 801686c:	441a      	add	r2, r3
 801686e:	4648      	mov	r0, r9
 8016870:	9206      	str	r2, [sp, #24]
 8016872:	f000 fc79 	bl	8017168 <__i2b>
 8016876:	4605      	mov	r5, r0
 8016878:	b166      	cbz	r6, 8016894 <_dtoa_r+0x74c>
 801687a:	9b06      	ldr	r3, [sp, #24]
 801687c:	2b00      	cmp	r3, #0
 801687e:	dd09      	ble.n	8016894 <_dtoa_r+0x74c>
 8016880:	42b3      	cmp	r3, r6
 8016882:	9a00      	ldr	r2, [sp, #0]
 8016884:	bfa8      	it	ge
 8016886:	4633      	movge	r3, r6
 8016888:	1ad2      	subs	r2, r2, r3
 801688a:	9200      	str	r2, [sp, #0]
 801688c:	9a06      	ldr	r2, [sp, #24]
 801688e:	1af6      	subs	r6, r6, r3
 8016890:	1ad3      	subs	r3, r2, r3
 8016892:	9306      	str	r3, [sp, #24]
 8016894:	9b08      	ldr	r3, [sp, #32]
 8016896:	b30b      	cbz	r3, 80168dc <_dtoa_r+0x794>
 8016898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801689a:	2b00      	cmp	r3, #0
 801689c:	f000 80c6 	beq.w	8016a2c <_dtoa_r+0x8e4>
 80168a0:	2c00      	cmp	r4, #0
 80168a2:	f000 80c0 	beq.w	8016a26 <_dtoa_r+0x8de>
 80168a6:	4629      	mov	r1, r5
 80168a8:	4622      	mov	r2, r4
 80168aa:	4648      	mov	r0, r9
 80168ac:	f000 fd14 	bl	80172d8 <__pow5mult>
 80168b0:	9a02      	ldr	r2, [sp, #8]
 80168b2:	4601      	mov	r1, r0
 80168b4:	4605      	mov	r5, r0
 80168b6:	4648      	mov	r0, r9
 80168b8:	f000 fc6c 	bl	8017194 <__multiply>
 80168bc:	9902      	ldr	r1, [sp, #8]
 80168be:	4680      	mov	r8, r0
 80168c0:	4648      	mov	r0, r9
 80168c2:	f000 fb9d 	bl	8017000 <_Bfree>
 80168c6:	9b08      	ldr	r3, [sp, #32]
 80168c8:	1b1b      	subs	r3, r3, r4
 80168ca:	9308      	str	r3, [sp, #32]
 80168cc:	f000 80b1 	beq.w	8016a32 <_dtoa_r+0x8ea>
 80168d0:	9a08      	ldr	r2, [sp, #32]
 80168d2:	4641      	mov	r1, r8
 80168d4:	4648      	mov	r0, r9
 80168d6:	f000 fcff 	bl	80172d8 <__pow5mult>
 80168da:	9002      	str	r0, [sp, #8]
 80168dc:	2101      	movs	r1, #1
 80168de:	4648      	mov	r0, r9
 80168e0:	f000 fc42 	bl	8017168 <__i2b>
 80168e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80168e6:	4604      	mov	r4, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f000 81d8 	beq.w	8016c9e <_dtoa_r+0xb56>
 80168ee:	461a      	mov	r2, r3
 80168f0:	4601      	mov	r1, r0
 80168f2:	4648      	mov	r0, r9
 80168f4:	f000 fcf0 	bl	80172d8 <__pow5mult>
 80168f8:	9b07      	ldr	r3, [sp, #28]
 80168fa:	2b01      	cmp	r3, #1
 80168fc:	4604      	mov	r4, r0
 80168fe:	f300 809f 	bgt.w	8016a40 <_dtoa_r+0x8f8>
 8016902:	9b04      	ldr	r3, [sp, #16]
 8016904:	2b00      	cmp	r3, #0
 8016906:	f040 8097 	bne.w	8016a38 <_dtoa_r+0x8f0>
 801690a:	9b05      	ldr	r3, [sp, #20]
 801690c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016910:	2b00      	cmp	r3, #0
 8016912:	f040 8093 	bne.w	8016a3c <_dtoa_r+0x8f4>
 8016916:	9b05      	ldr	r3, [sp, #20]
 8016918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801691c:	0d1b      	lsrs	r3, r3, #20
 801691e:	051b      	lsls	r3, r3, #20
 8016920:	b133      	cbz	r3, 8016930 <_dtoa_r+0x7e8>
 8016922:	9b00      	ldr	r3, [sp, #0]
 8016924:	3301      	adds	r3, #1
 8016926:	9300      	str	r3, [sp, #0]
 8016928:	9b06      	ldr	r3, [sp, #24]
 801692a:	3301      	adds	r3, #1
 801692c:	9306      	str	r3, [sp, #24]
 801692e:	2301      	movs	r3, #1
 8016930:	9308      	str	r3, [sp, #32]
 8016932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016934:	2b00      	cmp	r3, #0
 8016936:	f000 81b8 	beq.w	8016caa <_dtoa_r+0xb62>
 801693a:	6923      	ldr	r3, [r4, #16]
 801693c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016940:	6918      	ldr	r0, [r3, #16]
 8016942:	f000 fbc5 	bl	80170d0 <__hi0bits>
 8016946:	f1c0 0020 	rsb	r0, r0, #32
 801694a:	9b06      	ldr	r3, [sp, #24]
 801694c:	4418      	add	r0, r3
 801694e:	f010 001f 	ands.w	r0, r0, #31
 8016952:	f000 8082 	beq.w	8016a5a <_dtoa_r+0x912>
 8016956:	f1c0 0320 	rsb	r3, r0, #32
 801695a:	2b04      	cmp	r3, #4
 801695c:	dd73      	ble.n	8016a46 <_dtoa_r+0x8fe>
 801695e:	9b00      	ldr	r3, [sp, #0]
 8016960:	f1c0 001c 	rsb	r0, r0, #28
 8016964:	4403      	add	r3, r0
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	9b06      	ldr	r3, [sp, #24]
 801696a:	4403      	add	r3, r0
 801696c:	4406      	add	r6, r0
 801696e:	9306      	str	r3, [sp, #24]
 8016970:	9b00      	ldr	r3, [sp, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	dd05      	ble.n	8016982 <_dtoa_r+0x83a>
 8016976:	9902      	ldr	r1, [sp, #8]
 8016978:	461a      	mov	r2, r3
 801697a:	4648      	mov	r0, r9
 801697c:	f000 fd06 	bl	801738c <__lshift>
 8016980:	9002      	str	r0, [sp, #8]
 8016982:	9b06      	ldr	r3, [sp, #24]
 8016984:	2b00      	cmp	r3, #0
 8016986:	dd05      	ble.n	8016994 <_dtoa_r+0x84c>
 8016988:	4621      	mov	r1, r4
 801698a:	461a      	mov	r2, r3
 801698c:	4648      	mov	r0, r9
 801698e:	f000 fcfd 	bl	801738c <__lshift>
 8016992:	4604      	mov	r4, r0
 8016994:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016996:	2b00      	cmp	r3, #0
 8016998:	d061      	beq.n	8016a5e <_dtoa_r+0x916>
 801699a:	9802      	ldr	r0, [sp, #8]
 801699c:	4621      	mov	r1, r4
 801699e:	f000 fd61 	bl	8017464 <__mcmp>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	da5b      	bge.n	8016a5e <_dtoa_r+0x916>
 80169a6:	2300      	movs	r3, #0
 80169a8:	9902      	ldr	r1, [sp, #8]
 80169aa:	220a      	movs	r2, #10
 80169ac:	4648      	mov	r0, r9
 80169ae:	f000 fb49 	bl	8017044 <__multadd>
 80169b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169b4:	9002      	str	r0, [sp, #8]
 80169b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	f000 8177 	beq.w	8016cae <_dtoa_r+0xb66>
 80169c0:	4629      	mov	r1, r5
 80169c2:	2300      	movs	r3, #0
 80169c4:	220a      	movs	r2, #10
 80169c6:	4648      	mov	r0, r9
 80169c8:	f000 fb3c 	bl	8017044 <__multadd>
 80169cc:	f1bb 0f00 	cmp.w	fp, #0
 80169d0:	4605      	mov	r5, r0
 80169d2:	dc6f      	bgt.n	8016ab4 <_dtoa_r+0x96c>
 80169d4:	9b07      	ldr	r3, [sp, #28]
 80169d6:	2b02      	cmp	r3, #2
 80169d8:	dc49      	bgt.n	8016a6e <_dtoa_r+0x926>
 80169da:	e06b      	b.n	8016ab4 <_dtoa_r+0x96c>
 80169dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80169de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80169e2:	e73c      	b.n	801685e <_dtoa_r+0x716>
 80169e4:	3fe00000 	.word	0x3fe00000
 80169e8:	40240000 	.word	0x40240000
 80169ec:	9b03      	ldr	r3, [sp, #12]
 80169ee:	1e5c      	subs	r4, r3, #1
 80169f0:	9b08      	ldr	r3, [sp, #32]
 80169f2:	42a3      	cmp	r3, r4
 80169f4:	db09      	blt.n	8016a0a <_dtoa_r+0x8c2>
 80169f6:	1b1c      	subs	r4, r3, r4
 80169f8:	9b03      	ldr	r3, [sp, #12]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	f6bf af30 	bge.w	8016860 <_dtoa_r+0x718>
 8016a00:	9b00      	ldr	r3, [sp, #0]
 8016a02:	9a03      	ldr	r2, [sp, #12]
 8016a04:	1a9e      	subs	r6, r3, r2
 8016a06:	2300      	movs	r3, #0
 8016a08:	e72b      	b.n	8016862 <_dtoa_r+0x71a>
 8016a0a:	9b08      	ldr	r3, [sp, #32]
 8016a0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016a0e:	9408      	str	r4, [sp, #32]
 8016a10:	1ae3      	subs	r3, r4, r3
 8016a12:	441a      	add	r2, r3
 8016a14:	9e00      	ldr	r6, [sp, #0]
 8016a16:	9b03      	ldr	r3, [sp, #12]
 8016a18:	920d      	str	r2, [sp, #52]	@ 0x34
 8016a1a:	2400      	movs	r4, #0
 8016a1c:	e721      	b.n	8016862 <_dtoa_r+0x71a>
 8016a1e:	9c08      	ldr	r4, [sp, #32]
 8016a20:	9e00      	ldr	r6, [sp, #0]
 8016a22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016a24:	e728      	b.n	8016878 <_dtoa_r+0x730>
 8016a26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8016a2a:	e751      	b.n	80168d0 <_dtoa_r+0x788>
 8016a2c:	9a08      	ldr	r2, [sp, #32]
 8016a2e:	9902      	ldr	r1, [sp, #8]
 8016a30:	e750      	b.n	80168d4 <_dtoa_r+0x78c>
 8016a32:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a36:	e751      	b.n	80168dc <_dtoa_r+0x794>
 8016a38:	2300      	movs	r3, #0
 8016a3a:	e779      	b.n	8016930 <_dtoa_r+0x7e8>
 8016a3c:	9b04      	ldr	r3, [sp, #16]
 8016a3e:	e777      	b.n	8016930 <_dtoa_r+0x7e8>
 8016a40:	2300      	movs	r3, #0
 8016a42:	9308      	str	r3, [sp, #32]
 8016a44:	e779      	b.n	801693a <_dtoa_r+0x7f2>
 8016a46:	d093      	beq.n	8016970 <_dtoa_r+0x828>
 8016a48:	9a00      	ldr	r2, [sp, #0]
 8016a4a:	331c      	adds	r3, #28
 8016a4c:	441a      	add	r2, r3
 8016a4e:	9200      	str	r2, [sp, #0]
 8016a50:	9a06      	ldr	r2, [sp, #24]
 8016a52:	441a      	add	r2, r3
 8016a54:	441e      	add	r6, r3
 8016a56:	9206      	str	r2, [sp, #24]
 8016a58:	e78a      	b.n	8016970 <_dtoa_r+0x828>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	e7f4      	b.n	8016a48 <_dtoa_r+0x900>
 8016a5e:	9b03      	ldr	r3, [sp, #12]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	46b8      	mov	r8, r7
 8016a64:	dc20      	bgt.n	8016aa8 <_dtoa_r+0x960>
 8016a66:	469b      	mov	fp, r3
 8016a68:	9b07      	ldr	r3, [sp, #28]
 8016a6a:	2b02      	cmp	r3, #2
 8016a6c:	dd1e      	ble.n	8016aac <_dtoa_r+0x964>
 8016a6e:	f1bb 0f00 	cmp.w	fp, #0
 8016a72:	f47f adb1 	bne.w	80165d8 <_dtoa_r+0x490>
 8016a76:	4621      	mov	r1, r4
 8016a78:	465b      	mov	r3, fp
 8016a7a:	2205      	movs	r2, #5
 8016a7c:	4648      	mov	r0, r9
 8016a7e:	f000 fae1 	bl	8017044 <__multadd>
 8016a82:	4601      	mov	r1, r0
 8016a84:	4604      	mov	r4, r0
 8016a86:	9802      	ldr	r0, [sp, #8]
 8016a88:	f000 fcec 	bl	8017464 <__mcmp>
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	f77f ada3 	ble.w	80165d8 <_dtoa_r+0x490>
 8016a92:	4656      	mov	r6, sl
 8016a94:	2331      	movs	r3, #49	@ 0x31
 8016a96:	f806 3b01 	strb.w	r3, [r6], #1
 8016a9a:	f108 0801 	add.w	r8, r8, #1
 8016a9e:	e59f      	b.n	80165e0 <_dtoa_r+0x498>
 8016aa0:	9c03      	ldr	r4, [sp, #12]
 8016aa2:	46b8      	mov	r8, r7
 8016aa4:	4625      	mov	r5, r4
 8016aa6:	e7f4      	b.n	8016a92 <_dtoa_r+0x94a>
 8016aa8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8016aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f000 8101 	beq.w	8016cb6 <_dtoa_r+0xb6e>
 8016ab4:	2e00      	cmp	r6, #0
 8016ab6:	dd05      	ble.n	8016ac4 <_dtoa_r+0x97c>
 8016ab8:	4629      	mov	r1, r5
 8016aba:	4632      	mov	r2, r6
 8016abc:	4648      	mov	r0, r9
 8016abe:	f000 fc65 	bl	801738c <__lshift>
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	9b08      	ldr	r3, [sp, #32]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d05c      	beq.n	8016b84 <_dtoa_r+0xa3c>
 8016aca:	6869      	ldr	r1, [r5, #4]
 8016acc:	4648      	mov	r0, r9
 8016ace:	f000 fa57 	bl	8016f80 <_Balloc>
 8016ad2:	4606      	mov	r6, r0
 8016ad4:	b928      	cbnz	r0, 8016ae2 <_dtoa_r+0x99a>
 8016ad6:	4b82      	ldr	r3, [pc, #520]	@ (8016ce0 <_dtoa_r+0xb98>)
 8016ad8:	4602      	mov	r2, r0
 8016ada:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016ade:	f7ff bb4a 	b.w	8016176 <_dtoa_r+0x2e>
 8016ae2:	692a      	ldr	r2, [r5, #16]
 8016ae4:	3202      	adds	r2, #2
 8016ae6:	0092      	lsls	r2, r2, #2
 8016ae8:	f105 010c 	add.w	r1, r5, #12
 8016aec:	300c      	adds	r0, #12
 8016aee:	f7ff fa6c 	bl	8015fca <memcpy>
 8016af2:	2201      	movs	r2, #1
 8016af4:	4631      	mov	r1, r6
 8016af6:	4648      	mov	r0, r9
 8016af8:	f000 fc48 	bl	801738c <__lshift>
 8016afc:	f10a 0301 	add.w	r3, sl, #1
 8016b00:	9300      	str	r3, [sp, #0]
 8016b02:	eb0a 030b 	add.w	r3, sl, fp
 8016b06:	9308      	str	r3, [sp, #32]
 8016b08:	9b04      	ldr	r3, [sp, #16]
 8016b0a:	f003 0301 	and.w	r3, r3, #1
 8016b0e:	462f      	mov	r7, r5
 8016b10:	9306      	str	r3, [sp, #24]
 8016b12:	4605      	mov	r5, r0
 8016b14:	9b00      	ldr	r3, [sp, #0]
 8016b16:	9802      	ldr	r0, [sp, #8]
 8016b18:	4621      	mov	r1, r4
 8016b1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8016b1e:	f7ff fa89 	bl	8016034 <quorem>
 8016b22:	4603      	mov	r3, r0
 8016b24:	3330      	adds	r3, #48	@ 0x30
 8016b26:	9003      	str	r0, [sp, #12]
 8016b28:	4639      	mov	r1, r7
 8016b2a:	9802      	ldr	r0, [sp, #8]
 8016b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b2e:	f000 fc99 	bl	8017464 <__mcmp>
 8016b32:	462a      	mov	r2, r5
 8016b34:	9004      	str	r0, [sp, #16]
 8016b36:	4621      	mov	r1, r4
 8016b38:	4648      	mov	r0, r9
 8016b3a:	f000 fcaf 	bl	801749c <__mdiff>
 8016b3e:	68c2      	ldr	r2, [r0, #12]
 8016b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b42:	4606      	mov	r6, r0
 8016b44:	bb02      	cbnz	r2, 8016b88 <_dtoa_r+0xa40>
 8016b46:	4601      	mov	r1, r0
 8016b48:	9802      	ldr	r0, [sp, #8]
 8016b4a:	f000 fc8b 	bl	8017464 <__mcmp>
 8016b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b50:	4602      	mov	r2, r0
 8016b52:	4631      	mov	r1, r6
 8016b54:	4648      	mov	r0, r9
 8016b56:	920c      	str	r2, [sp, #48]	@ 0x30
 8016b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b5a:	f000 fa51 	bl	8017000 <_Bfree>
 8016b5e:	9b07      	ldr	r3, [sp, #28]
 8016b60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016b62:	9e00      	ldr	r6, [sp, #0]
 8016b64:	ea42 0103 	orr.w	r1, r2, r3
 8016b68:	9b06      	ldr	r3, [sp, #24]
 8016b6a:	4319      	orrs	r1, r3
 8016b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b6e:	d10d      	bne.n	8016b8c <_dtoa_r+0xa44>
 8016b70:	2b39      	cmp	r3, #57	@ 0x39
 8016b72:	d027      	beq.n	8016bc4 <_dtoa_r+0xa7c>
 8016b74:	9a04      	ldr	r2, [sp, #16]
 8016b76:	2a00      	cmp	r2, #0
 8016b78:	dd01      	ble.n	8016b7e <_dtoa_r+0xa36>
 8016b7a:	9b03      	ldr	r3, [sp, #12]
 8016b7c:	3331      	adds	r3, #49	@ 0x31
 8016b7e:	f88b 3000 	strb.w	r3, [fp]
 8016b82:	e52e      	b.n	80165e2 <_dtoa_r+0x49a>
 8016b84:	4628      	mov	r0, r5
 8016b86:	e7b9      	b.n	8016afc <_dtoa_r+0x9b4>
 8016b88:	2201      	movs	r2, #1
 8016b8a:	e7e2      	b.n	8016b52 <_dtoa_r+0xa0a>
 8016b8c:	9904      	ldr	r1, [sp, #16]
 8016b8e:	2900      	cmp	r1, #0
 8016b90:	db04      	blt.n	8016b9c <_dtoa_r+0xa54>
 8016b92:	9807      	ldr	r0, [sp, #28]
 8016b94:	4301      	orrs	r1, r0
 8016b96:	9806      	ldr	r0, [sp, #24]
 8016b98:	4301      	orrs	r1, r0
 8016b9a:	d120      	bne.n	8016bde <_dtoa_r+0xa96>
 8016b9c:	2a00      	cmp	r2, #0
 8016b9e:	ddee      	ble.n	8016b7e <_dtoa_r+0xa36>
 8016ba0:	9902      	ldr	r1, [sp, #8]
 8016ba2:	9300      	str	r3, [sp, #0]
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	4648      	mov	r0, r9
 8016ba8:	f000 fbf0 	bl	801738c <__lshift>
 8016bac:	4621      	mov	r1, r4
 8016bae:	9002      	str	r0, [sp, #8]
 8016bb0:	f000 fc58 	bl	8017464 <__mcmp>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	9b00      	ldr	r3, [sp, #0]
 8016bb8:	dc02      	bgt.n	8016bc0 <_dtoa_r+0xa78>
 8016bba:	d1e0      	bne.n	8016b7e <_dtoa_r+0xa36>
 8016bbc:	07da      	lsls	r2, r3, #31
 8016bbe:	d5de      	bpl.n	8016b7e <_dtoa_r+0xa36>
 8016bc0:	2b39      	cmp	r3, #57	@ 0x39
 8016bc2:	d1da      	bne.n	8016b7a <_dtoa_r+0xa32>
 8016bc4:	2339      	movs	r3, #57	@ 0x39
 8016bc6:	f88b 3000 	strb.w	r3, [fp]
 8016bca:	4633      	mov	r3, r6
 8016bcc:	461e      	mov	r6, r3
 8016bce:	3b01      	subs	r3, #1
 8016bd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016bd4:	2a39      	cmp	r2, #57	@ 0x39
 8016bd6:	d04e      	beq.n	8016c76 <_dtoa_r+0xb2e>
 8016bd8:	3201      	adds	r2, #1
 8016bda:	701a      	strb	r2, [r3, #0]
 8016bdc:	e501      	b.n	80165e2 <_dtoa_r+0x49a>
 8016bde:	2a00      	cmp	r2, #0
 8016be0:	dd03      	ble.n	8016bea <_dtoa_r+0xaa2>
 8016be2:	2b39      	cmp	r3, #57	@ 0x39
 8016be4:	d0ee      	beq.n	8016bc4 <_dtoa_r+0xa7c>
 8016be6:	3301      	adds	r3, #1
 8016be8:	e7c9      	b.n	8016b7e <_dtoa_r+0xa36>
 8016bea:	9a00      	ldr	r2, [sp, #0]
 8016bec:	9908      	ldr	r1, [sp, #32]
 8016bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016bf2:	428a      	cmp	r2, r1
 8016bf4:	d028      	beq.n	8016c48 <_dtoa_r+0xb00>
 8016bf6:	9902      	ldr	r1, [sp, #8]
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	220a      	movs	r2, #10
 8016bfc:	4648      	mov	r0, r9
 8016bfe:	f000 fa21 	bl	8017044 <__multadd>
 8016c02:	42af      	cmp	r7, r5
 8016c04:	9002      	str	r0, [sp, #8]
 8016c06:	f04f 0300 	mov.w	r3, #0
 8016c0a:	f04f 020a 	mov.w	r2, #10
 8016c0e:	4639      	mov	r1, r7
 8016c10:	4648      	mov	r0, r9
 8016c12:	d107      	bne.n	8016c24 <_dtoa_r+0xadc>
 8016c14:	f000 fa16 	bl	8017044 <__multadd>
 8016c18:	4607      	mov	r7, r0
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	9b00      	ldr	r3, [sp, #0]
 8016c1e:	3301      	adds	r3, #1
 8016c20:	9300      	str	r3, [sp, #0]
 8016c22:	e777      	b.n	8016b14 <_dtoa_r+0x9cc>
 8016c24:	f000 fa0e 	bl	8017044 <__multadd>
 8016c28:	4629      	mov	r1, r5
 8016c2a:	4607      	mov	r7, r0
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	220a      	movs	r2, #10
 8016c30:	4648      	mov	r0, r9
 8016c32:	f000 fa07 	bl	8017044 <__multadd>
 8016c36:	4605      	mov	r5, r0
 8016c38:	e7f0      	b.n	8016c1c <_dtoa_r+0xad4>
 8016c3a:	f1bb 0f00 	cmp.w	fp, #0
 8016c3e:	bfcc      	ite	gt
 8016c40:	465e      	movgt	r6, fp
 8016c42:	2601      	movle	r6, #1
 8016c44:	4456      	add	r6, sl
 8016c46:	2700      	movs	r7, #0
 8016c48:	9902      	ldr	r1, [sp, #8]
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	4648      	mov	r0, r9
 8016c50:	f000 fb9c 	bl	801738c <__lshift>
 8016c54:	4621      	mov	r1, r4
 8016c56:	9002      	str	r0, [sp, #8]
 8016c58:	f000 fc04 	bl	8017464 <__mcmp>
 8016c5c:	2800      	cmp	r0, #0
 8016c5e:	dcb4      	bgt.n	8016bca <_dtoa_r+0xa82>
 8016c60:	d102      	bne.n	8016c68 <_dtoa_r+0xb20>
 8016c62:	9b00      	ldr	r3, [sp, #0]
 8016c64:	07db      	lsls	r3, r3, #31
 8016c66:	d4b0      	bmi.n	8016bca <_dtoa_r+0xa82>
 8016c68:	4633      	mov	r3, r6
 8016c6a:	461e      	mov	r6, r3
 8016c6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016c70:	2a30      	cmp	r2, #48	@ 0x30
 8016c72:	d0fa      	beq.n	8016c6a <_dtoa_r+0xb22>
 8016c74:	e4b5      	b.n	80165e2 <_dtoa_r+0x49a>
 8016c76:	459a      	cmp	sl, r3
 8016c78:	d1a8      	bne.n	8016bcc <_dtoa_r+0xa84>
 8016c7a:	2331      	movs	r3, #49	@ 0x31
 8016c7c:	f108 0801 	add.w	r8, r8, #1
 8016c80:	f88a 3000 	strb.w	r3, [sl]
 8016c84:	e4ad      	b.n	80165e2 <_dtoa_r+0x49a>
 8016c86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016c88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8016ce4 <_dtoa_r+0xb9c>
 8016c8c:	b11b      	cbz	r3, 8016c96 <_dtoa_r+0xb4e>
 8016c8e:	f10a 0308 	add.w	r3, sl, #8
 8016c92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016c94:	6013      	str	r3, [r2, #0]
 8016c96:	4650      	mov	r0, sl
 8016c98:	b017      	add	sp, #92	@ 0x5c
 8016c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9e:	9b07      	ldr	r3, [sp, #28]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	f77f ae2e 	ble.w	8016902 <_dtoa_r+0x7ba>
 8016ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ca8:	9308      	str	r3, [sp, #32]
 8016caa:	2001      	movs	r0, #1
 8016cac:	e64d      	b.n	801694a <_dtoa_r+0x802>
 8016cae:	f1bb 0f00 	cmp.w	fp, #0
 8016cb2:	f77f aed9 	ble.w	8016a68 <_dtoa_r+0x920>
 8016cb6:	4656      	mov	r6, sl
 8016cb8:	9802      	ldr	r0, [sp, #8]
 8016cba:	4621      	mov	r1, r4
 8016cbc:	f7ff f9ba 	bl	8016034 <quorem>
 8016cc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8016cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8016cc8:	eba6 020a 	sub.w	r2, r6, sl
 8016ccc:	4593      	cmp	fp, r2
 8016cce:	ddb4      	ble.n	8016c3a <_dtoa_r+0xaf2>
 8016cd0:	9902      	ldr	r1, [sp, #8]
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	220a      	movs	r2, #10
 8016cd6:	4648      	mov	r0, r9
 8016cd8:	f000 f9b4 	bl	8017044 <__multadd>
 8016cdc:	9002      	str	r0, [sp, #8]
 8016cde:	e7eb      	b.n	8016cb8 <_dtoa_r+0xb70>
 8016ce0:	0801aa49 	.word	0x0801aa49
 8016ce4:	0801a9e4 	.word	0x0801a9e4

08016ce8 <_free_r>:
 8016ce8:	b538      	push	{r3, r4, r5, lr}
 8016cea:	4605      	mov	r5, r0
 8016cec:	2900      	cmp	r1, #0
 8016cee:	d041      	beq.n	8016d74 <_free_r+0x8c>
 8016cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cf4:	1f0c      	subs	r4, r1, #4
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	bfb8      	it	lt
 8016cfa:	18e4      	addlt	r4, r4, r3
 8016cfc:	f000 f934 	bl	8016f68 <__malloc_lock>
 8016d00:	4a1d      	ldr	r2, [pc, #116]	@ (8016d78 <_free_r+0x90>)
 8016d02:	6813      	ldr	r3, [r2, #0]
 8016d04:	b933      	cbnz	r3, 8016d14 <_free_r+0x2c>
 8016d06:	6063      	str	r3, [r4, #4]
 8016d08:	6014      	str	r4, [r2, #0]
 8016d0a:	4628      	mov	r0, r5
 8016d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d10:	f000 b930 	b.w	8016f74 <__malloc_unlock>
 8016d14:	42a3      	cmp	r3, r4
 8016d16:	d908      	bls.n	8016d2a <_free_r+0x42>
 8016d18:	6820      	ldr	r0, [r4, #0]
 8016d1a:	1821      	adds	r1, r4, r0
 8016d1c:	428b      	cmp	r3, r1
 8016d1e:	bf01      	itttt	eq
 8016d20:	6819      	ldreq	r1, [r3, #0]
 8016d22:	685b      	ldreq	r3, [r3, #4]
 8016d24:	1809      	addeq	r1, r1, r0
 8016d26:	6021      	streq	r1, [r4, #0]
 8016d28:	e7ed      	b.n	8016d06 <_free_r+0x1e>
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	b10b      	cbz	r3, 8016d34 <_free_r+0x4c>
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	d9fa      	bls.n	8016d2a <_free_r+0x42>
 8016d34:	6811      	ldr	r1, [r2, #0]
 8016d36:	1850      	adds	r0, r2, r1
 8016d38:	42a0      	cmp	r0, r4
 8016d3a:	d10b      	bne.n	8016d54 <_free_r+0x6c>
 8016d3c:	6820      	ldr	r0, [r4, #0]
 8016d3e:	4401      	add	r1, r0
 8016d40:	1850      	adds	r0, r2, r1
 8016d42:	4283      	cmp	r3, r0
 8016d44:	6011      	str	r1, [r2, #0]
 8016d46:	d1e0      	bne.n	8016d0a <_free_r+0x22>
 8016d48:	6818      	ldr	r0, [r3, #0]
 8016d4a:	685b      	ldr	r3, [r3, #4]
 8016d4c:	6053      	str	r3, [r2, #4]
 8016d4e:	4408      	add	r0, r1
 8016d50:	6010      	str	r0, [r2, #0]
 8016d52:	e7da      	b.n	8016d0a <_free_r+0x22>
 8016d54:	d902      	bls.n	8016d5c <_free_r+0x74>
 8016d56:	230c      	movs	r3, #12
 8016d58:	602b      	str	r3, [r5, #0]
 8016d5a:	e7d6      	b.n	8016d0a <_free_r+0x22>
 8016d5c:	6820      	ldr	r0, [r4, #0]
 8016d5e:	1821      	adds	r1, r4, r0
 8016d60:	428b      	cmp	r3, r1
 8016d62:	bf04      	itt	eq
 8016d64:	6819      	ldreq	r1, [r3, #0]
 8016d66:	685b      	ldreq	r3, [r3, #4]
 8016d68:	6063      	str	r3, [r4, #4]
 8016d6a:	bf04      	itt	eq
 8016d6c:	1809      	addeq	r1, r1, r0
 8016d6e:	6021      	streq	r1, [r4, #0]
 8016d70:	6054      	str	r4, [r2, #4]
 8016d72:	e7ca      	b.n	8016d0a <_free_r+0x22>
 8016d74:	bd38      	pop	{r3, r4, r5, pc}
 8016d76:	bf00      	nop
 8016d78:	2000a980 	.word	0x2000a980

08016d7c <_findenv_r>:
 8016d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d80:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016df0 <_findenv_r+0x74>
 8016d84:	4606      	mov	r6, r0
 8016d86:	4689      	mov	r9, r1
 8016d88:	4617      	mov	r7, r2
 8016d8a:	f001 f831 	bl	8017df0 <__env_lock>
 8016d8e:	f8da 4000 	ldr.w	r4, [sl]
 8016d92:	b134      	cbz	r4, 8016da2 <_findenv_r+0x26>
 8016d94:	464b      	mov	r3, r9
 8016d96:	4698      	mov	r8, r3
 8016d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d9c:	b13a      	cbz	r2, 8016dae <_findenv_r+0x32>
 8016d9e:	2a3d      	cmp	r2, #61	@ 0x3d
 8016da0:	d1f9      	bne.n	8016d96 <_findenv_r+0x1a>
 8016da2:	4630      	mov	r0, r6
 8016da4:	f001 f82a 	bl	8017dfc <__env_unlock>
 8016da8:	2000      	movs	r0, #0
 8016daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dae:	eba8 0809 	sub.w	r8, r8, r9
 8016db2:	46a3      	mov	fp, r4
 8016db4:	f854 0b04 	ldr.w	r0, [r4], #4
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d0f2      	beq.n	8016da2 <_findenv_r+0x26>
 8016dbc:	4642      	mov	r2, r8
 8016dbe:	4649      	mov	r1, r9
 8016dc0:	f000 ff2e 	bl	8017c20 <strncmp>
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d1f4      	bne.n	8016db2 <_findenv_r+0x36>
 8016dc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016dcc:	eb03 0508 	add.w	r5, r3, r8
 8016dd0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016dd4:	2b3d      	cmp	r3, #61	@ 0x3d
 8016dd6:	d1ec      	bne.n	8016db2 <_findenv_r+0x36>
 8016dd8:	f8da 3000 	ldr.w	r3, [sl]
 8016ddc:	ebab 0303 	sub.w	r3, fp, r3
 8016de0:	109b      	asrs	r3, r3, #2
 8016de2:	4630      	mov	r0, r6
 8016de4:	603b      	str	r3, [r7, #0]
 8016de6:	f001 f809 	bl	8017dfc <__env_unlock>
 8016dea:	1c68      	adds	r0, r5, #1
 8016dec:	e7dd      	b.n	8016daa <_findenv_r+0x2e>
 8016dee:	bf00      	nop
 8016df0:	20000014 	.word	0x20000014

08016df4 <_getenv_r>:
 8016df4:	b507      	push	{r0, r1, r2, lr}
 8016df6:	aa01      	add	r2, sp, #4
 8016df8:	f7ff ffc0 	bl	8016d7c <_findenv_r>
 8016dfc:	b003      	add	sp, #12
 8016dfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016e04 <malloc>:
 8016e04:	4b02      	ldr	r3, [pc, #8]	@ (8016e10 <malloc+0xc>)
 8016e06:	4601      	mov	r1, r0
 8016e08:	6818      	ldr	r0, [r3, #0]
 8016e0a:	f000 b82d 	b.w	8016e68 <_malloc_r>
 8016e0e:	bf00      	nop
 8016e10:	20000038 	.word	0x20000038

08016e14 <free>:
 8016e14:	4b02      	ldr	r3, [pc, #8]	@ (8016e20 <free+0xc>)
 8016e16:	4601      	mov	r1, r0
 8016e18:	6818      	ldr	r0, [r3, #0]
 8016e1a:	f7ff bf65 	b.w	8016ce8 <_free_r>
 8016e1e:	bf00      	nop
 8016e20:	20000038 	.word	0x20000038

08016e24 <sbrk_aligned>:
 8016e24:	b570      	push	{r4, r5, r6, lr}
 8016e26:	4e0f      	ldr	r6, [pc, #60]	@ (8016e64 <sbrk_aligned+0x40>)
 8016e28:	460c      	mov	r4, r1
 8016e2a:	6831      	ldr	r1, [r6, #0]
 8016e2c:	4605      	mov	r5, r0
 8016e2e:	b911      	cbnz	r1, 8016e36 <sbrk_aligned+0x12>
 8016e30:	f000 ffb2 	bl	8017d98 <_sbrk_r>
 8016e34:	6030      	str	r0, [r6, #0]
 8016e36:	4621      	mov	r1, r4
 8016e38:	4628      	mov	r0, r5
 8016e3a:	f000 ffad 	bl	8017d98 <_sbrk_r>
 8016e3e:	1c43      	adds	r3, r0, #1
 8016e40:	d103      	bne.n	8016e4a <sbrk_aligned+0x26>
 8016e42:	f04f 34ff 	mov.w	r4, #4294967295
 8016e46:	4620      	mov	r0, r4
 8016e48:	bd70      	pop	{r4, r5, r6, pc}
 8016e4a:	1cc4      	adds	r4, r0, #3
 8016e4c:	f024 0403 	bic.w	r4, r4, #3
 8016e50:	42a0      	cmp	r0, r4
 8016e52:	d0f8      	beq.n	8016e46 <sbrk_aligned+0x22>
 8016e54:	1a21      	subs	r1, r4, r0
 8016e56:	4628      	mov	r0, r5
 8016e58:	f000 ff9e 	bl	8017d98 <_sbrk_r>
 8016e5c:	3001      	adds	r0, #1
 8016e5e:	d1f2      	bne.n	8016e46 <sbrk_aligned+0x22>
 8016e60:	e7ef      	b.n	8016e42 <sbrk_aligned+0x1e>
 8016e62:	bf00      	nop
 8016e64:	2000a97c 	.word	0x2000a97c

08016e68 <_malloc_r>:
 8016e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e6c:	1ccd      	adds	r5, r1, #3
 8016e6e:	f025 0503 	bic.w	r5, r5, #3
 8016e72:	3508      	adds	r5, #8
 8016e74:	2d0c      	cmp	r5, #12
 8016e76:	bf38      	it	cc
 8016e78:	250c      	movcc	r5, #12
 8016e7a:	2d00      	cmp	r5, #0
 8016e7c:	4606      	mov	r6, r0
 8016e7e:	db01      	blt.n	8016e84 <_malloc_r+0x1c>
 8016e80:	42a9      	cmp	r1, r5
 8016e82:	d904      	bls.n	8016e8e <_malloc_r+0x26>
 8016e84:	230c      	movs	r3, #12
 8016e86:	6033      	str	r3, [r6, #0]
 8016e88:	2000      	movs	r0, #0
 8016e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016f64 <_malloc_r+0xfc>
 8016e92:	f000 f869 	bl	8016f68 <__malloc_lock>
 8016e96:	f8d8 3000 	ldr.w	r3, [r8]
 8016e9a:	461c      	mov	r4, r3
 8016e9c:	bb44      	cbnz	r4, 8016ef0 <_malloc_r+0x88>
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	f7ff ffbf 	bl	8016e24 <sbrk_aligned>
 8016ea6:	1c43      	adds	r3, r0, #1
 8016ea8:	4604      	mov	r4, r0
 8016eaa:	d158      	bne.n	8016f5e <_malloc_r+0xf6>
 8016eac:	f8d8 4000 	ldr.w	r4, [r8]
 8016eb0:	4627      	mov	r7, r4
 8016eb2:	2f00      	cmp	r7, #0
 8016eb4:	d143      	bne.n	8016f3e <_malloc_r+0xd6>
 8016eb6:	2c00      	cmp	r4, #0
 8016eb8:	d04b      	beq.n	8016f52 <_malloc_r+0xea>
 8016eba:	6823      	ldr	r3, [r4, #0]
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	eb04 0903 	add.w	r9, r4, r3
 8016ec4:	f000 ff68 	bl	8017d98 <_sbrk_r>
 8016ec8:	4581      	cmp	r9, r0
 8016eca:	d142      	bne.n	8016f52 <_malloc_r+0xea>
 8016ecc:	6821      	ldr	r1, [r4, #0]
 8016ece:	1a6d      	subs	r5, r5, r1
 8016ed0:	4629      	mov	r1, r5
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	f7ff ffa6 	bl	8016e24 <sbrk_aligned>
 8016ed8:	3001      	adds	r0, #1
 8016eda:	d03a      	beq.n	8016f52 <_malloc_r+0xea>
 8016edc:	6823      	ldr	r3, [r4, #0]
 8016ede:	442b      	add	r3, r5
 8016ee0:	6023      	str	r3, [r4, #0]
 8016ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ee6:	685a      	ldr	r2, [r3, #4]
 8016ee8:	bb62      	cbnz	r2, 8016f44 <_malloc_r+0xdc>
 8016eea:	f8c8 7000 	str.w	r7, [r8]
 8016eee:	e00f      	b.n	8016f10 <_malloc_r+0xa8>
 8016ef0:	6822      	ldr	r2, [r4, #0]
 8016ef2:	1b52      	subs	r2, r2, r5
 8016ef4:	d420      	bmi.n	8016f38 <_malloc_r+0xd0>
 8016ef6:	2a0b      	cmp	r2, #11
 8016ef8:	d917      	bls.n	8016f2a <_malloc_r+0xc2>
 8016efa:	1961      	adds	r1, r4, r5
 8016efc:	42a3      	cmp	r3, r4
 8016efe:	6025      	str	r5, [r4, #0]
 8016f00:	bf18      	it	ne
 8016f02:	6059      	strne	r1, [r3, #4]
 8016f04:	6863      	ldr	r3, [r4, #4]
 8016f06:	bf08      	it	eq
 8016f08:	f8c8 1000 	streq.w	r1, [r8]
 8016f0c:	5162      	str	r2, [r4, r5]
 8016f0e:	604b      	str	r3, [r1, #4]
 8016f10:	4630      	mov	r0, r6
 8016f12:	f000 f82f 	bl	8016f74 <__malloc_unlock>
 8016f16:	f104 000b 	add.w	r0, r4, #11
 8016f1a:	1d23      	adds	r3, r4, #4
 8016f1c:	f020 0007 	bic.w	r0, r0, #7
 8016f20:	1ac2      	subs	r2, r0, r3
 8016f22:	bf1c      	itt	ne
 8016f24:	1a1b      	subne	r3, r3, r0
 8016f26:	50a3      	strne	r3, [r4, r2]
 8016f28:	e7af      	b.n	8016e8a <_malloc_r+0x22>
 8016f2a:	6862      	ldr	r2, [r4, #4]
 8016f2c:	42a3      	cmp	r3, r4
 8016f2e:	bf0c      	ite	eq
 8016f30:	f8c8 2000 	streq.w	r2, [r8]
 8016f34:	605a      	strne	r2, [r3, #4]
 8016f36:	e7eb      	b.n	8016f10 <_malloc_r+0xa8>
 8016f38:	4623      	mov	r3, r4
 8016f3a:	6864      	ldr	r4, [r4, #4]
 8016f3c:	e7ae      	b.n	8016e9c <_malloc_r+0x34>
 8016f3e:	463c      	mov	r4, r7
 8016f40:	687f      	ldr	r7, [r7, #4]
 8016f42:	e7b6      	b.n	8016eb2 <_malloc_r+0x4a>
 8016f44:	461a      	mov	r2, r3
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	d1fb      	bne.n	8016f44 <_malloc_r+0xdc>
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	6053      	str	r3, [r2, #4]
 8016f50:	e7de      	b.n	8016f10 <_malloc_r+0xa8>
 8016f52:	230c      	movs	r3, #12
 8016f54:	6033      	str	r3, [r6, #0]
 8016f56:	4630      	mov	r0, r6
 8016f58:	f000 f80c 	bl	8016f74 <__malloc_unlock>
 8016f5c:	e794      	b.n	8016e88 <_malloc_r+0x20>
 8016f5e:	6005      	str	r5, [r0, #0]
 8016f60:	e7d6      	b.n	8016f10 <_malloc_r+0xa8>
 8016f62:	bf00      	nop
 8016f64:	2000a980 	.word	0x2000a980

08016f68 <__malloc_lock>:
 8016f68:	4801      	ldr	r0, [pc, #4]	@ (8016f70 <__malloc_lock+0x8>)
 8016f6a:	f7ff b823 	b.w	8015fb4 <__retarget_lock_acquire_recursive>
 8016f6e:	bf00      	nop
 8016f70:	2000a97a 	.word	0x2000a97a

08016f74 <__malloc_unlock>:
 8016f74:	4801      	ldr	r0, [pc, #4]	@ (8016f7c <__malloc_unlock+0x8>)
 8016f76:	f7ff b81f 	b.w	8015fb8 <__retarget_lock_release_recursive>
 8016f7a:	bf00      	nop
 8016f7c:	2000a97a 	.word	0x2000a97a

08016f80 <_Balloc>:
 8016f80:	b570      	push	{r4, r5, r6, lr}
 8016f82:	69c6      	ldr	r6, [r0, #28]
 8016f84:	4604      	mov	r4, r0
 8016f86:	460d      	mov	r5, r1
 8016f88:	b976      	cbnz	r6, 8016fa8 <_Balloc+0x28>
 8016f8a:	2010      	movs	r0, #16
 8016f8c:	f7ff ff3a 	bl	8016e04 <malloc>
 8016f90:	4602      	mov	r2, r0
 8016f92:	61e0      	str	r0, [r4, #28]
 8016f94:	b920      	cbnz	r0, 8016fa0 <_Balloc+0x20>
 8016f96:	4b18      	ldr	r3, [pc, #96]	@ (8016ff8 <_Balloc+0x78>)
 8016f98:	4818      	ldr	r0, [pc, #96]	@ (8016ffc <_Balloc+0x7c>)
 8016f9a:	216b      	movs	r1, #107	@ 0x6b
 8016f9c:	f7ff f824 	bl	8015fe8 <__assert_func>
 8016fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016fa4:	6006      	str	r6, [r0, #0]
 8016fa6:	60c6      	str	r6, [r0, #12]
 8016fa8:	69e6      	ldr	r6, [r4, #28]
 8016faa:	68f3      	ldr	r3, [r6, #12]
 8016fac:	b183      	cbz	r3, 8016fd0 <_Balloc+0x50>
 8016fae:	69e3      	ldr	r3, [r4, #28]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016fb6:	b9b8      	cbnz	r0, 8016fe8 <_Balloc+0x68>
 8016fb8:	2101      	movs	r1, #1
 8016fba:	fa01 f605 	lsl.w	r6, r1, r5
 8016fbe:	1d72      	adds	r2, r6, #5
 8016fc0:	0092      	lsls	r2, r2, #2
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f000 feff 	bl	8017dc6 <_calloc_r>
 8016fc8:	b160      	cbz	r0, 8016fe4 <_Balloc+0x64>
 8016fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016fce:	e00e      	b.n	8016fee <_Balloc+0x6e>
 8016fd0:	2221      	movs	r2, #33	@ 0x21
 8016fd2:	2104      	movs	r1, #4
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f000 fef6 	bl	8017dc6 <_calloc_r>
 8016fda:	69e3      	ldr	r3, [r4, #28]
 8016fdc:	60f0      	str	r0, [r6, #12]
 8016fde:	68db      	ldr	r3, [r3, #12]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d1e4      	bne.n	8016fae <_Balloc+0x2e>
 8016fe4:	2000      	movs	r0, #0
 8016fe6:	bd70      	pop	{r4, r5, r6, pc}
 8016fe8:	6802      	ldr	r2, [r0, #0]
 8016fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016fee:	2300      	movs	r3, #0
 8016ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ff4:	e7f7      	b.n	8016fe6 <_Balloc+0x66>
 8016ff6:	bf00      	nop
 8016ff8:	0801a860 	.word	0x0801a860
 8016ffc:	0801aa5a 	.word	0x0801aa5a

08017000 <_Bfree>:
 8017000:	b570      	push	{r4, r5, r6, lr}
 8017002:	69c6      	ldr	r6, [r0, #28]
 8017004:	4605      	mov	r5, r0
 8017006:	460c      	mov	r4, r1
 8017008:	b976      	cbnz	r6, 8017028 <_Bfree+0x28>
 801700a:	2010      	movs	r0, #16
 801700c:	f7ff fefa 	bl	8016e04 <malloc>
 8017010:	4602      	mov	r2, r0
 8017012:	61e8      	str	r0, [r5, #28]
 8017014:	b920      	cbnz	r0, 8017020 <_Bfree+0x20>
 8017016:	4b09      	ldr	r3, [pc, #36]	@ (801703c <_Bfree+0x3c>)
 8017018:	4809      	ldr	r0, [pc, #36]	@ (8017040 <_Bfree+0x40>)
 801701a:	218f      	movs	r1, #143	@ 0x8f
 801701c:	f7fe ffe4 	bl	8015fe8 <__assert_func>
 8017020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017024:	6006      	str	r6, [r0, #0]
 8017026:	60c6      	str	r6, [r0, #12]
 8017028:	b13c      	cbz	r4, 801703a <_Bfree+0x3a>
 801702a:	69eb      	ldr	r3, [r5, #28]
 801702c:	6862      	ldr	r2, [r4, #4]
 801702e:	68db      	ldr	r3, [r3, #12]
 8017030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017034:	6021      	str	r1, [r4, #0]
 8017036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801703a:	bd70      	pop	{r4, r5, r6, pc}
 801703c:	0801a860 	.word	0x0801a860
 8017040:	0801aa5a 	.word	0x0801aa5a

08017044 <__multadd>:
 8017044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017048:	690d      	ldr	r5, [r1, #16]
 801704a:	4607      	mov	r7, r0
 801704c:	460c      	mov	r4, r1
 801704e:	461e      	mov	r6, r3
 8017050:	f101 0c14 	add.w	ip, r1, #20
 8017054:	2000      	movs	r0, #0
 8017056:	f8dc 3000 	ldr.w	r3, [ip]
 801705a:	b299      	uxth	r1, r3
 801705c:	fb02 6101 	mla	r1, r2, r1, r6
 8017060:	0c1e      	lsrs	r6, r3, #16
 8017062:	0c0b      	lsrs	r3, r1, #16
 8017064:	fb02 3306 	mla	r3, r2, r6, r3
 8017068:	b289      	uxth	r1, r1
 801706a:	3001      	adds	r0, #1
 801706c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017070:	4285      	cmp	r5, r0
 8017072:	f84c 1b04 	str.w	r1, [ip], #4
 8017076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801707a:	dcec      	bgt.n	8017056 <__multadd+0x12>
 801707c:	b30e      	cbz	r6, 80170c2 <__multadd+0x7e>
 801707e:	68a3      	ldr	r3, [r4, #8]
 8017080:	42ab      	cmp	r3, r5
 8017082:	dc19      	bgt.n	80170b8 <__multadd+0x74>
 8017084:	6861      	ldr	r1, [r4, #4]
 8017086:	4638      	mov	r0, r7
 8017088:	3101      	adds	r1, #1
 801708a:	f7ff ff79 	bl	8016f80 <_Balloc>
 801708e:	4680      	mov	r8, r0
 8017090:	b928      	cbnz	r0, 801709e <__multadd+0x5a>
 8017092:	4602      	mov	r2, r0
 8017094:	4b0c      	ldr	r3, [pc, #48]	@ (80170c8 <__multadd+0x84>)
 8017096:	480d      	ldr	r0, [pc, #52]	@ (80170cc <__multadd+0x88>)
 8017098:	21ba      	movs	r1, #186	@ 0xba
 801709a:	f7fe ffa5 	bl	8015fe8 <__assert_func>
 801709e:	6922      	ldr	r2, [r4, #16]
 80170a0:	3202      	adds	r2, #2
 80170a2:	f104 010c 	add.w	r1, r4, #12
 80170a6:	0092      	lsls	r2, r2, #2
 80170a8:	300c      	adds	r0, #12
 80170aa:	f7fe ff8e 	bl	8015fca <memcpy>
 80170ae:	4621      	mov	r1, r4
 80170b0:	4638      	mov	r0, r7
 80170b2:	f7ff ffa5 	bl	8017000 <_Bfree>
 80170b6:	4644      	mov	r4, r8
 80170b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80170bc:	3501      	adds	r5, #1
 80170be:	615e      	str	r6, [r3, #20]
 80170c0:	6125      	str	r5, [r4, #16]
 80170c2:	4620      	mov	r0, r4
 80170c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170c8:	0801aa49 	.word	0x0801aa49
 80170cc:	0801aa5a 	.word	0x0801aa5a

080170d0 <__hi0bits>:
 80170d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80170d4:	4603      	mov	r3, r0
 80170d6:	bf36      	itet	cc
 80170d8:	0403      	lslcc	r3, r0, #16
 80170da:	2000      	movcs	r0, #0
 80170dc:	2010      	movcc	r0, #16
 80170de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80170e2:	bf3c      	itt	cc
 80170e4:	021b      	lslcc	r3, r3, #8
 80170e6:	3008      	addcc	r0, #8
 80170e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80170ec:	bf3c      	itt	cc
 80170ee:	011b      	lslcc	r3, r3, #4
 80170f0:	3004      	addcc	r0, #4
 80170f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170f6:	bf3c      	itt	cc
 80170f8:	009b      	lslcc	r3, r3, #2
 80170fa:	3002      	addcc	r0, #2
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	db05      	blt.n	801710c <__hi0bits+0x3c>
 8017100:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017104:	f100 0001 	add.w	r0, r0, #1
 8017108:	bf08      	it	eq
 801710a:	2020      	moveq	r0, #32
 801710c:	4770      	bx	lr

0801710e <__lo0bits>:
 801710e:	6803      	ldr	r3, [r0, #0]
 8017110:	4602      	mov	r2, r0
 8017112:	f013 0007 	ands.w	r0, r3, #7
 8017116:	d00b      	beq.n	8017130 <__lo0bits+0x22>
 8017118:	07d9      	lsls	r1, r3, #31
 801711a:	d421      	bmi.n	8017160 <__lo0bits+0x52>
 801711c:	0798      	lsls	r0, r3, #30
 801711e:	bf49      	itett	mi
 8017120:	085b      	lsrmi	r3, r3, #1
 8017122:	089b      	lsrpl	r3, r3, #2
 8017124:	2001      	movmi	r0, #1
 8017126:	6013      	strmi	r3, [r2, #0]
 8017128:	bf5c      	itt	pl
 801712a:	6013      	strpl	r3, [r2, #0]
 801712c:	2002      	movpl	r0, #2
 801712e:	4770      	bx	lr
 8017130:	b299      	uxth	r1, r3
 8017132:	b909      	cbnz	r1, 8017138 <__lo0bits+0x2a>
 8017134:	0c1b      	lsrs	r3, r3, #16
 8017136:	2010      	movs	r0, #16
 8017138:	b2d9      	uxtb	r1, r3
 801713a:	b909      	cbnz	r1, 8017140 <__lo0bits+0x32>
 801713c:	3008      	adds	r0, #8
 801713e:	0a1b      	lsrs	r3, r3, #8
 8017140:	0719      	lsls	r1, r3, #28
 8017142:	bf04      	itt	eq
 8017144:	091b      	lsreq	r3, r3, #4
 8017146:	3004      	addeq	r0, #4
 8017148:	0799      	lsls	r1, r3, #30
 801714a:	bf04      	itt	eq
 801714c:	089b      	lsreq	r3, r3, #2
 801714e:	3002      	addeq	r0, #2
 8017150:	07d9      	lsls	r1, r3, #31
 8017152:	d403      	bmi.n	801715c <__lo0bits+0x4e>
 8017154:	085b      	lsrs	r3, r3, #1
 8017156:	f100 0001 	add.w	r0, r0, #1
 801715a:	d003      	beq.n	8017164 <__lo0bits+0x56>
 801715c:	6013      	str	r3, [r2, #0]
 801715e:	4770      	bx	lr
 8017160:	2000      	movs	r0, #0
 8017162:	4770      	bx	lr
 8017164:	2020      	movs	r0, #32
 8017166:	4770      	bx	lr

08017168 <__i2b>:
 8017168:	b510      	push	{r4, lr}
 801716a:	460c      	mov	r4, r1
 801716c:	2101      	movs	r1, #1
 801716e:	f7ff ff07 	bl	8016f80 <_Balloc>
 8017172:	4602      	mov	r2, r0
 8017174:	b928      	cbnz	r0, 8017182 <__i2b+0x1a>
 8017176:	4b05      	ldr	r3, [pc, #20]	@ (801718c <__i2b+0x24>)
 8017178:	4805      	ldr	r0, [pc, #20]	@ (8017190 <__i2b+0x28>)
 801717a:	f240 1145 	movw	r1, #325	@ 0x145
 801717e:	f7fe ff33 	bl	8015fe8 <__assert_func>
 8017182:	2301      	movs	r3, #1
 8017184:	6144      	str	r4, [r0, #20]
 8017186:	6103      	str	r3, [r0, #16]
 8017188:	bd10      	pop	{r4, pc}
 801718a:	bf00      	nop
 801718c:	0801aa49 	.word	0x0801aa49
 8017190:	0801aa5a 	.word	0x0801aa5a

08017194 <__multiply>:
 8017194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017198:	4617      	mov	r7, r2
 801719a:	690a      	ldr	r2, [r1, #16]
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	429a      	cmp	r2, r3
 80171a0:	bfa8      	it	ge
 80171a2:	463b      	movge	r3, r7
 80171a4:	4689      	mov	r9, r1
 80171a6:	bfa4      	itt	ge
 80171a8:	460f      	movge	r7, r1
 80171aa:	4699      	movge	r9, r3
 80171ac:	693d      	ldr	r5, [r7, #16]
 80171ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	6879      	ldr	r1, [r7, #4]
 80171b6:	eb05 060a 	add.w	r6, r5, sl
 80171ba:	42b3      	cmp	r3, r6
 80171bc:	b085      	sub	sp, #20
 80171be:	bfb8      	it	lt
 80171c0:	3101      	addlt	r1, #1
 80171c2:	f7ff fedd 	bl	8016f80 <_Balloc>
 80171c6:	b930      	cbnz	r0, 80171d6 <__multiply+0x42>
 80171c8:	4602      	mov	r2, r0
 80171ca:	4b41      	ldr	r3, [pc, #260]	@ (80172d0 <__multiply+0x13c>)
 80171cc:	4841      	ldr	r0, [pc, #260]	@ (80172d4 <__multiply+0x140>)
 80171ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80171d2:	f7fe ff09 	bl	8015fe8 <__assert_func>
 80171d6:	f100 0414 	add.w	r4, r0, #20
 80171da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80171de:	4623      	mov	r3, r4
 80171e0:	2200      	movs	r2, #0
 80171e2:	4573      	cmp	r3, lr
 80171e4:	d320      	bcc.n	8017228 <__multiply+0x94>
 80171e6:	f107 0814 	add.w	r8, r7, #20
 80171ea:	f109 0114 	add.w	r1, r9, #20
 80171ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80171f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80171f6:	9302      	str	r3, [sp, #8]
 80171f8:	1beb      	subs	r3, r5, r7
 80171fa:	3b15      	subs	r3, #21
 80171fc:	f023 0303 	bic.w	r3, r3, #3
 8017200:	3304      	adds	r3, #4
 8017202:	3715      	adds	r7, #21
 8017204:	42bd      	cmp	r5, r7
 8017206:	bf38      	it	cc
 8017208:	2304      	movcc	r3, #4
 801720a:	9301      	str	r3, [sp, #4]
 801720c:	9b02      	ldr	r3, [sp, #8]
 801720e:	9103      	str	r1, [sp, #12]
 8017210:	428b      	cmp	r3, r1
 8017212:	d80c      	bhi.n	801722e <__multiply+0x9a>
 8017214:	2e00      	cmp	r6, #0
 8017216:	dd03      	ble.n	8017220 <__multiply+0x8c>
 8017218:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801721c:	2b00      	cmp	r3, #0
 801721e:	d055      	beq.n	80172cc <__multiply+0x138>
 8017220:	6106      	str	r6, [r0, #16]
 8017222:	b005      	add	sp, #20
 8017224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017228:	f843 2b04 	str.w	r2, [r3], #4
 801722c:	e7d9      	b.n	80171e2 <__multiply+0x4e>
 801722e:	f8b1 a000 	ldrh.w	sl, [r1]
 8017232:	f1ba 0f00 	cmp.w	sl, #0
 8017236:	d01f      	beq.n	8017278 <__multiply+0xe4>
 8017238:	46c4      	mov	ip, r8
 801723a:	46a1      	mov	r9, r4
 801723c:	2700      	movs	r7, #0
 801723e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017242:	f8d9 3000 	ldr.w	r3, [r9]
 8017246:	fa1f fb82 	uxth.w	fp, r2
 801724a:	b29b      	uxth	r3, r3
 801724c:	fb0a 330b 	mla	r3, sl, fp, r3
 8017250:	443b      	add	r3, r7
 8017252:	f8d9 7000 	ldr.w	r7, [r9]
 8017256:	0c12      	lsrs	r2, r2, #16
 8017258:	0c3f      	lsrs	r7, r7, #16
 801725a:	fb0a 7202 	mla	r2, sl, r2, r7
 801725e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8017262:	b29b      	uxth	r3, r3
 8017264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017268:	4565      	cmp	r5, ip
 801726a:	f849 3b04 	str.w	r3, [r9], #4
 801726e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8017272:	d8e4      	bhi.n	801723e <__multiply+0xaa>
 8017274:	9b01      	ldr	r3, [sp, #4]
 8017276:	50e7      	str	r7, [r4, r3]
 8017278:	9b03      	ldr	r3, [sp, #12]
 801727a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801727e:	3104      	adds	r1, #4
 8017280:	f1b9 0f00 	cmp.w	r9, #0
 8017284:	d020      	beq.n	80172c8 <__multiply+0x134>
 8017286:	6823      	ldr	r3, [r4, #0]
 8017288:	4647      	mov	r7, r8
 801728a:	46a4      	mov	ip, r4
 801728c:	f04f 0a00 	mov.w	sl, #0
 8017290:	f8b7 b000 	ldrh.w	fp, [r7]
 8017294:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8017298:	fb09 220b 	mla	r2, r9, fp, r2
 801729c:	4452      	add	r2, sl
 801729e:	b29b      	uxth	r3, r3
 80172a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172a4:	f84c 3b04 	str.w	r3, [ip], #4
 80172a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80172ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80172b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80172b4:	fb09 330a 	mla	r3, r9, sl, r3
 80172b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80172bc:	42bd      	cmp	r5, r7
 80172be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80172c2:	d8e5      	bhi.n	8017290 <__multiply+0xfc>
 80172c4:	9a01      	ldr	r2, [sp, #4]
 80172c6:	50a3      	str	r3, [r4, r2]
 80172c8:	3404      	adds	r4, #4
 80172ca:	e79f      	b.n	801720c <__multiply+0x78>
 80172cc:	3e01      	subs	r6, #1
 80172ce:	e7a1      	b.n	8017214 <__multiply+0x80>
 80172d0:	0801aa49 	.word	0x0801aa49
 80172d4:	0801aa5a 	.word	0x0801aa5a

080172d8 <__pow5mult>:
 80172d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172dc:	4615      	mov	r5, r2
 80172de:	f012 0203 	ands.w	r2, r2, #3
 80172e2:	4607      	mov	r7, r0
 80172e4:	460e      	mov	r6, r1
 80172e6:	d007      	beq.n	80172f8 <__pow5mult+0x20>
 80172e8:	4c25      	ldr	r4, [pc, #148]	@ (8017380 <__pow5mult+0xa8>)
 80172ea:	3a01      	subs	r2, #1
 80172ec:	2300      	movs	r3, #0
 80172ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80172f2:	f7ff fea7 	bl	8017044 <__multadd>
 80172f6:	4606      	mov	r6, r0
 80172f8:	10ad      	asrs	r5, r5, #2
 80172fa:	d03d      	beq.n	8017378 <__pow5mult+0xa0>
 80172fc:	69fc      	ldr	r4, [r7, #28]
 80172fe:	b97c      	cbnz	r4, 8017320 <__pow5mult+0x48>
 8017300:	2010      	movs	r0, #16
 8017302:	f7ff fd7f 	bl	8016e04 <malloc>
 8017306:	4602      	mov	r2, r0
 8017308:	61f8      	str	r0, [r7, #28]
 801730a:	b928      	cbnz	r0, 8017318 <__pow5mult+0x40>
 801730c:	4b1d      	ldr	r3, [pc, #116]	@ (8017384 <__pow5mult+0xac>)
 801730e:	481e      	ldr	r0, [pc, #120]	@ (8017388 <__pow5mult+0xb0>)
 8017310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017314:	f7fe fe68 	bl	8015fe8 <__assert_func>
 8017318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801731c:	6004      	str	r4, [r0, #0]
 801731e:	60c4      	str	r4, [r0, #12]
 8017320:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017328:	b94c      	cbnz	r4, 801733e <__pow5mult+0x66>
 801732a:	f240 2171 	movw	r1, #625	@ 0x271
 801732e:	4638      	mov	r0, r7
 8017330:	f7ff ff1a 	bl	8017168 <__i2b>
 8017334:	2300      	movs	r3, #0
 8017336:	f8c8 0008 	str.w	r0, [r8, #8]
 801733a:	4604      	mov	r4, r0
 801733c:	6003      	str	r3, [r0, #0]
 801733e:	f04f 0900 	mov.w	r9, #0
 8017342:	07eb      	lsls	r3, r5, #31
 8017344:	d50a      	bpl.n	801735c <__pow5mult+0x84>
 8017346:	4631      	mov	r1, r6
 8017348:	4622      	mov	r2, r4
 801734a:	4638      	mov	r0, r7
 801734c:	f7ff ff22 	bl	8017194 <__multiply>
 8017350:	4631      	mov	r1, r6
 8017352:	4680      	mov	r8, r0
 8017354:	4638      	mov	r0, r7
 8017356:	f7ff fe53 	bl	8017000 <_Bfree>
 801735a:	4646      	mov	r6, r8
 801735c:	106d      	asrs	r5, r5, #1
 801735e:	d00b      	beq.n	8017378 <__pow5mult+0xa0>
 8017360:	6820      	ldr	r0, [r4, #0]
 8017362:	b938      	cbnz	r0, 8017374 <__pow5mult+0x9c>
 8017364:	4622      	mov	r2, r4
 8017366:	4621      	mov	r1, r4
 8017368:	4638      	mov	r0, r7
 801736a:	f7ff ff13 	bl	8017194 <__multiply>
 801736e:	6020      	str	r0, [r4, #0]
 8017370:	f8c0 9000 	str.w	r9, [r0]
 8017374:	4604      	mov	r4, r0
 8017376:	e7e4      	b.n	8017342 <__pow5mult+0x6a>
 8017378:	4630      	mov	r0, r6
 801737a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801737e:	bf00      	nop
 8017380:	0801abac 	.word	0x0801abac
 8017384:	0801a860 	.word	0x0801a860
 8017388:	0801aa5a 	.word	0x0801aa5a

0801738c <__lshift>:
 801738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017390:	460c      	mov	r4, r1
 8017392:	6849      	ldr	r1, [r1, #4]
 8017394:	6923      	ldr	r3, [r4, #16]
 8017396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801739a:	68a3      	ldr	r3, [r4, #8]
 801739c:	4607      	mov	r7, r0
 801739e:	4691      	mov	r9, r2
 80173a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80173a4:	f108 0601 	add.w	r6, r8, #1
 80173a8:	42b3      	cmp	r3, r6
 80173aa:	db0b      	blt.n	80173c4 <__lshift+0x38>
 80173ac:	4638      	mov	r0, r7
 80173ae:	f7ff fde7 	bl	8016f80 <_Balloc>
 80173b2:	4605      	mov	r5, r0
 80173b4:	b948      	cbnz	r0, 80173ca <__lshift+0x3e>
 80173b6:	4602      	mov	r2, r0
 80173b8:	4b28      	ldr	r3, [pc, #160]	@ (801745c <__lshift+0xd0>)
 80173ba:	4829      	ldr	r0, [pc, #164]	@ (8017460 <__lshift+0xd4>)
 80173bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80173c0:	f7fe fe12 	bl	8015fe8 <__assert_func>
 80173c4:	3101      	adds	r1, #1
 80173c6:	005b      	lsls	r3, r3, #1
 80173c8:	e7ee      	b.n	80173a8 <__lshift+0x1c>
 80173ca:	2300      	movs	r3, #0
 80173cc:	f100 0114 	add.w	r1, r0, #20
 80173d0:	f100 0210 	add.w	r2, r0, #16
 80173d4:	4618      	mov	r0, r3
 80173d6:	4553      	cmp	r3, sl
 80173d8:	db33      	blt.n	8017442 <__lshift+0xb6>
 80173da:	6920      	ldr	r0, [r4, #16]
 80173dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80173e0:	f104 0314 	add.w	r3, r4, #20
 80173e4:	f019 091f 	ands.w	r9, r9, #31
 80173e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80173ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80173f0:	d02b      	beq.n	801744a <__lshift+0xbe>
 80173f2:	f1c9 0e20 	rsb	lr, r9, #32
 80173f6:	468a      	mov	sl, r1
 80173f8:	2200      	movs	r2, #0
 80173fa:	6818      	ldr	r0, [r3, #0]
 80173fc:	fa00 f009 	lsl.w	r0, r0, r9
 8017400:	4310      	orrs	r0, r2
 8017402:	f84a 0b04 	str.w	r0, [sl], #4
 8017406:	f853 2b04 	ldr.w	r2, [r3], #4
 801740a:	459c      	cmp	ip, r3
 801740c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017410:	d8f3      	bhi.n	80173fa <__lshift+0x6e>
 8017412:	ebac 0304 	sub.w	r3, ip, r4
 8017416:	3b15      	subs	r3, #21
 8017418:	f023 0303 	bic.w	r3, r3, #3
 801741c:	3304      	adds	r3, #4
 801741e:	f104 0015 	add.w	r0, r4, #21
 8017422:	4560      	cmp	r0, ip
 8017424:	bf88      	it	hi
 8017426:	2304      	movhi	r3, #4
 8017428:	50ca      	str	r2, [r1, r3]
 801742a:	b10a      	cbz	r2, 8017430 <__lshift+0xa4>
 801742c:	f108 0602 	add.w	r6, r8, #2
 8017430:	3e01      	subs	r6, #1
 8017432:	4638      	mov	r0, r7
 8017434:	612e      	str	r6, [r5, #16]
 8017436:	4621      	mov	r1, r4
 8017438:	f7ff fde2 	bl	8017000 <_Bfree>
 801743c:	4628      	mov	r0, r5
 801743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017442:	f842 0f04 	str.w	r0, [r2, #4]!
 8017446:	3301      	adds	r3, #1
 8017448:	e7c5      	b.n	80173d6 <__lshift+0x4a>
 801744a:	3904      	subs	r1, #4
 801744c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017450:	f841 2f04 	str.w	r2, [r1, #4]!
 8017454:	459c      	cmp	ip, r3
 8017456:	d8f9      	bhi.n	801744c <__lshift+0xc0>
 8017458:	e7ea      	b.n	8017430 <__lshift+0xa4>
 801745a:	bf00      	nop
 801745c:	0801aa49 	.word	0x0801aa49
 8017460:	0801aa5a 	.word	0x0801aa5a

08017464 <__mcmp>:
 8017464:	690a      	ldr	r2, [r1, #16]
 8017466:	4603      	mov	r3, r0
 8017468:	6900      	ldr	r0, [r0, #16]
 801746a:	1a80      	subs	r0, r0, r2
 801746c:	b530      	push	{r4, r5, lr}
 801746e:	d10e      	bne.n	801748e <__mcmp+0x2a>
 8017470:	3314      	adds	r3, #20
 8017472:	3114      	adds	r1, #20
 8017474:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017478:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801747c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017484:	4295      	cmp	r5, r2
 8017486:	d003      	beq.n	8017490 <__mcmp+0x2c>
 8017488:	d205      	bcs.n	8017496 <__mcmp+0x32>
 801748a:	f04f 30ff 	mov.w	r0, #4294967295
 801748e:	bd30      	pop	{r4, r5, pc}
 8017490:	42a3      	cmp	r3, r4
 8017492:	d3f3      	bcc.n	801747c <__mcmp+0x18>
 8017494:	e7fb      	b.n	801748e <__mcmp+0x2a>
 8017496:	2001      	movs	r0, #1
 8017498:	e7f9      	b.n	801748e <__mcmp+0x2a>
	...

0801749c <__mdiff>:
 801749c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a0:	4689      	mov	r9, r1
 80174a2:	4606      	mov	r6, r0
 80174a4:	4611      	mov	r1, r2
 80174a6:	4648      	mov	r0, r9
 80174a8:	4614      	mov	r4, r2
 80174aa:	f7ff ffdb 	bl	8017464 <__mcmp>
 80174ae:	1e05      	subs	r5, r0, #0
 80174b0:	d112      	bne.n	80174d8 <__mdiff+0x3c>
 80174b2:	4629      	mov	r1, r5
 80174b4:	4630      	mov	r0, r6
 80174b6:	f7ff fd63 	bl	8016f80 <_Balloc>
 80174ba:	4602      	mov	r2, r0
 80174bc:	b928      	cbnz	r0, 80174ca <__mdiff+0x2e>
 80174be:	4b3f      	ldr	r3, [pc, #252]	@ (80175bc <__mdiff+0x120>)
 80174c0:	f240 2137 	movw	r1, #567	@ 0x237
 80174c4:	483e      	ldr	r0, [pc, #248]	@ (80175c0 <__mdiff+0x124>)
 80174c6:	f7fe fd8f 	bl	8015fe8 <__assert_func>
 80174ca:	2301      	movs	r3, #1
 80174cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80174d0:	4610      	mov	r0, r2
 80174d2:	b003      	add	sp, #12
 80174d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d8:	bfbc      	itt	lt
 80174da:	464b      	movlt	r3, r9
 80174dc:	46a1      	movlt	r9, r4
 80174de:	4630      	mov	r0, r6
 80174e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80174e4:	bfba      	itte	lt
 80174e6:	461c      	movlt	r4, r3
 80174e8:	2501      	movlt	r5, #1
 80174ea:	2500      	movge	r5, #0
 80174ec:	f7ff fd48 	bl	8016f80 <_Balloc>
 80174f0:	4602      	mov	r2, r0
 80174f2:	b918      	cbnz	r0, 80174fc <__mdiff+0x60>
 80174f4:	4b31      	ldr	r3, [pc, #196]	@ (80175bc <__mdiff+0x120>)
 80174f6:	f240 2145 	movw	r1, #581	@ 0x245
 80174fa:	e7e3      	b.n	80174c4 <__mdiff+0x28>
 80174fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017500:	6926      	ldr	r6, [r4, #16]
 8017502:	60c5      	str	r5, [r0, #12]
 8017504:	f109 0310 	add.w	r3, r9, #16
 8017508:	f109 0514 	add.w	r5, r9, #20
 801750c:	f104 0e14 	add.w	lr, r4, #20
 8017510:	f100 0b14 	add.w	fp, r0, #20
 8017514:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017518:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801751c:	9301      	str	r3, [sp, #4]
 801751e:	46d9      	mov	r9, fp
 8017520:	f04f 0c00 	mov.w	ip, #0
 8017524:	9b01      	ldr	r3, [sp, #4]
 8017526:	f85e 0b04 	ldr.w	r0, [lr], #4
 801752a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801752e:	9301      	str	r3, [sp, #4]
 8017530:	fa1f f38a 	uxth.w	r3, sl
 8017534:	4619      	mov	r1, r3
 8017536:	b283      	uxth	r3, r0
 8017538:	1acb      	subs	r3, r1, r3
 801753a:	0c00      	lsrs	r0, r0, #16
 801753c:	4463      	add	r3, ip
 801753e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017542:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017546:	b29b      	uxth	r3, r3
 8017548:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801754c:	4576      	cmp	r6, lr
 801754e:	f849 3b04 	str.w	r3, [r9], #4
 8017552:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017556:	d8e5      	bhi.n	8017524 <__mdiff+0x88>
 8017558:	1b33      	subs	r3, r6, r4
 801755a:	3b15      	subs	r3, #21
 801755c:	f023 0303 	bic.w	r3, r3, #3
 8017560:	3415      	adds	r4, #21
 8017562:	3304      	adds	r3, #4
 8017564:	42a6      	cmp	r6, r4
 8017566:	bf38      	it	cc
 8017568:	2304      	movcc	r3, #4
 801756a:	441d      	add	r5, r3
 801756c:	445b      	add	r3, fp
 801756e:	461e      	mov	r6, r3
 8017570:	462c      	mov	r4, r5
 8017572:	4544      	cmp	r4, r8
 8017574:	d30e      	bcc.n	8017594 <__mdiff+0xf8>
 8017576:	f108 0103 	add.w	r1, r8, #3
 801757a:	1b49      	subs	r1, r1, r5
 801757c:	f021 0103 	bic.w	r1, r1, #3
 8017580:	3d03      	subs	r5, #3
 8017582:	45a8      	cmp	r8, r5
 8017584:	bf38      	it	cc
 8017586:	2100      	movcc	r1, #0
 8017588:	440b      	add	r3, r1
 801758a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801758e:	b191      	cbz	r1, 80175b6 <__mdiff+0x11a>
 8017590:	6117      	str	r7, [r2, #16]
 8017592:	e79d      	b.n	80174d0 <__mdiff+0x34>
 8017594:	f854 1b04 	ldr.w	r1, [r4], #4
 8017598:	46e6      	mov	lr, ip
 801759a:	0c08      	lsrs	r0, r1, #16
 801759c:	fa1c fc81 	uxtah	ip, ip, r1
 80175a0:	4471      	add	r1, lr
 80175a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80175a6:	b289      	uxth	r1, r1
 80175a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80175ac:	f846 1b04 	str.w	r1, [r6], #4
 80175b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80175b4:	e7dd      	b.n	8017572 <__mdiff+0xd6>
 80175b6:	3f01      	subs	r7, #1
 80175b8:	e7e7      	b.n	801758a <__mdiff+0xee>
 80175ba:	bf00      	nop
 80175bc:	0801aa49 	.word	0x0801aa49
 80175c0:	0801aa5a 	.word	0x0801aa5a

080175c4 <__d2b>:
 80175c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80175c8:	460f      	mov	r7, r1
 80175ca:	2101      	movs	r1, #1
 80175cc:	ec59 8b10 	vmov	r8, r9, d0
 80175d0:	4616      	mov	r6, r2
 80175d2:	f7ff fcd5 	bl	8016f80 <_Balloc>
 80175d6:	4604      	mov	r4, r0
 80175d8:	b930      	cbnz	r0, 80175e8 <__d2b+0x24>
 80175da:	4602      	mov	r2, r0
 80175dc:	4b23      	ldr	r3, [pc, #140]	@ (801766c <__d2b+0xa8>)
 80175de:	4824      	ldr	r0, [pc, #144]	@ (8017670 <__d2b+0xac>)
 80175e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80175e4:	f7fe fd00 	bl	8015fe8 <__assert_func>
 80175e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80175ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80175f0:	b10d      	cbz	r5, 80175f6 <__d2b+0x32>
 80175f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80175f6:	9301      	str	r3, [sp, #4]
 80175f8:	f1b8 0300 	subs.w	r3, r8, #0
 80175fc:	d023      	beq.n	8017646 <__d2b+0x82>
 80175fe:	4668      	mov	r0, sp
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	f7ff fd84 	bl	801710e <__lo0bits>
 8017606:	e9dd 1200 	ldrd	r1, r2, [sp]
 801760a:	b1d0      	cbz	r0, 8017642 <__d2b+0x7e>
 801760c:	f1c0 0320 	rsb	r3, r0, #32
 8017610:	fa02 f303 	lsl.w	r3, r2, r3
 8017614:	430b      	orrs	r3, r1
 8017616:	40c2      	lsrs	r2, r0
 8017618:	6163      	str	r3, [r4, #20]
 801761a:	9201      	str	r2, [sp, #4]
 801761c:	9b01      	ldr	r3, [sp, #4]
 801761e:	61a3      	str	r3, [r4, #24]
 8017620:	2b00      	cmp	r3, #0
 8017622:	bf0c      	ite	eq
 8017624:	2201      	moveq	r2, #1
 8017626:	2202      	movne	r2, #2
 8017628:	6122      	str	r2, [r4, #16]
 801762a:	b1a5      	cbz	r5, 8017656 <__d2b+0x92>
 801762c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017630:	4405      	add	r5, r0
 8017632:	603d      	str	r5, [r7, #0]
 8017634:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017638:	6030      	str	r0, [r6, #0]
 801763a:	4620      	mov	r0, r4
 801763c:	b003      	add	sp, #12
 801763e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017642:	6161      	str	r1, [r4, #20]
 8017644:	e7ea      	b.n	801761c <__d2b+0x58>
 8017646:	a801      	add	r0, sp, #4
 8017648:	f7ff fd61 	bl	801710e <__lo0bits>
 801764c:	9b01      	ldr	r3, [sp, #4]
 801764e:	6163      	str	r3, [r4, #20]
 8017650:	3020      	adds	r0, #32
 8017652:	2201      	movs	r2, #1
 8017654:	e7e8      	b.n	8017628 <__d2b+0x64>
 8017656:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801765a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801765e:	6038      	str	r0, [r7, #0]
 8017660:	6918      	ldr	r0, [r3, #16]
 8017662:	f7ff fd35 	bl	80170d0 <__hi0bits>
 8017666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801766a:	e7e5      	b.n	8017638 <__d2b+0x74>
 801766c:	0801aa49 	.word	0x0801aa49
 8017670:	0801aa5a 	.word	0x0801aa5a

08017674 <_strtoul_l.isra.0>:
 8017674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017678:	4e34      	ldr	r6, [pc, #208]	@ (801774c <_strtoul_l.isra.0+0xd8>)
 801767a:	4686      	mov	lr, r0
 801767c:	460d      	mov	r5, r1
 801767e:	4628      	mov	r0, r5
 8017680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017684:	5d37      	ldrb	r7, [r6, r4]
 8017686:	f017 0708 	ands.w	r7, r7, #8
 801768a:	d1f8      	bne.n	801767e <_strtoul_l.isra.0+0xa>
 801768c:	2c2d      	cmp	r4, #45	@ 0x2d
 801768e:	d110      	bne.n	80176b2 <_strtoul_l.isra.0+0x3e>
 8017690:	782c      	ldrb	r4, [r5, #0]
 8017692:	2701      	movs	r7, #1
 8017694:	1c85      	adds	r5, r0, #2
 8017696:	f033 0010 	bics.w	r0, r3, #16
 801769a:	d115      	bne.n	80176c8 <_strtoul_l.isra.0+0x54>
 801769c:	2c30      	cmp	r4, #48	@ 0x30
 801769e:	d10d      	bne.n	80176bc <_strtoul_l.isra.0+0x48>
 80176a0:	7828      	ldrb	r0, [r5, #0]
 80176a2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80176a6:	2858      	cmp	r0, #88	@ 0x58
 80176a8:	d108      	bne.n	80176bc <_strtoul_l.isra.0+0x48>
 80176aa:	786c      	ldrb	r4, [r5, #1]
 80176ac:	3502      	adds	r5, #2
 80176ae:	2310      	movs	r3, #16
 80176b0:	e00a      	b.n	80176c8 <_strtoul_l.isra.0+0x54>
 80176b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80176b4:	bf04      	itt	eq
 80176b6:	782c      	ldrbeq	r4, [r5, #0]
 80176b8:	1c85      	addeq	r5, r0, #2
 80176ba:	e7ec      	b.n	8017696 <_strtoul_l.isra.0+0x22>
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d1f6      	bne.n	80176ae <_strtoul_l.isra.0+0x3a>
 80176c0:	2c30      	cmp	r4, #48	@ 0x30
 80176c2:	bf14      	ite	ne
 80176c4:	230a      	movne	r3, #10
 80176c6:	2308      	moveq	r3, #8
 80176c8:	f04f 38ff 	mov.w	r8, #4294967295
 80176cc:	2600      	movs	r6, #0
 80176ce:	fbb8 f8f3 	udiv	r8, r8, r3
 80176d2:	fb03 f908 	mul.w	r9, r3, r8
 80176d6:	ea6f 0909 	mvn.w	r9, r9
 80176da:	4630      	mov	r0, r6
 80176dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80176e0:	f1bc 0f09 	cmp.w	ip, #9
 80176e4:	d810      	bhi.n	8017708 <_strtoul_l.isra.0+0x94>
 80176e6:	4664      	mov	r4, ip
 80176e8:	42a3      	cmp	r3, r4
 80176ea:	dd1e      	ble.n	801772a <_strtoul_l.isra.0+0xb6>
 80176ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80176f0:	d007      	beq.n	8017702 <_strtoul_l.isra.0+0x8e>
 80176f2:	4580      	cmp	r8, r0
 80176f4:	d316      	bcc.n	8017724 <_strtoul_l.isra.0+0xb0>
 80176f6:	d101      	bne.n	80176fc <_strtoul_l.isra.0+0x88>
 80176f8:	45a1      	cmp	r9, r4
 80176fa:	db13      	blt.n	8017724 <_strtoul_l.isra.0+0xb0>
 80176fc:	fb00 4003 	mla	r0, r0, r3, r4
 8017700:	2601      	movs	r6, #1
 8017702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017706:	e7e9      	b.n	80176dc <_strtoul_l.isra.0+0x68>
 8017708:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801770c:	f1bc 0f19 	cmp.w	ip, #25
 8017710:	d801      	bhi.n	8017716 <_strtoul_l.isra.0+0xa2>
 8017712:	3c37      	subs	r4, #55	@ 0x37
 8017714:	e7e8      	b.n	80176e8 <_strtoul_l.isra.0+0x74>
 8017716:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801771a:	f1bc 0f19 	cmp.w	ip, #25
 801771e:	d804      	bhi.n	801772a <_strtoul_l.isra.0+0xb6>
 8017720:	3c57      	subs	r4, #87	@ 0x57
 8017722:	e7e1      	b.n	80176e8 <_strtoul_l.isra.0+0x74>
 8017724:	f04f 36ff 	mov.w	r6, #4294967295
 8017728:	e7eb      	b.n	8017702 <_strtoul_l.isra.0+0x8e>
 801772a:	1c73      	adds	r3, r6, #1
 801772c:	d106      	bne.n	801773c <_strtoul_l.isra.0+0xc8>
 801772e:	2322      	movs	r3, #34	@ 0x22
 8017730:	f8ce 3000 	str.w	r3, [lr]
 8017734:	4630      	mov	r0, r6
 8017736:	b932      	cbnz	r2, 8017746 <_strtoul_l.isra.0+0xd2>
 8017738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801773c:	b107      	cbz	r7, 8017740 <_strtoul_l.isra.0+0xcc>
 801773e:	4240      	negs	r0, r0
 8017740:	2a00      	cmp	r2, #0
 8017742:	d0f9      	beq.n	8017738 <_strtoul_l.isra.0+0xc4>
 8017744:	b106      	cbz	r6, 8017748 <_strtoul_l.isra.0+0xd4>
 8017746:	1e69      	subs	r1, r5, #1
 8017748:	6011      	str	r1, [r2, #0]
 801774a:	e7f5      	b.n	8017738 <_strtoul_l.isra.0+0xc4>
 801774c:	0801aca9 	.word	0x0801aca9

08017750 <_strtoul_r>:
 8017750:	f7ff bf90 	b.w	8017674 <_strtoul_l.isra.0>

08017754 <strtoul>:
 8017754:	4613      	mov	r3, r2
 8017756:	460a      	mov	r2, r1
 8017758:	4601      	mov	r1, r0
 801775a:	4802      	ldr	r0, [pc, #8]	@ (8017764 <strtoul+0x10>)
 801775c:	6800      	ldr	r0, [r0, #0]
 801775e:	f7ff bf89 	b.w	8017674 <_strtoul_l.isra.0>
 8017762:	bf00      	nop
 8017764:	20000038 	.word	0x20000038

08017768 <__ssputs_r>:
 8017768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801776c:	688e      	ldr	r6, [r1, #8]
 801776e:	461f      	mov	r7, r3
 8017770:	42be      	cmp	r6, r7
 8017772:	680b      	ldr	r3, [r1, #0]
 8017774:	4682      	mov	sl, r0
 8017776:	460c      	mov	r4, r1
 8017778:	4690      	mov	r8, r2
 801777a:	d82d      	bhi.n	80177d8 <__ssputs_r+0x70>
 801777c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017784:	d026      	beq.n	80177d4 <__ssputs_r+0x6c>
 8017786:	6965      	ldr	r5, [r4, #20]
 8017788:	6909      	ldr	r1, [r1, #16]
 801778a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801778e:	eba3 0901 	sub.w	r9, r3, r1
 8017792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017796:	1c7b      	adds	r3, r7, #1
 8017798:	444b      	add	r3, r9
 801779a:	106d      	asrs	r5, r5, #1
 801779c:	429d      	cmp	r5, r3
 801779e:	bf38      	it	cc
 80177a0:	461d      	movcc	r5, r3
 80177a2:	0553      	lsls	r3, r2, #21
 80177a4:	d527      	bpl.n	80177f6 <__ssputs_r+0x8e>
 80177a6:	4629      	mov	r1, r5
 80177a8:	f7ff fb5e 	bl	8016e68 <_malloc_r>
 80177ac:	4606      	mov	r6, r0
 80177ae:	b360      	cbz	r0, 801780a <__ssputs_r+0xa2>
 80177b0:	6921      	ldr	r1, [r4, #16]
 80177b2:	464a      	mov	r2, r9
 80177b4:	f7fe fc09 	bl	8015fca <memcpy>
 80177b8:	89a3      	ldrh	r3, [r4, #12]
 80177ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80177be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177c2:	81a3      	strh	r3, [r4, #12]
 80177c4:	6126      	str	r6, [r4, #16]
 80177c6:	6165      	str	r5, [r4, #20]
 80177c8:	444e      	add	r6, r9
 80177ca:	eba5 0509 	sub.w	r5, r5, r9
 80177ce:	6026      	str	r6, [r4, #0]
 80177d0:	60a5      	str	r5, [r4, #8]
 80177d2:	463e      	mov	r6, r7
 80177d4:	42be      	cmp	r6, r7
 80177d6:	d900      	bls.n	80177da <__ssputs_r+0x72>
 80177d8:	463e      	mov	r6, r7
 80177da:	6820      	ldr	r0, [r4, #0]
 80177dc:	4632      	mov	r2, r6
 80177de:	4641      	mov	r1, r8
 80177e0:	f000 fa04 	bl	8017bec <memmove>
 80177e4:	68a3      	ldr	r3, [r4, #8]
 80177e6:	1b9b      	subs	r3, r3, r6
 80177e8:	60a3      	str	r3, [r4, #8]
 80177ea:	6823      	ldr	r3, [r4, #0]
 80177ec:	4433      	add	r3, r6
 80177ee:	6023      	str	r3, [r4, #0]
 80177f0:	2000      	movs	r0, #0
 80177f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177f6:	462a      	mov	r2, r5
 80177f8:	f000 fb18 	bl	8017e2c <_realloc_r>
 80177fc:	4606      	mov	r6, r0
 80177fe:	2800      	cmp	r0, #0
 8017800:	d1e0      	bne.n	80177c4 <__ssputs_r+0x5c>
 8017802:	6921      	ldr	r1, [r4, #16]
 8017804:	4650      	mov	r0, sl
 8017806:	f7ff fa6f 	bl	8016ce8 <_free_r>
 801780a:	230c      	movs	r3, #12
 801780c:	f8ca 3000 	str.w	r3, [sl]
 8017810:	89a3      	ldrh	r3, [r4, #12]
 8017812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017816:	81a3      	strh	r3, [r4, #12]
 8017818:	f04f 30ff 	mov.w	r0, #4294967295
 801781c:	e7e9      	b.n	80177f2 <__ssputs_r+0x8a>
	...

08017820 <_svfiprintf_r>:
 8017820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017824:	4698      	mov	r8, r3
 8017826:	898b      	ldrh	r3, [r1, #12]
 8017828:	061b      	lsls	r3, r3, #24
 801782a:	b09d      	sub	sp, #116	@ 0x74
 801782c:	4607      	mov	r7, r0
 801782e:	460d      	mov	r5, r1
 8017830:	4614      	mov	r4, r2
 8017832:	d510      	bpl.n	8017856 <_svfiprintf_r+0x36>
 8017834:	690b      	ldr	r3, [r1, #16]
 8017836:	b973      	cbnz	r3, 8017856 <_svfiprintf_r+0x36>
 8017838:	2140      	movs	r1, #64	@ 0x40
 801783a:	f7ff fb15 	bl	8016e68 <_malloc_r>
 801783e:	6028      	str	r0, [r5, #0]
 8017840:	6128      	str	r0, [r5, #16]
 8017842:	b930      	cbnz	r0, 8017852 <_svfiprintf_r+0x32>
 8017844:	230c      	movs	r3, #12
 8017846:	603b      	str	r3, [r7, #0]
 8017848:	f04f 30ff 	mov.w	r0, #4294967295
 801784c:	b01d      	add	sp, #116	@ 0x74
 801784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017852:	2340      	movs	r3, #64	@ 0x40
 8017854:	616b      	str	r3, [r5, #20]
 8017856:	2300      	movs	r3, #0
 8017858:	9309      	str	r3, [sp, #36]	@ 0x24
 801785a:	2320      	movs	r3, #32
 801785c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017860:	f8cd 800c 	str.w	r8, [sp, #12]
 8017864:	2330      	movs	r3, #48	@ 0x30
 8017866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017a04 <_svfiprintf_r+0x1e4>
 801786a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801786e:	f04f 0901 	mov.w	r9, #1
 8017872:	4623      	mov	r3, r4
 8017874:	469a      	mov	sl, r3
 8017876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801787a:	b10a      	cbz	r2, 8017880 <_svfiprintf_r+0x60>
 801787c:	2a25      	cmp	r2, #37	@ 0x25
 801787e:	d1f9      	bne.n	8017874 <_svfiprintf_r+0x54>
 8017880:	ebba 0b04 	subs.w	fp, sl, r4
 8017884:	d00b      	beq.n	801789e <_svfiprintf_r+0x7e>
 8017886:	465b      	mov	r3, fp
 8017888:	4622      	mov	r2, r4
 801788a:	4629      	mov	r1, r5
 801788c:	4638      	mov	r0, r7
 801788e:	f7ff ff6b 	bl	8017768 <__ssputs_r>
 8017892:	3001      	adds	r0, #1
 8017894:	f000 80a7 	beq.w	80179e6 <_svfiprintf_r+0x1c6>
 8017898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801789a:	445a      	add	r2, fp
 801789c:	9209      	str	r2, [sp, #36]	@ 0x24
 801789e:	f89a 3000 	ldrb.w	r3, [sl]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f000 809f 	beq.w	80179e6 <_svfiprintf_r+0x1c6>
 80178a8:	2300      	movs	r3, #0
 80178aa:	f04f 32ff 	mov.w	r2, #4294967295
 80178ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178b2:	f10a 0a01 	add.w	sl, sl, #1
 80178b6:	9304      	str	r3, [sp, #16]
 80178b8:	9307      	str	r3, [sp, #28]
 80178ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80178be:	931a      	str	r3, [sp, #104]	@ 0x68
 80178c0:	4654      	mov	r4, sl
 80178c2:	2205      	movs	r2, #5
 80178c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178c8:	484e      	ldr	r0, [pc, #312]	@ (8017a04 <_svfiprintf_r+0x1e4>)
 80178ca:	f7e8 fc69 	bl	80001a0 <memchr>
 80178ce:	9a04      	ldr	r2, [sp, #16]
 80178d0:	b9d8      	cbnz	r0, 801790a <_svfiprintf_r+0xea>
 80178d2:	06d0      	lsls	r0, r2, #27
 80178d4:	bf44      	itt	mi
 80178d6:	2320      	movmi	r3, #32
 80178d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178dc:	0711      	lsls	r1, r2, #28
 80178de:	bf44      	itt	mi
 80178e0:	232b      	movmi	r3, #43	@ 0x2b
 80178e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178e6:	f89a 3000 	ldrb.w	r3, [sl]
 80178ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80178ec:	d015      	beq.n	801791a <_svfiprintf_r+0xfa>
 80178ee:	9a07      	ldr	r2, [sp, #28]
 80178f0:	4654      	mov	r4, sl
 80178f2:	2000      	movs	r0, #0
 80178f4:	f04f 0c0a 	mov.w	ip, #10
 80178f8:	4621      	mov	r1, r4
 80178fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178fe:	3b30      	subs	r3, #48	@ 0x30
 8017900:	2b09      	cmp	r3, #9
 8017902:	d94b      	bls.n	801799c <_svfiprintf_r+0x17c>
 8017904:	b1b0      	cbz	r0, 8017934 <_svfiprintf_r+0x114>
 8017906:	9207      	str	r2, [sp, #28]
 8017908:	e014      	b.n	8017934 <_svfiprintf_r+0x114>
 801790a:	eba0 0308 	sub.w	r3, r0, r8
 801790e:	fa09 f303 	lsl.w	r3, r9, r3
 8017912:	4313      	orrs	r3, r2
 8017914:	9304      	str	r3, [sp, #16]
 8017916:	46a2      	mov	sl, r4
 8017918:	e7d2      	b.n	80178c0 <_svfiprintf_r+0xa0>
 801791a:	9b03      	ldr	r3, [sp, #12]
 801791c:	1d19      	adds	r1, r3, #4
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	9103      	str	r1, [sp, #12]
 8017922:	2b00      	cmp	r3, #0
 8017924:	bfbb      	ittet	lt
 8017926:	425b      	neglt	r3, r3
 8017928:	f042 0202 	orrlt.w	r2, r2, #2
 801792c:	9307      	strge	r3, [sp, #28]
 801792e:	9307      	strlt	r3, [sp, #28]
 8017930:	bfb8      	it	lt
 8017932:	9204      	strlt	r2, [sp, #16]
 8017934:	7823      	ldrb	r3, [r4, #0]
 8017936:	2b2e      	cmp	r3, #46	@ 0x2e
 8017938:	d10a      	bne.n	8017950 <_svfiprintf_r+0x130>
 801793a:	7863      	ldrb	r3, [r4, #1]
 801793c:	2b2a      	cmp	r3, #42	@ 0x2a
 801793e:	d132      	bne.n	80179a6 <_svfiprintf_r+0x186>
 8017940:	9b03      	ldr	r3, [sp, #12]
 8017942:	1d1a      	adds	r2, r3, #4
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	9203      	str	r2, [sp, #12]
 8017948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801794c:	3402      	adds	r4, #2
 801794e:	9305      	str	r3, [sp, #20]
 8017950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017a14 <_svfiprintf_r+0x1f4>
 8017954:	7821      	ldrb	r1, [r4, #0]
 8017956:	2203      	movs	r2, #3
 8017958:	4650      	mov	r0, sl
 801795a:	f7e8 fc21 	bl	80001a0 <memchr>
 801795e:	b138      	cbz	r0, 8017970 <_svfiprintf_r+0x150>
 8017960:	9b04      	ldr	r3, [sp, #16]
 8017962:	eba0 000a 	sub.w	r0, r0, sl
 8017966:	2240      	movs	r2, #64	@ 0x40
 8017968:	4082      	lsls	r2, r0
 801796a:	4313      	orrs	r3, r2
 801796c:	3401      	adds	r4, #1
 801796e:	9304      	str	r3, [sp, #16]
 8017970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017974:	4824      	ldr	r0, [pc, #144]	@ (8017a08 <_svfiprintf_r+0x1e8>)
 8017976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801797a:	2206      	movs	r2, #6
 801797c:	f7e8 fc10 	bl	80001a0 <memchr>
 8017980:	2800      	cmp	r0, #0
 8017982:	d036      	beq.n	80179f2 <_svfiprintf_r+0x1d2>
 8017984:	4b21      	ldr	r3, [pc, #132]	@ (8017a0c <_svfiprintf_r+0x1ec>)
 8017986:	bb1b      	cbnz	r3, 80179d0 <_svfiprintf_r+0x1b0>
 8017988:	9b03      	ldr	r3, [sp, #12]
 801798a:	3307      	adds	r3, #7
 801798c:	f023 0307 	bic.w	r3, r3, #7
 8017990:	3308      	adds	r3, #8
 8017992:	9303      	str	r3, [sp, #12]
 8017994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017996:	4433      	add	r3, r6
 8017998:	9309      	str	r3, [sp, #36]	@ 0x24
 801799a:	e76a      	b.n	8017872 <_svfiprintf_r+0x52>
 801799c:	fb0c 3202 	mla	r2, ip, r2, r3
 80179a0:	460c      	mov	r4, r1
 80179a2:	2001      	movs	r0, #1
 80179a4:	e7a8      	b.n	80178f8 <_svfiprintf_r+0xd8>
 80179a6:	2300      	movs	r3, #0
 80179a8:	3401      	adds	r4, #1
 80179aa:	9305      	str	r3, [sp, #20]
 80179ac:	4619      	mov	r1, r3
 80179ae:	f04f 0c0a 	mov.w	ip, #10
 80179b2:	4620      	mov	r0, r4
 80179b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179b8:	3a30      	subs	r2, #48	@ 0x30
 80179ba:	2a09      	cmp	r2, #9
 80179bc:	d903      	bls.n	80179c6 <_svfiprintf_r+0x1a6>
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d0c6      	beq.n	8017950 <_svfiprintf_r+0x130>
 80179c2:	9105      	str	r1, [sp, #20]
 80179c4:	e7c4      	b.n	8017950 <_svfiprintf_r+0x130>
 80179c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80179ca:	4604      	mov	r4, r0
 80179cc:	2301      	movs	r3, #1
 80179ce:	e7f0      	b.n	80179b2 <_svfiprintf_r+0x192>
 80179d0:	ab03      	add	r3, sp, #12
 80179d2:	9300      	str	r3, [sp, #0]
 80179d4:	462a      	mov	r2, r5
 80179d6:	4b0e      	ldr	r3, [pc, #56]	@ (8017a10 <_svfiprintf_r+0x1f0>)
 80179d8:	a904      	add	r1, sp, #16
 80179da:	4638      	mov	r0, r7
 80179dc:	f7fc ff0a 	bl	80147f4 <_printf_float>
 80179e0:	1c42      	adds	r2, r0, #1
 80179e2:	4606      	mov	r6, r0
 80179e4:	d1d6      	bne.n	8017994 <_svfiprintf_r+0x174>
 80179e6:	89ab      	ldrh	r3, [r5, #12]
 80179e8:	065b      	lsls	r3, r3, #25
 80179ea:	f53f af2d 	bmi.w	8017848 <_svfiprintf_r+0x28>
 80179ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179f0:	e72c      	b.n	801784c <_svfiprintf_r+0x2c>
 80179f2:	ab03      	add	r3, sp, #12
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	462a      	mov	r2, r5
 80179f8:	4b05      	ldr	r3, [pc, #20]	@ (8017a10 <_svfiprintf_r+0x1f0>)
 80179fa:	a904      	add	r1, sp, #16
 80179fc:	4638      	mov	r0, r7
 80179fe:	f7fd f991 	bl	8014d24 <_printf_i>
 8017a02:	e7ed      	b.n	80179e0 <_svfiprintf_r+0x1c0>
 8017a04:	0801aab3 	.word	0x0801aab3
 8017a08:	0801aabd 	.word	0x0801aabd
 8017a0c:	080147f5 	.word	0x080147f5
 8017a10:	08017769 	.word	0x08017769
 8017a14:	0801aab9 	.word	0x0801aab9

08017a18 <__sflush_r>:
 8017a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a20:	0716      	lsls	r6, r2, #28
 8017a22:	4605      	mov	r5, r0
 8017a24:	460c      	mov	r4, r1
 8017a26:	d454      	bmi.n	8017ad2 <__sflush_r+0xba>
 8017a28:	684b      	ldr	r3, [r1, #4]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	dc02      	bgt.n	8017a34 <__sflush_r+0x1c>
 8017a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	dd48      	ble.n	8017ac6 <__sflush_r+0xae>
 8017a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a36:	2e00      	cmp	r6, #0
 8017a38:	d045      	beq.n	8017ac6 <__sflush_r+0xae>
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a40:	682f      	ldr	r7, [r5, #0]
 8017a42:	6a21      	ldr	r1, [r4, #32]
 8017a44:	602b      	str	r3, [r5, #0]
 8017a46:	d030      	beq.n	8017aaa <__sflush_r+0x92>
 8017a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	0759      	lsls	r1, r3, #29
 8017a4e:	d505      	bpl.n	8017a5c <__sflush_r+0x44>
 8017a50:	6863      	ldr	r3, [r4, #4]
 8017a52:	1ad2      	subs	r2, r2, r3
 8017a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a56:	b10b      	cbz	r3, 8017a5c <__sflush_r+0x44>
 8017a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a5a:	1ad2      	subs	r2, r2, r3
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a60:	6a21      	ldr	r1, [r4, #32]
 8017a62:	4628      	mov	r0, r5
 8017a64:	47b0      	blx	r6
 8017a66:	1c43      	adds	r3, r0, #1
 8017a68:	89a3      	ldrh	r3, [r4, #12]
 8017a6a:	d106      	bne.n	8017a7a <__sflush_r+0x62>
 8017a6c:	6829      	ldr	r1, [r5, #0]
 8017a6e:	291d      	cmp	r1, #29
 8017a70:	d82b      	bhi.n	8017aca <__sflush_r+0xb2>
 8017a72:	4a2a      	ldr	r2, [pc, #168]	@ (8017b1c <__sflush_r+0x104>)
 8017a74:	40ca      	lsrs	r2, r1
 8017a76:	07d6      	lsls	r6, r2, #31
 8017a78:	d527      	bpl.n	8017aca <__sflush_r+0xb2>
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	6062      	str	r2, [r4, #4]
 8017a7e:	04d9      	lsls	r1, r3, #19
 8017a80:	6922      	ldr	r2, [r4, #16]
 8017a82:	6022      	str	r2, [r4, #0]
 8017a84:	d504      	bpl.n	8017a90 <__sflush_r+0x78>
 8017a86:	1c42      	adds	r2, r0, #1
 8017a88:	d101      	bne.n	8017a8e <__sflush_r+0x76>
 8017a8a:	682b      	ldr	r3, [r5, #0]
 8017a8c:	b903      	cbnz	r3, 8017a90 <__sflush_r+0x78>
 8017a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a92:	602f      	str	r7, [r5, #0]
 8017a94:	b1b9      	cbz	r1, 8017ac6 <__sflush_r+0xae>
 8017a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a9a:	4299      	cmp	r1, r3
 8017a9c:	d002      	beq.n	8017aa4 <__sflush_r+0x8c>
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f7ff f922 	bl	8016ce8 <_free_r>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8017aa8:	e00d      	b.n	8017ac6 <__sflush_r+0xae>
 8017aaa:	2301      	movs	r3, #1
 8017aac:	4628      	mov	r0, r5
 8017aae:	47b0      	blx	r6
 8017ab0:	4602      	mov	r2, r0
 8017ab2:	1c50      	adds	r0, r2, #1
 8017ab4:	d1c9      	bne.n	8017a4a <__sflush_r+0x32>
 8017ab6:	682b      	ldr	r3, [r5, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d0c6      	beq.n	8017a4a <__sflush_r+0x32>
 8017abc:	2b1d      	cmp	r3, #29
 8017abe:	d001      	beq.n	8017ac4 <__sflush_r+0xac>
 8017ac0:	2b16      	cmp	r3, #22
 8017ac2:	d11e      	bne.n	8017b02 <__sflush_r+0xea>
 8017ac4:	602f      	str	r7, [r5, #0]
 8017ac6:	2000      	movs	r0, #0
 8017ac8:	e022      	b.n	8017b10 <__sflush_r+0xf8>
 8017aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ace:	b21b      	sxth	r3, r3
 8017ad0:	e01b      	b.n	8017b0a <__sflush_r+0xf2>
 8017ad2:	690f      	ldr	r7, [r1, #16]
 8017ad4:	2f00      	cmp	r7, #0
 8017ad6:	d0f6      	beq.n	8017ac6 <__sflush_r+0xae>
 8017ad8:	0793      	lsls	r3, r2, #30
 8017ada:	680e      	ldr	r6, [r1, #0]
 8017adc:	bf08      	it	eq
 8017ade:	694b      	ldreq	r3, [r1, #20]
 8017ae0:	600f      	str	r7, [r1, #0]
 8017ae2:	bf18      	it	ne
 8017ae4:	2300      	movne	r3, #0
 8017ae6:	eba6 0807 	sub.w	r8, r6, r7
 8017aea:	608b      	str	r3, [r1, #8]
 8017aec:	f1b8 0f00 	cmp.w	r8, #0
 8017af0:	dde9      	ble.n	8017ac6 <__sflush_r+0xae>
 8017af2:	6a21      	ldr	r1, [r4, #32]
 8017af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017af6:	4643      	mov	r3, r8
 8017af8:	463a      	mov	r2, r7
 8017afa:	4628      	mov	r0, r5
 8017afc:	47b0      	blx	r6
 8017afe:	2800      	cmp	r0, #0
 8017b00:	dc08      	bgt.n	8017b14 <__sflush_r+0xfc>
 8017b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b0a:	81a3      	strh	r3, [r4, #12]
 8017b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b14:	4407      	add	r7, r0
 8017b16:	eba8 0800 	sub.w	r8, r8, r0
 8017b1a:	e7e7      	b.n	8017aec <__sflush_r+0xd4>
 8017b1c:	20400001 	.word	0x20400001

08017b20 <_fflush_r>:
 8017b20:	b538      	push	{r3, r4, r5, lr}
 8017b22:	690b      	ldr	r3, [r1, #16]
 8017b24:	4605      	mov	r5, r0
 8017b26:	460c      	mov	r4, r1
 8017b28:	b913      	cbnz	r3, 8017b30 <_fflush_r+0x10>
 8017b2a:	2500      	movs	r5, #0
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	bd38      	pop	{r3, r4, r5, pc}
 8017b30:	b118      	cbz	r0, 8017b3a <_fflush_r+0x1a>
 8017b32:	6a03      	ldr	r3, [r0, #32]
 8017b34:	b90b      	cbnz	r3, 8017b3a <_fflush_r+0x1a>
 8017b36:	f7fd fa9f 	bl	8015078 <__sinit>
 8017b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d0f3      	beq.n	8017b2a <_fflush_r+0xa>
 8017b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b44:	07d0      	lsls	r0, r2, #31
 8017b46:	d404      	bmi.n	8017b52 <_fflush_r+0x32>
 8017b48:	0599      	lsls	r1, r3, #22
 8017b4a:	d402      	bmi.n	8017b52 <_fflush_r+0x32>
 8017b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b4e:	f7fe fa31 	bl	8015fb4 <__retarget_lock_acquire_recursive>
 8017b52:	4628      	mov	r0, r5
 8017b54:	4621      	mov	r1, r4
 8017b56:	f7ff ff5f 	bl	8017a18 <__sflush_r>
 8017b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b5c:	07da      	lsls	r2, r3, #31
 8017b5e:	4605      	mov	r5, r0
 8017b60:	d4e4      	bmi.n	8017b2c <_fflush_r+0xc>
 8017b62:	89a3      	ldrh	r3, [r4, #12]
 8017b64:	059b      	lsls	r3, r3, #22
 8017b66:	d4e1      	bmi.n	8017b2c <_fflush_r+0xc>
 8017b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b6a:	f7fe fa25 	bl	8015fb8 <__retarget_lock_release_recursive>
 8017b6e:	e7dd      	b.n	8017b2c <_fflush_r+0xc>

08017b70 <fiprintf>:
 8017b70:	b40e      	push	{r1, r2, r3}
 8017b72:	b503      	push	{r0, r1, lr}
 8017b74:	4601      	mov	r1, r0
 8017b76:	ab03      	add	r3, sp, #12
 8017b78:	4805      	ldr	r0, [pc, #20]	@ (8017b90 <fiprintf+0x20>)
 8017b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b7e:	6800      	ldr	r0, [r0, #0]
 8017b80:	9301      	str	r3, [sp, #4]
 8017b82:	f000 fb89 	bl	8018298 <_vfiprintf_r>
 8017b86:	b002      	add	sp, #8
 8017b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b8c:	b003      	add	sp, #12
 8017b8e:	4770      	bx	lr
 8017b90:	20000038 	.word	0x20000038

08017b94 <siscanf>:
 8017b94:	b40e      	push	{r1, r2, r3}
 8017b96:	b570      	push	{r4, r5, r6, lr}
 8017b98:	b09d      	sub	sp, #116	@ 0x74
 8017b9a:	ac21      	add	r4, sp, #132	@ 0x84
 8017b9c:	2500      	movs	r5, #0
 8017b9e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017ba2:	f854 6b04 	ldr.w	r6, [r4], #4
 8017ba6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017baa:	951b      	str	r5, [sp, #108]	@ 0x6c
 8017bac:	9002      	str	r0, [sp, #8]
 8017bae:	9006      	str	r0, [sp, #24]
 8017bb0:	f7e8 fb46 	bl	8000240 <strlen>
 8017bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8017be4 <siscanf+0x50>)
 8017bb6:	9003      	str	r0, [sp, #12]
 8017bb8:	9007      	str	r0, [sp, #28]
 8017bba:	480b      	ldr	r0, [pc, #44]	@ (8017be8 <siscanf+0x54>)
 8017bbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bc6:	4632      	mov	r2, r6
 8017bc8:	4623      	mov	r3, r4
 8017bca:	a902      	add	r1, sp, #8
 8017bcc:	6800      	ldr	r0, [r0, #0]
 8017bce:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017bd0:	9514      	str	r5, [sp, #80]	@ 0x50
 8017bd2:	9401      	str	r4, [sp, #4]
 8017bd4:	f000 f9c0 	bl	8017f58 <__ssvfiscanf_r>
 8017bd8:	b01d      	add	sp, #116	@ 0x74
 8017bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bde:	b003      	add	sp, #12
 8017be0:	4770      	bx	lr
 8017be2:	bf00      	nop
 8017be4:	0801514b 	.word	0x0801514b
 8017be8:	20000038 	.word	0x20000038

08017bec <memmove>:
 8017bec:	4288      	cmp	r0, r1
 8017bee:	b510      	push	{r4, lr}
 8017bf0:	eb01 0402 	add.w	r4, r1, r2
 8017bf4:	d902      	bls.n	8017bfc <memmove+0x10>
 8017bf6:	4284      	cmp	r4, r0
 8017bf8:	4623      	mov	r3, r4
 8017bfa:	d807      	bhi.n	8017c0c <memmove+0x20>
 8017bfc:	1e43      	subs	r3, r0, #1
 8017bfe:	42a1      	cmp	r1, r4
 8017c00:	d008      	beq.n	8017c14 <memmove+0x28>
 8017c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c0a:	e7f8      	b.n	8017bfe <memmove+0x12>
 8017c0c:	4402      	add	r2, r0
 8017c0e:	4601      	mov	r1, r0
 8017c10:	428a      	cmp	r2, r1
 8017c12:	d100      	bne.n	8017c16 <memmove+0x2a>
 8017c14:	bd10      	pop	{r4, pc}
 8017c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c1e:	e7f7      	b.n	8017c10 <memmove+0x24>

08017c20 <strncmp>:
 8017c20:	b510      	push	{r4, lr}
 8017c22:	b16a      	cbz	r2, 8017c40 <strncmp+0x20>
 8017c24:	3901      	subs	r1, #1
 8017c26:	1884      	adds	r4, r0, r2
 8017c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d103      	bne.n	8017c3c <strncmp+0x1c>
 8017c34:	42a0      	cmp	r0, r4
 8017c36:	d001      	beq.n	8017c3c <strncmp+0x1c>
 8017c38:	2a00      	cmp	r2, #0
 8017c3a:	d1f5      	bne.n	8017c28 <strncmp+0x8>
 8017c3c:	1ad0      	subs	r0, r2, r3
 8017c3e:	bd10      	pop	{r4, pc}
 8017c40:	4610      	mov	r0, r2
 8017c42:	e7fc      	b.n	8017c3e <strncmp+0x1e>

08017c44 <__gettzinfo>:
 8017c44:	4800      	ldr	r0, [pc, #0]	@ (8017c48 <__gettzinfo+0x4>)
 8017c46:	4770      	bx	lr
 8017c48:	20000088 	.word	0x20000088

08017c4c <gmtime_r>:
 8017c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c50:	4a4d      	ldr	r2, [pc, #308]	@ (8017d88 <gmtime_r+0x13c>)
 8017c52:	460c      	mov	r4, r1
 8017c54:	2300      	movs	r3, #0
 8017c56:	e9d0 0100 	ldrd	r0, r1, [r0]
 8017c5a:	f7e8 fffd 	bl	8000c58 <__aeabi_ldivmod>
 8017c5e:	2a00      	cmp	r2, #0
 8017c60:	bfbc      	itt	lt
 8017c62:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8017c66:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8017c6a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8017c6e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8017c72:	fbb2 f3f1 	udiv	r3, r2, r1
 8017c76:	fb01 2213 	mls	r2, r1, r3, r2
 8017c7a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8017c7e:	bfac      	ite	ge
 8017c80:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8017c84:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8017c88:	60a3      	str	r3, [r4, #8]
 8017c8a:	fbb2 f3f1 	udiv	r3, r2, r1
 8017c8e:	fb01 2213 	mls	r2, r1, r3, r2
 8017c92:	6063      	str	r3, [r4, #4]
 8017c94:	6022      	str	r2, [r4, #0]
 8017c96:	1cc3      	adds	r3, r0, #3
 8017c98:	2207      	movs	r2, #7
 8017c9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8017c9e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8017ca2:	1a9b      	subs	r3, r3, r2
 8017ca4:	4939      	ldr	r1, [pc, #228]	@ (8017d8c <gmtime_r+0x140>)
 8017ca6:	d555      	bpl.n	8017d54 <gmtime_r+0x108>
 8017ca8:	3307      	adds	r3, #7
 8017caa:	61a3      	str	r3, [r4, #24]
 8017cac:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8017cb0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8017cb4:	fb93 f1f1 	sdiv	r1, r3, r1
 8017cb8:	4b35      	ldr	r3, [pc, #212]	@ (8017d90 <gmtime_r+0x144>)
 8017cba:	fb03 0001 	mla	r0, r3, r1, r0
 8017cbe:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8017cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8017cc6:	4403      	add	r3, r0
 8017cc8:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8017ccc:	fbb0 f2fc 	udiv	r2, r0, ip
 8017cd0:	1a9b      	subs	r3, r3, r2
 8017cd2:	f240 176d 	movw	r7, #365	@ 0x16d
 8017cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8017d94 <gmtime_r+0x148>)
 8017cd8:	fbb0 f2f2 	udiv	r2, r0, r2
 8017cdc:	2664      	movs	r6, #100	@ 0x64
 8017cde:	1a9b      	subs	r3, r3, r2
 8017ce0:	fbb3 f2f7 	udiv	r2, r3, r7
 8017ce4:	fbb3 f3fc 	udiv	r3, r3, ip
 8017ce8:	fbb2 f5f6 	udiv	r5, r2, r6
 8017cec:	1aeb      	subs	r3, r5, r3
 8017cee:	4403      	add	r3, r0
 8017cf0:	fb07 3312 	mls	r3, r7, r2, r3
 8017cf4:	2099      	movs	r0, #153	@ 0x99
 8017cf6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8017cfa:	3702      	adds	r7, #2
 8017cfc:	f103 0e01 	add.w	lr, r3, #1
 8017d00:	fbb7 fcf0 	udiv	ip, r7, r0
 8017d04:	fb00 f00c 	mul.w	r0, r0, ip
 8017d08:	3002      	adds	r0, #2
 8017d0a:	f04f 0805 	mov.w	r8, #5
 8017d0e:	fbb0 f0f8 	udiv	r0, r0, r8
 8017d12:	ebae 0000 	sub.w	r0, lr, r0
 8017d16:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8017d1a:	4577      	cmp	r7, lr
 8017d1c:	bf8c      	ite	hi
 8017d1e:	f06f 0709 	mvnhi.w	r7, #9
 8017d22:	2702      	movls	r7, #2
 8017d24:	4467      	add	r7, ip
 8017d26:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8017d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d2e:	2f01      	cmp	r7, #1
 8017d30:	bf98      	it	ls
 8017d32:	3101      	addls	r1, #1
 8017d34:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8017d38:	d312      	bcc.n	8017d60 <gmtime_r+0x114>
 8017d3a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8017d3e:	61e3      	str	r3, [r4, #28]
 8017d40:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8017d44:	2300      	movs	r3, #0
 8017d46:	60e0      	str	r0, [r4, #12]
 8017d48:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8017d4c:	6223      	str	r3, [r4, #32]
 8017d4e:	4620      	mov	r0, r4
 8017d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d54:	2800      	cmp	r0, #0
 8017d56:	61a3      	str	r3, [r4, #24]
 8017d58:	dba8      	blt.n	8017cac <gmtime_r+0x60>
 8017d5a:	fb90 f1f1 	sdiv	r1, r0, r1
 8017d5e:	e7ab      	b.n	8017cb8 <gmtime_r+0x6c>
 8017d60:	f012 0f03 	tst.w	r2, #3
 8017d64:	d102      	bne.n	8017d6c <gmtime_r+0x120>
 8017d66:	fb06 2515 	mls	r5, r6, r5, r2
 8017d6a:	b95d      	cbnz	r5, 8017d84 <gmtime_r+0x138>
 8017d6c:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8017d70:	fbb2 f6f5 	udiv	r6, r2, r5
 8017d74:	fb05 2216 	mls	r2, r5, r6, r2
 8017d78:	fab2 f282 	clz	r2, r2
 8017d7c:	0952      	lsrs	r2, r2, #5
 8017d7e:	333b      	adds	r3, #59	@ 0x3b
 8017d80:	4413      	add	r3, r2
 8017d82:	e7dc      	b.n	8017d3e <gmtime_r+0xf2>
 8017d84:	2201      	movs	r2, #1
 8017d86:	e7fa      	b.n	8017d7e <gmtime_r+0x132>
 8017d88:	00015180 	.word	0x00015180
 8017d8c:	00023ab1 	.word	0x00023ab1
 8017d90:	fffdc54f 	.word	0xfffdc54f
 8017d94:	00023ab0 	.word	0x00023ab0

08017d98 <_sbrk_r>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	4d06      	ldr	r5, [pc, #24]	@ (8017db4 <_sbrk_r+0x1c>)
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	4604      	mov	r4, r0
 8017da0:	4608      	mov	r0, r1
 8017da2:	602b      	str	r3, [r5, #0]
 8017da4:	f7f4 fbb2 	bl	800c50c <_sbrk>
 8017da8:	1c43      	adds	r3, r0, #1
 8017daa:	d102      	bne.n	8017db2 <_sbrk_r+0x1a>
 8017dac:	682b      	ldr	r3, [r5, #0]
 8017dae:	b103      	cbz	r3, 8017db2 <_sbrk_r+0x1a>
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	2000a974 	.word	0x2000a974

08017db8 <abort>:
 8017db8:	b508      	push	{r3, lr}
 8017dba:	2006      	movs	r0, #6
 8017dbc:	f000 fe02 	bl	80189c4 <raise>
 8017dc0:	2001      	movs	r0, #1
 8017dc2:	f7f4 fb2b 	bl	800c41c <_exit>

08017dc6 <_calloc_r>:
 8017dc6:	b570      	push	{r4, r5, r6, lr}
 8017dc8:	fba1 5402 	umull	r5, r4, r1, r2
 8017dcc:	b934      	cbnz	r4, 8017ddc <_calloc_r+0x16>
 8017dce:	4629      	mov	r1, r5
 8017dd0:	f7ff f84a 	bl	8016e68 <_malloc_r>
 8017dd4:	4606      	mov	r6, r0
 8017dd6:	b928      	cbnz	r0, 8017de4 <_calloc_r+0x1e>
 8017dd8:	4630      	mov	r0, r6
 8017dda:	bd70      	pop	{r4, r5, r6, pc}
 8017ddc:	220c      	movs	r2, #12
 8017dde:	6002      	str	r2, [r0, #0]
 8017de0:	2600      	movs	r6, #0
 8017de2:	e7f9      	b.n	8017dd8 <_calloc_r+0x12>
 8017de4:	462a      	mov	r2, r5
 8017de6:	4621      	mov	r1, r4
 8017de8:	f7fd f9e3 	bl	80151b2 <memset>
 8017dec:	e7f4      	b.n	8017dd8 <_calloc_r+0x12>
	...

08017df0 <__env_lock>:
 8017df0:	4801      	ldr	r0, [pc, #4]	@ (8017df8 <__env_lock+0x8>)
 8017df2:	f7fe b8df 	b.w	8015fb4 <__retarget_lock_acquire_recursive>
 8017df6:	bf00      	nop
 8017df8:	2000a979 	.word	0x2000a979

08017dfc <__env_unlock>:
 8017dfc:	4801      	ldr	r0, [pc, #4]	@ (8017e04 <__env_unlock+0x8>)
 8017dfe:	f7fe b8db 	b.w	8015fb8 <__retarget_lock_release_recursive>
 8017e02:	bf00      	nop
 8017e04:	2000a979 	.word	0x2000a979

08017e08 <__ascii_mbtowc>:
 8017e08:	b082      	sub	sp, #8
 8017e0a:	b901      	cbnz	r1, 8017e0e <__ascii_mbtowc+0x6>
 8017e0c:	a901      	add	r1, sp, #4
 8017e0e:	b142      	cbz	r2, 8017e22 <__ascii_mbtowc+0x1a>
 8017e10:	b14b      	cbz	r3, 8017e26 <__ascii_mbtowc+0x1e>
 8017e12:	7813      	ldrb	r3, [r2, #0]
 8017e14:	600b      	str	r3, [r1, #0]
 8017e16:	7812      	ldrb	r2, [r2, #0]
 8017e18:	1e10      	subs	r0, r2, #0
 8017e1a:	bf18      	it	ne
 8017e1c:	2001      	movne	r0, #1
 8017e1e:	b002      	add	sp, #8
 8017e20:	4770      	bx	lr
 8017e22:	4610      	mov	r0, r2
 8017e24:	e7fb      	b.n	8017e1e <__ascii_mbtowc+0x16>
 8017e26:	f06f 0001 	mvn.w	r0, #1
 8017e2a:	e7f8      	b.n	8017e1e <__ascii_mbtowc+0x16>

08017e2c <_realloc_r>:
 8017e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e30:	4607      	mov	r7, r0
 8017e32:	4614      	mov	r4, r2
 8017e34:	460d      	mov	r5, r1
 8017e36:	b921      	cbnz	r1, 8017e42 <_realloc_r+0x16>
 8017e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e3c:	4611      	mov	r1, r2
 8017e3e:	f7ff b813 	b.w	8016e68 <_malloc_r>
 8017e42:	b92a      	cbnz	r2, 8017e50 <_realloc_r+0x24>
 8017e44:	f7fe ff50 	bl	8016ce8 <_free_r>
 8017e48:	4625      	mov	r5, r4
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e50:	f000 fdd4 	bl	80189fc <_malloc_usable_size_r>
 8017e54:	4284      	cmp	r4, r0
 8017e56:	4606      	mov	r6, r0
 8017e58:	d802      	bhi.n	8017e60 <_realloc_r+0x34>
 8017e5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e5e:	d8f4      	bhi.n	8017e4a <_realloc_r+0x1e>
 8017e60:	4621      	mov	r1, r4
 8017e62:	4638      	mov	r0, r7
 8017e64:	f7ff f800 	bl	8016e68 <_malloc_r>
 8017e68:	4680      	mov	r8, r0
 8017e6a:	b908      	cbnz	r0, 8017e70 <_realloc_r+0x44>
 8017e6c:	4645      	mov	r5, r8
 8017e6e:	e7ec      	b.n	8017e4a <_realloc_r+0x1e>
 8017e70:	42b4      	cmp	r4, r6
 8017e72:	4622      	mov	r2, r4
 8017e74:	4629      	mov	r1, r5
 8017e76:	bf28      	it	cs
 8017e78:	4632      	movcs	r2, r6
 8017e7a:	f7fe f8a6 	bl	8015fca <memcpy>
 8017e7e:	4629      	mov	r1, r5
 8017e80:	4638      	mov	r0, r7
 8017e82:	f7fe ff31 	bl	8016ce8 <_free_r>
 8017e86:	e7f1      	b.n	8017e6c <_realloc_r+0x40>

08017e88 <__ascii_wctomb>:
 8017e88:	4603      	mov	r3, r0
 8017e8a:	4608      	mov	r0, r1
 8017e8c:	b141      	cbz	r1, 8017ea0 <__ascii_wctomb+0x18>
 8017e8e:	2aff      	cmp	r2, #255	@ 0xff
 8017e90:	d904      	bls.n	8017e9c <__ascii_wctomb+0x14>
 8017e92:	228a      	movs	r2, #138	@ 0x8a
 8017e94:	601a      	str	r2, [r3, #0]
 8017e96:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9a:	4770      	bx	lr
 8017e9c:	700a      	strb	r2, [r1, #0]
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	4770      	bx	lr

08017ea2 <_sungetc_r>:
 8017ea2:	b538      	push	{r3, r4, r5, lr}
 8017ea4:	1c4b      	adds	r3, r1, #1
 8017ea6:	4614      	mov	r4, r2
 8017ea8:	d103      	bne.n	8017eb2 <_sungetc_r+0x10>
 8017eaa:	f04f 35ff 	mov.w	r5, #4294967295
 8017eae:	4628      	mov	r0, r5
 8017eb0:	bd38      	pop	{r3, r4, r5, pc}
 8017eb2:	8993      	ldrh	r3, [r2, #12]
 8017eb4:	f023 0320 	bic.w	r3, r3, #32
 8017eb8:	8193      	strh	r3, [r2, #12]
 8017eba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ebc:	6852      	ldr	r2, [r2, #4]
 8017ebe:	b2cd      	uxtb	r5, r1
 8017ec0:	b18b      	cbz	r3, 8017ee6 <_sungetc_r+0x44>
 8017ec2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017ec4:	4293      	cmp	r3, r2
 8017ec6:	dd08      	ble.n	8017eda <_sungetc_r+0x38>
 8017ec8:	6823      	ldr	r3, [r4, #0]
 8017eca:	1e5a      	subs	r2, r3, #1
 8017ecc:	6022      	str	r2, [r4, #0]
 8017ece:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017ed2:	6863      	ldr	r3, [r4, #4]
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	6063      	str	r3, [r4, #4]
 8017ed8:	e7e9      	b.n	8017eae <_sungetc_r+0xc>
 8017eda:	4621      	mov	r1, r4
 8017edc:	f000 fc7b 	bl	80187d6 <__submore>
 8017ee0:	2800      	cmp	r0, #0
 8017ee2:	d0f1      	beq.n	8017ec8 <_sungetc_r+0x26>
 8017ee4:	e7e1      	b.n	8017eaa <_sungetc_r+0x8>
 8017ee6:	6921      	ldr	r1, [r4, #16]
 8017ee8:	6823      	ldr	r3, [r4, #0]
 8017eea:	b151      	cbz	r1, 8017f02 <_sungetc_r+0x60>
 8017eec:	4299      	cmp	r1, r3
 8017eee:	d208      	bcs.n	8017f02 <_sungetc_r+0x60>
 8017ef0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017ef4:	42a9      	cmp	r1, r5
 8017ef6:	d104      	bne.n	8017f02 <_sungetc_r+0x60>
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	3201      	adds	r2, #1
 8017efc:	6023      	str	r3, [r4, #0]
 8017efe:	6062      	str	r2, [r4, #4]
 8017f00:	e7d5      	b.n	8017eae <_sungetc_r+0xc>
 8017f02:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8017f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f0c:	2303      	movs	r3, #3
 8017f0e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017f10:	4623      	mov	r3, r4
 8017f12:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017f16:	6023      	str	r3, [r4, #0]
 8017f18:	2301      	movs	r3, #1
 8017f1a:	e7dc      	b.n	8017ed6 <_sungetc_r+0x34>

08017f1c <__ssrefill_r>:
 8017f1c:	b510      	push	{r4, lr}
 8017f1e:	460c      	mov	r4, r1
 8017f20:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017f22:	b169      	cbz	r1, 8017f40 <__ssrefill_r+0x24>
 8017f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f28:	4299      	cmp	r1, r3
 8017f2a:	d001      	beq.n	8017f30 <__ssrefill_r+0x14>
 8017f2c:	f7fe fedc 	bl	8016ce8 <_free_r>
 8017f30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f32:	6063      	str	r3, [r4, #4]
 8017f34:	2000      	movs	r0, #0
 8017f36:	6360      	str	r0, [r4, #52]	@ 0x34
 8017f38:	b113      	cbz	r3, 8017f40 <__ssrefill_r+0x24>
 8017f3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017f3c:	6023      	str	r3, [r4, #0]
 8017f3e:	bd10      	pop	{r4, pc}
 8017f40:	6923      	ldr	r3, [r4, #16]
 8017f42:	6023      	str	r3, [r4, #0]
 8017f44:	2300      	movs	r3, #0
 8017f46:	6063      	str	r3, [r4, #4]
 8017f48:	89a3      	ldrh	r3, [r4, #12]
 8017f4a:	f043 0320 	orr.w	r3, r3, #32
 8017f4e:	81a3      	strh	r3, [r4, #12]
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295
 8017f54:	e7f3      	b.n	8017f3e <__ssrefill_r+0x22>
	...

08017f58 <__ssvfiscanf_r>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	460c      	mov	r4, r1
 8017f5e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017f62:	2100      	movs	r1, #0
 8017f64:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017f68:	49a6      	ldr	r1, [pc, #664]	@ (8018204 <__ssvfiscanf_r+0x2ac>)
 8017f6a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017f6c:	f10d 0804 	add.w	r8, sp, #4
 8017f70:	49a5      	ldr	r1, [pc, #660]	@ (8018208 <__ssvfiscanf_r+0x2b0>)
 8017f72:	4fa6      	ldr	r7, [pc, #664]	@ (801820c <__ssvfiscanf_r+0x2b4>)
 8017f74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017f78:	4606      	mov	r6, r0
 8017f7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017f7c:	9300      	str	r3, [sp, #0]
 8017f7e:	f892 9000 	ldrb.w	r9, [r2]
 8017f82:	f1b9 0f00 	cmp.w	r9, #0
 8017f86:	f000 8158 	beq.w	801823a <__ssvfiscanf_r+0x2e2>
 8017f8a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8017f8e:	f013 0308 	ands.w	r3, r3, #8
 8017f92:	f102 0501 	add.w	r5, r2, #1
 8017f96:	d019      	beq.n	8017fcc <__ssvfiscanf_r+0x74>
 8017f98:	6863      	ldr	r3, [r4, #4]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	dd0f      	ble.n	8017fbe <__ssvfiscanf_r+0x66>
 8017f9e:	6823      	ldr	r3, [r4, #0]
 8017fa0:	781a      	ldrb	r2, [r3, #0]
 8017fa2:	5cba      	ldrb	r2, [r7, r2]
 8017fa4:	0712      	lsls	r2, r2, #28
 8017fa6:	d401      	bmi.n	8017fac <__ssvfiscanf_r+0x54>
 8017fa8:	462a      	mov	r2, r5
 8017faa:	e7e8      	b.n	8017f7e <__ssvfiscanf_r+0x26>
 8017fac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017fae:	3201      	adds	r2, #1
 8017fb0:	9245      	str	r2, [sp, #276]	@ 0x114
 8017fb2:	6862      	ldr	r2, [r4, #4]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	3a01      	subs	r2, #1
 8017fb8:	6062      	str	r2, [r4, #4]
 8017fba:	6023      	str	r3, [r4, #0]
 8017fbc:	e7ec      	b.n	8017f98 <__ssvfiscanf_r+0x40>
 8017fbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017fc0:	4621      	mov	r1, r4
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	4798      	blx	r3
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d0e9      	beq.n	8017f9e <__ssvfiscanf_r+0x46>
 8017fca:	e7ed      	b.n	8017fa8 <__ssvfiscanf_r+0x50>
 8017fcc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8017fd0:	f040 8085 	bne.w	80180de <__ssvfiscanf_r+0x186>
 8017fd4:	9341      	str	r3, [sp, #260]	@ 0x104
 8017fd6:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017fd8:	7853      	ldrb	r3, [r2, #1]
 8017fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fdc:	bf02      	ittt	eq
 8017fde:	2310      	moveq	r3, #16
 8017fe0:	1c95      	addeq	r5, r2, #2
 8017fe2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017fe4:	220a      	movs	r2, #10
 8017fe6:	46aa      	mov	sl, r5
 8017fe8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017fec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017ff0:	2b09      	cmp	r3, #9
 8017ff2:	d91e      	bls.n	8018032 <__ssvfiscanf_r+0xda>
 8017ff4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8018210 <__ssvfiscanf_r+0x2b8>
 8017ff8:	2203      	movs	r2, #3
 8017ffa:	4658      	mov	r0, fp
 8017ffc:	f7e8 f8d0 	bl	80001a0 <memchr>
 8018000:	b138      	cbz	r0, 8018012 <__ssvfiscanf_r+0xba>
 8018002:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018004:	eba0 000b 	sub.w	r0, r0, fp
 8018008:	2301      	movs	r3, #1
 801800a:	4083      	lsls	r3, r0
 801800c:	4313      	orrs	r3, r2
 801800e:	9341      	str	r3, [sp, #260]	@ 0x104
 8018010:	4655      	mov	r5, sl
 8018012:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018016:	2b78      	cmp	r3, #120	@ 0x78
 8018018:	d806      	bhi.n	8018028 <__ssvfiscanf_r+0xd0>
 801801a:	2b57      	cmp	r3, #87	@ 0x57
 801801c:	d810      	bhi.n	8018040 <__ssvfiscanf_r+0xe8>
 801801e:	2b25      	cmp	r3, #37	@ 0x25
 8018020:	d05d      	beq.n	80180de <__ssvfiscanf_r+0x186>
 8018022:	d857      	bhi.n	80180d4 <__ssvfiscanf_r+0x17c>
 8018024:	2b00      	cmp	r3, #0
 8018026:	d075      	beq.n	8018114 <__ssvfiscanf_r+0x1bc>
 8018028:	2303      	movs	r3, #3
 801802a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801802c:	230a      	movs	r3, #10
 801802e:	9342      	str	r3, [sp, #264]	@ 0x108
 8018030:	e088      	b.n	8018144 <__ssvfiscanf_r+0x1ec>
 8018032:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8018034:	fb02 1103 	mla	r1, r2, r3, r1
 8018038:	3930      	subs	r1, #48	@ 0x30
 801803a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801803c:	4655      	mov	r5, sl
 801803e:	e7d2      	b.n	8017fe6 <__ssvfiscanf_r+0x8e>
 8018040:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018044:	2a20      	cmp	r2, #32
 8018046:	d8ef      	bhi.n	8018028 <__ssvfiscanf_r+0xd0>
 8018048:	a101      	add	r1, pc, #4	@ (adr r1, 8018050 <__ssvfiscanf_r+0xf8>)
 801804a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801804e:	bf00      	nop
 8018050:	08018123 	.word	0x08018123
 8018054:	08018029 	.word	0x08018029
 8018058:	08018029 	.word	0x08018029
 801805c:	0801817d 	.word	0x0801817d
 8018060:	08018029 	.word	0x08018029
 8018064:	08018029 	.word	0x08018029
 8018068:	08018029 	.word	0x08018029
 801806c:	08018029 	.word	0x08018029
 8018070:	08018029 	.word	0x08018029
 8018074:	08018029 	.word	0x08018029
 8018078:	08018029 	.word	0x08018029
 801807c:	08018193 	.word	0x08018193
 8018080:	08018179 	.word	0x08018179
 8018084:	080180db 	.word	0x080180db
 8018088:	080180db 	.word	0x080180db
 801808c:	080180db 	.word	0x080180db
 8018090:	08018029 	.word	0x08018029
 8018094:	08018135 	.word	0x08018135
 8018098:	08018029 	.word	0x08018029
 801809c:	08018029 	.word	0x08018029
 80180a0:	08018029 	.word	0x08018029
 80180a4:	08018029 	.word	0x08018029
 80180a8:	080181a3 	.word	0x080181a3
 80180ac:	0801813d 	.word	0x0801813d
 80180b0:	0801811b 	.word	0x0801811b
 80180b4:	08018029 	.word	0x08018029
 80180b8:	08018029 	.word	0x08018029
 80180bc:	0801819f 	.word	0x0801819f
 80180c0:	08018029 	.word	0x08018029
 80180c4:	08018179 	.word	0x08018179
 80180c8:	08018029 	.word	0x08018029
 80180cc:	08018029 	.word	0x08018029
 80180d0:	08018123 	.word	0x08018123
 80180d4:	3b45      	subs	r3, #69	@ 0x45
 80180d6:	2b02      	cmp	r3, #2
 80180d8:	d8a6      	bhi.n	8018028 <__ssvfiscanf_r+0xd0>
 80180da:	2305      	movs	r3, #5
 80180dc:	e031      	b.n	8018142 <__ssvfiscanf_r+0x1ea>
 80180de:	6863      	ldr	r3, [r4, #4]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	dd0d      	ble.n	8018100 <__ssvfiscanf_r+0x1a8>
 80180e4:	6823      	ldr	r3, [r4, #0]
 80180e6:	781a      	ldrb	r2, [r3, #0]
 80180e8:	454a      	cmp	r2, r9
 80180ea:	f040 80a6 	bne.w	801823a <__ssvfiscanf_r+0x2e2>
 80180ee:	3301      	adds	r3, #1
 80180f0:	6862      	ldr	r2, [r4, #4]
 80180f2:	6023      	str	r3, [r4, #0]
 80180f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80180f6:	3a01      	subs	r2, #1
 80180f8:	3301      	adds	r3, #1
 80180fa:	6062      	str	r2, [r4, #4]
 80180fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80180fe:	e753      	b.n	8017fa8 <__ssvfiscanf_r+0x50>
 8018100:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018102:	4621      	mov	r1, r4
 8018104:	4630      	mov	r0, r6
 8018106:	4798      	blx	r3
 8018108:	2800      	cmp	r0, #0
 801810a:	d0eb      	beq.n	80180e4 <__ssvfiscanf_r+0x18c>
 801810c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801810e:	2800      	cmp	r0, #0
 8018110:	f040 808b 	bne.w	801822a <__ssvfiscanf_r+0x2d2>
 8018114:	f04f 30ff 	mov.w	r0, #4294967295
 8018118:	e08b      	b.n	8018232 <__ssvfiscanf_r+0x2da>
 801811a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801811c:	f042 0220 	orr.w	r2, r2, #32
 8018120:	9241      	str	r2, [sp, #260]	@ 0x104
 8018122:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018128:	9241      	str	r2, [sp, #260]	@ 0x104
 801812a:	2210      	movs	r2, #16
 801812c:	2b6e      	cmp	r3, #110	@ 0x6e
 801812e:	9242      	str	r2, [sp, #264]	@ 0x108
 8018130:	d902      	bls.n	8018138 <__ssvfiscanf_r+0x1e0>
 8018132:	e005      	b.n	8018140 <__ssvfiscanf_r+0x1e8>
 8018134:	2300      	movs	r3, #0
 8018136:	9342      	str	r3, [sp, #264]	@ 0x108
 8018138:	2303      	movs	r3, #3
 801813a:	e002      	b.n	8018142 <__ssvfiscanf_r+0x1ea>
 801813c:	2308      	movs	r3, #8
 801813e:	9342      	str	r3, [sp, #264]	@ 0x108
 8018140:	2304      	movs	r3, #4
 8018142:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018144:	6863      	ldr	r3, [r4, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	dd39      	ble.n	80181be <__ssvfiscanf_r+0x266>
 801814a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801814c:	0659      	lsls	r1, r3, #25
 801814e:	d404      	bmi.n	801815a <__ssvfiscanf_r+0x202>
 8018150:	6823      	ldr	r3, [r4, #0]
 8018152:	781a      	ldrb	r2, [r3, #0]
 8018154:	5cba      	ldrb	r2, [r7, r2]
 8018156:	0712      	lsls	r2, r2, #28
 8018158:	d438      	bmi.n	80181cc <__ssvfiscanf_r+0x274>
 801815a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801815c:	2b02      	cmp	r3, #2
 801815e:	dc47      	bgt.n	80181f0 <__ssvfiscanf_r+0x298>
 8018160:	466b      	mov	r3, sp
 8018162:	4622      	mov	r2, r4
 8018164:	a941      	add	r1, sp, #260	@ 0x104
 8018166:	4630      	mov	r0, r6
 8018168:	f000 f9ae 	bl	80184c8 <_scanf_chars>
 801816c:	2801      	cmp	r0, #1
 801816e:	d064      	beq.n	801823a <__ssvfiscanf_r+0x2e2>
 8018170:	2802      	cmp	r0, #2
 8018172:	f47f af19 	bne.w	8017fa8 <__ssvfiscanf_r+0x50>
 8018176:	e7c9      	b.n	801810c <__ssvfiscanf_r+0x1b4>
 8018178:	220a      	movs	r2, #10
 801817a:	e7d7      	b.n	801812c <__ssvfiscanf_r+0x1d4>
 801817c:	4629      	mov	r1, r5
 801817e:	4640      	mov	r0, r8
 8018180:	f000 faf0 	bl	8018764 <__sccl>
 8018184:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801818a:	9341      	str	r3, [sp, #260]	@ 0x104
 801818c:	4605      	mov	r5, r0
 801818e:	2301      	movs	r3, #1
 8018190:	e7d7      	b.n	8018142 <__ssvfiscanf_r+0x1ea>
 8018192:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018198:	9341      	str	r3, [sp, #260]	@ 0x104
 801819a:	2300      	movs	r3, #0
 801819c:	e7d1      	b.n	8018142 <__ssvfiscanf_r+0x1ea>
 801819e:	2302      	movs	r3, #2
 80181a0:	e7cf      	b.n	8018142 <__ssvfiscanf_r+0x1ea>
 80181a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80181a4:	06c3      	lsls	r3, r0, #27
 80181a6:	f53f aeff 	bmi.w	8017fa8 <__ssvfiscanf_r+0x50>
 80181aa:	9b00      	ldr	r3, [sp, #0]
 80181ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80181ae:	1d19      	adds	r1, r3, #4
 80181b0:	9100      	str	r1, [sp, #0]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	07c0      	lsls	r0, r0, #31
 80181b6:	bf4c      	ite	mi
 80181b8:	801a      	strhmi	r2, [r3, #0]
 80181ba:	601a      	strpl	r2, [r3, #0]
 80181bc:	e6f4      	b.n	8017fa8 <__ssvfiscanf_r+0x50>
 80181be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80181c0:	4621      	mov	r1, r4
 80181c2:	4630      	mov	r0, r6
 80181c4:	4798      	blx	r3
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d0bf      	beq.n	801814a <__ssvfiscanf_r+0x1f2>
 80181ca:	e79f      	b.n	801810c <__ssvfiscanf_r+0x1b4>
 80181cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80181ce:	3201      	adds	r2, #1
 80181d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80181d2:	6862      	ldr	r2, [r4, #4]
 80181d4:	3a01      	subs	r2, #1
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	6062      	str	r2, [r4, #4]
 80181da:	dd02      	ble.n	80181e2 <__ssvfiscanf_r+0x28a>
 80181dc:	3301      	adds	r3, #1
 80181de:	6023      	str	r3, [r4, #0]
 80181e0:	e7b6      	b.n	8018150 <__ssvfiscanf_r+0x1f8>
 80181e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80181e4:	4621      	mov	r1, r4
 80181e6:	4630      	mov	r0, r6
 80181e8:	4798      	blx	r3
 80181ea:	2800      	cmp	r0, #0
 80181ec:	d0b0      	beq.n	8018150 <__ssvfiscanf_r+0x1f8>
 80181ee:	e78d      	b.n	801810c <__ssvfiscanf_r+0x1b4>
 80181f0:	2b04      	cmp	r3, #4
 80181f2:	dc0f      	bgt.n	8018214 <__ssvfiscanf_r+0x2bc>
 80181f4:	466b      	mov	r3, sp
 80181f6:	4622      	mov	r2, r4
 80181f8:	a941      	add	r1, sp, #260	@ 0x104
 80181fa:	4630      	mov	r0, r6
 80181fc:	f000 f9be 	bl	801857c <_scanf_i>
 8018200:	e7b4      	b.n	801816c <__ssvfiscanf_r+0x214>
 8018202:	bf00      	nop
 8018204:	08017ea3 	.word	0x08017ea3
 8018208:	08017f1d 	.word	0x08017f1d
 801820c:	0801aca9 	.word	0x0801aca9
 8018210:	0801aab9 	.word	0x0801aab9
 8018214:	4b0a      	ldr	r3, [pc, #40]	@ (8018240 <__ssvfiscanf_r+0x2e8>)
 8018216:	2b00      	cmp	r3, #0
 8018218:	f43f aec6 	beq.w	8017fa8 <__ssvfiscanf_r+0x50>
 801821c:	466b      	mov	r3, sp
 801821e:	4622      	mov	r2, r4
 8018220:	a941      	add	r1, sp, #260	@ 0x104
 8018222:	4630      	mov	r0, r6
 8018224:	f3af 8000 	nop.w
 8018228:	e7a0      	b.n	801816c <__ssvfiscanf_r+0x214>
 801822a:	89a3      	ldrh	r3, [r4, #12]
 801822c:	065b      	lsls	r3, r3, #25
 801822e:	f53f af71 	bmi.w	8018114 <__ssvfiscanf_r+0x1bc>
 8018232:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8018236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801823c:	e7f9      	b.n	8018232 <__ssvfiscanf_r+0x2da>
 801823e:	bf00      	nop
 8018240:	00000000 	.word	0x00000000

08018244 <__sfputc_r>:
 8018244:	6893      	ldr	r3, [r2, #8]
 8018246:	3b01      	subs	r3, #1
 8018248:	2b00      	cmp	r3, #0
 801824a:	b410      	push	{r4}
 801824c:	6093      	str	r3, [r2, #8]
 801824e:	da08      	bge.n	8018262 <__sfputc_r+0x1e>
 8018250:	6994      	ldr	r4, [r2, #24]
 8018252:	42a3      	cmp	r3, r4
 8018254:	db01      	blt.n	801825a <__sfputc_r+0x16>
 8018256:	290a      	cmp	r1, #10
 8018258:	d103      	bne.n	8018262 <__sfputc_r+0x1e>
 801825a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801825e:	f000 baf4 	b.w	801884a <__swbuf_r>
 8018262:	6813      	ldr	r3, [r2, #0]
 8018264:	1c58      	adds	r0, r3, #1
 8018266:	6010      	str	r0, [r2, #0]
 8018268:	7019      	strb	r1, [r3, #0]
 801826a:	4608      	mov	r0, r1
 801826c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018270:	4770      	bx	lr

08018272 <__sfputs_r>:
 8018272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018274:	4606      	mov	r6, r0
 8018276:	460f      	mov	r7, r1
 8018278:	4614      	mov	r4, r2
 801827a:	18d5      	adds	r5, r2, r3
 801827c:	42ac      	cmp	r4, r5
 801827e:	d101      	bne.n	8018284 <__sfputs_r+0x12>
 8018280:	2000      	movs	r0, #0
 8018282:	e007      	b.n	8018294 <__sfputs_r+0x22>
 8018284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018288:	463a      	mov	r2, r7
 801828a:	4630      	mov	r0, r6
 801828c:	f7ff ffda 	bl	8018244 <__sfputc_r>
 8018290:	1c43      	adds	r3, r0, #1
 8018292:	d1f3      	bne.n	801827c <__sfputs_r+0xa>
 8018294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018298 <_vfiprintf_r>:
 8018298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801829c:	460d      	mov	r5, r1
 801829e:	b09d      	sub	sp, #116	@ 0x74
 80182a0:	4614      	mov	r4, r2
 80182a2:	4698      	mov	r8, r3
 80182a4:	4606      	mov	r6, r0
 80182a6:	b118      	cbz	r0, 80182b0 <_vfiprintf_r+0x18>
 80182a8:	6a03      	ldr	r3, [r0, #32]
 80182aa:	b90b      	cbnz	r3, 80182b0 <_vfiprintf_r+0x18>
 80182ac:	f7fc fee4 	bl	8015078 <__sinit>
 80182b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182b2:	07d9      	lsls	r1, r3, #31
 80182b4:	d405      	bmi.n	80182c2 <_vfiprintf_r+0x2a>
 80182b6:	89ab      	ldrh	r3, [r5, #12]
 80182b8:	059a      	lsls	r2, r3, #22
 80182ba:	d402      	bmi.n	80182c2 <_vfiprintf_r+0x2a>
 80182bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182be:	f7fd fe79 	bl	8015fb4 <__retarget_lock_acquire_recursive>
 80182c2:	89ab      	ldrh	r3, [r5, #12]
 80182c4:	071b      	lsls	r3, r3, #28
 80182c6:	d501      	bpl.n	80182cc <_vfiprintf_r+0x34>
 80182c8:	692b      	ldr	r3, [r5, #16]
 80182ca:	b99b      	cbnz	r3, 80182f4 <_vfiprintf_r+0x5c>
 80182cc:	4629      	mov	r1, r5
 80182ce:	4630      	mov	r0, r6
 80182d0:	f000 fafa 	bl	80188c8 <__swsetup_r>
 80182d4:	b170      	cbz	r0, 80182f4 <_vfiprintf_r+0x5c>
 80182d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182d8:	07dc      	lsls	r4, r3, #31
 80182da:	d504      	bpl.n	80182e6 <_vfiprintf_r+0x4e>
 80182dc:	f04f 30ff 	mov.w	r0, #4294967295
 80182e0:	b01d      	add	sp, #116	@ 0x74
 80182e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e6:	89ab      	ldrh	r3, [r5, #12]
 80182e8:	0598      	lsls	r0, r3, #22
 80182ea:	d4f7      	bmi.n	80182dc <_vfiprintf_r+0x44>
 80182ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182ee:	f7fd fe63 	bl	8015fb8 <__retarget_lock_release_recursive>
 80182f2:	e7f3      	b.n	80182dc <_vfiprintf_r+0x44>
 80182f4:	2300      	movs	r3, #0
 80182f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80182f8:	2320      	movs	r3, #32
 80182fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80182fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8018302:	2330      	movs	r3, #48	@ 0x30
 8018304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80184b4 <_vfiprintf_r+0x21c>
 8018308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801830c:	f04f 0901 	mov.w	r9, #1
 8018310:	4623      	mov	r3, r4
 8018312:	469a      	mov	sl, r3
 8018314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018318:	b10a      	cbz	r2, 801831e <_vfiprintf_r+0x86>
 801831a:	2a25      	cmp	r2, #37	@ 0x25
 801831c:	d1f9      	bne.n	8018312 <_vfiprintf_r+0x7a>
 801831e:	ebba 0b04 	subs.w	fp, sl, r4
 8018322:	d00b      	beq.n	801833c <_vfiprintf_r+0xa4>
 8018324:	465b      	mov	r3, fp
 8018326:	4622      	mov	r2, r4
 8018328:	4629      	mov	r1, r5
 801832a:	4630      	mov	r0, r6
 801832c:	f7ff ffa1 	bl	8018272 <__sfputs_r>
 8018330:	3001      	adds	r0, #1
 8018332:	f000 80a7 	beq.w	8018484 <_vfiprintf_r+0x1ec>
 8018336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018338:	445a      	add	r2, fp
 801833a:	9209      	str	r2, [sp, #36]	@ 0x24
 801833c:	f89a 3000 	ldrb.w	r3, [sl]
 8018340:	2b00      	cmp	r3, #0
 8018342:	f000 809f 	beq.w	8018484 <_vfiprintf_r+0x1ec>
 8018346:	2300      	movs	r3, #0
 8018348:	f04f 32ff 	mov.w	r2, #4294967295
 801834c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018350:	f10a 0a01 	add.w	sl, sl, #1
 8018354:	9304      	str	r3, [sp, #16]
 8018356:	9307      	str	r3, [sp, #28]
 8018358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801835c:	931a      	str	r3, [sp, #104]	@ 0x68
 801835e:	4654      	mov	r4, sl
 8018360:	2205      	movs	r2, #5
 8018362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018366:	4853      	ldr	r0, [pc, #332]	@ (80184b4 <_vfiprintf_r+0x21c>)
 8018368:	f7e7 ff1a 	bl	80001a0 <memchr>
 801836c:	9a04      	ldr	r2, [sp, #16]
 801836e:	b9d8      	cbnz	r0, 80183a8 <_vfiprintf_r+0x110>
 8018370:	06d1      	lsls	r1, r2, #27
 8018372:	bf44      	itt	mi
 8018374:	2320      	movmi	r3, #32
 8018376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801837a:	0713      	lsls	r3, r2, #28
 801837c:	bf44      	itt	mi
 801837e:	232b      	movmi	r3, #43	@ 0x2b
 8018380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018384:	f89a 3000 	ldrb.w	r3, [sl]
 8018388:	2b2a      	cmp	r3, #42	@ 0x2a
 801838a:	d015      	beq.n	80183b8 <_vfiprintf_r+0x120>
 801838c:	9a07      	ldr	r2, [sp, #28]
 801838e:	4654      	mov	r4, sl
 8018390:	2000      	movs	r0, #0
 8018392:	f04f 0c0a 	mov.w	ip, #10
 8018396:	4621      	mov	r1, r4
 8018398:	f811 3b01 	ldrb.w	r3, [r1], #1
 801839c:	3b30      	subs	r3, #48	@ 0x30
 801839e:	2b09      	cmp	r3, #9
 80183a0:	d94b      	bls.n	801843a <_vfiprintf_r+0x1a2>
 80183a2:	b1b0      	cbz	r0, 80183d2 <_vfiprintf_r+0x13a>
 80183a4:	9207      	str	r2, [sp, #28]
 80183a6:	e014      	b.n	80183d2 <_vfiprintf_r+0x13a>
 80183a8:	eba0 0308 	sub.w	r3, r0, r8
 80183ac:	fa09 f303 	lsl.w	r3, r9, r3
 80183b0:	4313      	orrs	r3, r2
 80183b2:	9304      	str	r3, [sp, #16]
 80183b4:	46a2      	mov	sl, r4
 80183b6:	e7d2      	b.n	801835e <_vfiprintf_r+0xc6>
 80183b8:	9b03      	ldr	r3, [sp, #12]
 80183ba:	1d19      	adds	r1, r3, #4
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	9103      	str	r1, [sp, #12]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	bfbb      	ittet	lt
 80183c4:	425b      	neglt	r3, r3
 80183c6:	f042 0202 	orrlt.w	r2, r2, #2
 80183ca:	9307      	strge	r3, [sp, #28]
 80183cc:	9307      	strlt	r3, [sp, #28]
 80183ce:	bfb8      	it	lt
 80183d0:	9204      	strlt	r2, [sp, #16]
 80183d2:	7823      	ldrb	r3, [r4, #0]
 80183d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80183d6:	d10a      	bne.n	80183ee <_vfiprintf_r+0x156>
 80183d8:	7863      	ldrb	r3, [r4, #1]
 80183da:	2b2a      	cmp	r3, #42	@ 0x2a
 80183dc:	d132      	bne.n	8018444 <_vfiprintf_r+0x1ac>
 80183de:	9b03      	ldr	r3, [sp, #12]
 80183e0:	1d1a      	adds	r2, r3, #4
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	9203      	str	r2, [sp, #12]
 80183e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80183ea:	3402      	adds	r4, #2
 80183ec:	9305      	str	r3, [sp, #20]
 80183ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80184c4 <_vfiprintf_r+0x22c>
 80183f2:	7821      	ldrb	r1, [r4, #0]
 80183f4:	2203      	movs	r2, #3
 80183f6:	4650      	mov	r0, sl
 80183f8:	f7e7 fed2 	bl	80001a0 <memchr>
 80183fc:	b138      	cbz	r0, 801840e <_vfiprintf_r+0x176>
 80183fe:	9b04      	ldr	r3, [sp, #16]
 8018400:	eba0 000a 	sub.w	r0, r0, sl
 8018404:	2240      	movs	r2, #64	@ 0x40
 8018406:	4082      	lsls	r2, r0
 8018408:	4313      	orrs	r3, r2
 801840a:	3401      	adds	r4, #1
 801840c:	9304      	str	r3, [sp, #16]
 801840e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018412:	4829      	ldr	r0, [pc, #164]	@ (80184b8 <_vfiprintf_r+0x220>)
 8018414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018418:	2206      	movs	r2, #6
 801841a:	f7e7 fec1 	bl	80001a0 <memchr>
 801841e:	2800      	cmp	r0, #0
 8018420:	d03f      	beq.n	80184a2 <_vfiprintf_r+0x20a>
 8018422:	4b26      	ldr	r3, [pc, #152]	@ (80184bc <_vfiprintf_r+0x224>)
 8018424:	bb1b      	cbnz	r3, 801846e <_vfiprintf_r+0x1d6>
 8018426:	9b03      	ldr	r3, [sp, #12]
 8018428:	3307      	adds	r3, #7
 801842a:	f023 0307 	bic.w	r3, r3, #7
 801842e:	3308      	adds	r3, #8
 8018430:	9303      	str	r3, [sp, #12]
 8018432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018434:	443b      	add	r3, r7
 8018436:	9309      	str	r3, [sp, #36]	@ 0x24
 8018438:	e76a      	b.n	8018310 <_vfiprintf_r+0x78>
 801843a:	fb0c 3202 	mla	r2, ip, r2, r3
 801843e:	460c      	mov	r4, r1
 8018440:	2001      	movs	r0, #1
 8018442:	e7a8      	b.n	8018396 <_vfiprintf_r+0xfe>
 8018444:	2300      	movs	r3, #0
 8018446:	3401      	adds	r4, #1
 8018448:	9305      	str	r3, [sp, #20]
 801844a:	4619      	mov	r1, r3
 801844c:	f04f 0c0a 	mov.w	ip, #10
 8018450:	4620      	mov	r0, r4
 8018452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018456:	3a30      	subs	r2, #48	@ 0x30
 8018458:	2a09      	cmp	r2, #9
 801845a:	d903      	bls.n	8018464 <_vfiprintf_r+0x1cc>
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0c6      	beq.n	80183ee <_vfiprintf_r+0x156>
 8018460:	9105      	str	r1, [sp, #20]
 8018462:	e7c4      	b.n	80183ee <_vfiprintf_r+0x156>
 8018464:	fb0c 2101 	mla	r1, ip, r1, r2
 8018468:	4604      	mov	r4, r0
 801846a:	2301      	movs	r3, #1
 801846c:	e7f0      	b.n	8018450 <_vfiprintf_r+0x1b8>
 801846e:	ab03      	add	r3, sp, #12
 8018470:	9300      	str	r3, [sp, #0]
 8018472:	462a      	mov	r2, r5
 8018474:	4b12      	ldr	r3, [pc, #72]	@ (80184c0 <_vfiprintf_r+0x228>)
 8018476:	a904      	add	r1, sp, #16
 8018478:	4630      	mov	r0, r6
 801847a:	f7fc f9bb 	bl	80147f4 <_printf_float>
 801847e:	4607      	mov	r7, r0
 8018480:	1c78      	adds	r0, r7, #1
 8018482:	d1d6      	bne.n	8018432 <_vfiprintf_r+0x19a>
 8018484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018486:	07d9      	lsls	r1, r3, #31
 8018488:	d405      	bmi.n	8018496 <_vfiprintf_r+0x1fe>
 801848a:	89ab      	ldrh	r3, [r5, #12]
 801848c:	059a      	lsls	r2, r3, #22
 801848e:	d402      	bmi.n	8018496 <_vfiprintf_r+0x1fe>
 8018490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018492:	f7fd fd91 	bl	8015fb8 <__retarget_lock_release_recursive>
 8018496:	89ab      	ldrh	r3, [r5, #12]
 8018498:	065b      	lsls	r3, r3, #25
 801849a:	f53f af1f 	bmi.w	80182dc <_vfiprintf_r+0x44>
 801849e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80184a0:	e71e      	b.n	80182e0 <_vfiprintf_r+0x48>
 80184a2:	ab03      	add	r3, sp, #12
 80184a4:	9300      	str	r3, [sp, #0]
 80184a6:	462a      	mov	r2, r5
 80184a8:	4b05      	ldr	r3, [pc, #20]	@ (80184c0 <_vfiprintf_r+0x228>)
 80184aa:	a904      	add	r1, sp, #16
 80184ac:	4630      	mov	r0, r6
 80184ae:	f7fc fc39 	bl	8014d24 <_printf_i>
 80184b2:	e7e4      	b.n	801847e <_vfiprintf_r+0x1e6>
 80184b4:	0801aab3 	.word	0x0801aab3
 80184b8:	0801aabd 	.word	0x0801aabd
 80184bc:	080147f5 	.word	0x080147f5
 80184c0:	08018273 	.word	0x08018273
 80184c4:	0801aab9 	.word	0x0801aab9

080184c8 <_scanf_chars>:
 80184c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184cc:	4615      	mov	r5, r2
 80184ce:	688a      	ldr	r2, [r1, #8]
 80184d0:	4680      	mov	r8, r0
 80184d2:	460c      	mov	r4, r1
 80184d4:	b932      	cbnz	r2, 80184e4 <_scanf_chars+0x1c>
 80184d6:	698a      	ldr	r2, [r1, #24]
 80184d8:	2a00      	cmp	r2, #0
 80184da:	bf14      	ite	ne
 80184dc:	f04f 32ff 	movne.w	r2, #4294967295
 80184e0:	2201      	moveq	r2, #1
 80184e2:	608a      	str	r2, [r1, #8]
 80184e4:	6822      	ldr	r2, [r4, #0]
 80184e6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8018578 <_scanf_chars+0xb0>
 80184ea:	06d1      	lsls	r1, r2, #27
 80184ec:	bf5f      	itttt	pl
 80184ee:	681a      	ldrpl	r2, [r3, #0]
 80184f0:	1d11      	addpl	r1, r2, #4
 80184f2:	6019      	strpl	r1, [r3, #0]
 80184f4:	6816      	ldrpl	r6, [r2, #0]
 80184f6:	2700      	movs	r7, #0
 80184f8:	69a0      	ldr	r0, [r4, #24]
 80184fa:	b188      	cbz	r0, 8018520 <_scanf_chars+0x58>
 80184fc:	2801      	cmp	r0, #1
 80184fe:	d107      	bne.n	8018510 <_scanf_chars+0x48>
 8018500:	682b      	ldr	r3, [r5, #0]
 8018502:	781a      	ldrb	r2, [r3, #0]
 8018504:	6963      	ldr	r3, [r4, #20]
 8018506:	5c9b      	ldrb	r3, [r3, r2]
 8018508:	b953      	cbnz	r3, 8018520 <_scanf_chars+0x58>
 801850a:	2f00      	cmp	r7, #0
 801850c:	d031      	beq.n	8018572 <_scanf_chars+0xaa>
 801850e:	e022      	b.n	8018556 <_scanf_chars+0x8e>
 8018510:	2802      	cmp	r0, #2
 8018512:	d120      	bne.n	8018556 <_scanf_chars+0x8e>
 8018514:	682b      	ldr	r3, [r5, #0]
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	f819 3003 	ldrb.w	r3, [r9, r3]
 801851c:	071b      	lsls	r3, r3, #28
 801851e:	d41a      	bmi.n	8018556 <_scanf_chars+0x8e>
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	06da      	lsls	r2, r3, #27
 8018524:	bf5e      	ittt	pl
 8018526:	682b      	ldrpl	r3, [r5, #0]
 8018528:	781b      	ldrbpl	r3, [r3, #0]
 801852a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801852e:	682a      	ldr	r2, [r5, #0]
 8018530:	686b      	ldr	r3, [r5, #4]
 8018532:	3201      	adds	r2, #1
 8018534:	602a      	str	r2, [r5, #0]
 8018536:	68a2      	ldr	r2, [r4, #8]
 8018538:	3b01      	subs	r3, #1
 801853a:	3a01      	subs	r2, #1
 801853c:	606b      	str	r3, [r5, #4]
 801853e:	3701      	adds	r7, #1
 8018540:	60a2      	str	r2, [r4, #8]
 8018542:	b142      	cbz	r2, 8018556 <_scanf_chars+0x8e>
 8018544:	2b00      	cmp	r3, #0
 8018546:	dcd7      	bgt.n	80184f8 <_scanf_chars+0x30>
 8018548:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801854c:	4629      	mov	r1, r5
 801854e:	4640      	mov	r0, r8
 8018550:	4798      	blx	r3
 8018552:	2800      	cmp	r0, #0
 8018554:	d0d0      	beq.n	80184f8 <_scanf_chars+0x30>
 8018556:	6823      	ldr	r3, [r4, #0]
 8018558:	f013 0310 	ands.w	r3, r3, #16
 801855c:	d105      	bne.n	801856a <_scanf_chars+0xa2>
 801855e:	68e2      	ldr	r2, [r4, #12]
 8018560:	3201      	adds	r2, #1
 8018562:	60e2      	str	r2, [r4, #12]
 8018564:	69a2      	ldr	r2, [r4, #24]
 8018566:	b102      	cbz	r2, 801856a <_scanf_chars+0xa2>
 8018568:	7033      	strb	r3, [r6, #0]
 801856a:	6923      	ldr	r3, [r4, #16]
 801856c:	443b      	add	r3, r7
 801856e:	6123      	str	r3, [r4, #16]
 8018570:	2000      	movs	r0, #0
 8018572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018576:	bf00      	nop
 8018578:	0801aca9 	.word	0x0801aca9

0801857c <_scanf_i>:
 801857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018580:	4698      	mov	r8, r3
 8018582:	4b74      	ldr	r3, [pc, #464]	@ (8018754 <_scanf_i+0x1d8>)
 8018584:	460c      	mov	r4, r1
 8018586:	4682      	mov	sl, r0
 8018588:	4616      	mov	r6, r2
 801858a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801858e:	b087      	sub	sp, #28
 8018590:	ab03      	add	r3, sp, #12
 8018592:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018596:	4b70      	ldr	r3, [pc, #448]	@ (8018758 <_scanf_i+0x1dc>)
 8018598:	69a1      	ldr	r1, [r4, #24]
 801859a:	4a70      	ldr	r2, [pc, #448]	@ (801875c <_scanf_i+0x1e0>)
 801859c:	2903      	cmp	r1, #3
 801859e:	bf08      	it	eq
 80185a0:	461a      	moveq	r2, r3
 80185a2:	68a3      	ldr	r3, [r4, #8]
 80185a4:	9201      	str	r2, [sp, #4]
 80185a6:	1e5a      	subs	r2, r3, #1
 80185a8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80185ac:	bf88      	it	hi
 80185ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80185b2:	4627      	mov	r7, r4
 80185b4:	bf82      	ittt	hi
 80185b6:	eb03 0905 	addhi.w	r9, r3, r5
 80185ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80185be:	60a3      	strhi	r3, [r4, #8]
 80185c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80185c4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80185c8:	bf98      	it	ls
 80185ca:	f04f 0900 	movls.w	r9, #0
 80185ce:	6023      	str	r3, [r4, #0]
 80185d0:	463d      	mov	r5, r7
 80185d2:	f04f 0b00 	mov.w	fp, #0
 80185d6:	6831      	ldr	r1, [r6, #0]
 80185d8:	ab03      	add	r3, sp, #12
 80185da:	7809      	ldrb	r1, [r1, #0]
 80185dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80185e0:	2202      	movs	r2, #2
 80185e2:	f7e7 fddd 	bl	80001a0 <memchr>
 80185e6:	b328      	cbz	r0, 8018634 <_scanf_i+0xb8>
 80185e8:	f1bb 0f01 	cmp.w	fp, #1
 80185ec:	d159      	bne.n	80186a2 <_scanf_i+0x126>
 80185ee:	6862      	ldr	r2, [r4, #4]
 80185f0:	b92a      	cbnz	r2, 80185fe <_scanf_i+0x82>
 80185f2:	6822      	ldr	r2, [r4, #0]
 80185f4:	2108      	movs	r1, #8
 80185f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80185fa:	6061      	str	r1, [r4, #4]
 80185fc:	6022      	str	r2, [r4, #0]
 80185fe:	6822      	ldr	r2, [r4, #0]
 8018600:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018604:	6022      	str	r2, [r4, #0]
 8018606:	68a2      	ldr	r2, [r4, #8]
 8018608:	1e51      	subs	r1, r2, #1
 801860a:	60a1      	str	r1, [r4, #8]
 801860c:	b192      	cbz	r2, 8018634 <_scanf_i+0xb8>
 801860e:	6832      	ldr	r2, [r6, #0]
 8018610:	1c51      	adds	r1, r2, #1
 8018612:	6031      	str	r1, [r6, #0]
 8018614:	7812      	ldrb	r2, [r2, #0]
 8018616:	f805 2b01 	strb.w	r2, [r5], #1
 801861a:	6872      	ldr	r2, [r6, #4]
 801861c:	3a01      	subs	r2, #1
 801861e:	2a00      	cmp	r2, #0
 8018620:	6072      	str	r2, [r6, #4]
 8018622:	dc07      	bgt.n	8018634 <_scanf_i+0xb8>
 8018624:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018628:	4631      	mov	r1, r6
 801862a:	4650      	mov	r0, sl
 801862c:	4790      	blx	r2
 801862e:	2800      	cmp	r0, #0
 8018630:	f040 8085 	bne.w	801873e <_scanf_i+0x1c2>
 8018634:	f10b 0b01 	add.w	fp, fp, #1
 8018638:	f1bb 0f03 	cmp.w	fp, #3
 801863c:	d1cb      	bne.n	80185d6 <_scanf_i+0x5a>
 801863e:	6863      	ldr	r3, [r4, #4]
 8018640:	b90b      	cbnz	r3, 8018646 <_scanf_i+0xca>
 8018642:	230a      	movs	r3, #10
 8018644:	6063      	str	r3, [r4, #4]
 8018646:	6863      	ldr	r3, [r4, #4]
 8018648:	4945      	ldr	r1, [pc, #276]	@ (8018760 <_scanf_i+0x1e4>)
 801864a:	6960      	ldr	r0, [r4, #20]
 801864c:	1ac9      	subs	r1, r1, r3
 801864e:	f000 f889 	bl	8018764 <__sccl>
 8018652:	f04f 0b00 	mov.w	fp, #0
 8018656:	68a3      	ldr	r3, [r4, #8]
 8018658:	6822      	ldr	r2, [r4, #0]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d03d      	beq.n	80186da <_scanf_i+0x15e>
 801865e:	6831      	ldr	r1, [r6, #0]
 8018660:	6960      	ldr	r0, [r4, #20]
 8018662:	f891 c000 	ldrb.w	ip, [r1]
 8018666:	f810 000c 	ldrb.w	r0, [r0, ip]
 801866a:	2800      	cmp	r0, #0
 801866c:	d035      	beq.n	80186da <_scanf_i+0x15e>
 801866e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018672:	d124      	bne.n	80186be <_scanf_i+0x142>
 8018674:	0510      	lsls	r0, r2, #20
 8018676:	d522      	bpl.n	80186be <_scanf_i+0x142>
 8018678:	f10b 0b01 	add.w	fp, fp, #1
 801867c:	f1b9 0f00 	cmp.w	r9, #0
 8018680:	d003      	beq.n	801868a <_scanf_i+0x10e>
 8018682:	3301      	adds	r3, #1
 8018684:	f109 39ff 	add.w	r9, r9, #4294967295
 8018688:	60a3      	str	r3, [r4, #8]
 801868a:	6873      	ldr	r3, [r6, #4]
 801868c:	3b01      	subs	r3, #1
 801868e:	2b00      	cmp	r3, #0
 8018690:	6073      	str	r3, [r6, #4]
 8018692:	dd1b      	ble.n	80186cc <_scanf_i+0x150>
 8018694:	6833      	ldr	r3, [r6, #0]
 8018696:	3301      	adds	r3, #1
 8018698:	6033      	str	r3, [r6, #0]
 801869a:	68a3      	ldr	r3, [r4, #8]
 801869c:	3b01      	subs	r3, #1
 801869e:	60a3      	str	r3, [r4, #8]
 80186a0:	e7d9      	b.n	8018656 <_scanf_i+0xda>
 80186a2:	f1bb 0f02 	cmp.w	fp, #2
 80186a6:	d1ae      	bne.n	8018606 <_scanf_i+0x8a>
 80186a8:	6822      	ldr	r2, [r4, #0]
 80186aa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80186ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80186b2:	d1c4      	bne.n	801863e <_scanf_i+0xc2>
 80186b4:	2110      	movs	r1, #16
 80186b6:	6061      	str	r1, [r4, #4]
 80186b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80186bc:	e7a2      	b.n	8018604 <_scanf_i+0x88>
 80186be:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80186c2:	6022      	str	r2, [r4, #0]
 80186c4:	780b      	ldrb	r3, [r1, #0]
 80186c6:	f805 3b01 	strb.w	r3, [r5], #1
 80186ca:	e7de      	b.n	801868a <_scanf_i+0x10e>
 80186cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80186d0:	4631      	mov	r1, r6
 80186d2:	4650      	mov	r0, sl
 80186d4:	4798      	blx	r3
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d0df      	beq.n	801869a <_scanf_i+0x11e>
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	05d9      	lsls	r1, r3, #23
 80186de:	d50d      	bpl.n	80186fc <_scanf_i+0x180>
 80186e0:	42bd      	cmp	r5, r7
 80186e2:	d909      	bls.n	80186f8 <_scanf_i+0x17c>
 80186e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80186e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80186ec:	4632      	mov	r2, r6
 80186ee:	4650      	mov	r0, sl
 80186f0:	4798      	blx	r3
 80186f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80186f6:	464d      	mov	r5, r9
 80186f8:	42bd      	cmp	r5, r7
 80186fa:	d028      	beq.n	801874e <_scanf_i+0x1d2>
 80186fc:	6822      	ldr	r2, [r4, #0]
 80186fe:	f012 0210 	ands.w	r2, r2, #16
 8018702:	d113      	bne.n	801872c <_scanf_i+0x1b0>
 8018704:	702a      	strb	r2, [r5, #0]
 8018706:	6863      	ldr	r3, [r4, #4]
 8018708:	9e01      	ldr	r6, [sp, #4]
 801870a:	4639      	mov	r1, r7
 801870c:	4650      	mov	r0, sl
 801870e:	47b0      	blx	r6
 8018710:	f8d8 3000 	ldr.w	r3, [r8]
 8018714:	6821      	ldr	r1, [r4, #0]
 8018716:	1d1a      	adds	r2, r3, #4
 8018718:	f8c8 2000 	str.w	r2, [r8]
 801871c:	f011 0f20 	tst.w	r1, #32
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	d00f      	beq.n	8018744 <_scanf_i+0x1c8>
 8018724:	6018      	str	r0, [r3, #0]
 8018726:	68e3      	ldr	r3, [r4, #12]
 8018728:	3301      	adds	r3, #1
 801872a:	60e3      	str	r3, [r4, #12]
 801872c:	6923      	ldr	r3, [r4, #16]
 801872e:	1bed      	subs	r5, r5, r7
 8018730:	445d      	add	r5, fp
 8018732:	442b      	add	r3, r5
 8018734:	6123      	str	r3, [r4, #16]
 8018736:	2000      	movs	r0, #0
 8018738:	b007      	add	sp, #28
 801873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801873e:	f04f 0b00 	mov.w	fp, #0
 8018742:	e7ca      	b.n	80186da <_scanf_i+0x15e>
 8018744:	07ca      	lsls	r2, r1, #31
 8018746:	bf4c      	ite	mi
 8018748:	8018      	strhmi	r0, [r3, #0]
 801874a:	6018      	strpl	r0, [r3, #0]
 801874c:	e7eb      	b.n	8018726 <_scanf_i+0x1aa>
 801874e:	2001      	movs	r0, #1
 8018750:	e7f2      	b.n	8018738 <_scanf_i+0x1bc>
 8018752:	bf00      	nop
 8018754:	0801a78c 	.word	0x0801a78c
 8018758:	08018b01 	.word	0x08018b01
 801875c:	08017751 	.word	0x08017751
 8018760:	0801aade 	.word	0x0801aade

08018764 <__sccl>:
 8018764:	b570      	push	{r4, r5, r6, lr}
 8018766:	780b      	ldrb	r3, [r1, #0]
 8018768:	4604      	mov	r4, r0
 801876a:	2b5e      	cmp	r3, #94	@ 0x5e
 801876c:	bf0b      	itete	eq
 801876e:	784b      	ldrbeq	r3, [r1, #1]
 8018770:	1c4a      	addne	r2, r1, #1
 8018772:	1c8a      	addeq	r2, r1, #2
 8018774:	2100      	movne	r1, #0
 8018776:	bf08      	it	eq
 8018778:	2101      	moveq	r1, #1
 801877a:	3801      	subs	r0, #1
 801877c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018780:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018784:	42a8      	cmp	r0, r5
 8018786:	d1fb      	bne.n	8018780 <__sccl+0x1c>
 8018788:	b90b      	cbnz	r3, 801878e <__sccl+0x2a>
 801878a:	1e50      	subs	r0, r2, #1
 801878c:	bd70      	pop	{r4, r5, r6, pc}
 801878e:	f081 0101 	eor.w	r1, r1, #1
 8018792:	54e1      	strb	r1, [r4, r3]
 8018794:	4610      	mov	r0, r2
 8018796:	4602      	mov	r2, r0
 8018798:	f812 5b01 	ldrb.w	r5, [r2], #1
 801879c:	2d2d      	cmp	r5, #45	@ 0x2d
 801879e:	d005      	beq.n	80187ac <__sccl+0x48>
 80187a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80187a2:	d016      	beq.n	80187d2 <__sccl+0x6e>
 80187a4:	2d00      	cmp	r5, #0
 80187a6:	d0f1      	beq.n	801878c <__sccl+0x28>
 80187a8:	462b      	mov	r3, r5
 80187aa:	e7f2      	b.n	8018792 <__sccl+0x2e>
 80187ac:	7846      	ldrb	r6, [r0, #1]
 80187ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80187b0:	d0fa      	beq.n	80187a8 <__sccl+0x44>
 80187b2:	42b3      	cmp	r3, r6
 80187b4:	dcf8      	bgt.n	80187a8 <__sccl+0x44>
 80187b6:	3002      	adds	r0, #2
 80187b8:	461a      	mov	r2, r3
 80187ba:	3201      	adds	r2, #1
 80187bc:	4296      	cmp	r6, r2
 80187be:	54a1      	strb	r1, [r4, r2]
 80187c0:	dcfb      	bgt.n	80187ba <__sccl+0x56>
 80187c2:	1af2      	subs	r2, r6, r3
 80187c4:	3a01      	subs	r2, #1
 80187c6:	1c5d      	adds	r5, r3, #1
 80187c8:	42b3      	cmp	r3, r6
 80187ca:	bfa8      	it	ge
 80187cc:	2200      	movge	r2, #0
 80187ce:	18ab      	adds	r3, r5, r2
 80187d0:	e7e1      	b.n	8018796 <__sccl+0x32>
 80187d2:	4610      	mov	r0, r2
 80187d4:	e7da      	b.n	801878c <__sccl+0x28>

080187d6 <__submore>:
 80187d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187da:	460c      	mov	r4, r1
 80187dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80187de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187e2:	4299      	cmp	r1, r3
 80187e4:	d11d      	bne.n	8018822 <__submore+0x4c>
 80187e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80187ea:	f7fe fb3d 	bl	8016e68 <_malloc_r>
 80187ee:	b918      	cbnz	r0, 80187f8 <__submore+0x22>
 80187f0:	f04f 30ff 	mov.w	r0, #4294967295
 80187f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80187fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80187fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018802:	6360      	str	r0, [r4, #52]	@ 0x34
 8018804:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018808:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801880c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018810:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018814:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018818:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801881c:	6020      	str	r0, [r4, #0]
 801881e:	2000      	movs	r0, #0
 8018820:	e7e8      	b.n	80187f4 <__submore+0x1e>
 8018822:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018824:	0077      	lsls	r7, r6, #1
 8018826:	463a      	mov	r2, r7
 8018828:	f7ff fb00 	bl	8017e2c <_realloc_r>
 801882c:	4605      	mov	r5, r0
 801882e:	2800      	cmp	r0, #0
 8018830:	d0de      	beq.n	80187f0 <__submore+0x1a>
 8018832:	eb00 0806 	add.w	r8, r0, r6
 8018836:	4601      	mov	r1, r0
 8018838:	4632      	mov	r2, r6
 801883a:	4640      	mov	r0, r8
 801883c:	f7fd fbc5 	bl	8015fca <memcpy>
 8018840:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018844:	f8c4 8000 	str.w	r8, [r4]
 8018848:	e7e9      	b.n	801881e <__submore+0x48>

0801884a <__swbuf_r>:
 801884a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801884c:	460e      	mov	r6, r1
 801884e:	4614      	mov	r4, r2
 8018850:	4605      	mov	r5, r0
 8018852:	b118      	cbz	r0, 801885c <__swbuf_r+0x12>
 8018854:	6a03      	ldr	r3, [r0, #32]
 8018856:	b90b      	cbnz	r3, 801885c <__swbuf_r+0x12>
 8018858:	f7fc fc0e 	bl	8015078 <__sinit>
 801885c:	69a3      	ldr	r3, [r4, #24]
 801885e:	60a3      	str	r3, [r4, #8]
 8018860:	89a3      	ldrh	r3, [r4, #12]
 8018862:	071a      	lsls	r2, r3, #28
 8018864:	d501      	bpl.n	801886a <__swbuf_r+0x20>
 8018866:	6923      	ldr	r3, [r4, #16]
 8018868:	b943      	cbnz	r3, 801887c <__swbuf_r+0x32>
 801886a:	4621      	mov	r1, r4
 801886c:	4628      	mov	r0, r5
 801886e:	f000 f82b 	bl	80188c8 <__swsetup_r>
 8018872:	b118      	cbz	r0, 801887c <__swbuf_r+0x32>
 8018874:	f04f 37ff 	mov.w	r7, #4294967295
 8018878:	4638      	mov	r0, r7
 801887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801887c:	6823      	ldr	r3, [r4, #0]
 801887e:	6922      	ldr	r2, [r4, #16]
 8018880:	1a98      	subs	r0, r3, r2
 8018882:	6963      	ldr	r3, [r4, #20]
 8018884:	b2f6      	uxtb	r6, r6
 8018886:	4283      	cmp	r3, r0
 8018888:	4637      	mov	r7, r6
 801888a:	dc05      	bgt.n	8018898 <__swbuf_r+0x4e>
 801888c:	4621      	mov	r1, r4
 801888e:	4628      	mov	r0, r5
 8018890:	f7ff f946 	bl	8017b20 <_fflush_r>
 8018894:	2800      	cmp	r0, #0
 8018896:	d1ed      	bne.n	8018874 <__swbuf_r+0x2a>
 8018898:	68a3      	ldr	r3, [r4, #8]
 801889a:	3b01      	subs	r3, #1
 801889c:	60a3      	str	r3, [r4, #8]
 801889e:	6823      	ldr	r3, [r4, #0]
 80188a0:	1c5a      	adds	r2, r3, #1
 80188a2:	6022      	str	r2, [r4, #0]
 80188a4:	701e      	strb	r6, [r3, #0]
 80188a6:	6962      	ldr	r2, [r4, #20]
 80188a8:	1c43      	adds	r3, r0, #1
 80188aa:	429a      	cmp	r2, r3
 80188ac:	d004      	beq.n	80188b8 <__swbuf_r+0x6e>
 80188ae:	89a3      	ldrh	r3, [r4, #12]
 80188b0:	07db      	lsls	r3, r3, #31
 80188b2:	d5e1      	bpl.n	8018878 <__swbuf_r+0x2e>
 80188b4:	2e0a      	cmp	r6, #10
 80188b6:	d1df      	bne.n	8018878 <__swbuf_r+0x2e>
 80188b8:	4621      	mov	r1, r4
 80188ba:	4628      	mov	r0, r5
 80188bc:	f7ff f930 	bl	8017b20 <_fflush_r>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	d0d9      	beq.n	8018878 <__swbuf_r+0x2e>
 80188c4:	e7d6      	b.n	8018874 <__swbuf_r+0x2a>
	...

080188c8 <__swsetup_r>:
 80188c8:	b538      	push	{r3, r4, r5, lr}
 80188ca:	4b29      	ldr	r3, [pc, #164]	@ (8018970 <__swsetup_r+0xa8>)
 80188cc:	4605      	mov	r5, r0
 80188ce:	6818      	ldr	r0, [r3, #0]
 80188d0:	460c      	mov	r4, r1
 80188d2:	b118      	cbz	r0, 80188dc <__swsetup_r+0x14>
 80188d4:	6a03      	ldr	r3, [r0, #32]
 80188d6:	b90b      	cbnz	r3, 80188dc <__swsetup_r+0x14>
 80188d8:	f7fc fbce 	bl	8015078 <__sinit>
 80188dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e0:	0719      	lsls	r1, r3, #28
 80188e2:	d422      	bmi.n	801892a <__swsetup_r+0x62>
 80188e4:	06da      	lsls	r2, r3, #27
 80188e6:	d407      	bmi.n	80188f8 <__swsetup_r+0x30>
 80188e8:	2209      	movs	r2, #9
 80188ea:	602a      	str	r2, [r5, #0]
 80188ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188f0:	81a3      	strh	r3, [r4, #12]
 80188f2:	f04f 30ff 	mov.w	r0, #4294967295
 80188f6:	e033      	b.n	8018960 <__swsetup_r+0x98>
 80188f8:	0758      	lsls	r0, r3, #29
 80188fa:	d512      	bpl.n	8018922 <__swsetup_r+0x5a>
 80188fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188fe:	b141      	cbz	r1, 8018912 <__swsetup_r+0x4a>
 8018900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018904:	4299      	cmp	r1, r3
 8018906:	d002      	beq.n	801890e <__swsetup_r+0x46>
 8018908:	4628      	mov	r0, r5
 801890a:	f7fe f9ed 	bl	8016ce8 <_free_r>
 801890e:	2300      	movs	r3, #0
 8018910:	6363      	str	r3, [r4, #52]	@ 0x34
 8018912:	89a3      	ldrh	r3, [r4, #12]
 8018914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018918:	81a3      	strh	r3, [r4, #12]
 801891a:	2300      	movs	r3, #0
 801891c:	6063      	str	r3, [r4, #4]
 801891e:	6923      	ldr	r3, [r4, #16]
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	89a3      	ldrh	r3, [r4, #12]
 8018924:	f043 0308 	orr.w	r3, r3, #8
 8018928:	81a3      	strh	r3, [r4, #12]
 801892a:	6923      	ldr	r3, [r4, #16]
 801892c:	b94b      	cbnz	r3, 8018942 <__swsetup_r+0x7a>
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018938:	d003      	beq.n	8018942 <__swsetup_r+0x7a>
 801893a:	4621      	mov	r1, r4
 801893c:	4628      	mov	r0, r5
 801893e:	f000 f907 	bl	8018b50 <__smakebuf_r>
 8018942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018946:	f013 0201 	ands.w	r2, r3, #1
 801894a:	d00a      	beq.n	8018962 <__swsetup_r+0x9a>
 801894c:	2200      	movs	r2, #0
 801894e:	60a2      	str	r2, [r4, #8]
 8018950:	6962      	ldr	r2, [r4, #20]
 8018952:	4252      	negs	r2, r2
 8018954:	61a2      	str	r2, [r4, #24]
 8018956:	6922      	ldr	r2, [r4, #16]
 8018958:	b942      	cbnz	r2, 801896c <__swsetup_r+0xa4>
 801895a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801895e:	d1c5      	bne.n	80188ec <__swsetup_r+0x24>
 8018960:	bd38      	pop	{r3, r4, r5, pc}
 8018962:	0799      	lsls	r1, r3, #30
 8018964:	bf58      	it	pl
 8018966:	6962      	ldrpl	r2, [r4, #20]
 8018968:	60a2      	str	r2, [r4, #8]
 801896a:	e7f4      	b.n	8018956 <__swsetup_r+0x8e>
 801896c:	2000      	movs	r0, #0
 801896e:	e7f7      	b.n	8018960 <__swsetup_r+0x98>
 8018970:	20000038 	.word	0x20000038

08018974 <_raise_r>:
 8018974:	291f      	cmp	r1, #31
 8018976:	b538      	push	{r3, r4, r5, lr}
 8018978:	4605      	mov	r5, r0
 801897a:	460c      	mov	r4, r1
 801897c:	d904      	bls.n	8018988 <_raise_r+0x14>
 801897e:	2316      	movs	r3, #22
 8018980:	6003      	str	r3, [r0, #0]
 8018982:	f04f 30ff 	mov.w	r0, #4294967295
 8018986:	bd38      	pop	{r3, r4, r5, pc}
 8018988:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801898a:	b112      	cbz	r2, 8018992 <_raise_r+0x1e>
 801898c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018990:	b94b      	cbnz	r3, 80189a6 <_raise_r+0x32>
 8018992:	4628      	mov	r0, r5
 8018994:	f000 f830 	bl	80189f8 <_getpid_r>
 8018998:	4622      	mov	r2, r4
 801899a:	4601      	mov	r1, r0
 801899c:	4628      	mov	r0, r5
 801899e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189a2:	f000 b817 	b.w	80189d4 <_kill_r>
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d00a      	beq.n	80189c0 <_raise_r+0x4c>
 80189aa:	1c59      	adds	r1, r3, #1
 80189ac:	d103      	bne.n	80189b6 <_raise_r+0x42>
 80189ae:	2316      	movs	r3, #22
 80189b0:	6003      	str	r3, [r0, #0]
 80189b2:	2001      	movs	r0, #1
 80189b4:	e7e7      	b.n	8018986 <_raise_r+0x12>
 80189b6:	2100      	movs	r1, #0
 80189b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80189bc:	4620      	mov	r0, r4
 80189be:	4798      	blx	r3
 80189c0:	2000      	movs	r0, #0
 80189c2:	e7e0      	b.n	8018986 <_raise_r+0x12>

080189c4 <raise>:
 80189c4:	4b02      	ldr	r3, [pc, #8]	@ (80189d0 <raise+0xc>)
 80189c6:	4601      	mov	r1, r0
 80189c8:	6818      	ldr	r0, [r3, #0]
 80189ca:	f7ff bfd3 	b.w	8018974 <_raise_r>
 80189ce:	bf00      	nop
 80189d0:	20000038 	.word	0x20000038

080189d4 <_kill_r>:
 80189d4:	b538      	push	{r3, r4, r5, lr}
 80189d6:	4d07      	ldr	r5, [pc, #28]	@ (80189f4 <_kill_r+0x20>)
 80189d8:	2300      	movs	r3, #0
 80189da:	4604      	mov	r4, r0
 80189dc:	4608      	mov	r0, r1
 80189de:	4611      	mov	r1, r2
 80189e0:	602b      	str	r3, [r5, #0]
 80189e2:	f7f3 fd0b 	bl	800c3fc <_kill>
 80189e6:	1c43      	adds	r3, r0, #1
 80189e8:	d102      	bne.n	80189f0 <_kill_r+0x1c>
 80189ea:	682b      	ldr	r3, [r5, #0]
 80189ec:	b103      	cbz	r3, 80189f0 <_kill_r+0x1c>
 80189ee:	6023      	str	r3, [r4, #0]
 80189f0:	bd38      	pop	{r3, r4, r5, pc}
 80189f2:	bf00      	nop
 80189f4:	2000a974 	.word	0x2000a974

080189f8 <_getpid_r>:
 80189f8:	f7f3 bcf8 	b.w	800c3ec <_getpid>

080189fc <_malloc_usable_size_r>:
 80189fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a00:	1f18      	subs	r0, r3, #4
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	bfbc      	itt	lt
 8018a06:	580b      	ldrlt	r3, [r1, r0]
 8018a08:	18c0      	addlt	r0, r0, r3
 8018a0a:	4770      	bx	lr

08018a0c <_strtol_l.isra.0>:
 8018a0c:	2b24      	cmp	r3, #36	@ 0x24
 8018a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a12:	4686      	mov	lr, r0
 8018a14:	4690      	mov	r8, r2
 8018a16:	d801      	bhi.n	8018a1c <_strtol_l.isra.0+0x10>
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	d106      	bne.n	8018a2a <_strtol_l.isra.0+0x1e>
 8018a1c:	f7fd fa9e 	bl	8015f5c <__errno>
 8018a20:	2316      	movs	r3, #22
 8018a22:	6003      	str	r3, [r0, #0]
 8018a24:	2000      	movs	r0, #0
 8018a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a2a:	4834      	ldr	r0, [pc, #208]	@ (8018afc <_strtol_l.isra.0+0xf0>)
 8018a2c:	460d      	mov	r5, r1
 8018a2e:	462a      	mov	r2, r5
 8018a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a34:	5d06      	ldrb	r6, [r0, r4]
 8018a36:	f016 0608 	ands.w	r6, r6, #8
 8018a3a:	d1f8      	bne.n	8018a2e <_strtol_l.isra.0+0x22>
 8018a3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8018a3e:	d110      	bne.n	8018a62 <_strtol_l.isra.0+0x56>
 8018a40:	782c      	ldrb	r4, [r5, #0]
 8018a42:	2601      	movs	r6, #1
 8018a44:	1c95      	adds	r5, r2, #2
 8018a46:	f033 0210 	bics.w	r2, r3, #16
 8018a4a:	d115      	bne.n	8018a78 <_strtol_l.isra.0+0x6c>
 8018a4c:	2c30      	cmp	r4, #48	@ 0x30
 8018a4e:	d10d      	bne.n	8018a6c <_strtol_l.isra.0+0x60>
 8018a50:	782a      	ldrb	r2, [r5, #0]
 8018a52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018a56:	2a58      	cmp	r2, #88	@ 0x58
 8018a58:	d108      	bne.n	8018a6c <_strtol_l.isra.0+0x60>
 8018a5a:	786c      	ldrb	r4, [r5, #1]
 8018a5c:	3502      	adds	r5, #2
 8018a5e:	2310      	movs	r3, #16
 8018a60:	e00a      	b.n	8018a78 <_strtol_l.isra.0+0x6c>
 8018a62:	2c2b      	cmp	r4, #43	@ 0x2b
 8018a64:	bf04      	itt	eq
 8018a66:	782c      	ldrbeq	r4, [r5, #0]
 8018a68:	1c95      	addeq	r5, r2, #2
 8018a6a:	e7ec      	b.n	8018a46 <_strtol_l.isra.0+0x3a>
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d1f6      	bne.n	8018a5e <_strtol_l.isra.0+0x52>
 8018a70:	2c30      	cmp	r4, #48	@ 0x30
 8018a72:	bf14      	ite	ne
 8018a74:	230a      	movne	r3, #10
 8018a76:	2308      	moveq	r3, #8
 8018a78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018a7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a80:	2200      	movs	r2, #0
 8018a82:	fbbc f9f3 	udiv	r9, ip, r3
 8018a86:	4610      	mov	r0, r2
 8018a88:	fb03 ca19 	mls	sl, r3, r9, ip
 8018a8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018a90:	2f09      	cmp	r7, #9
 8018a92:	d80f      	bhi.n	8018ab4 <_strtol_l.isra.0+0xa8>
 8018a94:	463c      	mov	r4, r7
 8018a96:	42a3      	cmp	r3, r4
 8018a98:	dd1b      	ble.n	8018ad2 <_strtol_l.isra.0+0xc6>
 8018a9a:	1c57      	adds	r7, r2, #1
 8018a9c:	d007      	beq.n	8018aae <_strtol_l.isra.0+0xa2>
 8018a9e:	4581      	cmp	r9, r0
 8018aa0:	d314      	bcc.n	8018acc <_strtol_l.isra.0+0xc0>
 8018aa2:	d101      	bne.n	8018aa8 <_strtol_l.isra.0+0x9c>
 8018aa4:	45a2      	cmp	sl, r4
 8018aa6:	db11      	blt.n	8018acc <_strtol_l.isra.0+0xc0>
 8018aa8:	fb00 4003 	mla	r0, r0, r3, r4
 8018aac:	2201      	movs	r2, #1
 8018aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ab2:	e7eb      	b.n	8018a8c <_strtol_l.isra.0+0x80>
 8018ab4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018ab8:	2f19      	cmp	r7, #25
 8018aba:	d801      	bhi.n	8018ac0 <_strtol_l.isra.0+0xb4>
 8018abc:	3c37      	subs	r4, #55	@ 0x37
 8018abe:	e7ea      	b.n	8018a96 <_strtol_l.isra.0+0x8a>
 8018ac0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018ac4:	2f19      	cmp	r7, #25
 8018ac6:	d804      	bhi.n	8018ad2 <_strtol_l.isra.0+0xc6>
 8018ac8:	3c57      	subs	r4, #87	@ 0x57
 8018aca:	e7e4      	b.n	8018a96 <_strtol_l.isra.0+0x8a>
 8018acc:	f04f 32ff 	mov.w	r2, #4294967295
 8018ad0:	e7ed      	b.n	8018aae <_strtol_l.isra.0+0xa2>
 8018ad2:	1c53      	adds	r3, r2, #1
 8018ad4:	d108      	bne.n	8018ae8 <_strtol_l.isra.0+0xdc>
 8018ad6:	2322      	movs	r3, #34	@ 0x22
 8018ad8:	f8ce 3000 	str.w	r3, [lr]
 8018adc:	4660      	mov	r0, ip
 8018ade:	f1b8 0f00 	cmp.w	r8, #0
 8018ae2:	d0a0      	beq.n	8018a26 <_strtol_l.isra.0+0x1a>
 8018ae4:	1e69      	subs	r1, r5, #1
 8018ae6:	e006      	b.n	8018af6 <_strtol_l.isra.0+0xea>
 8018ae8:	b106      	cbz	r6, 8018aec <_strtol_l.isra.0+0xe0>
 8018aea:	4240      	negs	r0, r0
 8018aec:	f1b8 0f00 	cmp.w	r8, #0
 8018af0:	d099      	beq.n	8018a26 <_strtol_l.isra.0+0x1a>
 8018af2:	2a00      	cmp	r2, #0
 8018af4:	d1f6      	bne.n	8018ae4 <_strtol_l.isra.0+0xd8>
 8018af6:	f8c8 1000 	str.w	r1, [r8]
 8018afa:	e794      	b.n	8018a26 <_strtol_l.isra.0+0x1a>
 8018afc:	0801aca9 	.word	0x0801aca9

08018b00 <_strtol_r>:
 8018b00:	f7ff bf84 	b.w	8018a0c <_strtol_l.isra.0>

08018b04 <__swhatbuf_r>:
 8018b04:	b570      	push	{r4, r5, r6, lr}
 8018b06:	460c      	mov	r4, r1
 8018b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b0c:	2900      	cmp	r1, #0
 8018b0e:	b096      	sub	sp, #88	@ 0x58
 8018b10:	4615      	mov	r5, r2
 8018b12:	461e      	mov	r6, r3
 8018b14:	da0d      	bge.n	8018b32 <__swhatbuf_r+0x2e>
 8018b16:	89a3      	ldrh	r3, [r4, #12]
 8018b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b1c:	f04f 0100 	mov.w	r1, #0
 8018b20:	bf14      	ite	ne
 8018b22:	2340      	movne	r3, #64	@ 0x40
 8018b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b28:	2000      	movs	r0, #0
 8018b2a:	6031      	str	r1, [r6, #0]
 8018b2c:	602b      	str	r3, [r5, #0]
 8018b2e:	b016      	add	sp, #88	@ 0x58
 8018b30:	bd70      	pop	{r4, r5, r6, pc}
 8018b32:	466a      	mov	r2, sp
 8018b34:	f000 f848 	bl	8018bc8 <_fstat_r>
 8018b38:	2800      	cmp	r0, #0
 8018b3a:	dbec      	blt.n	8018b16 <__swhatbuf_r+0x12>
 8018b3c:	9901      	ldr	r1, [sp, #4]
 8018b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018b46:	4259      	negs	r1, r3
 8018b48:	4159      	adcs	r1, r3
 8018b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018b4e:	e7eb      	b.n	8018b28 <__swhatbuf_r+0x24>

08018b50 <__smakebuf_r>:
 8018b50:	898b      	ldrh	r3, [r1, #12]
 8018b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b54:	079d      	lsls	r5, r3, #30
 8018b56:	4606      	mov	r6, r0
 8018b58:	460c      	mov	r4, r1
 8018b5a:	d507      	bpl.n	8018b6c <__smakebuf_r+0x1c>
 8018b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018b60:	6023      	str	r3, [r4, #0]
 8018b62:	6123      	str	r3, [r4, #16]
 8018b64:	2301      	movs	r3, #1
 8018b66:	6163      	str	r3, [r4, #20]
 8018b68:	b003      	add	sp, #12
 8018b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b6c:	ab01      	add	r3, sp, #4
 8018b6e:	466a      	mov	r2, sp
 8018b70:	f7ff ffc8 	bl	8018b04 <__swhatbuf_r>
 8018b74:	9f00      	ldr	r7, [sp, #0]
 8018b76:	4605      	mov	r5, r0
 8018b78:	4639      	mov	r1, r7
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	f7fe f974 	bl	8016e68 <_malloc_r>
 8018b80:	b948      	cbnz	r0, 8018b96 <__smakebuf_r+0x46>
 8018b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b86:	059a      	lsls	r2, r3, #22
 8018b88:	d4ee      	bmi.n	8018b68 <__smakebuf_r+0x18>
 8018b8a:	f023 0303 	bic.w	r3, r3, #3
 8018b8e:	f043 0302 	orr.w	r3, r3, #2
 8018b92:	81a3      	strh	r3, [r4, #12]
 8018b94:	e7e2      	b.n	8018b5c <__smakebuf_r+0xc>
 8018b96:	89a3      	ldrh	r3, [r4, #12]
 8018b98:	6020      	str	r0, [r4, #0]
 8018b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b9e:	81a3      	strh	r3, [r4, #12]
 8018ba0:	9b01      	ldr	r3, [sp, #4]
 8018ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018ba6:	b15b      	cbz	r3, 8018bc0 <__smakebuf_r+0x70>
 8018ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bac:	4630      	mov	r0, r6
 8018bae:	f000 f81d 	bl	8018bec <_isatty_r>
 8018bb2:	b128      	cbz	r0, 8018bc0 <__smakebuf_r+0x70>
 8018bb4:	89a3      	ldrh	r3, [r4, #12]
 8018bb6:	f023 0303 	bic.w	r3, r3, #3
 8018bba:	f043 0301 	orr.w	r3, r3, #1
 8018bbe:	81a3      	strh	r3, [r4, #12]
 8018bc0:	89a3      	ldrh	r3, [r4, #12]
 8018bc2:	431d      	orrs	r5, r3
 8018bc4:	81a5      	strh	r5, [r4, #12]
 8018bc6:	e7cf      	b.n	8018b68 <__smakebuf_r+0x18>

08018bc8 <_fstat_r>:
 8018bc8:	b538      	push	{r3, r4, r5, lr}
 8018bca:	4d07      	ldr	r5, [pc, #28]	@ (8018be8 <_fstat_r+0x20>)
 8018bcc:	2300      	movs	r3, #0
 8018bce:	4604      	mov	r4, r0
 8018bd0:	4608      	mov	r0, r1
 8018bd2:	4611      	mov	r1, r2
 8018bd4:	602b      	str	r3, [r5, #0]
 8018bd6:	f7f3 fc71 	bl	800c4bc <_fstat>
 8018bda:	1c43      	adds	r3, r0, #1
 8018bdc:	d102      	bne.n	8018be4 <_fstat_r+0x1c>
 8018bde:	682b      	ldr	r3, [r5, #0]
 8018be0:	b103      	cbz	r3, 8018be4 <_fstat_r+0x1c>
 8018be2:	6023      	str	r3, [r4, #0]
 8018be4:	bd38      	pop	{r3, r4, r5, pc}
 8018be6:	bf00      	nop
 8018be8:	2000a974 	.word	0x2000a974

08018bec <_isatty_r>:
 8018bec:	b538      	push	{r3, r4, r5, lr}
 8018bee:	4d06      	ldr	r5, [pc, #24]	@ (8018c08 <_isatty_r+0x1c>)
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	4608      	mov	r0, r1
 8018bf6:	602b      	str	r3, [r5, #0]
 8018bf8:	f7f3 fc70 	bl	800c4dc <_isatty>
 8018bfc:	1c43      	adds	r3, r0, #1
 8018bfe:	d102      	bne.n	8018c06 <_isatty_r+0x1a>
 8018c00:	682b      	ldr	r3, [r5, #0]
 8018c02:	b103      	cbz	r3, 8018c06 <_isatty_r+0x1a>
 8018c04:	6023      	str	r3, [r4, #0]
 8018c06:	bd38      	pop	{r3, r4, r5, pc}
 8018c08:	2000a974 	.word	0x2000a974

08018c0c <_init>:
 8018c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c0e:	bf00      	nop
 8018c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c12:	bc08      	pop	{r3}
 8018c14:	469e      	mov	lr, r3
 8018c16:	4770      	bx	lr

08018c18 <_fini>:
 8018c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c1a:	bf00      	nop
 8018c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c1e:	bc08      	pop	{r3}
 8018c20:	469e      	mov	lr, r3
 8018c22:	4770      	bx	lr
 8018c24:	0000      	movs	r0, r0
	...

08018c28 <__FLASH_Program_Fast_veneer>:
 8018c28:	f85f f000 	ldr.w	pc, [pc]	@ 8018c2c <__FLASH_Program_Fast_veneer+0x4>
 8018c2c:	2000024d 	.word	0x2000024d

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000001                                ....

20000010 <debugMessages>:
20000010:	00350017                                ..5.

20000014 <environ>:
20000014:	2000a74c                                L.. 

20000018 <SystemCoreClock>:
20000018:	003d0900                                ..=.

2000001c <uwTickPrio>:
2000001c:	00000010                                ....

20000020 <uwTickFreq>:
20000020:	00000001                                ....

20000024 <__sglue>:
20000024:	00000000 00000003 2000a814              ........... 

20000030 <_tzname>:
20000030:	0801a95d 0801a95d                       ]...]...

20000038 <_impure_ptr>:
20000038:	2000003c                                <.. 

2000003c <_impure_data>:
2000003c:	00000000 2000a814 2000a87c 2000a8e4     ....... |.. ... 
	...

20000088 <tzinfo>:
20000088:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000b8:	0000004a 00000000 00000000 00000000     J...............
	...

200000e0 <__global_locale>:
200000e0:	00000043 00000000 00000000 00000000     C...............
	...
20000100:	00000043 00000000 00000000 00000000     C...............
	...
20000120:	00000043 00000000 00000000 00000000     C...............
	...
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	08017e89 08017e09 00000000 0801aca8     .~...~..........
200001d0:	0801aacc 0801a9e3 0801a9e3 0801a9e3     ................
200001e0:	0801a9e3 0801a9e3 0801a9e3 0801a9e3     ................
200001f0:	0801a9e3 0801a9e3 ffffffff ffffffff     ................
20000200:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000228:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000024c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000024c:	b480      	push	{r7}
2000024e:	b089      	sub	sp, #36	@ 0x24
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
20000254:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000256:	2380      	movs	r3, #128	@ 0x80
20000258:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000025e:	683b      	ldr	r3, [r7, #0]
20000260:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000262:	4b18      	ldr	r3, [pc, #96]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000264:	695b      	ldr	r3, [r3, #20]
20000266:	4a17      	ldr	r2, [pc, #92]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000026c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026e:	f3ef 8310 	mrs	r3, PRIMASK
20000272:	60fb      	str	r3, [r7, #12]
  return(result);
20000274:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000278:	b672      	cpsid	i
}
2000027a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	681a      	ldr	r2, [r3, #0]
20000280:	69bb      	ldr	r3, [r7, #24]
20000282:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000284:	69bb      	ldr	r3, [r7, #24]
20000286:	3304      	adds	r3, #4
20000288:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	3304      	adds	r3, #4
2000028e:	617b      	str	r3, [r7, #20]
    row_index--;
20000290:	7ffb      	ldrb	r3, [r7, #31]
20000292:	3b01      	subs	r3, #1
20000294:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000296:	7ffb      	ldrb	r3, [r7, #31]
20000298:	2b00      	cmp	r3, #0
2000029a:	d1ef      	bne.n	2000027c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
2000029c:	bf00      	nop
2000029e:	4b09      	ldr	r3, [pc, #36]	@ (200002c4 <FLASH_Program_Fast+0x78>)
200002a0:	691b      	ldr	r3, [r3, #16]
200002a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002aa:	d0f8      	beq.n	2000029e <FLASH_Program_Fast+0x52>
200002ac:	693b      	ldr	r3, [r7, #16]
200002ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b0:	68bb      	ldr	r3, [r7, #8]
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002b8:	bf00      	nop
200002ba:	3724      	adds	r7, #36	@ 0x24
200002bc:	46bd      	mov	sp, r7
200002be:	f85d 7b04 	ldr.w	r7, [sp], #4
200002c2:	4770      	bx	lr
200002c4:	58004000 	.word	0x58004000
