
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ad8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021bc  08018c18  08018c18  00019c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801add4  0801add4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801addc  0801addc  0001bddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ade0  0801ade0  0001bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c0  20000008  0801ade4  0001c008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a6bc  200002c8  0801b0a4  0001c2c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000a984  0801b0a4  0001c984  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001c2c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030d6d  00000000  00000000  0001c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054c4  00000000  00000000  0004d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c20  00000000  00000000  00052530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000226d  00000000  00000000  00055150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000287d4  00000000  00000000  000573bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d8ac  00000000  00000000  0007fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fa20a  00000000  00000000  000ad43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7647  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d6cc  00000000  00000000  001a768c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001b4d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	08018bf4 	.word	0x08018bf4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	08018bf4 	.word	0x08018bf4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9d3 	b.w	8001020 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b988 	b.w	8001020 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8001032:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d11a      	bne.n	800107a <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e f8da 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4a2a      	ldr	r2, [pc, #168]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 800105c:	4926      	ldr	r1, [pc, #152]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800105e:	482a      	ldr	r0, [pc, #168]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 8001060:	f010 fc50 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <DRV_CANFDSPI_Reset+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <DRV_CANFDSPI_Reset+0xdc>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f00e f8c8 	bl	800f208 <HAL_GPIO_WritePin>
 8001078:	e037      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d11a      	bne.n	80010b6 <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 8001086:	8811      	ldrh	r1, [r2, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00e f8bc 	bl	800f208 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	2264      	movs	r2, #100	@ 0x64
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 8001098:	4917      	ldr	r1, [pc, #92]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 800109a:	481b      	ldr	r0, [pc, #108]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 800109c:	f010 fc32 	bl	8011904 <HAL_SPI_TransmitReceive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <DRV_CANFDSPI_Reset+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <DRV_CANFDSPI_Reset+0xec>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00e f8aa 	bl	800f208 <HAL_GPIO_WritePin>
 80010b4:	e019      	b.n	80010ea <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010bc:	8811      	ldrh	r1, [r2, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00e f8a1 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2264      	movs	r2, #100	@ 0x64
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <DRV_CANFDSPI_Reset+0xe0>)
 80010ce:	490a      	ldr	r1, [pc, #40]	@ (80010f8 <DRV_CANFDSPI_Reset+0xd4>)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <DRV_CANFDSPI_Reset+0xe4>)
 80010d2:	f010 fc17 	bl	8011904 <HAL_SPI_TransmitReceive>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <DRV_CANFDSPI_Reset+0xf0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <DRV_CANFDSPI_Reset+0xf4>)
 80010e0:	8811      	ldrh	r1, [r2, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00e f88f 	bl	800f208 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002e4 	.word	0x200002e4
 80010fc:	20000cb0 	.word	0x20000cb0
 8001100:	20000cae 	.word	0x20000cae
 8001104:	20000344 	.word	0x20000344
 8001108:	20000508 	.word	0x20000508
 800110c:	20000c90 	.word	0x20000c90
 8001110:	20000c8e 	.word	0x20000c8e
 8001114:	20000c70 	.word	0x20000c70
 8001118:	20000c6e 	.word	0x20000c6e

0800111c <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	603a      	str	r2, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	460b      	mov	r3, r1
 800112a:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3330      	adds	r3, #48	@ 0x30
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001144:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 800114c:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001150:	2200      	movs	r2, #0
 8001152:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d11a      	bne.n	8001190 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00e f84f 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001172:	4928      	ldr	r1, [pc, #160]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001174:	482b      	ldr	r0, [pc, #172]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 8001176:	f010 fbc5 	bl	8011904 <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <DRV_CANFDSPI_ReadByte+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <DRV_CANFDSPI_ReadByte+0x100>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f00e f83d 	bl	800f208 <HAL_GPIO_WritePin>
 800118e:	e037      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d11a      	bne.n	80011cc <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 800119c:	8811      	ldrh	r1, [r2, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e f831 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a6:	89bb      	ldrh	r3, [r7, #12]
 80011a8:	2264      	movs	r2, #100	@ 0x64
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011ae:	4919      	ldr	r1, [pc, #100]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011b2:	f010 fba7 	bl	8011904 <HAL_SPI_TransmitReceive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <DRV_CANFDSPI_ReadByte+0x10c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <DRV_CANFDSPI_ReadByte+0x110>)
 80011c0:	8811      	ldrh	r1, [r2, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e f81f 	bl	800f208 <HAL_GPIO_WritePin>
 80011ca:	e019      	b.n	8001200 <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00e f816 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011dc:	89bb      	ldrh	r3, [r7, #12]
 80011de:	2264      	movs	r2, #100	@ 0x64
 80011e0:	9200      	str	r2, [sp, #0]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 80011e4:	490b      	ldr	r1, [pc, #44]	@ (8001214 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <DRV_CANFDSPI_ReadByte+0x108>)
 80011e8:	f010 fb8c 	bl	8011904 <HAL_SPI_TransmitReceive>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <DRV_CANFDSPI_ReadByte+0x114>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <DRV_CANFDSPI_ReadByte+0x118>)
 80011f6:	8811      	ldrh	r1, [r2, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00e f804 	bl	800f208 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <DRV_CANFDSPI_ReadByte+0x104>)
 8001202:	789a      	ldrb	r2, [r3, #2]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002e4 	.word	0x200002e4
 8001218:	20000cb0 	.word	0x20000cb0
 800121c:	20000cae 	.word	0x20000cae
 8001220:	20000344 	.word	0x20000344
 8001224:	20000508 	.word	0x20000508
 8001228:	20000c90 	.word	0x20000c90
 800122c:	20000c8e 	.word	0x20000c8e
 8001230:	20000c70 	.word	0x20000c70
 8001234:	20000c6e 	.word	0x20000c6e

08001238 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800124a:	2303      	movs	r3, #3
 800124c:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3320      	adds	r3, #32
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001262:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126a:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 800126c:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d11a      	bne.n	80012ae <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d ffc0 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	@ 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001290:	4926      	ldr	r1, [pc, #152]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001292:	482a      	ldr	r0, [pc, #168]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001294:	f010 fb36 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <DRV_CANFDSPI_WriteByte+0xf8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <DRV_CANFDSPI_WriteByte+0xfc>)
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00d ffae 	bl	800f208 <HAL_GPIO_WritePin>
 80012ac:	e037      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11a      	bne.n	80012ea <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a22      	ldr	r2, [pc, #136]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012ba:	8811      	ldrh	r1, [r2, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00d ffa2 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012c4:	89bb      	ldrh	r3, [r7, #12]
 80012c6:	2264      	movs	r2, #100	@ 0x64
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 80012cc:	4917      	ldr	r1, [pc, #92]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 80012d0:	f010 fb18 	bl	8011904 <HAL_SPI_TransmitReceive>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <DRV_CANFDSPI_WriteByte+0x108>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012de:	8811      	ldrh	r1, [r2, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00d ff90 	bl	800f208 <HAL_GPIO_WritePin>
 80012e8:	e019      	b.n	800131e <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 80012f0:	8811      	ldrh	r1, [r2, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00d ff87 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <DRV_CANFDSPI_WriteByte+0x100>)
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <DRV_CANFDSPI_WriteByte+0xf4>)
 8001304:	480d      	ldr	r0, [pc, #52]	@ (800133c <DRV_CANFDSPI_WriteByte+0x104>)
 8001306:	f010 fafd 	bl	8011904 <HAL_SPI_TransmitReceive>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <DRV_CANFDSPI_WriteByte+0x110>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <DRV_CANFDSPI_WriteByte+0x114>)
 8001314:	8811      	ldrh	r1, [r2, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f00d ff75 	bl	800f208 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002e4 	.word	0x200002e4
 8001330:	20000cb0 	.word	0x20000cb0
 8001334:	20000cae 	.word	0x20000cae
 8001338:	20000344 	.word	0x20000344
 800133c:	20000508 	.word	0x20000508
 8001340:	20000c90 	.word	0x20000c90
 8001344:	20000c8e 	.word	0x20000c8e
 8001348:	20000c70 	.word	0x20000c70
 800134c:	20000c6e 	.word	0x20000c6e

08001350 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	603a      	str	r2, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	460b      	mov	r3, r1
 800135e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001360:	2306      	movs	r3, #6
 8001362:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001378:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001380:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d11a      	bne.n	80013be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a3d      	ldr	r2, [pc, #244]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 800138e:	8811      	ldrh	r1, [r2, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00d ff38 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001398:	89bb      	ldrh	r3, [r7, #12]
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	4a3a      	ldr	r2, [pc, #232]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013a0:	4936      	ldr	r1, [pc, #216]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013a2:	483a      	ldr	r0, [pc, #232]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013a4:	f010 faae 	bl	8011904 <HAL_SPI_TransmitReceive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <DRV_CANFDSPI_ReadWord+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <DRV_CANFDSPI_ReadWord+0x134>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00d ff26 	bl	800f208 <HAL_GPIO_WritePin>
 80013bc:	e037      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d11a      	bne.n	80013fa <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ca:	8811      	ldrh	r1, [r2, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d ff1a 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 80013dc:	4927      	ldr	r1, [pc, #156]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 80013de:	482b      	ldr	r0, [pc, #172]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 80013e0:	f010 fa90 	bl	8011904 <HAL_SPI_TransmitReceive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <DRV_CANFDSPI_ReadWord+0x140>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00d ff08 	bl	800f208 <HAL_GPIO_WritePin>
 80013f8:	e019      	b.n	800142e <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a27      	ldr	r2, [pc, #156]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001400:	8811      	ldrh	r1, [r2, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00d feff 	bl	800f208 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	2264      	movs	r2, #100	@ 0x64
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 8001412:	491a      	ldr	r1, [pc, #104]	@ (800147c <DRV_CANFDSPI_ReadWord+0x12c>)
 8001414:	481d      	ldr	r0, [pc, #116]	@ (800148c <DRV_CANFDSPI_ReadWord+0x13c>)
 8001416:	f010 fa75 	bl	8011904 <HAL_SPI_TransmitReceive>
 800141a:	4603      	mov	r3, r0
 800141c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <DRV_CANFDSPI_ReadWord+0x148>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <DRV_CANFDSPI_ReadWord+0x14c>)
 8001424:	8811      	ldrh	r1, [r2, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f00d feed 	bl	800f208 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001438:	e01c      	b.n	8001474 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001440:	2302      	movs	r3, #2
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e011      	b.n	800146a <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <DRV_CANFDSPI_ReadWord+0x138>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b02      	subs	r3, #2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	441a      	add	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d9ea      	bls.n	8001446 <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 8001470:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002e4 	.word	0x200002e4
 8001480:	20000cb0 	.word	0x20000cb0
 8001484:	20000cae 	.word	0x20000cae
 8001488:	20000344 	.word	0x20000344
 800148c:	20000508 	.word	0x20000508
 8001490:	20000c90 	.word	0x20000c90
 8001494:	20000c8e 	.word	0x20000c8e
 8001498:	20000c70 	.word	0x20000c70
 800149c:	20000c6e 	.word	0x20000c6e

080014a0 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80014b0:	2306      	movs	r3, #6
 80014b2:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3320      	adds	r3, #32
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014c8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014d0:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e00b      	b.n	80014f0 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	40da      	lsrs	r2, r3
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3302      	adds	r3, #2
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 80014e8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9f0      	bls.n	80014d8 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d11a      	bne.n	8001532 <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00d fe7e 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	2264      	movs	r2, #100	@ 0x64
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001514:	4926      	ldr	r1, [pc, #152]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001516:	482a      	ldr	r0, [pc, #168]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001518:	f010 f9f4 	bl	8011904 <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <DRV_CANFDSPI_WriteWord+0x114>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a24      	ldr	r2, [pc, #144]	@ (80015b8 <DRV_CANFDSPI_WriteWord+0x118>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f00d fe6c 	bl	800f208 <HAL_GPIO_WritePin>
 8001530:	e037      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11a      	bne.n	800156e <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f00d fe60 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	2264      	movs	r2, #100	@ 0x64
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 8001554:	f010 f9d6 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <DRV_CANFDSPI_WriteWord+0x124>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <DRV_CANFDSPI_WriteWord+0x128>)
 8001562:	8811      	ldrh	r1, [r2, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f00d fe4e 	bl	800f208 <HAL_GPIO_WritePin>
 800156c:	e019      	b.n	80015a2 <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001574:	8811      	ldrh	r1, [r2, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00d fe45 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800157e:	89bb      	ldrh	r3, [r7, #12]
 8001580:	2264      	movs	r2, #100	@ 0x64
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <DRV_CANFDSPI_WriteWord+0x11c>)
 8001586:	490a      	ldr	r1, [pc, #40]	@ (80015b0 <DRV_CANFDSPI_WriteWord+0x110>)
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <DRV_CANFDSPI_WriteWord+0x120>)
 800158a:	f010 f9bb 	bl	8011904 <HAL_SPI_TransmitReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <DRV_CANFDSPI_WriteWord+0x12c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <DRV_CANFDSPI_WriteWord+0x130>)
 8001598:	8811      	ldrh	r1, [r2, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f00d fe33 	bl	800f208 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 80015a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	20000cb0 	.word	0x20000cb0
 80015b8:	20000cae 	.word	0x20000cae
 80015bc:	20000344 	.word	0x20000344
 80015c0:	20000508 	.word	0x20000508
 80015c4:	20000c90 	.word	0x20000c90
 80015c8:	20000c8e 	.word	0x20000c8e
 80015cc:	20000c70 	.word	0x20000c70
 80015d0:	20000c6e 	.word	0x20000c6e

080015d4 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	603a      	str	r2, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	460b      	mov	r3, r1
 80015e2:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3330      	adds	r3, #48	@ 0x30
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b40      	ldr	r3, [pc, #256]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001604:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d11a      	bne.n	8001642 <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 800160c:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3e      	ldr	r2, [pc, #248]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fdf6 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	4a3b      	ldr	r2, [pc, #236]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001624:	4937      	ldr	r1, [pc, #220]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001626:	483b      	ldr	r0, [pc, #236]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001628:	f010 f96c 	bl	8011904 <HAL_SPI_TransmitReceive>
 800162c:	4603      	mov	r3, r0
 800162e:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001630:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	@ (800170c <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f00d fde4 	bl	800f208 <HAL_GPIO_WritePin>
 8001640:	e037      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11a      	bne.n	800167e <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a33      	ldr	r2, [pc, #204]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 800164e:	8811      	ldrh	r1, [r2, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00d fdd8 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	2264      	movs	r2, #100	@ 0x64
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001660:	4928      	ldr	r1, [pc, #160]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001662:	482c      	ldr	r0, [pc, #176]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001664:	f010 f94e 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <DRV_CANFDSPI_ReadHalfWord+0x148>)
 8001672:	8811      	ldrh	r1, [r2, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f00d fdc6 	bl	800f208 <HAL_GPIO_WritePin>
 800167c:	e019      	b.n	80016b2 <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001684:	8811      	ldrh	r1, [r2, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00d fdbd 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	2264      	movs	r2, #100	@ 0x64
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001696:	491b      	ldr	r1, [pc, #108]	@ (8001704 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001698:	481e      	ldr	r0, [pc, #120]	@ (8001714 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 800169a:	f010 f933 	bl	8011904 <HAL_SPI_TransmitReceive>
 800169e:	4603      	mov	r3, r0
 80016a0:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 80016a8:	8811      	ldrh	r1, [r2, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00d fdab 	bl	800f208 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 80016b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016bc:	e01e      	b.n	80016fc <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016c4:	2302      	movs	r3, #2
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e013      	b.n	80016f2 <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3b02      	subs	r3, #2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d9e8      	bls.n	80016ca <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002e4 	.word	0x200002e4
 8001708:	20000cb0 	.word	0x20000cb0
 800170c:	20000cae 	.word	0x20000cae
 8001710:	20000344 	.word	0x20000344
 8001714:	20000508 	.word	0x20000508
 8001718:	20000c90 	.word	0x20000c90
 800171c:	20000c8e 	.word	0x20000c8e
 8001720:	20000c70 	.word	0x20000c70
 8001724:	20000c6e 	.word	0x20000c6e

08001728 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	460b      	mov	r3, r1
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3320      	adds	r3, #32
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001752:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800175a:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e00b      	b.n	800177a <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	411a      	asrs	r2, r3
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3302      	adds	r3, #2
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001772:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d9f0      	bls.n	8001762 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d11a      	bne.n	80017bc <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00d fd39 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a29      	ldr	r2, [pc, #164]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800179e:	4926      	ldr	r1, [pc, #152]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a0:	4829      	ldr	r0, [pc, #164]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017a2:	f010 f8af 	bl	8011904 <HAL_SPI_TransmitReceive>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <DRV_CANFDSPI_WriteHalfWord+0x114>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <DRV_CANFDSPI_WriteHalfWord+0x118>)
 80017b0:	8811      	ldrh	r1, [r2, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00d fd27 	bl	800f208 <HAL_GPIO_WritePin>
 80017ba:	e037      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d11a      	bne.n	80017f8 <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017c8:	8811      	ldrh	r1, [r2, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00d fd1b 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017da:	4917      	ldr	r1, [pc, #92]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017dc:	481a      	ldr	r0, [pc, #104]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017de:	f010 f891 	bl	8011904 <HAL_SPI_TransmitReceive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017ec:	8811      	ldrh	r1, [r2, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fd09 	bl	800f208 <HAL_GPIO_WritePin>
 80017f6:	e019      	b.n	800182c <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017fe:	8811      	ldrh	r1, [r2, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00d fd00 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	2264      	movs	r2, #100	@ 0x64
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 8001810:	4909      	ldr	r1, [pc, #36]	@ (8001838 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 8001814:	f010 f876 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 8001822:	8811      	ldrh	r1, [r2, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f00d fcee 	bl	800f208 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 800182c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002e4 	.word	0x200002e4
 800183c:	20000cb0 	.word	0x20000cb0
 8001840:	20000cae 	.word	0x20000cae
 8001844:	20000344 	.word	0x20000344
 8001848:	20000508 	.word	0x20000508
 800184c:	20000c90 	.word	0x20000c90
 8001850:	20000c8e 	.word	0x20000c8e
 8001854:	20000c70 	.word	0x20000c70
 8001858:	20000c6e 	.word	0x20000c6e

0800185c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	461a      	mov	r2, r3
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	460b      	mov	r3, r1
 800186c:	81bb      	strh	r3, [r7, #12]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3302      	adds	r3, #2
 8001876:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	2b60      	cmp	r3, #96	@ 0x60
 800187c:	d902      	bls.n	8001884 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e086      	b.n	8001992 <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001898:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018a0:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018a2:	2302      	movs	r3, #2
 80018a4:	82fb      	strh	r3, [r7, #22]
 80018a6:	e006      	b.n	80018b6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	3301      	adds	r3, #1
 80018b4:	82fb      	strh	r3, [r7, #22]
 80018b6:	8afa      	ldrh	r2, [r7, #22]
 80018b8:	8a7b      	ldrh	r3, [r7, #18]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3f4      	bcc.n	80018a8 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d11a      	bne.n	80018fa <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80018c4:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a36      	ldr	r2, [pc, #216]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ca:	8811      	ldrh	r1, [r2, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00d fc9a 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018de:	4833      	ldr	r0, [pc, #204]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e0:	f010 f810 	bl	8011904 <HAL_SPI_TransmitReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d fc88 	bl	800f208 <HAL_GPIO_WritePin>
 80018f8:	e037      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11a      	bne.n	8001936 <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001900:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00d fc7c 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001910:	8a7b      	ldrh	r3, [r7, #18]
 8001912:	2264      	movs	r2, #100	@ 0x64
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001918:	4920      	ldr	r1, [pc, #128]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 800191a:	4824      	ldr	r0, [pc, #144]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 800191c:	f00f fff2 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001920:	4603      	mov	r3, r0
 8001922:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <DRV_CANFDSPI_ReadByteArray+0x154>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <DRV_CANFDSPI_ReadByteArray+0x158>)
 800192a:	8811      	ldrh	r1, [r2, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f00d fc6a 	bl	800f208 <HAL_GPIO_WritePin>
 8001934:	e019      	b.n	800196a <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f00d fc61 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	2264      	movs	r2, #100	@ 0x64
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800194e:	4913      	ldr	r1, [pc, #76]	@ (800199c <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001950:	4816      	ldr	r0, [pc, #88]	@ (80019ac <DRV_CANFDSPI_ReadByteArray+0x150>)
 8001952:	f00f ffd7 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001956:	4603      	mov	r3, r0
 8001958:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001960:	8811      	ldrh	r1, [r2, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f00d fc4f 	bl	800f208 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	82fb      	strh	r3, [r7, #22]
 800196e:	e00a      	b.n	8001986 <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	1c9a      	adds	r2, r3, #2
 8001974:	8afb      	ldrh	r3, [r7, #22]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	440b      	add	r3, r1
 800197a:	490b      	ldr	r1, [pc, #44]	@ (80019a8 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800197c:	5c8a      	ldrb	r2, [r1, r2]
 800197e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001980:	8afb      	ldrh	r3, [r7, #22]
 8001982:	3301      	adds	r3, #1
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	8afa      	ldrh	r2, [r7, #22]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3f0      	bcc.n	8001970 <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 800198e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	20000cb0 	.word	0x20000cb0
 80019a4:	20000cae 	.word	0x20000cae
 80019a8:	20000344 	.word	0x20000344
 80019ac:	20000508 	.word	0x20000508
 80019b0:	20000c90 	.word	0x20000c90
 80019b4:	20000c8e 	.word	0x20000c8e
 80019b8:	20000c70 	.word	0x20000c70
 80019bc:	20000c6e 	.word	0x20000c6e

080019c0 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	460b      	mov	r3, r1
 80019d0:	81bb      	strh	r3, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	3302      	adds	r3, #2
 80019da:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019dc:	8a7b      	ldrh	r3, [r7, #18]
 80019de:	2b60      	cmp	r3, #96	@ 0x60
 80019e0:	d902      	bls.n	80019e8 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e078      	b.n	8001ada <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3320      	adds	r3, #32
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019fc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019fe:	89bb      	ldrh	r3, [r7, #12]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a04:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	82fb      	strh	r3, [r7, #22]
 8001a0a:	e00a      	b.n	8001a22 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	441a      	add	r2, r3
 8001a12:	8afb      	ldrh	r3, [r7, #22]
 8001a14:	3302      	adds	r3, #2
 8001a16:	7811      	ldrb	r1, [r2, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a1a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	82fb      	strh	r3, [r7, #22]
 8001a22:	8afa      	ldrh	r2, [r7, #22]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3f0      	bcc.n	8001a0c <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d11a      	bne.n	8001a66 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2d      	ldr	r2, [pc, #180]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a36:	8811      	ldrh	r1, [r2, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00d fbe4 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a48:	4926      	ldr	r1, [pc, #152]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a4a:	482a      	ldr	r0, [pc, #168]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a4c:	f00f ff5a 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a5a:	8811      	ldrh	r1, [r2, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00d fbd2 	bl	800f208 <HAL_GPIO_WritePin>
 8001a64:	e037      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11a      	bne.n	8001aa2 <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a72:	8811      	ldrh	r1, [r2, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00d fbc6 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	2264      	movs	r2, #100	@ 0x64
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a84:	4917      	ldr	r1, [pc, #92]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a86:	481b      	ldr	r0, [pc, #108]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a88:	f00f ff3c 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a96:	8811      	ldrh	r1, [r2, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d fbb4 	bl	800f208 <HAL_GPIO_WritePin>
 8001aa0:	e019      	b.n	8001ad6 <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001aa8:	8811      	ldrh	r1, [r2, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00d fbab 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001ab2:	8a7b      	ldrh	r3, [r7, #18]
 8001ab4:	2264      	movs	r2, #100	@ 0x64
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001abe:	f00f ff21 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001acc:	8811      	ldrh	r1, [r2, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00d fb99 	bl	800f208 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001ad6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002e4 	.word	0x200002e4
 8001ae8:	20000cb0 	.word	0x20000cb0
 8001aec:	20000cae 	.word	0x20000cae
 8001af0:	20000344 	.word	0x20000344
 8001af4:	20000508 	.word	0x20000508
 8001af8:	20000c90 	.word	0x20000c90
 8001afc:	20000c8e 	.word	0x20000c8e
 8001b00:	20000c70 	.word	0x20000c70
 8001b04:	20000c6e 	.word	0x20000c6e

08001b08 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	460b      	mov	r3, r1
 8001b18:	81bb      	strh	r3, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3302      	adds	r3, #2
 8001b26:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	2b60      	cmp	r3, #96	@ 0x60
 8001b2c:	d902      	bls.n	8001b34 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e0a2      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3330      	adds	r3, #48	@ 0x30
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b48:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b4a:	89bb      	ldrh	r3, [r7, #12]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b50:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b52:	2302      	movs	r3, #2
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	e006      	b.n	8001b66 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b60:	8bfb      	ldrh	r3, [r7, #30]
 8001b62:	3301      	adds	r3, #1
 8001b64:	83fb      	strh	r3, [r7, #30]
 8001b66:	8bfa      	ldrh	r2, [r7, #30]
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3f4      	bcc.n	8001b58 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d11a      	bne.n	8001baa <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b7a:	8811      	ldrh	r1, [r2, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00d fb42 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	2264      	movs	r2, #100	@ 0x64
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	4a41      	ldr	r2, [pc, #260]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b8c:	493d      	ldr	r1, [pc, #244]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b8e:	4841      	ldr	r0, [pc, #260]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b90:	f00f feb8 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c8c <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b9e:	8811      	ldrh	r1, [r2, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00d fb30 	bl	800f208 <HAL_GPIO_WritePin>
 8001ba8:	e037      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11a      	bne.n	8001be6 <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bb6:	8811      	ldrh	r1, [r2, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00d fb24 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bc0:	8afb      	ldrh	r3, [r7, #22]
 8001bc2:	2264      	movs	r2, #100	@ 0x64
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bc8:	492e      	ldr	r1, [pc, #184]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bca:	4832      	ldr	r0, [pc, #200]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bcc:	f00f fe9a 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001bd4:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001bda:	8811      	ldrh	r1, [r2, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00d fb12 	bl	800f208 <HAL_GPIO_WritePin>
 8001be4:	e019      	b.n	8001c1a <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bec:	8811      	ldrh	r1, [r2, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00d fb09 	bl	800f208 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bf6:	8afb      	ldrh	r3, [r7, #22]
 8001bf8:	2264      	movs	r2, #100	@ 0x64
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bfe:	4921      	ldr	r1, [pc, #132]	@ (8001c84 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001c00:	4824      	ldr	r0, [pc, #144]	@ (8001c94 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001c02:	f00f fe7f 	bl	8011904 <HAL_SPI_TransmitReceive>
 8001c06:	4603      	mov	r3, r0
 8001c08:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001c0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001c10:	8811      	ldrh	r1, [r2, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00d faf7 	bl	800f208 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001c1a:	7e7b      	ldrb	r3, [r7, #25]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001c20:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001c24:	e029      	b.n	8001c7a <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83fb      	strh	r3, [r7, #30]
 8001c2e:	e01e      	b.n	8001c6e <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	83bb      	strh	r3, [r7, #28]
 8001c38:	e00d      	b.n	8001c56 <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001c3a:	8b7a      	ldrh	r2, [r7, #26]
 8001c3c:	8bbb      	ldrh	r3, [r7, #28]
 8001c3e:	4914      	ldr	r1, [pc, #80]	@ (8001c90 <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c40:	5c8a      	ldrb	r2, [r1, r2]
 8001c42:	3320      	adds	r3, #32
 8001c44:	443b      	add	r3, r7
 8001c46:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c4a:	8bbb      	ldrh	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	83bb      	strh	r3, [r7, #28]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	3301      	adds	r3, #1
 8001c54:	837b      	strh	r3, [r7, #26]
 8001c56:	8bbb      	ldrh	r3, [r7, #28]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d9ee      	bls.n	8001c3a <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c5c:	8bfb      	ldrh	r3, [r7, #30]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c68:	8bfb      	ldrh	r3, [r7, #30]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	83fb      	strh	r3, [r7, #30]
 8001c6e:	8bfa      	ldrh	r2, [r7, #30]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3dc      	bcc.n	8001c30 <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c76:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002e4 	.word	0x200002e4
 8001c88:	20000cb0 	.word	0x20000cb0
 8001c8c:	20000cae 	.word	0x20000cae
 8001c90:	20000344 	.word	0x20000344
 8001c94:	20000508 	.word	0x20000508
 8001c98:	20000c90 	.word	0x20000c90
 8001c9c:	20000c8e 	.word	0x20000c8e
 8001ca0:	20000c70 	.word	0x20000c70
 8001ca4:	20000c6e 	.word	0x20000c6e

08001ca8 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001cb8:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <DRV_CANFDSPI_Configure+0x118>)
 8001cba:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	7a3b      	ldrb	r3, [r7, #8]
 8001cc8:	f362 0304 	bfi	r3, r2, #0, #5
 8001ccc:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	f362 1345 	bfi	r3, r2, #5, #1
 8001cde:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	7a3b      	ldrb	r3, [r7, #8]
 8001cec:	f362 1386 	bfi	r3, r2, #6, #1
 8001cf0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	7a7b      	ldrb	r3, [r7, #9]
 8001cfe:	f362 0300 	bfi	r3, r2, #0, #1
 8001d02:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	7a7b      	ldrb	r3, [r7, #9]
 8001d10:	f362 0342 	bfi	r3, r2, #1, #2
 8001d14:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	7a7b      	ldrb	r3, [r7, #9]
 8001d22:	f362 1304 	bfi	r3, r2, #4, #1
 8001d26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	7abb      	ldrb	r3, [r7, #10]
 8001d34:	f362 0300 	bfi	r3, r2, #0, #1
 8001d38:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	7abb      	ldrb	r3, [r7, #10]
 8001d46:	f362 0341 	bfi	r3, r2, #1, #1
 8001d4a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	7abb      	ldrb	r3, [r7, #10]
 8001d58:	f362 0382 	bfi	r3, r2, #2, #1
 8001d5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	7abb      	ldrb	r3, [r7, #10]
 8001d7c:	f362 1304 	bfi	r3, r2, #4, #1
 8001d80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f362 1307 	bfi	r3, r2, #4, #4
 8001d92:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb80 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e001      	b.n	8001db6 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	04980760 	.word	0x04980760

08001dc4 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001dce:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f361 0304 	bfi	r3, r1, #0, #5
 8001de0:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001de2:	7b3b      	ldrb	r3, [r7, #12]
 8001de4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	7813      	ldrb	r3, [r2, #0]
 8001dee:	f361 1345 	bfi	r3, r1, #5, #1
 8001df2:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	7813      	ldrb	r3, [r2, #0]
 8001e00:	f361 1386 	bfi	r3, r1, #6, #1
 8001e04:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001e06:	7b7b      	ldrb	r3, [r7, #13]
 8001e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e16:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	7853      	ldrb	r3, [r2, #1]
 8001e24:	f361 0301 	bfi	r3, r1, #0, #2
 8001e28:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	7853      	ldrb	r3, [r2, #1]
 8001e36:	f361 0382 	bfi	r3, r1, #2, #1
 8001e3a:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e42:	b2d9      	uxtb	r1, r3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7853      	ldrb	r3, [r2, #1]
 8001e48:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e4c:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	7853      	ldrb	r3, [r2, #1]
 8001e5a:	f361 1304 	bfi	r3, r1, #4, #1
 8001e5e:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	7853      	ldrb	r3, [r2, #1]
 8001e6c:	f361 1345 	bfi	r3, r1, #5, #1
 8001e70:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	7853      	ldrb	r3, [r2, #1]
 8001e7e:	f361 1386 	bfi	r3, r1, #6, #1
 8001e82:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e8a:	b2d9      	uxtb	r1, r3
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	7853      	ldrb	r3, [r2, #1]
 8001e90:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e94:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7893      	ldrb	r3, [r2, #2]
 8001ea2:	f361 0303 	bfi	r3, r1, #0, #4
 8001ea6:	7093      	strb	r3, [r2, #2]

    return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	04980760 	.word	0x04980760

08001ebc <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001ed4:	f107 020e 	add.w	r2, r7, #14
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f91d 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e01a      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001f08:	7bba      	ldrb	r2, [r7, #14]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f992 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	e001      	b.n	8001f2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	603a      	str	r2, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	460b      	mov	r3, r1
 8001f42:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f4e:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f50:	7a3b      	ldrb	r3, [r7, #8]
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f362 0304 	bfi	r3, r2, #0, #5
 8001f68:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	f362 1347 	bfi	r3, r2, #5, #3
 8001f7a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7abb      	ldrb	r3, [r7, #10]
 8001f88:	f362 1346 	bfi	r3, r2, #5, #2
 8001f8c:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	f362 0304 	bfi	r3, r2, #0, #5
 8001f9e:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	7a3b      	ldrb	r3, [r7, #8]
 8001fac:	f362 1386 	bfi	r3, r2, #6, #1
 8001fb0:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3350      	adds	r3, #80	@ 0x50
 8001fc2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	89b9      	ldrh	r1, [r7, #12]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fa68 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	00600400 	.word	0x00600400

08001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fee:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001ff0:	7b3b      	ldrb	r3, [r7, #12]
 8001ff2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	f361 0300 	bfi	r3, r1, #0, #1
 8002000:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7813      	ldrb	r3, [r2, #0]
 800200e:	f361 0345 	bfi	r3, r1, #1, #5
 8002012:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800201a:	b2d9      	uxtb	r1, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	7813      	ldrb	r3, [r2, #0]
 8002020:	f361 1387 	bfi	r3, r1, #6, #2
 8002024:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	7853      	ldrb	r3, [r2, #1]
 8002032:	f361 0304 	bfi	r3, r1, #0, #5
 8002036:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800203e:	b2d9      	uxtb	r1, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	7853      	ldrb	r3, [r2, #1]
 8002044:	f361 1347 	bfi	r3, r1, #5, #3
 8002048:	7053      	strb	r3, [r2, #1]

    return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	00600400 	.word	0x00600400

0800205c <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0a0      	sub	sp, #128	@ 0x80
 8002060:	af00      	add	r7, sp, #0
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	460b      	mov	r3, r1
 800206c:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	0052      	lsls	r2, r2, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	b29b      	uxth	r3, r3
 8002082:	3350      	adds	r3, #80	@ 0x50
 8002084:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002088:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800208c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 8002090:	7bf8      	ldrb	r0, [r7, #15]
 8002092:	2303      	movs	r3, #3
 8002094:	f7ff fd38 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 800209e:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e0c5      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 80020b0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80020b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 80020be:	f06f 0301 	mvn.w	r3, #1
 80020c2:	e0b9      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fc3a 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 80020d4:	6778      	str	r0, [r7, #116]	@ 0x74
    if (dataBytesInObject < txdNumBytes) {
 80020d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80020d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020dc:	429a      	cmp	r2, r3
 80020de:	d202      	bcs.n	80020e6 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020e0:	f06f 0302 	mvn.w	r3, #2
 80020e4:	e0a8      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	663b      	str	r3, [r7, #96]	@ 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
#endif
    a += cRAMADDR_START;
 80020fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002104:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	78db      	ldrb	r3, [r3, #3]
 800211e:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	795b      	ldrb	r3, [r3, #5]
 800212a:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	799b      	ldrb	r3, [r3, #6]
 8002130:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	79db      	ldrb	r3, [r3, #7]
 8002136:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800213e:	e010      	b.n	8002162 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8002140:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	441a      	add	r2, r3
 8002148:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800214c:	3308      	adds	r3, #8
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	3380      	adds	r3, #128	@ 0x80
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002158:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800215c:	3301      	adds	r3, #1
 800215e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002162:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002166:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800216a:	429a      	cmp	r2, r3
 800216c:	d8e8      	bhi.n	8002140 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
    uint8_t j = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    if (txdNumBytes % 4) {
 800217a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d02b      	beq.n	80021de <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800218a:	b29b      	uxth	r3, r3
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	b29b      	uxth	r3, r3
 8002192:	f1c3 0304 	rsb	r3, r3, #4
 8002196:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        i = txdNumBytes + 8;
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3308      	adds	r3, #8
 80021a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        for (j = 0; j < n; j++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021ac:	e010      	b.n	80021d0 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 80021ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ba:	4413      	add	r3, r2
 80021bc:	3380      	adds	r3, #128	@ 0x80
 80021be:	443b      	add	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 80021c6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021ca:	3301      	adds	r3, #1
 80021cc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80021d0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d8e7      	bhi.n	80021ae <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3308      	adds	r3, #8
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	f8b7 1078 	ldrh.w	r1, [r7, #120]	@ 0x78
 80021f8:	7bf8      	ldrb	r0, [r7, #15]
 80021fa:	f7ff fbe1 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002204:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 800220c:	f06f 0303 	mvn.w	r3, #3
 8002210:	e012      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8002212:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8002216:	7bb9      	ldrb	r1, [r7, #14]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f83a 	bl	8002294 <DRV_CANFDSPI_TransmitChannelUpdate>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    if (spiTransferError) {
 8002226:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800222e:	f06f 0304 	mvn.w	r3, #4
 8002232:	e001      	b.n	8002238 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8002234:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
}
 8002238:	4618      	mov	r0, r3
 800223a:	3780      	adds	r7, #128	@ 0x80
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	0052      	lsls	r2, r2, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	b29b      	uxth	r3, r3
 800226a:	3350      	adds	r3, #80	@ 0x50
 800226c:	81bb      	strh	r3, [r7, #12]
    a += 1;
 800226e:	89bb      	ldrh	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002274:	2302      	movs	r3, #2
 8002276:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	89b9      	ldrh	r1, [r7, #12]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ffda 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002284:	4603      	mov	r3, r0
 8002286:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8002288:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	460b      	mov	r3, r1
 80022a0:	71bb      	strb	r3, [r7, #6]
 80022a2:	4613      	mov	r3, r2
 80022a4:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3351      	adds	r3, #81	@ 0x51
 80022ba:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80022c0:	7a7b      	ldrb	r3, [r7, #9]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80022c8:	797b      	ldrb	r3, [r7, #5]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80022ce:	7a7b      	ldrb	r3, [r7, #9]
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80022d6:	7a7a      	ldrb	r2, [r7, #9]
 80022d8:	89b9      	ldrh	r1, [r7, #12]
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ffab 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e001      	b.n	80022f8 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	603a      	str	r2, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	460b      	mov	r3, r1
 800230e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	333e      	adds	r3, #62	@ 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	89b9      	ldrh	r1, [r7, #12]
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f8b6 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	603a      	str	r2, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	460b      	mov	r3, r1
 8002352:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	b29b      	uxth	r3, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	b29b      	uxth	r3, r3
 800236a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800236e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	89b9      	ldrh	r1, [r7, #12]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f892 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	4603      	mov	r3, r0
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	460b      	mov	r3, r1
 80023a4:	717b      	strb	r3, [r7, #5]
 80023a6:	4613      	mov	r3, r2
 80023a8:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80023b4:	7a3b      	ldrb	r3, [r7, #8]
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	723b      	strb	r3, [r7, #8]
 80023bc:	e003      	b.n	80023c6 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80023be:	7a3b      	ldrb	r3, [r7, #8]
 80023c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c4:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80023c6:	797b      	ldrb	r3, [r7, #5]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	f362 0304 	bfi	r3, r2, #0, #5
 80023d4:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80023de:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023e0:	7a3a      	ldrb	r2, [r7, #8]
 80023e2:	89b9      	ldrh	r1, [r7, #12]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ff26 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	603a      	str	r2, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	460b      	mov	r3, r1
 800240a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800241a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800241e:	e033      	b.n	8002488 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002422:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002424:	7a3b      	ldrb	r3, [r7, #8]
 8002426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002434:	b2da      	uxtb	r2, r3
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f362 0304 	bfi	r3, r2, #0, #5
 800243c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002446:	b2da      	uxtb	r2, r3
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f362 1347 	bfi	r3, r2, #5, #3
 800244e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	7a3b      	ldrb	r3, [r7, #8]
 800245c:	f362 1345 	bfi	r3, r2, #5, #1
 8002460:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	0052      	lsls	r2, r2, #1
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	b29b      	uxth	r3, r3
 8002470:	3350      	adds	r3, #80	@ 0x50
 8002472:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	89b9      	ldrh	r1, [r7, #12]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f810 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00600400 	.word	0x00600400

08002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 800249e:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	7813      	ldrb	r3, [r2, #0]
 80024ac:	f361 0345 	bfi	r3, r1, #1, #5
 80024b0:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	8813      	ldrh	r3, [r2, #0]
 80024be:	f361 1388 	bfi	r3, r1, #6, #3
 80024c2:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024ca:	b2d9      	uxtb	r1, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	7813      	ldrb	r3, [r2, #0]
 80024d0:	f361 0300 	bfi	r3, r1, #0, #1
 80024d4:	7013      	strb	r3, [r2, #0]

    return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	00600400 	.word	0x00600400

080024e8 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0a0      	sub	sp, #128	@ 0x80
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	460b      	mov	r3, r1
 80024f8:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t i = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	0052      	lsls	r2, r2, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	b29b      	uxth	r3, r3
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002520:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002524:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 8002528:	7bf8      	ldrb	r0, [r7, #15]
 800252a:	2303      	movs	r3, #3
 800252c:	f7ff faec 	bl	8001b08 <DRV_CANFDSPI_ReadWordArray>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 8002536:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e0cd      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002546:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8002548:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800254c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8002556:	f06f 0301 	mvn.w	r3, #1
 800255a:	e0c1      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 800255c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255e:	667b      	str	r3, [r7, #100]	@ 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002562:	663b      	str	r3, [r7, #96]	@ 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002564:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	b29b      	uxth	r3, r3
 800256e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
#endif
    a += cRAMADDR_START;
 8002572:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800257a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 800257e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002582:	3308      	adds	r3, #8
 8002584:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002588:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 8002596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800259a:	3304      	adds	r3, #4
 800259c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80025a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80025ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3304      	adds	r3, #4
 80025ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80025be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025c2:	2b4c      	cmp	r3, #76	@ 0x4c
 80025c4:	d902      	bls.n	80025cc <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80025c6:	234c      	movs	r3, #76	@ 0x4c
 80025c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80025cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f107 0214 	add.w	r2, r7, #20
 80025d6:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80025da:	7bf8      	ldrb	r0, [r7, #15]
 80025dc:	f7ff f93e 	bl	800185c <DRV_CANFDSPI_ReadByteArray>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80025e6:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025ee:	f06f 0302 	mvn.w	r3, #2
 80025f2:	e075      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025f4:	7d3b      	ldrb	r3, [r7, #20]
 80025f6:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800260a:	7e3b      	ldrb	r3, [r7, #24]
 800260c:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 800260e:	7e7b      	ldrb	r3, [r7, #25]
 8002610:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002612:	7ebb      	ldrb	r3, [r7, #26]
 8002614:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8002616:	7efb      	ldrb	r3, [r7, #27]
 8002618:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002620:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d027      	beq.n	800267e <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 800262e:	7f3b      	ldrb	r3, [r7, #28]
 8002630:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002632:	7f7b      	ldrb	r3, [r7, #29]
 8002634:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8002636:	7fbb      	ldrb	r3, [r7, #30]
 8002638:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800264a:	e011      	b.n	8002670 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 800264c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002650:	f103 020c 	add.w	r2, r3, #12
 8002654:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	440b      	add	r3, r1
 800265c:	3280      	adds	r2, #128	@ 0x80
 800265e:	443a      	add	r2, r7
 8002660:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002664:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002666:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800266a:	3301      	adds	r3, #1
 800266c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002670:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002674:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002678:	429a      	cmp	r2, r3
 800267a:	d3e7      	bcc.n	800264c <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 800267c:	e01e      	b.n	80026bc <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800268a:	e011      	b.n	80026b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 800268c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002690:	f103 0208 	add.w	r2, r3, #8
 8002694:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	440b      	add	r3, r1
 800269c:	3280      	adds	r2, #128	@ 0x80
 800269e:	443a      	add	r2, r7
 80026a0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80026a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80026a6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80026b0:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80026b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3e7      	bcc.n	800268c <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80026bc:	7bba      	ldrb	r2, [r7, #14]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f810 	bl	80026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    if (spiTransferError) {
 80026ce:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80026d6:	f06f 0303 	mvn.w	r3, #3
 80026da:	e001      	b.n	80026e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026dc:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3780      	adds	r7, #128	@ 0x80
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	b29b      	uxth	r3, r3
 8002712:	3351      	adds	r3, #81	@ 0x51
 8002714:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 8002716:	7a7b      	ldrb	r3, [r7, #9]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800271e:	7a7a      	ldrb	r2, [r7, #9]
 8002720:	89f9      	ldrh	r1, [r7, #14]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fd87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800272a:	4603      	mov	r3, r0
 800272c:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800272e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	460a      	mov	r2, r1
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	4613      	mov	r3, r2
 8002748:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002752:	231e      	movs	r3, #30
 8002754:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800275a:	f107 0208 	add.w	r2, r7, #8
 800275e:	89b9      	ldrh	r1, [r7, #12]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ff36 	bl	80015d4 <DRV_CANFDSPI_ReadHalfWord>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	e01b      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b21a      	sxth	r2, r3
 800277e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002782:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	89b9      	ldrh	r1, [r7, #12]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ffc6 	bl	8001728 <DRV_CANFDSPI_WriteHalfWord>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80027a8:	f06f 0301 	mvn.w	r3, #1
 80027ac:	e001      	b.n	80027b2 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	603a      	str	r2, [r7, #0]
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	460b      	mov	r3, r1
 80027c8:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3354      	adds	r3, #84	@ 0x54
 80027e6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027e8:	f107 0208 	add.w	r2, r7, #8
 80027ec:	89b9      	ldrh	r1, [r7, #12]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc93 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e007      	b.n	8002818 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002808:	7a3b      	ldrb	r3, [r7, #8]
 800280a:	f003 0317 	and.w	r3, r3, #23
 800280e:	b2da      	uxtb	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	603a      	str	r2, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	460b      	mov	r3, r1
 800282e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800283e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002842:	e022      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	b29b      	uxth	r3, r3
 8002856:	3354      	adds	r3, #84	@ 0x54
 8002858:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800285a:	f107 0208 	add.w	r2, r7, #8
 800285e:	89b9      	ldrh	r1, [r7, #12]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fc5a 	bl	800111c <DRV_CANFDSPI_ReadByte>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e007      	b.n	800288a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800287a:	7a3b      	ldrb	r3, [r7, #8]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	460b      	mov	r3, r1
 800289e:	71bb      	strb	r3, [r7, #6]
 80028a0:	4613      	mov	r3, r2
 80028a2:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80028ac:	79bb      	ldrb	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80028b2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80028b6:	e036      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	0052      	lsls	r2, r2, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3350      	adds	r3, #80	@ 0x50
 80028c8:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80028ce:	f107 0208 	add.w	r2, r7, #8
 80028d2:	89b9      	ldrh	r1, [r7, #12]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc20 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	e01b      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028ee:	7a3b      	ldrb	r3, [r7, #8]
 80028f0:	b25a      	sxtb	r2, r3
 80028f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002904:	7a3a      	ldrb	r2, [r7, #8]
 8002906:	89b9      	ldrh	r1, [r7, #12]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fc94 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 800291c:	f06f 0301 	mvn.w	r3, #1
 8002920:	e001      	b.n	8002926 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002946:	2334      	movs	r3, #52	@ 0x34
 8002948:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800294e:	f107 0210 	add.w	r2, r7, #16
 8002952:	8ab9      	ldrh	r1, [r7, #20]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fcfa 	bl	8001350 <DRV_CANFDSPI_ReadWord>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	e00d      	b.n	800298a <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800296e:	7c7a      	ldrb	r2, [r7, #17]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002974:	7c3a      	ldrb	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800297a:	7cbb      	ldrb	r3, [r7, #18]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	b2da      	uxtb	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80029a4:	f107 020e 	add.w	r2, r7, #14
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fbb4 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	e015      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80029d0:	7bba      	ldrb	r2, [r7, #14]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f640 610c 	movw	r1, #3596	@ 0xe0c
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fc2d 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029ea:	f06f 0301 	mvn.w	r3, #1
 80029ee:	e000      	b.n	80029f2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b090      	sub	sp, #64	@ 0x40
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	460a      	mov	r2, r1
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a14:	e008      	b.n	8002a28 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002a16:	f107 0208 	add.w	r2, r7, #8
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	79ba      	ldrb	r2, [r7, #6]
 8002a20:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a24:	3301      	adds	r3, #1
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a2c:	d9f3      	bls.n	8002a16 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a32:	873b      	strh	r3, [r7, #56]	@ 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a38:	e016      	b.n	8002a68 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002a3a:	f107 0208 	add.w	r2, r7, #8
 8002a3e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a40:	79f8      	ldrb	r0, [r7, #7]
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	f7fe ffbc 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (spiTransferError) {
 8002a4e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e00a      	b.n	8002a72 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a5e:	3330      	adds	r3, #48	@ 0x30
 8002a60:	873b      	strh	r3, [r7, #56]	@ 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a64:	3301      	adds	r3, #1
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	2b29      	cmp	r3, #41	@ 0x29
 8002a6c:	d9e5      	bls.n	8002a3a <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a6e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3740      	adds	r7, #64	@ 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4604      	mov	r4, r0
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71bb      	strb	r3, [r7, #6]
 8002a90:	460b      	mov	r3, r1
 8002a92:	717b      	strb	r3, [r7, #5]
 8002a94:	4613      	mov	r3, r2
 8002a96:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a9c:	793b      	ldrb	r3, [r7, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d036      	beq.n	8002b10 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	dc4c      	bgt.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d018      	beq.n	8002ae0 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002aae:	e047      	b.n	8002b40 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f84c 	bl	8002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002acc:	e03d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002ace:	797a      	ldrb	r2, [r7, #5]
 8002ad0:	79b9      	ldrb	r1, [r7, #6]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f8c3 	bl	8002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]
            break;
 8002ade:	e032      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 faf2 	bl	80030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	e025      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002afe:	797a      	ldrb	r2, [r7, #5]
 8002b00:	79b9      	ldrb	r1, [r7, #6]
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb6f 	bl	80031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b0e:	e01a      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002b10:	79ba      	ldrb	r2, [r7, #6]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd10 	bl	800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	e00d      	b.n	8002b4a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002b2e:	797a      	ldrb	r2, [r7, #5]
 8002b30:	79b9      	ldrb	r1, [r7, #6]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fd8d 	bl	8003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	73fb      	strb	r3, [r7, #15]
            break;
 8002b3e:	e002      	b.n	8002b46 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b40:	23ff      	movs	r3, #255	@ 0xff
 8002b42:	73fb      	strb	r3, [r7, #15]
            break;
 8002b44:	bf00      	nop
    }

    return spiTransferError;
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
	...

08002b54 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b68:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b6a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d862      	bhi.n	8002c38 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bc1 	.word	0x08002bc1
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bc1 	.word	0x08002bc1
 8002b94:	08002bc1 	.word	0x08002bc1
 8002b98:	08002bdf 	.word	0x08002bdf
 8002b9c:	08002bdf 	.word	0x08002bdf
 8002ba0:	08002bdf 	.word	0x08002bdf
 8002ba4:	08002bdf 	.word	0x08002bdf
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002bdf 	.word	0x08002bdf
 8002bb0:	08002bdf 	.word	0x08002bdf
 8002bb4:	08002bfd 	.word	0x08002bfd
 8002bb8:	08002bfd 	.word	0x08002bfd
 8002bbc:	08002c1b 	.word	0x08002c1b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002bc4:	233e      	movs	r3, #62	@ 0x3e
 8002bc6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	220f      	movs	r2, #15
 8002bcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002bd2:	7a3b      	ldrb	r3, [r7, #8]
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e02f      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002be2:	237e      	movs	r3, #126	@ 0x7e
 8002be4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002be6:	7a7b      	ldrb	r3, [r7, #9]
 8002be8:	221f      	movs	r2, #31
 8002bea:	f362 0306 	bfi	r3, r2, #0, #7
 8002bee:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf8:	723b      	strb	r3, [r7, #8]
            break;
 8002bfa:	e020      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002c00:	231e      	movs	r3, #30
 8002c02:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	2207      	movs	r2, #7
 8002c08:	f362 0306 	bfi	r3, r2, #0, #7
 8002c0c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002c0e:	7a3b      	ldrb	r3, [r7, #8]
 8002c10:	2207      	movs	r2, #7
 8002c12:	f362 0306 	bfi	r3, r2, #0, #7
 8002c16:	723b      	strb	r3, [r7, #8]
            break;
 8002c18:	e011      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002c1e:	23fe      	movs	r3, #254	@ 0xfe
 8002c20:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002c22:	7a7b      	ldrb	r3, [r7, #9]
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	f362 0306 	bfi	r3, r2, #0, #7
 8002c2a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002c2c:	7a3b      	ldrb	r3, [r7, #8]
 8002c2e:	223f      	movs	r2, #63	@ 0x3f
 8002c30:	f362 0306 	bfi	r3, r2, #0, #7
 8002c34:	723b      	strb	r3, [r7, #8]
            break;
 8002c36:	e002      	b.n	8002c3e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	e009      	b.n	8002c52 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2104      	movs	r1, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fc2b 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	003e0f0f 	.word	0x003e0f0f

08002c60 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c76:	4be2      	ldr	r3, [pc, #904]	@ (8003000 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c78:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f362 0301 	bfi	r3, r2, #0, #2
 8002c86:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c8c:	79bb      	ldrb	r3, [r7, #6]
 8002c8e:	2b11      	cmp	r3, #17
 8002c90:	f200 81f6 	bhi.w	8003080 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002ce5 	.word	0x08002ce5
 8002ca0:	08002d23 	.word	0x08002d23
 8002ca4:	08002d61 	.word	0x08002d61
 8002ca8:	08002d9f 	.word	0x08002d9f
 8002cac:	08002ddd 	.word	0x08002ddd
 8002cb0:	08002e1b 	.word	0x08002e1b
 8002cb4:	08002e55 	.word	0x08002e55
 8002cb8:	08002e89 	.word	0x08002e89
 8002cbc:	08002ebb 	.word	0x08002ebb
 8002cc0:	08002f01 	.word	0x08002f01
 8002cc4:	08002f47 	.word	0x08002f47
 8002cc8:	08002f85 	.word	0x08002f85
 8002ccc:	08002fc3 	.word	0x08002fc3
 8002cd0:	08003005 	.word	0x08003005
 8002cd4:	08003043 	.word	0x08003043
 8002cd8:	08002d9f 	.word	0x08002d9f
 8002cdc:	08002e55 	.word	0x08002e55
 8002ce0:	08002ebb 	.word	0x08002ebb
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	221e      	movs	r2, #30
 8002cec:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cf2:	7b7b      	ldrb	r3, [r7, #13]
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cfc:	7b3b      	ldrb	r3, [r7, #12]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	f362 0303 	bfi	r3, r2, #0, #4
 8002d04:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002d06:	7a7b      	ldrb	r3, [r7, #9]
 8002d08:	221f      	movs	r2, #31
 8002d0a:	f362 0306 	bfi	r3, r2, #0, #7
 8002d0e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	7a3b      	ldrb	r3, [r7, #8]
 8002d1a:	f362 0305 	bfi	r3, r2, #0, #6
 8002d1e:	723b      	strb	r3, [r7, #8]
            break;
 8002d20:	e1b1      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	220e      	movs	r2, #14
 8002d2a:	f362 0304 	bfi	r3, r2, #0, #5
 8002d2e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f362 0303 	bfi	r3, r2, #0, #4
 8002d38:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002d3a:	7b3b      	ldrb	r3, [r7, #12]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d42:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d44:	7a7b      	ldrb	r3, [r7, #9]
 8002d46:	220f      	movs	r2, #15
 8002d48:	f362 0306 	bfi	r3, r2, #0, #7
 8002d4c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	7a3b      	ldrb	r3, [r7, #8]
 8002d58:	f362 0305 	bfi	r3, r2, #0, #6
 8002d5c:	723b      	strb	r3, [r7, #8]
            break;
 8002d5e:	e192      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2208      	movs	r2, #8
 8002d68:	f362 0304 	bfi	r3, r2, #0, #5
 8002d6c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f362 0303 	bfi	r3, r2, #0, #4
 8002d76:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d78:	7b3b      	ldrb	r3, [r7, #12]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d80:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d82:	7a7b      	ldrb	r3, [r7, #9]
 8002d84:	2209      	movs	r2, #9
 8002d86:	f362 0306 	bfi	r3, r2, #0, #7
 8002d8a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	7a3b      	ldrb	r3, [r7, #8]
 8002d96:	f362 0305 	bfi	r3, r2, #0, #6
 8002d9a:	723b      	strb	r3, [r7, #8]
            break;
 8002d9c:	e173      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	2206      	movs	r2, #6
 8002da6:	f362 0304 	bfi	r3, r2, #0, #5
 8002daa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dac:	7b7b      	ldrb	r3, [r7, #13]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f362 0303 	bfi	r3, r2, #0, #4
 8002db4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002db6:	7b3b      	ldrb	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	f362 0306 	bfi	r3, r2, #0, #7
 8002dc8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	7a3b      	ldrb	r3, [r7, #8]
 8002dd4:	f362 0305 	bfi	r3, r2, #0, #6
 8002dd8:	723b      	strb	r3, [r7, #8]
            break;
 8002dda:	e154      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	2204      	movs	r2, #4
 8002de4:	f362 0304 	bfi	r3, r2, #0, #5
 8002de8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f362 0303 	bfi	r3, r2, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dfe:	7a7b      	ldrb	r3, [r7, #9]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f362 0306 	bfi	r3, r2, #0, #7
 8002e06:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7a3b      	ldrb	r3, [r7, #8]
 8002e12:	f362 0305 	bfi	r3, r2, #0, #6
 8002e16:	723b      	strb	r3, [r7, #8]
            break;
 8002e18:	e135      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f362 0304 	bfi	r3, r2, #0, #5
 8002e26:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	f023 030f 	bic.w	r3, r3, #15
 8002e2e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e30:	7b3b      	ldrb	r3, [r7, #12]
 8002e32:	f023 030f 	bic.w	r3, r3, #15
 8002e36:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002e38:	7a7b      	ldrb	r3, [r7, #9]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e40:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	7a3b      	ldrb	r3, [r7, #8]
 8002e4c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e50:	723b      	strb	r3, [r7, #8]
            break;
 8002e52:	e118      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f362 0304 	bfi	r3, r2, #0, #5
 8002e60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e72:	7a7b      	ldrb	r3, [r7, #9]
 8002e74:	2203      	movs	r2, #3
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e7c:	7a3b      	ldrb	r3, [r7, #8]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f362 0305 	bfi	r3, r2, #0, #6
 8002e84:	723b      	strb	r3, [r7, #8]
            break;
 8002e86:	e0fe      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f362 0304 	bfi	r3, r2, #0, #5
 8002e94:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e96:	7b7b      	ldrb	r3, [r7, #13]
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	f023 030f 	bic.w	r3, r3, #15
 8002ea4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002ea6:	7a7b      	ldrb	r3, [r7, #9]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002eae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002eb0:	7a3b      	ldrb	r3, [r7, #8]
 8002eb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e0e5      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	221e      	movs	r2, #30
 8002ec2:	f362 0304 	bfi	r3, r2, #0, #5
 8002ec6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002ec8:	7b7b      	ldrb	r3, [r7, #13]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	f362 0303 	bfi	r3, r2, #0, #4
 8002ed0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	f362 0303 	bfi	r3, r2, #0, #4
 8002eda:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002edc:	7a7b      	ldrb	r3, [r7, #9]
 8002ede:	221f      	movs	r2, #31
 8002ee0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ee4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ef4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ef6:	7abb      	ldrb	r3, [r7, #10]
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	72bb      	strb	r3, [r7, #10]
            break;
 8002efe:	e0c2      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	2211      	movs	r2, #17
 8002f08:	f362 0304 	bfi	r3, r2, #0, #5
 8002f0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	2204      	movs	r2, #4
 8002f12:	f362 0303 	bfi	r3, r2, #0, #4
 8002f16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002f18:	7b3b      	ldrb	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002f22:	7a7b      	ldrb	r3, [r7, #9]
 8002f24:	2212      	movs	r2, #18
 8002f26:	f362 0306 	bfi	r3, r2, #0, #7
 8002f2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7a3b      	ldrb	r3, [r7, #8]
 8002f36:	f362 0305 	bfi	r3, r2, #0, #6
 8002f3a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f3c:	7abb      	ldrb	r3, [r7, #10]
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	72bb      	strb	r3, [r7, #10]
            break;
 8002f44:	e09f      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	221e      	movs	r2, #30
 8002f4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002f52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	2207      	movs	r2, #7
 8002f58:	f362 0303 	bfi	r3, r2, #0, #4
 8002f5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f5e:	7b3b      	ldrb	r3, [r7, #12]
 8002f60:	2207      	movs	r2, #7
 8002f62:	f362 0303 	bfi	r3, r2, #0, #4
 8002f66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	7a3b      	ldrb	r3, [r7, #8]
 8002f7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002f80:	723b      	strb	r3, [r7, #8]
            break;
 8002f82:	e080      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002f90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	2205      	movs	r2, #5
 8002f96:	f362 0303 	bfi	r3, r2, #0, #4
 8002f9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002fa6:	7a7b      	ldrb	r3, [r7, #9]
 8002fa8:	2213      	movs	r2, #19
 8002faa:	f362 0306 	bfi	r3, r2, #0, #7
 8002fae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	7a3b      	ldrb	r3, [r7, #8]
 8002fba:	f362 0305 	bfi	r3, r2, #0, #6
 8002fbe:	723b      	strb	r3, [r7, #8]
            break;
 8002fc0:	e061      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	220e      	movs	r2, #14
 8002fca:	f362 0304 	bfi	r3, r2, #0, #5
 8002fce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002fd0:	7b7b      	ldrb	r3, [r7, #13]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f362 0303 	bfi	r3, r2, #0, #4
 8002fd8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	f362 0306 	bfi	r3, r2, #0, #7
 8002fec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	7a3b      	ldrb	r3, [r7, #8]
 8002ff8:	f362 0305 	bfi	r3, r2, #0, #6
 8002ffc:	723b      	strb	r3, [r7, #8]
            break;
 8002ffe:	e042      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8003000:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2208      	movs	r2, #8
 800300c:	f362 0304 	bfi	r3, r2, #0, #5
 8003010:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	2202      	movs	r2, #2
 8003016:	f362 0303 	bfi	r3, r2, #0, #4
 800301a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 800301c:	7b3b      	ldrb	r3, [r7, #12]
 800301e:	2202      	movs	r2, #2
 8003020:	f362 0303 	bfi	r3, r2, #0, #4
 8003024:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003026:	7a7b      	ldrb	r3, [r7, #9]
 8003028:	2209      	movs	r2, #9
 800302a:	f362 0306 	bfi	r3, r2, #0, #7
 800302e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	7a3b      	ldrb	r3, [r7, #8]
 800303a:	f362 0305 	bfi	r3, r2, #0, #6
 800303e:	723b      	strb	r3, [r7, #8]
            break;
 8003040:	e021      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	2206      	movs	r2, #6
 800304a:	f362 0304 	bfi	r3, r2, #0, #5
 800304e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003050:	7b7b      	ldrb	r3, [r7, #13]
 8003052:	2201      	movs	r2, #1
 8003054:	f362 0303 	bfi	r3, r2, #0, #4
 8003058:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800305a:	7b3b      	ldrb	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f362 0303 	bfi	r3, r2, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2207      	movs	r2, #7
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e002      	b.n	8003086 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e01f      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2108      	movs	r1, #8
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fa07 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800309e:	f06f 0301 	mvn.w	r3, #1
 80030a2:	e010      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	210c      	movs	r1, #12
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f9f8 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80030b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 80030bc:	f06f 0302 	mvn.w	r3, #2
 80030c0:	e001      	b.n	80030c6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 80030c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	460a      	mov	r2, r1
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	4613      	mov	r3, r2
 80030de:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030e6:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b11      	cmp	r3, #17
 80030ec:	d862      	bhi.n	80031b4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	080031b5 	.word	0x080031b5
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800313d 	.word	0x0800313d
 8003114:	0800315b 	.word	0x0800315b
 8003118:	0800315b 	.word	0x0800315b
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800315b 	.word	0x0800315b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003197 	.word	0x08003197
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003140:	231e      	movs	r3, #30
 8003142:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	2207      	movs	r2, #7
 8003148:	f362 0306 	bfi	r3, r2, #0, #7
 800314c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	2207      	movs	r2, #7
 8003152:	f362 0306 	bfi	r3, r2, #0, #7
 8003156:	723b      	strb	r3, [r7, #8]
            break;
 8003158:	e02f      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800315e:	233e      	movs	r3, #62	@ 0x3e
 8003160:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003162:	7a7b      	ldrb	r3, [r7, #9]
 8003164:	220f      	movs	r2, #15
 8003166:	f362 0306 	bfi	r3, r2, #0, #7
 800316a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800316c:	7a3b      	ldrb	r3, [r7, #8]
 800316e:	220f      	movs	r2, #15
 8003170:	f362 0306 	bfi	r3, r2, #0, #7
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e020      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800317c:	230e      	movs	r3, #14
 800317e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	2203      	movs	r2, #3
 8003184:	f362 0306 	bfi	r3, r2, #0, #7
 8003188:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800318a:	7a3b      	ldrb	r3, [r7, #8]
 800318c:	2203      	movs	r2, #3
 800318e:	f362 0306 	bfi	r3, r2, #0, #7
 8003192:	723b      	strb	r3, [r7, #8]
            break;
 8003194:	e011      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800319a:	237e      	movs	r3, #126	@ 0x7e
 800319c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800319e:	7a7b      	ldrb	r3, [r7, #9]
 80031a0:	221f      	movs	r2, #31
 80031a2:	f362 0306 	bfi	r3, r2, #0, #7
 80031a6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80031a8:	7a3b      	ldrb	r3, [r7, #8]
 80031aa:	221f      	movs	r2, #31
 80031ac:	f362 0306 	bfi	r3, r2, #0, #7
 80031b0:	723b      	strb	r3, [r7, #8]
            break;
 80031b2:	e002      	b.n	80031ba <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e010      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2104      	movs	r1, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe f96d 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	e001      	b.n	80031dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	003e0f0f 	.word	0x003e0f0f

080031e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
 80031f2:	460b      	mov	r3, r1
 80031f4:	71bb      	strb	r3, [r7, #6]
 80031f6:	4613      	mov	r3, r2
 80031f8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031fe:	4bce      	ldr	r3, [pc, #824]	@ (8003538 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003200:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003206:	7abb      	ldrb	r3, [r7, #10]
 8003208:	2202      	movs	r2, #2
 800320a:	f362 0301 	bfi	r3, r2, #0, #2
 800320e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003214:	79bb      	ldrb	r3, [r7, #6]
 8003216:	2b11      	cmp	r3, #17
 8003218:	f200 8166 	bhi.w	80034e8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	0800326d 	.word	0x0800326d
 8003228:	080032ab 	.word	0x080032ab
 800322c:	080034e9 	.word	0x080034e9
 8003230:	080032e9 	.word	0x080032e9
 8003234:	08003323 	.word	0x08003323
 8003238:	0800335d 	.word	0x0800335d
 800323c:	0800335d 	.word	0x0800335d
 8003240:	0800335d 	.word	0x0800335d
 8003244:	08003363 	.word	0x08003363
 8003248:	080033a9 	.word	0x080033a9
 800324c:	080033ef 	.word	0x080033ef
 8003250:	0800342d 	.word	0x0800342d
 8003254:	0800346b 	.word	0x0800346b
 8003258:	080034a9 	.word	0x080034a9
 800325c:	080034af 	.word	0x080034af
 8003260:	080032e9 	.word	0x080032e9
 8003264:	0800335d 	.word	0x0800335d
 8003268:	08003363 	.word	0x08003363
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	220e      	movs	r2, #14
 8003274:	f362 0304 	bfi	r3, r2, #0, #5
 8003278:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800327a:	7b7b      	ldrb	r3, [r7, #13]
 800327c:	2203      	movs	r2, #3
 800327e:	f362 0303 	bfi	r3, r2, #0, #4
 8003282:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003284:	7b3b      	ldrb	r3, [r7, #12]
 8003286:	2203      	movs	r2, #3
 8003288:	f362 0303 	bfi	r3, r2, #0, #4
 800328c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800328e:	7a7b      	ldrb	r3, [r7, #9]
 8003290:	220f      	movs	r2, #15
 8003292:	f362 0306 	bfi	r3, r2, #0, #7
 8003296:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	7a3b      	ldrb	r3, [r7, #8]
 80032a2:	f362 0305 	bfi	r3, r2, #0, #6
 80032a6:	723b      	strb	r3, [r7, #8]
            break;
 80032a8:	e121      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2206      	movs	r2, #6
 80032b2:	f362 0304 	bfi	r3, r2, #0, #5
 80032b6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f362 0303 	bfi	r3, r2, #0, #4
 80032c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f362 0303 	bfi	r3, r2, #0, #4
 80032ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80032cc:	7a7b      	ldrb	r3, [r7, #9]
 80032ce:	2207      	movs	r2, #7
 80032d0:	f362 0306 	bfi	r3, r2, #0, #7
 80032d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	f362 0305 	bfi	r3, r2, #0, #6
 80032e4:	723b      	strb	r3, [r7, #8]
            break;
 80032e6:	e102      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f362 0304 	bfi	r3, r2, #0, #5
 80032f4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003306:	7a7b      	ldrb	r3, [r7, #9]
 8003308:	2203      	movs	r2, #3
 800330a:	f362 0306 	bfi	r3, r2, #0, #7
 800330e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003316:	b2da      	uxtb	r2, r3
 8003318:	7a3b      	ldrb	r3, [r7, #8]
 800331a:	f362 0305 	bfi	r3, r2, #0, #6
 800331e:	723b      	strb	r3, [r7, #8]
            break;
 8003320:	e0e5      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2201      	movs	r2, #1
 800332a:	f362 0304 	bfi	r3, r2, #0, #5
 800332e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003330:	7b7b      	ldrb	r3, [r7, #13]
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003338:	7b3b      	ldrb	r3, [r7, #12]
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	2202      	movs	r2, #2
 8003344:	f362 0306 	bfi	r3, r2, #0, #7
 8003348:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003350:	b2da      	uxtb	r2, r3
 8003352:	7a3b      	ldrb	r3, [r7, #8]
 8003354:	f362 0305 	bfi	r3, r2, #0, #6
 8003358:	723b      	strb	r3, [r7, #8]
            break;
 800335a:	e0c8      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	e0e5      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	221e      	movs	r2, #30
 800336a:	f362 0304 	bfi	r3, r2, #0, #5
 800336e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003370:	7b7b      	ldrb	r3, [r7, #13]
 8003372:	2207      	movs	r2, #7
 8003374:	f362 0303 	bfi	r3, r2, #0, #4
 8003378:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	2207      	movs	r2, #7
 800337e:	f362 0303 	bfi	r3, r2, #0, #4
 8003382:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	221f      	movs	r2, #31
 8003388:	f362 0306 	bfi	r3, r2, #0, #7
 800338c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	7a3b      	ldrb	r3, [r7, #8]
 8003398:	f362 0305 	bfi	r3, r2, #0, #6
 800339c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800339e:	7abb      	ldrb	r3, [r7, #10]
 80033a0:	f023 0303 	bic.w	r3, r3, #3
 80033a4:	72bb      	strb	r3, [r7, #10]
            break;
 80033a6:	e0a2      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2211      	movs	r2, #17
 80033b0:	f362 0304 	bfi	r3, r2, #0, #5
 80033b4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80033b6:	7b7b      	ldrb	r3, [r7, #13]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f362 0303 	bfi	r3, r2, #0, #4
 80033be:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80033c0:	7b3b      	ldrb	r3, [r7, #12]
 80033c2:	2204      	movs	r2, #4
 80033c4:	f362 0303 	bfi	r3, r2, #0, #4
 80033c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80033ca:	7a7b      	ldrb	r3, [r7, #9]
 80033cc:	2212      	movs	r2, #18
 80033ce:	f362 0306 	bfi	r3, r2, #0, #7
 80033d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7a3b      	ldrb	r3, [r7, #8]
 80033de:	f362 0305 	bfi	r3, r2, #0, #6
 80033e2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	72bb      	strb	r3, [r7, #10]
            break;
 80033ec:	e07f      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	220e      	movs	r2, #14
 80033f6:	f362 0304 	bfi	r3, r2, #0, #5
 80033fa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	2203      	movs	r2, #3
 8003400:	f362 0303 	bfi	r3, r2, #0, #4
 8003404:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	2203      	movs	r2, #3
 800340a:	f362 0303 	bfi	r3, r2, #0, #4
 800340e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003410:	7a7b      	ldrb	r3, [r7, #9]
 8003412:	220f      	movs	r2, #15
 8003414:	f362 0306 	bfi	r3, r2, #0, #7
 8003418:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	b2da      	uxtb	r2, r3
 8003422:	7a3b      	ldrb	r3, [r7, #8]
 8003424:	f362 0305 	bfi	r3, r2, #0, #6
 8003428:	723b      	strb	r3, [r7, #8]
            break;
 800342a:	e060      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2208      	movs	r2, #8
 8003434:	f362 0304 	bfi	r3, r2, #0, #5
 8003438:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	2202      	movs	r2, #2
 800343e:	f362 0303 	bfi	r3, r2, #0, #4
 8003442:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003444:	7b3b      	ldrb	r3, [r7, #12]
 8003446:	2202      	movs	r2, #2
 8003448:	f362 0303 	bfi	r3, r2, #0, #4
 800344c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800344e:	7a7b      	ldrb	r3, [r7, #9]
 8003450:	2209      	movs	r2, #9
 8003452:	f362 0306 	bfi	r3, r2, #0, #7
 8003456:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345e:	b2da      	uxtb	r2, r3
 8003460:	7a3b      	ldrb	r3, [r7, #8]
 8003462:	f362 0305 	bfi	r3, r2, #0, #6
 8003466:	723b      	strb	r3, [r7, #8]
            break;
 8003468:	e041      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2206      	movs	r2, #6
 8003472:	f362 0304 	bfi	r3, r2, #0, #5
 8003476:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003478:	7b7b      	ldrb	r3, [r7, #13]
 800347a:	2201      	movs	r2, #1
 800347c:	f362 0303 	bfi	r3, r2, #0, #4
 8003480:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003482:	7b3b      	ldrb	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f362 0303 	bfi	r3, r2, #0, #4
 800348a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800348c:	7a7b      	ldrb	r3, [r7, #9]
 800348e:	2207      	movs	r2, #7
 8003490:	f362 0306 	bfi	r3, r2, #0, #7
 8003494:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800349c:	b2da      	uxtb	r2, r3
 800349e:	7a3b      	ldrb	r3, [r7, #8]
 80034a0:	f362 0305 	bfi	r3, r2, #0, #6
 80034a4:	723b      	strb	r3, [r7, #8]
            break;
 80034a6:	e022      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	e03f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f362 0304 	bfi	r3, r2, #0, #5
 80034ba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80034bc:	7b7b      	ldrb	r3, [r7, #13]
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80034c4:	7b3b      	ldrb	r3, [r7, #12]
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f362 0306 	bfi	r3, r2, #0, #7
 80034d4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	f362 0305 	bfi	r3, r2, #0, #6
 80034e4:	723b      	strb	r3, [r7, #8]
            break;
 80034e6:	e002      	b.n	80034ee <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e01f      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2108      	movs	r1, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd ffd3 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003506:	f06f 0301 	mvn.w	r3, #1
 800350a:	e010      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	210c      	movs	r1, #12
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd ffc4 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003524:	f06f 0302 	mvn.w	r3, #2
 8003528:	e001      	b.n	800352e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800352a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	000e0303 	.word	0x000e0303

0800353c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	460a      	mov	r2, r1
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	4613      	mov	r3, r2
 800354a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003552:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003554:	79bb      	ldrb	r3, [r7, #6]
 8003556:	2b11      	cmp	r3, #17
 8003558:	d862      	bhi.n	8003620 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080035a9 	.word	0x080035a9
 8003568:	08003621 	.word	0x08003621
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035c7 	.word	0x080035c7
 8003584:	080035c7 	.word	0x080035c7
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035c7 	.word	0x080035c7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035e5 	.word	0x080035e5
 80035a0:	080035e5 	.word	0x080035e5
 80035a4:	08003603 	.word	0x08003603
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80035ac:	230e      	movs	r3, #14
 80035ae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f362 0306 	bfi	r3, r2, #0, #7
 80035b8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	2203      	movs	r2, #3
 80035be:	f362 0306 	bfi	r3, r2, #0, #7
 80035c2:	723b      	strb	r3, [r7, #8]
            break;
 80035c4:	e02f      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80035ca:	231e      	movs	r3, #30
 80035cc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	2207      	movs	r2, #7
 80035d2:	f362 0306 	bfi	r3, r2, #0, #7
 80035d6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	2207      	movs	r2, #7
 80035dc:	f362 0306 	bfi	r3, r2, #0, #7
 80035e0:	723b      	strb	r3, [r7, #8]
            break;
 80035e2:	e020      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035e8:	2307      	movs	r3, #7
 80035ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035ec:	7a7b      	ldrb	r3, [r7, #9]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f362 0306 	bfi	r3, r2, #0, #7
 80035f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035f6:	7a3b      	ldrb	r3, [r7, #8]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f362 0306 	bfi	r3, r2, #0, #7
 80035fe:	723b      	strb	r3, [r7, #8]
            break;
 8003600:	e011      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003606:	233e      	movs	r3, #62	@ 0x3e
 8003608:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800360a:	7a7b      	ldrb	r3, [r7, #9]
 800360c:	220f      	movs	r2, #15
 800360e:	f362 0306 	bfi	r3, r2, #0, #7
 8003612:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	220f      	movs	r2, #15
 8003618:	f362 0306 	bfi	r3, r2, #0, #7
 800361c:	723b      	strb	r3, [r7, #8]
            break;
 800361e:	e002      	b.n	8003626 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e010      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2104      	movs	r1, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd ff37 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 800363e:	f06f 0301 	mvn.w	r3, #1
 8003642:	e001      	b.n	8003648 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	003e0f0f 	.word	0x003e0f0f

08003654 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
 800365e:	460b      	mov	r3, r1
 8003660:	71bb      	strb	r3, [r7, #6]
 8003662:	4613      	mov	r3, r2
 8003664:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800366a:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 800366c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003672:	7abb      	ldrb	r3, [r7, #10]
 8003674:	2202      	movs	r2, #2
 8003676:	f362 0301 	bfi	r3, r2, #0, #2
 800367a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003680:	79bb      	ldrb	r3, [r7, #6]
 8003682:	2b11      	cmp	r3, #17
 8003684:	f200 80ef 	bhi.w	8003866 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036d9 	.word	0x080036d9
 8003694:	08003717 	.word	0x08003717
 8003698:	08003867 	.word	0x08003867
 800369c:	08003751 	.word	0x08003751
 80036a0:	08003751 	.word	0x08003751
 80036a4:	08003751 	.word	0x08003751
 80036a8:	08003751 	.word	0x08003751
 80036ac:	08003751 	.word	0x08003751
 80036b0:	08003757 	.word	0x08003757
 80036b4:	0800379d 	.word	0x0800379d
 80036b8:	080037e3 	.word	0x080037e3
 80036bc:	08003821 	.word	0x08003821
 80036c0:	08003827 	.word	0x08003827
 80036c4:	08003861 	.word	0x08003861
 80036c8:	08003861 	.word	0x08003861
 80036cc:	08003751 	.word	0x08003751
 80036d0:	08003751 	.word	0x08003751
 80036d4:	08003757 	.word	0x08003757
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036dc:	7bbb      	ldrb	r3, [r7, #14]
 80036de:	2206      	movs	r2, #6
 80036e0:	f362 0304 	bfi	r3, r2, #0, #5
 80036e4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036e6:	7b7b      	ldrb	r3, [r7, #13]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f362 0303 	bfi	r3, r2, #0, #4
 80036ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036f0:	7b3b      	ldrb	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f362 0303 	bfi	r3, r2, #0, #4
 80036f8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036fa:	7a7b      	ldrb	r3, [r7, #9]
 80036fc:	2207      	movs	r2, #7
 80036fe:	f362 0306 	bfi	r3, r2, #0, #7
 8003702:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370a:	b2da      	uxtb	r2, r3
 800370c:	7a3b      	ldrb	r3, [r7, #8]
 800370e:	f362 0305 	bfi	r3, r2, #0, #6
 8003712:	723b      	strb	r3, [r7, #8]
            break;
 8003714:	e0aa      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2202      	movs	r2, #2
 800371e:	f362 0304 	bfi	r3, r2, #0, #5
 8003722:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003724:	7b7b      	ldrb	r3, [r7, #13]
 8003726:	f023 030f 	bic.w	r3, r3, #15
 800372a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800372c:	7b3b      	ldrb	r3, [r7, #12]
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	2203      	movs	r2, #3
 8003738:	f362 0306 	bfi	r3, r2, #0, #7
 800373c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	f362 0305 	bfi	r3, r2, #0, #6
 800374c:	723b      	strb	r3, [r7, #8]
            break;
 800374e:	e08d      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e0aa      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	220e      	movs	r2, #14
 800375e:	f362 0304 	bfi	r3, r2, #0, #5
 8003762:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003764:	7b7b      	ldrb	r3, [r7, #13]
 8003766:	2203      	movs	r2, #3
 8003768:	f362 0303 	bfi	r3, r2, #0, #4
 800376c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	2203      	movs	r2, #3
 8003772:	f362 0303 	bfi	r3, r2, #0, #4
 8003776:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003778:	7a7b      	ldrb	r3, [r7, #9]
 800377a:	220f      	movs	r2, #15
 800377c:	f362 0306 	bfi	r3, r2, #0, #7
 8003780:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	7a3b      	ldrb	r3, [r7, #8]
 800378c:	f362 0305 	bfi	r3, r2, #0, #6
 8003790:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003792:	7abb      	ldrb	r3, [r7, #10]
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	72bb      	strb	r3, [r7, #10]
            break;
 800379a:	e067      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2207      	movs	r2, #7
 80037a4:	f362 0304 	bfi	r3, r2, #0, #5
 80037a8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f362 0303 	bfi	r3, r2, #0, #4
 80037b2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80037b4:	7b3b      	ldrb	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f362 0303 	bfi	r3, r2, #0, #4
 80037bc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80037be:	7a7b      	ldrb	r3, [r7, #9]
 80037c0:	2208      	movs	r2, #8
 80037c2:	f362 0306 	bfi	r3, r2, #0, #7
 80037c6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	7a3b      	ldrb	r3, [r7, #8]
 80037d2:	f362 0305 	bfi	r3, r2, #0, #6
 80037d6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80037d8:	7abb      	ldrb	r3, [r7, #10]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	72bb      	strb	r3, [r7, #10]
            break;
 80037e0:	e044      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2206      	movs	r2, #6
 80037ea:	f362 0304 	bfi	r3, r2, #0, #5
 80037ee:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037f0:	7b7b      	ldrb	r3, [r7, #13]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f362 0303 	bfi	r3, r2, #0, #4
 80037f8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037fa:	7b3b      	ldrb	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f362 0303 	bfi	r3, r2, #0, #4
 8003802:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003804:	7a7b      	ldrb	r3, [r7, #9]
 8003806:	2207      	movs	r2, #7
 8003808:	f362 0306 	bfi	r3, r2, #0, #7
 800380c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	7a3b      	ldrb	r3, [r7, #8]
 8003818:	f362 0305 	bfi	r3, r2, #0, #6
 800381c:	723b      	strb	r3, [r7, #8]
            break;
 800381e:	e025      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e042      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	2202      	movs	r2, #2
 800382e:	f362 0304 	bfi	r3, r2, #0, #5
 8003832:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	f023 030f 	bic.w	r3, r3, #15
 800383a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800383c:	7b3b      	ldrb	r3, [r7, #12]
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003844:	7a7b      	ldrb	r3, [r7, #9]
 8003846:	2203      	movs	r2, #3
 8003848:	f362 0306 	bfi	r3, r2, #0, #7
 800384c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	b2da      	uxtb	r2, r3
 8003856:	7a3b      	ldrb	r3, [r7, #8]
 8003858:	f362 0305 	bfi	r3, r2, #0, #6
 800385c:	723b      	strb	r3, [r7, #8]
            break;
 800385e:	e005      	b.n	800386c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e022      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e01f      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2108      	movs	r1, #8
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fe14 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800387c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003884:	f06f 0301 	mvn.w	r3, #1
 8003888:	e010      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	210c      	movs	r1, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fe05 	bl	80014a0 <DRV_CANFDSPI_WriteWord>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800389a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80038a2:	f06f 0302 	mvn.w	r3, #2
 80038a6:	e001      	b.n	80038ac <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80038a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	000e0303 	.word	0x000e0303

080038b8 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	460b      	mov	r3, r1
 80038c4:	71bb      	strb	r3, [r7, #6]
 80038c6:	4613      	mov	r3, r2
 80038c8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80038d2:	f640 6307 	movw	r3, #3591	@ 0xe07
 80038d6:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	1cda      	adds	r2, r3, #3
 80038e2:	89b9      	ldrh	r1, [r7, #12]
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fc18 	bl	800111c <DRV_CANFDSPI_ReadByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e020      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f362 0300 	bfi	r3, r2, #0, #1
 800390c:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800390e:	797b      	ldrb	r3, [r7, #5]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f362 0341 	bfi	r3, r2, #1, #1
 800391c:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800391e:	7afa      	ldrb	r2, [r7, #11]
 8003920:	89b9      	ldrh	r1, [r7, #12]
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fc87 	bl	8001238 <DRV_CANFDSPI_WriteByte>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	e001      	b.n	8003940 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800393c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d802      	bhi.n	8003962 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e02a      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	3b09      	subs	r3, #9
 8003966:	2b06      	cmp	r3, #6
 8003968:	d825      	bhi.n	80039b6 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	0800398d 	.word	0x0800398d
 8003974:	08003993 	.word	0x08003993
 8003978:	08003999 	.word	0x08003999
 800397c:	0800399f 	.word	0x0800399f
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039b1 	.word	0x080039b1
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800398c:	230c      	movs	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
                break;
 8003990:	e012      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003992:	2310      	movs	r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
                break;
 8003996:	e00f      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003998:	2314      	movs	r3, #20
 800399a:	60fb      	str	r3, [r7, #12]
                break;
 800399c:	e00c      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800399e:	2318      	movs	r3, #24
 80039a0:	60fb      	str	r3, [r7, #12]
                break;
 80039a2:	e009      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80039a4:	2320      	movs	r3, #32
 80039a6:	60fb      	str	r3, [r7, #12]
                break;
 80039a8:	e006      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80039aa:	2330      	movs	r3, #48	@ 0x30
 80039ac:	60fb      	str	r3, [r7, #12]
                break;
 80039ae:	e003      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80039b0:	2340      	movs	r3, #64	@ 0x40
 80039b2:	60fb      	str	r3, [r7, #12]
                break;
 80039b4:	e000      	b.n	80039b8 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80039b6:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4313      	orrs	r3, r2
 80039de:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 0218 	bic.w	r2, r3, #24
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	615a      	str	r2, [r3, #20]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	801a      	strh	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b090      	sub	sp, #64	@ 0x40
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003abe:	2305      	movs	r3, #5
 8003ac0:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003ace:	2300      	movs	r3, #0
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003afa:	f001 fd67 	bl	80055cc <FI_CheckBankConfig>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003b04:	230e      	movs	r3, #14
 8003b06:	f000 bcb4 	b.w	8004472 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003b0a:	f001 fcbd 	bl	8005488 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003b0e:	4b93      	ldr	r3, [pc, #588]	@ (8003d5c <EE_Init+0x2a8>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b14:	4b92      	ldr	r3, [pc, #584]	@ (8003d60 <EE_Init+0x2ac>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	029a      	lsls	r2, r3, #10
 8003b1a:	4b92      	ldr	r3, [pc, #584]	@ (8003d64 <EE_Init+0x2b0>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b22:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	0b1b      	lsrs	r3, r3, #12
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b30:	e02e      	b.n	8003b90 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003b38:	031a      	lsls	r2, r3, #12
 8003b3a:	4b89      	ldr	r3, [pc, #548]	@ (8003d60 <EE_Init+0x2ac>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	0299      	lsls	r1, r3, #10
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <EE_Init+0x2b0>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003b48:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b4c:	4b84      	ldr	r3, [pc, #528]	@ (8003d60 <EE_Init+0x2ac>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	0298      	lsls	r0, r3, #10
 8003b52:	4b84      	ldr	r3, [pc, #528]	@ (8003d64 <EE_Init+0x2b0>)
 8003b54:	4003      	ands	r3, r0
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e00e      	b.n	8003b82 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d68 <EE_Init+0x2b4>)
 8003b6c:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	4413      	add	r3, r2
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	3308      	adds	r3, #8
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d3ec      	bcc.n	8003b64 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b90:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <EE_Init+0x2ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <EE_Init+0x2b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	3304      	adds	r3, #4
 8003bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3bf      	bcc.n	8003b32 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <EE_Init+0x2a8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003bb8:	4b69      	ldr	r3, [pc, #420]	@ (8003d60 <EE_Init+0x2ac>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	029a      	lsls	r2, r3, #10
 8003bbe:	4b69      	ldr	r3, [pc, #420]	@ (8003d64 <EE_Init+0x2b0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003bc6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	0b1b      	lsrs	r3, r3, #12
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd4:	e034      	b.n	8003c40 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003bdc:	031a      	lsls	r2, r3, #12
 8003bde:	4b60      	ldr	r3, [pc, #384]	@ (8003d60 <EE_Init+0x2ac>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	0299      	lsls	r1, r3, #10
 8003be4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d64 <EE_Init+0x2b0>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003bec:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003d60 <EE_Init+0x2ac>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	0298      	lsls	r0, r3, #10
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d64 <EE_Init+0x2b0>)
 8003bf8:	4003      	ands	r3, r0
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c04:	f001 fbde 	bl	80053c4 <GetPageState>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003c0c:	7ebb      	ldrb	r3, [r7, #26]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d002      	beq.n	8003c18 <EE_Init+0x164>
 8003c12:	7ebb      	ldrb	r3, [r7, #26]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d103      	bne.n	8003c20 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1e:	e00c      	b.n	8003c3a <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003c20:	7ebb      	ldrb	r3, [r7, #26]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d109      	bne.n	8003c3a <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2e:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	3301      	adds	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <EE_Init+0x2ac>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	029a      	lsls	r2, r3, #10
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <EE_Init+0x2b0>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	0b1b      	lsrs	r3, r3, #12
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3b9      	bcc.n	8003bd6 <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d16a      	bne.n	8003d3e <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d062      	beq.n	8003d34 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <EE_Init+0x2ac>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	029a      	lsls	r2, r3, #10
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <EE_Init+0x2b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	0b1b      	lsrs	r3, r3, #12
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	f003 0103 	and.w	r1, r3, #3
 8003c92:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <EE_Init+0x2ac>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	029a      	lsls	r2, r3, #10
 8003c98:	4b32      	ldr	r3, [pc, #200]	@ (8003d64 <EE_Init+0x2b0>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ca0:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	0b1b      	lsrs	r3, r3, #12
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003cb2:	031a      	lsls	r2, r3, #12
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <EE_Init+0x2ac>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <EE_Init+0x2b0>)
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003cc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8003cc6:	4b26      	ldr	r3, [pc, #152]	@ (8003d60 <EE_Init+0x2ac>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	0298      	lsls	r0, r3, #10
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <EE_Init+0x2b0>)
 8003cce:	4003      	ands	r3, r0
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fb74 	bl	80053c4 <GetPageState>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d12d      	bne.n	8003d3e <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <EE_Init+0x2ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d64 <EE_Init+0x2b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f003 0103 	and.w	r1, r3, #3
 8003d06:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <EE_Init+0x2ac>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	029a      	lsls	r2, r3, #10
 8003d0c:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <EE_Init+0x2b0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d14:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d18:	fb00 f303 	mul.w	r3, r0, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	0b1b      	lsrs	r3, r3, #12
 8003d20:	440b      	add	r3, r1
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fa8b 	bl	8005240 <SetPageState>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e39e      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f000 fba7 	bl	8004488 <EE_Format>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e399      	b.n	8004472 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <EE_Init+0x2ac>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	029a      	lsls	r2, r3, #10
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <EE_Init+0x2b0>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	0b1b      	lsrs	r3, r3, #12
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5a:	e0de      	b.n	8003f1a <EE_Init+0x466>
 8003d5c:	200003ac 	.word	0x200003ac
 8003d60:	1fff75e0 	.word	0x1fff75e0
 8003d64:	001ffc00 	.word	0x001ffc00
 8003d68:	200003a8 	.word	0x200003a8
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d72:	031a      	lsls	r2, r3, #12
 8003d74:	4bba      	ldr	r3, [pc, #744]	@ (8004060 <EE_Init+0x5ac>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	0299      	lsls	r1, r3, #10
 8003d7a:	4bba      	ldr	r3, [pc, #744]	@ (8004064 <EE_Init+0x5b0>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003d82:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d86:	4bb6      	ldr	r3, [pc, #728]	@ (8004060 <EE_Init+0x5ac>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	0298      	lsls	r0, r3, #10
 8003d8c:	4bb5      	ldr	r3, [pc, #724]	@ (8004064 <EE_Init+0x5b0>)
 8003d8e:	4003      	ands	r3, r0
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003d98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d9a:	f001 fb13 	bl	80053c4 <GetPageState>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003da2:	7ebb      	ldrb	r3, [r7, #26]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 80b5 	bne.w	8003f14 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003daa:	4bad      	ldr	r3, [pc, #692]	@ (8004060 <EE_Init+0x5ac>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	029a      	lsls	r2, r3, #10
 8003db0:	4bac      	ldr	r3, [pc, #688]	@ (8004064 <EE_Init+0x5b0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	0b1b      	lsrs	r3, r3, #12
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d050      	beq.n	8003e6c <EE_Init+0x3b8>
 8003dca:	4ba5      	ldr	r3, [pc, #660]	@ (8004060 <EE_Init+0x5ac>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	029a      	lsls	r2, r3, #10
 8003dd0:	4ba4      	ldr	r3, [pc, #656]	@ (8004064 <EE_Init+0x5b0>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	0b1b      	lsrs	r3, r3, #12
 8003de4:	3302      	adds	r3, #2
 8003de6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d03f      	beq.n	8003e6c <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003dec:	4b9c      	ldr	r3, [pc, #624]	@ (8004060 <EE_Init+0x5ac>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	029a      	lsls	r2, r3, #10
 8003df2:	4b9c      	ldr	r3, [pc, #624]	@ (8004064 <EE_Init+0x5b0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dfa:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	0b1b      	lsrs	r3, r3, #12
 8003e06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	f003 0103 	and.w	r1, r3, #3
 8003e10:	4b93      	ldr	r3, [pc, #588]	@ (8004060 <EE_Init+0x5ac>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	029a      	lsls	r2, r3, #10
 8003e16:	4b93      	ldr	r3, [pc, #588]	@ (8004064 <EE_Init+0x5b0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e1e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	0b1b      	lsrs	r3, r3, #12
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003e30:	031a      	lsls	r2, r3, #12
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <EE_Init+0x5ac>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	0299      	lsls	r1, r3, #10
 8003e38:	4b8a      	ldr	r3, [pc, #552]	@ (8004064 <EE_Init+0x5b0>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003e40:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e44:	4b86      	ldr	r3, [pc, #536]	@ (8004060 <EE_Init+0x5ac>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0298      	lsls	r0, r3, #10
 8003e4a:	4b86      	ldr	r3, [pc, #536]	@ (8004064 <EE_Init+0x5b0>)
 8003e4c:	4003      	ands	r3, r0
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fab5 	bl	80053c4 <GetPageState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d102      	bne.n	8003e66 <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e64:	e041      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e66:	2301      	movs	r3, #1
 8003e68:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e6a:	e03e      	b.n	8003eea <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <EE_Init+0x5ac>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b7c      	ldr	r3, [pc, #496]	@ (8004064 <EE_Init+0x5b0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 0103 	and.w	r1, r3, #3
 8003e90:	4b73      	ldr	r3, [pc, #460]	@ (8004060 <EE_Init+0x5ac>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	029a      	lsls	r2, r3, #10
 8003e96:	4b73      	ldr	r3, [pc, #460]	@ (8004064 <EE_Init+0x5b0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e9e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	0b1b      	lsrs	r3, r3, #12
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003eb0:	031a      	lsls	r2, r3, #12
 8003eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <EE_Init+0x5ac>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	0299      	lsls	r1, r3, #10
 8003eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004064 <EE_Init+0x5b0>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003ec0:	fbb1 f1f3 	udiv	r1, r1, r3
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <EE_Init+0x5ac>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	0298      	lsls	r0, r3, #10
 8003eca:	4b66      	ldr	r3, [pc, #408]	@ (8004064 <EE_Init+0x5b0>)
 8003ecc:	4003      	ands	r3, r0
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fa75 	bl	80053c4 <GetPageState>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e001      	b.n	8003eea <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d111      	bne.n	8003f14 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <EE_Init+0x5b4>)
 8003ef6:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2100      	movs	r1, #0
 8003efc:	2000      	movs	r0, #0
 8003efe:	f000 fef3 	bl	8004ce8 <PagesTransfer>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d001      	beq.n	8003f0e <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	e2b1      	b.n	8004472 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003f12:	e014      	b.n	8003f3e <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	3301      	adds	r3, #1
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1a:	4b51      	ldr	r3, [pc, #324]	@ (8004060 <EE_Init+0x5ac>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	029a      	lsls	r2, r3, #10
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <EE_Init+0x5b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	0b1b      	lsrs	r3, r3, #12
 8003f34:	3304      	adds	r3, #4
 8003f36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f4ff af17 	bcc.w	8003d6c <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <EE_Init+0x5ac>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	029a      	lsls	r2, r3, #10
 8003f48:	4b46      	ldr	r3, [pc, #280]	@ (8004064 <EE_Init+0x5b0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	0b1b      	lsrs	r3, r3, #12
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	e0dc      	b.n	800411a <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003f66:	031a      	lsls	r2, r3, #12
 8003f68:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <EE_Init+0x5ac>)
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	0299      	lsls	r1, r3, #10
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <EE_Init+0x5b0>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f76:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f7a:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <EE_Init+0x5ac>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	0298      	lsls	r0, r3, #10
 8003f80:	4b38      	ldr	r3, [pc, #224]	@ (8004064 <EE_Init+0x5b0>)
 8003f82:	4003      	ands	r3, r0
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8003f8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f8e:	f001 fa19 	bl	80053c4 <GetPageState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f96:	7ebb      	ldrb	r3, [r7, #26]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f040 80b6 	bne.w	800410a <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <EE_Init+0x5ac>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	029a      	lsls	r2, r3, #10
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004064 <EE_Init+0x5b0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fac:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	0b1b      	lsrs	r3, r3, #12
 8003fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d056      	beq.n	800406c <EE_Init+0x5b8>
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <EE_Init+0x5ac>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	029a      	lsls	r2, r3, #10
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <EE_Init+0x5b0>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	0b1b      	lsrs	r3, r3, #12
 8003fd8:	3302      	adds	r3, #2
 8003fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d045      	beq.n	800406c <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <EE_Init+0x5ac>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	029a      	lsls	r2, r3, #10
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <EE_Init+0x5b0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fee:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	0b1b      	lsrs	r3, r3, #12
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	3303      	adds	r3, #3
 8004000:	f003 0103 	and.w	r1, r3, #3
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <EE_Init+0x5ac>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	029a      	lsls	r2, r3, #10
 800400a:	4b16      	ldr	r3, [pc, #88]	@ (8004064 <EE_Init+0x5b0>)
 800400c:	4013      	ands	r3, r2
 800400e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004012:	fbb2 f0f3 	udiv	r0, r2, r3
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	0b1b      	lsrs	r3, r3, #12
 800401e:	440b      	add	r3, r1
 8004020:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004024:	031a      	lsls	r2, r3, #12
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <EE_Init+0x5ac>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	0299      	lsls	r1, r3, #10
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <EE_Init+0x5b0>)
 800402e:	400b      	ands	r3, r1
 8004030:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004034:	fbb1 f1f3 	udiv	r1, r1, r3
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <EE_Init+0x5ac>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	0298      	lsls	r0, r3, #10
 800403e:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <EE_Init+0x5b0>)
 8004040:	4003      	ands	r3, r0
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9bb 	bl	80053c4 <GetPageState>
 800404e:	4603      	mov	r3, r0
 8004050:	2b03      	cmp	r3, #3
 8004052:	d102      	bne.n	800405a <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004058:	e047      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800405a:	2301      	movs	r3, #1
 800405c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800405e:	e044      	b.n	80040ea <EE_Init+0x636>
 8004060:	1fff75e0 	.word	0x1fff75e0
 8004064:	001ffc00 	.word	0x001ffc00
 8004068:	200003a6 	.word	0x200003a6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800406c:	4b98      	ldr	r3, [pc, #608]	@ (80042d0 <EE_Init+0x81c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	029a      	lsls	r2, r3, #10
 8004072:	4b98      	ldr	r3, [pc, #608]	@ (80042d4 <EE_Init+0x820>)
 8004074:	4013      	ands	r3, r2
 8004076:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800407a:	fbb2 f1f3 	udiv	r1, r2, r3
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	0b1b      	lsrs	r3, r3, #12
 8004086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f003 0103 	and.w	r1, r3, #3
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <EE_Init+0x81c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	029a      	lsls	r2, r3, #10
 8004096:	4b8f      	ldr	r3, [pc, #572]	@ (80042d4 <EE_Init+0x820>)
 8004098:	4013      	ands	r3, r2
 800409a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800409e:	fbb2 f0f3 	udiv	r0, r2, r3
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	0b1b      	lsrs	r3, r3, #12
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80040b0:	031a      	lsls	r2, r3, #12
 80040b2:	4b87      	ldr	r3, [pc, #540]	@ (80042d0 <EE_Init+0x81c>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	0299      	lsls	r1, r3, #10
 80040b8:	4b86      	ldr	r3, [pc, #536]	@ (80042d4 <EE_Init+0x820>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80040c0:	fbb1 f1f3 	udiv	r1, r1, r3
 80040c4:	4b82      	ldr	r3, [pc, #520]	@ (80042d0 <EE_Init+0x81c>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	0298      	lsls	r0, r3, #10
 80040ca:	4b82      	ldr	r3, [pc, #520]	@ (80042d4 <EE_Init+0x820>)
 80040cc:	4003      	ands	r3, r0
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f975 	bl	80053c4 <GetPageState>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e001      	b.n	80040ea <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040e6:	2301      	movs	r3, #1
 80040e8:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b77      	ldr	r3, [pc, #476]	@ (80042d8 <EE_Init+0x824>)
 80040fc:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	3301      	adds	r3, #1
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
 8004104:	e006      	b.n	8004114 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8004106:	230a      	movs	r3, #10
 8004108:	e1b3      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800410a:	7ebb      	ldrb	r3, [r7, #26]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d101      	bne.n	8004114 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	3301      	adds	r3, #1
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411a:	4b6d      	ldr	r3, [pc, #436]	@ (80042d0 <EE_Init+0x81c>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	4b6c      	ldr	r3, [pc, #432]	@ (80042d4 <EE_Init+0x820>)
 8004122:	4013      	ands	r3, r2
 8004124:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004128:	fbb2 f1f3 	udiv	r1, r2, r3
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	3304      	adds	r3, #4
 8004136:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004138:	429a      	cmp	r2, r3
 800413a:	f4ff af11 	bcc.w	8003f60 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d133      	bne.n	80041ac <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	b2d9      	uxtb	r1, r3
 8004148:	4b61      	ldr	r3, [pc, #388]	@ (80042d0 <EE_Init+0x81c>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	029a      	lsls	r2, r3, #10
 800414e:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <EE_Init+0x820>)
 8004150:	4013      	ands	r3, r2
 8004152:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004156:	fbb2 f0f3 	udiv	r0, r2, r3
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	0b1b      	lsrs	r3, r3, #12
 8004162:	b2db      	uxtb	r3, r3
 8004164:	1acb      	subs	r3, r1, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	b2d9      	uxtb	r1, r3
 8004172:	4b57      	ldr	r3, [pc, #348]	@ (80042d0 <EE_Init+0x81c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	029a      	lsls	r2, r3, #10
 8004178:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <EE_Init+0x820>)
 800417a:	4013      	ands	r3, r2
 800417c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004180:	fbb2 f0f3 	udiv	r0, r2, r3
 8004184:	fb00 f303 	mul.w	r3, r0, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	0b1b      	lsrs	r3, r3, #12
 800418c:	b2db      	uxtb	r3, r3
 800418e:	440b      	add	r3, r1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b51      	ldr	r3, [pc, #324]	@ (80042d8 <EE_Init+0x824>)
 8004194:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004196:	4b50      	ldr	r3, [pc, #320]	@ (80042d8 <EE_Init+0x824>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f84f 	bl	8005240 <SetPageState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 80041a8:	2302      	movs	r3, #2
 80041aa:	e162      	b.n	8004472 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <EE_Init+0x828>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <EE_Init+0x82c>)
 80041b4:	2220      	movs	r2, #32
 80041b6:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041b8:	2320      	movs	r3, #32
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80041bc:	e031      	b.n	8004222 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <EE_Init+0x824>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80041c6:	031a      	lsls	r2, r3, #12
 80041c8:	4b41      	ldr	r3, [pc, #260]	@ (80042d0 <EE_Init+0x81c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	0299      	lsls	r1, r3, #10
 80041ce:	4b41      	ldr	r3, [pc, #260]	@ (80042d4 <EE_Init+0x820>)
 80041d0:	400b      	ands	r3, r1
 80041d2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80041d6:	fbb1 f1f3 	udiv	r1, r1, r3
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <EE_Init+0x81c>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	0298      	lsls	r0, r3, #10
 80041e0:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <EE_Init+0x820>)
 80041e2:	4003      	ands	r3, r0
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	4413      	add	r3, r2
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	bf08      	it	eq
 8004200:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004204:	d012      	beq.n	800422c <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <EE_Init+0x828>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <EE_Init+0x828>)
 8004210:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <EE_Init+0x82c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <EE_Init+0x82c>)
 800421a:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	3308      	adds	r3, #8
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d3c9      	bcc.n	80041be <EE_Init+0x70a>
 800422a:	e000      	b.n	800422e <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 800422c:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <EE_Init+0x824>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <EE_Init+0x824>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800423a:	e053      	b.n	80042e4 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <EE_Init+0x81c>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	029a      	lsls	r2, r3, #10
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <EE_Init+0x820>)
 8004244:	4013      	ands	r3, r2
 8004246:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800424a:	fbb2 f1f3 	udiv	r1, r2, r3
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	0b1b      	lsrs	r3, r3, #12
 8004256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	3303      	adds	r3, #3
 800425c:	f003 0103 	and.w	r1, r3, #3
 8004260:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <EE_Init+0x81c>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	029a      	lsls	r2, r3, #10
 8004266:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <EE_Init+0x820>)
 8004268:	4013      	ands	r3, r2
 800426a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800426e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004272:	fb00 f303 	mul.w	r3, r0, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	0b1b      	lsrs	r3, r3, #12
 800427a:	440b      	add	r3, r1
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800427e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004280:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004284:	031a      	lsls	r2, r3, #12
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <EE_Init+0x81c>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	0299      	lsls	r1, r3, #10
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <EE_Init+0x820>)
 800428e:	400b      	ands	r3, r1
 8004290:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004294:	fbb1 f1f3 	udiv	r1, r1, r3
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <EE_Init+0x81c>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	0298      	lsls	r0, r3, #10
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <EE_Init+0x820>)
 80042a0:	4003      	ands	r3, r0
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f88b 	bl	80053c4 <GetPageState>
 80042ae:	4603      	mov	r3, r0
 80042b0:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 80042b2:	7ebb      	ldrb	r3, [r7, #26]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d109      	bne.n	80042cc <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <EE_Init+0x828>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <EE_Init+0x828>)
 80042c4:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 80042c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	e00b      	b.n	80042e4 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 80042cc:	230a      	movs	r3, #10
 80042ce:	e0d0      	b.n	8004472 <EE_Init+0x9be>
 80042d0:	1fff75e0 	.word	0x1fff75e0
 80042d4:	001ffc00 	.word	0x001ffc00
 80042d8:	200003a6 	.word	0x200003a6
 80042dc:	200003a4 	.word	0x200003a4
 80042e0:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042e4:	4b65      	ldr	r3, [pc, #404]	@ (800447c <EE_Init+0x9c8>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	029a      	lsls	r2, r3, #10
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <EE_Init+0x9cc>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	0b1b      	lsrs	r3, r3, #12
 80042fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004300:	429a      	cmp	r2, r3
 8004302:	d010      	beq.n	8004326 <EE_Init+0x872>
 8004304:	4b5d      	ldr	r3, [pc, #372]	@ (800447c <EE_Init+0x9c8>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	029a      	lsls	r2, r3, #10
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <EE_Init+0x9cc>)
 800430c:	4013      	ands	r3, r2
 800430e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004312:	fbb2 f1f3 	udiv	r1, r2, r3
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	0b1b      	lsrs	r3, r3, #12
 800431e:	3302      	adds	r3, #2
 8004320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004322:	429a      	cmp	r2, r3
 8004324:	d18a      	bne.n	800423c <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <EE_Init+0x9d0>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	4b53      	ldr	r3, [pc, #332]	@ (800447c <EE_Init+0x9c8>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	029a      	lsls	r2, r3, #10
 8004332:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <EE_Init+0x9cc>)
 8004334:	4013      	ands	r3, r2
 8004336:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800433a:	fbb2 f1f3 	udiv	r1, r2, r3
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	0b1b      	lsrs	r3, r3, #12
 8004346:	1ac3      	subs	r3, r0, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f003 0103 	and.w	r1, r3, #3
 800434e:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <EE_Init+0x9c8>)
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	029a      	lsls	r2, r3, #10
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <EE_Init+0x9cc>)
 8004356:	4013      	ands	r3, r2
 8004358:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800435c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004360:	fb00 f303 	mul.w	r3, r0, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	0b1b      	lsrs	r3, r3, #12
 8004368:	440b      	add	r3, r1
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004372:	031a      	lsls	r2, r3, #12
 8004374:	4b41      	ldr	r3, [pc, #260]	@ (800447c <EE_Init+0x9c8>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	0299      	lsls	r1, r3, #10
 800437a:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <EE_Init+0x9cc>)
 800437c:	400b      	ands	r3, r1
 800437e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004382:	fbb1 f1f3 	udiv	r1, r1, r3
 8004386:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <EE_Init+0x9c8>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	0298      	lsls	r0, r3, #10
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <EE_Init+0x9cc>)
 800438e:	4003      	ands	r3, r0
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 8004398:	e053      	b.n	8004442 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80043a0:	2101      	movs	r1, #1
 80043a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043a4:	f001 f8b1 	bl	800550a <FI_PageErase>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e05f      	b.n	8004472 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80043b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043b8:	f000 fb5d 	bl	8004a76 <VerifyPageFullyErased>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d108      	bne.n	80043d4 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80043c2:	2101      	movs	r1, #1
 80043c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043c6:	f001 f8a0 	bl	800550a <FI_PageErase>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04e      	b.n	8004472 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80043d4:	4b29      	ldr	r3, [pc, #164]	@ (800447c <EE_Init+0x9c8>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	029a      	lsls	r2, r3, #10
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <EE_Init+0x9cc>)
 80043dc:	4013      	ands	r3, r2
 80043de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	0b1b      	lsrs	r3, r3, #12
 80043ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f003 0103 	and.w	r1, r3, #3
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <EE_Init+0x9c8>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	029a      	lsls	r2, r3, #10
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <EE_Init+0x9cc>)
 8004400:	4013      	ands	r3, r2
 8004402:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004406:	fbb2 f0f3 	udiv	r0, r2, r3
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	0b1b      	lsrs	r3, r3, #12
 8004412:	440b      	add	r3, r1
 8004414:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800441c:	031a      	lsls	r2, r3, #12
 800441e:	4b17      	ldr	r3, [pc, #92]	@ (800447c <EE_Init+0x9c8>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	0299      	lsls	r1, r3, #10
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <EE_Init+0x9cc>)
 8004426:	400b      	ands	r3, r1
 8004428:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800442c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <EE_Init+0x9c8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	0298      	lsls	r0, r3, #10
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <EE_Init+0x9cc>)
 8004438:	4003      	ands	r3, r0
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8004442:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d1a7      	bne.n	800439a <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800444a:	f001 f89d 	bl	8005588 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004454:	2100      	movs	r1, #0
 8004456:	2000      	movs	r0, #0
 8004458:	f000 fe6c 	bl	8005134 <VerifyPagesFullWriteVariable>
 800445c:	4603      	mov	r3, r0
 800445e:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <EE_Init+0x9bc>
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	2b12      	cmp	r3, #18
 800446a:	d001      	beq.n	8004470 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 800446c:	2302      	movs	r3, #2
 800446e:	e000      	b.n	8004472 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3740      	adds	r7, #64	@ 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	1fff75e0 	.word	0x1fff75e0
 8004480:	001ffc00 	.word	0x001ffc00
 8004484:	200003a6 	.word	0x200003a6

08004488 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8004496:	f001 f899 	bl	80055cc <FI_CheckBankConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80044a0:	230e      	movs	r3, #14
 80044a2:	e083      	b.n	80045ac <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044a4:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <EE_Format+0x12c>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	029a      	lsls	r2, r3, #10
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <EE_Format+0x130>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	0b1b      	lsrs	r3, r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e034      	b.n	800452c <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80044c8:	2101      	movs	r1, #1
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 f81d 	bl	800550a <FI_PageErase>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d027      	beq.n	8004526 <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e068      	b.n	80045ac <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80044e0:	031a      	lsls	r2, r3, #12
 80044e2:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <EE_Format+0x12c>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	0299      	lsls	r1, r3, #10
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <EE_Format+0x130>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80044f0:	fbb1 f1f3 	udiv	r1, r1, r3
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <EE_Format+0x12c>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	0298      	lsls	r0, r3, #10
 80044fa:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <EE_Format+0x130>)
 80044fc:	4003      	ands	r3, r0
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fab4 	bl	8004a76 <VerifyPageFullyErased>
 800450e:	4603      	mov	r3, r0
 8004510:	2b10      	cmp	r3, #16
 8004512:	d108      	bne.n	8004526 <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004514:	2101      	movs	r1, #1
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fff7 	bl	800550a <FI_PageErase>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e042      	b.n	80045ac <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <EE_Format+0x12c>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	029a      	lsls	r2, r3, #10
 8004532:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <EE_Format+0x130>)
 8004534:	4013      	ands	r3, r2
 8004536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800453a:	fbb2 f1f3 	udiv	r1, r2, r3
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	0b1b      	lsrs	r3, r3, #12
 8004546:	3304      	adds	r3, #4
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3b9      	bcc.n	80044c2 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800454e:	f001 f81b 	bl	8005588 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004552:	4b18      	ldr	r3, [pc, #96]	@ (80045b4 <EE_Format+0x12c>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	029a      	lsls	r2, r3, #10
 8004558:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <EE_Format+0x130>)
 800455a:	4013      	ands	r3, r2
 800455c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004560:	fbb2 f1f3 	udiv	r1, r2, r3
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fe66 	bl	8005240 <SetPageState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800457a:	2302      	movs	r3, #2
 800457c:	e016      	b.n	80045ac <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800457e:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <EE_Format+0x134>)
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <EE_Format+0x12c>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	029a      	lsls	r2, r3, #10
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <EE_Format+0x130>)
 800458c:	4013      	ands	r3, r2
 800458e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004592:	fbb2 f1f3 	udiv	r1, r2, r3
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	0b1b      	lsrs	r3, r3, #12
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <EE_Format+0x138>)
 80045a2:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80045a4:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <EE_Format+0x13c>)
 80045a6:	2220      	movs	r2, #32
 80045a8:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	1fff75e0 	.word	0x1fff75e0
 80045b8:	001ffc00 	.word	0x001ffc00
 80045bc:	200003a4 	.word	0x200003a4
 80045c0:	200003a6 	.word	0x200003a6
 80045c4:	20000008 	.word	0x20000008

080045c8 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d011      	beq.n	8004608 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f94b 	bl	8004890 <ReadVariable>
 80045fa:	4603      	mov	r3, r0
 80045fc:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]

    return status;
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	e000      	b.n	800460a <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004608:	2308      	movs	r3, #8
  } 
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	6039      	str	r1, [r7, #0]
 800461c:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800462a:	4293      	cmp	r3, r2
 800462c:	d006      	beq.n	800463c <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa00 	bl	8004a38 <WriteVariable>
 8004638:	4603      	mov	r3, r0
 800463a:	e000      	b.n	800463e <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800463c:	2308      	movs	r3, #8
  } 
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800465e:	2305      	movs	r3, #5
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	2305      	movs	r3, #5
 8004664:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004666:	4b3f      	ldr	r3, [pc, #252]	@ (8004764 <EE_CleanUp+0x11c>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	029a      	lsls	r2, r3, #10
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <EE_CleanUp+0x120>)
 800466e:	4013      	ands	r3, r2
 8004670:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004674:	fbb2 f1f3 	udiv	r1, r2, r3
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	0b1b      	lsrs	r3, r3, #12
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e059      	b.n	8004738 <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800468a:	031a      	lsls	r2, r3, #12
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <EE_CleanUp+0x11c>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	0299      	lsls	r1, r3, #10
 8004692:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <EE_CleanUp+0x120>)
 8004694:	400b      	ands	r3, r1
 8004696:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800469a:	fbb1 f1f3 	udiv	r1, r1, r3
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <EE_CleanUp+0x11c>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	0298      	lsls	r0, r3, #10
 80046a4:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <EE_CleanUp+0x120>)
 80046a6:	4003      	ands	r3, r0
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fe87 	bl	80053c4 <GetPageState>
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d138      	bne.n	8004732 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e022      	b.n	800470e <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80046ce:	031a      	lsls	r2, r3, #12
 80046d0:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <EE_CleanUp+0x11c>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	0299      	lsls	r1, r3, #10
 80046d6:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <EE_CleanUp+0x120>)
 80046d8:	400b      	ands	r3, r1
 80046da:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80046de:	fbb1 f1f3 	udiv	r1, r1, r3
 80046e2:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <EE_CleanUp+0x11c>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	0298      	lsls	r0, r3, #10
 80046e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <EE_CleanUp+0x120>)
 80046ea:	4003      	ands	r3, r0
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f000 fe65 	bl	80053c4 <GetPageState>
 80046fa:	4603      	mov	r3, r0
 80046fc:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d001      	beq.n	8004708 <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004704:	2305      	movs	r3, #5
 8004706:	e029      	b.n	800475c <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3301      	adds	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3302      	adds	r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3d7      	bcc.n	80046c8 <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004718:	2102      	movs	r1, #2
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f000 fef5 	bl	800550a <FI_PageErase>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e018      	b.n	800475c <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800472a:	f000 ff2d 	bl	8005588 <FI_CacheFlush>
        
        return EE_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e014      	b.n	800475c <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3302      	adds	r3, #2
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <EE_CleanUp+0x11c>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	029a      	lsls	r2, r3, #10
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <EE_CleanUp+0x120>)
 8004740:	4013      	ands	r3, r2
 8004742:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004746:	fbb2 f1f3 	udiv	r1, r2, r3
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	0b1b      	lsrs	r3, r3, #12
 8004752:	3304      	adds	r3, #4
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d394      	bcc.n	8004684 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800475a:	2305      	movs	r3, #5
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	1fff75e0 	.word	0x1fff75e0
 8004768:	001ffc00 	.word	0x001ffc00

0800476c <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004782:	2305      	movs	r3, #5
 8004784:	71fb      	strb	r3, [r7, #7]
 8004786:	2305      	movs	r3, #5
 8004788:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	029a      	lsls	r2, r3, #10
 8004790:	4b3e      	ldr	r3, [pc, #248]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004792:	4013      	ands	r3, r2
 8004794:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004798:	fbb2 f1f3 	udiv	r1, r2, r3
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	0b1b      	lsrs	r3, r3, #12
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e059      	b.n	800485c <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047ae:	031a      	lsls	r2, r3, #12
 80047b0:	4b35      	ldr	r3, [pc, #212]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	0299      	lsls	r1, r3, #10
 80047b6:	4b35      	ldr	r3, [pc, #212]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047b8:	400b      	ands	r3, r1
 80047ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80047be:	fbb1 f1f3 	udiv	r1, r1, r3
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	0298      	lsls	r0, r3, #10
 80047c8:	4b30      	ldr	r3, [pc, #192]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047ca:	4003      	ands	r3, r0
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fdf5 	bl	80053c4 <GetPageState>
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d138      	bne.n	8004856 <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e022      	b.n	8004832 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80047f2:	031a      	lsls	r2, r3, #12
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	0299      	lsls	r1, r3, #10
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <EE_CleanUp_IT+0x120>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004802:	fbb1 f1f3 	udiv	r1, r1, r3
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	0298      	lsls	r0, r3, #10
 800480c:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <EE_CleanUp_IT+0x120>)
 800480e:	4003      	ands	r3, r0
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 fdd3 	bl	80053c4 <GetPageState>
 800481e:	4603      	mov	r3, r0
 8004820:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d001      	beq.n	800482c <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004828:	2305      	movs	r3, #5
 800482a:	e029      	b.n	8004880 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3302      	adds	r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3d7      	bcc.n	80047ec <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800483c:	2102      	movs	r1, #2
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f000 fe85 	bl	800554e <FI_PageErase_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e018      	b.n	8004880 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800484e:	f000 fe9b 	bl	8005588 <FI_CacheFlush>
        return EE_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e014      	b.n	8004880 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3302      	adds	r3, #2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <EE_CleanUp_IT+0x11c>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	029a      	lsls	r2, r3, #10
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <EE_CleanUp_IT+0x120>)
 8004864:	4013      	ands	r3, r2
 8004866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800486a:	fbb2 f1f3 	udiv	r1, r2, r3
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	0b1b      	lsrs	r3, r3, #12
 8004876:	3304      	adds	r3, #4
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d394      	bcc.n	80047a8 <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800487e:	2305      	movs	r3, #5
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	1fff75e0 	.word	0x1fff75e0
 800488c:	001ffc00 	.word	0x001ffc00

08004890 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ac:	2300      	movs	r3, #0
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80048b8:	2305      	movs	r3, #5
 80048ba:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80048bc:	2000      	movs	r0, #0
 80048be:	f000 f8ff 	bl	8004ac0 <FindPage>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d101      	bne.n	80048d0 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ab      	b.n	8004a28 <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80048d6:	031a      	lsls	r2, r3, #12
 80048d8:	4b55      	ldr	r3, [pc, #340]	@ (8004a30 <ReadVariable+0x1a0>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	0299      	lsls	r1, r3, #10
 80048de:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <ReadVariable+0x1a4>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80048e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <ReadVariable+0x1a0>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	0298      	lsls	r0, r3, #10
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <ReadVariable+0x1a4>)
 80048f2:	4003      	ands	r3, r0
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f000 fd61 	bl	80053c4 <GetPageState>
 8004902:	4603      	mov	r3, r0
 8004904:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004906:	e082      	b.n	8004a0e <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 8004908:	f640 73f8 	movw	r3, #4088	@ 0xff8
 800490c:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800490e:	e03f      	b.n	8004990 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800491e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	bf08      	it	eq
 8004928:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800492c:	d02d      	beq.n	800498a <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800492e:	8a3b      	ldrh	r3, [r7, #16]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	429a      	cmp	r2, r3
 8004934:	d129      	bne.n	800498a <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8004936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	000a      	movs	r2, r1
 8004944:	2300      	movs	r3, #0
 8004946:	8a3b      	ldrh	r3, [r7, #16]
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fdb0 	bl	80054b0 <CalculateCrc>
 8004950:	4603      	mov	r3, r0
 8004952:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004954:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	0c02      	lsrs	r2, r0, #16
 8004962:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004966:	0c0b      	lsrs	r3, r1, #16
 8004968:	b293      	uxth	r3, r2
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4293      	cmp	r3, r2
 8004970:	d10b      	bne.n	800498a <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	000a      	movs	r2, r1
 8004980:	2300      	movs	r3, #0
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e04e      	b.n	8004a28 <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b08      	subs	r3, #8
 800498e:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b1f      	cmp	r3, #31
 8004994:	d8bc      	bhi.n	8004910 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <ReadVariable+0x1a0>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	029a      	lsls	r2, r3, #10
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <ReadVariable+0x1a4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	0b1b      	lsrs	r3, r3, #12
 80049b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	3303      	adds	r3, #3
 80049b6:	f003 0103 	and.w	r1, r3, #3
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <ReadVariable+0x1a0>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	029a      	lsls	r2, r3, #10
 80049c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <ReadVariable+0x1a4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049c8:	fbb2 f0f3 	udiv	r0, r2, r3
 80049cc:	fb00 f303 	mul.w	r3, r0, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	0b1b      	lsrs	r3, r3, #12
 80049d4:	440b      	add	r3, r1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80049de:	031a      	lsls	r2, r3, #12
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <ReadVariable+0x1a0>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	0299      	lsls	r1, r3, #10
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <ReadVariable+0x1a4>)
 80049e8:	400b      	ands	r3, r1
 80049ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049ee:	fbb1 f1f3 	udiv	r1, r1, r3
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <ReadVariable+0x1a0>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	0298      	lsls	r0, r3, #10
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <ReadVariable+0x1a4>)
 80049fa:	4003      	ands	r3, r0
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004a04:	6a38      	ldr	r0, [r7, #32]
 8004a06:	f000 fcdd 	bl	80053c4 <GetPageState>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004a0e:	7efb      	ldrb	r3, [r7, #27]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f43f af79 	beq.w	8004908 <ReadVariable+0x78>
 8004a16:	7efb      	ldrb	r3, [r7, #27]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	f43f af75 	beq.w	8004908 <ReadVariable+0x78>
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	f43f af71 	beq.w	8004908 <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 8004a26:	2307      	movs	r3, #7
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	1fff75e0 	.word	0x1fff75e0
 8004a34:	001ffc00 	.word	0x001ffc00

08004a38 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb71 	bl	8005134 <VerifyPagesFullWriteVariable>
 8004a52:	4603      	mov	r3, r0
 8004a54:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a56:	89fb      	ldrh	r3, [r7, #14]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d107      	bne.n	8004a6c <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f940 	bl	8004ce8 <PagesTransfer>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	e000      	b.n	8004a6e <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a80:	2311      	movs	r3, #17
 8004a82:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a88:	e00f      	b.n	8004aaa <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4413      	add	r3, r2
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	bf08      	it	eq
 8004a9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a9e:	d001      	beq.n	8004aa4 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3eb      	bcc.n	8004a8a <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004aca:	2305      	movs	r3, #5
 8004acc:	75fb      	strb	r3, [r7, #23]
 8004ace:	2305      	movs	r3, #5
 8004ad0:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004ade:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd8 <FindPage+0x218>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004aea:	031a      	lsls	r2, r3, #12
 8004aec:	4b7b      	ldr	r3, [pc, #492]	@ (8004cdc <FindPage+0x21c>)
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0299      	lsls	r1, r3, #10
 8004af2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce0 <FindPage+0x220>)
 8004af4:	400b      	ands	r3, r1
 8004af6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004afa:	fbb1 f1f3 	udiv	r1, r1, r3
 8004afe:	4b77      	ldr	r3, [pc, #476]	@ (8004cdc <FindPage+0x21c>)
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	0298      	lsls	r0, r3, #10
 8004b04:	4b76      	ldr	r3, [pc, #472]	@ (8004ce0 <FindPage+0x220>)
 8004b06:	4003      	ands	r3, r0
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fc58 	bl	80053c4 <GetPageState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004b18:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <FindPage+0x21c>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	029a      	lsls	r2, r3, #10
 8004b1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ce0 <FindPage+0x220>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b26:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	0b1b      	lsrs	r3, r3, #12
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f003 0103 	and.w	r1, r3, #3
 8004b3c:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <FindPage+0x21c>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	029a      	lsls	r2, r3, #10
 8004b42:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <FindPage+0x220>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b4a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	0b1b      	lsrs	r3, r3, #12
 8004b56:	440b      	add	r3, r1
 8004b58:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004b60:	031a      	lsls	r2, r3, #12
 8004b62:	4b5e      	ldr	r3, [pc, #376]	@ (8004cdc <FindPage+0x21c>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	0299      	lsls	r1, r3, #10
 8004b68:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce0 <FindPage+0x220>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004b70:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b74:	4b59      	ldr	r3, [pc, #356]	@ (8004cdc <FindPage+0x21c>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	0298      	lsls	r0, r3, #10
 8004b7a:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <FindPage+0x220>)
 8004b7c:	4003      	ands	r3, r0
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc1d 	bl	80053c4 <GetPageState>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <FindPage+0x21c>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	029a      	lsls	r2, r3, #10
 8004b94:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <FindPage+0x220>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	0b1b      	lsrs	r3, r3, #12
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	3303      	adds	r3, #3
 8004bae:	f003 0103 	and.w	r1, r3, #3
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <FindPage+0x21c>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	029a      	lsls	r2, r3, #10
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <FindPage+0x220>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004bc0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	0b1b      	lsrs	r3, r3, #12
 8004bcc:	440b      	add	r3, r1
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d071      	beq.n	8004cba <FindPage+0x1fa>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	dc77      	bgt.n	8004cca <FindPage+0x20a>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d060      	beq.n	8004ca0 <FindPage+0x1e0>
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d173      	bne.n	8004cca <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d12a      	bne.n	8004c3e <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004be8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <FindPage+0x224>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d201      	bcs.n	8004bf6 <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	e06b      	b.n	8004cce <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bf6:	7dbb      	ldrb	r3, [r7, #22]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bfc:	f7ff fd24 	bl	8004648 <EE_CleanUp>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e060      	b.n	8004cce <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f000 fb16 	bl	8005240 <SetPageState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	e056      	b.n	8004cce <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004c20:	2102      	movs	r1, #2
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fb0c 	bl	8005240 <SetPageState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e04c      	b.n	8004cce <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <FindPage+0x224>)
 8004c36:	2220      	movs	r2, #32
 8004c38:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	e047      	b.n	8004cce <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12a      	bne.n	8004c9a <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c44:	4b27      	ldr	r3, [pc, #156]	@ (8004ce4 <FindPage+0x224>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d201      	bcs.n	8004c52 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	e03d      	b.n	8004cce <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c52:	7dbb      	ldrb	r3, [r7, #22]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d107      	bne.n	8004c68 <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c58:	f7ff fcf6 	bl	8004648 <EE_CleanUp>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e032      	b.n	8004cce <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c68:	2103      	movs	r1, #3
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 fae8 	bl	8005240 <SetPageState>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	e028      	b.n	8004cce <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fade 	bl	8005240 <SetPageState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e01e      	b.n	8004cce <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <FindPage+0x224>)
 8004c92:	2220      	movs	r2, #32
 8004c94:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e019      	b.n	8004cce <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e016      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d101      	bne.n	8004caa <FindPage+0x1ea>
      {
        return currentpage;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	e011      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <FindPage+0x1f4>
        {
          return previouspage;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	e00c      	b.n	8004cce <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e009      	b.n	8004cce <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004cba:	7dbb      	ldrb	r3, [r7, #22]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <FindPage+0x204>
      {
        return followingpage;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e004      	b.n	8004cce <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	e001      	b.n	8004cce <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200003a6 	.word	0x200003a6
 8004cdc:	1fff75e0 	.word	0x1fff75e0
 8004ce0:	001ffc00 	.word	0x001ffc00
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cf8:	2305      	movs	r3, #5
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004d1e:	797b      	ldrb	r3, [r7, #5]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <PagesTransfer+0x40>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e000      	b.n	8004d2a <PagesTransfer+0x42>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fec8 	bl	8004ac0 <FindPage>
 8004d30:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d101      	bne.n	8004d3e <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	e1ed      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004d4a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004d4e:	2220      	movs	r2, #32
 8004d50:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d52:	797b      	ldrb	r3, [r7, #5]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6a38      	ldr	r0, [r7, #32]
 8004d5c:	f000 fa70 	bl	8005240 <SetPageState>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d66:	2302      	movs	r3, #2
 8004d68:	e1d7      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	029a      	lsls	r2, r3, #10
 8004d70:	4b9b      	ldr	r3, [pc, #620]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	0b1b      	lsrs	r3, r3, #12
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	3303      	adds	r3, #3
 8004d8a:	f003 0103 	and.w	r1, r3, #3
 8004d8e:	4b93      	ldr	r3, [pc, #588]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	029a      	lsls	r2, r3, #10
 8004d94:	4b92      	ldr	r3, [pc, #584]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d9c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004da0:	fb00 f303 	mul.w	r3, r0, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	0b1b      	lsrs	r3, r3, #12
 8004da8:	440b      	add	r3, r1
 8004daa:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004db2:	031a      	lsls	r2, r3, #12
 8004db4:	4b89      	ldr	r3, [pc, #548]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	0299      	lsls	r1, r3, #10
 8004dba:	4b89      	ldr	r3, [pc, #548]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004dc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004dc6:	4b85      	ldr	r3, [pc, #532]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	0298      	lsls	r0, r3, #10
 8004dcc:	4b84      	ldr	r3, [pc, #528]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004dce:	4003      	ands	r3, r0
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f000 faf3 	bl	80053c4 <GetPageState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d004      	beq.n	8004df6 <PagesTransfer+0x10e>
 8004dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	f040 809e 	bne.w	8004f32 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d108      	bne.n	8004e10 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dfe:	2104      	movs	r1, #4
 8004e00:	6a38      	ldr	r0, [r7, #32]
 8004e02:	f000 fa1d 	bl	8005240 <SetPageState>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e184      	b.n	800511a <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004e10:	4b72      	ldr	r3, [pc, #456]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	029a      	lsls	r2, r3, #10
 8004e16:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	0b1b      	lsrs	r3, r3, #12
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	3303      	adds	r3, #3
 8004e30:	f003 0103 	and.w	r1, r3, #3
 8004e34:	4b69      	ldr	r3, [pc, #420]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	029a      	lsls	r2, r3, #10
 8004e3a:	4b69      	ldr	r3, [pc, #420]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e42:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e46:	fb00 f303 	mul.w	r3, r0, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	0b1b      	lsrs	r3, r3, #12
 8004e4e:	440b      	add	r3, r1
 8004e50:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004e58:	031a      	lsls	r2, r3, #12
 8004e5a:	4b60      	ldr	r3, [pc, #384]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	0299      	lsls	r1, r3, #10
 8004e60:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e62:	400b      	ands	r3, r1
 8004e64:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004e68:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	0298      	lsls	r0, r3, #10
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004e74:	4003      	ands	r3, r0
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 faa0 	bl	80053c4 <GetPageState>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e8a:	e049      	b.n	8004f20 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d108      	bne.n	8004ea6 <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e94:	2104      	movs	r1, #4
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	f000 f9d2 	bl	8005240 <SetPageState>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e139      	b.n	800511a <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	0b1b      	lsrs	r3, r3, #12
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	f003 0103 	and.w	r1, r3, #3
 8004eca:	4b44      	ldr	r3, [pc, #272]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	029a      	lsls	r2, r3, #10
 8004ed0:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ed8:	fbb2 f0f3 	udiv	r0, r2, r3
 8004edc:	fb00 f303 	mul.w	r3, r0, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	0b1b      	lsrs	r3, r3, #12
 8004ee4:	440b      	add	r3, r1
 8004ee6:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004eee:	031a      	lsls	r2, r3, #12
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	0299      	lsls	r1, r3, #10
 8004ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004ef8:	400b      	ands	r3, r1
 8004efa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004efe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f02:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	0298      	lsls	r0, r3, #10
 8004f08:	4b35      	ldr	r3, [pc, #212]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f000 fa55 	bl	80053c4 <GetPageState>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d0b1      	beq.n	8004e8c <PagesTransfer+0x1a4>
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d0ad      	beq.n	8004e8c <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004f30:	e008      	b.n	8004f44 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004f32:	797b      	ldrb	r3, [r7, #5]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d103      	bne.n	8004f40 <PagesTransfer+0x258>
 8004f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d001      	beq.n	8004f44 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f40:	230a      	movs	r3, #10
 8004f42:	e0ea      	b.n	800511a <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f44:	797b      	ldrb	r3, [r7, #5]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	f040 809b 	bne.w	8005082 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e031      	b.n	8004fb6 <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f52:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8004f5a:	031a      	lsls	r2, r3, #12
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	0299      	lsls	r1, r3, #10
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f64:	400b      	ands	r3, r1
 8004f66:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f6a:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <PagesTransfer+0x2f4>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	0298      	lsls	r0, r3, #10
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <PagesTransfer+0x2f8>)
 8004f76:	4003      	ands	r3, r0
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	441a      	add	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	bf08      	it	eq
 8004f94:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f98:	d012      	beq.n	8004fc0 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <PagesTransfer+0x2e8>)
 8004fa4:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <PagesTransfer+0x2f0>)
 8004fae:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbc:	d3c9      	bcc.n	8004f52 <PagesTransfer+0x26a>
 8004fbe:	e000      	b.n	8004fc2 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004fc0:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <PagesTransfer+0x2ec>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e054      	b.n	8005078 <PagesTransfer+0x390>
 8004fce:	bf00      	nop
 8004fd0:	200003a4 	.word	0x200003a4
 8004fd4:	200003a6 	.word	0x200003a6
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	1fff75e0 	.word	0x1fff75e0
 8004fe0:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8005124 <PagesTransfer+0x43c>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	029a      	lsls	r2, r3, #10
 8004fea:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <PagesTransfer+0x440>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ff2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	0b1b      	lsrs	r3, r3, #12
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	3303      	adds	r3, #3
 8005004:	f003 0103 	and.w	r1, r3, #3
 8005008:	4b46      	ldr	r3, [pc, #280]	@ (8005124 <PagesTransfer+0x43c>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	029a      	lsls	r2, r3, #10
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <PagesTransfer+0x440>)
 8005010:	4013      	ands	r3, r2
 8005012:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005016:	fbb2 f0f3 	udiv	r0, r2, r3
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	0b1b      	lsrs	r3, r3, #12
 8005022:	440b      	add	r3, r1
 8005024:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800502c:	031a      	lsls	r2, r3, #12
 800502e:	4b3d      	ldr	r3, [pc, #244]	@ (8005124 <PagesTransfer+0x43c>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	0299      	lsls	r1, r3, #10
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <PagesTransfer+0x440>)
 8005036:	400b      	ands	r3, r1
 8005038:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800503c:	fbb1 f1f3 	udiv	r1, r1, r3
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <PagesTransfer+0x43c>)
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	0298      	lsls	r0, r3, #10
 8005046:	4b38      	ldr	r3, [pc, #224]	@ (8005128 <PagesTransfer+0x440>)
 8005048:	4003      	ands	r3, r0
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9b7 	bl	80053c4 <GetPageState>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005060:	2b03      	cmp	r3, #3
 8005062:	d10d      	bne.n	8005080 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005064:	4b31      	ldr	r3, [pc, #196]	@ (800512c <PagesTransfer+0x444>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b2f      	ldr	r3, [pc, #188]	@ (800512c <PagesTransfer+0x444>)
 8005070:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d9b2      	bls.n	8004fe4 <PagesTransfer+0x2fc>
 800507e:	e000      	b.n	8005082 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8005080:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f854 	bl	8005134 <VerifyPagesFullWriteVariable>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8005092:	2302      	movs	r3, #2
 8005094:	e041      	b.n	800511a <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8005096:	4b25      	ldr	r3, [pc, #148]	@ (800512c <PagesTransfer+0x444>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d903      	bls.n	80050a6 <PagesTransfer+0x3be>
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <PagesTransfer+0x444>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	3b02      	subs	r3, #2
 80050a4:	e000      	b.n	80050a8 <PagesTransfer+0x3c0>
 80050a6:	2301      	movs	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e026      	b.n	80050fa <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d01f      	beq.n	80050f4 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fbe6 	bl	8004890 <ReadVariable>
 80050c4:	4603      	mov	r3, r0
 80050c6:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f82c 	bl	8005134 <VerifyPagesFullWriteVariable>
 80050dc:	4603      	mov	r3, r0
 80050de:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          return status;
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	e017      	b.n	800511a <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d001      	beq.n	80050f4 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	e012      	b.n	800511a <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b32      	cmp	r3, #50	@ 0x32
 80050fe:	d9d5      	bls.n	80050ac <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <PagesTransfer+0x448>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f89a 	bl	8005240 <SetPageState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8005112:	2302      	movs	r3, #2
 8005114:	e001      	b.n	800511a <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8005116:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	@ 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	1fff75e0 	.word	0x1fff75e0
 8005128:	001ffc00 	.word	0x001ffc00
 800512c:	200003a4 	.word	0x200003a4
 8005130:	200003a6 	.word	0x200003a6

08005134 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8005134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005138:	b08b      	sub	sp, #44	@ 0x2c
 800513a:	af00      	add	r7, sp, #0
 800513c:	4603      	mov	r3, r0
 800513e:	6139      	str	r1, [r7, #16]
 8005140:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8005146:	4b3a      	ldr	r3, [pc, #232]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 800514e:	d301      	bcc.n	8005154 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8005150:	2312      	movs	r3, #18
 8005152:	e068      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005154:	2001      	movs	r0, #1
 8005156:	f7ff fcb3 	bl	8004ac0 <FindPage>
 800515a:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d101      	bne.n	800516c <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8005168:	2303      	movs	r3, #3
 800516a:	e05c      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005172:	0319      	lsls	r1, r3, #12
 8005174:	4b2f      	ldr	r3, [pc, #188]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	029a      	lsls	r2, r3, #10
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800517c:	4013      	ands	r3, r2
 800517e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005182:	fbb2 f2f3 	udiv	r2, r2, r3
 8005186:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <VerifyPagesFullWriteVariable+0x100>)
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	0298      	lsls	r0, r3, #10
 800518c:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <VerifyPagesFullWriteVariable+0x104>)
 800518e:	4003      	ands	r3, r0
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	440b      	add	r3, r1
 8005196:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a8:	e006      	b.n	80051b8 <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	4619      	mov	r1, r3
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f000 f97e 	bl	80054b0 <CalculateCrc>
 80051b4:	4603      	mov	r3, r0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	18d0      	adds	r0, r2, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	000b      	movs	r3, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d8:	0409      	lsls	r1, r1, #16
 80051da:	2600      	movs	r6, #0
 80051dc:	468a      	mov	sl, r1
 80051de:	46b3      	mov	fp, r6
 80051e0:	ea42 040a 	orr.w	r4, r2, sl
 80051e4:	ea43 050b 	orr.w	r5, r3, fp
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	2200      	movs	r2, #0
 80051ec:	4698      	mov	r8, r3
 80051ee:	4691      	mov	r9, r2
 80051f0:	ea44 0308 	orr.w	r3, r4, r8
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	ea45 0309 	orr.w	r3, r5, r9
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	f000 f972 	bl	80054e8 <FI_WriteDoubleWord>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 800520a:	2302      	movs	r3, #2
 800520c:	e00b      	b.n	8005226 <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	4a09      	ldr	r2, [pc, #36]	@ (800523c <VerifyPagesFullWriteVariable+0x108>)
 8005216:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <VerifyPagesFullWriteVariable+0xfc>)
 8005222:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	372c      	adds	r7, #44	@ 0x2c
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	200003a4 	.word	0x200003a4
 8005234:	1fff75e0 	.word	0x1fff75e0
 8005238:	001ffc00 	.word	0x001ffc00
 800523c:	20000008 	.word	0x20000008

08005240 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005262:	031a      	lsls	r2, r3, #12
 8005264:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <SetPageState+0x178>)
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	0299      	lsls	r1, r3, #10
 800526a:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <SetPageState+0x17c>)
 800526c:	400b      	ands	r3, r1
 800526e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005272:	fbb1 f1f3 	udiv	r1, r1, r3
 8005276:	4b50      	ldr	r3, [pc, #320]	@ (80053b8 <SetPageState+0x178>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	0298      	lsls	r0, r3, #10
 800527c:	4b4f      	ldr	r3, [pc, #316]	@ (80053bc <SetPageState+0x17c>)
 800527e:	4003      	ands	r3, r0
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800528e:	031a      	lsls	r2, r3, #12
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <SetPageState+0x178>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	0299      	lsls	r1, r3, #10
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <SetPageState+0x17c>)
 8005298:	400b      	ands	r3, r1
 800529a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800529e:	fbb1 f1f3 	udiv	r1, r1, r3
 80052a2:	4b45      	ldr	r3, [pc, #276]	@ (80053b8 <SetPageState+0x178>)
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	0298      	lsls	r0, r3, #10
 80052a8:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <SetPageState+0x17c>)
 80052aa:	4003      	ands	r3, r0
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	3308      	adds	r3, #8
 80052b4:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052bc:	031a      	lsls	r2, r3, #12
 80052be:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <SetPageState+0x178>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	0299      	lsls	r1, r3, #10
 80052c4:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <SetPageState+0x17c>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052cc:	fbb1 f1f3 	udiv	r1, r1, r3
 80052d0:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <SetPageState+0x178>)
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	0298      	lsls	r0, r3, #10
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <SetPageState+0x17c>)
 80052d8:	4003      	ands	r3, r0
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3310      	adds	r3, #16
 80052e2:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80052ea:	031a      	lsls	r2, r3, #12
 80052ec:	4b32      	ldr	r3, [pc, #200]	@ (80053b8 <SetPageState+0x178>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	0299      	lsls	r1, r3, #10
 80052f2:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <SetPageState+0x17c>)
 80052f4:	400b      	ands	r3, r1
 80052f6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80052fa:	fbb1 f1f3 	udiv	r1, r1, r3
 80052fe:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <SetPageState+0x178>)
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	0298      	lsls	r0, r3, #10
 8005304:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <SetPageState+0x17c>)
 8005306:	4003      	ands	r3, r0
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3318      	adds	r3, #24
 8005310:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	3b01      	subs	r3, #1
 8005316:	2b03      	cmp	r3, #3
 8005318:	d844      	bhi.n	80053a4 <SetPageState+0x164>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <SetPageState+0xe0>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005353 	.word	0x08005353
 8005328:	08005375 	.word	0x08005375
 800532c:	0800538d 	.word	0x0800538d
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005330:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005334:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f000 f8d5 	bl	80054e8 <FI_WriteDoubleWord>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005344:	2302      	movs	r3, #2
 8005346:	e033      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <SetPageState+0x180>)
 800534e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005350:	e02d      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005352:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005356:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800535a:	6938      	ldr	r0, [r7, #16]
 800535c:	f000 f8c4 	bl	80054e8 <FI_WriteDoubleWord>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 8005366:	2302      	movs	r3, #2
 8005368:	e022      	b.n	80053b0 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <SetPageState+0x180>)
 8005370:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005372:	e01c      	b.n	80053ae <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005374:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005378:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8b3 	bl	80054e8 <FI_WriteDoubleWord>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 8005388:	2302      	movs	r3, #2
 800538a:	e011      	b.n	80053b0 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800538c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8005390:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f000 f8a7 	bl	80054e8 <FI_WriteDoubleWord>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e005      	b.n	80053b0 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <SetPageState+0x16e>
    break;
 80053ac:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	1fff75e0 	.word	0x1fff75e0
 80053bc:	001ffc00 	.word	0x001ffc00
 80053c0:	200003a6 	.word	0x200003a6

080053c4 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b08b      	sub	sp, #44	@ 0x2c
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3308      	adds	r3, #8
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3310      	adds	r3, #16
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3318      	adds	r3, #24
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	bf08      	it	eq
 8005434:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005438:	d001      	beq.n	800543e <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800543a:	2304      	movs	r3, #4
 800543c:	e01e      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800543e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	bf08      	it	eq
 8005448:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800544c:	d001      	beq.n	8005452 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800544e:	2303      	movs	r3, #3
 8005450:	e014      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	bf08      	it	eq
 800545c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005460:	d001      	beq.n	8005466 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005462:	2302      	movs	r3, #2
 8005464:	e00a      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 8005466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	bf08      	it	eq
 8005470:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005474:	d001      	beq.n	800547a <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	372c      	adds	r7, #44	@ 0x2c
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800548c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005490:	f7fe fa9a 	bl	80039c8 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005494:	f248 0105 	movw	r1, #32773	@ 0x8005
 8005498:	4804      	ldr	r0, [pc, #16]	@ (80054ac <ConfigureCrc+0x24>)
 800549a:	f7fe fad1 	bl	8003a40 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800549e:	2108      	movs	r1, #8
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <ConfigureCrc+0x24>)
 80054a2:	f7fe faba 	bl	8003a1a <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023000 	.word	0x40023000

080054b0 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80054bc:	4809      	ldr	r0, [pc, #36]	@ (80054e4 <CalculateCrc+0x34>)
 80054be:	f7fe fa9c 	bl	80039fa <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4807      	ldr	r0, [pc, #28]	@ (80054e4 <CalculateCrc+0x34>)
 80054c6:	f7fe fac9 	bl	8003a5c <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4805      	ldr	r0, [pc, #20]	@ (80054e4 <CalculateCrc+0x34>)
 80054d0:	f7fe fad2 	bl	8003a78 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80054d4:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <CalculateCrc+0x34>)
 80054d6:	f7fe fae0 	bl	8003a9a <LL_CRC_ReadData16>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023000 	.word	0x40023000

080054e8 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	2001      	movs	r0, #1
 80054fc:	f009 fae2 	bl	800eac4 <HAL_FLASH_Program>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800551e:	2302      	movs	r3, #2
 8005520:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005522:	887b      	ldrh	r3, [r7, #2]
 8005524:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800552a:	f107 020c 	add.w	r2, r7, #12
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f009 fbd9 	bl	800ecec <HAL_FLASHEx_Erase>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005544:	8bfb      	ldrh	r3, [r7, #30]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800555e:	2302      	movs	r3, #2
 8005560:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f009 fc0c 	bl	800ed8c <HAL_FLASHEx_Erase_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 800557e:	8afb      	ldrh	r3, [r7, #22]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800558c:	4b0e      	ldr	r3, [pc, #56]	@ (80055c8 <FI_CacheFlush+0x40>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0d      	ldr	r2, [pc, #52]	@ (80055c8 <FI_CacheFlush+0x40>)
 8005592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005596:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <FI_CacheFlush+0x40>)
 800559e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ae:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <FI_CacheFlush+0x40>)
 80055b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	58004000 	.word	0x58004000

080055cc <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80055d0:	2300      	movs	r3, #0
#endif
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ec:	f023 0218 	bic.w	r2, r3, #24
 80055f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005644:	f000 f834 	bl	80056b0 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <serialOut+0x58>)
 800564c:	4912      	ldr	r1, [pc, #72]	@ (8005698 <serialOut+0x5c>)
 800564e:	4813      	ldr	r0, [pc, #76]	@ (800569c <serialOut+0x60>)
 8005650:	f00f fd3c 	bl	80150cc <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005654:	4811      	ldr	r0, [pc, #68]	@ (800569c <serialOut+0x60>)
 8005656:	f7fa fdf3 	bl	8000240 <strlen>
 800565a:	4603      	mov	r3, r0
 800565c:	b29a      	uxth	r2, r3
 800565e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005662:	490e      	ldr	r1, [pc, #56]	@ (800569c <serialOut+0x60>)
 8005664:	480e      	ldr	r0, [pc, #56]	@ (80056a0 <serialOut+0x64>)
 8005666:	f00d fe29 	bl	80132bc <HAL_UART_Transmit>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <serialOut+0x68>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <serialOut+0x4e>
 800567c:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <serialOut+0x6c>)
 800567e:	480b      	ldr	r0, [pc, #44]	@ (80056ac <serialOut+0x70>)
 8005680:	f00f fd24 	bl	80150cc <siprintf>
 8005684:	4809      	ldr	r0, [pc, #36]	@ (80056ac <serialOut+0x70>)
 8005686:	f7ff ffd9 	bl	800563c <serialOut>
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000a54 	.word	0x20000a54
 8005698:	08018c18 	.word	0x08018c18
 800569c:	20000a60 	.word	0x20000a60
 80056a0:	20000444 	.word	0x20000444
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	08018c20 	.word	0x08018c20
 80056ac:	20000b5c 	.word	0x20000b5c

080056b0 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	@ 0x28
 80056b4:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	2201      	movs	r2, #1
 80056d0:	4619      	mov	r1, r3
 80056d2:	480e      	ldr	r0, [pc, #56]	@ (800570c <getTimeBCD+0x5c>)
 80056d4:	f00b fe78 	bl	80113c8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2201      	movs	r2, #1
 80056dc:	4619      	mov	r1, r3
 80056de:	480b      	ldr	r0, [pc, #44]	@ (800570c <getTimeBCD+0x5c>)
 80056e0:	f00b ff7c 	bl	80115dc <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056e4:	7abb      	ldrb	r3, [r7, #10]
 80056e6:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056e8:	7a7b      	ldrb	r3, [r7, #9]
 80056ea:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056ec:	7a3b      	ldrb	r3, [r7, #8]
 80056ee:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056f0:	7f7a      	ldrb	r2, [r7, #29]
 80056f2:	7fb9      	ldrb	r1, [r7, #30]
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	460b      	mov	r3, r1
 80056fa:	4905      	ldr	r1, [pc, #20]	@ (8005710 <getTimeBCD+0x60>)
 80056fc:	4805      	ldr	r0, [pc, #20]	@ (8005714 <getTimeBCD+0x64>)
 80056fe:	f00f fce5 	bl	80150cc <siprintf>
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200004e4 	.word	0x200004e4
 8005710:	08018c44 	.word	0x08018c44
 8005714:	20000a54 	.word	0x20000a54

08005718 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b092      	sub	sp, #72	@ 0x48
 800571c:	af00      	add	r7, sp, #0
 800571e:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005722:	463b      	mov	r3, r7
 8005724:	4618      	mov	r0, r3
 8005726:	f00f fd41 	bl	80151ac <localtime>
 800572a:	4603      	mov	r3, r0
 800572c:	f107 040c 	add.w	r4, r7, #12
 8005730:	461d      	mov	r5, r3
 8005732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005756:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800575a:	2200      	movs	r2, #0
 800575c:	4619      	mov	r1, r3
 800575e:	4826      	ldr	r0, [pc, #152]	@ (80057f8 <writeRTC+0xe0>)
 8005760:	f00b fd6e 	bl	8011240 <HAL_RTC_SetTime>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <writeRTC+0xe4>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <writeRTC+0x6c>
 8005776:	4922      	ldr	r1, [pc, #136]	@ (8005800 <writeRTC+0xe8>)
 8005778:	4822      	ldr	r0, [pc, #136]	@ (8005804 <writeRTC+0xec>)
 800577a:	f00f fca7 	bl	80150cc <siprintf>
 800577e:	4821      	ldr	r0, [pc, #132]	@ (8005804 <writeRTC+0xec>)
 8005780:	f7ff ff5c 	bl	800563c <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <writeRTC+0x76>
 800578a:	2307      	movs	r3, #7
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	3301      	adds	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3b64      	subs	r3, #100	@ 0x64
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80057b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	480e      	ldr	r0, [pc, #56]	@ (80057f8 <writeRTC+0xe0>)
 80057c0:	f00b fe5e 	bl	8011480 <HAL_RTC_SetDate>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80057ca:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <writeRTC+0xe4>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <writeRTC+0xcc>
 80057d6:	490c      	ldr	r1, [pc, #48]	@ (8005808 <writeRTC+0xf0>)
 80057d8:	480a      	ldr	r0, [pc, #40]	@ (8005804 <writeRTC+0xec>)
 80057da:	f00f fc77 	bl	80150cc <siprintf>
 80057de:	4809      	ldr	r0, [pc, #36]	@ (8005804 <writeRTC+0xec>)
 80057e0:	f7ff ff2c 	bl	800563c <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057e4:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80057e8:	2100      	movs	r1, #0
 80057ea:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <writeRTC+0xe0>)
 80057ec:	f00b ffcf 	bl	801178e <HAL_RTCEx_BKUPWrite>

}
 80057f0:	bf00      	nop
 80057f2:	3748      	adds	r7, #72	@ 0x48
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bdb0      	pop	{r4, r5, r7, pc}
 80057f8:	200004e4 	.word	0x200004e4
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	08018c54 	.word	0x08018c54
 8005804:	20000b5c 	.word	0x20000b5c
 8005808:	08018c7c 	.word	0x08018c7c

0800580c <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b094      	sub	sp, #80	@ 0x50
 8005810:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  struct tm tim = {0};
 800581e:	463b      	mov	r3, r7
 8005820:	2224      	movs	r2, #36	@ 0x24
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f00f fcb8 	bl	801519a <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800582a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	4619      	mov	r1, r3
 8005832:	4822      	ldr	r0, [pc, #136]	@ (80058bc <readRTC+0xb0>)
 8005834:	f00b fdc8 	bl	80113c8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8005838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	4619      	mov	r1, r3
 8005840:	481e      	ldr	r0, [pc, #120]	@ (80058bc <readRTC+0xb0>)
 8005842:	f00b fecb 	bl	80115dc <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 8005846:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800584a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t mm  = rtcTime.Minutes;
 800584e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005852:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t ss  = rtcTime.Seconds;
 8005856:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800585a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t d   = rtcDate.Date;
 800585e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005862:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t m   = rtcDate.Month;
 8005866:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  uint16_t y  = rtcDate.Year;
 800586e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005872:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 8005876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800587a:	3364      	adds	r3, #100	@ 0x64
 800587c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  tim.tm_year = yr;
 800587e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005880:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 8005882:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005886:	3b01      	subs	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 800588a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800588e:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 8005890:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005894:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 8005896:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800589a:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 800589c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80058a0:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80058a2:	463b      	mov	r3, r7
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00f fe63 	bl	8015570 <mktime>
 80058aa:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

  return currentTime;
 80058ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	3750      	adds	r7, #80	@ 0x50
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200004e4 	.word	0x200004e4

080058c0 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ca:	2301      	movs	r3, #1
 80058cc:	80fb      	strh	r3, [r7, #6]
 80058ce:	e010      	b.n	80058f2 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005904 <LoadAllEEPROM+0x44>)
 80058d6:	441a      	add	r2, r3
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fe73 	bl	80045c8 <EE_ReadVariable32bits>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	88bb      	ldrh	r3, [r7, #4]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	3301      	adds	r3, #1
 80058f0:	80fb      	strh	r3, [r7, #6]
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2b32      	cmp	r3, #50	@ 0x32
 80058f6:	d9eb      	bls.n	80058d0 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058f8:	88bb      	ldrh	r3, [r7, #4]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000984 	.word	0x20000984

08005908 <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005918:	f009 f918 	bl	800eb4c <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800591c:	4b1c      	ldr	r3, [pc, #112]	@ (8005990 <StoreEEPROM+0x88>)
 800591e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005922:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005924:	bf00      	nop
 8005926:	4b1a      	ldr	r3, [pc, #104]	@ (8005990 <StoreEEPROM+0x88>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800592e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005932:	d0f8      	beq.n	8005926 <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005934:	bf00      	nop
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <StoreEEPROM+0x8c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d0fb      	beq.n	8005936 <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fe64 	bl	8004612 <EE_WriteVariable32bits>
 800594a:	4603      	mov	r3, r0
 800594c:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 800594e:	463a      	mov	r2, r7
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fe37 	bl	80045c8 <EE_ReadVariable32bits>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	4313      	orrs	r3, r2
 8005962:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <StoreEEPROM+0x7a>
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <StoreEEPROM+0x8c>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f7fe fefa 	bl	800476c <EE_CleanUp_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4313      	orrs	r3, r2
 8005980:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005982:	f009 f905 	bl	800eb90 <HAL_FLASH_Lock>

  return eeStatus;
 8005986:	89fb      	ldrh	r3, [r7, #14]

    */



}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	58004000 	.word	0x58004000
 8005994:	20000980 	.word	0x20000980

08005998 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d82f      	bhi.n	8005a08 <switchLedOn+0x70>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <switchLedOn+0x18>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059f7 	.word	0x080059f7
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <switchLedOn+0x7c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <switchLedOn+0x80>)
 80059c6:	8811      	ldrh	r1, [r2, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	4618      	mov	r0, r3
 80059cc:	f009 fc1c 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 80059d0:	e01b      	b.n	8005a0a <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <switchLedOn+0x84>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <switchLedOn+0x88>)
 80059d8:	8811      	ldrh	r1, [r2, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f009 fc13 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 80059e2:	e012      	b.n	8005a0a <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <switchLedOn+0x8c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <switchLedOn+0x90>)
 80059ea:	8811      	ldrh	r1, [r2, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f009 fc0a 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 80059f4:	e009      	b.n	8005a0a <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <switchLedOn+0x94>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <switchLedOn+0x98>)
 80059fc:	8811      	ldrh	r1, [r2, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f009 fc01 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 8005a06:	e000      	b.n	8005a0a <switchLedOn+0x72>
      default: break;
 8005a08:	bf00      	nop
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000ce8 	.word	0x20000ce8
 8005a18:	20000ce6 	.word	0x20000ce6
 8005a1c:	20000cf0 	.word	0x20000cf0
 8005a20:	20000cec 	.word	0x20000cec
 8005a24:	20000cf8 	.word	0x20000cf8
 8005a28:	20000cf4 	.word	0x20000cf4
 8005a2c:	20000d00 	.word	0x20000d00
 8005a30:	20000cfc 	.word	0x20000cfc

08005a34 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d82f      	bhi.n	8005aa4 <switchLedOff+0x70>
 8005a44:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <switchLedOff+0x18>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6f 	.word	0x08005a6f
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a93 	.word	0x08005a93
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a5c:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <switchLedOff+0x7c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a14      	ldr	r2, [pc, #80]	@ (8005ab4 <switchLedOff+0x80>)
 8005a62:	8811      	ldrh	r1, [r2, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f009 fbce 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 8005a6c:	e01b      	b.n	8005aa6 <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <switchLedOff+0x84>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a12      	ldr	r2, [pc, #72]	@ (8005abc <switchLedOff+0x88>)
 8005a74:	8811      	ldrh	r1, [r2, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f009 fbc5 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 8005a7e:	e012      	b.n	8005aa6 <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <switchLedOff+0x8c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac4 <switchLedOff+0x90>)
 8005a86:	8811      	ldrh	r1, [r2, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f009 fbbc 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 8005a90:	e009      	b.n	8005aa6 <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <switchLedOff+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0d      	ldr	r2, [pc, #52]	@ (8005acc <switchLedOff+0x98>)
 8005a98:	8811      	ldrh	r1, [r2, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f009 fbb3 	bl	800f208 <HAL_GPIO_WritePin>
          break;
 8005aa2:	e000      	b.n	8005aa6 <switchLedOff+0x72>
      default: break;
 8005aa4:	bf00      	nop
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000ce8 	.word	0x20000ce8
 8005ab4:	20000ce6 	.word	0x20000ce6
 8005ab8:	20000cf0 	.word	0x20000cf0
 8005abc:	20000cec 	.word	0x20000cec
 8005ac0:	20000cf8 	.word	0x20000cf8
 8005ac4:	20000cf4 	.word	0x20000cf4
 8005ac8:	20000d00 	.word	0x20000d00
 8005acc:	20000cfc 	.word	0x20000cfc

08005ad0 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005ada:	4b39      	ldr	r3, [pc, #228]	@ (8005bc0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d068      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d103      	bne.n	8005af6 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005aee:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005af4:	e05f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005af6:	4b35      	ldr	r3, [pc, #212]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d11c      	bne.n	8005b3a <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005b00:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_GPIO_EXTI_Callback+0x100>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a31      	ldr	r2, [pc, #196]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0xfc>)
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f009 fb64 	bl	800f1d8 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b20:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005b22:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <HAL_GPIO_EXTI_Callback+0x104>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_EXTI_Callback+0x62>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7ff ff34 	bl	8005998 <switchLedOn>
}
 8005b30:	e041      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7ff ff7e 	bl	8005a34 <switchLedOff>
}
 8005b38:	e03d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005b3a:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <HAL_GPIO_EXTI_Callback+0x108>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d038      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d103      	bne.n	8005b56 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b4e:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <HAL_GPIO_EXTI_Callback+0x110>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
}
 8005b54:	e02f      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b56:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11c      	bne.n	8005b9a <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b60:	4b21      	ldr	r3, [pc, #132]	@ (8005be8 <HAL_GPIO_EXTI_Callback+0x118>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f009 fb34 	bl	800f1d8 <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b80:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b82:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_EXTI_Callback+0xc2>
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7ff ff04 	bl	8005998 <switchLedOn>
}
 8005b90:	e011      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7ff ff4e 	bl	8005a34 <switchLedOff>
}
 8005b98:	e00d      	b.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d008      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_GPIO_EXTI_Callback+0x124>)
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	429a      	cmp	r2, r3
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000c56 	.word	0x20000c56
 8005bc4:	20000c5e 	.word	0x20000c5e
 8005bc8:	20000d1f 	.word	0x20000d1f
 8005bcc:	20000c66 	.word	0x20000c66
 8005bd0:	20000c68 	.word	0x20000c68
 8005bd4:	20000d1e 	.word	0x20000d1e
 8005bd8:	20000c74 	.word	0x20000c74
 8005bdc:	20000c7e 	.word	0x20000c7e
 8005be0:	20000d1d 	.word	0x20000d1d
 8005be4:	20000c86 	.word	0x20000c86
 8005be8:	20000c88 	.word	0x20000c88
 8005bec:	20000d1c 	.word	0x20000d1c
 8005bf0:	20000cc4 	.word	0x20000cc4
 8005bf4:	20000cce 	.word	0x20000cce
 8005bf8:	20000cd6 	.word	0x20000cd6

08005bfc <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d140      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005c10:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005c18:	6013      	str	r3, [r2, #0]
    decSec++;
 8005c1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c24:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005c26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d117      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005c34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f009 faf6 	bl	800f238 <HAL_GPIO_TogglePin>
 8005c4c:	e007      	b.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c54:	8812      	ldrh	r2, [r2, #0]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f009 faed 	bl	800f238 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	0899      	lsrs	r1, r3, #2
 8005c7e:	460b      	mov	r3, r1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200005d0 	.word	0x200005d0
 8005ca0:	20000d20 	.word	0x20000d20
 8005ca4:	20000d24 	.word	0x20000d24
 8005ca8:	20000a50 	.word	0x20000a50
 8005cac:	20000cf8 	.word	0x20000cf8
 8005cb0:	20000cf4 	.word	0x20000cf4
 8005cb4:	20000d00 	.word	0x20000d00
 8005cb8:	20000cfc 	.word	0x20000cfc
 8005cbc:	20000d25 	.word	0x20000d25
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	20000d26 	.word	0x20000d26

08005cc8 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005cd2:	f008 ff3b 	bl	800eb4c <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005cd6:	492f      	ldr	r1, [pc, #188]	@ (8005d94 <eepromDefaults+0xcc>)
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fe fc9a 	bl	8004612 <EE_WriteVariable32bits>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <eepromDefaults+0x3e>
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <eepromDefaults+0xd0>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f7fe fd38 	bl	800476c <EE_CleanUp_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d06:	bf00      	nop
 8005d08:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1fb      	bne.n	8005d08 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005d10:	4922      	ldr	r1, [pc, #136]	@ (8005d9c <eepromDefaults+0xd4>)
 8005d12:	2002      	movs	r0, #2
 8005d14:	f7fe fc7d 	bl	8004612 <EE_WriteVariable32bits>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <eepromDefaults+0x78>
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f7fe fd1b 	bl	800476c <EE_CleanUp_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d40:	bf00      	nop
 8005d42:	4b15      	ldr	r3, [pc, #84]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1fb      	bne.n	8005d42 <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	f7fe fc60 	bl	8004612 <EE_WriteVariable32bits>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <eepromDefaults+0xb2>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f7fe fcfe 	bl	800476c <EE_CleanUp_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d7a:	bf00      	nop
 8005d7c:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <eepromDefaults+0xd0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1fb      	bne.n	8005d7c <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d84:	f008 ff04 	bl	800eb90 <HAL_FLASH_Lock>

  return eeStatus;
 8005d88:	88fb      	ldrh	r3, [r7, #6]

}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	50616c61 	.word	0x50616c61
 8005d98:	20000980 	.word	0x20000980
 8005d9c:	746f7621 	.word	0x746f7621

08005da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005daa:	f008 fc13 	bl	800e5d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dae:	f000 f8bb 	bl	8005f28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005db2:	f000 f925 	bl	8006000 <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005db6:	f000 fb67 	bl	8006488 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005dba:	f000 fa13 	bl	80061e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005dbe:	f000 fa4f 	bl	8006260 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005dc2:	f000 f987 	bl	80060d4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005dc6:	f000 fb37 	bl	8006438 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005dca:	f000 f9cf 	bl	800616c <MX_PKA_Init>
  MX_RTC_Init();
 8005dce:	f000 f9e1 	bl	8006194 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005dd2:	f000 f933 	bl	800603c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005dd6:	f000 fa81 	bl	80062dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2004      	movs	r0, #4
 8005de0:	f008 fd7d 	bl	800e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005de4:	2004      	movs	r0, #4
 8005de6:	f008 fd94 	bl	800e912 <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005dea:	f008 feaf 	bl	800eb4c <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005dee:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <main+0x164>)
 8005df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005df4:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005df6:	bf00      	nop
 8005df8:	4b42      	ldr	r3, [pc, #264]	@ (8005f04 <main+0x164>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e04:	d0f8      	beq.n	8005df8 <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005e06:	4b40      	ldr	r3, [pc, #256]	@ (8005f08 <main+0x168>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005e14:	2000      	movs	r0, #0
 8005e16:	f7fd fe4d 	bl	8003ab4 <EE_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <main+0xb8>
 8005e24:	f000 ffbe 	bl	8006da4 <Error_Handler>
 8005e28:	e016      	b.n	8005e58 <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005e2a:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <main+0x168>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005e32:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <main+0x168>)
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e3e:	4b32      	ldr	r3, [pc, #200]	@ (8005f08 <main+0x168>)
 8005e40:	2204      	movs	r2, #4
 8005e42:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7fd fe35 	bl	8003ab4 <EE_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <main+0xb8>
 8005e54:	f000 ffa6 	bl	8006da4 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e58:	f7ff fd32 	bl	80058c0 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <main+0x16c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	@ (8005f10 <main+0x170>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d104      	bne.n	8005e70 <main+0xd0>
 8005e66:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <main+0x16c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f14 <main+0x174>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d005      	beq.n	8005e7c <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e70:	f7ff ff2a 	bl	8005cc8 <eepromDefaults>
 8005e74:	4603      	mov	r3, r0
 8005e76:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e78:	f7ff fd22 	bl	80058c0 <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e7c:	f008 fe88 	bl	800eb90 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7ff fd89 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e86:	20fa      	movs	r0, #250	@ 0xfa
 8005e88:	f008 fc2a 	bl	800e6e0 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7ff fdd1 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f7ff fd80 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005e98:	20fa      	movs	r0, #250	@ 0xfa
 8005e9a:	f008 fc21 	bl	800e6e0 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f7ff fdc8 	bl	8005a34 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f7ff fd77 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005eaa:	20fa      	movs	r0, #250	@ 0xfa
 8005eac:	f008 fc18 	bl	800e6e0 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005eb0:	2002      	movs	r0, #2
 8005eb2:	f7ff fdbf 	bl	8005a34 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	f7ff fd6e 	bl	8005998 <switchLedOn>
  HAL_Delay(250);
 8005ebc:	20fa      	movs	r0, #250	@ 0xfa
 8005ebe:	f008 fc0f 	bl	800e6e0 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005ec2:	2003      	movs	r0, #3
 8005ec4:	f7ff fdb6 	bl	8005a34 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005ec8:	4813      	ldr	r0, [pc, #76]	@ (8005f18 <main+0x178>)
 8005eca:	f00c f8f7 	bl	80120bc <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005ece:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <main+0x17c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <main+0x180>)
 8005ed4:	8811      	ldrh	r1, [r2, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f009 f995 	bl	800f208 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fb f8a0 	bl	8001024 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb f89d 	bl	8001024 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <main+0x184>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7fb f896 	bl	8001024 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ef8:	f001 f880 	bl	8006ffc <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005efc:	f001 fa4a 	bl	8007394 <PCU_Tasks>
 8005f00:	e7fc      	b.n	8005efc <main+0x15c>
 8005f02:	bf00      	nop
 8005f04:	58004000 	.word	0x58004000
 8005f08:	58000400 	.word	0x58000400
 8005f0c:	20000984 	.word	0x20000984
 8005f10:	50616c61 	.word	0x50616c61
 8005f14:	746f7621 	.word	0x746f7621
 8005f18:	200005d0 	.word	0x200005d0
 8005f1c:	20000d10 	.word	0x20000d10
 8005f20:	20000d0c 	.word	0x20000d0c
 8005f24:	20000a50 	.word	0x20000a50

08005f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b09a      	sub	sp, #104	@ 0x68
 8005f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f2e:	f107 0320 	add.w	r3, r7, #32
 8005f32:	2248      	movs	r2, #72	@ 0x48
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f00f f92f 	bl	801519a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	615a      	str	r2, [r3, #20]
 8005f4c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f4e:	f009 fafb 	bl	800f548 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f52:	2010      	movs	r0, #16
 8005f54:	f7ff fb42 	bl	80055dc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f58:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <SystemClock_Config+0xd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f74:	2307      	movs	r3, #7
 8005f76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f88:	2340      	movs	r3, #64	@ 0x40
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f90:	2303      	movs	r3, #3
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f94:	2310      	movs	r3, #16
 8005f96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005fa2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005fa6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f009 fe5c 	bl	800fc70 <HAL_RCC_OscConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005fbe:	f000 fef1 	bl	8006da4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005fc2:	236f      	movs	r3, #111	@ 0x6f
 8005fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	2103      	movs	r1, #3
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00a f9b8 	bl	8010358 <HAL_RCC_ClockConfig>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fee:	f000 fed9 	bl	8006da4 <Error_Handler>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3768      	adds	r7, #104	@ 0x68
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	58000400 	.word	0x58000400

08006000 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b094      	sub	sp, #80	@ 0x50
 8006004:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006006:	463b      	mov	r3, r7
 8006008:	2250      	movs	r2, #80	@ 0x50
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f00f f8c4 	bl	801519a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8006012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006016:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006018:	2302      	movs	r3, #2
 800601a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800601c:	2310      	movs	r3, #16
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006020:	463b      	mov	r3, r7
 8006022:	4618      	mov	r0, r3
 8006024:	f00a fdd5 	bl	8010bd2 <HAL_RCCEx_PeriphCLKConfig>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800602e:	f000 feb9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006032:	bf00      	nop
 8006034:	3750      	adds	r7, #80	@ 0x50
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006040:	4b22      	ldr	r3, [pc, #136]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <MX_LPUART1_UART_Init+0x94>)
 8006044:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800604c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800604e:	4b1f      	ldr	r3, [pc, #124]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006054:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006056:	2200      	movs	r2, #0
 8006058:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800605a:	4b1c      	ldr	r3, [pc, #112]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006060:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006062:	220c      	movs	r2, #12
 8006064:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006066:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800606e:	2200      	movs	r2, #0
 8006070:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006074:	2200      	movs	r2, #0
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006078:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006080:	2200      	movs	r2, #0
 8006082:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006084:	4811      	ldr	r0, [pc, #68]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006086:	f00d f8c9 	bl	801321c <HAL_UART_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006090:	f000 fe88 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006094:	2100      	movs	r1, #0
 8006096:	480d      	ldr	r0, [pc, #52]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 8006098:	f00e f9bb 	bl	8014412 <HAL_UARTEx_SetTxFifoThreshold>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80060a2:	f000 fe7f 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060a6:	2100      	movs	r1, #0
 80060a8:	4808      	ldr	r0, [pc, #32]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060aa:	f00e f9f0 	bl	801448e <HAL_UARTEx_SetRxFifoThreshold>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80060b4:	f000 fe76 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80060b8:	4804      	ldr	r0, [pc, #16]	@ (80060cc <MX_LPUART1_UART_Init+0x90>)
 80060ba:	f00e f971 	bl	80143a0 <HAL_UARTEx_DisableFifoMode>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80060c4:	f000 fe6e 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200003b0 	.word	0x200003b0
 80060d0:	40008000 	.word	0x40008000

080060d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060d8:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060da:	4a23      	ldr	r2, [pc, #140]	@ (8006168 <MX_USART1_UART_Init+0x94>)
 80060dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060de:	4b21      	ldr	r3, [pc, #132]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 80060fa:	220c      	movs	r2, #12
 80060fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060fe:	4b19      	ldr	r3, [pc, #100]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006100:	2200      	movs	r2, #0
 8006102:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006104:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800610a:	4b16      	ldr	r3, [pc, #88]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800610c:	2200      	movs	r2, #0
 800610e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006110:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006112:	2200      	movs	r2, #0
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006118:	2200      	movs	r2, #0
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800611c:	4811      	ldr	r0, [pc, #68]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 800611e:	f00d f87d 	bl	801321c <HAL_UART_Init>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006128:	f000 fe3c 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800612c:	2100      	movs	r1, #0
 800612e:	480d      	ldr	r0, [pc, #52]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006130:	f00e f96f 	bl	8014412 <HAL_UARTEx_SetTxFifoThreshold>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800613a:	f000 fe33 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800613e:	2100      	movs	r1, #0
 8006140:	4808      	ldr	r0, [pc, #32]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006142:	f00e f9a4 	bl	801448e <HAL_UARTEx_SetRxFifoThreshold>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800614c:	f000 fe2a 	bl	8006da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006150:	4804      	ldr	r0, [pc, #16]	@ (8006164 <MX_USART1_UART_Init+0x90>)
 8006152:	f00e f925 	bl	80143a0 <HAL_UARTEx_DisableFifoMode>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800615c:	f000 fe22 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000444 	.word	0x20000444
 8006168:	40013800 	.word	0x40013800

0800616c <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8006170:	4b06      	ldr	r3, [pc, #24]	@ (800618c <MX_PKA_Init+0x20>)
 8006172:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <MX_PKA_Init+0x24>)
 8006174:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8006176:	4805      	ldr	r0, [pc, #20]	@ (800618c <MX_PKA_Init+0x20>)
 8006178:	f009 f9b7 	bl	800f4ea <HAL_PKA_Init>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8006182:	f000 fe0f 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200004d8 	.word	0x200004d8
 8006190:	58002000 	.word	0x58002000

08006194 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <MX_RTC_Init+0x48>)
 800619a:	4a11      	ldr	r2, [pc, #68]	@ (80061e0 <MX_RTC_Init+0x4c>)
 800619c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <MX_RTC_Init+0x48>)
 80061a6:	227f      	movs	r2, #127	@ 0x7f
 80061a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061aa:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ac:	22ff      	movs	r2, #255	@ 0xff
 80061ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <MX_RTC_Init+0x48>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061bc:	4b07      	ldr	r3, [pc, #28]	@ (80061dc <MX_RTC_Init+0x48>)
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <MX_RTC_Init+0x48>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061c8:	4804      	ldr	r0, [pc, #16]	@ (80061dc <MX_RTC_Init+0x48>)
 80061ca:	f00a ff89 	bl	80110e0 <HAL_RTC_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061d4:	f000 fde6 	bl	8006da4 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 80061d8:	bf00      	nop
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	200004e4 	.word	0x200004e4
 80061e0:	40002800 	.word	0x40002800

080061e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061ea:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <MX_SPI1_Init+0x78>)
 80061ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80061f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061fc:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <MX_SPI1_Init+0x74>)
 80061fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006202:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <MX_SPI1_Init+0x74>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006210:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006216:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_SPI1_Init+0x74>)
 800621a:	2208      	movs	r2, #8
 800621c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006220:	2200      	movs	r2, #0
 8006222:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <MX_SPI1_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006232:	2207      	movs	r2, #7
 8006234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_SPI1_Init+0x74>)
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	@ (8006258 <MX_SPI1_Init+0x74>)
 8006244:	f00b fabb 	bl	80117be <HAL_SPI_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800624e:	f000 fda9 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000508 	.word	0x20000508
 800625c:	40013000 	.word	0x40013000

08006260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006266:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <MX_SPI2_Init+0x78>)
 8006268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800626a:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800626c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006272:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006278:	4b16      	ldr	r3, [pc, #88]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800627a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800627e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800628c:	4b11      	ldr	r3, [pc, #68]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800628e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006292:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <MX_SPI2_Init+0x74>)
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800629a:	4b0e      	ldr	r3, [pc, #56]	@ (80062d4 <MX_SPI2_Init+0x74>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ae:	2207      	movs	r2, #7
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062ba:	2208      	movs	r2, #8
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062be:	4805      	ldr	r0, [pc, #20]	@ (80062d4 <MX_SPI2_Init+0x74>)
 80062c0:	f00b fa7d 	bl	80117be <HAL_SPI_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80062ca:	f000 fd6b 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000056c 	.word	0x2000056c
 80062d8:	40003800 	.word	0x40003800

080062dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	@ 0x70
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]
 800630c:	615a      	str	r2, [r3, #20]
 800630e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	2234      	movs	r2, #52	@ 0x34
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f00e ff3f 	bl	801519a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800631c:	4b44      	ldr	r3, [pc, #272]	@ (8006430 <MX_TIM1_Init+0x154>)
 800631e:	4a45      	ldr	r2, [pc, #276]	@ (8006434 <MX_TIM1_Init+0x158>)
 8006320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006324:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006328:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632a:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <MX_TIM1_Init+0x154>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8006330:	4b3f      	ldr	r3, [pc, #252]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006332:	2263      	movs	r2, #99	@ 0x63
 8006334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006336:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800633c:	4b3c      	ldr	r3, [pc, #240]	@ (8006430 <MX_TIM1_Init+0x154>)
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006342:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006348:	4839      	ldr	r0, [pc, #228]	@ (8006430 <MX_TIM1_Init+0x154>)
 800634a:	f00b fe53 	bl	8011ff4 <HAL_TIM_Base_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006354:	f000 fd26 	bl	8006da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800635c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800635e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006362:	4619      	mov	r1, r3
 8006364:	4832      	ldr	r0, [pc, #200]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006366:	f00c f921 	bl	80125ac <HAL_TIM_ConfigClockSource>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006370:	f000 fd18 	bl	8006da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006374:	482e      	ldr	r0, [pc, #184]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006376:	f00b feef 	bl	8012158 <HAL_TIM_OC_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006380:	f000 fd10 	bl	8006da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006384:	2300      	movs	r3, #0
 8006386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006388:	2300      	movs	r3, #0
 800638a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006394:	4619      	mov	r1, r3
 8006396:	4826      	ldr	r0, [pc, #152]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006398:	f00c fe08 	bl	8012fac <HAL_TIMEx_MasterConfigSynchronization>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80063a2:	f000 fcff 	bl	8006da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063ae:	2300      	movs	r3, #0
 80063b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063b2:	2300      	movs	r3, #0
 80063b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063c6:	2200      	movs	r2, #0
 80063c8:	4619      	mov	r1, r3
 80063ca:	4819      	ldr	r0, [pc, #100]	@ (8006430 <MX_TIM1_Init+0x154>)
 80063cc:	f00c f874 	bl	80124b8 <HAL_TIM_OC_ConfigChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80063d6:	f000 fce5 	bl	8006da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063f8:	2300      	movs	r3, #0
 80063fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800640a:	2300      	movs	r3, #0
 800640c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4806      	ldr	r0, [pc, #24]	@ (8006430 <MX_TIM1_Init+0x154>)
 8006418:	f00c fe28 	bl	801306c <HAL_TIMEx_ConfigBreakDeadTime>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8006422:	f000 fcbf 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006426:	bf00      	nop
 8006428:	3770      	adds	r7, #112	@ 0x70
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	200005d0 	.word	0x200005d0
 8006434:	40012c00 	.word	0x40012c00

08006438 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800643e:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <MX_USB_PCD_Init+0x4c>)
 8006440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006444:	2208      	movs	r2, #8
 8006446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800644a:	2202      	movs	r2, #2
 800644c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006450:	2202      	movs	r2, #2
 8006452:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006456:	2200      	movs	r2, #0
 8006458:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800645c:	2200      	movs	r2, #0
 800645e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 8006468:	2200      	movs	r2, #0
 800646a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800646c:	4804      	ldr	r0, [pc, #16]	@ (8006480 <MX_USB_PCD_Init+0x48>)
 800646e:	f008 ff39 	bl	800f2e4 <HAL_PCD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006478:	f000 fc94 	bl	8006da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	2000068c 	.word	0x2000068c
 8006484:	40006800 	.word	0x40006800

08006488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800649c:	4b9d      	ldr	r3, [pc, #628]	@ (8006714 <MX_GPIO_Init+0x28c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 81c5 	bne.w	8006830 <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 80064a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006718 <MX_GPIO_Init+0x290>)
 80064a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ac:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 80064ae:	4b9b      	ldr	r3, [pc, #620]	@ (800671c <MX_GPIO_Init+0x294>)
 80064b0:	4a9b      	ldr	r2, [pc, #620]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064b2:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80064b4:	4b9b      	ldr	r3, [pc, #620]	@ (8006724 <MX_GPIO_Init+0x29c>)
 80064b6:	2217      	movs	r2, #23
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 80064ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 80064bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c0:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 80064c2:	4b9a      	ldr	r3, [pc, #616]	@ (800672c <MX_GPIO_Init+0x2a4>)
 80064c4:	4a96      	ldr	r2, [pc, #600]	@ (8006720 <MX_GPIO_Init+0x298>)
 80064c6:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80064c8:	4b99      	ldr	r3, [pc, #612]	@ (8006730 <MX_GPIO_Init+0x2a8>)
 80064ca:	2217      	movs	r2, #23
 80064cc:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80064ce:	4b99      	ldr	r3, [pc, #612]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80064d4:	4b98      	ldr	r3, [pc, #608]	@ (8006738 <MX_GPIO_Init+0x2b0>)
 80064d6:	4a99      	ldr	r2, [pc, #612]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064d8:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80064da:	4b99      	ldr	r3, [pc, #612]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80064dc:	2208      	movs	r2, #8
 80064de:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064e0:	4b98      	ldr	r3, [pc, #608]	@ (8006744 <MX_GPIO_Init+0x2bc>)
 80064e2:	4a96      	ldr	r2, [pc, #600]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064e4:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064e6:	4b98      	ldr	r3, [pc, #608]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80064e8:	2220      	movs	r2, #32
 80064ea:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064ec:	4b97      	ldr	r3, [pc, #604]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80064ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80064f2:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064f4:	4b96      	ldr	r3, [pc, #600]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 80064f6:	2210      	movs	r2, #16
 80064f8:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064fa:	4b96      	ldr	r3, [pc, #600]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80064fc:	4a8f      	ldr	r2, [pc, #572]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80064fe:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006500:	4b95      	ldr	r3, [pc, #596]	@ (8006758 <MX_GPIO_Init+0x2d0>)
 8006502:	220a      	movs	r2, #10
 8006504:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 8006506:	4b95      	ldr	r3, [pc, #596]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006508:	2220      	movs	r2, #32
 800650a:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 800650c:	4b94      	ldr	r3, [pc, #592]	@ (8006760 <MX_GPIO_Init+0x2d8>)
 800650e:	4a8b      	ldr	r2, [pc, #556]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006510:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 8006512:	4b94      	ldr	r3, [pc, #592]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 8006514:	2201      	movs	r2, #1
 8006516:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006518:	4b93      	ldr	r3, [pc, #588]	@ (8006768 <MX_GPIO_Init+0x2e0>)
 800651a:	4a81      	ldr	r2, [pc, #516]	@ (8006720 <MX_GPIO_Init+0x298>)
 800651c:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 800651e:	4b93      	ldr	r3, [pc, #588]	@ (800676c <MX_GPIO_Init+0x2e4>)
 8006520:	2202      	movs	r2, #2
 8006522:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006524:	4b92      	ldr	r3, [pc, #584]	@ (8006770 <MX_GPIO_Init+0x2e8>)
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006528:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 800652a:	4b92      	ldr	r3, [pc, #584]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800652c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006530:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 8006532:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <MX_GPIO_Init+0x2f0>)
 8006534:	4a7a      	ldr	r2, [pc, #488]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006536:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006538:	4b90      	ldr	r3, [pc, #576]	@ (800677c <MX_GPIO_Init+0x2f4>)
 800653a:	2228      	movs	r2, #40	@ 0x28
 800653c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 800653e:	4b90      	ldr	r3, [pc, #576]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006544:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 8006546:	4b8f      	ldr	r3, [pc, #572]	@ (8006784 <MX_GPIO_Init+0x2fc>)
 8006548:	4a75      	ldr	r2, [pc, #468]	@ (8006720 <MX_GPIO_Init+0x298>)
 800654a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800654c:	4b8e      	ldr	r3, [pc, #568]	@ (8006788 <MX_GPIO_Init+0x300>)
 800654e:	2228      	movs	r2, #40	@ 0x28
 8006550:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 8006552:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <MX_GPIO_Init+0x304>)
 8006554:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006558:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 800655a:	4b8d      	ldr	r3, [pc, #564]	@ (8006790 <MX_GPIO_Init+0x308>)
 800655c:	4a70      	ldr	r2, [pc, #448]	@ (8006720 <MX_GPIO_Init+0x298>)
 800655e:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006560:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <MX_GPIO_Init+0x30c>)
 8006562:	2228      	movs	r2, #40	@ 0x28
 8006564:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 8006566:	4b8c      	ldr	r3, [pc, #560]	@ (8006798 <MX_GPIO_Init+0x310>)
 8006568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800656c:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 800656e:	4b8b      	ldr	r3, [pc, #556]	@ (800679c <MX_GPIO_Init+0x314>)
 8006570:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006574:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006576:	4b8a      	ldr	r3, [pc, #552]	@ (80067a0 <MX_GPIO_Init+0x318>)
 8006578:	2228      	movs	r2, #40	@ 0x28
 800657a:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 800657c:	4b89      	ldr	r3, [pc, #548]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 800657e:	2201      	movs	r2, #1
 8006580:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 8006582:	4b89      	ldr	r3, [pc, #548]	@ (80067a8 <MX_GPIO_Init+0x320>)
 8006584:	4a89      	ldr	r2, [pc, #548]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006586:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006588:	4b89      	ldr	r3, [pc, #548]	@ (80067b0 <MX_GPIO_Init+0x328>)
 800658a:	2206      	movs	r2, #6
 800658c:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 800658e:	4b89      	ldr	r3, [pc, #548]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006590:	2202      	movs	r2, #2
 8006592:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006594:	4b88      	ldr	r3, [pc, #544]	@ (80067b8 <MX_GPIO_Init+0x330>)
 8006596:	4a85      	ldr	r2, [pc, #532]	@ (80067ac <MX_GPIO_Init+0x324>)
 8006598:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <MX_GPIO_Init+0x334>)
 800659c:	2207      	movs	r2, #7
 800659e:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 80065a0:	4b87      	ldr	r3, [pc, #540]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80065a2:	2220      	movs	r2, #32
 80065a4:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 80065a6:	4b87      	ldr	r3, [pc, #540]	@ (80067c4 <MX_GPIO_Init+0x33c>)
 80065a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006720 <MX_GPIO_Init+0x298>)
 80065aa:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ac:	2004      	movs	r0, #4
 80065ae:	f7ff f82b 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b2:	2002      	movs	r0, #2
 80065b4:	f7ff f828 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b8:	2001      	movs	r0, #1
 80065ba:	f7ff f825 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065be:	2008      	movs	r0, #8
 80065c0:	f7ff f822 	bl	8005608 <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80065c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	4b5d      	ldr	r3, [pc, #372]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	4b62      	ldr	r3, [pc, #392]	@ (800675c <MX_GPIO_Init+0x2d4>)
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	4857      	ldr	r0, [pc, #348]	@ (800673c <MX_GPIO_Init+0x2b4>)
 80065de:	f008 fe13 	bl	800f208 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065e2:	4b5a      	ldr	r3, [pc, #360]	@ (800674c <MX_GPIO_Init+0x2c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a58      	ldr	r2, [pc, #352]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 80065e8:	8811      	ldrh	r1, [r2, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f008 fe0b 	bl	800f208 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	4b5d      	ldr	r3, [pc, #372]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	4b70      	ldr	r3, [pc, #448]	@ (80067c0 <MX_GPIO_Init+0x338>)
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	2200      	movs	r2, #0
 8006608:	4619      	mov	r1, r3
 800660a:	4845      	ldr	r0, [pc, #276]	@ (8006720 <MX_GPIO_Init+0x298>)
 800660c:	f008 fdfc 	bl	800f208 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 8006610:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <MX_GPIO_Init+0x290>)
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	4b44      	ldr	r3, [pc, #272]	@ (8006728 <MX_GPIO_Init+0x2a0>)
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	4b55      	ldr	r3, [pc, #340]	@ (8006774 <MX_GPIO_Init+0x2ec>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	b29a      	uxth	r2, r3
 8006624:	4b56      	ldr	r3, [pc, #344]	@ (8006780 <MX_GPIO_Init+0x2f8>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	4b57      	ldr	r3, [pc, #348]	@ (800678c <MX_GPIO_Init+0x304>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 8006634:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006636:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800663a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4836      	ldr	r0, [pc, #216]	@ (8006720 <MX_GPIO_Init+0x298>)
 8006646:	f008 fc57 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800664a:	4b3a      	ldr	r3, [pc, #232]	@ (8006734 <MX_GPIO_Init+0x2ac>)
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	4b3c      	ldr	r3, [pc, #240]	@ (8006740 <MX_GPIO_Init+0x2b8>)
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	b29a      	uxth	r2, r3
 8006656:	4b41      	ldr	r3, [pc, #260]	@ (800675c <MX_GPIO_Init+0x2d4>)
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006660:	2301      	movs	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4832      	ldr	r0, [pc, #200]	@ (800673c <MX_GPIO_Init+0x2b4>)
 8006672:	f008 fc41 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006676:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <MX_GPIO_Init+0x2c0>)
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667c:	2301      	movs	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8006688:	4b30      	ldr	r3, [pc, #192]	@ (800674c <MX_GPIO_Init+0x2c4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	1d3a      	adds	r2, r7, #4
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f008 fc31 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 8006696:	4b2e      	ldr	r3, [pc, #184]	@ (8006750 <MX_GPIO_Init+0x2c8>)
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800669c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80066a0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066a2:	2301      	movs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80066a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <MX_GPIO_Init+0x2cc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	1d3a      	adds	r2, r7, #4
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f008 fc22 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80066b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <MX_GPIO_Init+0x2dc>)
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	4b2c      	ldr	r3, [pc, #176]	@ (800676c <MX_GPIO_Init+0x2e4>)
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	4b3f      	ldr	r3, [pc, #252]	@ (80067c0 <MX_GPIO_Init+0x338>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ca:	2301      	movs	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4811      	ldr	r0, [pc, #68]	@ (8006720 <MX_GPIO_Init+0x298>)
 80066dc:	f008 fc0c 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <MX_GPIO_Init+0x310>)
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <MX_GPIO_Init+0x314>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	1d3a      	adds	r2, r7, #4
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f008 fbfd 	bl	800eef8 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <MX_GPIO_Init+0x31c>)
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <MX_GPIO_Init+0x32c>)
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800670c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006710:	e05a      	b.n	80067c8 <MX_GPIO_Init+0x340>
 8006712:	bf00      	nop
 8006714:	20000a50 	.word	0x20000a50
 8006718:	20000c5e 	.word	0x20000c5e
 800671c:	20000c60 	.word	0x20000c60
 8006720:	48000400 	.word	0x48000400
 8006724:	20000c64 	.word	0x20000c64
 8006728:	20000c66 	.word	0x20000c66
 800672c:	20000c68 	.word	0x20000c68
 8006730:	20000c6c 	.word	0x20000c6c
 8006734:	20000cb4 	.word	0x20000cb4
 8006738:	20000cb8 	.word	0x20000cb8
 800673c:	48000800 	.word	0x48000800
 8006740:	20000cbc 	.word	0x20000cbc
 8006744:	20000cc0 	.word	0x20000cc0
 8006748:	20000c6e 	.word	0x20000c6e
 800674c:	20000c70 	.word	0x20000c70
 8006750:	20000cc4 	.word	0x20000cc4
 8006754:	20000cc8 	.word	0x20000cc8
 8006758:	20000ccc 	.word	0x20000ccc
 800675c:	20000c8e 	.word	0x20000c8e
 8006760:	20000c90 	.word	0x20000c90
 8006764:	20000ce6 	.word	0x20000ce6
 8006768:	20000ce8 	.word	0x20000ce8
 800676c:	20000cec 	.word	0x20000cec
 8006770:	20000cf0 	.word	0x20000cf0
 8006774:	20000c74 	.word	0x20000c74
 8006778:	20000c78 	.word	0x20000c78
 800677c:	20000c7c 	.word	0x20000c7c
 8006780:	20000c7e 	.word	0x20000c7e
 8006784:	20000c80 	.word	0x20000c80
 8006788:	20000c84 	.word	0x20000c84
 800678c:	20000c86 	.word	0x20000c86
 8006790:	20000c88 	.word	0x20000c88
 8006794:	20000c8c 	.word	0x20000c8c
 8006798:	20000c56 	.word	0x20000c56
 800679c:	20000c58 	.word	0x20000c58
 80067a0:	20000c5c 	.word	0x20000c5c
 80067a4:	20000cce 	.word	0x20000cce
 80067a8:	20000cd0 	.word	0x20000cd0
 80067ac:	48000c00 	.word	0x48000c00
 80067b0:	20000cd4 	.word	0x20000cd4
 80067b4:	20000cd6 	.word	0x20000cd6
 80067b8:	20000cd8 	.word	0x20000cd8
 80067bc:	20000cdc 	.word	0x20000cdc
 80067c0:	20000cf4 	.word	0x20000cf4
 80067c4:	20000cf8 	.word	0x20000cf8
 80067c8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4816      	ldr	r0, [pc, #88]	@ (800682c <MX_GPIO_Init+0x3a4>)
 80067d4:	f008 fb90 	bl	800eef8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	2006      	movs	r0, #6
 80067de:	f008 f87e 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067e2:	2006      	movs	r0, #6
 80067e4:	f008 f895 	bl	800e912 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	2007      	movs	r0, #7
 80067ee:	f008 f876 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067f2:	2007      	movs	r0, #7
 80067f4:	f008 f88d 	bl	800e912 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	2100      	movs	r1, #0
 80067fc:	200a      	movs	r0, #10
 80067fe:	f008 f86e 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006802:	200a      	movs	r0, #10
 8006804:	f008 f885 	bl	800e912 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	2017      	movs	r0, #23
 800680e:	f008 f866 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006812:	2017      	movs	r0, #23
 8006814:	f008 f87d 	bl	800e912 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	2028      	movs	r0, #40	@ 0x28
 800681e:	f008 f85e 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006822:	2028      	movs	r0, #40	@ 0x28
 8006824:	f008 f875 	bl	800e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 8006828:	e290      	b.n	8006d4c <MX_GPIO_Init+0x8c4>
 800682a:	bf00      	nop
 800682c:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006830:	4b9d      	ldr	r3, [pc, #628]	@ (8006aa8 <MX_GPIO_Init+0x620>)
 8006832:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 8006838:	4b9c      	ldr	r3, [pc, #624]	@ (8006aac <MX_GPIO_Init+0x624>)
 800683a:	4a9d      	ldr	r2, [pc, #628]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800683c:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800683e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ab4 <MX_GPIO_Init+0x62c>)
 8006840:	2228      	movs	r2, #40	@ 0x28
 8006842:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006844:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006846:	2240      	movs	r2, #64	@ 0x40
 8006848:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800684a:	4b9c      	ldr	r3, [pc, #624]	@ (8006abc <MX_GPIO_Init+0x634>)
 800684c:	4a9c      	ldr	r2, [pc, #624]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800684e:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006850:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac4 <MX_GPIO_Init+0x63c>)
 8006852:	2217      	movs	r2, #23
 8006854:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006856:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006858:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800685c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 800685e:	4b9b      	ldr	r3, [pc, #620]	@ (8006acc <MX_GPIO_Init+0x644>)
 8006860:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006864:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006866:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad0 <MX_GPIO_Init+0x648>)
 8006868:	2228      	movs	r2, #40	@ 0x28
 800686a:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800686c:	4b99      	ldr	r3, [pc, #612]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 800686e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006872:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006874:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <MX_GPIO_Init+0x650>)
 8006876:	4a8e      	ldr	r2, [pc, #568]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006878:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800687a:	4b98      	ldr	r3, [pc, #608]	@ (8006adc <MX_GPIO_Init+0x654>)
 800687c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006880:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006882:	4b97      	ldr	r3, [pc, #604]	@ (8006ae0 <MX_GPIO_Init+0x658>)
 8006884:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006886:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006888:	4b96      	ldr	r3, [pc, #600]	@ (8006ae4 <MX_GPIO_Init+0x65c>)
 800688a:	2228      	movs	r2, #40	@ 0x28
 800688c:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 800688e:	4b96      	ldr	r3, [pc, #600]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006894:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 8006896:	4b95      	ldr	r3, [pc, #596]	@ (8006aec <MX_GPIO_Init+0x664>)
 8006898:	4a89      	ldr	r2, [pc, #548]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800689a:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 800689c:	4b94      	ldr	r3, [pc, #592]	@ (8006af0 <MX_GPIO_Init+0x668>)
 800689e:	2228      	movs	r2, #40	@ 0x28
 80068a0:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80068a2:	4b94      	ldr	r3, [pc, #592]	@ (8006af4 <MX_GPIO_Init+0x66c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80068a8:	4b93      	ldr	r3, [pc, #588]	@ (8006af8 <MX_GPIO_Init+0x670>)
 80068aa:	4a94      	ldr	r2, [pc, #592]	@ (8006afc <MX_GPIO_Init+0x674>)
 80068ac:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80068ae:	4b94      	ldr	r3, [pc, #592]	@ (8006b00 <MX_GPIO_Init+0x678>)
 80068b0:	2206      	movs	r2, #6
 80068b2:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80068b4:	4b93      	ldr	r3, [pc, #588]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 80068b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068ba:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80068bc:	4b92      	ldr	r3, [pc, #584]	@ (8006b08 <MX_GPIO_Init+0x680>)
 80068be:	4a80      	ldr	r2, [pc, #512]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80068c0:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <MX_GPIO_Init+0x684>)
 80068c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068c8:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80068ca:	4b91      	ldr	r3, [pc, #580]	@ (8006b10 <MX_GPIO_Init+0x688>)
 80068cc:	4a78      	ldr	r2, [pc, #480]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068ce:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80068d0:	4b90      	ldr	r3, [pc, #576]	@ (8006b14 <MX_GPIO_Init+0x68c>)
 80068d2:	2217      	movs	r2, #23
 80068d4:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80068d6:	4b90      	ldr	r3, [pc, #576]	@ (8006b18 <MX_GPIO_Init+0x690>)
 80068d8:	2210      	movs	r2, #16
 80068da:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068dc:	4b8f      	ldr	r3, [pc, #572]	@ (8006b1c <MX_GPIO_Init+0x694>)
 80068de:	4a74      	ldr	r2, [pc, #464]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068e0:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006b20 <MX_GPIO_Init+0x698>)
 80068e4:	220a      	movs	r2, #10
 80068e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b24 <MX_GPIO_Init+0x69c>)
 80068ea:	2220      	movs	r2, #32
 80068ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006b28 <MX_GPIO_Init+0x6a0>)
 80068f0:	4a6f      	ldr	r2, [pc, #444]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80068f2:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068f4:	4b8d      	ldr	r3, [pc, #564]	@ (8006b2c <MX_GPIO_Init+0x6a4>)
 80068f6:	2217      	movs	r2, #23
 80068f8:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 80068fc:	2202      	movs	r2, #2
 80068fe:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006900:	4b8c      	ldr	r3, [pc, #560]	@ (8006b34 <MX_GPIO_Init+0x6ac>)
 8006902:	4a7e      	ldr	r2, [pc, #504]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006904:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006906:	4b8c      	ldr	r3, [pc, #560]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 8006908:	2201      	movs	r2, #1
 800690a:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800690c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b3c <MX_GPIO_Init+0x6b4>)
 800690e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006910:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006912:	4b8b      	ldr	r3, [pc, #556]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 8006914:	2208      	movs	r2, #8
 8006916:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 8006918:	4b8a      	ldr	r3, [pc, #552]	@ (8006b44 <MX_GPIO_Init+0x6bc>)
 800691a:	4a69      	ldr	r2, [pc, #420]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 800691c:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 800691e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b48 <MX_GPIO_Init+0x6c0>)
 8006920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006924:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006926:	4b89      	ldr	r3, [pc, #548]	@ (8006b4c <MX_GPIO_Init+0x6c4>)
 8006928:	4a61      	ldr	r2, [pc, #388]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800692a:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800692c:	4b88      	ldr	r3, [pc, #544]	@ (8006b50 <MX_GPIO_Init+0x6c8>)
 800692e:	2228      	movs	r2, #40	@ 0x28
 8006930:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 8006932:	4b88      	ldr	r3, [pc, #544]	@ (8006b54 <MX_GPIO_Init+0x6cc>)
 8006934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006938:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800693a:	4b87      	ldr	r3, [pc, #540]	@ (8006b58 <MX_GPIO_Init+0x6d0>)
 800693c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800693e:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 8006940:	4b86      	ldr	r3, [pc, #536]	@ (8006b5c <MX_GPIO_Init+0x6d4>)
 8006942:	2228      	movs	r2, #40	@ 0x28
 8006944:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 8006946:	4b86      	ldr	r3, [pc, #536]	@ (8006b60 <MX_GPIO_Init+0x6d8>)
 8006948:	2204      	movs	r2, #4
 800694a:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800694c:	4b85      	ldr	r3, [pc, #532]	@ (8006b64 <MX_GPIO_Init+0x6dc>)
 800694e:	4a58      	ldr	r2, [pc, #352]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006950:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006952:	4b85      	ldr	r3, [pc, #532]	@ (8006b68 <MX_GPIO_Init+0x6e0>)
 8006954:	2208      	movs	r2, #8
 8006956:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 8006958:	4b84      	ldr	r3, [pc, #528]	@ (8006b6c <MX_GPIO_Init+0x6e4>)
 800695a:	2220      	movs	r2, #32
 800695c:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 800695e:	4b84      	ldr	r3, [pc, #528]	@ (8006b70 <MX_GPIO_Init+0x6e8>)
 8006960:	4a57      	ldr	r2, [pc, #348]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006962:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006964:	4b83      	ldr	r3, [pc, #524]	@ (8006b74 <MX_GPIO_Init+0x6ec>)
 8006966:	2217      	movs	r2, #23
 8006968:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 800696a:	4b83      	ldr	r3, [pc, #524]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 800696c:	2201      	movs	r2, #1
 800696e:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 8006970:	4b82      	ldr	r3, [pc, #520]	@ (8006b7c <MX_GPIO_Init+0x6f4>)
 8006972:	4a4f      	ldr	r2, [pc, #316]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006974:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 8006976:	4b82      	ldr	r3, [pc, #520]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006978:	2202      	movs	r2, #2
 800697a:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 800697c:	4b81      	ldr	r3, [pc, #516]	@ (8006b84 <MX_GPIO_Init+0x6fc>)
 800697e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006980:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 8006982:	4b81      	ldr	r3, [pc, #516]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006984:	2210      	movs	r2, #16
 8006986:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 8006988:	4b80      	ldr	r3, [pc, #512]	@ (8006b8c <MX_GPIO_Init+0x704>)
 800698a:	4a81      	ldr	r2, [pc, #516]	@ (8006b90 <MX_GPIO_Init+0x708>)
 800698c:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 800698e:	4b81      	ldr	r3, [pc, #516]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006994:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 8006996:	4b80      	ldr	r3, [pc, #512]	@ (8006b98 <MX_GPIO_Init+0x710>)
 8006998:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 800699a:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 800699c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b9c <MX_GPIO_Init+0x714>)
 800699e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a2:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 80069a4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba0 <MX_GPIO_Init+0x718>)
 80069a6:	4a42      	ldr	r2, [pc, #264]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 80069a8:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 80069aa:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba4 <MX_GPIO_Init+0x71c>)
 80069ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80069b0:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 80069b2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ba8 <MX_GPIO_Init+0x720>)
 80069b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069b8:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 80069ba:	4b7c      	ldr	r3, [pc, #496]	@ (8006bac <MX_GPIO_Init+0x724>)
 80069bc:	2210      	movs	r2, #16
 80069be:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 80069c0:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <MX_GPIO_Init+0x728>)
 80069c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80069c6:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c8:	2001      	movs	r0, #1
 80069ca:	f7fe fe1d 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ce:	2002      	movs	r0, #2
 80069d0:	f7fe fe1a 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069d4:	2004      	movs	r0, #4
 80069d6:	f7fe fe17 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069da:	2008      	movs	r0, #8
 80069dc:	f7fe fe14 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069e0:	2010      	movs	r0, #16
 80069e2:	f7fe fe11 	bl	8005608 <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069e6:	4b54      	ldr	r3, [pc, #336]	@ (8006b38 <MX_GPIO_Init+0x6b0>)
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	4b55      	ldr	r3, [pc, #340]	@ (8006b40 <MX_GPIO_Init+0x6b8>)
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2201      	movs	r2, #1
 80069f4:	4619      	mov	r1, r3
 80069f6:	4832      	ldr	r0, [pc, #200]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 80069f8:	f008 fc06 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069fc:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <MX_GPIO_Init+0x64c>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	482a      	ldr	r0, [pc, #168]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a06:	f008 fbff 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <MX_GPIO_Init+0x67c>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4619      	mov	r1, r3
 8006a12:	482b      	ldr	r0, [pc, #172]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a14:	f008 fbf8 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 8006a18:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <MX_GPIO_Init+0x6a8>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4836      	ldr	r0, [pc, #216]	@ (8006afc <MX_GPIO_Init+0x674>)
 8006a22:	f008 fbf1 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 8006a26:	4b54      	ldr	r3, [pc, #336]	@ (8006b78 <MX_GPIO_Init+0x6f0>)
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	4b55      	ldr	r3, [pc, #340]	@ (8006b80 <MX_GPIO_Init+0x6f8>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	4b58      	ldr	r3, [pc, #352]	@ (8006b94 <MX_GPIO_Init+0x70c>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	481c      	ldr	r0, [pc, #112]	@ (8006ab0 <MX_GPIO_Init+0x628>)
 8006a40:	f008 fbe2 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a44:	4b50      	ldr	r3, [pc, #320]	@ (8006b88 <MX_GPIO_Init+0x700>)
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4850      	ldr	r0, [pc, #320]	@ (8006b90 <MX_GPIO_Init+0x708>)
 8006a4e:	f008 fbdb 	bl	800f208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a52:	4b56      	ldr	r3, [pc, #344]	@ (8006bac <MX_GPIO_Init+0x724>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a5e:	f008 fbd3 	bl	800f208 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a62:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <MX_GPIO_Init+0x630>)
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <MX_GPIO_Init+0x654>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <MX_GPIO_Init+0x660>)
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a78:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	480e      	ldr	r0, [pc, #56]	@ (8006ac0 <MX_GPIO_Init+0x638>)
 8006a88:	f008 fa36 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <MX_GPIO_Init+0x640>)
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a92:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a96:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	1d3b      	adds	r3, r7, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006aa4:	e086      	b.n	8006bb4 <MX_GPIO_Init+0x72c>
 8006aa6:	bf00      	nop
 8006aa8:	20000c56 	.word	0x20000c56
 8006aac:	20000c58 	.word	0x20000c58
 8006ab0:	48000400 	.word	0x48000400
 8006ab4:	20000c5c 	.word	0x20000c5c
 8006ab8:	20000c5e 	.word	0x20000c5e
 8006abc:	20000c60 	.word	0x20000c60
 8006ac0:	48000800 	.word	0x48000800
 8006ac4:	20000c64 	.word	0x20000c64
 8006ac8:	20000c66 	.word	0x20000c66
 8006acc:	20000c68 	.word	0x20000c68
 8006ad0:	20000c6c 	.word	0x20000c6c
 8006ad4:	20000c6e 	.word	0x20000c6e
 8006ad8:	20000c70 	.word	0x20000c70
 8006adc:	20000c74 	.word	0x20000c74
 8006ae0:	20000c78 	.word	0x20000c78
 8006ae4:	20000c7c 	.word	0x20000c7c
 8006ae8:	20000c7e 	.word	0x20000c7e
 8006aec:	20000c80 	.word	0x20000c80
 8006af0:	20000c84 	.word	0x20000c84
 8006af4:	20000c86 	.word	0x20000c86
 8006af8:	20000c88 	.word	0x20000c88
 8006afc:	48000c00 	.word	0x48000c00
 8006b00:	20000c8c 	.word	0x20000c8c
 8006b04:	20000c8e 	.word	0x20000c8e
 8006b08:	20000c90 	.word	0x20000c90
 8006b0c:	20000c94 	.word	0x20000c94
 8006b10:	20000c98 	.word	0x20000c98
 8006b14:	20000c9c 	.word	0x20000c9c
 8006b18:	20000c9e 	.word	0x20000c9e
 8006b1c:	20000ca0 	.word	0x20000ca0
 8006b20:	20000ca4 	.word	0x20000ca4
 8006b24:	20000ca6 	.word	0x20000ca6
 8006b28:	20000ca8 	.word	0x20000ca8
 8006b2c:	20000cac 	.word	0x20000cac
 8006b30:	20000cae 	.word	0x20000cae
 8006b34:	20000cb0 	.word	0x20000cb0
 8006b38:	20000cb4 	.word	0x20000cb4
 8006b3c:	20000cb8 	.word	0x20000cb8
 8006b40:	20000cbc 	.word	0x20000cbc
 8006b44:	20000cc0 	.word	0x20000cc0
 8006b48:	20000cc4 	.word	0x20000cc4
 8006b4c:	20000cc8 	.word	0x20000cc8
 8006b50:	20000ccc 	.word	0x20000ccc
 8006b54:	20000cce 	.word	0x20000cce
 8006b58:	20000cd0 	.word	0x20000cd0
 8006b5c:	20000cd4 	.word	0x20000cd4
 8006b60:	20000cd6 	.word	0x20000cd6
 8006b64:	20000cd8 	.word	0x20000cd8
 8006b68:	20000cdc 	.word	0x20000cdc
 8006b6c:	20000cde 	.word	0x20000cde
 8006b70:	20000ce0 	.word	0x20000ce0
 8006b74:	20000ce4 	.word	0x20000ce4
 8006b78:	20000ce6 	.word	0x20000ce6
 8006b7c:	20000ce8 	.word	0x20000ce8
 8006b80:	20000cec 	.word	0x20000cec
 8006b84:	20000cf0 	.word	0x20000cf0
 8006b88:	20000cf4 	.word	0x20000cf4
 8006b8c:	20000cf8 	.word	0x20000cf8
 8006b90:	48001000 	.word	0x48001000
 8006b94:	20000cfc 	.word	0x20000cfc
 8006b98:	20000d00 	.word	0x20000d00
 8006b9c:	20000d04 	.word	0x20000d04
 8006ba0:	20000d08 	.word	0x20000d08
 8006ba4:	20000d0c 	.word	0x20000d0c
 8006ba8:	20000d10 	.word	0x20000d10
 8006bac:	20000d14 	.word	0x20000d14
 8006bb0:	20000d18 	.word	0x20000d18
 8006bb4:	f008 f9a0 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006bb8:	4b66      	ldr	r3, [pc, #408]	@ (8006d54 <MX_GPIO_Init+0x8cc>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006bc2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4862      	ldr	r0, [pc, #392]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006bce:	f008 f993 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006bd2:	4b62      	ldr	r3, [pc, #392]	@ (8006d5c <MX_GPIO_Init+0x8d4>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006bd8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bde:	2301      	movs	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	485e      	ldr	r0, [pc, #376]	@ (8006d60 <MX_GPIO_Init+0x8d8>)
 8006be8:	f008 f986 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bec:	4b5d      	ldr	r3, [pc, #372]	@ (8006d64 <MX_GPIO_Init+0x8dc>)
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <MX_GPIO_Init+0x8e0>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d6c <MX_GPIO_Init+0x8e4>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c02:	2301      	movs	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4857      	ldr	r0, [pc, #348]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c14:	f008 f970 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006c18:	4b56      	ldr	r3, [pc, #344]	@ (8006d74 <MX_GPIO_Init+0x8ec>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	484a      	ldr	r0, [pc, #296]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c30:	f008 f962 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006c34:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <MX_GPIO_Init+0x8f0>)
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <MX_GPIO_Init+0x8f4>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	4b4f      	ldr	r3, [pc, #316]	@ (8006d80 <MX_GPIO_Init+0x8f8>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c50:	2301      	movs	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	483f      	ldr	r0, [pc, #252]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006c5a:	f008 f94d 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c5e:	4b49      	ldr	r3, [pc, #292]	@ (8006d84 <MX_GPIO_Init+0x8fc>)
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c68:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c6e:	1d3b      	adds	r3, r7, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	483f      	ldr	r0, [pc, #252]	@ (8006d70 <MX_GPIO_Init+0x8e8>)
 8006c74:	f008 f940 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c78:	4b43      	ldr	r3, [pc, #268]	@ (8006d88 <MX_GPIO_Init+0x900>)
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <MX_GPIO_Init+0x904>)
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b42      	ldr	r3, [pc, #264]	@ (8006d90 <MX_GPIO_Init+0x908>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	482e      	ldr	r0, [pc, #184]	@ (8006d58 <MX_GPIO_Init+0x8d0>)
 8006ca0:	f008 f92a 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <MX_GPIO_Init+0x90c>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006caa:	2301      	movs	r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4837      	ldr	r0, [pc, #220]	@ (8006d98 <MX_GPIO_Init+0x910>)
 8006cbc:	f008 f91c 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006cc0:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <MX_GPIO_Init+0x914>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cda:	f008 f90d 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006cde:	4b30      	ldr	r3, [pc, #192]	@ (8006da0 <MX_GPIO_Init+0x918>)
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cf8:	f008 f8fe 	bl	800eef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2006      	movs	r0, #6
 8006d02:	f007 fdec 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006d06:	2006      	movs	r0, #6
 8006d08:	f007 fe03 	bl	800e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2008      	movs	r0, #8
 8006d12:	f007 fde4 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d16:	2008      	movs	r0, #8
 8006d18:	f007 fdfb 	bl	800e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	200a      	movs	r0, #10
 8006d22:	f007 fddc 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006d26:	200a      	movs	r0, #10
 8006d28:	f007 fdf3 	bl	800e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2017      	movs	r0, #23
 8006d32:	f007 fdd4 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d36:	2017      	movs	r0, #23
 8006d38:	f007 fdeb 	bl	800e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2028      	movs	r0, #40	@ 0x28
 8006d42:	f007 fdcc 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d46:	2028      	movs	r0, #40	@ 0x28
 8006d48:	f007 fde3 	bl	800e912 <HAL_NVIC_EnableIRQ>
}
 8006d4c:	bf00      	nop
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000c56 	.word	0x20000c56
 8006d58:	48000400 	.word	0x48000400
 8006d5c:	20000c86 	.word	0x20000c86
 8006d60:	48000c00 	.word	0x48000c00
 8006d64:	20000cb4 	.word	0x20000cb4
 8006d68:	20000cbc 	.word	0x20000cbc
 8006d6c:	20000c8e 	.word	0x20000c8e
 8006d70:	48000800 	.word	0x48000800
 8006d74:	20000c6e 	.word	0x20000c6e
 8006d78:	20000cc4 	.word	0x20000cc4
 8006d7c:	20000cce 	.word	0x20000cce
 8006d80:	20000cd6 	.word	0x20000cd6
 8006d84:	20000cde 	.word	0x20000cde
 8006d88:	20000ce6 	.word	0x20000ce6
 8006d8c:	20000cec 	.word	0x20000cec
 8006d90:	20000cfc 	.word	0x20000cfc
 8006d94:	20000cf4 	.word	0x20000cf4
 8006d98:	48001000 	.word	0x48001000
 8006d9c:	20000d0c 	.word	0x20000d0c
 8006da0:	20000d14 	.word	0x20000d14

08006da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006da8:	4904      	ldr	r1, [pc, #16]	@ (8006dbc <Error_Handler+0x18>)
 8006daa:	4805      	ldr	r0, [pc, #20]	@ (8006dc0 <Error_Handler+0x1c>)
 8006dac:	f00e f98e 	bl	80150cc <siprintf>
 8006db0:	4803      	ldr	r0, [pc, #12]	@ (8006dc0 <Error_Handler+0x1c>)
 8006db2:	f7fe fc43 	bl	800563c <serialOut>
  return;
 8006db6:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	08018ca4 	.word	0x08018ca4
 8006dc0:	20000b5c 	.word	0x20000b5c

08006dc4 <MCU_ShouldLogMessage>:

/***************************************************************************************************************
*     M C U _ S h o u l d L o g M e s s a g e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
static bool MCU_ShouldLogMessage(uint16_t messageId, bool isTx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460a      	mov	r2, r1
 8006dce:	80fb      	strh	r3, [r7, #6]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	717b      	strb	r3, [r7, #5]
  // Check if general COMMS debug is enabled
  if((debugLevel & DBG_COMMS) == 0) return false;
 8006dd4:	4b87      	ldr	r3, [pc, #540]	@ (8006ff4 <MCU_ShouldLogMessage+0x230>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <MCU_ShouldLogMessage+0x20>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e100      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
  
  // Map message IDs to debug flags
  switch(messageId){
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8006dea:	2b1f      	cmp	r3, #31
 8006dec:	f200 80fa 	bhi.w	8006fe4 <MCU_ShouldLogMessage+0x220>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <MCU_ShouldLogMessage+0x34>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e8d 	.word	0x08006e8d
 8006dfc:	08006f2d 	.word	0x08006f2d
 8006e00:	08006ec9 	.word	0x08006ec9
 8006e04:	08006edd 	.word	0x08006edd
 8006e08:	08006ef1 	.word	0x08006ef1
 8006e0c:	08006f41 	.word	0x08006f41
 8006e10:	08006f7d 	.word	0x08006f7d
 8006e14:	08006f55 	.word	0x08006f55
 8006e18:	08006f69 	.word	0x08006f69
 8006e1c:	08006fe5 	.word	0x08006fe5
 8006e20:	08006fe5 	.word	0x08006fe5
 8006e24:	08006fe5 	.word	0x08006fe5
 8006e28:	08006fe5 	.word	0x08006fe5
 8006e2c:	08006fe5 	.word	0x08006fe5
 8006e30:	08006fe5 	.word	0x08006fe5
 8006e34:	08006fe5 	.word	0x08006fe5
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006f19 	.word	0x08006f19
 8006e40:	08006eb5 	.word	0x08006eb5
 8006e44:	08006fe5 	.word	0x08006fe5
 8006e48:	08006f05 	.word	0x08006f05
 8006e4c:	08006fe5 	.word	0x08006fe5
 8006e50:	08006f91 	.word	0x08006f91
 8006e54:	08006fa5 	.word	0x08006fa5
 8006e58:	08006fa9 	.word	0x08006fa9
 8006e5c:	08006fe5 	.word	0x08006fe5
 8006e60:	08006fe5 	.word	0x08006fe5
 8006e64:	08006fe5 	.word	0x08006fe5
 8006e68:	08006fe5 	.word	0x08006fe5
 8006e6c:	08006e79 	.word	0x08006e79
 8006e70:	08006fd1 	.word	0x08006fd1
 8006e74:	08006fbd 	.word	0x08006fbd
    case ID_MODULE_ANNOUNCE_REQUEST:  return (debugMessages & DBG_MSG_ANNOUNCE_REQ) != 0;
 8006e78:	4b5f      	ldr	r3, [pc, #380]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e0ac      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ANNOUNCEMENT:      return (debugMessages & DBG_MSG_ANNOUNCE) != 0;
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e0a2      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_REGISTRATION:      return (debugMessages & DBG_MSG_REGISTRATION) != 0;
 8006ea0:	4b55      	ldr	r3, [pc, #340]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e098      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_REQUEST:    return (debugMessages & DBG_MSG_STATUS_REQ) != 0;
 8006eb4:	4b50      	ldr	r3, [pc, #320]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e08e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_1:          return (debugMessages & DBG_MSG_STATUS1) != 0;
 8006ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	e084      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_2:          return (debugMessages & DBG_MSG_STATUS2) != 0;
 8006edc:	4b46      	ldr	r3, [pc, #280]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e07a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATUS_3:          return (debugMessages & DBG_MSG_STATUS3) != 0;
 8006ef0:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e070      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_STATE_CHANGE:      return (debugMessages & DBG_MSG_STATE_CHANGE) != 0;
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e066      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE_REQUEST:  return (debugMessages & DBG_MSG_HARDWARE_REQ) != 0;
 8006f18:	4b37      	ldr	r3, [pc, #220]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e05c      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_HARDWARE:          return (debugMessages & DBG_MSG_HARDWARE) != 0;
 8006f2c:	4b32      	ldr	r3, [pc, #200]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e052      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DETAIL:            return (debugMessages & DBG_MSG_CELL_DETAIL) != 0;
 8006f40:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e048      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS1: return (debugMessages & DBG_MSG_CELL_STATUS1) != 0;
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e03e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_CELL_COMM_STATUS2: return (debugMessages & DBG_MSG_CELL_STATUS2) != 0;
 8006f68:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e034      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_TIME_REQUEST:      return (debugMessages & DBG_MSG_TIME_REQ) != 0;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	e02a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_SET_TIME:          return (debugMessages & DBG_MSG_SET_TIME) != 0;
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e020      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_MAX_STATE:         return false; // Never log 0x517 to prevent flooding
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e01e      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_DEREGISTER:        return (debugMessages & DBG_MSG_DEREGISTER) != 0;
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e014      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_ISOLATE:       return (debugMessages & DBG_MSG_ISOLATE_ALL) != 0;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e00a      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    case ID_MODULE_ALL_DEREGISTER:    return (debugMessages & DBG_MSG_DEREGISTER_ALL) != 0;
 8006fd0:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <MCU_ShouldLogMessage+0x234>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e000      	b.n	8006fe6 <MCU_ShouldLogMessage+0x222>
    default:                          return false; // Unknown messages not logged unless DBG_MSG_ALL
 8006fe4:	2300      	movs	r3, #0
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c
 8006ff8:	20000010 	.word	0x20000010

08006ffc <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8007002:	f7fe fc5d 	bl	80058c0 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8007006:	2254      	movs	r2, #84	@ 0x54
 8007008:	2100      	movs	r1, #0
 800700a:	48ac      	ldr	r0, [pc, #688]	@ (80072bc <PCU_Initialize+0x2c0>)
 800700c:	f00e f8c5 	bl	801519a <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8007010:	4bab      	ldr	r3, [pc, #684]	@ (80072c0 <PCU_Initialize+0x2c4>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4ba9      	ldr	r3, [pc, #676]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007018:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 800701a:	4ba8      	ldr	r3, [pc, #672]	@ (80072bc <PCU_Initialize+0x2c0>)
 800701c:	2200      	movs	r2, #0
 800701e:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8007020:	4ba6      	ldr	r3, [pc, #664]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007022:	2200      	movs	r2, #0
 8007024:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8007026:	4ba5      	ldr	r3, [pc, #660]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 800702c:	4ba3      	ldr	r3, [pc, #652]	@ (80072bc <PCU_Initialize+0x2c0>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8007034:	4ba1      	ldr	r3, [pc, #644]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007036:	2200      	movs	r2, #0
 8007038:	815a      	strh	r2, [r3, #10]
 800703a:	e007      	b.n	800704c <PCU_Initialize+0x50>
  else if (pack.id == 1)
 800703c:	4b9f      	ldr	r3, [pc, #636]	@ (80072bc <PCU_Initialize+0x2c0>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8007044:	4b9d      	ldr	r3, [pc, #628]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800704a:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 800704c:	4b9b      	ldr	r3, [pc, #620]	@ (80072bc <PCU_Initialize+0x2c0>)
 800704e:	2200      	movs	r2, #0
 8007050:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8007052:	4b9a      	ldr	r3, [pc, #616]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007054:	2200      	movs	r2, #0
 8007056:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8007058:	4b98      	ldr	r3, [pc, #608]	@ (80072bc <PCU_Initialize+0x2c0>)
 800705a:	2200      	movs	r2, #0
 800705c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800705e:	4b97      	ldr	r3, [pc, #604]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007060:	2200      	movs	r2, #0
 8007062:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8007064:	4b95      	ldr	r3, [pc, #596]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007066:	2200      	movs	r2, #0
 8007068:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800706a:	4b94      	ldr	r3, [pc, #592]	@ (80072bc <PCU_Initialize+0x2c0>)
 800706c:	2200      	movs	r2, #0
 800706e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8007070:	4b92      	ldr	r3, [pc, #584]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007072:	2200      	movs	r2, #0
 8007074:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8007076:	4b91      	ldr	r3, [pc, #580]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007078:	2200      	movs	r2, #0
 800707a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800707c:	4b8f      	ldr	r3, [pc, #572]	@ (80072bc <PCU_Initialize+0x2c0>)
 800707e:	2200      	movs	r2, #0
 8007080:	845a      	strh	r2, [r3, #34]	@ 0x22
  pack.cellAvgTemp=0;
 8007082:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007084:	2200      	movs	r2, #0
 8007086:	84da      	strh	r2, [r3, #38]	@ 0x26
  pack.cellHiVolt=0;
 8007088:	4b8c      	ldr	r3, [pc, #560]	@ (80072bc <PCU_Initialize+0x2c0>)
 800708a:	2200      	movs	r2, #0
 800708c:	851a      	strh	r2, [r3, #40]	@ 0x28
  pack.cellLoVolt=0;
 800708e:	4b8b      	ldr	r3, [pc, #556]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007090:	2200      	movs	r2, #0
 8007092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  pack.cellAvgVolt=0;
 8007094:	4b89      	ldr	r3, [pc, #548]	@ (80072bc <PCU_Initialize+0x2c0>)
 8007096:	2200      	movs	r2, #0
 8007098:	861a      	strh	r2, [r3, #48]	@ 0x30
  pack.status=0;
 800709a:	4b88      	ldr	r3, [pc, #544]	@ (80072bc <PCU_Initialize+0x2c0>)
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  pack.vcuStateChange=0;
 80070a2:	4b86      	ldr	r3, [pc, #536]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  pack.state=0;
 80070aa:	4b84      	ldr	r3, [pc, #528]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  pack.vcuRequestedState=0;
 80070b2:	4b82      	ldr	r3, [pc, #520]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  pack.soc=0;
 80070ba:	4b80      	ldr	r3, [pc, #512]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  pack.soh=0;
 80070c2:	4b7e      	ldr	r3, [pc, #504]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  pack.vcuLastContact.overflows=0;
 80070ca:	4b7c      	ldr	r3, [pc, #496]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	649a      	str	r2, [r3, #72]	@ 0x48
  pack.vcuLastContact.ticks=0;
 80070d0:	4b7a      	ldr	r3, [pc, #488]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
  pack.cellBalanceActive=0;
 80070d6:	4b79      	ldr	r3, [pc, #484]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 80070dc:	4b77      	ldr	r3, [pc, #476]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 80070e2:	4b76      	ldr	r3, [pc, #472]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 80070e8:	4b74      	ldr	r3, [pc, #464]	@ (80072bc <PCU_Initialize+0x2c0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80070f0:	2300      	movs	r3, #0
 80070f2:	71fb      	strb	r3, [r7, #7]
 80070f4:	e00f      	b.n	8007116 <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	4a70      	ldr	r2, [pc, #448]	@ (80072c4 <PCU_Initialize+0x2c8>)
 8007102:	4413      	add	r3, r2
 8007104:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f00e f845 	bl	801519a <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	3301      	adds	r3, #1
 8007114:	71fb      	strb	r3, [r7, #7]
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	2b1f      	cmp	r3, #31
 800711a:	d9ec      	bls.n	80070f6 <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 800711c:	486a      	ldr	r0, [pc, #424]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800711e:	f7fe fa8d 	bl	800563c <serialOut>
  serialOut("");
 8007122:	4869      	ldr	r0, [pc, #420]	@ (80072c8 <PCU_Initialize+0x2cc>)
 8007124:	f7fe fa8a 	bl	800563c <serialOut>
  serialOut("        ██    ██");
 8007128:	4868      	ldr	r0, [pc, #416]	@ (80072cc <PCU_Initialize+0x2d0>)
 800712a:	f7fe fa87 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 800712e:	4868      	ldr	r0, [pc, #416]	@ (80072d0 <PCU_Initialize+0x2d4>)
 8007130:	f7fe fa84 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8007134:	4867      	ldr	r0, [pc, #412]	@ (80072d4 <PCU_Initialize+0x2d8>)
 8007136:	f7fe fa81 	bl	800563c <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800713a:	4867      	ldr	r0, [pc, #412]	@ (80072d8 <PCU_Initialize+0x2dc>)
 800713c:	f7fe fa7e 	bl	800563c <serialOut>
  serialOut("     ██    ██    ██");
 8007140:	4866      	ldr	r0, [pc, #408]	@ (80072dc <PCU_Initialize+0x2e0>)
 8007142:	f7fe fa7b 	bl	800563c <serialOut>
  serialOut("     m o d b a t t");
 8007146:	4866      	ldr	r0, [pc, #408]	@ (80072e0 <PCU_Initialize+0x2e4>)
 8007148:	f7fe fa78 	bl	800563c <serialOut>
  serialOut("");
 800714c:	485e      	ldr	r0, [pc, #376]	@ (80072c8 <PCU_Initialize+0x2cc>)
 800714e:	f7fe fa75 	bl	800563c <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8007152:	2000      	movs	r0, #0
 8007154:	f004 fd64 	bl	800bc20 <CAN_TestRamAccess>
 8007158:	4603      	mov	r3, r0
 800715a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <PCU_Initialize+0x176>
 8007162:	4960      	ldr	r1, [pc, #384]	@ (80072e4 <PCU_Initialize+0x2e8>)
 8007164:	4860      	ldr	r0, [pc, #384]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007166:	f00d ffb1 	bl	80150cc <siprintf>
 800716a:	485f      	ldr	r0, [pc, #380]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800716c:	f7fe fa66 	bl	800563c <serialOut>
 8007170:	e006      	b.n	8007180 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8007172:	495e      	ldr	r1, [pc, #376]	@ (80072ec <PCU_Initialize+0x2f0>)
 8007174:	485c      	ldr	r0, [pc, #368]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007176:	f00d ffa9 	bl	80150cc <siprintf>
 800717a:	485b      	ldr	r0, [pc, #364]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800717c:	f7fe fa5e 	bl	800563c <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8007180:	2000      	movs	r0, #0
 8007182:	f004 fcd3 	bl	800bb2c <CAN_TestRegisterAccess>
 8007186:	4603      	mov	r3, r0
 8007188:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 800718a:	79bb      	ldrb	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <PCU_Initialize+0x1a4>
 8007190:	4957      	ldr	r1, [pc, #348]	@ (80072f0 <PCU_Initialize+0x2f4>)
 8007192:	4855      	ldr	r0, [pc, #340]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007194:	f00d ff9a 	bl	80150cc <siprintf>
 8007198:	4853      	ldr	r0, [pc, #332]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800719a:	f7fe fa4f 	bl	800563c <serialOut>
 800719e:	e006      	b.n	80071ae <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 80071a0:	4954      	ldr	r1, [pc, #336]	@ (80072f4 <PCU_Initialize+0x2f8>)
 80071a2:	4851      	ldr	r0, [pc, #324]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071a4:	f00d ff92 	bl	80150cc <siprintf>
 80071a8:	484f      	ldr	r0, [pc, #316]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071aa:	f7fe fa47 	bl	800563c <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80071ae:	4952      	ldr	r1, [pc, #328]	@ (80072f8 <PCU_Initialize+0x2fc>)
 80071b0:	484d      	ldr	r0, [pc, #308]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b2:	f00d ff8b 	bl	80150cc <siprintf>
 80071b6:	484c      	ldr	r0, [pc, #304]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071b8:	f7fe fa40 	bl	800563c <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 80071bc:	4b4f      	ldr	r3, [pc, #316]	@ (80072fc <PCU_Initialize+0x300>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d135      	bne.n	8007230 <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f004 fd2b 	bl	800bc20 <CAN_TestRamAccess>
 80071ca:	4603      	mov	r3, r0
 80071cc:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <PCU_Initialize+0x1e8>
 80071d4:	494a      	ldr	r1, [pc, #296]	@ (8007300 <PCU_Initialize+0x304>)
 80071d6:	4844      	ldr	r0, [pc, #272]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071d8:	f00d ff78 	bl	80150cc <siprintf>
 80071dc:	4842      	ldr	r0, [pc, #264]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071de:	f7fe fa2d 	bl	800563c <serialOut>
 80071e2:	e006      	b.n	80071f2 <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 80071e4:	4947      	ldr	r1, [pc, #284]	@ (8007304 <PCU_Initialize+0x308>)
 80071e6:	4840      	ldr	r0, [pc, #256]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071e8:	f00d ff70 	bl	80150cc <siprintf>
 80071ec:	483e      	ldr	r0, [pc, #248]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80071ee:	f7fe fa25 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 80071f2:	2001      	movs	r0, #1
 80071f4:	f004 fc9a 	bl	800bb2c <CAN_TestRegisterAccess>
 80071f8:	4603      	mov	r3, r0
 80071fa:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <PCU_Initialize+0x216>
 8007202:	4941      	ldr	r1, [pc, #260]	@ (8007308 <PCU_Initialize+0x30c>)
 8007204:	4838      	ldr	r0, [pc, #224]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007206:	f00d ff61 	bl	80150cc <siprintf>
 800720a:	4837      	ldr	r0, [pc, #220]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800720c:	f7fe fa16 	bl	800563c <serialOut>
 8007210:	e006      	b.n	8007220 <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007212:	493e      	ldr	r1, [pc, #248]	@ (800730c <PCU_Initialize+0x310>)
 8007214:	4834      	ldr	r0, [pc, #208]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007216:	f00d ff59 	bl	80150cc <siprintf>
 800721a:	4833      	ldr	r0, [pc, #204]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800721c:	f7fe fa0e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007220:	4935      	ldr	r1, [pc, #212]	@ (80072f8 <PCU_Initialize+0x2fc>)
 8007222:	4831      	ldr	r0, [pc, #196]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007224:	f00d ff52 	bl	80150cc <siprintf>
 8007228:	482f      	ldr	r0, [pc, #188]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800722a:	f7fe fa07 	bl	800563c <serialOut>
 800722e:	e09e      	b.n	800736e <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8007230:	2001      	movs	r0, #1
 8007232:	f004 fcf5 	bl	800bc20 <CAN_TestRamAccess>
 8007236:	4603      	mov	r3, r0
 8007238:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 800723a:	79bb      	ldrb	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <PCU_Initialize+0x254>
 8007240:	4933      	ldr	r1, [pc, #204]	@ (8007310 <PCU_Initialize+0x314>)
 8007242:	4829      	ldr	r0, [pc, #164]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007244:	f00d ff42 	bl	80150cc <siprintf>
 8007248:	4827      	ldr	r0, [pc, #156]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800724a:	f7fe f9f7 	bl	800563c <serialOut>
 800724e:	e006      	b.n	800725e <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007250:	4930      	ldr	r1, [pc, #192]	@ (8007314 <PCU_Initialize+0x318>)
 8007252:	4825      	ldr	r0, [pc, #148]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007254:	f00d ff3a 	bl	80150cc <siprintf>
 8007258:	4823      	ldr	r0, [pc, #140]	@ (80072e8 <PCU_Initialize+0x2ec>)
 800725a:	f7fe f9ef 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 800725e:	2001      	movs	r0, #1
 8007260:	f004 fc64 	bl	800bb2c <CAN_TestRegisterAccess>
 8007264:	4603      	mov	r3, r0
 8007266:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8007268:	79bb      	ldrb	r3, [r7, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <PCU_Initialize+0x282>
 800726e:	492a      	ldr	r1, [pc, #168]	@ (8007318 <PCU_Initialize+0x31c>)
 8007270:	481d      	ldr	r0, [pc, #116]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007272:	f00d ff2b 	bl	80150cc <siprintf>
 8007276:	481c      	ldr	r0, [pc, #112]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007278:	f7fe f9e0 	bl	800563c <serialOut>
 800727c:	e006      	b.n	800728c <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 800727e:	4927      	ldr	r1, [pc, #156]	@ (800731c <PCU_Initialize+0x320>)
 8007280:	4819      	ldr	r0, [pc, #100]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007282:	f00d ff23 	bl	80150cc <siprintf>
 8007286:	4818      	ldr	r0, [pc, #96]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007288:	f7fe f9d8 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 800728c:	491a      	ldr	r1, [pc, #104]	@ (80072f8 <PCU_Initialize+0x2fc>)
 800728e:	4816      	ldr	r0, [pc, #88]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007290:	f00d ff1c 	bl	80150cc <siprintf>
 8007294:	4814      	ldr	r0, [pc, #80]	@ (80072e8 <PCU_Initialize+0x2ec>)
 8007296:	f7fe f9d1 	bl	800563c <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 800729a:	2002      	movs	r0, #2
 800729c:	f004 fcc0 	bl	800bc20 <CAN_TestRamAccess>
 80072a0:	4603      	mov	r3, r0
 80072a2:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 80072a4:	79bb      	ldrb	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03c      	beq.n	8007324 <PCU_Initialize+0x328>
 80072aa:	491d      	ldr	r1, [pc, #116]	@ (8007320 <PCU_Initialize+0x324>)
 80072ac:	480e      	ldr	r0, [pc, #56]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072ae:	f00d ff0d 	bl	80150cc <siprintf>
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <PCU_Initialize+0x2ec>)
 80072b4:	f7fe f9c2 	bl	800563c <serialOut>
 80072b8:	e03b      	b.n	8007332 <PCU_Initialize+0x336>
 80072ba:	bf00      	nop
 80072bc:	2000a6ec 	.word	0x2000a6ec
 80072c0:	20000984 	.word	0x20000984
 80072c4:	20000dec 	.word	0x20000dec
 80072c8:	08018cb4 	.word	0x08018cb4
 80072cc:	08018cb8 	.word	0x08018cb8
 80072d0:	08018cd4 	.word	0x08018cd4
 80072d4:	08018cfc 	.word	0x08018cfc
 80072d8:	08018d4c 	.word	0x08018d4c
 80072dc:	08018d9c 	.word	0x08018d9c
 80072e0:	08018dbc 	.word	0x08018dbc
 80072e4:	08018dd0 	.word	0x08018dd0
 80072e8:	20000b5c 	.word	0x20000b5c
 80072ec:	08018e00 	.word	0x08018e00
 80072f0:	08018e38 	.word	0x08018e38
 80072f4:	08018e68 	.word	0x08018e68
 80072f8:	08018ea0 	.word	0x08018ea0
 80072fc:	20000a50 	.word	0x20000a50
 8007300:	08018ea4 	.word	0x08018ea4
 8007304:	08018ed4 	.word	0x08018ed4
 8007308:	08018f0c 	.word	0x08018f0c
 800730c:	08018f3c 	.word	0x08018f3c
 8007310:	08018f74 	.word	0x08018f74
 8007314:	08018fa4 	.word	0x08018fa4
 8007318:	08018fdc 	.word	0x08018fdc
 800731c:	0801900c 	.word	0x0801900c
 8007320:	08019044 	.word	0x08019044
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007324:	4915      	ldr	r1, [pc, #84]	@ (800737c <PCU_Initialize+0x380>)
 8007326:	4816      	ldr	r0, [pc, #88]	@ (8007380 <PCU_Initialize+0x384>)
 8007328:	f00d fed0 	bl	80150cc <siprintf>
 800732c:	4814      	ldr	r0, [pc, #80]	@ (8007380 <PCU_Initialize+0x384>)
 800732e:	f7fe f985 	bl	800563c <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 8007332:	2002      	movs	r0, #2
 8007334:	f004 fbfa 	bl	800bb2c <CAN_TestRegisterAccess>
 8007338:	4603      	mov	r3, r0
 800733a:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 800733c:	79bb      	ldrb	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <PCU_Initialize+0x356>
 8007342:	4910      	ldr	r1, [pc, #64]	@ (8007384 <PCU_Initialize+0x388>)
 8007344:	480e      	ldr	r0, [pc, #56]	@ (8007380 <PCU_Initialize+0x384>)
 8007346:	f00d fec1 	bl	80150cc <siprintf>
 800734a:	480d      	ldr	r0, [pc, #52]	@ (8007380 <PCU_Initialize+0x384>)
 800734c:	f7fe f976 	bl	800563c <serialOut>
 8007350:	e006      	b.n	8007360 <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 8007352:	490d      	ldr	r1, [pc, #52]	@ (8007388 <PCU_Initialize+0x38c>)
 8007354:	480a      	ldr	r0, [pc, #40]	@ (8007380 <PCU_Initialize+0x384>)
 8007356:	f00d feb9 	bl	80150cc <siprintf>
 800735a:	4809      	ldr	r0, [pc, #36]	@ (8007380 <PCU_Initialize+0x384>)
 800735c:	f7fe f96e 	bl	800563c <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007360:	490a      	ldr	r1, [pc, #40]	@ (800738c <PCU_Initialize+0x390>)
 8007362:	4807      	ldr	r0, [pc, #28]	@ (8007380 <PCU_Initialize+0x384>)
 8007364:	f00d feb2 	bl	80150cc <siprintf>
 8007368:	4805      	ldr	r0, [pc, #20]	@ (8007380 <PCU_Initialize+0x384>)
 800736a:	f7fe f967 	bl	800563c <serialOut>

  }
  appData.state = PC_STATE_INIT;
 800736e:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <PCU_Initialize+0x394>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08019074 	.word	0x08019074
 8007380:	20000b5c 	.word	0x20000b5c
 8007384:	080190ac 	.word	0x080190ac
 8007388:	080190dc 	.word	0x080190dc
 800738c:	08018ea0 	.word	0x08018ea0
 8007390:	20000d28 	.word	0x20000d28

08007394 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b08b      	sub	sp, #44	@ 0x2c
 8007398:	af04      	add	r7, sp, #16
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;
  static uint8_t nextModuleToPoll = 0;
  static lastContact lastStatusPoll = {0, 0};

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800739a:	4b63      	ldr	r3, [pc, #396]	@ (8007528 <PCU_Tasks+0x194>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d12f      	bne.n	8007402 <PCU_Tasks+0x6e>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 80073a2:	2000      	movs	r0, #0
 80073a4:	f000 ff72 	bl	800828c <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 80073a8:	2001      	movs	r0, #1
 80073aa:	f000 ff6f 	bl	800828c <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 80073ae:	f002 f9bf 	bl	8009730 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 80073b2:	f002 f947 	bl	8009644 <MCU_DeRegisterAllModules>
    
    // Always show startup message
    sprintf(tempBuffer,"MCU STARTUP - Pack controller initialized, module count=%d", pack.moduleCount); 
 80073b6:	4b5d      	ldr	r3, [pc, #372]	@ (800752c <PCU_Tasks+0x198>)
 80073b8:	7d1b      	ldrb	r3, [r3, #20]
 80073ba:	461a      	mov	r2, r3
 80073bc:	495c      	ldr	r1, [pc, #368]	@ (8007530 <PCU_Tasks+0x19c>)
 80073be:	485d      	ldr	r0, [pc, #372]	@ (8007534 <PCU_Tasks+0x1a0>)
 80073c0:	f00d fe84 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 80073c4:	485b      	ldr	r0, [pc, #364]	@ (8007534 <PCU_Tasks+0x1a0>)
 80073c6:	f7fe f939 	bl	800563c <serialOut>
    
    // Request module announcements on startup
    MCU_RequestModuleAnnouncement();
 80073ca:	f002 fa0b 	bl	80097e4 <MCU_RequestModuleAnnouncement>
    lastAnnounceRequest.ticks = htim1.Instance->CNT;
 80073ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007538 <PCU_Tasks+0x1a4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	4a59      	ldr	r2, [pc, #356]	@ (800753c <PCU_Tasks+0x1a8>)
 80073d6:	6013      	str	r3, [r2, #0]
    lastAnnounceRequest.overflows = etTimerOverflows;
 80073d8:	4b59      	ldr	r3, [pc, #356]	@ (8007540 <PCU_Tasks+0x1ac>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a57      	ldr	r2, [pc, #348]	@ (800753c <PCU_Tasks+0x1a8>)
 80073de:	6053      	str	r3, [r2, #4]

    pack.vcuRequestedState = packOff;
 80073e0:	4b52      	ldr	r3, [pc, #328]	@ (800752c <PCU_Tasks+0x198>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <PCU_Tasks+0x1ac>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a4f      	ldr	r2, [pc, #316]	@ (800752c <PCU_Tasks+0x198>)
 80073ee:	6493      	str	r3, [r2, #72]	@ 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 80073f0:	4b51      	ldr	r3, [pc, #324]	@ (8007538 <PCU_Tasks+0x1a4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	4a4d      	ldr	r2, [pc, #308]	@ (800752c <PCU_Tasks+0x198>)
 80073f8:	6453      	str	r3, [r2, #68]	@ 0x44

    appData.state = PC_STATE_RUN;
 80073fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007528 <PCU_Tasks+0x194>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e311      	b.n	8007a26 <PCU_Tasks+0x692>

  }else if (appData.state == PC_STATE_RUN){
 8007402:	4b49      	ldr	r3, [pc, #292]	@ (8007528 <PCU_Tasks+0x194>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	f040 830d 	bne.w	8007a26 <PCU_Tasks+0x692>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 800740c:	4b4d      	ldr	r3, [pc, #308]	@ (8007544 <PCU_Tasks+0x1b0>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <PCU_Tasks+0x84>
      VCU_ReceiveMessages();
 8007414:	f005 f8f4 	bl	800c600 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 8007418:	4b4b      	ldr	r3, [pc, #300]	@ (8007548 <PCU_Tasks+0x1b4>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <PCU_Tasks+0x90>
      MCU_ReceiveMessages();
 8007420:	f001 fcf4 	bl	8008e0c <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 8007424:	f005 fde6 	bl	800cff4 <VCU_TicksSinceLastMessage>
 8007428:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007430:	d920      	bls.n	8007474 <PCU_Tasks+0xe0>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 8007432:	4b3e      	ldr	r3, [pc, #248]	@ (800752c <PCU_Tasks+0x198>)
 8007434:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007438:	2b03      	cmp	r3, #3
 800743a:	d009      	beq.n	8007450 <PCU_Tasks+0xbc>
 800743c:	4b3b      	ldr	r3, [pc, #236]	@ (800752c <PCU_Tasks+0x198>)
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d004      	beq.n	8007450 <PCU_Tasks+0xbc>
 8007446:	4b39      	ldr	r3, [pc, #228]	@ (800752c <PCU_Tasks+0x198>)
 8007448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744c:	2b02      	cmp	r3, #2
 800744e:	d130      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 8007450:	4b3e      	ldr	r3, [pc, #248]	@ (800754c <PCU_Tasks+0x1b8>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0311 	and.w	r3, r3, #17
 8007458:	2b11      	cmp	r3, #17
 800745a:	d106      	bne.n	800746a <PCU_Tasks+0xd6>
 800745c:	493c      	ldr	r1, [pc, #240]	@ (8007550 <PCU_Tasks+0x1bc>)
 800745e:	4835      	ldr	r0, [pc, #212]	@ (8007534 <PCU_Tasks+0x1a0>)
 8007460:	f00d fe34 	bl	80150cc <siprintf>
 8007464:	4833      	ldr	r0, [pc, #204]	@ (8007534 <PCU_Tasks+0x1a0>)
 8007466:	f7fe f8e9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packOff;
 800746a:	4b30      	ldr	r3, [pc, #192]	@ (800752c <PCU_Tasks+0x198>)
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007472:	e01e      	b.n	80074b2 <PCU_Tasks+0x11e>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800747a:	d91a      	bls.n	80074b2 <PCU_Tasks+0x11e>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 800747c:	4b2b      	ldr	r3, [pc, #172]	@ (800752c <PCU_Tasks+0x198>)
 800747e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007482:	2b03      	cmp	r3, #3
 8007484:	d004      	beq.n	8007490 <PCU_Tasks+0xfc>
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <PCU_Tasks+0x198>)
 8007488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800748c:	2b02      	cmp	r3, #2
 800748e:	d110      	bne.n	80074b2 <PCU_Tasks+0x11e>
        if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8007490:	4b2e      	ldr	r3, [pc, #184]	@ (800754c <PCU_Tasks+0x1b8>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 0311 	and.w	r3, r3, #17
 8007498:	2b11      	cmp	r3, #17
 800749a:	d106      	bne.n	80074aa <PCU_Tasks+0x116>
 800749c:	492d      	ldr	r1, [pc, #180]	@ (8007554 <PCU_Tasks+0x1c0>)
 800749e:	4825      	ldr	r0, [pc, #148]	@ (8007534 <PCU_Tasks+0x1a0>)
 80074a0:	f00d fe14 	bl	80150cc <siprintf>
 80074a4:	4823      	ldr	r0, [pc, #140]	@ (8007534 <PCU_Tasks+0x1a0>)
 80074a6:	f7fe f8c9 	bl	800563c <serialOut>
        pack.vcuRequestedState = packStandby;
 80074aa:	4b20      	ldr	r3, [pc, #128]	@ (800752c <PCU_Tasks+0x198>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      }
    }
    
    // Send periodic announcement requests
    uint32_t timeSinceLastAnnounce = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
    if ((etTimerOverflows - lastAnnounceRequest.overflows) == 0){
 80074b6:	4b21      	ldr	r3, [pc, #132]	@ (800753c <PCU_Tasks+0x1a8>)
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	4b21      	ldr	r3, [pc, #132]	@ (8007540 <PCU_Tasks+0x1ac>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d107      	bne.n	80074d2 <PCU_Tasks+0x13e>
      timeSinceLastAnnounce = htim1.Instance->CNT - lastAnnounceRequest.ticks;
 80074c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c8:	4b1c      	ldr	r3, [pc, #112]	@ (800753c <PCU_Tasks+0x1a8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e016      	b.n	8007500 <PCU_Tasks+0x16c>
    } else {
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074d2:	4b19      	ldr	r3, [pc, #100]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b19      	ldr	r3, [pc, #100]	@ (800753c <PCU_Tasks+0x1a8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1ad2      	subs	r2, r2, r3
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074dc:	4b16      	ldr	r3, [pc, #88]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4917      	ldr	r1, [pc, #92]	@ (8007540 <PCU_Tasks+0x1ac>)
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	4915      	ldr	r1, [pc, #84]	@ (800753c <PCU_Tasks+0x1a8>)
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	1a41      	subs	r1, r0, r1
 80074ec:	3901      	subs	r1, #1
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074f2:	441a      	add	r2, r3
                              (htim1.Instance->CNT);
 80074f4:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <PCU_Tasks+0x1a4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                              ((htim1.Init.Period +1) * (etTimerOverflows - (lastAnnounceRequest.overflows +1))) + 
 80074fa:	4413      	add	r3, r2
      timeSinceLastAnnounce = ((htim1.Init.Period +1) - lastAnnounceRequest.ticks) + 
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
    }
    
    if(timeSinceLastAnnounce > MCU_ANNOUNCE_REQUEST_INTERVAL){
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007506:	4293      	cmp	r3, r2
 8007508:	d90a      	bls.n	8007520 <PCU_Tasks+0x18c>
      MCU_RequestModuleAnnouncement();
 800750a:	f002 f96b 	bl	80097e4 <MCU_RequestModuleAnnouncement>
      lastAnnounceRequest.ticks = htim1.Instance->CNT;
 800750e:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <PCU_Tasks+0x1a4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	4a09      	ldr	r2, [pc, #36]	@ (800753c <PCU_Tasks+0x1a8>)
 8007516:	6013      	str	r3, [r2, #0]
      lastAnnounceRequest.overflows = etTimerOverflows;
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <PCU_Tasks+0x1ac>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a07      	ldr	r2, [pc, #28]	@ (800753c <PCU_Tasks+0x1a8>)
 800751e:	6053      	str	r3, [r2, #4]
    //Check for expired last contact from module
    /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
      sprintf(tempBuffer,"MCU DEBUG - Checking %d modules", pack.moduleCount); 
      serialOut(tempBuffer);
    }*/
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e1fb      	b.n	800791e <PCU_Tasks+0x58a>
 8007526:	bf00      	nop
 8007528:	20000d28 	.word	0x20000d28
 800752c:	2000a6ec 	.word	0x2000a6ec
 8007530:	08019114 	.word	0x08019114
 8007534:	20000b5c 	.word	0x20000b5c
 8007538:	200005d0 	.word	0x200005d0
 800753c:	20000d2c 	.word	0x20000d2c
 8007540:	20000d20 	.word	0x20000d20
 8007544:	20000d1e 	.word	0x20000d1e
 8007548:	20000d1c 	.word	0x20000d1c
 800754c:	2000000c 	.word	0x2000000c
 8007550:	08019150 	.word	0x08019150
 8007554:	08019174 	.word	0x08019174
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	4ab9      	ldr	r2, [pc, #740]	@ (8007840 <PCU_Tasks+0x4ac>)
 800755c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	4413      	add	r3, r2
 8007566:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f083 0301 	eor.w	r3, r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 81cd 	bne.w	8007912 <PCU_Tasks+0x57e>
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	4ab1      	ldr	r2, [pc, #708]	@ (8007840 <PCU_Tasks+0x4ac>)
 800757c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 81c1 	beq.w	8007912 <PCU_Tasks+0x57e>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	4aab      	ldr	r2, [pc, #684]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007594:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	3308      	adds	r3, #8
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f004 f9a4 	bl	800b8f0 <MCU_TicksSinceLastMessage>
 80075a8:	60b8      	str	r0, [r7, #8]
      /*if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
        sprintf(tempBuffer,"MCU DEBUG - module[%d] ID=%02x elapsed=%lu pending=%d", 
                index, module[index].moduleId, elapsedTicks, module[index].statusPending); 
        serialOut(tempBuffer);
      }*/
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80075b0:	f240 80f2 	bls.w	8007798 <PCU_Tasks+0x404>
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	4aa2      	ldr	r2, [pc, #648]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075b8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80e5 	beq.w	8007798 <PCU_Tasks+0x404>
        // Increment consecutive timeout counter
        module[index].consecutiveTimeouts++;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	499b      	ldr	r1, [pc, #620]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075d2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80075d6:	fb03 f202 	mul.w	r2, r3, r2
 80075da:	440a      	add	r2, r1
 80075dc:	f202 42c3 	addw	r2, r2, #1219	@ 0x4c3
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	3201      	adds	r2, #1
 80075e4:	b2d0      	uxtb	r0, r2
 80075e6:	4a96      	ldr	r2, [pc, #600]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075e8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 80075f6:	4602      	mov	r2, r0
 80075f8:	701a      	strb	r2, [r3, #0]
        module[index].statusMessagesReceived = 0;  // Clear any partial status
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	4a90      	ldr	r2, [pc, #576]	@ (8007840 <PCU_Tasks+0x4ac>)
 80075fe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
        
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	4a8b      	ldr	r2, [pc, #556]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007614:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d956      	bls.n	80076d6 <PCU_Tasks+0x342>
          // Max timeouts reached - deregister the module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 8007628:	4b86      	ldr	r3, [pc, #536]	@ (8007844 <PCU_Tasks+0x4b0>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0309 	and.w	r3, r3, #9
 8007630:	2b09      	cmp	r3, #9
 8007632:	d111      	bne.n	8007658 <PCU_Tasks+0x2c4>
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
                    module[index].moduleId, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	4a82      	ldr	r2, [pc, #520]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007638:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	3308      	adds	r3, #8
 8007644:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module ID=%02x exceeded %d consecutive timeouts - DEREGISTERING",
 8007646:	461a      	mov	r2, r3
 8007648:	2303      	movs	r3, #3
 800764a:	497f      	ldr	r1, [pc, #508]	@ (8007848 <PCU_Tasks+0x4b4>)
 800764c:	487f      	ldr	r0, [pc, #508]	@ (800784c <PCU_Tasks+0x4b8>)
 800764e:	f00d fd3d 	bl	80150cc <siprintf>
            serialOut(tempBuffer);
 8007652:	487e      	ldr	r0, [pc, #504]	@ (800784c <PCU_Tasks+0x4b8>)
 8007654:	f7fd fff2 	bl	800563c <serialOut>
          }
          
          // Send deregister message to the module
          MCU_DeRegisterModule(module[index].moduleId);
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	4a79      	ldr	r2, [pc, #484]	@ (8007840 <PCU_Tasks+0x4ac>)
 800765c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	3308      	adds	r3, #8
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f001 ff8c 	bl	8009588 <MCU_DeRegisterModule>
          
          // Log removal from pack
          if(debugMessages & DBG_MSG_DEREGISTER){
 8007670:	4b77      	ldr	r3, [pc, #476]	@ (8007850 <PCU_Tasks+0x4bc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <PCU_Tasks+0x326>
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
                    module[index].moduleId, (int)module[index].uniqueId, index);
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	4a70      	ldr	r2, [pc, #448]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007680:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3308      	adds	r3, #8
 800768c:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
 800768e:	4618      	mov	r0, r3
                    module[index].moduleId, (int)module[index].uniqueId, index);
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	4a6b      	ldr	r2, [pc, #428]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007694:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	3304      	adds	r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
            sprintf(tempBuffer,"MCU INFO - Removing module from pack: ID=%02x, UID=%08x, Index=%d", 
 80076a2:	461a      	mov	r2, r3
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	4602      	mov	r2, r0
 80076ac:	4969      	ldr	r1, [pc, #420]	@ (8007854 <PCU_Tasks+0x4c0>)
 80076ae:	4867      	ldr	r0, [pc, #412]	@ (800784c <PCU_Tasks+0x4b8>)
 80076b0:	f00d fd0c 	bl	80150cc <siprintf>
            serialOut(tempBuffer);
 80076b4:	4865      	ldr	r0, [pc, #404]	@ (800784c <PCU_Tasks+0x4b8>)
 80076b6:	f7fd ffc1 	bl	800563c <serialOut>
          }
          
          // Mark module as deregistered (don't remove from array)
          module[index].isRegistered = false;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	4a60      	ldr	r2, [pc, #384]	@ (8007840 <PCU_Tasks+0x4ac>)
 80076be:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
          
          // Update module counts
          MCU_UpdateModuleCounts();
 80076d0:	f004 f8c4 	bl	800b85c <MCU_UpdateModuleCounts>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 80076d4:	e11f      	b.n	8007916 <PCU_Tasks+0x582>
          
          // Continue without adjusting index (no array shift)
        }
        else if( module[index].faultCode.commsError == false){
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	4a59      	ldr	r2, [pc, #356]	@ (8007840 <PCU_Tasks+0x4ac>)
 80076da:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80076e8:	789b      	ldrb	r3, [r3, #2]
 80076ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f040 8110 	bne.w	8007916 <PCU_Tasks+0x582>
          // First timeout or still under limit - isolate module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ 
 80076f6:	4b53      	ldr	r3, [pc, #332]	@ (8007844 <PCU_Tasks+0x4b0>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0309 	and.w	r3, r3, #9
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d11f      	bne.n	8007742 <PCU_Tasks+0x3ae>
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	4a4e      	ldr	r2, [pc, #312]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007706:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	4413      	add	r3, r2
 8007710:	3308      	adds	r3, #8
 8007712:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 8007714:	4618      	mov	r0, r3
                    module[index].moduleId, module[index].consecutiveTimeouts, MCU_MAX_CONSECUTIVE_TIMEOUTS); 
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	4a49      	ldr	r2, [pc, #292]	@ (8007840 <PCU_Tasks+0x4ac>)
 800771a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	4413      	add	r3, r2
 8007724:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8007728:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x (timeout %d of %d)",
 800772a:	461a      	mov	r2, r3
 800772c:	2303      	movs	r3, #3
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	4602      	mov	r2, r0
 8007734:	4948      	ldr	r1, [pc, #288]	@ (8007858 <PCU_Tasks+0x4c4>)
 8007736:	4845      	ldr	r0, [pc, #276]	@ (800784c <PCU_Tasks+0x4b8>)
 8007738:	f00d fcc8 	bl	80150cc <siprintf>
            serialOut(tempBuffer);
 800773c:	4843      	ldr	r0, [pc, #268]	@ (800784c <PCU_Tasks+0x4b8>)
 800773e:	f7fd ff7d 	bl	800563c <serialOut>
          }
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8007742:	4b46      	ldr	r3, [pc, #280]	@ (800785c <PCU_Tasks+0x4c8>)
 8007744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007748:	2b02      	cmp	r3, #2
 800774a:	d10d      	bne.n	8007768 <PCU_Tasks+0x3d4>
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	4a3c      	ldr	r2, [pc, #240]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007750:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	3327      	adds	r3, #39	@ 0x27
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d102      	bne.n	8007768 <PCU_Tasks+0x3d4>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 8007762:	4b3e      	ldr	r3, [pc, #248]	@ (800785c <PCU_Tasks+0x4c8>)
 8007764:	2200      	movs	r2, #0
 8007766:	76da      	strb	r2, [r3, #27]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <PCU_Tasks+0x4ac>)
 800776c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	3328      	adds	r3, #40	@ 0x28
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	4a30      	ldr	r2, [pc, #192]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007780:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	4413      	add	r3, r2
 800778a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800778e:	7893      	ldrb	r3, [r2, #2]
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	7093      	strb	r3, [r2, #2]
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007796:	e0be      	b.n	8007916 <PCU_Tasks+0x582>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800779e:	d961      	bls.n	8007864 <PCU_Tasks+0x4d0>
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	4a27      	ldr	r2, [pc, #156]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077a4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f083 0301 	eor.w	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d052      	beq.n	8007864 <PCU_Tasks+0x4d0>
        // Send State
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 80077be:	4b21      	ldr	r3, [pc, #132]	@ (8007844 <PCU_Tasks+0x4b0>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d015      	beq.n	80077f6 <PCU_Tasks+0x462>
 80077ca:	4b24      	ldr	r3, [pc, #144]	@ (800785c <PCU_Tasks+0x4c8>)
 80077cc:	7d1b      	ldrb	r3, [r3, #20]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d911      	bls.n	80077f6 <PCU_Tasks+0x462>
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
                  module[index].moduleId, index); 
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077d6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	3308      	adds	r3, #8
 80077e2:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Requesting status from module ID=%02x (index=%d)", 
 80077e4:	461a      	mov	r2, r3
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	491d      	ldr	r1, [pc, #116]	@ (8007860 <PCU_Tasks+0x4cc>)
 80077ea:	4818      	ldr	r0, [pc, #96]	@ (800784c <PCU_Tasks+0x4b8>)
 80077ec:	f00d fc6e 	bl	80150cc <siprintf>
          serialOut(tempBuffer);
 80077f0:	4816      	ldr	r0, [pc, #88]	@ (800784c <PCU_Tasks+0x4b8>)
 80077f2:	f7fd ff23 	bl	800563c <serialOut>
        }
        MCU_RequestModuleStatus(module[index].moduleId);
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	4a11      	ldr	r2, [pc, #68]	@ (8007840 <PCU_Tasks+0x4ac>)
 80077fa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	4413      	add	r3, r2
 8007804:	3308      	adds	r3, #8
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f002 fc3f 	bl	800a08c <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	4a0b      	ldr	r2, [pc, #44]	@ (8007840 <PCU_Tasks+0x4ac>)
 8007812:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d078      	beq.n	8007918 <PCU_Tasks+0x584>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	4a05      	ldr	r2, [pc, #20]	@ (8007840 <PCU_Tasks+0x4ac>)
 800782a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	3308      	adds	r3, #8
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f002 f8a1 	bl	8009980 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 800783e:	e06b      	b.n	8007918 <PCU_Tasks+0x584>
 8007840:	20000dec 	.word	0x20000dec
 8007844:	2000000c 	.word	0x2000000c
 8007848:	08019198 	.word	0x08019198
 800784c:	20000b5c 	.word	0x20000b5c
 8007850:	20000010 	.word	0x20000010
 8007854:	080191e4 	.word	0x080191e4
 8007858:	08019228 	.word	0x08019228
 800785c:	2000a6ec 	.word	0x2000a6ec
 8007860:	08019260 	.word	0x08019260
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	4a9c      	ldr	r2, [pc, #624]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007868:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007876:	789b      	ldrb	r3, [r3, #2]
 8007878:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b01      	cmp	r3, #1
 8007880:	d10c      	bne.n	800789c <PCU_Tasks+0x508>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	4a94      	ldr	r2, [pc, #592]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007886:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007894:	7893      	ldrb	r3, [r2, #2]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	7093      	strb	r3, [r2, #2]
        }
        if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1 && index == 0){ 
 800789c:	4b8f      	ldr	r3, [pc, #572]	@ (8007adc <PCU_Tasks+0x748>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d037      	beq.n	8007918 <PCU_Tasks+0x584>
 80078a8:	4b8d      	ldr	r3, [pc, #564]	@ (8007ae0 <PCU_Tasks+0x74c>)
 80078aa:	7d1b      	ldrb	r3, [r3, #20]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d933      	bls.n	8007918 <PCU_Tasks+0x584>
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d130      	bne.n	8007918 <PCU_Tasks+0x584>
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	4a87      	ldr	r2, [pc, #540]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078ba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	4413      	add	r3, r2
 80078c4:	3308      	adds	r3, #8
 80078c6:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078c8:	461c      	mov	r4, r3
                  module[index].moduleId, elapsedTicks, module[index].statusPending,
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	4a82      	ldr	r2, [pc, #520]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078ce:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 80078dc:	781b      	ldrb	r3, [r3, #0]
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078de:	4618      	mov	r0, r3
                  module[index].faultCode.commsError); 
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	4a7d      	ldr	r2, [pc, #500]	@ (8007ad8 <PCU_Tasks+0x744>)
 80078e4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078f8:	b2db      	uxtb	r3, r3
          sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x elapsed=%lu pending=%d commsErr=%d", 
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4622      	mov	r2, r4
 8007902:	4978      	ldr	r1, [pc, #480]	@ (8007ae4 <PCU_Tasks+0x750>)
 8007904:	4878      	ldr	r0, [pc, #480]	@ (8007ae8 <PCU_Tasks+0x754>)
 8007906:	f00d fbe1 	bl	80150cc <siprintf>
          serialOut(tempBuffer);
 800790a:	4877      	ldr	r0, [pc, #476]	@ (8007ae8 <PCU_Tasks+0x754>)
 800790c:	f7fd fe96 	bl	800563c <serialOut>
 8007910:	e002      	b.n	8007918 <PCU_Tasks+0x584>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <PCU_Tasks+0x584>
        if(module[index].consecutiveTimeouts >= MCU_MAX_CONSECUTIVE_TIMEOUTS){
 8007916:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	3301      	adds	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b1f      	cmp	r3, #31
 8007922:	f67f ae19 	bls.w	8007558 <PCU_Tasks+0x1c4>
        }
      }
    }
    
    // Round-robin polling of modules
    if(pack.moduleCount > 0){
 8007926:	4b6e      	ldr	r3, [pc, #440]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007928:	7d1b      	ldrb	r3, [r3, #20]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d07b      	beq.n	8007a26 <PCU_Tasks+0x692>
      uint32_t timeSinceLastPoll = MCU_ElapsedTicks(&lastStatusPoll);
 800792e:	486f      	ldr	r0, [pc, #444]	@ (8007aec <PCU_Tasks+0x758>)
 8007930:	f004 f8c6 	bl	800bac0 <MCU_ElapsedTicks>
 8007934:	6078      	str	r0, [r7, #4]
      
      // Poll one module every 100ms to distribute the load
      if(timeSinceLastPoll > 100){
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b64      	cmp	r3, #100	@ 0x64
 800793a:	d974      	bls.n	8007a26 <PCU_Tasks+0x692>
        // Find the next valid module to poll
        uint8_t modulesToCheck = pack.moduleCount;
 800793c:	4b68      	ldr	r3, [pc, #416]	@ (8007ae0 <PCU_Tasks+0x74c>)
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	73fb      	strb	r3, [r7, #15]
        while(modulesToCheck > 0){
 8007942:	e06d      	b.n	8007a20 <PCU_Tasks+0x68c>
          if(nextModuleToPoll >= pack.moduleCount){
 8007944:	4b66      	ldr	r3, [pc, #408]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007946:	7d1a      	ldrb	r2, [r3, #20]
 8007948:	4b69      	ldr	r3, [pc, #420]	@ (8007af0 <PCU_Tasks+0x75c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d802      	bhi.n	8007956 <PCU_Tasks+0x5c2>
            nextModuleToPoll = 0;
 8007950:	4b67      	ldr	r3, [pc, #412]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
          }
          
          // Only poll modules that are not in timeout/error state
          if(module[nextModuleToPoll].statusPending == false && 
 8007956:	4b66      	ldr	r3, [pc, #408]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad8 <PCU_Tasks+0x744>)
 800795e:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f083 0301 	eor.w	r3, r3, #1
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d04a      	beq.n	8007a0e <PCU_Tasks+0x67a>
             module[nextModuleToPoll].faultCode.commsError == false){
 8007978:	4b5d      	ldr	r3, [pc, #372]	@ (8007af0 <PCU_Tasks+0x75c>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	4a56      	ldr	r2, [pc, #344]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007980:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007994:	b2db      	uxtb	r3, r3
          if(module[nextModuleToPoll].statusPending == false && 
 8007996:	2b00      	cmp	r3, #0
 8007998:	d139      	bne.n	8007a0e <PCU_Tasks+0x67a>
            /*if(((debugLevel & DBG_MCU) == DBG_MCU)){ 
              sprintf(tempBuffer,"MCU DEBUG - Round-robin polling module ID=%02x (index=%d)", 
                      module[nextModuleToPoll].moduleId, nextModuleToPoll); 
              serialOut(tempBuffer);
            }*/
            MCU_RequestModuleStatus(module[nextModuleToPoll].moduleId);
 800799a:	4b55      	ldr	r3, [pc, #340]	@ (8007af0 <PCU_Tasks+0x75c>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	4a4d      	ldr	r2, [pc, #308]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079a2:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	3308      	adds	r3, #8
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fb6b 	bl	800a08c <MCU_RequestModuleStatus>
            
            // Have we received the hardware info?
            if(module[nextModuleToPoll].hardwarePending){
 80079b6:	4b4e      	ldr	r3, [pc, #312]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4a46      	ldr	r2, [pc, #280]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079be:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <PCU_Tasks+0x65a>
              MCU_RequestHardware(module[nextModuleToPoll].moduleId);
 80079d2:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	4619      	mov	r1, r3
 80079d8:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad8 <PCU_Tasks+0x744>)
 80079da:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80079de:	fb01 f303 	mul.w	r3, r1, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	3308      	adds	r3, #8
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 ffc9 	bl	8009980 <MCU_RequestHardware>
            }
            
            // Move to next module for next poll
            nextModuleToPoll++;
 80079ee:	4b40      	ldr	r3, [pc, #256]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	4b3e      	ldr	r3, [pc, #248]	@ (8007af0 <PCU_Tasks+0x75c>)
 80079f8:	701a      	strb	r2, [r3, #0]
            
            // Update last poll time
            lastStatusPoll.ticks = htim1.Instance->CNT;
 80079fa:	4b3e      	ldr	r3, [pc, #248]	@ (8007af4 <PCU_Tasks+0x760>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	4a3a      	ldr	r2, [pc, #232]	@ (8007aec <PCU_Tasks+0x758>)
 8007a02:	6013      	str	r3, [r2, #0]
            lastStatusPoll.overflows = etTimerOverflows;
 8007a04:	4b3c      	ldr	r3, [pc, #240]	@ (8007af8 <PCU_Tasks+0x764>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a38      	ldr	r2, [pc, #224]	@ (8007aec <PCU_Tasks+0x758>)
 8007a0a:	6053      	str	r3, [r2, #4]
            break;
 8007a0c:	e00b      	b.n	8007a26 <PCU_Tasks+0x692>
          }
          
          nextModuleToPoll++;
 8007a0e:	4b38      	ldr	r3, [pc, #224]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4b36      	ldr	r3, [pc, #216]	@ (8007af0 <PCU_Tasks+0x75c>)
 8007a18:	701a      	strb	r2, [r3, #0]
          modulesToCheck--;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
        while(modulesToCheck > 0){
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d18e      	bne.n	8007944 <PCU_Tasks+0x5b0>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 8007a26:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae0 <PCU_Tasks+0x74c>)
 8007a28:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 8144 	bne.w	8007cba <PCU_Tasks+0x926>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
 8007a36:	e129      	b.n	8007c8c <PCU_Tasks+0x8f8>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	4a27      	ldr	r2, [pc, #156]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a3c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f083 0301 	eor.w	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 8116 	bne.w	8007c84 <PCU_Tasks+0x8f0>
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 810a 	beq.w	8007c84 <PCU_Tasks+0x8f0>
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	4a19      	ldr	r2, [pc, #100]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a74:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007a82:	789b      	ldrb	r3, [r3, #2]
 8007a84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d136      	bne.n	8007afc <PCU_Tasks+0x768>
        if (module[index].currentState != moduleOff){
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	4a11      	ldr	r2, [pc, #68]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007a92:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3327      	adds	r3, #39	@ 0x27
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80f0 	beq.w	8007c86 <PCU_Tasks+0x8f2>
          // Turn off the module
          module[index].nextState = moduleOff;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007aaa:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3328      	adds	r3, #40	@ 0x28
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <PCU_Tasks+0x744>)
 8007abe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007acc:	7893      	ldrb	r3, [r2, #2]
 8007ace:	f023 0304 	bic.w	r3, r3, #4
 8007ad2:	7093      	strb	r3, [r2, #2]
 8007ad4:	e0d7      	b.n	8007c86 <PCU_Tasks+0x8f2>
 8007ad6:	bf00      	nop
 8007ad8:	20000dec 	.word	0x20000dec
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	2000a6ec 	.word	0x2000a6ec
 8007ae4:	080192a0 	.word	0x080192a0
 8007ae8:	20000b5c 	.word	0x20000b5c
 8007aec:	2000a740 	.word	0x2000a740
 8007af0:	2000a748 	.word	0x2000a748
 8007af4:	200005d0 	.word	0x200005d0
 8007af8:	20000d20 	.word	0x20000d20
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	4aa3      	ldr	r2, [pc, #652]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b00:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 80b5 	bne.w	8007c86 <PCU_Tasks+0x8f2>
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	4a9b      	ldr	r2, [pc, #620]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b20:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 80a5 	bne.w	8007c86 <PCU_Tasks+0x8f2>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	4a93      	ldr	r2, [pc, #588]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b40:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	332a      	adds	r3, #42	@ 0x2a
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d13a      	bne.n	8007bc8 <PCU_Tasks+0x834>
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	4a8d      	ldr	r2, [pc, #564]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b56:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	3329      	adds	r3, #41	@ 0x29
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	4989      	ldr	r1, [pc, #548]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b68:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007b6c:	fb00 f303 	mul.w	r3, r0, r3
 8007b70:	440b      	add	r3, r1
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d126      	bne.n	8007bc8 <PCU_Tasks+0x834>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	4a83      	ldr	r2, [pc, #524]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b7e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	4413      	add	r3, r2
 8007b88:	3308      	adds	r3, #8
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f003 ff23 	bl	800b9d8 <MCU_TicksSinceLastStateTx>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b98:	d975      	bls.n	8007c86 <PCU_Tasks+0x8f2>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	4a7b      	ldr	r2, [pc, #492]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007b9e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3308      	adds	r3, #8
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	4977      	ldr	r1, [pc, #476]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007bb0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007bb4:	fb00 f303 	mul.w	r3, r0, r3
 8007bb8:	440b      	add	r3, r1
 8007bba:	3328      	adds	r3, #40	@ 0x28
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f003 fbb1 	bl	800b328 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007bc6:	e05e      	b.n	8007c86 <PCU_Tasks+0x8f2>
          }
        }else {
          if(((debugLevel & DBG_MCU) == DBG_MCU) && pack.moduleCount > 1){ 
 8007bc8:	4b71      	ldr	r3, [pc, #452]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d040      	beq.n	8007c56 <PCU_Tasks+0x8c2>
 8007bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d93c      	bls.n	8007c56 <PCU_Tasks+0x8c2>
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	4a6b      	ldr	r2, [pc, #428]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007be0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3308      	adds	r3, #8
 8007bec:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007bee:	461d      	mov	r5, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	4a66      	ldr	r2, [pc, #408]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007bf4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3327      	adds	r3, #39	@ 0x27
 8007c00:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c02:	461e      	mov	r6, r3
                    module[index].moduleId, module[index].currentState, module[index].nextState,
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	4a61      	ldr	r2, [pc, #388]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c08:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3328      	adds	r3, #40	@ 0x28
 8007c14:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c16:	4618      	mov	r0, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c1c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3329      	adds	r3, #41	@ 0x29
 8007c28:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c2a:	461c      	mov	r4, r3
                    module[index].command.commandedState, module[index].command.commandStatus); 
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	4a57      	ldr	r2, [pc, #348]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c30:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	332a      	adds	r3, #42	@ 0x2a
 8007c3c:	781b      	ldrb	r3, [r3, #0]
            sprintf(tempBuffer,"MCU DEBUG - Module ID=%02x current=%d next=%d cmd=%d cmdStatus=%d", 
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	9401      	str	r4, [sp, #4]
 8007c42:	9000      	str	r0, [sp, #0]
 8007c44:	4633      	mov	r3, r6
 8007c46:	462a      	mov	r2, r5
 8007c48:	4953      	ldr	r1, [pc, #332]	@ (8007d98 <PCU_Tasks+0xa04>)
 8007c4a:	4854      	ldr	r0, [pc, #336]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007c4c:	f00d fa3e 	bl	80150cc <siprintf>
            serialOut(tempBuffer);
 8007c50:	4852      	ldr	r0, [pc, #328]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007c52:	f7fd fcf3 	bl	800563c <serialOut>
          }
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	4a4c      	ldr	r2, [pc, #304]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007c5e:	fb01 f303 	mul.w	r3, r1, r3
 8007c62:	4413      	add	r3, r2
 8007c64:	3308      	adds	r3, #8
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	4948      	ldr	r1, [pc, #288]	@ (8007d8c <PCU_Tasks+0x9f8>)
 8007c6c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8007c70:	fb00 f303 	mul.w	r3, r0, r3
 8007c74:	440b      	add	r3, r1
 8007c76:	3328      	adds	r3, #40	@ 0x28
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f003 fb53 	bl	800b328 <MCU_TransmitState>
 8007c82:	e000      	b.n	8007c86 <PCU_Tasks+0x8f2>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007c84:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b1f      	cmp	r3, #31
 8007c90:	f67f aed2 	bls.w	8007a38 <PCU_Tasks+0x6a4>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007c94:	4b42      	ldr	r3, [pc, #264]	@ (8007da0 <PCU_Tasks+0xa0c>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 82eb 	beq.w	8008274 <PCU_Tasks+0xee0>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8007c9e:	f006 f87d 	bl	800dd9c <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8007ca2:	f006 f9ad 	bl	800e000 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 8007ca6:	f006 fa4b 	bl	800e140 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 8007caa:	f006 fadd 	bl	800e268 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8007cae:	f006 fb6f 	bl	800e390 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007da0 <PCU_Tasks+0xa0c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 8007cb8:	e2dc      	b.n	8008274 <PCU_Tasks+0xee0>
  } else if(pack.controlMode == packMode){
 8007cba:	4b36      	ldr	r3, [pc, #216]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cbc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 82d7 	bne.w	8008274 <PCU_Tasks+0xee0>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8007cc6:	4b33      	ldr	r3, [pc, #204]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d005      	beq.n	8007cdc <PCU_Tasks+0x948>
 8007cd0:	4b30      	ldr	r3, [pc, #192]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	f040 813a 	bne.w	8007f50 <PCU_Tasks+0xbbc>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cde:	7edb      	ldrb	r3, [r3, #27]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 80a1 	bne.w	8007e28 <PCU_Tasks+0xa94>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8007cee:	2b88      	cmp	r3, #136	@ 0x88
 8007cf0:	d115      	bne.n	8007d1e <PCU_Tasks+0x98a>
 8007cf2:	4b28      	ldr	r3, [pc, #160]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007cf4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8007da4 <PCU_Tasks+0xa10>)
 8007cfa:	fba2 1203 	umull	r1, r2, r2, r3
 8007cfe:	0b12      	lsrs	r2, r2, #12
 8007d00:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d04:	fb01 f202 	mul.w	r2, r1, r2
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <PCU_Tasks+0x98a>
 8007d10:	4925      	ldr	r1, [pc, #148]	@ (8007da8 <PCU_Tasks+0xa14>)
 8007d12:	4822      	ldr	r0, [pc, #136]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d14:	f00d f9da 	bl	80150cc <siprintf>
 8007d18:	4820      	ldr	r0, [pc, #128]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d1a:	f7fd fc8f 	bl	800563c <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8007d1e:	f002 fa6f 	bl	800a200 <MCU_FindMaxVoltageModule>
 8007d22:	4603      	mov	r3, r0
 8007d24:	70fb      	strb	r3, [r7, #3]
        if (moduleId == 0){
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d141      	bne.n	8007db0 <PCU_Tasks+0xa1c>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8007d2c:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <PCU_Tasks+0x9fc>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f003 0309 	and.w	r3, r3, #9
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	d115      	bne.n	8007d64 <PCU_Tasks+0x9d0>
 8007d38:	4b16      	ldr	r3, [pc, #88]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d3a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d3e:	4a19      	ldr	r2, [pc, #100]	@ (8007da4 <PCU_Tasks+0xa10>)
 8007d40:	fba2 1203 	umull	r1, r2, r2, r3
 8007d44:	0b12      	lsrs	r2, r2, #12
 8007d46:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d4a:	fb01 f202 	mul.w	r2, r1, r2
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <PCU_Tasks+0x9d0>
 8007d56:	4915      	ldr	r1, [pc, #84]	@ (8007dac <PCU_Tasks+0xa18>)
 8007d58:	4810      	ldr	r0, [pc, #64]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d5a:	f00d f9b7 	bl	80150cc <siprintf>
 8007d5e:	480f      	ldr	r0, [pc, #60]	@ (8007d9c <PCU_Tasks+0xa08>)
 8007d60:	f7fd fc6c 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007d64:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d66:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d70:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d76:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007d7a:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d952      	bls.n	8007e28 <PCU_Tasks+0xa94>
 8007d82:	4b04      	ldr	r3, [pc, #16]	@ (8007d94 <PCU_Tasks+0xa00>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007d8a:	e04d      	b.n	8007e28 <PCU_Tasks+0xa94>
 8007d8c:	20000dec 	.word	0x20000dec
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	2000a6ec 	.word	0x2000a6ec
 8007d98:	080192e0 	.word	0x080192e0
 8007d9c:	20000b5c 	.word	0x20000b5c
 8007da0:	20000d26 	.word	0x20000d26
 8007da4:	d1b71759 	.word	0xd1b71759
 8007da8:	08019324 	.word	0x08019324
 8007dac:	08019358 	.word	0x08019358
        }else if (moduleId == pack.moduleCount +1 ){
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4bb8      	ldr	r3, [pc, #736]	@ (8008094 <PCU_Tasks+0xd00>)
 8007db4:	7d1b      	ldrb	r3, [r3, #20]
 8007db6:	3301      	adds	r3, #1
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d12f      	bne.n	8007e1c <PCU_Tasks+0xa88>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8007dbc:	4bb6      	ldr	r3, [pc, #728]	@ (8008098 <PCU_Tasks+0xd04>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0309 	and.w	r3, r3, #9
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	d115      	bne.n	8007df4 <PCU_Tasks+0xa60>
 8007dc8:	4bb2      	ldr	r3, [pc, #712]	@ (8008094 <PCU_Tasks+0xd00>)
 8007dca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007dce:	4ab3      	ldr	r2, [pc, #716]	@ (800809c <PCU_Tasks+0xd08>)
 8007dd0:	fba2 1203 	umull	r1, r2, r2, r3
 8007dd4:	0b12      	lsrs	r2, r2, #12
 8007dd6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007dda:	fb01 f202 	mul.w	r2, r1, r2
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <PCU_Tasks+0xa60>
 8007de6:	49ae      	ldr	r1, [pc, #696]	@ (80080a0 <PCU_Tasks+0xd0c>)
 8007de8:	48ae      	ldr	r0, [pc, #696]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007dea:	f00d f96f 	bl	80150cc <siprintf>
 8007dee:	48ad      	ldr	r0, [pc, #692]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007df0:	f7fd fc24 	bl	800563c <serialOut>
          pack.errorCounts.firstModule ++;
 8007df4:	4ba7      	ldr	r3, [pc, #668]	@ (8008094 <PCU_Tasks+0xd00>)
 8007df6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007e04:	4ba3      	ldr	r3, [pc, #652]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e06:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007e0a:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d90a      	bls.n	8007e28 <PCU_Tasks+0xa94>
 8007e12:	4ba0      	ldr	r3, [pc, #640]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8007e1a:	e005      	b.n	8007e28 <PCU_Tasks+0xa94>
          pack.powerStatus.firstModuleId = moduleId;
 8007e1c:	4a9d      	ldr	r2, [pc, #628]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	7693      	strb	r3, [r2, #26]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8007e22:	4b9c      	ldr	r3, [pc, #624]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	76da      	strb	r2, [r3, #27]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8007e28:	4b9a      	ldr	r3, [pc, #616]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e2a:	7edb      	ldrb	r3, [r3, #27]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f040 808f 	bne.w	8007f50 <PCU_Tasks+0xbbc>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8007e32:	4b98      	ldr	r3, [pc, #608]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e34:	7e9b      	ldrb	r3, [r3, #26]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f003 fcd8 	bl	800b7ec <MCU_ModuleIndexFromId>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75bb      	strb	r3, [r7, #22]
        if (firstModuleIndex < MAX_MODULES_PER_PACK){
 8007e40:	7dbb      	ldrb	r3, [r7, #22]
 8007e42:	2b1f      	cmp	r3, #31
 8007e44:	d877      	bhi.n	8007f36 <PCU_Tasks+0xba2>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8007e46:	7dbb      	ldrb	r3, [r7, #22]
 8007e48:	4a97      	ldr	r2, [pc, #604]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007e4a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007e58:	789b      	ldrb	r3, [r3, #2]
 8007e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d00e      	beq.n	8007e82 <PCU_Tasks+0xaee>
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
 8007e66:	4a90      	ldr	r2, [pc, #576]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007e68:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007e76:	789b      	ldrb	r3, [r3, #2]
 8007e78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d113      	bne.n	8007eaa <PCU_Tasks+0xb16>
             pack.powerStatus.powerStage = stageSelectModule;
 8007e82:	4b84      	ldr	r3, [pc, #528]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	76da      	strb	r2, [r3, #27]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007e88:	4b83      	ldr	r3, [pc, #524]	@ (8008098 <PCU_Tasks+0xd04>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 0309 	and.w	r3, r3, #9
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d15d      	bne.n	8007f50 <PCU_Tasks+0xbbc>
 8007e94:	4b7f      	ldr	r3, [pc, #508]	@ (8008094 <PCU_Tasks+0xd00>)
 8007e96:	7e9b      	ldrb	r3, [r3, #26]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4984      	ldr	r1, [pc, #528]	@ (80080ac <PCU_Tasks+0xd18>)
 8007e9c:	4881      	ldr	r0, [pc, #516]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007e9e:	f00d f915 	bl	80150cc <siprintf>
 8007ea2:	4880      	ldr	r0, [pc, #512]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007ea4:	f7fd fbca 	bl	800563c <serialOut>
 8007ea8:	e052      	b.n	8007f50 <PCU_Tasks+0xbbc>
          } else if (pack.vcuRequestedState == packOn){
 8007eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8008094 <PCU_Tasks+0xd00>)
 8007eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d11d      	bne.n	8007ef0 <PCU_Tasks+0xb5c>
            if (module[firstModuleIndex].currentState == moduleOn){
 8007eb4:	7dbb      	ldrb	r3, [r7, #22]
 8007eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007eb8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3327      	adds	r3, #39	@ 0x27
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <PCU_Tasks+0xb46>
              pack.state = packOn;
 8007eca:	4b72      	ldr	r3, [pc, #456]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007ed2:	4b70      	ldr	r3, [pc, #448]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	76da      	strb	r2, [r3, #27]
 8007ed8:	e03a      	b.n	8007f50 <PCU_Tasks+0xbbc>
                module[firstModuleIndex].nextState = moduleOn;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
 8007edc:	4a72      	ldr	r2, [pc, #456]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007ede:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3328      	adds	r3, #40	@ 0x28
 8007eea:	2203      	movs	r2, #3
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e02f      	b.n	8007f50 <PCU_Tasks+0xbbc>
          } else if (pack.vcuRequestedState == packPrecharge){
 8007ef0:	4b68      	ldr	r3, [pc, #416]	@ (8008094 <PCU_Tasks+0xd00>)
 8007ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d12a      	bne.n	8007f50 <PCU_Tasks+0xbbc>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8007efa:	7dbb      	ldrb	r3, [r7, #22]
 8007efc:	4a6a      	ldr	r2, [pc, #424]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007efe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	3327      	adds	r3, #39	@ 0x27
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d107      	bne.n	8007f20 <PCU_Tasks+0xb8c>
              pack.state = packPrecharge;
 8007f10:	4b60      	ldr	r3, [pc, #384]	@ (8008094 <PCU_Tasks+0xd00>)
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              pack.powerStatus.powerStage = stageIdle;
 8007f18:	4b5e      	ldr	r3, [pc, #376]	@ (8008094 <PCU_Tasks+0xd00>)
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	76da      	strb	r2, [r3, #27]
 8007f1e:	e017      	b.n	8007f50 <PCU_Tasks+0xbbc>
                module[firstModuleIndex].nextState = modulePrecharge;
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
 8007f22:	4a61      	ldr	r2, [pc, #388]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f24:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3328      	adds	r3, #40	@ 0x28
 8007f30:	2202      	movs	r2, #2
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e00c      	b.n	8007f50 <PCU_Tasks+0xbbc>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8007f36:	4b58      	ldr	r3, [pc, #352]	@ (8008098 <PCU_Tasks+0xd04>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0309 	and.w	r3, r3, #9
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d106      	bne.n	8007f50 <PCU_Tasks+0xbbc>
 8007f42:	495b      	ldr	r1, [pc, #364]	@ (80080b0 <PCU_Tasks+0xd1c>)
 8007f44:	4857      	ldr	r0, [pc, #348]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007f46:	f00d f8c1 	bl	80150cc <siprintf>
 8007f4a:	4856      	ldr	r0, [pc, #344]	@ (80080a4 <PCU_Tasks+0xd10>)
 8007f4c:	f7fd fb76 	bl	800563c <serialOut>
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 8007f50:	2300      	movs	r3, #0
 8007f52:	75fb      	strb	r3, [r7, #23]
 8007f54:	e15d      	b.n	8008212 <PCU_Tasks+0xe7e>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	4a53      	ldr	r2, [pc, #332]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f5e:	fb01 f303 	mul.w	r3, r1, r3
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 814a 	bne.w	800820a <PCU_Tasks+0xe76>
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	4a4b      	ldr	r2, [pc, #300]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f7a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3304      	adds	r3, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 813e 	beq.w	800820a <PCU_Tasks+0xe76>
      if(module[index].faultCode.overCurrent == true){
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	4a45      	ldr	r2, [pc, #276]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007f92:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d127      	bne.n	8007ffc <PCU_Tasks+0xc68>
        if (pack.vcuRequestedState != packOff){
 8007fac:	4b39      	ldr	r3, [pc, #228]	@ (8008094 <PCU_Tasks+0xd00>)
 8007fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <PCU_Tasks+0xc38>
          module[index].nextState = moduleStandby;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fba:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3328      	adds	r3, #40	@ 0x28
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e0c1      	b.n	8008150 <PCU_Tasks+0xdbc>
          module[index].nextState = moduleOff;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	4a36      	ldr	r2, [pc, #216]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fd0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	3328      	adds	r3, #40	@ 0x28
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	4a31      	ldr	r2, [pc, #196]	@ (80080a8 <PCU_Tasks+0xd14>)
 8007fe4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8007ff2:	7893      	ldrb	r3, [r2, #2]
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	7093      	strb	r3, [r2, #2]
 8007ffa:	e0a9      	b.n	8008150 <PCU_Tasks+0xdbc>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <PCU_Tasks+0xd14>)
 8008000:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	4413      	add	r3, r2
 800800a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 809a 	bne.w	8008150 <PCU_Tasks+0xdbc>
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	4a22      	ldr	r2, [pc, #136]	@ (80080a8 <PCU_Tasks+0xd14>)
 8008020:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 808a 	bne.w	8008150 <PCU_Tasks+0xdbc>
        switch (pack.vcuRequestedState){
 800803c:	4b15      	ldr	r3, [pc, #84]	@ (8008094 <PCU_Tasks+0xd00>)
 800803e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008042:	2b03      	cmp	r3, #3
 8008044:	f200 8083 	bhi.w	800814e <PCU_Tasks+0xdba>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <PCU_Tasks+0xcbc>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008129 	.word	0x08008129
 8008054:	08008103 	.word	0x08008103
 8008058:	080080d3 	.word	0x080080d3
 800805c:	08008061 	.word	0x08008061
            if(pack.state == packOn){
 8008060:	4b0c      	ldr	r3, [pc, #48]	@ (8008094 <PCU_Tasks+0xd00>)
 8008062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008066:	2b03      	cmp	r3, #3
 8008068:	d109      	bne.n	800807e <PCU_Tasks+0xcea>
              module[index].nextState = moduleOn;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	4a0e      	ldr	r2, [pc, #56]	@ (80080a8 <PCU_Tasks+0xd14>)
 800806e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	3328      	adds	r3, #40	@ 0x28
 800807a:	2203      	movs	r2, #3
 800807c:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 800807e:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <PCU_Tasks+0xd00>)
 8008080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008084:	2b09      	cmp	r3, #9
 8008086:	d815      	bhi.n	80080b4 <PCU_Tasks+0xd20>
 8008088:	4b02      	ldr	r3, [pc, #8]	@ (8008094 <PCU_Tasks+0xd00>)
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008090:	e05e      	b.n	8008150 <PCU_Tasks+0xdbc>
 8008092:	bf00      	nop
 8008094:	2000a6ec 	.word	0x2000a6ec
 8008098:	2000000c 	.word	0x2000000c
 800809c:	d1b71759 	.word	0xd1b71759
 80080a0:	0801937c 	.word	0x0801937c
 80080a4:	20000b5c 	.word	0x20000b5c
 80080a8:	20000dec 	.word	0x20000dec
 80080ac:	080193a0 	.word	0x080193a0
 80080b0:	080193e0 	.word	0x080193e0
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 80080b4:	4b71      	ldr	r3, [pc, #452]	@ (800827c <PCU_Tasks+0xee8>)
 80080b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ba:	2bbe      	cmp	r3, #190	@ 0xbe
 80080bc:	d904      	bls.n	80080c8 <PCU_Tasks+0xd34>
 80080be:	4b6f      	ldr	r3, [pc, #444]	@ (800827c <PCU_Tasks+0xee8>)
 80080c0:	2203      	movs	r2, #3
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80080c6:	e043      	b.n	8008150 <PCU_Tasks+0xdbc>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 80080c8:	4b6c      	ldr	r3, [pc, #432]	@ (800827c <PCU_Tasks+0xee8>)
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 80080d0:	e03e      	b.n	8008150 <PCU_Tasks+0xdbc>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 80080d2:	4b6a      	ldr	r3, [pc, #424]	@ (800827c <PCU_Tasks+0xee8>)
 80080d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d10d      	bne.n	80080f8 <PCU_Tasks+0xd64>
 80080dc:	7dfa      	ldrb	r2, [r7, #23]
 80080de:	7dbb      	ldrb	r3, [r7, #22]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d009      	beq.n	80080f8 <PCU_Tasks+0xd64>
              module[index].nextState = moduleStandby;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	4a66      	ldr	r2, [pc, #408]	@ (8008280 <PCU_Tasks+0xeec>)
 80080e8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	3328      	adds	r3, #40	@ 0x28
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 80080f8:	4b60      	ldr	r3, [pc, #384]	@ (800827c <PCU_Tasks+0xee8>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008100:	e026      	b.n	8008150 <PCU_Tasks+0xdbc>
            module[index].nextState = moduleStandby;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	4a5e      	ldr	r2, [pc, #376]	@ (8008280 <PCU_Tasks+0xeec>)
 8008106:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800810a:	fb01 f303 	mul.w	r3, r1, r3
 800810e:	4413      	add	r3, r2
 8008110:	3328      	adds	r3, #40	@ 0x28
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8008116:	4b59      	ldr	r3, [pc, #356]	@ (800827c <PCU_Tasks+0xee8>)
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 800811e:	4b57      	ldr	r3, [pc, #348]	@ (800827c <PCU_Tasks+0xee8>)
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 8008126:	e013      	b.n	8008150 <PCU_Tasks+0xdbc>
            module[index].nextState = moduleOff;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	4a55      	ldr	r2, [pc, #340]	@ (8008280 <PCU_Tasks+0xeec>)
 800812c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008130:	fb01 f303 	mul.w	r3, r1, r3
 8008134:	4413      	add	r3, r2
 8008136:	3328      	adds	r3, #40	@ 0x28
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 800813c:	4b4f      	ldr	r3, [pc, #316]	@ (800827c <PCU_Tasks+0xee8>)
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            pack.status = packStatusOff;
 8008144:	4b4d      	ldr	r3, [pc, #308]	@ (800827c <PCU_Tasks+0xee8>)
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            break;
 800814c:	e000      	b.n	8008150 <PCU_Tasks+0xdbc>
            break;
 800814e:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	4a4b      	ldr	r2, [pc, #300]	@ (8008280 <PCU_Tasks+0xeec>)
 8008154:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	332a      	adds	r3, #42	@ 0x2a
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d13a      	bne.n	80081dc <PCU_Tasks+0xe48>
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	4a45      	ldr	r2, [pc, #276]	@ (8008280 <PCU_Tasks+0xeec>)
 800816a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	3329      	adds	r3, #41	@ 0x29
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	4941      	ldr	r1, [pc, #260]	@ (8008280 <PCU_Tasks+0xeec>)
 800817c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8008180:	fb00 f303 	mul.w	r3, r0, r3
 8008184:	440b      	add	r3, r1
 8008186:	3328      	adds	r3, #40	@ 0x28
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d126      	bne.n	80081dc <PCU_Tasks+0xe48>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	4a3b      	ldr	r2, [pc, #236]	@ (8008280 <PCU_Tasks+0xeec>)
 8008192:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	4413      	add	r3, r2
 800819c:	3308      	adds	r3, #8
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f003 fc19 	bl	800b9d8 <MCU_TicksSinceLastStateTx>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081ac:	d92e      	bls.n	800820c <PCU_Tasks+0xe78>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <PCU_Tasks+0xeec>)
 80081b2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3308      	adds	r3, #8
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	492f      	ldr	r1, [pc, #188]	@ (8008280 <PCU_Tasks+0xeec>)
 80081c4:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80081c8:	fb00 f303 	mul.w	r3, r0, r3
 80081cc:	440b      	add	r3, r1
 80081ce:	3328      	adds	r3, #40	@ 0x28
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f003 f8a7 	bl	800b328 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80081da:	e017      	b.n	800820c <PCU_Tasks+0xe78>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	4a28      	ldr	r2, [pc, #160]	@ (8008280 <PCU_Tasks+0xeec>)
 80081e0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	3308      	adds	r3, #8
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	4923      	ldr	r1, [pc, #140]	@ (8008280 <PCU_Tasks+0xeec>)
 80081f2:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80081f6:	fb00 f303 	mul.w	r3, r0, r3
 80081fa:	440b      	add	r3, r1
 80081fc:	3328      	adds	r3, #40	@ 0x28
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f003 f890 	bl	800b328 <MCU_TransmitState>
 8008208:	e000      	b.n	800820c <PCU_Tasks+0xe78>
      if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800820a:	bf00      	nop
    for (index =0;index < MAX_MODULES_PER_PACK;index++){
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	3301      	adds	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	2b1f      	cmp	r3, #31
 8008216:	f67f ae9e 	bls.w	8007f56 <PCU_Tasks+0xbc2>
    MCU_UpdateStats();
 800821a:	f000 f8e9 	bl	80083f0 <MCU_UpdateStats>
    if(sendMaxState >0){
 800821e:	4b19      	ldr	r3, [pc, #100]	@ (8008284 <PCU_Tasks+0xef0>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <PCU_Tasks+0xe9e>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8008226:	4b15      	ldr	r3, [pc, #84]	@ (800827c <PCU_Tasks+0xee8>)
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822c:	4618      	mov	r0, r3
 800822e:	f003 f939 	bl	800b4a4 <MCU_TransmitMaxState>
    if(sendState > 0){
 8008232:	4b15      	ldr	r3, [pc, #84]	@ (8008288 <PCU_Tasks+0xef4>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01c      	beq.n	8008274 <PCU_Tasks+0xee0>
      if (pack.rtcValid == false) VCU_RequestTime();
 800823a:	4b10      	ldr	r3, [pc, #64]	@ (800827c <PCU_Tasks+0xee8>)
 800823c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008240:	f083 0301 	eor.w	r3, r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <PCU_Tasks+0xeba>
 800824a:	f006 f935 	bl	800e4b8 <VCU_RequestTime>
      VCU_TransmitBmsState();
 800824e:	f004 ff07 	bl	800d060 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8008252:	f004 ffed 	bl	800d230 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8008256:	f005 f8cf 	bl	800d3f8 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 800825a:	f005 fa11 	bl	800d680 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 800825e:	f005 fb3b 	bl	800d8d8 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8008262:	f005 fc59 	bl	800db18 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8008266:	f005 fcc5 	bl	800dbf4 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 800826a:	f005 fd31 	bl	800dcd0 <VCU_TransmitBmsData10>
      sendState=0;
 800826e:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <PCU_Tasks+0xef4>)
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827c:	2000a6ec 	.word	0x2000a6ec
 8008280:	20000dec 	.word	0x20000dec
 8008284:	20000d25 	.word	0x20000d25
 8008288:	20000d26 	.word	0x20000d26

0800828c <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	4618      	mov	r0, r3
 800829a:	f7f8 fec3 	bl	8001024 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fa fb76 	bl	8002992 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	21ff      	movs	r1, #255	@ 0xff
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fba5 	bl	80029fa <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 80082b0:	484a      	ldr	r0, [pc, #296]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082b2:	f7f9 fd87 	bl	8001dc4 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 80082b6:	4a49      	ldr	r2, [pc, #292]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082b8:	7813      	ldrb	r3, [r2, #0]
 80082ba:	f043 0320 	orr.w	r3, r3, #32
 80082be:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 80082c0:	4a46      	ldr	r2, [pc, #280]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082c2:	7853      	ldrb	r3, [r2, #1]
 80082c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c8:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	4943      	ldr	r1, [pc, #268]	@ (80083dc <DRV_CANFDSPI_Init+0x150>)
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f9 fcea 	bl	8001ca8 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80082d4:	4842      	ldr	r0, [pc, #264]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082d6:	f7f9 fe85 	bl	8001fe4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 80082da:	4a41      	ldr	r2, [pc, #260]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082dc:	7853      	ldrb	r3, [r2, #1]
 80082de:	2107      	movs	r1, #7
 80082e0:	f361 0304 	bfi	r3, r1, #0, #5
 80082e4:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 80082e6:	4a3e      	ldr	r2, [pc, #248]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082e8:	7853      	ldrb	r3, [r2, #1]
 80082ea:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80082ee:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 80082f0:	4a3b      	ldr	r2, [pc, #236]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 80082f2:	7813      	ldrb	r3, [r2, #0]
 80082f4:	2101      	movs	r1, #1
 80082f6:	f361 0345 	bfi	r3, r1, #1, #5
 80082fa:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	4a38      	ldr	r2, [pc, #224]	@ (80083e0 <DRV_CANFDSPI_Init+0x154>)
 8008300:	2102      	movs	r1, #2
 8008302:	4618      	mov	r0, r3
 8008304:	f7f9 fe16 	bl	8001f34 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8008308:	4836      	ldr	r0, [pc, #216]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 800830a:	f7fa f8c3 	bl	8002494 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 800830e:	4a35      	ldr	r2, [pc, #212]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 8008310:	7813      	ldrb	r3, [r2, #0]
 8008312:	210f      	movs	r1, #15
 8008314:	f361 0345 	bfi	r3, r1, #1, #5
 8008318:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 800831a:	4a32      	ldr	r2, [pc, #200]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 800831c:	8813      	ldrh	r3, [r2, #0]
 800831e:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8008322:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	4a2f      	ldr	r2, [pc, #188]	@ (80083e4 <DRV_CANFDSPI_Init+0x158>)
 8008328:	2101      	movs	r1, #1
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa f866 	bl	80023fc <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8008330:	4b2d      	ldr	r3, [pc, #180]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008338:	8813      	ldrh	r3, [r2, #0]
 800833a:	f36f 030a 	bfc	r3, #0, #11
 800833e:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8008340:	4a29      	ldr	r2, [pc, #164]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008342:	78d3      	ldrb	r3, [r2, #3]
 8008344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008348:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 800834a:	4a27      	ldr	r2, [pc, #156]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	f36f 23dc 	bfc	r3, #11, #18
 8008352:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	4a24      	ldr	r2, [pc, #144]	@ (80083e8 <DRV_CANFDSPI_Init+0x15c>)
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 ffd0 	bl	8002300 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8008360:	4b22      	ldr	r3, [pc, #136]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8008366:	4a21      	ldr	r2, [pc, #132]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008368:	8813      	ldrh	r3, [r2, #0]
 800836a:	f36f 030a 	bfc	r3, #0, #11
 800836e:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8008370:	4a1e      	ldr	r2, [pc, #120]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008372:	78d3      	ldrb	r3, [r2, #3]
 8008374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008378:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 800837a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	f36f 23dc 	bfc	r3, #11, #18
 8008382:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	4a19      	ldr	r2, [pc, #100]	@ (80083ec <DRV_CANFDSPI_Init+0x160>)
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f7f9 ffda 	bl	8002344 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8008390:	79f8      	ldrb	r0, [r7, #7]
 8008392:	2301      	movs	r3, #1
 8008394:	2201      	movs	r2, #1
 8008396:	2100      	movs	r1, #0
 8008398:	f7f9 fff8 	bl	800238c <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 800839c:	79f8      	ldrb	r0, [r7, #7]
 800839e:	2300      	movs	r3, #0
 80083a0:	2202      	movs	r2, #2
 80083a2:	2101      	movs	r1, #1
 80083a4:	f7fa fb69 	bl	8002a7a <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fb fa82 	bl	80038b8 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2201      	movs	r2, #1
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fa fa69 	bl	8002892 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2103      	movs	r1, #3
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fa f9b8 	bl	800273a <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f9 fd74 	bl	8001ebc <DRV_CANFDSPI_OperationModeSelect>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000d34 	.word	0x20000d34
 80083e0:	20000d38 	.word	0x20000d38
 80083e4:	20000d8c 	.word	0x20000d8c
 80083e8:	20000d90 	.word	0x20000d90
 80083ec:	20000d94 	.word	0x20000d94

080083f0 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b094      	sub	sp, #80	@ 0x50
 80083f4:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint32_t voltage             = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	643b      	str	r3, [r7, #64]	@ 0x40
  float moduleCurrent          = 0;
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float moduleMaxChargeA       = 0;
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8008418:	23ff      	movs	r3, #255	@ 0xff
 800841a:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t lowestSoh           = 255;
 800841c:	23ff      	movs	r3, #255	@ 0xff
 800841e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint32_t totalAvgCellVolt    = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t highestCellVolt     = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t lowestCellVolt      = 65535;
 8008428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800842c:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint32_t totalAvgCellTemp    = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t highestCellTemp     = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t lowestCellTemp      = 65535;
 8008436:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800843a:	853b      	strh	r3, [r7, #40]	@ 0x28
  float    maxChargeA          = 0;
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	@ 0x24
  float    maxDischargeA       = 0;
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8008466:	2300      	movs	r3, #0
 8008468:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800846c:	e2a4      	b.n	80089b8 <MCU_UpdateStats+0x5c8>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800846e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008472:	4a93      	ldr	r2, [pc, #588]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008474:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	4413      	add	r3, r2
 800847e:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f083 0301 	eor.w	r3, r3, #1
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 828e 	bne.w	80089ac <MCU_UpdateStats+0x5bc>
 8008490:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008494:	4a8a      	ldr	r2, [pc, #552]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008496:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	4413      	add	r3, r2
 80084a0:	3304      	adds	r3, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8281 	beq.w	80089ac <MCU_UpdateStats+0x5bc>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 80084aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084ae:	4a84      	ldr	r2, [pc, #528]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084b0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 8271 	bne.w	80089ae <MCU_UpdateStats+0x5be>
 80084cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084d0:	4a7b      	ldr	r2, [pc, #492]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084d2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f040 8260 	bne.w	80089ae <MCU_UpdateStats+0x5be>
 80084ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084f2:	4a73      	ldr	r2, [pc, #460]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80084f4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 824f 	bne.w	80089ae <MCU_UpdateStats+0x5be>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8008510:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008514:	4a6a      	ldr	r2, [pc, #424]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008516:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	3327      	adds	r3, #39	@ 0x27
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b03      	cmp	r3, #3
 8008526:	f040 8144 	bne.w	80087b2 <MCU_UpdateStats+0x3c2>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 800852a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800852e:	4a64      	ldr	r2, [pc, #400]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008530:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	330e      	adds	r3, #14
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7f7 ffd8 	bl	80004f4 <__aeabi_i2d>
 8008544:	a358      	add	r3, pc, #352	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f8 f83d 	bl	80005c8 <__aeabi_dmul>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	a356      	add	r3, pc, #344	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe7c 	bl	8000258 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f7f8 fb26 	bl	8000bb8 <__aeabi_d2f>
 800856c:	4603      	mov	r3, r0
 800856e:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008570:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008574:	4a52      	ldr	r2, [pc, #328]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008576:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800857a:	fb01 f303 	mul.w	r3, r1, r3
 800857e:	4413      	add	r3, r2
 8008580:	3310      	adds	r3, #16
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7f7 ffb5 	bl	80004f4 <__aeabi_i2d>
 800858a:	a347      	add	r3, pc, #284	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f8 f81a 	bl	80005c8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	a344      	add	r3, pc, #272	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 fe59 	bl	8000258 <__aeabi_dsub>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	f7f8 fb03 	bl	8000bb8 <__aeabi_d2f>
 80085b2:	4603      	mov	r3, r0
 80085b4:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 80085b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085ba:	4a41      	ldr	r2, [pc, #260]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80085bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	3314      	adds	r3, #20
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085ce:	4413      	add	r3, r2
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
        //increment module on count
        modulesOn++;
 80085d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085d6:	3301      	adds	r3, #1
 80085d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 80085dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085e0:	4a37      	ldr	r2, [pc, #220]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 80085e2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80085e6:	fb01 f303 	mul.w	r3, r1, r3
 80085ea:	4413      	add	r3, r2
 80085ec:	3316      	adds	r3, #22
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f7 ff7f 	bl	80004f4 <__aeabi_i2d>
 80085f6:	a32c      	add	r3, pc, #176	@ (adr r3, 80086a8 <MCU_UpdateStats+0x2b8>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 ffe4 	bl	80005c8 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	a329      	add	r3, pc, #164	@ (adr r3, 80086b0 <MCU_UpdateStats+0x2c0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fe23 	bl	8000258 <__aeabi_dsub>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f7f8 facd 	bl	8000bb8 <__aeabi_d2f>
 800861e:	4603      	mov	r3, r0
 8008620:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8008622:	6938      	ldr	r0, [r7, #16]
 8008624:	f7f7 ff78 	bl	8000518 <__aeabi_f2d>
 8008628:	a323      	add	r3, pc, #140	@ (adr r3, 80086b8 <MCU_UpdateStats+0x2c8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fe13 	bl	8000258 <__aeabi_dsub>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4614      	mov	r4, r2
 8008638:	461d      	mov	r5, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7f7 ff6c 	bl	8000518 <__aeabi_f2d>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f8 fa4e 	bl	8000ae8 <__aeabi_dcmpgt>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d03e      	beq.n	80086d0 <MCU_UpdateStats+0x2e0>
         module[index].faultCode.overCurrent = true;
 8008652:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008656:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <MCU_UpdateStats+0x2d0>)
 8008658:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008666:	7893      	ldrb	r3, [r2, #2]
 8008668:	f043 0304 	orr.w	r3, r3, #4
 800866c:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <MCU_UpdateStats+0x2d4>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0309 	and.w	r3, r3, #9
 8008676:	2b09      	cmp	r3, #9
 8008678:	d16b      	bne.n	8008752 <MCU_UpdateStats+0x362>
 800867a:	6938      	ldr	r0, [r7, #16]
 800867c:	f7f7 ff4c 	bl	8000518 <__aeabi_f2d>
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7f7 ff47 	bl	8000518 <__aeabi_f2d>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9cd 2300 	strd	r2, r3, [sp]
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	490c      	ldr	r1, [pc, #48]	@ (80086c8 <MCU_UpdateStats+0x2d8>)
 8008698:	480c      	ldr	r0, [pc, #48]	@ (80086cc <MCU_UpdateStats+0x2dc>)
 800869a:	f00c fd17 	bl	80150cc <siprintf>
 800869e:	480b      	ldr	r0, [pc, #44]	@ (80086cc <MCU_UpdateStats+0x2dc>)
 80086a0:	f7fc ffcc 	bl	800563c <serialOut>
 80086a4:	e055      	b.n	8008752 <MCU_UpdateStats+0x362>
 80086a6:	bf00      	nop
 80086a8:	47ae147b 	.word	0x47ae147b
 80086ac:	3f947ae1 	.word	0x3f947ae1
 80086b0:	47ae147b 	.word	0x47ae147b
 80086b4:	40847ae1 	.word	0x40847ae1
 80086b8:	33333333 	.word	0x33333333
 80086bc:	3fd33333 	.word	0x3fd33333
 80086c0:	20000dec 	.word	0x20000dec
 80086c4:	2000000c 	.word	0x2000000c
 80086c8:	08019404 	.word	0x08019404
 80086cc:	20000b5c 	.word	0x20000b5c
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f7f7 ff21 	bl	8000518 <__aeabi_f2d>
 80086d6:	a3b3      	add	r3, pc, #716	@ (adr r3, 80089a4 <MCU_UpdateStats+0x5b4>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fdbe 	bl	800025c <__adddf3>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	f7f7 ff15 	bl	8000518 <__aeabi_f2d>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f8 f9d9 	bl	8000aac <__aeabi_dcmplt>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d028      	beq.n	8008752 <MCU_UpdateStats+0x362>
          module[index].faultCode.overCurrent = true;
 8008700:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008704:	4aa2      	ldr	r2, [pc, #648]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008706:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8008714:	7893      	ldrb	r3, [r2, #2]
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 800871c:	4b9d      	ldr	r3, [pc, #628]	@ (8008994 <MCU_UpdateStats+0x5a4>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	f003 0309 	and.w	r3, r3, #9
 8008724:	2b09      	cmp	r3, #9
 8008726:	d114      	bne.n	8008752 <MCU_UpdateStats+0x362>
 8008728:	6938      	ldr	r0, [r7, #16]
 800872a:	f7f7 fef5 	bl	8000518 <__aeabi_f2d>
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	68b8      	ldr	r0, [r7, #8]
 8008734:	f7f7 fef0 	bl	8000518 <__aeabi_f2d>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	e9cd 2300 	strd	r2, r3, [sp]
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	4994      	ldr	r1, [pc, #592]	@ (8008998 <MCU_UpdateStats+0x5a8>)
 8008746:	4895      	ldr	r0, [pc, #596]	@ (800899c <MCU_UpdateStats+0x5ac>)
 8008748:	f00c fcc0 	bl	80150cc <siprintf>
 800874c:	4893      	ldr	r0, [pc, #588]	@ (800899c <MCU_UpdateStats+0x5ac>)
 800874e:	f7fc ff75 	bl	800563c <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 8008752:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008756:	4a8e      	ldr	r2, [pc, #568]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008758:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008766:	789b      	ldrb	r3, [r3, #2]
 8008768:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <MCU_UpdateStats+0x392>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 8008772:	4b8b      	ldr	r3, [pc, #556]	@ (80089a0 <MCU_UpdateStats+0x5b0>)
 8008774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008778:	2b02      	cmp	r3, #2
 800877a:	d102      	bne.n	8008782 <MCU_UpdateStats+0x392>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 800877c:	4b88      	ldr	r3, [pc, #544]	@ (80089a0 <MCU_UpdateStats+0x5b0>)
 800877e:	2200      	movs	r2, #0
 8008780:	76da      	strb	r2, [r3, #27]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 8008782:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8008786:	edd7 7a04 	vldr	s15, [r7, #16]
 800878a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800878e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8008792:	ed97 7a08 	vldr	s14, [r7, #32]
 8008796:	edd7 7a02 	vldr	s15, [r7, #8]
 800879a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800879e:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 80087a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80087a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80087aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 80087b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087b6:	4a76      	ldr	r2, [pc, #472]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087b8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3312      	adds	r3, #18
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 80087ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087d8:	fb01 f303 	mul.w	r3, r1, r3
 80087dc:	4413      	add	r3, r2
 80087de:	3322      	adds	r3, #34	@ 0x22
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	4413      	add	r3, r2
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 80087ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087ee:	4a68      	ldr	r2, [pc, #416]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80087f0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	331c      	adds	r3, #28
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	4413      	add	r3, r2
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8008806:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800880a:	4a61      	ldr	r2, [pc, #388]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800880c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008810:	fb01 f303 	mul.w	r3, r1, r3
 8008814:	4413      	add	r3, r2
 8008816:	332b      	adds	r3, #43	@ 0x2b
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800881e:	4293      	cmp	r3, r2
 8008820:	d90a      	bls.n	8008838 <MCU_UpdateStats+0x448>
 8008822:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008826:	4a5a      	ldr	r2, [pc, #360]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008828:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	332b      	adds	r3, #43	@ 0x2b
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008838:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800883c:	4a54      	ldr	r2, [pc, #336]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800883e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	332c      	adds	r3, #44	@ 0x2c
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008850:	4293      	cmp	r3, r2
 8008852:	d90a      	bls.n	800886a <MCU_UpdateStats+0x47a>
 8008854:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008858:	4a4d      	ldr	r2, [pc, #308]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800885a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	4413      	add	r3, r2
 8008864:	332c      	adds	r3, #44	@ 0x2c
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	873b      	strh	r3, [r7, #56]	@ 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 800886a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800886e:	4a48      	ldr	r2, [pc, #288]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008870:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	4413      	add	r3, r2
 800887a:	3320      	adds	r3, #32
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008880:	429a      	cmp	r2, r3
 8008882:	d915      	bls.n	80088b0 <MCU_UpdateStats+0x4c0>
        lowestCellVolt  = module[index].cellLoVolt;
 8008884:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008888:	4a41      	ldr	r2, [pc, #260]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800888a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	4413      	add	r3, r2
 8008894:	3320      	adds	r3, #32
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	863b      	strh	r3, [r7, #48]	@ 0x30
        modLowestCellVolt = module[index].moduleId;
 800889a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800889e:	4a3c      	ldr	r2, [pc, #240]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088a0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	3308      	adds	r3, #8
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 80088b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088b4:	4a36      	ldr	r2, [pc, #216]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088b6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	331e      	adds	r3, #30
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d215      	bcs.n	80088f6 <MCU_UpdateStats+0x506>
        highestCellVolt = module[index].cellHiVolt;
 80088ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088ce:	4a30      	ldr	r2, [pc, #192]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088d0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	331e      	adds	r3, #30
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	867b      	strh	r3, [r7, #50]	@ 0x32
        modHighestCellVolt = module[index].moduleId;
 80088e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088e6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	3308      	adds	r3, #8
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 80088f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088fa:	4a25      	ldr	r2, [pc, #148]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 80088fc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	4413      	add	r3, r2
 8008906:	3318      	adds	r3, #24
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800890c:	429a      	cmp	r2, r3
 800890e:	d215      	bcs.n	800893c <MCU_UpdateStats+0x54c>
        highestCellTemp = module[index].cellHiTemp;
 8008910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008914:	4a1e      	ldr	r2, [pc, #120]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008916:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	3318      	adds	r3, #24
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	857b      	strh	r3, [r7, #42]	@ 0x2a
        modHighestCellTemp = module[index].moduleId;
 8008926:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800892a:	4a19      	ldr	r2, [pc, #100]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800892c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	3308      	adds	r3, #8
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 800893c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008940:	4a13      	ldr	r2, [pc, #76]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008942:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	331a      	adds	r3, #26
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008952:	429a      	cmp	r2, r3
 8008954:	d915      	bls.n	8008982 <MCU_UpdateStats+0x592>
        lowestCellTemp  = module[index].cellLoTemp;
 8008956:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800895a:	4a0d      	ldr	r2, [pc, #52]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 800895c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008960:	fb01 f303 	mul.w	r3, r1, r3
 8008964:	4413      	add	r3, r2
 8008966:	331a      	adds	r3, #26
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	853b      	strh	r3, [r7, #40]	@ 0x28
        modLowestCellTemp = module[index].moduleId;
 800896c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008970:	4a07      	ldr	r2, [pc, #28]	@ (8008990 <MCU_UpdateStats+0x5a0>)
 8008972:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8008976:	fb01 f303 	mul.w	r3, r1, r3
 800897a:	4413      	add	r3, r2
 800897c:	3308      	adds	r3, #8
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 8008982:	7efb      	ldrb	r3, [r7, #27]
 8008984:	3301      	adds	r3, #1
 8008986:	76fb      	strb	r3, [r7, #27]
 8008988:	e011      	b.n	80089ae <MCU_UpdateStats+0x5be>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	20000dec 	.word	0x20000dec
 8008994:	2000000c 	.word	0x2000000c
 8008998:	08019450 	.word	0x08019450
 800899c:	20000b5c 	.word	0x20000b5c
 80089a0:	2000a6ec 	.word	0x2000a6ec
 80089a4:	33333333 	.word	0x33333333
 80089a8:	3fd33333 	.word	0x3fd33333
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 80089ac:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 80089ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089b2:	3301      	adds	r3, #1
 80089b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80089b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089bc:	2b1f      	cmp	r3, #31
 80089be:	f67f ad56 	bls.w	800846e <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 80089c2:	4a89      	ldr	r2, [pc, #548]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089c4:	7efb      	ldrb	r3, [r7, #27]
 80089c6:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 80089c8:	4b87      	ldr	r3, [pc, #540]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ca:	7d1a      	ldrb	r2, [r3, #20]
 80089cc:	4b86      	ldr	r3, [pc, #536]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ce:	7ddb      	ldrb	r3, [r3, #23]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	4b84      	ldr	r3, [pc, #528]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089d6:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 80089d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d06d      	beq.n	8008abc <MCU_UpdateStats+0x6cc>
    pack.voltage = voltage / modulesOn;
 80089e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	4b7e      	ldr	r3, [pc, #504]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 80089ee:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 80089f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80089f4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8008bec <MCU_UpdateStats+0x7fc>
 80089f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	dd19      	ble.n	8008a36 <MCU_UpdateStats+0x646>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008a02:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	f003 0309 	and.w	r3, r3, #9
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d110      	bne.n	8008a30 <MCU_UpdateStats+0x640>
 8008a0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a10:	f7f7 fd82 	bl	8000518 <__aeabi_f2d>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	a16f      	add	r1, pc, #444	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a22:	4974      	ldr	r1, [pc, #464]	@ (8008bf4 <MCU_UpdateStats+0x804>)
 8008a24:	4874      	ldr	r0, [pc, #464]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a26:	f00c fb51 	bl	80150cc <siprintf>
 8008a2a:	4873      	ldr	r0, [pc, #460]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a2c:	f7fc fe06 	bl	800563c <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008a30:	4b72      	ldr	r3, [pc, #456]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a34:	e01e      	b.n	8008a74 <MCU_UpdateStats+0x684>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 8008a36:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8008a3a:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d515      	bpl.n	8008a74 <MCU_UpdateStats+0x684>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008a48:	4b69      	ldr	r3, [pc, #420]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 0309 	and.w	r3, r3, #9
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d10d      	bne.n	8008a70 <MCU_UpdateStats+0x680>
 8008a54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a56:	f7f7 fd5f 	bl	8000518 <__aeabi_f2d>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4968      	ldr	r1, [pc, #416]	@ (8008c00 <MCU_UpdateStats+0x810>)
 8008a60:	9100      	str	r1, [sp, #0]
 8008a62:	4968      	ldr	r1, [pc, #416]	@ (8008c04 <MCU_UpdateStats+0x814>)
 8008a64:	4864      	ldr	r0, [pc, #400]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a66:	f00c fb31 	bl	80150cc <siprintf>
 8008a6a:	4863      	ldr	r0, [pc, #396]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008a6c:	f7fc fde6 	bl	800563c <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 8008a70:	4b65      	ldr	r3, [pc, #404]	@ (8008c08 <MCU_UpdateStats+0x818>)
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008a74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a76:	f7f7 fd4f 	bl	8000518 <__aeabi_f2d>
 8008a7a:	a359      	add	r3, pc, #356	@ (adr r3, 8008be0 <MCU_UpdateStats+0x7f0>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fecc 	bl	800081c <__aeabi_ddiv>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	4b5e      	ldr	r3, [pc, #376]	@ (8008c0c <MCU_UpdateStats+0x81c>)
 8008a92:	f7f7 fbe3 	bl	800025c <__adddf3>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f7f8 f88b 	bl	8000bb8 <__aeabi_d2f>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aae:	ee17 3a90 	vmov	r3, s15
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008ab8:	611a      	str	r2, [r3, #16]
 8008aba:	e00e      	b.n	8008ada <MCU_UpdateStats+0x6ea>

  }else{
    pack.voltage = 0;
 8008abc:	4b4a      	ldr	r3, [pc, #296]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8008ac2:	4b53      	ldr	r3, [pc, #332]	@ (8008c10 <MCU_UpdateStats+0x820>)
 8008ac4:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ace:	ee17 3a90 	vmov	r3, s15
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b44      	ldr	r3, [pc, #272]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008ad8:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008ada:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008ade:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8008bec <MCU_UpdateStats+0x7fc>
 8008ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	dd19      	ble.n	8008b20 <MCU_UpdateStats+0x730>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008aec:	4b40      	ldr	r3, [pc, #256]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 0309 	and.w	r3, r3, #9
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d110      	bne.n	8008b1a <MCU_UpdateStats+0x72a>
 8008af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008afa:	f7f7 fd0d 	bl	8000518 <__aeabi_f2d>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	a135      	add	r1, pc, #212	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b08:	e9cd 0100 	strd	r0, r1, [sp]
 8008b0c:	4941      	ldr	r1, [pc, #260]	@ (8008c14 <MCU_UpdateStats+0x824>)
 8008b0e:	483a      	ldr	r0, [pc, #232]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b10:	f00c fadc 	bl	80150cc <siprintf>
 8008b14:	4838      	ldr	r0, [pc, #224]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b16:	f7fc fd91 	bl	800563c <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008b1a:	4b38      	ldr	r3, [pc, #224]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1e:	e01e      	b.n	8008b5e <MCU_UpdateStats+0x76e>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8008b20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008b24:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b30:	d515      	bpl.n	8008b5e <MCU_UpdateStats+0x76e>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008b32:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 0309 	and.w	r3, r3, #9
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d10d      	bne.n	8008b5a <MCU_UpdateStats+0x76a>
 8008b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b40:	f7f7 fcea 	bl	8000518 <__aeabi_f2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	492d      	ldr	r1, [pc, #180]	@ (8008c00 <MCU_UpdateStats+0x810>)
 8008b4a:	9100      	str	r1, [sp, #0]
 8008b4c:	4932      	ldr	r1, [pc, #200]	@ (8008c18 <MCU_UpdateStats+0x828>)
 8008b4e:	482a      	ldr	r0, [pc, #168]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b50:	f00c fabc 	bl	80150cc <siprintf>
 8008b54:	4828      	ldr	r0, [pc, #160]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008b56:	f7fc fd71 	bl	800563c <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8008b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008c08 <MCU_UpdateStats+0x818>)
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b60:	f7f7 fcda 	bl	8000518 <__aeabi_f2d>
 8008b64:	a31e      	add	r3, pc, #120	@ (adr r3, 8008be0 <MCU_UpdateStats+0x7f0>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 fe57 	bl	800081c <__aeabi_ddiv>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4610      	mov	r0, r2
 8008b74:	4619      	mov	r1, r3
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	4b24      	ldr	r3, [pc, #144]	@ (8008c0c <MCU_UpdateStats+0x81c>)
 8008b7c:	f7f7 fb6e 	bl	800025c <__adddf3>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7f7 fff6 	bl	8000b78 <__aeabi_d2uiz>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	4a16      	ldr	r2, [pc, #88]	@ (8008be8 <MCU_UpdateStats+0x7f8>)
 8008b90:	6353      	str	r3, [r2, #52]	@ 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b96:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008bec <MCU_UpdateStats+0x7fc>
 8008b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	dd3f      	ble.n	8008c24 <MCU_UpdateStats+0x834>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008ba4:	4b12      	ldr	r3, [pc, #72]	@ (8008bf0 <MCU_UpdateStats+0x800>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 0309 	and.w	r3, r3, #9
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d110      	bne.n	8008bd2 <MCU_UpdateStats+0x7e2>
 8008bb0:	6a38      	ldr	r0, [r7, #32]
 8008bb2:	f7f7 fcb1 	bl	8000518 <__aeabi_f2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	a107      	add	r1, pc, #28	@ (adr r1, 8008bd8 <MCU_UpdateStats+0x7e8>)
 8008bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8008bc4:	4915      	ldr	r1, [pc, #84]	@ (8008c1c <MCU_UpdateStats+0x82c>)
 8008bc6:	480c      	ldr	r0, [pc, #48]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008bc8:	f00c fa80 	bl	80150cc <siprintf>
 8008bcc:	480a      	ldr	r0, [pc, #40]	@ (8008bf8 <MCU_UpdateStats+0x808>)
 8008bce:	f7fc fd35 	bl	800563c <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <MCU_UpdateStats+0x80c>)
 8008bd4:	623b      	str	r3, [r7, #32]
 8008bd6:	e044      	b.n	8008c62 <MCU_UpdateStats+0x872>
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	409a3300 	.word	0x409a3300
 8008be0:	9999999a 	.word	0x9999999a
 8008be4:	3fa99999 	.word	0x3fa99999
 8008be8:	2000a6ec 	.word	0x2000a6ec
 8008bec:	44d19800 	.word	0x44d19800
 8008bf0:	2000000c 	.word	0x2000000c
 8008bf4:	080194a0 	.word	0x080194a0
 8008bf8:	20000b5c 	.word	0x20000b5c
 8008bfc:	44d19800 	.word	0x44d19800
 8008c00:	fffff9c0 	.word	0xfffff9c0
 8008c04:	080194e4 	.word	0x080194e4
 8008c08:	c4c80000 	.word	0xc4c80000
 8008c0c:	40df4000 	.word	0x40df4000
 8008c10:	46fa0000 	.word	0x46fa0000
 8008c14:	08019528 	.word	0x08019528
 8008c18:	08019570 	.word	0x08019570
 8008c1c:	080195b8 	.word	0x080195b8
 8008c20:	c4c80000 	.word	0xc4c80000
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8008c24:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c28:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8008c20 <MCU_UpdateStats+0x830>
 8008c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	d515      	bpl.n	8008c62 <MCU_UpdateStats+0x872>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8008c36:	4b6e      	ldr	r3, [pc, #440]	@ (8008df0 <MCU_UpdateStats+0xa00>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 0309 	and.w	r3, r3, #9
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d10d      	bne.n	8008c5e <MCU_UpdateStats+0x86e>
 8008c42:	6a38      	ldr	r0, [r7, #32]
 8008c44:	f7f7 fc68 	bl	8000518 <__aeabi_f2d>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4969      	ldr	r1, [pc, #420]	@ (8008df4 <MCU_UpdateStats+0xa04>)
 8008c4e:	9100      	str	r1, [sp, #0]
 8008c50:	4969      	ldr	r1, [pc, #420]	@ (8008df8 <MCU_UpdateStats+0xa08>)
 8008c52:	486a      	ldr	r0, [pc, #424]	@ (8008dfc <MCU_UpdateStats+0xa0c>)
 8008c54:	f00c fa3a 	bl	80150cc <siprintf>
 8008c58:	4868      	ldr	r0, [pc, #416]	@ (8008dfc <MCU_UpdateStats+0xa0c>)
 8008c5a:	f7fc fcef 	bl	800563c <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8008c5e:	4b68      	ldr	r3, [pc, #416]	@ (8008e00 <MCU_UpdateStats+0xa10>)
 8008c60:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c64:	f7f7 fc58 	bl	8000518 <__aeabi_f2d>
 8008c68:	a35f      	add	r3, pc, #380	@ (adr r3, 8008de8 <MCU_UpdateStats+0x9f8>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fdd5 	bl	800081c <__aeabi_ddiv>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	4b61      	ldr	r3, [pc, #388]	@ (8008e04 <MCU_UpdateStats+0xa14>)
 8008c80:	f7f7 faec 	bl	800025c <__adddf3>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f7f7 ff74 	bl	8000b78 <__aeabi_d2uiz>
 8008c90:	4603      	mov	r3, r0
 8008c92:	4a5d      	ldr	r2, [pc, #372]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008c94:	6353      	str	r3, [r2, #52]	@ 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008c96:	6a38      	ldr	r0, [r7, #32]
 8008c98:	f7f7 fc3e 	bl	8000518 <__aeabi_f2d>
 8008c9c:	a352      	add	r3, pc, #328	@ (adr r3, 8008de8 <MCU_UpdateStats+0x9f8>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fdbb 	bl	800081c <__aeabi_ddiv>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4610      	mov	r0, r2
 8008cac:	4619      	mov	r1, r3
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	4b54      	ldr	r3, [pc, #336]	@ (8008e04 <MCU_UpdateStats+0xa14>)
 8008cb4:	f7f7 fad2 	bl	800025c <__adddf3>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f7f7 ff5a 	bl	8000b78 <__aeabi_d2uiz>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4a50      	ldr	r2, [pc, #320]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cc8:	6393      	str	r3, [r2, #56]	@ 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8008cca:	4b4f      	ldr	r3, [pc, #316]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ccc:	7ddb      	ldrb	r3, [r3, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <MCU_UpdateStats+0x8f6>
 8008cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cd4:	7ddb      	ldrb	r3, [r3, #23]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	4b49      	ldr	r3, [pc, #292]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8008ce4:	e002      	b.n	8008cec <MCU_UpdateStats+0x8fc>
  else pack.maxChargeEndV = 0;
 8008ce6:	4b48      	ldr	r3, [pc, #288]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8008cec:	4b46      	ldr	r3, [pc, #280]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008cee:	7ddb      	ldrb	r3, [r3, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <MCU_UpdateStats+0x916>
 8008cf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008cf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008cf8:	d805      	bhi.n	8008d06 <MCU_UpdateStats+0x916>
 8008cfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	4b42      	ldr	r3, [pc, #264]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d04:	e003      	b.n	8008d0e <MCU_UpdateStats+0x91e>
  else pack.soc = 0;
 8008d06:	4b40      	ldr	r3, [pc, #256]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d10:	7ddb      	ldrb	r3, [r3, #23]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <MCU_UpdateStats+0x938>
 8008d16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d18:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d1a:	d805      	bhi.n	8008d28 <MCU_UpdateStats+0x938>
 8008d1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	4b39      	ldr	r3, [pc, #228]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d26:	e003      	b.n	8008d30 <MCU_UpdateStats+0x940>
  else pack.soh = 0;
 8008d28:	4b37      	ldr	r3, [pc, #220]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8008d30:	4b35      	ldr	r3, [pc, #212]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d32:	7ddb      	ldrb	r3, [r3, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <MCU_UpdateStats+0x95c>
 8008d38:	4b33      	ldr	r3, [pc, #204]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d3a:	7ddb      	ldrb	r3, [r3, #23]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	4b30      	ldr	r3, [pc, #192]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d48:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008d4a:	e002      	b.n	8008d52 <MCU_UpdateStats+0x962>
  else pack.cellAvgVolt = 0;
 8008d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	861a      	strh	r2, [r3, #48]	@ 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8008d52:	4a2d      	ldr	r2, [pc, #180]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008d56:	8513      	strh	r3, [r2, #40]	@ 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8008d58:	4a2b      	ldr	r2, [pc, #172]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d5a:	7e7b      	ldrb	r3, [r7, #25]
 8008d5c:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
  if (lowestCellVolt < 65535){
 8008d60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <MCU_UpdateStats+0x98a>
    pack.cellLoVolt = lowestCellVolt;
 8008d6a:	4a27      	ldr	r2, [pc, #156]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008d6e:	8593      	strh	r3, [r2, #44]	@ 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8008d70:	4a25      	ldr	r2, [pc, #148]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d72:	7ebb      	ldrb	r3, [r7, #26]
 8008d74:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8008d78:	e006      	b.n	8008d88 <MCU_UpdateStats+0x998>
  }
  else{
    pack.cellLoVolt = 0;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pack.modCellLoVolt = 0;
 8008d80:	4b21      	ldr	r3, [pc, #132]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8008d88:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d8a:	7ddb      	ldrb	r3, [r3, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <MCU_UpdateStats+0x9b4>
 8008d90:	4b1d      	ldr	r3, [pc, #116]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008d92:	7ddb      	ldrb	r3, [r3, #23]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008da0:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008da2:	e002      	b.n	8008daa <MCU_UpdateStats+0x9ba>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008da4:	4b18      	ldr	r3, [pc, #96]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	84da      	strh	r2, [r3, #38]	@ 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8008daa:	4a17      	ldr	r2, [pc, #92]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008dae:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8008db0:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8008db8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008dba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d007      	beq.n	8008dd2 <MCU_UpdateStats+0x9e2>
    pack.cellLoTemp = lowestCellTemp;
 8008dc2:	4a11      	ldr	r2, [pc, #68]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008dc6:	8453      	strh	r3, [r2, #34]	@ 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dca:	7e3b      	ldrb	r3, [r7, #24]
 8008dcc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8008dd0:	e006      	b.n	8008de0 <MCU_UpdateStats+0x9f0>
    pack.cellLoTemp = 0; //-55 degrees!
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	845a      	strh	r2, [r3, #34]	@ 0x22
    pack.modCellLoTemp = 0;
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e08 <MCU_UpdateStats+0xa18>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8008de0:	bf00      	nop
 8008de2:	3748      	adds	r7, #72	@ 0x48
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bdb0      	pop	{r4, r5, r7, pc}
 8008de8:	9999999a 	.word	0x9999999a
 8008dec:	3fa99999 	.word	0x3fa99999
 8008df0:	2000000c 	.word	0x2000000c
 8008df4:	fffff9c0 	.word	0xfffff9c0
 8008df8:	08019604 	.word	0x08019604
 8008dfc:	20000b5c 	.word	0x20000b5c
 8008e00:	c4c80000 	.word	0xc4c80000
 8008e04:	40df4000 	.word	0x40df4000
 8008e08:	2000a6ec 	.word	0x2000a6ec

08008e0c <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0e:	b08b      	sub	sp, #44	@ 0x2c
 8008e10:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008e12:	4a67      	ldr	r2, [pc, #412]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008e14:	2101      	movs	r1, #1
 8008e16:	2001      	movs	r0, #1
 8008e18:	f7f9 fd02 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008e1c:	e0bc      	b.n	8008f98 <MCU_ReceiveMessages+0x18c>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8008e1e:	2340      	movs	r3, #64	@ 0x40
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4b64      	ldr	r3, [pc, #400]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e24:	4a64      	ldr	r2, [pc, #400]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e26:	2101      	movs	r1, #1
 8008e28:	2001      	movs	r0, #1
 8008e2a:	f7f9 fb5d 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    // Log RX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(rxObj.bF.id.SID, false)){
 8008e2e:	4b62      	ldr	r3, [pc, #392]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fd ffc2 	bl	8006dc4 <MCU_ShouldLogMessage>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d033      	beq.n	8008eae <MCU_ReceiveMessages+0xa2>
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e46:	4b5c      	ldr	r3, [pc, #368]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e4e:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e50:	469c      	mov	ip, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e52:	4b59      	ldr	r3, [pc, #356]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e5a:	469e      	mov	lr, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e5c:	4b55      	ldr	r3, [pc, #340]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e60:	461a      	mov	r2, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e62:	4b54      	ldr	r3, [pc, #336]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e64:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e66:	4619      	mov	r1, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e68:	4b52      	ldr	r3, [pc, #328]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e6a:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e6c:	4618      	mov	r0, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e6e:	4b51      	ldr	r3, [pc, #324]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e70:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e72:	461c      	mov	r4, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e74:	4b4f      	ldr	r3, [pc, #316]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e76:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e78:	461d      	mov	r5, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e7c:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e7e:	461e      	mov	r6, r3
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e80:	4b4c      	ldr	r3, [pc, #304]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e82:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e84:	607b      	str	r3, [r7, #4]
                rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); 
 8008e86:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008e88:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8008e8a:	9307      	str	r3, [sp, #28]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	9306      	str	r3, [sp, #24]
 8008e90:	9605      	str	r6, [sp, #20]
 8008e92:	9504      	str	r5, [sp, #16]
 8008e94:	9403      	str	r4, [sp, #12]
 8008e96:	9002      	str	r0, [sp, #8]
 8008e98:	9101      	str	r1, [sp, #4]
 8008e9a:	9200      	str	r2, [sp, #0]
 8008e9c:	4673      	mov	r3, lr
 8008e9e:	4662      	mov	r2, ip
 8008ea0:	4946      	ldr	r1, [pc, #280]	@ (8008fbc <MCU_ReceiveMessages+0x1b0>)
 8008ea2:	4847      	ldr	r0, [pc, #284]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008ea4:	f00c f912 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 8008ea8:	4845      	ldr	r0, [pc, #276]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008eaa:	f7fc fbc7 	bl	800563c <serialOut>
    }

    switch (rxObj.bF.id.SID) {
 8008eae:	4b42      	ldr	r3, [pc, #264]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	d82b      	bhi.n	8008f18 <MCU_ReceiveMessages+0x10c>
 8008ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <MCU_ReceiveMessages+0xbc>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008efb 	.word	0x08008efb
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008eef 	.word	0x08008eef
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	08008f13 	.word	0x08008f13
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008ee8:	f000 f910 	bl	800910c <MCU_RegisterModule>
        break;
 8008eec:	e04f      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8008eee:	f002 fb29 	bl	800b544 <MCU_ProcessCellDetail>
        break;
 8008ef2:	e04c      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8008ef4:	f000 fdf0 	bl	8009ad8 <MCU_ProcessModuleHardware>
        break;
 8008ef8:	e049      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8008efa:	f001 fa15 	bl	800a328 <MCU_ProcessModuleStatus1>
        break;
 8008efe:	e046      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008f00:	f001 fd82 	bl	800aa08 <MCU_ProcessModuleStatus2>
        break;
 8008f04:	e043      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8008f06:	f001 ffa3 	bl	800ae50 <MCU_ProcessModuleStatus3>
        break;
 8008f0a:	e040      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8008f0c:	f000 fcbe 	bl	800988c <MCU_ProcessModuleTime>
        break;
 8008f10:	e03d      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8008f12:	f002 f987 	bl	800b224 <MCU_ProcessCellCommStatus1>
        break;
 8008f16:	e03a      	b.n	8008f8e <MCU_ReceiveMessages+0x182>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008f18:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc4 <MCU_ReceiveMessages+0x1b8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0309 	and.w	r3, r3, #9
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d133      	bne.n	8008f8c <MCU_ReceiveMessages+0x180>
 8008f24:	4b24      	ldr	r3, [pc, #144]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	469c      	mov	ip, r3
 8008f30:	4b21      	ldr	r3, [pc, #132]	@ (8008fb8 <MCU_ReceiveMessages+0x1ac>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f48:	789b      	ldrb	r3, [r3, #2]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	4b19      	ldr	r3, [pc, #100]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f4e:	78db      	ldrb	r3, [r3, #3]
 8008f50:	461c      	mov	r4, r3
 8008f52:	4b18      	ldr	r3, [pc, #96]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	461d      	mov	r5, r3
 8008f58:	4b16      	ldr	r3, [pc, #88]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f5a:	795b      	ldrb	r3, [r3, #5]
 8008f5c:	461e      	mov	r6, r3
 8008f5e:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f60:	799b      	ldrb	r3, [r3, #6]
 8008f62:	607b      	str	r3, [r7, #4]
 8008f64:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <MCU_ReceiveMessages+0x1a8>)
 8008f66:	79db      	ldrb	r3, [r3, #7]
 8008f68:	9307      	str	r3, [sp, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	9306      	str	r3, [sp, #24]
 8008f6e:	9605      	str	r6, [sp, #20]
 8008f70:	9504      	str	r5, [sp, #16]
 8008f72:	9403      	str	r4, [sp, #12]
 8008f74:	9002      	str	r0, [sp, #8]
 8008f76:	9101      	str	r1, [sp, #4]
 8008f78:	9200      	str	r2, [sp, #0]
 8008f7a:	4673      	mov	r3, lr
 8008f7c:	4662      	mov	r2, ip
 8008f7e:	4912      	ldr	r1, [pc, #72]	@ (8008fc8 <MCU_ReceiveMessages+0x1bc>)
 8008f80:	480f      	ldr	r0, [pc, #60]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008f82:	f00c f8a3 	bl	80150cc <siprintf>
 8008f86:	480e      	ldr	r0, [pc, #56]	@ (8008fc0 <MCU_ReceiveMessages+0x1b4>)
 8008f88:	f7fc fb58 	bl	800563c <serialOut>
        break;
 8008f8c:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008f8e:	4a08      	ldr	r2, [pc, #32]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008f90:	2101      	movs	r1, #1
 8008f92:	2001      	movs	r0, #1
 8008f94:	f7f9 fc44 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008f98:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <MCU_ReceiveMessages+0x1a4>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f af3c 	bne.w	8008e1e <MCU_ReceiveMessages+0x12>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb0:	20000d98 	.word	0x20000d98
 8008fb4:	20000da8 	.word	0x20000da8
 8008fb8:	20000d9c 	.word	0x20000d9c
 8008fbc:	0801964c 	.word	0x0801964c
 8008fc0:	20000b5c 	.word	0x20000b5c
 8008fc4:	2000000c 	.word	0x2000000c
 8008fc8:	080196b0 	.word	0x080196b0

08008fcc <MCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b08d      	sub	sp, #52	@ 0x34
 8008fd0:	af08      	add	r7, sp, #32
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8008fd6:	2332      	movs	r3, #50	@ 0x32
 8008fd8:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	4a41      	ldr	r2, [pc, #260]	@ (80090e4 <MCU_TransmitMessageQueue+0x118>)
 8008fde:	2102      	movs	r1, #2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7f9 fbea 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11a      	bne.n	8009022 <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008fec:	bf00      	nop
        Nop();
 8008fee:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008ff0:	79f8      	ldrb	r0, [r7, #7]
 8008ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80090e8 <MCU_TransmitMessageQueue+0x11c>)
 8008ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80090ec <MCU_TransmitMessageQueue+0x120>)
 8008ff6:	493e      	ldr	r1, [pc, #248]	@ (80090f0 <MCU_TransmitMessageQueue+0x124>)
 8008ff8:	f7f9 fc99 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80090f4 <MCU_TransmitMessageQueue+0x128>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 0309 	and.w	r3, r3, #9
 8009004:	2b09      	cmp	r3, #9
 8009006:	d106      	bne.n	8009016 <MCU_TransmitMessageQueue+0x4a>
 8009008:	493b      	ldr	r1, [pc, #236]	@ (80090f8 <MCU_TransmitMessageQueue+0x12c>)
 800900a:	483c      	ldr	r0, [pc, #240]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 800900c:	f00c f85e 	bl	80150cc <siprintf>
 8009010:	483a      	ldr	r0, [pc, #232]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 8009012:	f7fc fb13 	bl	800563c <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	2102      	movs	r1, #2
 800901a:	4618      	mov	r0, r3
 800901c:	f7f9 f910 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8009020:	e05c      	b.n	80090dc <MCU_TransmitMessageQueue+0x110>
      }
      attempts--;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	3b01      	subs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8009028:	4b2e      	ldr	r3, [pc, #184]	@ (80090e4 <MCU_TransmitMessageQueue+0x118>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0d2      	beq.n	8008fda <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8009034:	4b32      	ldr	r3, [pc, #200]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 8009036:	791b      	ldrb	r3, [r3, #4]
 8009038:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7fa fc82 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]
    
    // Log TX message based on message-specific debug flags
    if(MCU_ShouldLogMessage(txObj.bF.id.SID, true)){
 8009048:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009050:	b29b      	uxth	r3, r3
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd feb5 	bl	8006dc4 <MCU_ShouldLogMessage>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d033      	beq.n	80090c8 <MCU_TransmitMessageQueue+0xfc>
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009068:	b29b      	uxth	r3, r3
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800906a:	469c      	mov	ip, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800906c:	4b24      	ldr	r3, [pc, #144]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009074:	469e      	mov	lr, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009076:	4b23      	ldr	r3, [pc, #140]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009078:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800907a:	461a      	mov	r2, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800907c:	4b21      	ldr	r3, [pc, #132]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800907e:	785b      	ldrb	r3, [r3, #1]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009080:	4619      	mov	r1, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009082:	4b20      	ldr	r3, [pc, #128]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009084:	789b      	ldrb	r3, [r3, #2]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009086:	4618      	mov	r0, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009088:	4b1e      	ldr	r3, [pc, #120]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800908a:	78db      	ldrb	r3, [r3, #3]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800908c:	461c      	mov	r4, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800908e:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009090:	791b      	ldrb	r3, [r3, #4]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009092:	461d      	mov	r5, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 8009094:	4b1b      	ldr	r3, [pc, #108]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 8009096:	795b      	ldrb	r3, [r3, #5]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 8009098:	461e      	mov	r6, r3
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 800909a:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 800909c:	799b      	ldrb	r3, [r3, #6]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800909e:	603b      	str	r3, [r7, #0]
                txObj.bF.id.SID, txObj.bF.id.EID, txd[0], txd[1], txd[2], txd[3], txd[4], txd[5], txd[6], txd[7]);
 80090a0:	4b18      	ldr	r3, [pc, #96]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 80090a2:	79db      	ldrb	r3, [r3, #7]
        sprintf(tempBuffer,"MCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	9605      	str	r6, [sp, #20]
 80090ac:	9504      	str	r5, [sp, #16]
 80090ae:	9403      	str	r4, [sp, #12]
 80090b0:	9002      	str	r0, [sp, #8]
 80090b2:	9101      	str	r1, [sp, #4]
 80090b4:	9200      	str	r2, [sp, #0]
 80090b6:	4673      	mov	r3, lr
 80090b8:	4662      	mov	r2, ip
 80090ba:	4913      	ldr	r1, [pc, #76]	@ (8009108 <MCU_TransmitMessageQueue+0x13c>)
 80090bc:	480f      	ldr	r0, [pc, #60]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 80090be:	f00c f805 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 80090c2:	480e      	ldr	r0, [pc, #56]	@ (80090fc <MCU_TransmitMessageQueue+0x130>)
 80090c4:	f7fc faba 	bl	800563c <serialOut>
    }

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	79f8      	ldrb	r0, [r7, #7]
 80090cc:	2201      	movs	r2, #1
 80090ce:	9201      	str	r2, [sp, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <MCU_TransmitMessageQueue+0x138>)
 80090d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009100 <MCU_TransmitMessageQueue+0x134>)
 80090d6:	2102      	movs	r1, #2
 80090d8:	f7f8 ffc0 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000d3c 	.word	0x20000d3c
 80090e8:	20000deb 	.word	0x20000deb
 80090ec:	20000dea 	.word	0x20000dea
 80090f0:	20000de9 	.word	0x20000de9
 80090f4:	2000000c 	.word	0x2000000c
 80090f8:	0801971c 	.word	0x0801971c
 80090fc:	20000b5c 	.word	0x20000b5c
 8009100:	20000d40 	.word	0x20000d40
 8009104:	20000d4c 	.word	0x20000d4c
 8009108:	0801974c 	.word	0x0801974c

0800910c <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b08b      	sub	sp, #44	@ 0x2c
 8009110:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8009116:	4ab5      	ldr	r2, [pc, #724]	@ (80093ec <MCU_RegisterModule+0x2e0>)
 8009118:	f107 030c 	add.w	r3, r7, #12
 800911c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009120:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugMessages & DBG_MSG_ANNOUNCE){
 8009124:	4bb2      	ldr	r3, [pc, #712]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <MCU_RegisterModule+0x46>
    sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); 
 8009130:	89bb      	ldrh	r3, [r7, #12]
 8009132:	4619      	mov	r1, r3
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	4618      	mov	r0, r3
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4603      	mov	r3, r0
 8009142:	460a      	mov	r2, r1
 8009144:	49ab      	ldr	r1, [pc, #684]	@ (80093f4 <MCU_RegisterModule+0x2e8>)
 8009146:	48ac      	ldr	r0, [pc, #688]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 8009148:	f00b ffc0 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 800914c:	48aa      	ldr	r0, [pc, #680]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 800914e:	f7fc fa75 	bl	800563c <serialOut>
  }

  // Check if module already exists (registered or not)
  moduleIndex = MAX_MODULES_PER_PACK; // Invalid index
 8009152:	2320      	movs	r3, #32
 8009154:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009156:	2300      	movs	r3, #0
 8009158:	75bb      	strb	r3, [r7, #22]
 800915a:	e011      	b.n	8009180 <MCU_RegisterModule+0x74>
    if(module[index].uniqueId == announcement.moduleUniqueId){
 800915c:	7dbb      	ldrb	r3, [r7, #22]
 800915e:	4aa7      	ldr	r2, [pc, #668]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009160:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	4413      	add	r3, r2
 800916a:	3304      	adds	r3, #4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	d102      	bne.n	800917a <MCU_RegisterModule+0x6e>
      moduleIndex = index;
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	75fb      	strb	r3, [r7, #23]
      break;
 8009178:	e005      	b.n	8009186 <MCU_RegisterModule+0x7a>
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800917a:	7dbb      	ldrb	r3, [r7, #22]
 800917c:	3301      	adds	r3, #1
 800917e:	75bb      	strb	r3, [r7, #22]
 8009180:	7dbb      	ldrb	r3, [r7, #22]
 8009182:	2b1f      	cmp	r3, #31
 8009184:	d9ea      	bls.n	800915c <MCU_RegisterModule+0x50>
    }
  }

  if(moduleIndex < MAX_MODULES_PER_PACK){
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	2b1f      	cmp	r3, #31
 800918a:	d863      	bhi.n	8009254 <MCU_RegisterModule+0x148>
    // Existing module - just mark as registered
    module[moduleIndex].isRegistered = true;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	4a9b      	ldr	r2, [pc, #620]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009190:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	4413      	add	r3, r2
 800919a:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].faultCode.commsError = 0;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	4a95      	ldr	r2, [pc, #596]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091a6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80091aa:	fb01 f303 	mul.w	r3, r1, r3
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 80091b4:	7893      	ldrb	r3, [r2, #2]
 80091b6:	f023 0301 	bic.w	r3, r3, #1
 80091ba:	7093      	strb	r3, [r2, #2]
    module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 80091bc:	4b90      	ldr	r3, [pc, #576]	@ (8009400 <MCU_RegisterModule+0x2f4>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80091c4:	498d      	ldr	r1, [pc, #564]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091c6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80091ca:	fb00 f303 	mul.w	r3, r0, r3
 80091ce:	440b      	add	r3, r1
 80091d0:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80091d4:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	4a8a      	ldr	r2, [pc, #552]	@ (8009404 <MCU_RegisterModule+0x2f8>)
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	4987      	ldr	r1, [pc, #540]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091de:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80091e2:	fb00 f303 	mul.w	r3, r0, r3
 80091e6:	440b      	add	r3, r1
 80091e8:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80091ec:	601a      	str	r2, [r3, #0]
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on re-registration
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	4a82      	ldr	r2, [pc, #520]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80091f2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].statusMessagesReceived = 0;  // Reset status tracking
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	4a7d      	ldr	r2, [pc, #500]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009208:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
    
    if(debugMessages & DBG_MSG_ANNOUNCE){
 800921a:	4b75      	ldr	r3, [pc, #468]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80f8 	beq.w	8009418 <MCU_RegisterModule+0x30c>
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 8009228:	7dfa      	ldrb	r2, [r7, #23]
              moduleIndex, module[moduleIndex].moduleId, (int)announcement.moduleUniqueId);
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	4973      	ldr	r1, [pc, #460]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800922e:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009232:	fb00 f303 	mul.w	r3, r0, r3
 8009236:	440b      	add	r3, r1
 8009238:	3308      	adds	r3, #8
 800923a:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 800923c:	4619      	mov	r1, r3
              moduleIndex, module[moduleIndex].moduleId, (int)announcement.moduleUniqueId);
 800923e:	693b      	ldr	r3, [r7, #16]
      sprintf(tempBuffer,"MCU INFO - Module RE-REGISTERED: Index=%d, ID=%02x, UID=%08x",
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	460b      	mov	r3, r1
 8009244:	4970      	ldr	r1, [pc, #448]	@ (8009408 <MCU_RegisterModule+0x2fc>)
 8009246:	486c      	ldr	r0, [pc, #432]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 8009248:	f00b ff40 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800924c:	486a      	ldr	r0, [pc, #424]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 800924e:	f7fc f9f5 	bl	800563c <serialOut>
 8009252:	e0e1      	b.n	8009418 <MCU_RegisterModule+0x30c>
    }
  }
  else {
    // New module - find first empty slot
    for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]
 8009258:	e010      	b.n	800927c <MCU_RegisterModule+0x170>
      if(module[index].uniqueId == 0){  // Empty slot
 800925a:	7dbb      	ldrb	r3, [r7, #22]
 800925c:	4a67      	ldr	r2, [pc, #412]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800925e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <MCU_RegisterModule+0x16a>
        moduleIndex = index;
 8009270:	7dbb      	ldrb	r3, [r7, #22]
 8009272:	75fb      	strb	r3, [r7, #23]
        break;
 8009274:	e005      	b.n	8009282 <MCU_RegisterModule+0x176>
    for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009276:	7dbb      	ldrb	r3, [r7, #22]
 8009278:	3301      	adds	r3, #1
 800927a:	75bb      	strb	r3, [r7, #22]
 800927c:	7dbb      	ldrb	r3, [r7, #22]
 800927e:	2b1f      	cmp	r3, #31
 8009280:	d9eb      	bls.n	800925a <MCU_RegisterModule+0x14e>
      }
    }
    
    if(moduleIndex < MAX_MODULES_PER_PACK){
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b1f      	cmp	r3, #31
 8009286:	f200 809f 	bhi.w	80093c8 <MCU_RegisterModule+0x2bc>
      // Initialize new module
      module[moduleIndex].moduleId = moduleIndex + 1;  // ID = index + 1
 800928a:	7dfb      	ldrb	r3, [r7, #23]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	3201      	adds	r2, #1
 8009290:	b2d0      	uxtb	r0, r2
 8009292:	4a5a      	ldr	r2, [pc, #360]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009294:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	3308      	adds	r3, #8
 80092a0:	4602      	mov	r2, r0
 80092a2:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].uniqueId = announcement.moduleUniqueId;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4954      	ldr	r1, [pc, #336]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092aa:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 80092ae:	fb00 f303 	mul.w	r3, r0, r3
 80092b2:	440b      	add	r3, r1
 80092b4:	3304      	adds	r3, #4
 80092b6:	601a      	str	r2, [r3, #0]
      module[moduleIndex].isRegistered = true;
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	4a50      	ldr	r2, [pc, #320]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].fwVersion = announcement.moduleFw;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	89b8      	ldrh	r0, [r7, #12]
 80092d2:	4a4a      	ldr	r2, [pc, #296]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	4413      	add	r3, r2
 80092de:	330a      	adds	r3, #10
 80092e0:	4602      	mov	r2, r0
 80092e2:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].partId = announcement.modulePartId;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	7bf8      	ldrb	r0, [r7, #15]
 80092e8:	4a44      	ldr	r2, [pc, #272]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 80092ea:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3301      	adds	r3, #1
 80092f6:	4602      	mov	r2, r0
 80092f8:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].mfgId = announcement.moduleMfgId;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	7bb8      	ldrb	r0, [r7, #14]
 80092fe:	4a3f      	ldr	r2, [pc, #252]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009300:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	4602      	mov	r2, r0
 800930c:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800930e:	4b3c      	ldr	r3, [pc, #240]	@ (8009400 <MCU_RegisterModule+0x2f4>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009316:	4939      	ldr	r1, [pc, #228]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009318:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800931c:	fb00 f303 	mul.w	r3, r0, r3
 8009320:	440b      	add	r3, r1
 8009322:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8009326:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	4a36      	ldr	r2, [pc, #216]	@ (8009404 <MCU_RegisterModule+0x2f8>)
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	4933      	ldr	r1, [pc, #204]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009330:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009334:	fb00 f303 	mul.w	r3, r0, r3
 8009338:	440b      	add	r3, r1
 800933a:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800933e:	601a      	str	r2, [r3, #0]
      module[moduleIndex].statusPending = true;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	4a2e      	ldr	r2, [pc, #184]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009344:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].consecutiveTimeouts = 0;  // Initialize timeout counter for new module
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	4a28      	ldr	r2, [pc, #160]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 800935a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	4413      	add	r3, r2
 8009364:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
      module[moduleIndex].statusMessagesReceived = 0;  // Initialize status tracking
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	4a23      	ldr	r2, [pc, #140]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009370:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	4413      	add	r3, r2
 800937a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
      
      // Update module counts
      MCU_UpdateModuleCounts();
 8009382:	f002 fa6b 	bl	800b85c <MCU_UpdateModuleCounts>
      
      if(debugMessages & DBG_MSG_ANNOUNCE){
 8009386:	4b1a      	ldr	r3, [pc, #104]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d042      	beq.n	8009418 <MCU_RegisterModule+0x30c>
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 8009392:	7dfa      	ldrb	r2, [r7, #23]
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	4919      	ldr	r1, [pc, #100]	@ (80093fc <MCU_RegisterModule+0x2f0>)
 8009398:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800939c:	fb00 f303 	mul.w	r3, r0, r3
 80093a0:	440b      	add	r3, r1
 80093a2:	3308      	adds	r3, #8
 80093a4:	781b      	ldrb	r3, [r3, #0]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093a6:	4618      	mov	r0, r3
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 80093a8:	4b18      	ldr	r3, [pc, #96]	@ (800940c <MCU_RegisterModule+0x300>)
 80093aa:	7e5b      	ldrb	r3, [r3, #25]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093ac:	4619      	mov	r1, r3
                moduleIndex, module[moduleIndex].moduleId, pack.totalModules, pack.activeModules);
 80093ae:	4b17      	ldr	r3, [pc, #92]	@ (800940c <MCU_RegisterModule+0x300>)
 80093b0:	7ddb      	ldrb	r3, [r3, #23]
        sprintf(tempBuffer,"MCU INFO - New module registered: Index=%d, ID=%02x, Total=%d, Active=%d", 
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	9100      	str	r1, [sp, #0]
 80093b6:	4603      	mov	r3, r0
 80093b8:	4915      	ldr	r1, [pc, #84]	@ (8009410 <MCU_RegisterModule+0x304>)
 80093ba:	480f      	ldr	r0, [pc, #60]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093bc:	f00b fe86 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 80093c0:	480d      	ldr	r0, [pc, #52]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093c2:	f7fc f93b 	bl	800563c <serialOut>
 80093c6:	e027      	b.n	8009418 <MCU_RegisterModule+0x30c>
      }
    }
    else {
      // No more slots available
      if(debugMessages & DBG_MSG_ANNOUNCE){
 80093c8:	4b09      	ldr	r3, [pc, #36]	@ (80093f0 <MCU_RegisterModule+0x2e4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80c7 	beq.w	8009564 <MCU_RegisterModule+0x458>
        sprintf(tempBuffer,"MCU ERROR - No slots available for module UID=%08x", (int)announcement.moduleUniqueId);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	461a      	mov	r2, r3
 80093da:	490e      	ldr	r1, [pc, #56]	@ (8009414 <MCU_RegisterModule+0x308>)
 80093dc:	4806      	ldr	r0, [pc, #24]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093de:	f00b fe75 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 80093e2:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <MCU_RegisterModule+0x2ec>)
 80093e4:	f7fc f92a 	bl	800563c <serialOut>
 80093e8:	e0bd      	b.n	8009566 <MCU_RegisterModule+0x45a>
 80093ea:	bf00      	nop
 80093ec:	20000da8 	.word	0x20000da8
 80093f0:	20000010 	.word	0x20000010
 80093f4:	080197b0 	.word	0x080197b0
 80093f8:	20000b5c 	.word	0x20000b5c
 80093fc:	20000dec 	.word	0x20000dec
 8009400:	200005d0 	.word	0x200005d0
 8009404:	20000d20 	.word	0x20000d20
 8009408:	080197f0 	.word	0x080197f0
 800940c:	2000a6ec 	.word	0x2000a6ec
 8009410:	08019830 	.word	0x08019830
 8009414:	0801987c 	.word	0x0801987c
    }
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	4a54      	ldr	r2, [pc, #336]	@ (800956c <MCU_RegisterModule+0x460>)
 800941c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	4413      	add	r3, r2
 8009426:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800942a:	2201      	movs	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	4a4e      	ldr	r2, [pc, #312]	@ (800956c <MCU_RegisterModule+0x460>)
 8009432:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	4a49      	ldr	r2, [pc, #292]	@ (800956c <MCU_RegisterModule+0x460>)
 8009448:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	3308      	adds	r3, #8
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8009458:	4b45      	ldr	r3, [pc, #276]	@ (8009570 <MCU_RegisterModule+0x464>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4a42      	ldr	r2, [pc, #264]	@ (800956c <MCU_RegisterModule+0x460>)
 8009462:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009466:	fb01 f303 	mul.w	r3, r1, r3
 800946a:	4413      	add	r3, r2
 800946c:	3301      	adds	r3, #1
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	4a3d      	ldr	r2, [pc, #244]	@ (800956c <MCU_RegisterModule+0x460>)
 8009476:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	4a39      	ldr	r2, [pc, #228]	@ (800956c <MCU_RegisterModule+0x460>)
 8009488:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8009498:	4b36      	ldr	r3, [pc, #216]	@ (8009574 <MCU_RegisterModule+0x468>)
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800949e:	4b35      	ldr	r3, [pc, #212]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80094a4:	4b33      	ldr	r3, [pc, #204]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 80094aa:	4b33      	ldr	r3, [pc, #204]	@ (8009578 <MCU_RegisterModule+0x46c>)
 80094ac:	461a      	mov	r2, r3
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094b4:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 80094b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094ba:	8813      	ldrh	r3, [r2, #0]
 80094bc:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80094c0:	f361 030a 	bfi	r3, r1, #0, #11
 80094c4:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	4a28      	ldr	r2, [pc, #160]	@ (800956c <MCU_RegisterModule+0x460>)
 80094ca:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80094ce:	fb01 f303 	mul.w	r3, r1, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	3308      	adds	r3, #8
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80094de:	4925      	ldr	r1, [pc, #148]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094e0:	680b      	ldr	r3, [r1, #0]
 80094e2:	f362 23dc 	bfi	r3, r2, #11, #18
 80094e6:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80094e8:	4a22      	ldr	r2, [pc, #136]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094ea:	7913      	ldrb	r3, [r2, #4]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80094f2:	4a20      	ldr	r2, [pc, #128]	@ (8009574 <MCU_RegisterModule+0x468>)
 80094f4:	7913      	ldrb	r3, [r2, #4]
 80094f6:	2108      	movs	r1, #8
 80094f8:	f361 0303 	bfi	r3, r1, #0, #4
 80094fc:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80094fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009574 <MCU_RegisterModule+0x468>)
 8009500:	7913      	ldrb	r3, [r2, #4]
 8009502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009506:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009508:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <MCU_RegisterModule+0x468>)
 800950a:	7913      	ldrb	r3, [r2, #4]
 800950c:	f043 0310 	orr.w	r3, r3, #16
 8009510:	7113      	strb	r3, [r2, #4]

  if(debugMessages & DBG_MSG_REGISTRATION){
 8009512:	4b1a      	ldr	r3, [pc, #104]	@ (800957c <MCU_RegisterModule+0x470>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d012      	beq.n	8009544 <MCU_RegisterModule+0x438>
    sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); 
 800951e:	793b      	ldrb	r3, [r7, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	797b      	ldrb	r3, [r7, #5]
 8009524:	461c      	mov	r4, r3
 8009526:	79bb      	ldrb	r3, [r7, #6]
 8009528:	79fa      	ldrb	r2, [r7, #7]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	9102      	str	r1, [sp, #8]
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4623      	mov	r3, r4
 8009534:	4602      	mov	r2, r0
 8009536:	4912      	ldr	r1, [pc, #72]	@ (8009580 <MCU_RegisterModule+0x474>)
 8009538:	4812      	ldr	r0, [pc, #72]	@ (8009584 <MCU_RegisterModule+0x478>)
 800953a:	f00b fdc7 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 800953e:	4811      	ldr	r0, [pc, #68]	@ (8009584 <MCU_RegisterModule+0x478>)
 8009540:	f7fc f87c 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009544:	2001      	movs	r0, #1
 8009546:	f7ff fd41 	bl	8008fcc <MCU_TransmitMessageQueue>
  
  // Request initial status from newly registered module
  MCU_RequestModuleStatus(module[moduleIndex].moduleId);
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	4a07      	ldr	r2, [pc, #28]	@ (800956c <MCU_RegisterModule+0x460>)
 800954e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	4413      	add	r3, r2
 8009558:	3308      	adds	r3, #8
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fd95 	bl	800a08c <MCU_RequestModuleStatus>
 8009562:	e000      	b.n	8009566 <MCU_RegisterModule+0x45a>
      return;
 8009564:	bf00      	nop
}
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}
 800956c:	20000dec 	.word	0x20000dec
 8009570:	2000a6ec 	.word	0x2000a6ec
 8009574:	20000d40 	.word	0x20000d40
 8009578:	20000d4c 	.word	0x20000d4c
 800957c:	20000010 	.word	0x20000010
 8009580:	080198b0 	.word	0x080198b0
 8009584:	20000b5c 	.word	0x20000b5c

08009588 <MCU_DeRegisterModule>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r M o d u l e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterModule(uint8_t moduleId){
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
    CANFRM_MODULE_DEREGISTER deRegistration;

    // configure the packet - format like other module-specific messages
    deRegistration.moduleId = moduleId;
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	733b      	strb	r3, [r7, #12]
    deRegistration.controllerId = pack.id;
 8009596:	4b25      	ldr	r3, [pc, #148]	@ (800962c <MCU_DeRegisterModule+0xa4>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	737b      	strb	r3, [r7, #13]

    // Clear transmit object
    txObj.word[0] = 0;                              // Configure transmit message
 800959c:	4b24      	ldr	r3, [pc, #144]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80095a2:	4b23      	ldr	r3, [pc, #140]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80095a8:	4b21      	ldr	r3, [pc, #132]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80095ae:	89ba      	ldrh	r2, [r7, #12]
 80095b0:	4b20      	ldr	r3, [pc, #128]	@ (8009634 <MCU_DeRegisterModule+0xac>)
 80095b2:	801a      	strh	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_DEREGISTER;         // Standard ID - 0x518 for individual deregister
 80095b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095b6:	8813      	ldrh	r3, [r2, #0]
 80095b8:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
 80095bc:	f361 030a 	bfi	r3, r1, #0, #11
 80095c0:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                     // Extended ID - specific module
 80095c2:	79fa      	ldrb	r2, [r7, #7]
 80095c4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80095c8:	4919      	ldr	r1, [pc, #100]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095ca:	680b      	ldr	r3, [r1, #0]
 80095cc:	f362 23dc 	bfi	r3, r2, #11, #18
 80095d0:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80095d2:	4a17      	ldr	r2, [pc, #92]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095d4:	7913      	ldrb	r3, [r2, #4]
 80095d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095da:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit (moduleId + controllerId)
 80095dc:	4a14      	ldr	r2, [pc, #80]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095de:	7913      	ldrb	r3, [r2, #4]
 80095e0:	2102      	movs	r1, #2
 80095e2:	f361 0303 	bfi	r3, r1, #0, #4
 80095e6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80095e8:	4a11      	ldr	r2, [pc, #68]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095ea:	7913      	ldrb	r3, [r2, #4]
 80095ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80095f2:	4a0f      	ldr	r2, [pc, #60]	@ (8009630 <MCU_DeRegisterModule+0xa8>)
 80095f4:	7913      	ldrb	r3, [r2, #4]
 80095f6:	f043 0310 	orr.w	r3, r3, #16
 80095fa:	7113      	strb	r3, [r2, #4]

    if(debugMessages & DBG_MSG_DEREGISTER){ 
 80095fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009638 <MCU_DeRegisterModule+0xb0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <MCU_DeRegisterModule+0x94>
        sprintf(tempBuffer,"MCU TX 0x518 De-Register module ID=%02x, CTL=%02x", moduleId, pack.id); 
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <MCU_DeRegisterModule+0xa4>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	490b      	ldr	r1, [pc, #44]	@ (800963c <MCU_DeRegisterModule+0xb4>)
 8009610:	480b      	ldr	r0, [pc, #44]	@ (8009640 <MCU_DeRegisterModule+0xb8>)
 8009612:	f00b fd5b 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 8009616:	480a      	ldr	r0, [pc, #40]	@ (8009640 <MCU_DeRegisterModule+0xb8>)
 8009618:	f7fc f810 	bl	800563c <serialOut>
    }
    MCU_TransmitMessageQueue(CAN2);                  // Send it
 800961c:	2001      	movs	r0, #1
 800961e:	f7ff fcd5 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	2000a6ec 	.word	0x2000a6ec
 8009630:	20000d40 	.word	0x20000d40
 8009634:	20000d4c 	.word	0x20000d4c
 8009638:	20000010 	.word	0x20000010
 800963c:	080198fc 	.word	0x080198fc
 8009640:	20000b5c 	.word	0x20000b5c

08009644 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 800964a:	4b32      	ldr	r3, [pc, #200]	@ (8009714 <MCU_DeRegisterAllModules+0xd0>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	703b      	strb	r3, [r7, #0]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8009650:	4b31      	ldr	r3, [pc, #196]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009656:	4b30      	ldr	r3, [pc, #192]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009658:	2200      	movs	r2, #0
 800965a:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800965c:	4b2e      	ldr	r3, [pc, #184]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800965e:	2200      	movs	r2, #0
 8009660:	609a      	str	r2, [r3, #8]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8009662:	783a      	ldrb	r2, [r7, #0]
 8009664:	4b2d      	ldr	r3, [pc, #180]	@ (800971c <MCU_DeRegisterAllModules+0xd8>)
 8009666:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8009668:	4a2b      	ldr	r2, [pc, #172]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800966a:	8813      	ldrh	r3, [r2, #0]
 800966c:	f240 511e 	movw	r1, #1310	@ 0x51e
 8009670:	f361 030a 	bfi	r3, r1, #0, #11
 8009674:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8009676:	4a28      	ldr	r2, [pc, #160]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	f36f 23dc 	bfc	r3, #11, #18
 800967e:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009680:	4a25      	ldr	r2, [pc, #148]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009682:	7913      	ldrb	r3, [r2, #4]
 8009684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009688:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800968a:	4a23      	ldr	r2, [pc, #140]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 800968c:	7913      	ldrb	r3, [r2, #4]
 800968e:	2101      	movs	r1, #1
 8009690:	f361 0303 	bfi	r3, r1, #0, #4
 8009694:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009696:	4a20      	ldr	r2, [pc, #128]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 8009698:	7913      	ldrb	r3, [r2, #4]
 800969a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800969e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80096a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009718 <MCU_DeRegisterAllModules+0xd4>)
 80096a2:	7913      	ldrb	r3, [r2, #4]
 80096a4:	f043 0310 	orr.w	r3, r3, #16
 80096a8:	7113      	strb	r3, [r2, #4]

    if(debugMessages & DBG_MSG_DEREGISTER_ALL){ 
 80096aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009720 <MCU_DeRegisterAllModules+0xdc>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <MCU_DeRegisterAllModules+0x80>
        sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); 
 80096b6:	491b      	ldr	r1, [pc, #108]	@ (8009724 <MCU_DeRegisterAllModules+0xe0>)
 80096b8:	481b      	ldr	r0, [pc, #108]	@ (8009728 <MCU_DeRegisterAllModules+0xe4>)
 80096ba:	f00b fd07 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 80096be:	481a      	ldr	r0, [pc, #104]	@ (8009728 <MCU_DeRegisterAllModules+0xe4>)
 80096c0:	f7fb ffbc 	bl	800563c <serialOut>
    }
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7ff fc81 	bl	8008fcc <MCU_TransmitMessageQueue>
    
    // Mark all modules as unregistered locally
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e018      	b.n	8009702 <MCU_DeRegisterAllModules+0xbe>
        if(module[i].uniqueId != 0){
 80096d0:	4a16      	ldr	r2, [pc, #88]	@ (800972c <MCU_DeRegisterAllModules+0xe8>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3304      	adds	r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <MCU_DeRegisterAllModules+0xb8>
            module[i].isRegistered = false;
 80096e6:	4a11      	ldr	r2, [pc, #68]	@ (800972c <MCU_DeRegisterAllModules+0xe8>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3301      	adds	r3, #1
 8009700:	607b      	str	r3, [r7, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b1f      	cmp	r3, #31
 8009706:	dde3      	ble.n	80096d0 <MCU_DeRegisterAllModules+0x8c>
        }
    }
    
    // Update module counts
    MCU_UpdateModuleCounts();
 8009708:	f002 f8a8 	bl	800b85c <MCU_UpdateModuleCounts>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2000a6ec 	.word	0x2000a6ec
 8009718:	20000d40 	.word	0x20000d40
 800971c:	20000d4c 	.word	0x20000d4c
 8009720:	20000010 	.word	0x20000010
 8009724:	08019930 	.word	0x08019930
 8009728:	20000b5c 	.word	0x20000b5c
 800972c:	20000dec 	.word	0x20000dec

08009730 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	2201      	movs	r2, #1
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f00b fd2c 	bl	801519a <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8009742:	4b22      	ldr	r3, [pc, #136]	@ (80097cc <MCU_IsolateAllModules+0x9c>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8009748:	4b21      	ldr	r3, [pc, #132]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800974e:	4b20      	ldr	r3, [pc, #128]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009750:	2200      	movs	r2, #0
 8009752:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009754:	4b1e      	ldr	r3, [pc, #120]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009756:	2200      	movs	r2, #0
 8009758:	609a      	str	r2, [r3, #8]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 800975a:	793a      	ldrb	r2, [r7, #4]
 800975c:	4b1d      	ldr	r3, [pc, #116]	@ (80097d4 <MCU_IsolateAllModules+0xa4>)
 800975e:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8009760:	4a1b      	ldr	r2, [pc, #108]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009762:	8813      	ldrh	r3, [r2, #0]
 8009764:	f240 511f 	movw	r1, #1311	@ 0x51f
 8009768:	f361 030a 	bfi	r3, r1, #0, #11
 800976c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 800976e:	4a18      	ldr	r2, [pc, #96]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	f36f 23dc 	bfc	r3, #11, #18
 8009776:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009778:	4a15      	ldr	r2, [pc, #84]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800977a:	7913      	ldrb	r3, [r2, #4]
 800977c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009780:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8009782:	4a13      	ldr	r2, [pc, #76]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009784:	7913      	ldrb	r3, [r2, #4]
 8009786:	2101      	movs	r1, #1
 8009788:	f361 0303 	bfi	r3, r1, #0, #4
 800978c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800978e:	4a10      	ldr	r2, [pc, #64]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 8009790:	7913      	ldrb	r3, [r2, #4]
 8009792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009796:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009798:	4a0d      	ldr	r2, [pc, #52]	@ (80097d0 <MCU_IsolateAllModules+0xa0>)
 800979a:	7913      	ldrb	r3, [r2, #4]
 800979c:	f043 0310 	orr.w	r3, r3, #16
 80097a0:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 80097a2:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <MCU_IsolateAllModules+0xa8>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <MCU_IsolateAllModules+0x8c>
 80097ae:	490b      	ldr	r1, [pc, #44]	@ (80097dc <MCU_IsolateAllModules+0xac>)
 80097b0:	480b      	ldr	r0, [pc, #44]	@ (80097e0 <MCU_IsolateAllModules+0xb0>)
 80097b2:	f00b fc8b 	bl	80150cc <siprintf>
 80097b6:	480a      	ldr	r0, [pc, #40]	@ (80097e0 <MCU_IsolateAllModules+0xb0>)
 80097b8:	f7fb ff40 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80097bc:	2001      	movs	r0, #1
 80097be:	f7ff fc05 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	2000a6ec 	.word	0x2000a6ec
 80097d0:	20000d40 	.word	0x20000d40
 80097d4:	20000d4c 	.word	0x20000d4c
 80097d8:	2000000c 	.word	0x2000000c
 80097dc:	08019958 	.word	0x08019958
 80097e0:	20000b5c 	.word	0x20000b5c

080097e4 <MCU_RequestModuleAnnouncement>:

/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e A n n o u n c e m e n t                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleAnnouncement(void){
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ANNOUNCE_REQUEST announceRequest;
  
  // configure the packet
  announceRequest.controllerId = pack.id;
 80097ea:	4b22      	ldr	r3, [pc, #136]	@ (8009874 <MCU_RequestModuleAnnouncement+0x90>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	713b      	strb	r3, [r7, #4]
  
  // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 80097f0:	4b21      	ldr	r3, [pc, #132]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80097f6:	4b20      	ldr	r3, [pc, #128]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80097fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 80097fe:	2200      	movs	r2, #0
 8009800:	609a      	str	r2, [r3, #8]
  
  // copy announcement request packet to txd structure
  memcpy(txd, &announceRequest, sizeof(announceRequest));
 8009802:	793a      	ldrb	r2, [r7, #4]
 8009804:	4b1d      	ldr	r3, [pc, #116]	@ (800987c <MCU_RequestModuleAnnouncement+0x98>)
 8009806:	701a      	strb	r2, [r3, #0]
  
  txObj.bF.id.SID = ID_MODULE_ANNOUNCE_REQUEST;   // Standard ID
 8009808:	4a1b      	ldr	r2, [pc, #108]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 800980a:	8813      	ldrh	r3, [r2, #0]
 800980c:	f240 511d 	movw	r1, #1309	@ 0x51d
 8009810:	f361 030a 	bfi	r3, r1, #0, #11
 8009814:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID - broadcast to all
 8009816:	4a18      	ldr	r2, [pc, #96]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009818:	6813      	ldr	r3, [r2, #0]
 800981a:	f36f 23dc 	bfc	r3, #11, #18
 800981e:	6013      	str	r3, [r2, #0]
  
  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009820:	4a15      	ldr	r2, [pc, #84]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009822:	7913      	ldrb	r3, [r2, #4]
 8009824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009828:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 1 byte to transmit
 800982a:	4a13      	ldr	r2, [pc, #76]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 800982c:	7913      	ldrb	r3, [r2, #4]
 800982e:	2101      	movs	r1, #1
 8009830:	f361 0303 	bfi	r3, r1, #0, #4
 8009834:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009836:	4a10      	ldr	r2, [pc, #64]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009838:	7913      	ldrb	r3, [r2, #4]
 800983a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800983e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009840:	4a0d      	ldr	r2, [pc, #52]	@ (8009878 <MCU_RequestModuleAnnouncement+0x94>)
 8009842:	7913      	ldrb	r3, [r2, #4]
 8009844:	f043 0310 	orr.w	r3, r3, #16
 8009848:	7113      	strb	r3, [r2, #4]
  
  if(debugMessages & DBG_MSG_ANNOUNCE_REQ){
 800984a:	4b0d      	ldr	r3, [pc, #52]	@ (8009880 <MCU_RequestModuleAnnouncement+0x9c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d006      	beq.n	8009864 <MCU_RequestModuleAnnouncement+0x80>
    sprintf(tempBuffer,"MCU TX 0x51D Request module announcements"); 
 8009856:	490b      	ldr	r1, [pc, #44]	@ (8009884 <MCU_RequestModuleAnnouncement+0xa0>)
 8009858:	480b      	ldr	r0, [pc, #44]	@ (8009888 <MCU_RequestModuleAnnouncement+0xa4>)
 800985a:	f00b fc37 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 800985e:	480a      	ldr	r0, [pc, #40]	@ (8009888 <MCU_RequestModuleAnnouncement+0xa4>)
 8009860:	f7fb feec 	bl	800563c <serialOut>
  }
  MCU_TransmitMessageQueue(CAN2);                  // Send it
 8009864:	2001      	movs	r0, #1
 8009866:	f7ff fbb1 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	2000a6ec 	.word	0x2000a6ec
 8009878:	20000d40 	.word	0x20000d40
 800987c:	20000d4c 	.word	0x20000d4c
 8009880:	20000010 	.word	0x20000010
 8009884:	0801997c 	.word	0x0801997c
 8009888:	20000b5c 	.word	0x20000b5c

0800988c <MCU_ProcessModuleTime>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 800988c:	b5b0      	push	{r4, r5, r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 8009892:	4b34      	ldr	r3, [pc, #208]	@ (8009964 <MCU_ProcessModuleTime+0xd8>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d006      	beq.n	80098ac <MCU_ProcessModuleTime+0x20>
 800989e:	4932      	ldr	r1, [pc, #200]	@ (8009968 <MCU_ProcessModuleTime+0xdc>)
 80098a0:	4832      	ldr	r0, [pc, #200]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 80098a2:	f00b fc13 	bl	80150cc <siprintf>
 80098a6:	4831      	ldr	r0, [pc, #196]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 80098a8:	f7fb fec8 	bl	800563c <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80098ac:	f7fb ffae 	bl	800580c <readRTC>
 80098b0:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 80098b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009970 <MCU_ProcessModuleTime+0xe4>)
 80098b6:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80098c0:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 80098c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098c6:	4614      	mov	r4, r2
 80098c8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80098cc:	4623      	mov	r3, r4
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	462a      	mov	r2, r5
 80098d4:	f362 031e 	bfi	r3, r2, #0, #31
 80098d8:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 80098da:	4b26      	ldr	r3, [pc, #152]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80098e0:	4b24      	ldr	r3, [pc, #144]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80098e6:	4b23      	ldr	r3, [pc, #140]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 80098ec:	463b      	mov	r3, r7
 80098ee:	2208      	movs	r2, #8
 80098f0:	4619      	mov	r1, r3
 80098f2:	4821      	ldr	r0, [pc, #132]	@ (8009978 <MCU_ProcessModuleTime+0xec>)
 80098f4:	f00c fb5d 	bl	8015fb2 <memcpy>

  txObj.bF.id.SID = ID_MODULE_SET_TIME;     // Standard ID
 80098f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 80098fa:	8813      	ldrh	r3, [r2, #0]
 80098fc:	f240 5116 	movw	r1, #1302	@ 0x516
 8009900:	f361 030a 	bfi	r3, r1, #0, #11
 8009904:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8009906:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	f36f 23dc 	bfc	r3, #11, #18
 800990e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009910:	4a18      	ldr	r2, [pc, #96]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009912:	7913      	ldrb	r3, [r2, #4]
 8009914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009918:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 800991c:	7913      	ldrb	r3, [r2, #4]
 800991e:	2108      	movs	r1, #8
 8009920:	f361 0303 	bfi	r3, r1, #0, #4
 8009924:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009926:	4a13      	ldr	r2, [pc, #76]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009928:	7913      	ldrb	r3, [r2, #4]
 800992a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800992e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009930:	4a10      	ldr	r2, [pc, #64]	@ (8009974 <MCU_ProcessModuleTime+0xe8>)
 8009932:	7913      	ldrb	r3, [r2, #4]
 8009934:	f043 0310 	orr.w	r3, r3, #16
 8009938:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 800993a:	4b0a      	ldr	r3, [pc, #40]	@ (8009964 <MCU_ProcessModuleTime+0xd8>)
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d006      	beq.n	8009954 <MCU_ProcessModuleTime+0xc8>
 8009946:	490d      	ldr	r1, [pc, #52]	@ (800997c <MCU_ProcessModuleTime+0xf0>)
 8009948:	4808      	ldr	r0, [pc, #32]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 800994a:	f00b fbbf 	bl	80150cc <siprintf>
 800994e:	4807      	ldr	r0, [pc, #28]	@ (800996c <MCU_ProcessModuleTime+0xe0>)
 8009950:	f7fb fe74 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009954:	2001      	movs	r0, #1
 8009956:	f7ff fb39 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bdb0      	pop	{r4, r5, r7, pc}
 8009962:	bf00      	nop
 8009964:	2000000c 	.word	0x2000000c
 8009968:	080199a8 	.word	0x080199a8
 800996c:	20000b5c 	.word	0x20000b5c
 8009970:	2000a6ec 	.word	0x2000a6ec
 8009974:	20000d40 	.word	0x20000d40
 8009978:	20000d4c 	.word	0x20000d4c
 800997c:	080199c4 	.word	0x080199c4

08009980 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 800998a:	2320      	movs	r3, #32
 800998c:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800998e:	2300      	movs	r3, #0
 8009990:	73bb      	strb	r3, [r7, #14]
 8009992:	e02c      	b.n	80099ee <MCU_RequestHardware+0x6e>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	4a49      	ldr	r2, [pc, #292]	@ (8009abc <MCU_RequestHardware+0x13c>)
 8009998:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	4413      	add	r3, r2
 80099a2:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f083 0301 	eor.w	r3, r3, #1
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d119      	bne.n	80099e6 <MCU_RequestHardware+0x66>
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	4a41      	ldr	r2, [pc, #260]	@ (8009abc <MCU_RequestHardware+0x13c>)
 80099b6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3304      	adds	r3, #4
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00e      	beq.n	80099e6 <MCU_RequestHardware+0x66>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	4a3c      	ldr	r2, [pc, #240]	@ (8009abc <MCU_RequestHardware+0x13c>)
 80099cc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	4413      	add	r3, r2
 80099d6:	3308      	adds	r3, #8
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d103      	bne.n	80099e8 <MCU_RequestHardware+0x68>
      moduleIndex = index; // found it - save the index
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	73fb      	strb	r3, [r7, #15]
 80099e4:	e000      	b.n	80099e8 <MCU_RequestHardware+0x68>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 80099e6:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	3301      	adds	r3, #1
 80099ec:	73bb      	strb	r3, [r7, #14]
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b1f      	cmp	r3, #31
 80099f2:	d9cf      	bls.n	8009994 <MCU_RequestHardware+0x14>
    }
  if (moduleIndex == MAX_MODULES_PER_PACK){
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d10d      	bne.n	8009a16 <MCU_RequestHardware+0x96>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 80099fa:	4b31      	ldr	r3, [pc, #196]	@ (8009ac0 <MCU_RequestHardware+0x140>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0309 	and.w	r3, r3, #9
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	d156      	bne.n	8009ab4 <MCU_RequestHardware+0x134>
 8009a06:	492f      	ldr	r1, [pc, #188]	@ (8009ac4 <MCU_RequestHardware+0x144>)
 8009a08:	482f      	ldr	r0, [pc, #188]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 8009a0a:	f00b fb5f 	bl	80150cc <siprintf>
 8009a0e:	482e      	ldr	r0, [pc, #184]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 8009a10:	f7fb fe14 	bl	800563c <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8009a14:	e04e      	b.n	8009ab4 <MCU_RequestHardware+0x134>
    module[moduleIndex].hardwarePending = true;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	4a28      	ldr	r2, [pc, #160]	@ (8009abc <MCU_RequestHardware+0x13c>)
 8009a1a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8009a30:	4b26      	ldr	r3, [pc, #152]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009a36:	4b25      	ldr	r3, [pc, #148]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009a3c:	4b23      	ldr	r3, [pc, #140]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	609a      	str	r2, [r3, #8]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8009a42:	7b3a      	ldrb	r2, [r7, #12]
 8009a44:	4b22      	ldr	r3, [pc, #136]	@ (8009ad0 <MCU_RequestHardware+0x150>)
 8009a46:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8009a48:	4a20      	ldr	r2, [pc, #128]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a4a:	8813      	ldrh	r3, [r2, #0]
 8009a4c:	f240 5111 	movw	r1, #1297	@ 0x511
 8009a50:	f361 030a 	bfi	r3, r1, #0, #11
 8009a54:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8009a56:	79fa      	ldrb	r2, [r7, #7]
 8009a58:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009a5c:	491b      	ldr	r1, [pc, #108]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	f362 23dc 	bfi	r3, r2, #11, #18
 8009a64:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8009a66:	4a19      	ldr	r2, [pc, #100]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a68:	7913      	ldrb	r3, [r2, #4]
 8009a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a6e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8009a70:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a72:	7913      	ldrb	r3, [r2, #4]
 8009a74:	2101      	movs	r1, #1
 8009a76:	f361 0303 	bfi	r3, r1, #0, #4
 8009a7a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009a7c:	4a13      	ldr	r2, [pc, #76]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a7e:	7913      	ldrb	r3, [r2, #4]
 8009a80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a84:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009a86:	4a11      	ldr	r2, [pc, #68]	@ (8009acc <MCU_RequestHardware+0x14c>)
 8009a88:	7913      	ldrb	r3, [r2, #4]
 8009a8a:	f043 0310 	orr.w	r3, r3, #16
 8009a8e:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8009a90:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac0 <MCU_RequestHardware+0x140>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d008      	beq.n	8009aae <MCU_RequestHardware+0x12e>
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	490c      	ldr	r1, [pc, #48]	@ (8009ad4 <MCU_RequestHardware+0x154>)
 8009aa2:	4809      	ldr	r0, [pc, #36]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 8009aa4:	f00b fb12 	bl	80150cc <siprintf>
 8009aa8:	4807      	ldr	r0, [pc, #28]	@ (8009ac8 <MCU_RequestHardware+0x148>)
 8009aaa:	f7fb fdc7 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8009aae:	2001      	movs	r0, #1
 8009ab0:	f7ff fa8c 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000dec 	.word	0x20000dec
 8009ac0:	2000000c 	.word	0x2000000c
 8009ac4:	080199dc 	.word	0x080199dc
 8009ac8:	20000b5c 	.word	0x20000b5c
 8009acc:	20000d40 	.word	0x20000d40
 8009ad0:	20000d4c 	.word	0x20000d4c
 8009ad4:	08019a18 	.word	0x08019a18

08009ad8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	b08e      	sub	sp, #56	@ 0x38
 8009ade:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f00b fb57 	bl	801519a <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8009aec:	4aa0      	ldr	r2, [pc, #640]	@ (8009d70 <MCU_ProcessModuleHardware+0x298>)
 8009aee:	463b      	mov	r3, r7
 8009af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009af4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 8009af8:	2320      	movs	r3, #32
 8009afa:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009afc:	2300      	movs	r3, #0
 8009afe:	75bb      	strb	r3, [r7, #22]
 8009b00:	e031      	b.n	8009b66 <MCU_ProcessModuleHardware+0x8e>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009b02:	7dbb      	ldrb	r3, [r7, #22]
 8009b04:	4a9b      	ldr	r2, [pc, #620]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009b06:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	f083 0301 	eor.w	r3, r3, #1
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d11e      	bne.n	8009b5e <MCU_ProcessModuleHardware+0x86>
 8009b20:	7dbb      	ldrb	r3, [r7, #22]
 8009b22:	4a94      	ldr	r2, [pc, #592]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009b24:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3304      	adds	r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d013      	beq.n	8009b5e <MCU_ProcessModuleHardware+0x86>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009b36:	4b90      	ldr	r3, [pc, #576]	@ (8009d78 <MCU_ProcessModuleHardware+0x2a0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009b3e:	7dbb      	ldrb	r3, [r7, #22]
 8009b40:	498c      	ldr	r1, [pc, #560]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009b42:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009b46:	fb00 f303 	mul.w	r3, r0, r3
 8009b4a:	440b      	add	r3, r1
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d103      	bne.n	8009b60 <MCU_ProcessModuleHardware+0x88>
      moduleIndex = index; // found it - save the index
 8009b58:	7dbb      	ldrb	r3, [r7, #22]
 8009b5a:	75fb      	strb	r3, [r7, #23]
 8009b5c:	e000      	b.n	8009b60 <MCU_ProcessModuleHardware+0x88>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 8009b5e:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8009b60:	7dbb      	ldrb	r3, [r7, #22]
 8009b62:	3301      	adds	r3, #1
 8009b64:	75bb      	strb	r3, [r7, #22]
 8009b66:	7dbb      	ldrb	r3, [r7, #22]
 8009b68:	2b1f      	cmp	r3, #31
 8009b6a:	d9ca      	bls.n	8009b02 <MCU_ProcessModuleHardware+0x2a>
  }

  if (moduleIndex == MAX_MODULES_PER_PACK){
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d10e      	bne.n	8009b90 <MCU_ProcessModuleHardware+0xb8>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8009b72:	4b82      	ldr	r3, [pc, #520]	@ (8009d7c <MCU_ProcessModuleHardware+0x2a4>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 0309 	and.w	r3, r3, #9
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	f040 825c 	bne.w	800a038 <MCU_ProcessModuleHardware+0x560>
 8009b80:	497f      	ldr	r1, [pc, #508]	@ (8009d80 <MCU_ProcessModuleHardware+0x2a8>)
 8009b82:	4880      	ldr	r0, [pc, #512]	@ (8009d84 <MCU_ProcessModuleHardware+0x2ac>)
 8009b84:	f00b faa2 	bl	80150cc <siprintf>
 8009b88:	487e      	ldr	r0, [pc, #504]	@ (8009d84 <MCU_ProcessModuleHardware+0x2ac>)
 8009b8a:	f7fb fd57 	bl	800563c <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009b8e:	e253      	b.n	800a038 <MCU_ProcessModuleHardware+0x560>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	8838      	ldrh	r0, [r7, #0]
 8009b94:	4a77      	ldr	r2, [pc, #476]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009b96:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009b9a:	fb01 f303 	mul.w	r3, r1, r3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	330e      	adds	r3, #14
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	8878      	ldrh	r0, [r7, #2]
 8009baa:	4a72      	ldr	r2, [pc, #456]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009bac:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bb0:	fb01 f303 	mul.w	r3, r1, r3
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3310      	adds	r3, #16
 8009bb8:	4602      	mov	r2, r0
 8009bba:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	88b8      	ldrh	r0, [r7, #4]
 8009bc0:	4a6c      	ldr	r2, [pc, #432]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009bc2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3312      	adds	r3, #18
 8009bce:	4602      	mov	r2, r0
 8009bd0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	88f8      	ldrh	r0, [r7, #6]
 8009bd6:	4a67      	ldr	r2, [pc, #412]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009bd8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009bdc:	fb01 f303 	mul.w	r3, r1, r3
 8009be0:	4413      	add	r3, r2
 8009be2:	330c      	adds	r3, #12
 8009be4:	4602      	mov	r2, r0
 8009be6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009be8:	4b67      	ldr	r3, [pc, #412]	@ (8009d88 <MCU_ProcessModuleHardware+0x2b0>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bf0:	4960      	ldr	r1, [pc, #384]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009bf2:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009bf6:	fb00 f303 	mul.w	r3, r0, r3
 8009bfa:	440b      	add	r3, r1
 8009bfc:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8009c00:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	4a61      	ldr	r2, [pc, #388]	@ (8009d8c <MCU_ProcessModuleHardware+0x2b4>)
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	495a      	ldr	r1, [pc, #360]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009c0a:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 8009c0e:	fb00 f303 	mul.w	r3, r0, r3
 8009c12:	440b      	add	r3, r1
 8009c14:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8009c18:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	4a55      	ldr	r2, [pc, #340]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009c1e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c22:	fb01 f303 	mul.w	r3, r1, r3
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	4a50      	ldr	r2, [pc, #320]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009c34:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	330e      	adds	r3, #14
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f6 fc56 	bl	80004f4 <__aeabi_i2d>
 8009c48:	a345      	add	r3, pc, #276	@ (adr r3, 8009d60 <MCU_ProcessModuleHardware+0x288>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fcbb 	bl	80005c8 <__aeabi_dmul>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	a343      	add	r3, pc, #268	@ (adr r3, 8009d68 <MCU_ProcessModuleHardware+0x290>)
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fafa 	bl	8000258 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	f7f6 ffa4 	bl	8000bb8 <__aeabi_d2f>
 8009c70:	4603      	mov	r3, r0
 8009c72:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	4a3f      	ldr	r2, [pc, #252]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009c78:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009c7c:	fb01 f303 	mul.w	r3, r1, r3
 8009c80:	4413      	add	r3, r2
 8009c82:	3310      	adds	r3, #16
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7f6 fc34 	bl	80004f4 <__aeabi_i2d>
 8009c8c:	a334      	add	r3, pc, #208	@ (adr r3, 8009d60 <MCU_ProcessModuleHardware+0x288>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fc99 	bl	80005c8 <__aeabi_dmul>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	a332      	add	r3, pc, #200	@ (adr r3, 8009d68 <MCU_ProcessModuleHardware+0x290>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fad8 	bl	8000258 <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f7f6 ff82 	bl	8000bb8 <__aeabi_d2f>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 8009cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	d566      	bpl.n	8009d94 <MCU_ProcessModuleHardware+0x2bc>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8009d7c <MCU_ProcessModuleHardware+0x2a4>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	f003 0309 	and.w	r3, r3, #9
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d113      	bne.n	8009cfa <MCU_ProcessModuleHardware+0x222>
 8009cd2:	4b29      	ldr	r3, [pc, #164]	@ (8009d78 <MCU_ProcessModuleHardware+0x2a0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009cda:	461c      	mov	r4, r3
 8009cdc:	6938      	ldr	r0, [r7, #16]
 8009cde:	f7f6 fc1b 	bl	8000518 <__aeabi_f2d>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	e9cd 2300 	strd	r2, r3, [sp]
 8009cea:	4622      	mov	r2, r4
 8009cec:	4928      	ldr	r1, [pc, #160]	@ (8009d90 <MCU_ProcessModuleHardware+0x2b8>)
 8009cee:	4825      	ldr	r0, [pc, #148]	@ (8009d84 <MCU_ProcessModuleHardware+0x2ac>)
 8009cf0:	f00b f9ec 	bl	80150cc <siprintf>
 8009cf4:	4823      	ldr	r0, [pc, #140]	@ (8009d84 <MCU_ProcessModuleHardware+0x2ac>)
 8009cf6:	f7fb fca1 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009cfe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d02:	fb01 f303 	mul.w	r3, r1, r3
 8009d06:	4413      	add	r3, r2
 8009d08:	330e      	adds	r3, #14
 8009d0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009d0e:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	4a18      	ldr	r2, [pc, #96]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009d14:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3310      	adds	r3, #16
 8009d20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009d24:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	4a12      	ldr	r2, [pc, #72]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009d2a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009d38:	7893      	ldrb	r3, [r2, #2]
 8009d3a:	f043 0302 	orr.w	r3, r3, #2
 8009d3e:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	4a0c      	ldr	r2, [pc, #48]	@ (8009d74 <MCU_ProcessModuleHardware+0x29c>)
 8009d44:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3308      	adds	r3, #8
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2100      	movs	r1, #0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 fae7 	bl	800b328 <MCU_TransmitState>
 8009d5a:	e04e      	b.n	8009dfa <MCU_ProcessModuleHardware+0x322>
 8009d5c:	f3af 8000 	nop.w
 8009d60:	47ae147b 	.word	0x47ae147b
 8009d64:	3f947ae1 	.word	0x3f947ae1
 8009d68:	47ae147b 	.word	0x47ae147b
 8009d6c:	40847ae1 	.word	0x40847ae1
 8009d70:	20000da8 	.word	0x20000da8
 8009d74:	20000dec 	.word	0x20000dec
 8009d78:	20000d9c 	.word	0x20000d9c
 8009d7c:	2000000c 	.word	0x2000000c
 8009d80:	08019a40 	.word	0x08019a40
 8009d84:	20000b5c 	.word	0x20000b5c
 8009d88:	200005d0 	.word	0x200005d0
 8009d8c:	20000d20 	.word	0x20000d20
 8009d90:	08019a80 	.word	0x08019a80
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d98:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	dd29      	ble.n	8009dfa <MCU_ProcessModuleHardware+0x322>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 8009da6:	4bae      	ldr	r3, [pc, #696]	@ (800a060 <MCU_ProcessModuleHardware+0x588>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d018      	beq.n	8009de4 <MCU_ProcessModuleHardware+0x30c>
 8009db2:	4bac      	ldr	r3, [pc, #688]	@ (800a064 <MCU_ProcessModuleHardware+0x58c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009dba:	461c      	mov	r4, r3
 8009dbc:	6938      	ldr	r0, [r7, #16]
 8009dbe:	f7f6 fbab 	bl	8000518 <__aeabi_f2d>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	f04f 0000 	mov.w	r0, #0
 8009dca:	49a7      	ldr	r1, [pc, #668]	@ (800a068 <MCU_ProcessModuleHardware+0x590>)
 8009dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd0:	e9cd 2300 	strd	r2, r3, [sp]
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	49a5      	ldr	r1, [pc, #660]	@ (800a06c <MCU_ProcessModuleHardware+0x594>)
 8009dd8:	48a5      	ldr	r0, [pc, #660]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009dda:	f00b f977 	bl	80150cc <siprintf>
 8009dde:	48a4      	ldr	r0, [pc, #656]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009de0:	f7fb fc2c 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	4aa3      	ldr	r2, [pc, #652]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009de8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	4413      	add	r3, r2
 8009df2:	330e      	adds	r3, #14
 8009df4:	f248 12f4 	movw	r2, #33268	@ 0x81f4
 8009df8:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 8009dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8009dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e06:	dd4a      	ble.n	8009e9e <MCU_ProcessModuleHardware+0x3c6>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8009e08:	4b95      	ldr	r3, [pc, #596]	@ (800a060 <MCU_ProcessModuleHardware+0x588>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	f003 0309 	and.w	r3, r3, #9
 8009e10:	2b09      	cmp	r3, #9
 8009e12:	d113      	bne.n	8009e3c <MCU_ProcessModuleHardware+0x364>
 8009e14:	4b93      	ldr	r3, [pc, #588]	@ (800a064 <MCU_ProcessModuleHardware+0x58c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7f6 fb7a 	bl	8000518 <__aeabi_f2d>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	e9cd 2300 	strd	r2, r3, [sp]
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4992      	ldr	r1, [pc, #584]	@ (800a078 <MCU_ProcessModuleHardware+0x5a0>)
 8009e30:	488f      	ldr	r0, [pc, #572]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009e32:	f00b f94b 	bl	80150cc <siprintf>
 8009e36:	488e      	ldr	r0, [pc, #568]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009e38:	f7fb fc00 	bl	800563c <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	4a8d      	ldr	r2, [pc, #564]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009e40:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
 8009e48:	4413      	add	r3, r2
 8009e4a:	330e      	adds	r3, #14
 8009e4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009e50:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	4a87      	ldr	r2, [pc, #540]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009e56:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	4413      	add	r3, r2
 8009e60:	3310      	adds	r3, #16
 8009e62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009e66:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	4a82      	ldr	r2, [pc, #520]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009e6c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 8009e7a:	7893      	ldrb	r3, [r2, #2]
 8009e7c:	f043 0302 	orr.w	r3, r3, #2
 8009e80:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	4a7b      	ldr	r2, [pc, #492]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009e86:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	3308      	adds	r3, #8
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fa46 	bl	800b328 <MCU_TransmitState>
 8009e9c:	e032      	b.n	8009f04 <MCU_ProcessModuleHardware+0x42c>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8009e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ea2:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800a07c <MCU_ProcessModuleHardware+0x5a4>
 8009ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	d529      	bpl.n	8009f04 <MCU_ProcessModuleHardware+0x42c>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8009eb0:	4b6b      	ldr	r3, [pc, #428]	@ (800a060 <MCU_ProcessModuleHardware+0x588>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d018      	beq.n	8009eee <MCU_ProcessModuleHardware+0x416>
 8009ebc:	4b69      	ldr	r3, [pc, #420]	@ (800a064 <MCU_ProcessModuleHardware+0x58c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009ec4:	461c      	mov	r4, r3
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7f6 fb26 	bl	8000518 <__aeabi_f2d>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	f04f 0000 	mov.w	r0, #0
 8009ed4:	496a      	ldr	r1, [pc, #424]	@ (800a080 <MCU_ProcessModuleHardware+0x5a8>)
 8009ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eda:	e9cd 2300 	strd	r2, r3, [sp]
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4968      	ldr	r1, [pc, #416]	@ (800a084 <MCU_ProcessModuleHardware+0x5ac>)
 8009ee2:	4863      	ldr	r0, [pc, #396]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009ee4:	f00b f8f2 	bl	80150cc <siprintf>
 8009ee8:	4861      	ldr	r0, [pc, #388]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 8009eea:	f7fb fba7 	bl	800563c <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	4a60      	ldr	r2, [pc, #384]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009ef2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009ef6:	fb01 f303 	mul.w	r3, r1, r3
 8009efa:	4413      	add	r3, r2
 8009efc:	3310      	adds	r3, #16
 8009efe:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8009f02:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009f04:	4b56      	ldr	r3, [pc, #344]	@ (800a060 <MCU_ProcessModuleHardware+0x588>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 8093 	beq.w	800a038 <MCU_ProcessModuleHardware+0x560>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	4a57      	ldr	r2, [pc, #348]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009f16:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009f1a:	fb01 f303 	mul.w	r3, r1, r3
 8009f1e:	4413      	add	r3, r2
 8009f20:	330e      	adds	r3, #14
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f6 fae5 	bl	80004f4 <__aeabi_i2d>
 8009f2a:	a347      	add	r3, pc, #284	@ (adr r3, 800a048 <MCU_ProcessModuleHardware+0x570>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fb4a 	bl	80005c8 <__aeabi_dmul>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4610      	mov	r0, r2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	a344      	add	r3, pc, #272	@ (adr r3, 800a050 <MCU_ProcessModuleHardware+0x578>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f989 	bl	8000258 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f7f6 fe33 	bl	8000bb8 <__aeabi_d2f>
 8009f52:	4603      	mov	r3, r0
 8009f54:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	4a46      	ldr	r2, [pc, #280]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009f5a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009f5e:	fb01 f303 	mul.w	r3, r1, r3
 8009f62:	4413      	add	r3, r2
 8009f64:	3310      	adds	r3, #16
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f6 fac3 	bl	80004f4 <__aeabi_i2d>
 8009f6e:	a336      	add	r3, pc, #216	@ (adr r3, 800a048 <MCU_ProcessModuleHardware+0x570>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 fb28 	bl	80005c8 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	a333      	add	r3, pc, #204	@ (adr r3, 800a050 <MCU_ProcessModuleHardware+0x578>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f967 	bl	8000258 <__aeabi_dsub>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7f6 fe11 	bl	8000bb8 <__aeabi_d2f>
 8009f96:	4603      	mov	r3, r0
 8009f98:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	4a35      	ldr	r2, [pc, #212]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 8009f9e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3312      	adds	r3, #18
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7f6 faa1 	bl	80004f4 <__aeabi_i2d>
 8009fb2:	a329      	add	r3, pc, #164	@ (adr r3, 800a058 <MCU_ProcessModuleHardware+0x580>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 fb06 	bl	80005c8 <__aeabi_dmul>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	f7f6 f946 	bl	800025c <__adddf3>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f7f6 fdee 	bl	8000bb8 <__aeabi_d2f>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009fe0:	4b20      	ldr	r3, [pc, #128]	@ (800a064 <MCU_ProcessModuleHardware+0x58c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8009fe8:	469a      	mov	sl, r3
 8009fea:	6938      	ldr	r0, [r7, #16]
 8009fec:	f7f6 fa94 	bl	8000518 <__aeabi_f2d>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7f6 fa8f 	bl	8000518 <__aeabi_f2d>
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	68b8      	ldr	r0, [r7, #8]
 800a000:	f7f6 fa8a 	bl	8000518 <__aeabi_f2d>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 800a008:	7df9      	ldrb	r1, [r7, #23]
 800a00a:	481a      	ldr	r0, [pc, #104]	@ (800a074 <MCU_ProcessModuleHardware+0x59c>)
 800a00c:	f44f 6699 	mov.w	r6, #1224	@ 0x4c8
 800a010:	fb06 f101 	mul.w	r1, r6, r1
 800a014:	4401      	add	r1, r0
 800a016:	310c      	adds	r1, #12
 800a018:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 800a01a:	9106      	str	r1, [sp, #24]
 800a01c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a020:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a024:	e9cd 4500 	strd	r4, r5, [sp]
 800a028:	4652      	mov	r2, sl
 800a02a:	4917      	ldr	r1, [pc, #92]	@ (800a088 <MCU_ProcessModuleHardware+0x5b0>)
 800a02c:	4810      	ldr	r0, [pc, #64]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 800a02e:	f00b f84d 	bl	80150cc <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 800a032:	480f      	ldr	r0, [pc, #60]	@ (800a070 <MCU_ProcessModuleHardware+0x598>)
 800a034:	f7fb fb02 	bl	800563c <serialOut>
}
 800a038:	bf00      	nop
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
 800a048:	47ae147b 	.word	0x47ae147b
 800a04c:	3f947ae1 	.word	0x3f947ae1
 800a050:	47ae147b 	.word	0x47ae147b
 800a054:	40847ae1 	.word	0x40847ae1
 800a058:	eb851eb8 	.word	0xeb851eb8
 800a05c:	3f8eb851 	.word	0x3f8eb851
 800a060:	2000000c 	.word	0x2000000c
 800a064:	20000d9c 	.word	0x20000d9c
 800a068:	40240000 	.word	0x40240000
 800a06c:	08019ac8 	.word	0x08019ac8
 800a070:	20000b5c 	.word	0x20000b5c
 800a074:	20000dec 	.word	0x20000dec
 800a078:	08019b10 	.word	0x08019b10
 800a07c:	c2280000 	.word	0xc2280000
 800a080:	c0450000 	.word	0xc0450000
 800a084:	08019b58 	.word	0x08019b58
 800a088:	08019ba4 	.word	0x08019ba4

0800a08c <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 800a096:	2320      	movs	r3, #32
 800a098:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a09a:	2300      	movs	r3, #0
 800a09c:	73bb      	strb	r3, [r7, #14]
 800a09e:	e02c      	b.n	800a0fa <MCU_RequestModuleStatus+0x6e>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	4a50      	ldr	r2, [pc, #320]	@ (800a1e4 <MCU_RequestModuleStatus+0x158>)
 800a0a4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0a8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f083 0301 	eor.w	r3, r3, #1
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d119      	bne.n	800a0f2 <MCU_RequestModuleStatus+0x66>
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	4a48      	ldr	r2, [pc, #288]	@ (800a1e4 <MCU_RequestModuleStatus+0x158>)
 800a0c2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0c6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00e      	beq.n	800a0f2 <MCU_RequestModuleStatus+0x66>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	4a43      	ldr	r2, [pc, #268]	@ (800a1e4 <MCU_RequestModuleStatus+0x158>)
 800a0d8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a0dc:	fb01 f303 	mul.w	r3, r1, r3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	79fa      	ldrb	r2, [r7, #7]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d103      	bne.n	800a0f4 <MCU_RequestModuleStatus+0x68>
      moduleIndex = index; // found it - save the index
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	73fb      	strb	r3, [r7, #15]
 800a0f0:	e000      	b.n	800a0f4 <MCU_RequestModuleStatus+0x68>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a0f2:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	73bb      	strb	r3, [r7, #14]
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b1f      	cmp	r3, #31
 800a0fe:	d9cf      	bls.n	800a0a0 <MCU_RequestModuleStatus+0x14>
    }
  if (moduleIndex == MAX_MODULES_PER_PACK){
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b20      	cmp	r3, #32
 800a104:	d10d      	bne.n	800a122 <MCU_RequestModuleStatus+0x96>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 800a106:	4b38      	ldr	r3, [pc, #224]	@ (800a1e8 <MCU_RequestModuleStatus+0x15c>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	f003 0309 	and.w	r3, r3, #9
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d163      	bne.n	800a1da <MCU_RequestModuleStatus+0x14e>
 800a112:	4936      	ldr	r1, [pc, #216]	@ (800a1ec <MCU_RequestModuleStatus+0x160>)
 800a114:	4836      	ldr	r0, [pc, #216]	@ (800a1f0 <MCU_RequestModuleStatus+0x164>)
 800a116:	f00a ffd9 	bl	80150cc <siprintf>
 800a11a:	4835      	ldr	r0, [pc, #212]	@ (800a1f0 <MCU_RequestModuleStatus+0x164>)
 800a11c:	f7fb fa8e 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); 
      serialOut(tempBuffer);
    }
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 800a120:	e05b      	b.n	800a1da <MCU_RequestModuleStatus+0x14e>
    module[moduleIndex].statusPending = true;
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e4 <MCU_RequestModuleStatus+0x158>)
 800a126:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a12a:	fb01 f303 	mul.w	r3, r1, r3
 800a12e:	4413      	add	r3, r2
 800a130:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a134:	2201      	movs	r2, #1
 800a136:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].statusMessagesReceived = 0;  // Clear previous status bits
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e4 <MCU_RequestModuleStatus+0x158>)
 800a13c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	4413      	add	r3, r2
 800a146:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 800a152:	4b28      	ldr	r3, [pc, #160]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800a158:	4b26      	ldr	r3, [pc, #152]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800a15e:	4b25      	ldr	r3, [pc, #148]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a160:	2200      	movs	r2, #0
 800a162:	609a      	str	r2, [r3, #8]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 800a164:	7b3a      	ldrb	r2, [r7, #12]
 800a166:	4b24      	ldr	r3, [pc, #144]	@ (800a1f8 <MCU_RequestModuleStatus+0x16c>)
 800a168:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 800a16a:	4a22      	ldr	r2, [pc, #136]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a16c:	8813      	ldrh	r3, [r2, #0]
 800a16e:	f240 5112 	movw	r1, #1298	@ 0x512
 800a172:	f361 030a 	bfi	r3, r1, #0, #11
 800a176:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 800a178:	79fa      	ldrb	r2, [r7, #7]
 800a17a:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a17e:	491d      	ldr	r1, [pc, #116]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a180:	680b      	ldr	r3, [r1, #0]
 800a182:	f362 23dc 	bfi	r3, r2, #11, #18
 800a186:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a188:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a18a:	7913      	ldrb	r3, [r2, #4]
 800a18c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a190:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800a192:	4a18      	ldr	r2, [pc, #96]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a194:	7913      	ldrb	r3, [r2, #4]
 800a196:	2101      	movs	r1, #1
 800a198:	f361 0303 	bfi	r3, r1, #0, #4
 800a19c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a19e:	4a15      	ldr	r2, [pc, #84]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a1a0:	7913      	ldrb	r3, [r2, #4]
 800a1a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1a6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a1a8:	4a12      	ldr	r2, [pc, #72]	@ (800a1f4 <MCU_RequestModuleStatus+0x168>)
 800a1aa:	7913      	ldrb	r3, [r2, #4]
 800a1ac:	f043 0310 	orr.w	r3, r3, #16
 800a1b0:	7113      	strb	r3, [r2, #4]
    if(MCU_ShouldLogMessage(ID_MODULE_STATUS_REQUEST, true)){ 
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	f240 5012 	movw	r0, #1298	@ 0x512
 800a1b8:	f7fc fe04 	bl	8006dc4 <MCU_ShouldLogMessage>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <MCU_RequestModuleStatus+0x148>
      sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); 
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	490d      	ldr	r1, [pc, #52]	@ (800a1fc <MCU_RequestModuleStatus+0x170>)
 800a1c8:	4809      	ldr	r0, [pc, #36]	@ (800a1f0 <MCU_RequestModuleStatus+0x164>)
 800a1ca:	f00a ff7f 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800a1ce:	4808      	ldr	r0, [pc, #32]	@ (800a1f0 <MCU_RequestModuleStatus+0x164>)
 800a1d0:	f7fb fa34 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7fe fef9 	bl	8008fcc <MCU_TransmitMessageQueue>
}
 800a1da:	bf00      	nop
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000dec 	.word	0x20000dec
 800a1e8:	2000000c 	.word	0x2000000c
 800a1ec:	08019c10 	.word	0x08019c10
 800a1f0:	20000b5c 	.word	0x20000b5c
 800a1f4:	20000d40 	.word	0x20000d40
 800a1f8:	20000d4c 	.word	0x20000d4c
 800a1fc:	08019c50 	.word	0x08019c50

0800a200 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 800a20e:	4b44      	ldr	r3, [pc, #272]	@ (800a320 <MCU_FindMaxVoltageModule+0x120>)
 800a210:	7d1b      	ldrb	r3, [r3, #20]
 800a212:	3301      	adds	r3, #1
 800a214:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a216:	2300      	movs	r3, #0
 800a218:	71fb      	strb	r3, [r7, #7]
 800a21a:	e06e      	b.n	800a2fa <MCU_FindMaxVoltageModule+0xfa>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	4a41      	ldr	r2, [pc, #260]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a220:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	4413      	add	r3, r2
 800a22a:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f083 0301 	eor.w	r3, r3, #1
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d15b      	bne.n	800a2f2 <MCU_FindMaxVoltageModule+0xf2>
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	4a39      	ldr	r2, [pc, #228]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a23e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3304      	adds	r3, #4
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d050      	beq.n	800a2f2 <MCU_FindMaxVoltageModule+0xf2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	4a34      	ldr	r2, [pc, #208]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a254:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a258:	fb01 f303 	mul.w	r3, r1, r3
 800a25c:	4413      	add	r3, r2
 800a25e:	3314      	adds	r3, #20
 800a260:	881b      	ldrh	r3, [r3, #0]
 800a262:	88ba      	ldrh	r2, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d245      	bcs.n	800a2f4 <MCU_FindMaxVoltageModule+0xf4>
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	4a2e      	ldr	r2, [pc, #184]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a26c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a27a:	789b      	ldrb	r3, [r3, #2]
 800a27c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d136      	bne.n	800a2f4 <MCU_FindMaxVoltageModule+0xf4>
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	4a26      	ldr	r2, [pc, #152]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a28a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a298:	789b      	ldrb	r3, [r3, #2]
 800a29a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d127      	bne.n	800a2f4 <MCU_FindMaxVoltageModule+0xf4>
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a2a8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a2b6:	789b      	ldrb	r3, [r3, #2]
 800a2b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d118      	bne.n	800a2f4 <MCU_FindMaxVoltageModule+0xf4>
      maxVoltage = module[index].mmv;
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	4a17      	ldr	r2, [pc, #92]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a2c6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	4a12      	ldr	r2, [pc, #72]	@ (800a324 <MCU_FindMaxVoltageModule+0x124>)
 800a2da:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 800a2ea:	79bb      	ldrb	r3, [r7, #6]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	71bb      	strb	r3, [r7, #6]
 800a2f0:	e000      	b.n	800a2f4 <MCU_FindMaxVoltageModule+0xf4>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a2f2:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	71fb      	strb	r3, [r7, #7]
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	2b1f      	cmp	r3, #31
 800a2fe:	d98d      	bls.n	800a21c <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 800a300:	88bb      	ldrh	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d104      	bne.n	800a310 <MCU_FindMaxVoltageModule+0x110>
 800a306:	79bb      	ldrb	r3, [r7, #6]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <MCU_FindMaxVoltageModule+0x110>
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <MCU_FindMaxVoltageModule+0x112>
  else return moduleId;
 800a310:	78fb      	ldrb	r3, [r7, #3]
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	2000a6ec 	.word	0x2000a6ec
 800a324:	20000dec 	.word	0x20000dec

0800a328 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	b09d      	sub	sp, #116	@ 0x74
 800a32e:	af0a      	add	r7, sp, #40	@ 0x28
  CANFRM_MODULE_STATUS_1 status1;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 800a330:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a334:	2208      	movs	r2, #8
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f00a ff2e 	bl	801519a <memset>
  memcpy(&status1, rxd, sizeof(status1));
 800a33e:	4a55      	ldr	r2, [pc, #340]	@ (800a494 <MCU_ProcessModuleStatus1+0x16c>)
 800a340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a344:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a348:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received
  if(debugMessages & DBG_MSG_STATUS1){
 800a34c:	4b52      	ldr	r3, [pc, #328]	@ (800a498 <MCU_ProcessModuleStatus1+0x170>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0310 	and.w	r3, r3, #16
 800a354:	2b00      	cmp	r3, #0
 800a356:	d045      	beq.n	800a3e4 <MCU_ProcessModuleStatus1+0xbc>
    if(debugMessages & DBG_MSG_MINIMAL){
 800a358:	4b4f      	ldr	r3, [pc, #316]	@ (800a498 <MCU_ProcessModuleStatus1+0x170>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d014      	beq.n	800a38e <MCU_ProcessModuleStatus1+0x66>
        // Minimal mode - just print module ID without leading zero or newline
        extern UART_HandleTypeDef huart1;
        sprintf(tempBuffer,"%x", rxObj.bF.id.EID);
 800a364:	4b4d      	ldr	r3, [pc, #308]	@ (800a49c <MCU_ProcessModuleStatus1+0x174>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a36c:	461a      	mov	r2, r3
 800a36e:	494c      	ldr	r1, [pc, #304]	@ (800a4a0 <MCU_ProcessModuleStatus1+0x178>)
 800a370:	484c      	ldr	r0, [pc, #304]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a372:	f00a feab 	bl	80150cc <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 800a376:	484b      	ldr	r0, [pc, #300]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a378:	f7f5 ff62 	bl	8000240 <strlen>
 800a37c:	4603      	mov	r3, r0
 800a37e:	b29a      	uxth	r2, r3
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	4947      	ldr	r1, [pc, #284]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a386:	4848      	ldr	r0, [pc, #288]	@ (800a4a8 <MCU_ProcessModuleStatus1+0x180>)
 800a388:	f008 ff98 	bl	80132bc <HAL_UART_Transmit>
 800a38c:	e02a      	b.n	800a3e4 <MCU_ProcessModuleStatus1+0xbc>
    }
    else {
        // Full debug mode
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
                rxObj.bF.id.EID, 
 800a38e:	4b43      	ldr	r3, [pc, #268]	@ (800a49c <MCU_ProcessModuleStatus1+0x174>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f3c3 23d1 	ubfx	r3, r3, #11, #18
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a396:	469c      	mov	ip, r3
                status1.moduleState & 0x0F,           // Lower 4 bits
 800a398:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a39c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a3a0:	b2db      	uxtb	r3, r3
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3a2:	f003 020f 	and.w	r2, r3, #15
                (status1.moduleStatus) & 0x0F,        // Upper 4 bits  
 800a3a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a3ae:	b2db      	uxtb	r3, r3
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3b0:	f003 030f 	and.w	r3, r3, #15
                status1.moduleSoc,
 800a3b4:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
                status1.moduleSoh,
 800a3b8:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
                status1.cellCount,
 800a3bc:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
                status1.moduleMmv,                     // module measured voltage
 800a3c0:	8e7d      	ldrh	r5, [r7, #50]	@ 0x32
                (int16_t)status1.moduleMmc);           // module measured current
 800a3c2:	8e3e      	ldrh	r6, [r7, #48]	@ 0x30
 800a3c4:	b236      	sxth	r6, r6
        sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%01x, Status=%01x, SOC=%d%%, SOH=%d%%, Cells=%d, Volt=%d, Curr=%d", 
 800a3c6:	9605      	str	r6, [sp, #20]
 800a3c8:	9504      	str	r5, [sp, #16]
 800a3ca:	9403      	str	r4, [sp, #12]
 800a3cc:	9002      	str	r0, [sp, #8]
 800a3ce:	9101      	str	r1, [sp, #4]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	4662      	mov	r2, ip
 800a3d6:	4935      	ldr	r1, [pc, #212]	@ (800a4ac <MCU_ProcessModuleStatus1+0x184>)
 800a3d8:	4832      	ldr	r0, [pc, #200]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a3da:	f00a fe77 	bl	80150cc <siprintf>
        serialOut(tempBuffer);
 800a3de:	4831      	ldr	r0, [pc, #196]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a3e0:	f7fb f92c 	bl	800563c <serialOut>
    }
  }

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a3f0:	e038      	b.n	800a464 <MCU_ProcessModuleStatus1+0x13c>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a3f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a3f6:	4a2e      	ldr	r2, [pc, #184]	@ (800a4b0 <MCU_ProcessModuleStatus1+0x188>)
 800a3f8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a3fc:	fb01 f303 	mul.w	r3, r1, r3
 800a400:	4413      	add	r3, r2
 800a402:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f083 0301 	eor.w	r3, r3, #1
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d122      	bne.n	800a458 <MCU_ProcessModuleStatus1+0x130>
 800a412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a416:	4a26      	ldr	r2, [pc, #152]	@ (800a4b0 <MCU_ProcessModuleStatus1+0x188>)
 800a418:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a41c:	fb01 f303 	mul.w	r3, r1, r3
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d016      	beq.n	800a458 <MCU_ProcessModuleStatus1+0x130>
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a42a:	4b1c      	ldr	r3, [pc, #112]	@ (800a49c <MCU_ProcessModuleStatus1+0x174>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a432:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a436:	491e      	ldr	r1, [pc, #120]	@ (800a4b0 <MCU_ProcessModuleStatus1+0x188>)
 800a438:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a43c:	fb00 f303 	mul.w	r3, r0, r3
 800a440:	440b      	add	r3, r1
 800a442:	3308      	adds	r3, #8
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d105      	bne.n	800a45a <MCU_ProcessModuleStatus1+0x132>
      moduleIndex = index; // found it - save the index
 800a44e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a456:	e000      	b.n	800a45a <MCU_ProcessModuleStatus1+0x132>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800a458:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800a45a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a45e:	3301      	adds	r3, #1
 800a460:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a464:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a468:	2b1f      	cmp	r3, #31
 800a46a:	d9c2      	bls.n	800a3f2 <MCU_ProcessModuleStatus1+0xca>
    }
  if (moduleIndex == MAX_MODULES_PER_PACK){
 800a46c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a470:	2b20      	cmp	r3, #32
 800a472:	d123      	bne.n	800a4bc <MCU_ProcessModuleStatus1+0x194>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 800a474:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b4 <MCU_ProcessModuleStatus1+0x18c>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 0309 	and.w	r3, r3, #9
 800a47c:	2b09      	cmp	r3, #9
 800a47e:	f040 82a3 	bne.w	800a9c8 <MCU_ProcessModuleStatus1+0x6a0>
 800a482:	490d      	ldr	r1, [pc, #52]	@ (800a4b8 <MCU_ProcessModuleStatus1+0x190>)
 800a484:	4807      	ldr	r0, [pc, #28]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a486:	f00a fe21 	bl	80150cc <siprintf>
 800a48a:	4806      	ldr	r0, [pc, #24]	@ (800a4a4 <MCU_ProcessModuleStatus1+0x17c>)
 800a48c:	f7fb f8d6 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 800a490:	e29a      	b.n	800a9c8 <MCU_ProcessModuleStatus1+0x6a0>
 800a492:	bf00      	nop
 800a494:	20000da8 	.word	0x20000da8
 800a498:	20000010 	.word	0x20000010
 800a49c:	20000d9c 	.word	0x20000d9c
 800a4a0:	08019c78 	.word	0x08019c78
 800a4a4:	20000b5c 	.word	0x20000b5c
 800a4a8:	20000444 	.word	0x20000444
 800a4ac:	08019c7c 	.word	0x08019c7c
 800a4b0:	20000dec 	.word	0x20000dec
 800a4b4:	2000000c 	.word	0x2000000c
 800a4b8:	08019ce8 	.word	0x08019ce8
    module[moduleIndex].statusMessagesReceived |= (1 << 0);  // Status1 received
 800a4bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4c0:	4ac5      	ldr	r2, [pc, #788]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a4c2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4d6:	f042 0201 	orr.w	r2, r2, #1
 800a4da:	b2d0      	uxtb	r0, r2
 800a4dc:	4abe      	ldr	r2, [pc, #760]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a4de:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800a4f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4f4:	4ab8      	ldr	r2, [pc, #736]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a4f6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	4413      	add	r3, r2
 800a500:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b07      	cmp	r3, #7
 800a508:	d117      	bne.n	800a53a <MCU_ProcessModuleStatus1+0x212>
        module[moduleIndex].statusPending = false;
 800a50a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a50e:	4ab2      	ldr	r2, [pc, #712]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a510:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a514:	fb01 f303 	mul.w	r3, r1, r3
 800a518:	4413      	add	r3, r2
 800a51a:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800a51e:	2200      	movs	r2, #0
 800a520:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800a522:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a526:	4aac      	ldr	r2, [pc, #688]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a528:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	4413      	add	r3, r2
 800a532:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800a53a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a53e:	4aa6      	ldr	r2, [pc, #664]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a540:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	4413      	add	r3, r2
 800a54a:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d023      	beq.n	800a59c <MCU_ProcessModuleStatus1+0x274>
 800a554:	4ba1      	ldr	r3, [pc, #644]	@ (800a7dc <MCU_ProcessModuleStatus1+0x4b4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01d      	beq.n	800a59c <MCU_ProcessModuleStatus1+0x274>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800a560:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a564:	4a9c      	ldr	r2, [pc, #624]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a566:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	3308      	adds	r3, #8
 800a572:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800a574:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800a576:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a57a:	4a97      	ldr	r2, [pc, #604]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a57c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a580:	fb01 f303 	mul.w	r3, r1, r3
 800a584:	4413      	add	r3, r2
 800a586:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a58a:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800a58c:	4602      	mov	r2, r0
 800a58e:	4994      	ldr	r1, [pc, #592]	@ (800a7e0 <MCU_ProcessModuleStatus1+0x4b8>)
 800a590:	4894      	ldr	r0, [pc, #592]	@ (800a7e4 <MCU_ProcessModuleStatus1+0x4bc>)
 800a592:	f00a fd9b 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800a596:	4893      	ldr	r0, [pc, #588]	@ (800a7e4 <MCU_ProcessModuleStatus1+0x4bc>)
 800a598:	f7fb f850 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800a59c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5a0:	4a8d      	ldr	r2, [pc, #564]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a5a2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5a6:	fb01 f303 	mul.w	r3, r1, r3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 800a5b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5b8:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 800a5ba:	4a87      	ldr	r2, [pc, #540]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a5bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5c0:	fb01 f303 	mul.w	r3, r1, r3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3316      	adds	r3, #22
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 800a5cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5d0:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800a5d2:	4a81      	ldr	r2, [pc, #516]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a5d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	3314      	adds	r3, #20
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 800a5e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a5e8:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 800a5ec:	4a7a      	ldr	r2, [pc, #488]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a5ee:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	332b      	adds	r3, #43	@ 0x2b
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 800a5fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a602:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 800a606:	4a74      	ldr	r2, [pc, #464]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a608:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	4413      	add	r3, r2
 800a612:	332c      	adds	r3, #44	@ 0x2c
 800a614:	4602      	mov	r2, r0
 800a616:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800a618:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a61c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a620:	b2da      	uxtb	r2, r3
 800a622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a626:	4610      	mov	r0, r2
 800a628:	4a6b      	ldr	r2, [pc, #428]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a62a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	3327      	adds	r3, #39	@ 0x27
 800a636:	4602      	mov	r2, r0
 800a638:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 800a63a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a63e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a642:	b2da      	uxtb	r2, r3
 800a644:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a648:	4610      	mov	r0, r2
 800a64a:	4a63      	ldr	r2, [pc, #396]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a64c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	3326      	adds	r3, #38	@ 0x26
 800a658:	4602      	mov	r2, r0
 800a65a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 800a65c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a660:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 800a664:	4a5c      	ldr	r2, [pc, #368]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a666:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a66a:	fb01 f303 	mul.w	r3, r1, r3
 800a66e:	4413      	add	r3, r2
 800a670:	332d      	adds	r3, #45	@ 0x2d
 800a672:	4602      	mov	r2, r0
 800a674:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a676:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e8 <MCU_ProcessModuleStatus1+0x4c0>)
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a67e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a680:	4955      	ldr	r1, [pc, #340]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a682:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a686:	fb00 f303 	mul.w	r3, r0, r3
 800a68a:	440b      	add	r3, r1
 800a68c:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800a690:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a692:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a696:	4a55      	ldr	r2, [pc, #340]	@ (800a7ec <MCU_ProcessModuleStatus1+0x4c4>)
 800a698:	6812      	ldr	r2, [r2, #0]
 800a69a:	494f      	ldr	r1, [pc, #316]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a69c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a6a0:	fb00 f303 	mul.w	r3, r0, r3
 800a6a4:	440b      	add	r3, r1
 800a6a6:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800a6aa:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 800a6ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6b0:	4a49      	ldr	r2, [pc, #292]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a6b2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a6b6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3327      	adds	r3, #39	@ 0x27
 800a6be:	781a      	ldrb	r2, [r3, #0]
 800a6c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6c4:	4944      	ldr	r1, [pc, #272]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a6c6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800a6ca:	fb00 f303 	mul.w	r3, r0, r3
 800a6ce:	440b      	add	r3, r1
 800a6d0:	3329      	adds	r3, #41	@ 0x29
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d10a      	bne.n	800a6ee <MCU_ProcessModuleStatus1+0x3c6>
     module[moduleIndex].command.commandStatus = commandActive;
 800a6d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a6dc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a6de:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a6e2:	fb01 f303 	mul.w	r3, r1, r3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	332a      	adds	r3, #42	@ 0x2a
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a6ee:	4b40      	ldr	r3, [pc, #256]	@ (800a7f0 <MCU_ProcessModuleStatus1+0x4c8>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8166 	beq.w	800a9c8 <MCU_ProcessModuleStatus1+0x6a0>
      switch (module[moduleIndex].currentState){
 800a6fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a700:	4a35      	ldr	r2, [pc, #212]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a702:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a706:	fb01 f303 	mul.w	r3, r1, r3
 800a70a:	4413      	add	r3, r2
 800a70c:	3327      	adds	r3, #39	@ 0x27
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b03      	cmp	r3, #3
 800a712:	d014      	beq.n	800a73e <MCU_ProcessModuleStatus1+0x416>
 800a714:	2b03      	cmp	r3, #3
 800a716:	dc19      	bgt.n	800a74c <MCU_ProcessModuleStatus1+0x424>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <MCU_ProcessModuleStatus1+0x3fa>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d007      	beq.n	800a730 <MCU_ProcessModuleStatus1+0x408>
 800a720:	e014      	b.n	800a74c <MCU_ProcessModuleStatus1+0x424>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 800a722:	f107 031c 	add.w	r3, r7, #28
 800a726:	4933      	ldr	r1, [pc, #204]	@ (800a7f4 <MCU_ProcessModuleStatus1+0x4cc>)
 800a728:	4618      	mov	r0, r3
 800a72a:	f00a fccf 	bl	80150cc <siprintf>
 800a72e:	e01f      	b.n	800a770 <MCU_ProcessModuleStatus1+0x448>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 800a730:	f107 031c 	add.w	r3, r7, #28
 800a734:	4930      	ldr	r1, [pc, #192]	@ (800a7f8 <MCU_ProcessModuleStatus1+0x4d0>)
 800a736:	4618      	mov	r0, r3
 800a738:	f00a fcc8 	bl	80150cc <siprintf>
 800a73c:	e018      	b.n	800a770 <MCU_ProcessModuleStatus1+0x448>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 800a73e:	f107 031c 	add.w	r3, r7, #28
 800a742:	492e      	ldr	r1, [pc, #184]	@ (800a7fc <MCU_ProcessModuleStatus1+0x4d4>)
 800a744:	4618      	mov	r0, r3
 800a746:	f00a fcc1 	bl	80150cc <siprintf>
 800a74a:	e011      	b.n	800a770 <MCU_ProcessModuleStatus1+0x448>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 800a74c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a750:	4a21      	ldr	r2, [pc, #132]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a752:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a756:	fb01 f303 	mul.w	r3, r1, r3
 800a75a:	4413      	add	r3, r2
 800a75c:	3327      	adds	r3, #39	@ 0x27
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	461a      	mov	r2, r3
 800a762:	f107 031c 	add.w	r3, r7, #28
 800a766:	4926      	ldr	r1, [pc, #152]	@ (800a800 <MCU_ProcessModuleStatus1+0x4d8>)
 800a768:	4618      	mov	r0, r3
 800a76a:	f00a fcaf 	bl	80150cc <siprintf>
 800a76e:	bf00      	nop
      switch (module[moduleIndex].status){
 800a770:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a774:	4a18      	ldr	r2, [pc, #96]	@ (800a7d8 <MCU_ProcessModuleStatus1+0x4b0>)
 800a776:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a77a:	fb01 f303 	mul.w	r3, r1, r3
 800a77e:	4413      	add	r3, r2
 800a780:	3326      	adds	r3, #38	@ 0x26
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d843      	bhi.n	800a810 <MCU_ProcessModuleStatus1+0x4e8>
 800a788:	a201      	add	r2, pc, #4	@ (adr r2, 800a790 <MCU_ProcessModuleStatus1+0x468>)
 800a78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7af 	.word	0x0800a7af
 800a798:	0800a7bd 	.word	0x0800a7bd
 800a79c:	0800a7cb 	.word	0x0800a7cb
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800a7a0:	f107 030c 	add.w	r3, r7, #12
 800a7a4:	4913      	ldr	r1, [pc, #76]	@ (800a7f4 <MCU_ProcessModuleStatus1+0x4cc>)
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f00a fc90 	bl	80150cc <siprintf>
 800a7ac:	e042      	b.n	800a834 <MCU_ProcessModuleStatus1+0x50c>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 800a7ae:	f107 030c 	add.w	r3, r7, #12
 800a7b2:	4914      	ldr	r1, [pc, #80]	@ (800a804 <MCU_ProcessModuleStatus1+0x4dc>)
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f00a fc89 	bl	80150cc <siprintf>
 800a7ba:	e03b      	b.n	800a834 <MCU_ProcessModuleStatus1+0x50c>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4911      	ldr	r1, [pc, #68]	@ (800a808 <MCU_ProcessModuleStatus1+0x4e0>)
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f00a fc82 	bl	80150cc <siprintf>
 800a7c8:	e034      	b.n	800a834 <MCU_ProcessModuleStatus1+0x50c>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 800a7ca:	f107 030c 	add.w	r3, r7, #12
 800a7ce:	490f      	ldr	r1, [pc, #60]	@ (800a80c <MCU_ProcessModuleStatus1+0x4e4>)
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f00a fc7b 	bl	80150cc <siprintf>
 800a7d6:	e02d      	b.n	800a834 <MCU_ProcessModuleStatus1+0x50c>
 800a7d8:	20000dec 	.word	0x20000dec
 800a7dc:	20000010 	.word	0x20000010
 800a7e0:	08019d28 	.word	0x08019d28
 800a7e4:	20000b5c 	.word	0x20000b5c
 800a7e8:	200005d0 	.word	0x200005d0
 800a7ec:	20000d20 	.word	0x20000d20
 800a7f0:	2000000c 	.word	0x2000000c
 800a7f4:	08019d6c 	.word	0x08019d6c
 800a7f8:	08019d74 	.word	0x08019d74
 800a7fc:	08019d80 	.word	0x08019d80
 800a800:	08019d88 	.word	0x08019d88
 800a804:	08019d94 	.word	0x08019d94
 800a808:	08019da0 	.word	0x08019da0
 800a80c:	08019dac 	.word	0x08019dac
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 800a810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a814:	4a76      	ldr	r2, [pc, #472]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a816:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	4413      	add	r3, r2
 800a820:	3326      	adds	r3, #38	@ 0x26
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	461a      	mov	r2, r3
 800a826:	f107 030c 	add.w	r3, r7, #12
 800a82a:	4972      	ldr	r1, [pc, #456]	@ (800a9f4 <MCU_ProcessModuleStatus1+0x6cc>)
 800a82c:	4618      	mov	r0, r3
 800a82e:	f00a fc4d 	bl	80150cc <siprintf>
 800a832:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 800a834:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a838:	4a6d      	ldr	r2, [pc, #436]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a83a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a83e:	fb01 f303 	mul.w	r3, r1, r3
 800a842:	4413      	add	r3, r2
 800a844:	3314      	adds	r3, #20
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7f5 fe53 	bl	80004f4 <__aeabi_i2d>
 800a84e:	a362      	add	r3, pc, #392	@ (adr r3, 800a9d8 <MCU_ProcessModuleStatus1+0x6b0>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 feb8 	bl	80005c8 <__aeabi_dmul>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4610      	mov	r0, r2
 800a85e:	4619      	mov	r1, r3
 800a860:	f04f 0200 	mov.w	r2, #0
 800a864:	f04f 0300 	mov.w	r3, #0
 800a868:	f7f5 fcf8 	bl	800025c <__adddf3>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4610      	mov	r0, r2
 800a872:	4619      	mov	r1, r3
 800a874:	f7f6 f9a0 	bl	8000bb8 <__aeabi_d2f>
 800a878:	4603      	mov	r3, r0
 800a87a:	643b      	str	r3, [r7, #64]	@ 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 800a87c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a880:	4a5b      	ldr	r2, [pc, #364]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a882:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a886:	fb01 f303 	mul.w	r3, r1, r3
 800a88a:	4413      	add	r3, r2
 800a88c:	3316      	adds	r3, #22
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f7f5 fe2f 	bl	80004f4 <__aeabi_i2d>
 800a896:	a352      	add	r3, pc, #328	@ (adr r3, 800a9e0 <MCU_ProcessModuleStatus1+0x6b8>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fe94 	bl	80005c8 <__aeabi_dmul>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	a34f      	add	r3, pc, #316	@ (adr r3, 800a9e8 <MCU_ProcessModuleStatus1+0x6c0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fcd3 	bl	8000258 <__aeabi_dsub>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7f6 f97d 	bl	8000bb8 <__aeabi_d2f>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 800a8c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a8c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a8c8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	4413      	add	r3, r2
 800a8d2:	332b      	adds	r3, #43	@ 0x2b
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f5 fe0c 	bl	80004f4 <__aeabi_i2d>
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	4b45      	ldr	r3, [pc, #276]	@ (800a9f8 <MCU_ProcessModuleStatus1+0x6d0>)
 800a8e2:	f7f5 fe71 	bl	80005c8 <__aeabi_dmul>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f04f 0200 	mov.w	r2, #0
 800a8f2:	f04f 0300 	mov.w	r3, #0
 800a8f6:	f7f5 fcb1 	bl	800025c <__adddf3>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f7f6 f959 	bl	8000bb8 <__aeabi_d2f>
 800a906:	4603      	mov	r3, r0
 800a908:	63bb      	str	r3, [r7, #56]	@ 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 800a90a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a90e:	4a38      	ldr	r2, [pc, #224]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a910:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	4413      	add	r3, r2
 800a91a:	332c      	adds	r3, #44	@ 0x2c
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7f5 fde8 	bl	80004f4 <__aeabi_i2d>
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	4b33      	ldr	r3, [pc, #204]	@ (800a9f8 <MCU_ProcessModuleStatus1+0x6d0>)
 800a92a:	f7f5 fe4d 	bl	80005c8 <__aeabi_dmul>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4610      	mov	r0, r2
 800a934:	4619      	mov	r1, r3
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	f04f 0300 	mov.w	r3, #0
 800a93e:	f7f5 fc8d 	bl	800025c <__adddf3>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4610      	mov	r0, r2
 800a948:	4619      	mov	r1, r3
 800a94a:	f7f6 f935 	bl	8000bb8 <__aeabi_d2f>
 800a94e:	4603      	mov	r3, r0
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a952:	4b2a      	ldr	r3, [pc, #168]	@ (800a9fc <MCU_ProcessModuleStatus1+0x6d4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a95a:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 800a95c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a960:	4a23      	ldr	r2, [pc, #140]	@ (800a9f0 <MCU_ProcessModuleStatus1+0x6c8>)
 800a962:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	332d      	adds	r3, #45	@ 0x2d
 800a96e:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800a970:	461e      	mov	r6, r3
 800a972:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a974:	f7f5 fdd0 	bl	8000518 <__aeabi_f2d>
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a97e:	f7f5 fdcb 	bl	8000518 <__aeabi_f2d>
 800a982:	4680      	mov	r8, r0
 800a984:	4689      	mov	r9, r1
 800a986:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a988:	f7f5 fdc6 	bl	8000518 <__aeabi_f2d>
 800a98c:	4682      	mov	sl, r0
 800a98e:	468b      	mov	fp, r1
 800a990:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a992:	f7f5 fdc1 	bl	8000518 <__aeabi_f2d>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	f107 011c 	add.w	r1, r7, #28
 800a99e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9a2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a9a6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a9aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a9ae:	9601      	str	r6, [sp, #4]
 800a9b0:	f107 030c 	add.w	r3, r7, #12
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4911      	ldr	r1, [pc, #68]	@ (800aa00 <MCU_ProcessModuleStatus1+0x6d8>)
 800a9bc:	4811      	ldr	r0, [pc, #68]	@ (800aa04 <MCU_ProcessModuleStatus1+0x6dc>)
 800a9be:	f00a fb85 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800a9c2:	4810      	ldr	r0, [pc, #64]	@ (800aa04 <MCU_ProcessModuleStatus1+0x6dc>)
 800a9c4:	f7fa fe3a 	bl	800563c <serialOut>
}
 800a9c8:	bf00      	nop
 800a9ca:	374c      	adds	r7, #76	@ 0x4c
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	bf00      	nop
 800a9d4:	f3af 8000 	nop.w
 800a9d8:	eb851eb8 	.word	0xeb851eb8
 800a9dc:	3f8eb851 	.word	0x3f8eb851
 800a9e0:	47ae147b 	.word	0x47ae147b
 800a9e4:	3f947ae1 	.word	0x3f947ae1
 800a9e8:	47ae147b 	.word	0x47ae147b
 800a9ec:	40847ae1 	.word	0x40847ae1
 800a9f0:	20000dec 	.word	0x20000dec
 800a9f4:	08019d88 	.word	0x08019d88
 800a9f8:	3fe00000 	.word	0x3fe00000
 800a9fc:	20000d9c 	.word	0x20000d9c
 800aa00:	08019db4 	.word	0x08019db4
 800aa04:	20000b5c 	.word	0x20000b5c

0800aa08 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	b091      	sub	sp, #68	@ 0x44
 800aa0e:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	2208      	movs	r2, #8
 800aa14:	2100      	movs	r1, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f00a fbbf 	bl	801519a <memset>
  memcpy(&status2, rxd, sizeof(status2));
 800aa1c:	4a39      	ldr	r2, [pc, #228]	@ (800ab04 <MCU_ProcessModuleStatus2+0xfc>)
 800aa1e:	1d3b      	adds	r3, r7, #4
 800aa20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa24:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received (skip in minimal mode)
  if(debugMessages & DBG_MSG_STATUS2 && !(debugMessages & DBG_MSG_MINIMAL)){
 800aa28:	4b37      	ldr	r3, [pc, #220]	@ (800ab08 <MCU_ProcessModuleStatus2+0x100>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0320 	and.w	r3, r3, #32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d01b      	beq.n	800aa6c <MCU_ProcessModuleStatus2+0x64>
 800aa34:	4b34      	ldr	r3, [pc, #208]	@ (800ab08 <MCU_ProcessModuleStatus2+0x100>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d115      	bne.n	800aa6c <MCU_ProcessModuleStatus2+0x64>
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
            rxObj.bF.id.EID,
 800aa40:	4b32      	ldr	r3, [pc, #200]	@ (800ab0c <MCU_ProcessModuleStatus2+0x104>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa48:	4618      	mov	r0, r3
            status2.cellLoVolt,
 800aa4a:	88bb      	ldrh	r3, [r7, #4]
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa4c:	461c      	mov	r4, r3
            status2.cellHiVolt,
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
            status2.cellAvgVolt,
 800aa50:	893a      	ldrh	r2, [r7, #8]
            status2.cellTotalV);
 800aa52:	8979      	ldrh	r1, [r7, #10]
    sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, LoV=%dmV, HiV=%dmV, AvgV=%dmV, TotalV=%dmV", 
 800aa54:	9102      	str	r1, [sp, #8]
 800aa56:	9201      	str	r2, [sp, #4]
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	492c      	ldr	r1, [pc, #176]	@ (800ab10 <MCU_ProcessModuleStatus2+0x108>)
 800aa60:	482c      	ldr	r0, [pc, #176]	@ (800ab14 <MCU_ProcessModuleStatus2+0x10c>)
 800aa62:	f00a fb33 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 800aa66:	482b      	ldr	r0, [pc, #172]	@ (800ab14 <MCU_ProcessModuleStatus2+0x10c>)
 800aa68:	f7fa fde8 	bl	800563c <serialOut>
  }

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 800aa6c:	2320      	movs	r3, #32
 800aa6e:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aa70:	2300      	movs	r3, #0
 800aa72:	77bb      	strb	r3, [r7, #30]
 800aa74:	e031      	b.n	800aada <MCU_ProcessModuleStatus2+0xd2>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aa76:	7fbb      	ldrb	r3, [r7, #30]
 800aa78:	4a27      	ldr	r2, [pc, #156]	@ (800ab18 <MCU_ProcessModuleStatus2+0x110>)
 800aa7a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	4413      	add	r3, r2
 800aa84:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f083 0301 	eor.w	r3, r3, #1
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11e      	bne.n	800aad2 <MCU_ProcessModuleStatus2+0xca>
 800aa94:	7fbb      	ldrb	r3, [r7, #30]
 800aa96:	4a20      	ldr	r2, [pc, #128]	@ (800ab18 <MCU_ProcessModuleStatus2+0x110>)
 800aa98:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aa9c:	fb01 f303 	mul.w	r3, r1, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d013      	beq.n	800aad2 <MCU_ProcessModuleStatus2+0xca>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800aaaa:	4b18      	ldr	r3, [pc, #96]	@ (800ab0c <MCU_ProcessModuleStatus2+0x104>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800aab2:	7fbb      	ldrb	r3, [r7, #30]
 800aab4:	4918      	ldr	r1, [pc, #96]	@ (800ab18 <MCU_ProcessModuleStatus2+0x110>)
 800aab6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800aaba:	fb00 f303 	mul.w	r3, r0, r3
 800aabe:	440b      	add	r3, r1
 800aac0:	3308      	adds	r3, #8
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d103      	bne.n	800aad4 <MCU_ProcessModuleStatus2+0xcc>
      moduleIndex = index; // found it - save the index
 800aacc:	7fbb      	ldrb	r3, [r7, #30]
 800aace:	77fb      	strb	r3, [r7, #31]
 800aad0:	e000      	b.n	800aad4 <MCU_ProcessModuleStatus2+0xcc>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aad2:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aad4:	7fbb      	ldrb	r3, [r7, #30]
 800aad6:	3301      	adds	r3, #1
 800aad8:	77bb      	strb	r3, [r7, #30]
 800aada:	7fbb      	ldrb	r3, [r7, #30]
 800aadc:	2b1f      	cmp	r3, #31
 800aade:	d9ca      	bls.n	800aa76 <MCU_ProcessModuleStatus2+0x6e>
    }
  if (moduleIndex == MAX_MODULES_PER_PACK){
 800aae0:	7ffb      	ldrb	r3, [r7, #31]
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	d11e      	bne.n	800ab24 <MCU_ProcessModuleStatus2+0x11c>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 800aae6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab1c <MCU_ProcessModuleStatus2+0x114>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	f003 0309 	and.w	r3, r3, #9
 800aaee:	2b09      	cmp	r3, #9
 800aaf0:	f040 818c 	bne.w	800ae0c <MCU_ProcessModuleStatus2+0x404>
 800aaf4:	490a      	ldr	r1, [pc, #40]	@ (800ab20 <MCU_ProcessModuleStatus2+0x118>)
 800aaf6:	4807      	ldr	r0, [pc, #28]	@ (800ab14 <MCU_ProcessModuleStatus2+0x10c>)
 800aaf8:	f00a fae8 	bl	80150cc <siprintf>
 800aafc:	4805      	ldr	r0, [pc, #20]	@ (800ab14 <MCU_ProcessModuleStatus2+0x10c>)
 800aafe:	f7fa fd9d 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 800ab02:	e183      	b.n	800ae0c <MCU_ProcessModuleStatus2+0x404>
 800ab04:	20000da8 	.word	0x20000da8
 800ab08:	20000010 	.word	0x20000010
 800ab0c:	20000d9c 	.word	0x20000d9c
 800ab10:	08019e34 	.word	0x08019e34
 800ab14:	20000b5c 	.word	0x20000b5c
 800ab18:	20000dec 	.word	0x20000dec
 800ab1c:	2000000c 	.word	0x2000000c
 800ab20:	08019e80 	.word	0x08019e80
    module[moduleIndex].statusMessagesReceived |= (1 << 1);  // Status2 received
 800ab24:	7ffb      	ldrb	r3, [r7, #31]
 800ab26:	4ac0      	ldr	r2, [pc, #768]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab28:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	7ffb      	ldrb	r3, [r7, #31]
 800ab3a:	f042 0202 	orr.w	r2, r2, #2
 800ab3e:	b2d0      	uxtb	r0, r2
 800ab40:	4ab9      	ldr	r2, [pc, #740]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab42:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab46:	fb01 f303 	mul.w	r3, r1, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab50:	4602      	mov	r2, r0
 800ab52:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800ab54:	7ffb      	ldrb	r3, [r7, #31]
 800ab56:	4ab4      	ldr	r2, [pc, #720]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab58:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab5c:	fb01 f303 	mul.w	r3, r1, r3
 800ab60:	4413      	add	r3, r2
 800ab62:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b07      	cmp	r3, #7
 800ab6a:	d115      	bne.n	800ab98 <MCU_ProcessModuleStatus2+0x190>
        module[moduleIndex].statusPending = false;
 800ab6c:	7ffb      	ldrb	r3, [r7, #31]
 800ab6e:	4aae      	ldr	r2, [pc, #696]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab70:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab74:	fb01 f303 	mul.w	r3, r1, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800ab82:	7ffb      	ldrb	r3, [r7, #31]
 800ab84:	4aa8      	ldr	r2, [pc, #672]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab86:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	4413      	add	r3, r2
 800ab90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ab94:	2200      	movs	r2, #0
 800ab96:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800ab98:	7ffb      	ldrb	r3, [r7, #31]
 800ab9a:	4aa3      	ldr	r2, [pc, #652]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ab9c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d021      	beq.n	800abf4 <MCU_ProcessModuleStatus2+0x1ec>
 800abb0:	4b9e      	ldr	r3, [pc, #632]	@ (800ae2c <MCU_ProcessModuleStatus2+0x424>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d01b      	beq.n	800abf4 <MCU_ProcessModuleStatus2+0x1ec>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800abbc:	7ffb      	ldrb	r3, [r7, #31]
 800abbe:	4a9a      	ldr	r2, [pc, #616]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800abc0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abc4:	fb01 f303 	mul.w	r3, r1, r3
 800abc8:	4413      	add	r3, r2
 800abca:	3308      	adds	r3, #8
 800abcc:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800abce:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800abd0:	7ffb      	ldrb	r3, [r7, #31]
 800abd2:	4a95      	ldr	r2, [pc, #596]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800abd4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	4413      	add	r3, r2
 800abde:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800abe2:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800abe4:	4602      	mov	r2, r0
 800abe6:	4992      	ldr	r1, [pc, #584]	@ (800ae30 <MCU_ProcessModuleStatus2+0x428>)
 800abe8:	4892      	ldr	r0, [pc, #584]	@ (800ae34 <MCU_ProcessModuleStatus2+0x42c>)
 800abea:	f00a fa6f 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800abee:	4891      	ldr	r0, [pc, #580]	@ (800ae34 <MCU_ProcessModuleStatus2+0x42c>)
 800abf0:	f7fa fd24 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800abf4:	7ffb      	ldrb	r3, [r7, #31]
 800abf6:	4a8c      	ldr	r2, [pc, #560]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800abf8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800abfc:	fb01 f303 	mul.w	r3, r1, r3
 800ac00:	4413      	add	r3, r2
 800ac02:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800ac06:	2200      	movs	r2, #0
 800ac08:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 800ac0a:	7ffb      	ldrb	r3, [r7, #31]
 800ac0c:	8938      	ldrh	r0, [r7, #8]
 800ac0e:	4a86      	ldr	r2, [pc, #536]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac10:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac14:	fb01 f303 	mul.w	r3, r1, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	3322      	adds	r3, #34	@ 0x22
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 800ac20:	7ffb      	ldrb	r3, [r7, #31]
 800ac22:	88f8      	ldrh	r0, [r7, #6]
 800ac24:	4a80      	ldr	r2, [pc, #512]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac26:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac2a:	fb01 f303 	mul.w	r3, r1, r3
 800ac2e:	4413      	add	r3, r2
 800ac30:	331e      	adds	r3, #30
 800ac32:	4602      	mov	r2, r0
 800ac34:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800ac36:	7ffb      	ldrb	r3, [r7, #31]
 800ac38:	88b8      	ldrh	r0, [r7, #4]
 800ac3a:	4a7b      	ldr	r2, [pc, #492]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac3c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	4413      	add	r3, r2
 800ac46:	3320      	adds	r3, #32
 800ac48:	4602      	mov	r2, r0
 800ac4a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 800ac4c:	7ffb      	ldrb	r3, [r7, #31]
 800ac4e:	8978      	ldrh	r0, [r7, #10]
 800ac50:	4a75      	ldr	r2, [pc, #468]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac52:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ac56:	fb01 f303 	mul.w	r3, r1, r3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3324      	adds	r3, #36	@ 0x24
 800ac5e:	4602      	mov	r2, r0
 800ac60:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800ac62:	4b75      	ldr	r3, [pc, #468]	@ (800ae38 <MCU_ProcessModuleStatus2+0x430>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	7ffb      	ldrb	r3, [r7, #31]
 800ac68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac6a:	496f      	ldr	r1, [pc, #444]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac6c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800ac70:	fb00 f303 	mul.w	r3, r0, r3
 800ac74:	440b      	add	r3, r1
 800ac76:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800ac7a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800ac7c:	7ffb      	ldrb	r3, [r7, #31]
 800ac7e:	4a6f      	ldr	r2, [pc, #444]	@ (800ae3c <MCU_ProcessModuleStatus2+0x434>)
 800ac80:	6812      	ldr	r2, [r2, #0]
 800ac82:	4969      	ldr	r1, [pc, #420]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ac84:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800ac88:	fb00 f303 	mul.w	r3, r0, r3
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800ac92:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800ac94:	4b6a      	ldr	r3, [pc, #424]	@ (800ae40 <MCU_ProcessModuleStatus2+0x438>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80b5 	beq.w	800ae0c <MCU_ProcessModuleStatus2+0x404>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 800aca2:	7ffb      	ldrb	r3, [r7, #31]
 800aca4:	4a60      	ldr	r2, [pc, #384]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800aca6:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800acaa:	fb01 f303 	mul.w	r3, r1, r3
 800acae:	4413      	add	r3, r2
 800acb0:	3322      	adds	r3, #34	@ 0x22
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f5 fc1d 	bl	80004f4 <__aeabi_i2d>
 800acba:	a357      	add	r3, pc, #348	@ (adr r3, 800ae18 <MCU_ProcessModuleStatus2+0x410>)
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f7f5 fc82 	bl	80005c8 <__aeabi_dmul>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4610      	mov	r0, r2
 800acca:	4619      	mov	r1, r3
 800accc:	f04f 0200 	mov.w	r2, #0
 800acd0:	f04f 0300 	mov.w	r3, #0
 800acd4:	f7f5 fac2 	bl	800025c <__adddf3>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	f7f5 ff6a 	bl	8000bb8 <__aeabi_d2f>
 800ace4:	4603      	mov	r3, r0
 800ace6:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 800ace8:	7ffb      	ldrb	r3, [r7, #31]
 800acea:	4a4f      	ldr	r2, [pc, #316]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800acec:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800acf0:	fb01 f303 	mul.w	r3, r1, r3
 800acf4:	4413      	add	r3, r2
 800acf6:	331e      	adds	r3, #30
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7f5 fbfa 	bl	80004f4 <__aeabi_i2d>
 800ad00:	a345      	add	r3, pc, #276	@ (adr r3, 800ae18 <MCU_ProcessModuleStatus2+0x410>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fc5f 	bl	80005c8 <__aeabi_dmul>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4610      	mov	r0, r2
 800ad10:	4619      	mov	r1, r3
 800ad12:	f04f 0200 	mov.w	r2, #0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	f7f5 fa9f 	bl	800025c <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4610      	mov	r0, r2
 800ad24:	4619      	mov	r1, r3
 800ad26:	f7f5 ff47 	bl	8000bb8 <__aeabi_d2f>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 800ad2e:	7ffb      	ldrb	r3, [r7, #31]
 800ad30:	4a3d      	ldr	r2, [pc, #244]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ad32:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	3320      	adds	r3, #32
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f5 fbd7 	bl	80004f4 <__aeabi_i2d>
 800ad46:	a334      	add	r3, pc, #208	@ (adr r3, 800ae18 <MCU_ProcessModuleStatus2+0x410>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 fc3c 	bl	80005c8 <__aeabi_dmul>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4610      	mov	r0, r2
 800ad56:	4619      	mov	r1, r3
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	f7f5 fa7c 	bl	800025c <__adddf3>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	f7f5 ff24 	bl	8000bb8 <__aeabi_d2f>
 800ad70:	4603      	mov	r3, r0
 800ad72:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 800ad74:	7ffb      	ldrb	r3, [r7, #31]
 800ad76:	4a2c      	ldr	r2, [pc, #176]	@ (800ae28 <MCU_ProcessModuleStatus2+0x420>)
 800ad78:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ad7c:	fb01 f303 	mul.w	r3, r1, r3
 800ad80:	4413      	add	r3, r2
 800ad82:	3324      	adds	r3, #36	@ 0x24
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f5 fbb4 	bl	80004f4 <__aeabi_i2d>
 800ad8c:	a324      	add	r3, pc, #144	@ (adr r3, 800ae20 <MCU_ProcessModuleStatus2+0x418>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 fc19 	bl	80005c8 <__aeabi_dmul>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f04f 0200 	mov.w	r2, #0
 800ada2:	f04f 0300 	mov.w	r3, #0
 800ada6:	f7f5 fa59 	bl	800025c <__adddf3>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4610      	mov	r0, r2
 800adb0:	4619      	mov	r1, r3
 800adb2:	f7f5 ff01 	bl	8000bb8 <__aeabi_d2f>
 800adb6:	4603      	mov	r3, r0
 800adb8:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 800adba:	4b22      	ldr	r3, [pc, #136]	@ (800ae44 <MCU_ProcessModuleStatus2+0x43c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 800adc2:	461e      	mov	r6, r3
 800adc4:	69b8      	ldr	r0, [r7, #24]
 800adc6:	f7f5 fba7 	bl	8000518 <__aeabi_f2d>
 800adca:	4604      	mov	r4, r0
 800adcc:	460d      	mov	r5, r1
 800adce:	6978      	ldr	r0, [r7, #20]
 800add0:	f7f5 fba2 	bl	8000518 <__aeabi_f2d>
 800add4:	4680      	mov	r8, r0
 800add6:	4689      	mov	r9, r1
 800add8:	6938      	ldr	r0, [r7, #16]
 800adda:	f7f5 fb9d 	bl	8000518 <__aeabi_f2d>
 800adde:	4682      	mov	sl, r0
 800ade0:	468b      	mov	fp, r1
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7f5 fb98 	bl	8000518 <__aeabi_f2d>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adf0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800adf4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800adf8:	e9cd 4500 	strd	r4, r5, [sp]
 800adfc:	4632      	mov	r2, r6
 800adfe:	4912      	ldr	r1, [pc, #72]	@ (800ae48 <MCU_ProcessModuleStatus2+0x440>)
 800ae00:	480c      	ldr	r0, [pc, #48]	@ (800ae34 <MCU_ProcessModuleStatus2+0x42c>)
 800ae02:	f00a f963 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800ae06:	480b      	ldr	r0, [pc, #44]	@ (800ae34 <MCU_ProcessModuleStatus2+0x42c>)
 800ae08:	f7fa fc18 	bl	800563c <serialOut>
}
 800ae0c:	bf00      	nop
 800ae0e:	3724      	adds	r7, #36	@ 0x24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae16:	bf00      	nop
 800ae18:	d2f1a9fc 	.word	0xd2f1a9fc
 800ae1c:	3f50624d 	.word	0x3f50624d
 800ae20:	eb851eb8 	.word	0xeb851eb8
 800ae24:	3f8eb851 	.word	0x3f8eb851
 800ae28:	20000dec 	.word	0x20000dec
 800ae2c:	20000010 	.word	0x20000010
 800ae30:	08019d28 	.word	0x08019d28
 800ae34:	20000b5c 	.word	0x20000b5c
 800ae38:	200005d0 	.word	0x200005d0
 800ae3c:	20000d20 	.word	0x20000d20
 800ae40:	2000000c 	.word	0x2000000c
 800ae44:	20000d9c 	.word	0x20000d9c
 800ae48:	08019ec0 	.word	0x08019ec0
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 800ae50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae54:	b08d      	sub	sp, #52	@ 0x34
 800ae56:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 800ae58:	463b      	mov	r3, r7
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f00a f99b 	bl	801519a <memset>
  memcpy(&status3, rxd, sizeof(status3));
 800ae64:	4a38      	ldr	r2, [pc, #224]	@ (800af48 <MCU_ProcessModuleStatus3+0xf8>)
 800ae66:	463b      	mov	r3, r7
 800ae68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae6c:	e883 0003 	stmia.w	r3, {r0, r1}

  // Debug output when status is received (skip in minimal mode)
  if(debugMessages & DBG_MSG_STATUS3 && !(debugMessages & DBG_MSG_MINIMAL)){
 800ae70:	4b36      	ldr	r3, [pc, #216]	@ (800af4c <MCU_ProcessModuleStatus3+0xfc>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d019      	beq.n	800aeb0 <MCU_ProcessModuleStatus3+0x60>
 800ae7c:	4b33      	ldr	r3, [pc, #204]	@ (800af4c <MCU_ProcessModuleStatus3+0xfc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d113      	bne.n	800aeb0 <MCU_ProcessModuleStatus3+0x60>
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
            rxObj.bF.id.EID,
 800ae88:	4b31      	ldr	r3, [pc, #196]	@ (800af50 <MCU_ProcessModuleStatus3+0x100>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800ae90:	4619      	mov	r1, r3
            status3.cellLoTemp,
 800ae92:	883b      	ldrh	r3, [r7, #0]
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800ae94:	4618      	mov	r0, r3
            status3.cellHiTemp,
 800ae96:	887b      	ldrh	r3, [r7, #2]
            status3.cellAvgTemp);
 800ae98:	88ba      	ldrh	r2, [r7, #4]
    sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, LoT=%dC, HiT=%dC, AvgT=%dC", 
 800ae9a:	9201      	str	r2, [sp, #4]
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	4603      	mov	r3, r0
 800aea0:	460a      	mov	r2, r1
 800aea2:	492c      	ldr	r1, [pc, #176]	@ (800af54 <MCU_ProcessModuleStatus3+0x104>)
 800aea4:	482c      	ldr	r0, [pc, #176]	@ (800af58 <MCU_ProcessModuleStatus3+0x108>)
 800aea6:	f00a f911 	bl	80150cc <siprintf>
    serialOut(tempBuffer);
 800aeaa:	482b      	ldr	r0, [pc, #172]	@ (800af58 <MCU_ProcessModuleStatus3+0x108>)
 800aeac:	f7fa fbc6 	bl	800563c <serialOut>
  }

  //find the module index
  moduleIndex = MAX_MODULES_PER_PACK;
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75bb      	strb	r3, [r7, #22]
 800aeb8:	e031      	b.n	800af1e <MCU_ProcessModuleStatus3+0xce>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800aeba:	7dbb      	ldrb	r3, [r7, #22]
 800aebc:	4a27      	ldr	r2, [pc, #156]	@ (800af5c <MCU_ProcessModuleStatus3+0x10c>)
 800aebe:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aec2:	fb01 f303 	mul.w	r3, r1, r3
 800aec6:	4413      	add	r3, r2
 800aec8:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	f083 0301 	eor.w	r3, r3, #1
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d11e      	bne.n	800af16 <MCU_ProcessModuleStatus3+0xc6>
 800aed8:	7dbb      	ldrb	r3, [r7, #22]
 800aeda:	4a20      	ldr	r2, [pc, #128]	@ (800af5c <MCU_ProcessModuleStatus3+0x10c>)
 800aedc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800aee0:	fb01 f303 	mul.w	r3, r1, r3
 800aee4:	4413      	add	r3, r2
 800aee6:	3304      	adds	r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d013      	beq.n	800af16 <MCU_ProcessModuleStatus3+0xc6>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800aeee:	4b18      	ldr	r3, [pc, #96]	@ (800af50 <MCU_ProcessModuleStatus3+0x100>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800aef6:	7dbb      	ldrb	r3, [r7, #22]
 800aef8:	4918      	ldr	r1, [pc, #96]	@ (800af5c <MCU_ProcessModuleStatus3+0x10c>)
 800aefa:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800aefe:	fb00 f303 	mul.w	r3, r0, r3
 800af02:	440b      	add	r3, r1
 800af04:	3308      	adds	r3, #8
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d103      	bne.n	800af18 <MCU_ProcessModuleStatus3+0xc8>
      moduleIndex = index; // found it - save the index
 800af10:	7dbb      	ldrb	r3, [r7, #22]
 800af12:	75fb      	strb	r3, [r7, #23]
 800af14:	e000      	b.n	800af18 <MCU_ProcessModuleStatus3+0xc8>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800af16:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800af18:	7dbb      	ldrb	r3, [r7, #22]
 800af1a:	3301      	adds	r3, #1
 800af1c:	75bb      	strb	r3, [r7, #22]
 800af1e:	7dbb      	ldrb	r3, [r7, #22]
 800af20:	2b1f      	cmp	r3, #31
 800af22:	d9ca      	bls.n	800aeba <MCU_ProcessModuleStatus3+0x6a>
    }
  if (moduleIndex == MAX_MODULES_PER_PACK){
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	2b20      	cmp	r3, #32
 800af28:	d11e      	bne.n	800af68 <MCU_ProcessModuleStatus3+0x118>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800af2a:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <MCU_ProcessModuleStatus3+0x110>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	f003 0309 	and.w	r3, r3, #9
 800af32:	2b09      	cmp	r3, #9
 800af34:	f040 8154 	bne.w	800b1e0 <MCU_ProcessModuleStatus3+0x390>
 800af38:	490a      	ldr	r1, [pc, #40]	@ (800af64 <MCU_ProcessModuleStatus3+0x114>)
 800af3a:	4807      	ldr	r0, [pc, #28]	@ (800af58 <MCU_ProcessModuleStatus3+0x108>)
 800af3c:	f00a f8c6 	bl	80150cc <siprintf>
 800af40:	4805      	ldr	r0, [pc, #20]	@ (800af58 <MCU_ProcessModuleStatus3+0x108>)
 800af42:	f7fa fb7b 	bl	800563c <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 800af46:	e14b      	b.n	800b1e0 <MCU_ProcessModuleStatus3+0x390>
 800af48:	20000da8 	.word	0x20000da8
 800af4c:	20000010 	.word	0x20000010
 800af50:	20000d9c 	.word	0x20000d9c
 800af54:	08019f50 	.word	0x08019f50
 800af58:	20000b5c 	.word	0x20000b5c
 800af5c:	20000dec 	.word	0x20000dec
 800af60:	2000000c 	.word	0x2000000c
 800af64:	08019f8c 	.word	0x08019f8c
    module[moduleIndex].statusMessagesReceived |= (1 << 2);  // Status3 received
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	4aa5      	ldr	r2, [pc, #660]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800af6c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800af70:	fb01 f303 	mul.w	r3, r1, r3
 800af74:	4413      	add	r3, r2
 800af76:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	f042 0204 	orr.w	r2, r2, #4
 800af82:	b2d0      	uxtb	r0, r2
 800af84:	4a9e      	ldr	r2, [pc, #632]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800af86:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800af94:	4602      	mov	r2, r0
 800af96:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].statusMessagesReceived == 0x07) {  // All 3 bits set
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	4a99      	ldr	r2, [pc, #612]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800af9c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afa0:	fb01 f303 	mul.w	r3, r1, r3
 800afa4:	4413      	add	r3, r2
 800afa6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b07      	cmp	r3, #7
 800afae:	d115      	bne.n	800afdc <MCU_ProcessModuleStatus3+0x18c>
        module[moduleIndex].statusPending = false;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	4a93      	ldr	r2, [pc, #588]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800afb4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afb8:	fb01 f303 	mul.w	r3, r1, r3
 800afbc:	4413      	add	r3, r2
 800afbe:	f203 43c1 	addw	r3, r3, #1217	@ 0x4c1
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
        module[moduleIndex].statusMessagesReceived = 0;  // Reset for next time
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	4a8d      	ldr	r2, [pc, #564]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800afca:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afce:	fb01 f303 	mul.w	r3, r1, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
    if(module[moduleIndex].consecutiveTimeouts > 0 && (debugMessages & DBG_MSG_TIMEOUT)){
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
 800afde:	4a88      	ldr	r2, [pc, #544]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800afe0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	4413      	add	r3, r2
 800afea:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d021      	beq.n	800b038 <MCU_ProcessModuleStatus3+0x1e8>
 800aff4:	4b83      	ldr	r3, [pc, #524]	@ (800b204 <MCU_ProcessModuleStatus3+0x3b4>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01b      	beq.n	800b038 <MCU_ProcessModuleStatus3+0x1e8>
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	4a7f      	ldr	r2, [pc, #508]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b004:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b008:	fb01 f303 	mul.w	r3, r1, r3
 800b00c:	4413      	add	r3, r2
 800b00e:	3308      	adds	r3, #8
 800b010:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800b012:	4618      	mov	r0, r3
              module[moduleIndex].moduleId, module[moduleIndex].consecutiveTimeouts);
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	4a7a      	ldr	r2, [pc, #488]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b018:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b01c:	fb01 f303 	mul.w	r3, r1, r3
 800b020:	4413      	add	r3, r2
 800b022:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800b026:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU INFO - Resetting timeout counter for module ID=%02x (was %d)", 
 800b028:	4602      	mov	r2, r0
 800b02a:	4977      	ldr	r1, [pc, #476]	@ (800b208 <MCU_ProcessModuleStatus3+0x3b8>)
 800b02c:	4877      	ldr	r0, [pc, #476]	@ (800b20c <MCU_ProcessModuleStatus3+0x3bc>)
 800b02e:	f00a f84d 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800b032:	4876      	ldr	r0, [pc, #472]	@ (800b20c <MCU_ProcessModuleStatus3+0x3bc>)
 800b034:	f7fa fb02 	bl	800563c <serialOut>
    module[moduleIndex].consecutiveTimeouts = 0;  // Reset timeout counter on successful response
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	4a71      	ldr	r2, [pc, #452]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b03c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b040:	fb01 f303 	mul.w	r3, r1, r3
 800b044:	4413      	add	r3, r2
 800b046:	f203 43c3 	addw	r3, r3, #1219	@ 0x4c3
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	88b8      	ldrh	r0, [r7, #4]
 800b052:	4a6b      	ldr	r2, [pc, #428]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b054:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b058:	fb01 f303 	mul.w	r3, r1, r3
 800b05c:	4413      	add	r3, r2
 800b05e:	331c      	adds	r3, #28
 800b060:	4602      	mov	r2, r0
 800b062:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	8878      	ldrh	r0, [r7, #2]
 800b068:	4a65      	ldr	r2, [pc, #404]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b06a:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
 800b072:	4413      	add	r3, r2
 800b074:	3318      	adds	r3, #24
 800b076:	4602      	mov	r2, r0
 800b078:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	8838      	ldrh	r0, [r7, #0]
 800b07e:	4a60      	ldr	r2, [pc, #384]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b080:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	4413      	add	r3, r2
 800b08a:	331a      	adds	r3, #26
 800b08c:	4602      	mov	r2, r0
 800b08e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800b090:	4b5f      	ldr	r3, [pc, #380]	@ (800b210 <MCU_ProcessModuleStatus3+0x3c0>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b098:	4959      	ldr	r1, [pc, #356]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b09a:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b09e:	fb00 f303 	mul.w	r3, r0, r3
 800b0a2:	440b      	add	r3, r1
 800b0a4:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b0a8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	4a59      	ldr	r2, [pc, #356]	@ (800b214 <MCU_ProcessModuleStatus3+0x3c4>)
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	4953      	ldr	r1, [pc, #332]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b0b2:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b0b6:	fb00 f303 	mul.w	r3, r0, r3
 800b0ba:	440b      	add	r3, r1
 800b0bc:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b0c0:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800b0c2:	4b55      	ldr	r3, [pc, #340]	@ (800b218 <MCU_ProcessModuleStatus3+0x3c8>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 8088 	beq.w	800b1e0 <MCU_ProcessModuleStatus3+0x390>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	4a4b      	ldr	r2, [pc, #300]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b0d4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	4413      	add	r3, r2
 800b0de:	331c      	adds	r3, #28
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7f5 fa06 	bl	80004f4 <__aeabi_i2d>
 800b0e8:	a341      	add	r3, pc, #260	@ (adr r3, 800b1f0 <MCU_ProcessModuleStatus3+0x3a0>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 fa6b 	bl	80005c8 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	a33f      	add	r3, pc, #252	@ (adr r3, 800b1f8 <MCU_ProcessModuleStatus3+0x3a8>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f7f5 f8aa 	bl	8000258 <__aeabi_dsub>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f7f5 fd54 	bl	8000bb8 <__aeabi_d2f>
 800b110:	4603      	mov	r3, r0
 800b112:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	4a3a      	ldr	r2, [pc, #232]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b118:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b11c:	fb01 f303 	mul.w	r3, r1, r3
 800b120:	4413      	add	r3, r2
 800b122:	3318      	adds	r3, #24
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7f5 f9e4 	bl	80004f4 <__aeabi_i2d>
 800b12c:	a330      	add	r3, pc, #192	@ (adr r3, 800b1f0 <MCU_ProcessModuleStatus3+0x3a0>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 fa49 	bl	80005c8 <__aeabi_dmul>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4610      	mov	r0, r2
 800b13c:	4619      	mov	r1, r3
 800b13e:	a32e      	add	r3, pc, #184	@ (adr r3, 800b1f8 <MCU_ProcessModuleStatus3+0x3a8>)
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 f888 	bl	8000258 <__aeabi_dsub>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4610      	mov	r0, r2
 800b14e:	4619      	mov	r1, r3
 800b150:	f7f5 fd32 	bl	8000bb8 <__aeabi_d2f>
 800b154:	4603      	mov	r3, r0
 800b156:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	4a29      	ldr	r2, [pc, #164]	@ (800b200 <MCU_ProcessModuleStatus3+0x3b0>)
 800b15c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b160:	fb01 f303 	mul.w	r3, r1, r3
 800b164:	4413      	add	r3, r2
 800b166:	331a      	adds	r3, #26
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 f9c2 	bl	80004f4 <__aeabi_i2d>
 800b170:	a31f      	add	r3, pc, #124	@ (adr r3, 800b1f0 <MCU_ProcessModuleStatus3+0x3a0>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f5 fa27 	bl	80005c8 <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4610      	mov	r0, r2
 800b180:	4619      	mov	r1, r3
 800b182:	a31d      	add	r3, pc, #116	@ (adr r3, 800b1f8 <MCU_ProcessModuleStatus3+0x3a8>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 f866 	bl	8000258 <__aeabi_dsub>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4610      	mov	r0, r2
 800b192:	4619      	mov	r1, r3
 800b194:	f7f5 fd10 	bl	8000bb8 <__aeabi_d2f>
 800b198:	4603      	mov	r3, r0
 800b19a:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800b19c:	4b1f      	ldr	r3, [pc, #124]	@ (800b21c <MCU_ProcessModuleStatus3+0x3cc>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800b1a4:	461e      	mov	r6, r3
 800b1a6:	6938      	ldr	r0, [r7, #16]
 800b1a8:	f7f5 f9b6 	bl	8000518 <__aeabi_f2d>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	460d      	mov	r5, r1
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7f5 f9b1 	bl	8000518 <__aeabi_f2d>
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	68b8      	ldr	r0, [r7, #8]
 800b1bc:	f7f5 f9ac 	bl	8000518 <__aeabi_f2d>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b1cc:	e9cd 4500 	strd	r4, r5, [sp]
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	4913      	ldr	r1, [pc, #76]	@ (800b220 <MCU_ProcessModuleStatus3+0x3d0>)
 800b1d4:	480d      	ldr	r0, [pc, #52]	@ (800b20c <MCU_ProcessModuleStatus3+0x3bc>)
 800b1d6:	f009 ff79 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800b1da:	480c      	ldr	r0, [pc, #48]	@ (800b20c <MCU_ProcessModuleStatus3+0x3bc>)
 800b1dc:	f7fa fa2e 	bl	800563c <serialOut>
}
 800b1e0:	bf00      	nop
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	47ae147b 	.word	0x47ae147b
 800b1f4:	3f847ae1 	.word	0x3f847ae1
 800b1f8:	cccccccd 	.word	0xcccccccd
 800b1fc:	404baccc 	.word	0x404baccc
 800b200:	20000dec 	.word	0x20000dec
 800b204:	20000010 	.word	0x20000010
 800b208:	08019d28 	.word	0x08019d28
 800b20c:	20000b5c 	.word	0x20000b5c
 800b210:	200005d0 	.word	0x200005d0
 800b214:	20000d20 	.word	0x20000d20
 800b218:	2000000c 	.word	0x2000000c
 800b21c:	20000d9c 	.word	0x20000d9c
 800b220:	08019fcc 	.word	0x08019fcc

0800b224 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800b224:	b580      	push	{r7, lr}
 800b226:	b094      	sub	sp, #80	@ 0x50
 800b228:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800b22a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b22e:	2208      	movs	r2, #8
 800b230:	2100      	movs	r1, #0
 800b232:	4618      	mov	r0, r3
 800b234:	f009 ffb1 	bl	801519a <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800b238:	4a31      	ldr	r2, [pc, #196]	@ (800b300 <MCU_ProcessCellCommStatus1+0xdc>)
 800b23a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b23e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b242:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800b246:	4b2f      	ldr	r3, [pc, #188]	@ (800b304 <MCU_ProcessCellCommStatus1+0xe0>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	f003 0308 	and.w	r3, r3, #8
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d052      	beq.n	800b2f8 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800b252:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b256:	2bff      	cmp	r3, #255	@ 0xff
 800b258:	d10a      	bne.n	800b270 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800b25a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d106      	bne.n	800b270 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800b262:	f107 0318 	add.w	r3, r7, #24
 800b266:	4928      	ldr	r1, [pc, #160]	@ (800b308 <MCU_ProcessCellCommStatus1+0xe4>)
 800b268:	4618      	mov	r0, r3
 800b26a:	f009 ff2f 	bl	80150cc <siprintf>
 800b26e:	e019      	b.n	800b2a4 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800b270:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b274:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b278:	429a      	cmp	r2, r3
 800b27a:	d109      	bne.n	800b290 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800b27c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b280:	461a      	mov	r2, r3
 800b282:	f107 0318 	add.w	r3, r7, #24
 800b286:	4921      	ldr	r1, [pc, #132]	@ (800b30c <MCU_ProcessCellCommStatus1+0xe8>)
 800b288:	4618      	mov	r0, r3
 800b28a:	f009 ff1f 	bl	80150cc <siprintf>
 800b28e:	e009      	b.n	800b2a4 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800b290:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b294:	461a      	mov	r2, r3
 800b296:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b29a:	f107 0018 	add.w	r0, r7, #24
 800b29e:	491c      	ldr	r1, [pc, #112]	@ (800b310 <MCU_ProcessCellCommStatus1+0xec>)
 800b2a0:	f009 ff14 	bl	80150cc <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800b2a4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b2a8:	2bff      	cmp	r3, #255	@ 0xff
 800b2aa:	d105      	bne.n	800b2b8 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800b2ac:	1d3b      	adds	r3, r7, #4
 800b2ae:	4919      	ldr	r1, [pc, #100]	@ (800b314 <MCU_ProcessCellCommStatus1+0xf0>)
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f009 ff0b 	bl	80150cc <siprintf>
 800b2b6:	e007      	b.n	800b2c8 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800b2b8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800b2bc:	461a      	mov	r2, r3
 800b2be:	1d3b      	adds	r3, r7, #4
 800b2c0:	4915      	ldr	r1, [pc, #84]	@ (800b318 <MCU_ProcessCellCommStatus1+0xf4>)
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f009 ff02 	bl	80150cc <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b2c8:	4b14      	ldr	r3, [pc, #80]	@ (800b31c <MCU_ProcessCellCommStatus1+0xf8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b2d0:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b2d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b2d4:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800b2d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800b2da:	f107 0218 	add.w	r2, r7, #24
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	1d3b      	adds	r3, r7, #4
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	9100      	str	r1, [sp, #0]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	490d      	ldr	r1, [pc, #52]	@ (800b320 <MCU_ProcessCellCommStatus1+0xfc>)
 800b2ec:	480d      	ldr	r0, [pc, #52]	@ (800b324 <MCU_ProcessCellCommStatus1+0x100>)
 800b2ee:	f009 feed 	bl	80150cc <siprintf>

    serialOut(tempBuffer);
 800b2f2:	480c      	ldr	r0, [pc, #48]	@ (800b324 <MCU_ProcessCellCommStatus1+0x100>)
 800b2f4:	f7fa f9a2 	bl	800563c <serialOut>
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	3740      	adds	r7, #64	@ 0x40
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000da8 	.word	0x20000da8
 800b304:	2000000c 	.word	0x2000000c
 800b308:	0801a038 	.word	0x0801a038
 800b30c:	0801a044 	.word	0x0801a044
 800b310:	0801a050 	.word	0x0801a050
 800b314:	0801a05c 	.word	0x0801a05c
 800b318:	0801a064 	.word	0x0801a064
 800b31c:	20000d9c 	.word	0x20000d9c
 800b320:	0801a078 	.word	0x0801a078
 800b324:	20000b5c 	.word	0x20000b5c

0800b328 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800b328:	b5b0      	push	{r4, r5, r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	4603      	mov	r3, r0
 800b330:	460a      	mov	r2, r1
 800b332:	71fb      	strb	r3, [r7, #7]
 800b334:	4613      	mov	r3, r2
 800b336:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800b33c:	79bb      	ldrb	r3, [r7, #6]
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	b2da      	uxtb	r2, r3
 800b344:	7a7b      	ldrb	r3, [r7, #9]
 800b346:	f362 0303 	bfi	r3, r2, #0, #4
 800b34a:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800b34c:	7a7b      	ldrb	r3, [r7, #9]
 800b34e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b352:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800b354:	4b4a      	ldr	r3, [pc, #296]	@ (800b480 <MCU_TransmitState+0x158>)
 800b356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b35a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800b35c:	4b49      	ldr	r3, [pc, #292]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800b362:	4b48      	ldr	r3, [pc, #288]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800b368:	4b46      	ldr	r3, [pc, #280]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4a45      	ldr	r2, [pc, #276]	@ (800b488 <MCU_TransmitState+0x160>)
 800b372:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800b374:	4a43      	ldr	r2, [pc, #268]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b376:	8813      	ldrh	r3, [r2, #0]
 800b378:	f240 5114 	movw	r1, #1300	@ 0x514
 800b37c:	f361 030a 	bfi	r3, r1, #0, #11
 800b380:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800b382:	79fa      	ldrb	r2, [r7, #7]
 800b384:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800b388:	493e      	ldr	r1, [pc, #248]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b38a:	680b      	ldr	r3, [r1, #0]
 800b38c:	f362 23dc 	bfi	r3, r2, #11, #18
 800b390:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800b392:	4a3c      	ldr	r2, [pc, #240]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b394:	7913      	ldrb	r3, [r2, #4]
 800b396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b39a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800b39c:	4a39      	ldr	r2, [pc, #228]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b39e:	7913      	ldrb	r3, [r2, #4]
 800b3a0:	2104      	movs	r1, #4
 800b3a2:	f361 0303 	bfi	r3, r1, #0, #4
 800b3a6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b3a8:	4a36      	ldr	r2, [pc, #216]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b3aa:	7913      	ldrb	r3, [r2, #4]
 800b3ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3b0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800b3b2:	4a34      	ldr	r2, [pc, #208]	@ (800b484 <MCU_TransmitState+0x15c>)
 800b3b4:	7913      	ldrb	r3, [r2, #4]
 800b3b6:	f043 0310 	orr.w	r3, r3, #16
 800b3ba:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800b3bc:	4b33      	ldr	r3, [pc, #204]	@ (800b48c <MCU_TransmitState+0x164>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d019      	beq.n	800b3fc <MCU_TransmitState+0xd4>
 800b3c8:	79fc      	ldrb	r4, [r7, #7]
 800b3ca:	79bd      	ldrb	r5, [r7, #6]
 800b3cc:	4b2c      	ldr	r3, [pc, #176]	@ (800b480 <MCU_TransmitState+0x158>)
 800b3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f5 f88e 	bl	80004f4 <__aeabi_i2d>
 800b3d8:	a327      	add	r3, pc, #156	@ (adr r3, 800b478 <MCU_TransmitState+0x150>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 f8f3 	bl	80005c8 <__aeabi_dmul>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	e9cd 2300 	strd	r2, r3, [sp]
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4928      	ldr	r1, [pc, #160]	@ (800b490 <MCU_TransmitState+0x168>)
 800b3f0:	4828      	ldr	r0, [pc, #160]	@ (800b494 <MCU_TransmitState+0x16c>)
 800b3f2:	f009 fe6b 	bl	80150cc <siprintf>
 800b3f6:	4827      	ldr	r0, [pc, #156]	@ (800b494 <MCU_TransmitState+0x16c>)
 800b3f8:	f7fa f920 	bl	800563c <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	f7fd fde5 	bl	8008fcc <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800b402:	79fb      	ldrb	r3, [r7, #7]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f9f1 	bl	800b7ec <MCU_ModuleIndexFromId>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
  if(index < MAX_MODULES_PER_PACK){
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	2b1f      	cmp	r3, #31
 800b412:	d82c      	bhi.n	800b46e <MCU_TransmitState+0x146>
    module[index].command.commandedState  = state;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	4a20      	ldr	r2, [pc, #128]	@ (800b498 <MCU_TransmitState+0x170>)
 800b418:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b41c:	fb01 f303 	mul.w	r3, r1, r3
 800b420:	4413      	add	r3, r2
 800b422:	3329      	adds	r3, #41	@ 0x29
 800b424:	79ba      	ldrb	r2, [r7, #6]
 800b426:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	4a1b      	ldr	r2, [pc, #108]	@ (800b498 <MCU_TransmitState+0x170>)
 800b42c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b430:	fb01 f303 	mul.w	r3, r1, r3
 800b434:	4413      	add	r3, r2
 800b436:	332a      	adds	r3, #42	@ 0x2a
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800b43c:	4b17      	ldr	r3, [pc, #92]	@ (800b49c <MCU_TransmitState+0x174>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b444:	4914      	ldr	r1, [pc, #80]	@ (800b498 <MCU_TransmitState+0x170>)
 800b446:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b44a:	fb00 f303 	mul.w	r3, r0, r3
 800b44e:	440b      	add	r3, r1
 800b450:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800b454:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	4a11      	ldr	r2, [pc, #68]	@ (800b4a0 <MCU_TransmitState+0x178>)
 800b45a:	6812      	ldr	r2, [r2, #0]
 800b45c:	490e      	ldr	r1, [pc, #56]	@ (800b498 <MCU_TransmitState+0x170>)
 800b45e:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b462:	fb00 f303 	mul.w	r3, r0, r3
 800b466:	440b      	add	r3, r1
 800b468:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800b46c:	601a      	str	r2, [r3, #0]
  }
}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bdb0      	pop	{r4, r5, r7, pc}
 800b476:	bf00      	nop
 800b478:	eb851eb8 	.word	0xeb851eb8
 800b47c:	3f8eb851 	.word	0x3f8eb851
 800b480:	2000a6ec 	.word	0x2000a6ec
 800b484:	20000d40 	.word	0x20000d40
 800b488:	20000d4c 	.word	0x20000d4c
 800b48c:	2000000c 	.word	0x2000000c
 800b490:	0801a0fc 	.word	0x0801a0fc
 800b494:	20000b5c 	.word	0x20000b5c
 800b498:	20000dec 	.word	0x20000dec
 800b49c:	200005d0 	.word	0x200005d0
 800b4a0:	20000d20 	.word	0x20000d20

0800b4a4 <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	7b3b      	ldrb	r3, [r7, #12]
 800b4b8:	f362 0303 	bfi	r3, r2, #0, #4
 800b4bc:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800b4be:	7b3b      	ldrb	r3, [r7, #12]
 800b4c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b4c4:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800b4c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800b4cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800b4d2:	4b19      	ldr	r3, [pc, #100]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	609a      	str	r2, [r3, #8]

  memcpy(txd, &maxState, sizeof(maxState));
 800b4d8:	7b3a      	ldrb	r2, [r7, #12]
 800b4da:	4b18      	ldr	r3, [pc, #96]	@ (800b53c <MCU_TransmitMaxState+0x98>)
 800b4dc:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800b4de:	4a16      	ldr	r2, [pc, #88]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b4e0:	8813      	ldrh	r3, [r2, #0]
 800b4e2:	f240 5117 	movw	r1, #1303	@ 0x517
 800b4e6:	f361 030a 	bfi	r3, r1, #0, #11
 800b4ea:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800b4ec:	4b14      	ldr	r3, [pc, #80]	@ (800b540 <MCU_TransmitMaxState+0x9c>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800b4f6:	4910      	ldr	r1, [pc, #64]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b4f8:	680b      	ldr	r3, [r1, #0]
 800b4fa:	f362 23dc 	bfi	r3, r2, #11, #18
 800b4fe:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800b500:	4a0d      	ldr	r2, [pc, #52]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b502:	7913      	ldrb	r3, [r2, #4]
 800b504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b508:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800b50a:	4a0b      	ldr	r2, [pc, #44]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b50c:	7913      	ldrb	r3, [r2, #4]
 800b50e:	2101      	movs	r1, #1
 800b510:	f361 0303 	bfi	r3, r1, #0, #4
 800b514:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b516:	4a08      	ldr	r2, [pc, #32]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b518:	7913      	ldrb	r3, [r2, #4]
 800b51a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b51e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800b520:	4a05      	ldr	r2, [pc, #20]	@ (800b538 <MCU_TransmitMaxState+0x94>)
 800b522:	7913      	ldrb	r3, [r2, #4]
 800b524:	f043 0310 	orr.w	r3, r3, #16
 800b528:	7113      	strb	r3, [r2, #4]

//  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800b52a:	2001      	movs	r0, #1
 800b52c:	f7fd fd4e 	bl	8008fcc <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000d40 	.word	0x20000d40
 800b53c:	20000d4c 	.word	0x20000d4c
 800b540:	2000a6ec 	.word	0x2000a6ec

0800b544 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b08a      	sub	sp, #40	@ 0x28
 800b548:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800b54e:	4a9b      	ldr	r2, [pc, #620]	@ (800b7bc <MCU_ProcessCellDetail+0x278>)
 800b550:	1d3b      	adds	r3, r7, #4
 800b552:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b556:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800b55a:	4b99      	ldr	r3, [pc, #612]	@ (800b7c0 <MCU_ProcessCellDetail+0x27c>)
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f003 0308 	and.w	r3, r3, #8
 800b562:	2b00      	cmp	r3, #0
 800b564:	d017      	beq.n	800b596 <MCU_ProcessCellDetail+0x52>
 800b566:	4b97      	ldr	r3, [pc, #604]	@ (800b7c4 <MCU_ProcessCellDetail+0x280>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b56e:	461c      	mov	r4, r3
 800b570:	797b      	ldrb	r3, [r7, #5]
 800b572:	461d      	mov	r5, r3
 800b574:	793b      	ldrb	r3, [r7, #4]
 800b576:	7aba      	ldrb	r2, [r7, #10]
 800b578:	88f9      	ldrh	r1, [r7, #6]
 800b57a:	8938      	ldrh	r0, [r7, #8]
 800b57c:	9003      	str	r0, [sp, #12]
 800b57e:	9102      	str	r1, [sp, #8]
 800b580:	9201      	str	r2, [sp, #4]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462b      	mov	r3, r5
 800b586:	4622      	mov	r2, r4
 800b588:	498f      	ldr	r1, [pc, #572]	@ (800b7c8 <MCU_ProcessCellDetail+0x284>)
 800b58a:	4890      	ldr	r0, [pc, #576]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b58c:	f009 fd9e 	bl	80150cc <siprintf>
 800b590:	488e      	ldr	r0, [pc, #568]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b592:	f7fa f853 	bl	800563c <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = MAX_MODULES_PER_PACK; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800b596:	2320      	movs	r3, #32
 800b598:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b59a:	2300      	movs	r3, #0
 800b59c:	75bb      	strb	r3, [r7, #22]
 800b59e:	e031      	b.n	800b604 <MCU_ProcessCellDetail+0xc0>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
 800b5a2:	4a8b      	ldr	r2, [pc, #556]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b5a4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b5a8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f083 0301 	eor.w	r3, r3, #1
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d11e      	bne.n	800b5fc <MCU_ProcessCellDetail+0xb8>
 800b5be:	7dbb      	ldrb	r3, [r7, #22]
 800b5c0:	4a83      	ldr	r2, [pc, #524]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b5c2:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d013      	beq.n	800b5fc <MCU_ProcessCellDetail+0xb8>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800b5d4:	4b7b      	ldr	r3, [pc, #492]	@ (800b7c4 <MCU_ProcessCellDetail+0x280>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800b5dc:	7dbb      	ldrb	r3, [r7, #22]
 800b5de:	497c      	ldr	r1, [pc, #496]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b5e0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b5e4:	fb00 f303 	mul.w	r3, r0, r3
 800b5e8:	440b      	add	r3, r1
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d103      	bne.n	800b5fe <MCU_ProcessCellDetail+0xba>
      moduleIndex = index; // module is already registered, save the index
 800b5f6:	7dbb      	ldrb	r3, [r7, #22]
 800b5f8:	75fb      	strb	r3, [r7, #23]
 800b5fa:	e000      	b.n	800b5fe <MCU_ProcessCellDetail+0xba>
    if(!module[index].isRegistered || module[index].uniqueId == 0) continue;
 800b5fc:	bf00      	nop
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b5fe:	7dbb      	ldrb	r3, [r7, #22]
 800b600:	3301      	adds	r3, #1
 800b602:	75bb      	strb	r3, [r7, #22]
 800b604:	7dbb      	ldrb	r3, [r7, #22]
 800b606:	2b1f      	cmp	r3, #31
 800b608:	d9ca      	bls.n	800b5a0 <MCU_ProcessCellDetail+0x5c>
  }
  
  if (moduleIndex == MAX_MODULES_PER_PACK){
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b20      	cmp	r3, #32
 800b60e:	d10e      	bne.n	800b62e <MCU_ProcessCellDetail+0xea>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessCellDetail()"); serialOut(tempBuffer);}
 800b610:	4b6b      	ldr	r3, [pc, #428]	@ (800b7c0 <MCU_ProcessCellDetail+0x27c>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	f003 0309 	and.w	r3, r3, #9
 800b618:	2b09      	cmp	r3, #9
 800b61a:	f040 80cb 	bne.w	800b7b4 <MCU_ProcessCellDetail+0x270>
 800b61e:	496d      	ldr	r1, [pc, #436]	@ (800b7d4 <MCU_ProcessCellDetail+0x290>)
 800b620:	486a      	ldr	r0, [pc, #424]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b622:	f009 fd53 	bl	80150cc <siprintf>
 800b626:	4869      	ldr	r0, [pc, #420]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b628:	f7fa f808 	bl	800563c <serialOut>
 800b62c:	e0c3      	b.n	800b7b6 <MCU_ProcessCellDetail+0x272>
    return;
  }
  
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	7978      	ldrb	r0, [r7, #5]
 800b632:	4a67      	ldr	r2, [pc, #412]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b634:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b638:	fb01 f303 	mul.w	r3, r1, r3
 800b63c:	4413      	add	r3, r2
 800b63e:	332d      	adds	r3, #45	@ 0x2d
 800b640:	4602      	mov	r2, r0
 800b642:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800b644:	7dfa      	ldrb	r2, [r7, #23]
 800b646:	793b      	ldrb	r3, [r7, #4]
 800b648:	4618      	mov	r0, r3
 800b64a:	7abc      	ldrb	r4, [r7, #10]
 800b64c:	4960      	ldr	r1, [pc, #384]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b64e:	4603      	mov	r3, r0
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	4403      	add	r3, r0
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b65a:	fb00 f202 	mul.w	r2, r0, r2
 800b65e:	4413      	add	r3, r2
 800b660:	440b      	add	r3, r1
 800b662:	3332      	adds	r3, #50	@ 0x32
 800b664:	4622      	mov	r2, r4
 800b666:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800b668:	7dfa      	ldrb	r2, [r7, #23]
 800b66a:	793b      	ldrb	r3, [r7, #4]
 800b66c:	4618      	mov	r0, r3
 800b66e:	7afc      	ldrb	r4, [r7, #11]
 800b670:	4957      	ldr	r1, [pc, #348]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b672:	4603      	mov	r3, r0
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4403      	add	r3, r0
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b67e:	fb00 f202 	mul.w	r2, r0, r2
 800b682:	4413      	add	r3, r2
 800b684:	440b      	add	r3, r1
 800b686:	3333      	adds	r3, #51	@ 0x33
 800b688:	4622      	mov	r2, r4
 800b68a:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800b68c:	7dfa      	ldrb	r2, [r7, #23]
 800b68e:	793b      	ldrb	r3, [r7, #4]
 800b690:	4618      	mov	r0, r3
 800b692:	88fc      	ldrh	r4, [r7, #6]
 800b694:	494e      	ldr	r1, [pc, #312]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b696:	4603      	mov	r3, r0
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	4403      	add	r3, r0
 800b69c:	005b      	lsls	r3, r3, #1
 800b69e:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6a2:	fb00 f202 	mul.w	r2, r0, r2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	3330      	adds	r3, #48	@ 0x30
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800b6b0:	7dfa      	ldrb	r2, [r7, #23]
 800b6b2:	793b      	ldrb	r3, [r7, #4]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	893c      	ldrh	r4, [r7, #8]
 800b6b8:	4945      	ldr	r1, [pc, #276]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4403      	add	r3, r0
 800b6c0:	005b      	lsls	r3, r3, #1
 800b6c2:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6c6:	fb00 f202 	mul.w	r2, r0, r2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	440b      	add	r3, r1
 800b6ce:	332e      	adds	r3, #46	@ 0x2e
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800b6d4:	4b40      	ldr	r3, [pc, #256]	@ (800b7d8 <MCU_ProcessCellDetail+0x294>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b6dc:	493c      	ldr	r1, [pc, #240]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b6de:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6e2:	fb00 f303 	mul.w	r3, r0, r3
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b6ec:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	4a3a      	ldr	r2, [pc, #232]	@ (800b7dc <MCU_ProcessCellDetail+0x298>)
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	4936      	ldr	r1, [pc, #216]	@ (800b7d0 <MCU_ProcessCellDetail+0x28c>)
 800b6f6:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b6fa:	fb00 f303 	mul.w	r3, r0, r3
 800b6fe:	440b      	add	r3, r1
 800b700:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b704:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800b706:	793b      	ldrb	r3, [r7, #4]
 800b708:	461a      	mov	r2, r3
 800b70a:	797b      	ldrb	r3, [r7, #5]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	429a      	cmp	r2, r3
 800b710:	da51      	bge.n	800b7b6 <MCU_ProcessCellDetail+0x272>

    detailRequest.cellId = cellDetail.cellId +1;
 800b712:	793b      	ldrb	r3, [r7, #4]
 800b714:	3301      	adds	r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800b71a:	4b31      	ldr	r3, [pc, #196]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800b720:	4b2f      	ldr	r3, [pc, #188]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b722:	2200      	movs	r2, #0
 800b724:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800b726:	4b2e      	ldr	r3, [pc, #184]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b728:	2200      	movs	r2, #0
 800b72a:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800b72c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e4 <MCU_ProcessCellDetail+0x2a0>)
 800b72e:	461a      	mov	r2, r3
 800b730:	f107 030c 	add.w	r3, r7, #12
 800b734:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b738:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800b73c:	4a28      	ldr	r2, [pc, #160]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b73e:	8813      	ldrh	r3, [r2, #0]
 800b740:	f240 5115 	movw	r1, #1301	@ 0x515
 800b744:	f361 030a 	bfi	r3, r1, #0, #11
 800b748:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800b74a:	4b1e      	ldr	r3, [pc, #120]	@ (800b7c4 <MCU_ProcessCellDetail+0x280>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800b752:	4a23      	ldr	r2, [pc, #140]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b754:	6813      	ldr	r3, [r2, #0]
 800b756:	f361 23dc 	bfi	r3, r1, #11, #18
 800b75a:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b75c:	4a20      	ldr	r2, [pc, #128]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b75e:	7913      	ldrb	r3, [r2, #4]
 800b760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b764:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800b766:	4a1e      	ldr	r2, [pc, #120]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b768:	7913      	ldrb	r3, [r2, #4]
 800b76a:	2102      	movs	r1, #2
 800b76c:	f361 0303 	bfi	r3, r1, #0, #4
 800b770:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b772:	4a1b      	ldr	r2, [pc, #108]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b774:	7913      	ldrb	r3, [r2, #4]
 800b776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b77a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b77c:	4a18      	ldr	r2, [pc, #96]	@ (800b7e0 <MCU_ProcessCellDetail+0x29c>)
 800b77e:	7913      	ldrb	r3, [r2, #4]
 800b780:	f043 0310 	orr.w	r3, r3, #16
 800b784:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800b786:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <MCU_ProcessCellDetail+0x27c>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	f003 0308 	and.w	r3, r3, #8
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00c      	beq.n	800b7ac <MCU_ProcessCellDetail+0x268>
 800b792:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c4 <MCU_ProcessCellDetail+0x280>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b79a:	461a      	mov	r2, r3
 800b79c:	7b7b      	ldrb	r3, [r7, #13]
 800b79e:	4912      	ldr	r1, [pc, #72]	@ (800b7e8 <MCU_ProcessCellDetail+0x2a4>)
 800b7a0:	480a      	ldr	r0, [pc, #40]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b7a2:	f009 fc93 	bl	80150cc <siprintf>
 800b7a6:	4809      	ldr	r0, [pc, #36]	@ (800b7cc <MCU_ProcessCellDetail+0x288>)
 800b7a8:	f7f9 ff48 	bl	800563c <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	f7fd fc0d 	bl	8008fcc <MCU_TransmitMessageQueue>
 800b7b2:	e000      	b.n	800b7b6 <MCU_ProcessCellDetail+0x272>
    return;
 800b7b4:	bf00      	nop
  }
}
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800b7bc:	20000da8 	.word	0x20000da8
 800b7c0:	2000000c 	.word	0x2000000c
 800b7c4:	20000d9c 	.word	0x20000d9c
 800b7c8:	0801a134 	.word	0x0801a134
 800b7cc:	20000b5c 	.word	0x20000b5c
 800b7d0:	20000dec 	.word	0x20000dec
 800b7d4:	0801a190 	.word	0x0801a190
 800b7d8:	200005d0 	.word	0x200005d0
 800b7dc:	20000d20 	.word	0x20000d20
 800b7e0:	20000d40 	.word	0x20000d40
 800b7e4:	20000d4c 	.word	0x20000d4c
 800b7e8:	0801a1cc 	.word	0x0801a1cc

0800b7ec <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = MAX_MODULES_PER_PACK;
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73bb      	strb	r3, [r7, #14]
 800b7fe:	e01c      	b.n	800b83a <MCU_ModuleIndexFromId+0x4e>
     if(moduleId == module[index].moduleId && module[index].isRegistered)
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	4a15      	ldr	r2, [pc, #84]	@ (800b858 <MCU_ModuleIndexFromId+0x6c>)
 800b804:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b808:	fb01 f303 	mul.w	r3, r1, r3
 800b80c:	4413      	add	r3, r2
 800b80e:	3308      	adds	r3, #8
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	79fa      	ldrb	r2, [r7, #7]
 800b814:	429a      	cmp	r2, r3
 800b816:	d10d      	bne.n	800b834 <MCU_ModuleIndexFromId+0x48>
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	4a0f      	ldr	r2, [pc, #60]	@ (800b858 <MCU_ModuleIndexFromId+0x6c>)
 800b81c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b820:	fb01 f303 	mul.w	r3, r1, r3
 800b824:	4413      	add	r3, r2
 800b826:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <MCU_ModuleIndexFromId+0x48>
       moduleIndex = index; // found it - save the index
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	3301      	adds	r3, #1
 800b838:	73bb      	strb	r3, [r7, #14]
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
 800b83c:	2b1f      	cmp	r3, #31
 800b83e:	d9df      	bls.n	800b800 <MCU_ModuleIndexFromId+0x14>
     }
   if (moduleIndex != MAX_MODULES_PER_PACK) return moduleIndex;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b20      	cmp	r3, #32
 800b844:	d001      	beq.n	800b84a <MCU_ModuleIndexFromId+0x5e>
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	e000      	b.n	800b84c <MCU_ModuleIndexFromId+0x60>
   else return MAX_MODULES_PER_PACK; // unregistered module
 800b84a:	2320      	movs	r3, #32

}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	20000dec 	.word	0x20000dec

0800b85c <MCU_UpdateModuleCounts>:

/***************************************************************************************************************
*     M C U _ U p d a t e M o d u l e C o u n t s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateModuleCounts(void)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
    pack.totalModules = 0;
 800b862:	4b21      	ldr	r3, [pc, #132]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b864:	2200      	movs	r2, #0
 800b866:	765a      	strb	r2, [r3, #25]
    pack.activeModules = 0;
 800b868:	4b1f      	ldr	r3, [pc, #124]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	75da      	strb	r2, [r3, #23]
    pack.moduleCount = 0;  // Keep for compatibility
 800b86e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b870:	2200      	movs	r2, #0
 800b872:	751a      	strb	r2, [r3, #20]
    
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 800b874:	2300      	movs	r3, #0
 800b876:	607b      	str	r3, [r7, #4]
 800b878:	e02b      	b.n	800b8d2 <MCU_UpdateModuleCounts+0x76>
        if(module[i].uniqueId != 0){
 800b87a:	4a1c      	ldr	r2, [pc, #112]	@ (800b8ec <MCU_UpdateModuleCounts+0x90>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	4413      	add	r3, r2
 800b888:	3304      	adds	r3, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01d      	beq.n	800b8cc <MCU_UpdateModuleCounts+0x70>
            pack.totalModules++;
 800b890:	4b15      	ldr	r3, [pc, #84]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b892:	7e5b      	ldrb	r3, [r3, #25]
 800b894:	3301      	adds	r3, #1
 800b896:	b2da      	uxtb	r2, r3
 800b898:	4b13      	ldr	r3, [pc, #76]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b89a:	765a      	strb	r2, [r3, #25]
            if(module[i].isRegistered){
 800b89c:	4a13      	ldr	r2, [pc, #76]	@ (800b8ec <MCU_UpdateModuleCounts+0x90>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b8a4:	fb01 f303 	mul.w	r3, r1, r3
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f203 43c5 	addw	r3, r3, #1221	@ 0x4c5
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <MCU_UpdateModuleCounts+0x70>
                pack.activeModules++;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b8b6:	7ddb      	ldrb	r3, [r3, #23]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b8be:	75da      	strb	r2, [r3, #23]
                pack.moduleCount++;  // Keep for compatibility
 800b8c0:	4b09      	ldr	r3, [pc, #36]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b8c2:	7d1b      	ldrb	r3, [r3, #20]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	4b07      	ldr	r3, [pc, #28]	@ (800b8e8 <MCU_UpdateModuleCounts+0x8c>)
 800b8ca:	751a      	strb	r2, [r3, #20]
    for(int i = 0; i < MAX_MODULES_PER_PACK; i++){
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	607b      	str	r3, [r7, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b1f      	cmp	r3, #31
 800b8d6:	ddd0      	ble.n	800b87a <MCU_UpdateModuleCounts+0x1e>
            }
        }
    }
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	2000a6ec 	.word	0x2000a6ec
 800b8ec:	20000dec 	.word	0x20000dec

0800b8f0 <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b8fa:	4b31      	ldr	r3, [pc, #196]	@ (800b9c0 <MCU_TicksSinceLastMessage+0xd0>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b900:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b902:	4b30      	ldr	r3, [pc, #192]	@ (800b9c4 <MCU_TicksSinceLastMessage+0xd4>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7ff ff6e 	bl	800b7ec <MCU_ModuleIndexFromId>
 800b910:	4603      	mov	r3, r0
 800b912:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex < MAX_MODULES_PER_PACK){
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	2b1f      	cmp	r3, #31
 800b918:	d840      	bhi.n	800b99c <MCU_TicksSinceLastMessage+0xac>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	4a2a      	ldr	r2, [pc, #168]	@ (800b9c8 <MCU_TicksSinceLastMessage+0xd8>)
 800b91e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b922:	fb01 f303 	mul.w	r3, r1, r3
 800b926:	4413      	add	r3, r2
 800b928:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	429a      	cmp	r2, r3
 800b932:	d10d      	bne.n	800b950 <MCU_TicksSinceLastMessage+0x60>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800b934:	7afb      	ldrb	r3, [r7, #11]
 800b936:	4a24      	ldr	r2, [pc, #144]	@ (800b9c8 <MCU_TicksSinceLastMessage+0xd8>)
 800b938:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800b93c:	fb01 f303 	mul.w	r3, r1, r3
 800b940:	4413      	add	r3, r2
 800b942:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	617b      	str	r3, [r7, #20]
 800b94e:	e023      	b.n	800b998 <MCU_TicksSinceLastMessage+0xa8>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800b950:	4b1b      	ldr	r3, [pc, #108]	@ (800b9c0 <MCU_TicksSinceLastMessage+0xd0>)
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	491c      	ldr	r1, [pc, #112]	@ (800b9c8 <MCU_TicksSinceLastMessage+0xd8>)
 800b958:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800b95c:	fb00 f303 	mul.w	r3, r0, r3
 800b960:	440b      	add	r3, r1
 800b962:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	1ad2      	subs	r2, r2, r3
 800b96a:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <MCU_TicksSinceLastMessage+0xd0>)
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	3301      	adds	r3, #1
 800b970:	7af9      	ldrb	r1, [r7, #11]
 800b972:	4815      	ldr	r0, [pc, #84]	@ (800b9c8 <MCU_TicksSinceLastMessage+0xd8>)
 800b974:	f44f 6499 	mov.w	r4, #1224	@ 0x4c8
 800b978:	fb04 f101 	mul.w	r1, r4, r1
 800b97c:	4401      	add	r1, r0
 800b97e:	f201 41b4 	addw	r1, r1, #1204	@ 0x4b4
 800b982:	6809      	ldr	r1, [r1, #0]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	1a41      	subs	r1, r0, r1
 800b988:	3901      	subs	r1, #1
 800b98a:	fb01 f303 	mul.w	r3, r1, r3
 800b98e:	441a      	add	r2, r3
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	4413      	add	r3, r2
 800b994:	3301      	adds	r3, #1
 800b996:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	e00d      	b.n	800b9b8 <MCU_TicksSinceLastMessage+0xc8>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800b99c:	4b0b      	ldr	r3, [pc, #44]	@ (800b9cc <MCU_TicksSinceLastMessage+0xdc>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	f003 0309 	and.w	r3, r3, #9
 800b9a4:	2b09      	cmp	r3, #9
 800b9a6:	d106      	bne.n	800b9b6 <MCU_TicksSinceLastMessage+0xc6>
 800b9a8:	4909      	ldr	r1, [pc, #36]	@ (800b9d0 <MCU_TicksSinceLastMessage+0xe0>)
 800b9aa:	480a      	ldr	r0, [pc, #40]	@ (800b9d4 <MCU_TicksSinceLastMessage+0xe4>)
 800b9ac:	f009 fb8e 	bl	80150cc <siprintf>
 800b9b0:	4808      	ldr	r0, [pc, #32]	@ (800b9d4 <MCU_TicksSinceLastMessage+0xe4>)
 800b9b2:	f7f9 fe43 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800b9b6:	2300      	movs	r3, #0
  }
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	371c      	adds	r7, #28
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd90      	pop	{r4, r7, pc}
 800b9c0:	200005d0 	.word	0x200005d0
 800b9c4:	20000d20 	.word	0x20000d20
 800b9c8:	20000dec 	.word	0x20000dec
 800b9cc:	2000000c 	.word	0x2000000c
 800b9d0:	0801a1fc 	.word	0x0801a1fc
 800b9d4:	20000b5c 	.word	0x20000b5c

0800b9d8 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800b9d8:	b590      	push	{r4, r7, lr}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b9e2:	4b31      	ldr	r3, [pc, #196]	@ (800baa8 <MCU_TicksSinceLastStateTx+0xd0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800b9ea:	4b30      	ldr	r3, [pc, #192]	@ (800baac <MCU_TicksSinceLastStateTx+0xd4>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff fefa 	bl	800b7ec <MCU_ModuleIndexFromId>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex < MAX_MODULES_PER_PACK){
 800b9fc:	7afb      	ldrb	r3, [r7, #11]
 800b9fe:	2b1f      	cmp	r3, #31
 800ba00:	d840      	bhi.n	800ba84 <MCU_TicksSinceLastStateTx+0xac>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	4a2a      	ldr	r2, [pc, #168]	@ (800bab0 <MCU_TicksSinceLastStateTx+0xd8>)
 800ba06:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ba0a:	fb01 f303 	mul.w	r3, r1, r3
 800ba0e:	4413      	add	r3, r2
 800ba10:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d10d      	bne.n	800ba38 <MCU_TicksSinceLastStateTx+0x60>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800ba1c:	7afb      	ldrb	r3, [r7, #11]
 800ba1e:	4a24      	ldr	r2, [pc, #144]	@ (800bab0 <MCU_TicksSinceLastStateTx+0xd8>)
 800ba20:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e023      	b.n	800ba80 <MCU_TicksSinceLastStateTx+0xa8>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800ba38:	4b1b      	ldr	r3, [pc, #108]	@ (800baa8 <MCU_TicksSinceLastStateTx+0xd0>)
 800ba3a:	68da      	ldr	r2, [r3, #12]
 800ba3c:	7afb      	ldrb	r3, [r7, #11]
 800ba3e:	491c      	ldr	r1, [pc, #112]	@ (800bab0 <MCU_TicksSinceLastStateTx+0xd8>)
 800ba40:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800ba44:	fb00 f303 	mul.w	r3, r0, r3
 800ba48:	440b      	add	r3, r1
 800ba4a:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	1ad2      	subs	r2, r2, r3
 800ba52:	4b15      	ldr	r3, [pc, #84]	@ (800baa8 <MCU_TicksSinceLastStateTx+0xd0>)
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	3301      	adds	r3, #1
 800ba58:	7af9      	ldrb	r1, [r7, #11]
 800ba5a:	4815      	ldr	r0, [pc, #84]	@ (800bab0 <MCU_TicksSinceLastStateTx+0xd8>)
 800ba5c:	f44f 6499 	mov.w	r4, #1224	@ 0x4c8
 800ba60:	fb04 f101 	mul.w	r1, r4, r1
 800ba64:	4401      	add	r1, r0
 800ba66:	f201 41bc 	addw	r1, r1, #1212	@ 0x4bc
 800ba6a:	6809      	ldr	r1, [r1, #0]
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	1a41      	subs	r1, r0, r1
 800ba70:	3901      	subs	r1, #1
 800ba72:	fb01 f303 	mul.w	r3, r1, r3
 800ba76:	441a      	add	r2, r3
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	e00d      	b.n	800baa0 <MCU_TicksSinceLastStateTx+0xc8>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800ba84:	4b0b      	ldr	r3, [pc, #44]	@ (800bab4 <MCU_TicksSinceLastStateTx+0xdc>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	f003 0309 	and.w	r3, r3, #9
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d106      	bne.n	800ba9e <MCU_TicksSinceLastStateTx+0xc6>
 800ba90:	4909      	ldr	r1, [pc, #36]	@ (800bab8 <MCU_TicksSinceLastStateTx+0xe0>)
 800ba92:	480a      	ldr	r0, [pc, #40]	@ (800babc <MCU_TicksSinceLastStateTx+0xe4>)
 800ba94:	f009 fb1a 	bl	80150cc <siprintf>
 800ba98:	4808      	ldr	r0, [pc, #32]	@ (800babc <MCU_TicksSinceLastStateTx+0xe4>)
 800ba9a:	f7f9 fdcf 	bl	800563c <serialOut>
    return 0; // TODO Handle this error
 800ba9e:	2300      	movs	r3, #0
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	371c      	adds	r7, #28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd90      	pop	{r4, r7, pc}
 800baa8:	200005d0 	.word	0x200005d0
 800baac:	20000d20 	.word	0x20000d20
 800bab0:	20000dec 	.word	0x20000dec
 800bab4:	2000000c 	.word	0x2000000c
 800bab8:	0801a23c 	.word	0x0801a23c
 800babc:	20000b5c 	.word	0x20000b5c

0800bac0 <MCU_ElapsedTicks>:

/***************************************************************************************************************
*     M C U _ E l a p s e d T i c k s                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_ElapsedTicks(lastContact* pLastContact)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800bac8:	4b16      	ldr	r3, [pc, #88]	@ (800bb24 <MCU_ElapsedTicks+0x64>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bace:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800bad0:	4b15      	ldr	r3, [pc, #84]	@ (800bb28 <MCU_ElapsedTicks+0x68>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	60fb      	str	r3, [r7, #12]

  if ((overFlows - pLastContact->overflows) == 0){
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	429a      	cmp	r2, r3
 800bade:	d105      	bne.n	800baec <MCU_ElapsedTicks+0x2c>
    elapsedTicks = timerCNT - pLastContact->ticks;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e013      	b.n	800bb14 <MCU_ElapsedTicks+0x54>
  } else {
    //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pLastContact->ticks) + ( (htim1.Init.Period +1) * (overFlows - (pLastContact->overflows +1))) + (timerCNT);
 800baec:	4b0d      	ldr	r3, [pc, #52]	@ (800bb24 <MCU_ElapsedTicks+0x64>)
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <MCU_ElapsedTicks+0x64>)
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	3301      	adds	r3, #1
 800bafc:	6879      	ldr	r1, [r7, #4]
 800bafe:	6849      	ldr	r1, [r1, #4]
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	1a41      	subs	r1, r0, r1
 800bb04:	3901      	subs	r1, #1
 800bb06:	fb01 f303 	mul.w	r3, r1, r3
 800bb0a:	441a      	add	r2, r3
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4413      	add	r3, r2
 800bb10:	3301      	adds	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
  }
  return elapsedTicks;
 800bb14:	697b      	ldr	r3, [r7, #20]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	200005d0 	.word	0x200005d0
 800bb28:	20000d20 	.word	0x20000d20

0800bb2c <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73bb      	strb	r3, [r7, #14]
  Nop();
 800bb3a:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	73fb      	strb	r3, [r7, #15]
 800bb40:	e05d      	b.n	800bbfe <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800bb42:	4b34      	ldr	r3, [pc, #208]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	701a      	strb	r2, [r3, #0]
 800bb48:	e016      	b.n	800bb78 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800bb4a:	f008 fd69 	bl	8014620 <rand>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	4a30      	ldr	r2, [pc, #192]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb54:	7812      	ldrb	r2, [r2, #0]
 800bb56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5a:	b2d9      	uxtb	r1, r3
 800bb5c:	4b2e      	ldr	r3, [pc, #184]	@ (800bc18 <CAN_TestRegisterAccess+0xec>)
 800bb5e:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800bb60:	4b2c      	ldr	r3, [pc, #176]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	4b2d      	ldr	r3, [pc, #180]	@ (800bc1c <CAN_TestRegisterAccess+0xf0>)
 800bb68:	21ff      	movs	r1, #255	@ 0xff
 800bb6a:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800bb6c:	4b29      	ldr	r3, [pc, #164]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b27      	ldr	r3, [pc, #156]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	4b26      	ldr	r3, [pc, #152]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	7bfa      	ldrb	r2, [r7, #15]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d8e3      	bhi.n	800bb4a <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800bb82:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	79f8      	ldrb	r0, [r7, #7]
 800bb8a:	4a23      	ldr	r2, [pc, #140]	@ (800bc18 <CAN_TestRegisterAccess+0xec>)
 800bb8c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800bb90:	f7f5 ff16 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	79f8      	ldrb	r0, [r7, #7]
 800bb9a:	4a20      	ldr	r2, [pc, #128]	@ (800bc1c <CAN_TestRegisterAccess+0xf0>)
 800bb9c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800bba0:	f7f5 fe5c 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800bba8:	4b1a      	ldr	r3, [pc, #104]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	e01e      	b.n	800bbee <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800bbb0:	4b18      	ldr	r3, [pc, #96]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b18      	ldr	r3, [pc, #96]	@ (800bc18 <CAN_TestRegisterAccess+0xec>)
 800bbb8:	5c9a      	ldrb	r2, [r3, r2]
 800bbba:	4b16      	ldr	r3, [pc, #88]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4b16      	ldr	r3, [pc, #88]	@ (800bc1c <CAN_TestRegisterAccess+0xf0>)
 800bbc2:	5c5b      	ldrb	r3, [r3, r1]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	bf0c      	ite	eq
 800bbc8:	2301      	moveq	r3, #1
 800bbca:	2300      	movne	r3, #0
 800bbcc:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	f083 0301 	eor.w	r3, r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <CAN_TestRegisterAccess+0xb6>
        Nop();
 800bbda:	bf00      	nop
        Nop();
 800bbdc:	bf00      	nop

        // Data mismatch
        return false;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e013      	b.n	800bc0a <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800bbe2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	4b0a      	ldr	r3, [pc, #40]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	4b09      	ldr	r3, [pc, #36]	@ (800bc14 <CAN_TestRegisterAccess+0xe8>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	7bfa      	ldrb	r2, [r7, #15]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d8db      	bhi.n	800bbb0 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	73fb      	strb	r3, [r7, #15]
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	2b40      	cmp	r3, #64	@ 0x40
 800bc02:	d99e      	bls.n	800bb42 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800bc04:	bf00      	nop
  Nop();
 800bc06:	bf00      	nop
  return true;
 800bc08:	2301      	movs	r3, #1
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20000de8 	.word	0x20000de8
 800bc18:	20000d4c 	.word	0x20000d4c
 800bc1c:	20000da8 	.word	0x20000da8

0800bc20 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73bb      	strb	r3, [r7, #14]
  Nop();
 800bc2e:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800bc30:	2304      	movs	r3, #4
 800bc32:	73fb      	strb	r3, [r7, #15]
 800bc34:	e05b      	b.n	800bcee <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800bc36:	4b32      	ldr	r3, [pc, #200]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e014      	b.n	800bc68 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800bc3e:	f008 fcef 	bl	8014620 <rand>
 800bc42:	4601      	mov	r1, r0
 800bc44:	4b2e      	ldr	r3, [pc, #184]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	b2c9      	uxtb	r1, r1
 800bc4c:	4b2d      	ldr	r3, [pc, #180]	@ (800bd04 <CAN_TestRamAccess+0xe4>)
 800bc4e:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800bc50:	4b2b      	ldr	r3, [pc, #172]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	461a      	mov	r2, r3
 800bc56:	4b2c      	ldr	r3, [pc, #176]	@ (800bd08 <CAN_TestRamAccess+0xe8>)
 800bc58:	21ff      	movs	r1, #255	@ 0xff
 800bc5a:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800bc5c:	4b28      	ldr	r3, [pc, #160]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	4b26      	ldr	r3, [pc, #152]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	4b25      	ldr	r3, [pc, #148]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	7bfa      	ldrb	r2, [r7, #15]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d8e5      	bhi.n	800bc3e <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800bc72:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	79f8      	ldrb	r0, [r7, #7]
 800bc7a:	4a22      	ldr	r2, [pc, #136]	@ (800bd04 <CAN_TestRamAccess+0xe4>)
 800bc7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc80:	f7f5 fe9e 	bl	80019c0 <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	79f8      	ldrb	r0, [r7, #7]
 800bc8a:	4a1f      	ldr	r2, [pc, #124]	@ (800bd08 <CAN_TestRamAccess+0xe8>)
 800bc8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc90:	f7f5 fde4 	bl	800185c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800bc98:	4b19      	ldr	r3, [pc, #100]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e01e      	b.n	800bcde <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800bca0:	4b17      	ldr	r3, [pc, #92]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	461a      	mov	r2, r3
 800bca6:	4b17      	ldr	r3, [pc, #92]	@ (800bd04 <CAN_TestRamAccess+0xe4>)
 800bca8:	5c9a      	ldrb	r2, [r3, r2]
 800bcaa:	4b15      	ldr	r3, [pc, #84]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4b15      	ldr	r3, [pc, #84]	@ (800bd08 <CAN_TestRamAccess+0xe8>)
 800bcb2:	5c5b      	ldrb	r3, [r3, r1]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	bf0c      	ite	eq
 800bcb8:	2301      	moveq	r3, #1
 800bcba:	2300      	movne	r3, #0
 800bcbc:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	f083 0301 	eor.w	r3, r3, #1
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <CAN_TestRamAccess+0xb2>
        Nop();
 800bcca:	bf00      	nop
        Nop();
 800bccc:	bf00      	nop

        // Data mismatch
        return false;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e011      	b.n	800bcf6 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	4b09      	ldr	r3, [pc, #36]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bcdc:	701a      	strb	r2, [r3, #0]
 800bcde:	4b08      	ldr	r3, [pc, #32]	@ (800bd00 <CAN_TestRamAccess+0xe0>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	7bfa      	ldrb	r2, [r7, #15]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d8db      	bhi.n	800bca0 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	3304      	adds	r3, #4
 800bcec:	73fb      	strb	r3, [r7, #15]
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	2b40      	cmp	r3, #64	@ 0x40
 800bcf2:	d9a0      	bls.n	800bc36 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800bcf4:	2301      	movs	r3, #1
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000de8 	.word	0x20000de8
 800bd04:	20000d4c 	.word	0x20000d4c
 800bd08:	20000da8 	.word	0x20000da8

0800bd0c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800bd10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd24:	bf00      	nop
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <LL_AHB2_GRP1_EnableClock>:
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b085      	sub	sp, #20
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800bd36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800bd46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd52:	68fb      	ldr	r3, [r7, #12]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bd68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bd78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4013      	ands	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd84:	68fb      	ldr	r3, [r7, #12]
}
 800bd86:	bf00      	nop
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b085      	sub	sp, #20
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bd9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bda0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bdaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	bf00      	nop
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800bdcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800bddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bde0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4013      	ands	r3, r2
 800bde6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	bf00      	nop
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b085      	sub	sp, #20
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800bdfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800be0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4013      	ands	r3, r2
 800be18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be1a:	68fb      	ldr	r3, [r7, #12]
}
 800be1c:	bf00      	nop
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800be2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800be30:	f7ff ff96 	bl	800bd60 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800be34:	2200      	movs	r2, #0
 800be36:	2100      	movs	r1, #0
 800be38:	202e      	movs	r0, #46	@ 0x2e
 800be3a:	f002 fd50 	bl	800e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800be3e:	202e      	movs	r0, #46	@ 0x2e
 800be40:	f002 fd67 	bl	800e912 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800be44:	bf00      	nop
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b09c      	sub	sp, #112	@ 0x70
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	605a      	str	r2, [r3, #4]
 800be5a:	609a      	str	r2, [r3, #8]
 800be5c:	60da      	str	r2, [r3, #12]
 800be5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be60:	f107 030c 	add.w	r3, r7, #12
 800be64:	2250      	movs	r2, #80	@ 0x50
 800be66:	2100      	movs	r1, #0
 800be68:	4618      	mov	r0, r3
 800be6a:	f009 f996 	bl	801519a <memset>
  if(huart->Instance==LPUART1)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a2f      	ldr	r2, [pc, #188]	@ (800bf30 <HAL_UART_MspInit+0xe8>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d125      	bne.n	800bec4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800be78:	2302      	movs	r3, #2
 800be7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800be7c:	2300      	movs	r3, #0
 800be7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	4618      	mov	r0, r3
 800be86:	f004 fea4 	bl	8010bd2 <HAL_RCCEx_PeriphCLKConfig>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800be90:	f7fa ff88 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800be94:	2001      	movs	r0, #1
 800be96:	f7ff ff95 	bl	800bdc4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be9a:	2001      	movs	r0, #1
 800be9c:	f7ff ff47 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bea0:	230c      	movs	r3, #12
 800bea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea4:	2302      	movs	r3, #2
 800bea6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800beac:	2300      	movs	r3, #0
 800beae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800beb0:	2308      	movs	r3, #8
 800beb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beb4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800beb8:	4619      	mov	r1, r3
 800beba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bebe:	f003 f81b 	bl	800eef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bec2:	e031      	b.n	800bf28 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf34 <HAL_UART_MspInit+0xec>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d12c      	bne.n	800bf28 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bece:	2301      	movs	r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800bed2:	2302      	movs	r3, #2
 800bed4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	4618      	mov	r0, r3
 800bedc:	f004 fe79 	bl	8010bd2 <HAL_RCCEx_PeriphCLKConfig>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800bee6:	f7fa ff5d 	bl	8006da4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800beea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800beee:	f7ff ff82 	bl	800bdf6 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bef2:	2002      	movs	r0, #2
 800bef4:	f7ff ff1b 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bef8:	23c0      	movs	r3, #192	@ 0xc0
 800befa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800befc:	2302      	movs	r3, #2
 800befe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf04:	2300      	movs	r3, #0
 800bf06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bf08:	2307      	movs	r3, #7
 800bf0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf10:	4619      	mov	r1, r3
 800bf12:	4809      	ldr	r0, [pc, #36]	@ (800bf38 <HAL_UART_MspInit+0xf0>)
 800bf14:	f002 fff0 	bl	800eef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	2024      	movs	r0, #36	@ 0x24
 800bf1e:	f002 fcde 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800bf22:	2024      	movs	r0, #36	@ 0x24
 800bf24:	f002 fcf5 	bl	800e912 <HAL_NVIC_EnableIRQ>
}
 800bf28:	bf00      	nop
 800bf2a:	3770      	adds	r7, #112	@ 0x70
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40008000 	.word	0x40008000
 800bf34:	40013800 	.word	0x40013800
 800bf38:	48000400 	.word	0x48000400

0800bf3c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a05      	ldr	r2, [pc, #20]	@ (800bf60 <HAL_PKA_MspInit+0x24>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d103      	bne.n	800bf56 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800bf4e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bf52:	f7ff ff05 	bl	800bd60 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	58002000 	.word	0x58002000

0800bf64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b096      	sub	sp, #88	@ 0x58
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf6c:	f107 0308 	add.w	r3, r7, #8
 800bf70:	2250      	movs	r2, #80	@ 0x50
 800bf72:	2100      	movs	r1, #0
 800bf74:	4618      	mov	r0, r3
 800bf76:	f009 f910 	bl	801519a <memset>
  if(hrtc->Instance==RTC)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a0e      	ldr	r2, [pc, #56]	@ (800bfb8 <HAL_RTC_MspInit+0x54>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d115      	bne.n	800bfb0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bf84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf88:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bf8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf90:	f107 0308 	add.w	r3, r7, #8
 800bf94:	4618      	mov	r0, r3
 800bf96:	f004 fe1c 	bl	8010bd2 <HAL_RCCEx_PeriphCLKConfig>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800bfa0:	f7fa ff00 	bl	8006da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bfa4:	f7ff feb2 	bl	800bd0c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bfa8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800bfac:	f7ff fef1 	bl	800bd92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800bfb0:	bf00      	nop
 800bfb2:	3758      	adds	r7, #88	@ 0x58
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	40002800 	.word	0x40002800

0800bfbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	605a      	str	r2, [r3, #4]
 800bfce:	609a      	str	r2, [r3, #8]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a30      	ldr	r2, [pc, #192]	@ (800c09c <HAL_SPI_MspInit+0xe0>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d118      	bne.n	800c010 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bfde:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bfe2:	f7ff ff08 	bl	800bdf6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	f7ff fea1 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800bfec:	23c2      	movs	r3, #194	@ 0xc2
 800bfee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff0:	2302      	movs	r3, #2
 800bff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800bffc:	2305      	movs	r3, #5
 800bffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c000:	f107 030c 	add.w	r3, r7, #12
 800c004:	4619      	mov	r1, r3
 800c006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c00a:	f002 ff75 	bl	800eef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c00e:	e040      	b.n	800c092 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a22      	ldr	r2, [pc, #136]	@ (800c0a0 <HAL_SPI_MspInit+0xe4>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d13b      	bne.n	800c092 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c01a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c01e:	f7ff feb8 	bl	800bd92 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c022:	2004      	movs	r0, #4
 800c024:	f7ff fe83 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c028:	2001      	movs	r0, #1
 800c02a:	f7ff fe80 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c02e:	2302      	movs	r3, #2
 800c030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c032:	2302      	movs	r3, #2
 800c034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c03a:	2300      	movs	r3, #0
 800c03c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800c03e:	2303      	movs	r3, #3
 800c040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c042:	f107 030c 	add.w	r3, r7, #12
 800c046:	4619      	mov	r1, r3
 800c048:	4816      	ldr	r0, [pc, #88]	@ (800c0a4 <HAL_SPI_MspInit+0xe8>)
 800c04a:	f002 ff55 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c04e:	2304      	movs	r3, #4
 800c050:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c052:	2302      	movs	r3, #2
 800c054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c05a:	2300      	movs	r3, #0
 800c05c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c05e:	2305      	movs	r3, #5
 800c060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c062:	f107 030c 	add.w	r3, r7, #12
 800c066:	4619      	mov	r1, r3
 800c068:	480e      	ldr	r0, [pc, #56]	@ (800c0a4 <HAL_SPI_MspInit+0xe8>)
 800c06a:	f002 ff45 	bl	800eef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c06e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c074:	2302      	movs	r3, #2
 800c076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c07c:	2300      	movs	r3, #0
 800c07e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c080:	2305      	movs	r3, #5
 800c082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c084:	f107 030c 	add.w	r3, r7, #12
 800c088:	4619      	mov	r1, r3
 800c08a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c08e:	f002 ff33 	bl	800eef8 <HAL_GPIO_Init>
}
 800c092:	bf00      	nop
 800c094:	3720      	adds	r7, #32
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	40013000 	.word	0x40013000
 800c0a0:	40003800 	.word	0x40003800
 800c0a4:	48000800 	.word	0x48000800

0800c0a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a09      	ldr	r2, [pc, #36]	@ (800c0dc <HAL_TIM_Base_MspInit+0x34>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d10b      	bne.n	800c0d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c0ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c0be:	f7ff fe9a 	bl	800bdf6 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	2019      	movs	r0, #25
 800c0c8:	f002 fc09 	bl	800e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800c0cc:	2019      	movs	r0, #25
 800c0ce:	f002 fc20 	bl	800e912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	40012c00 	.word	0x40012c00

0800c0e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b09c      	sub	sp, #112	@ 0x70
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	605a      	str	r2, [r3, #4]
 800c0f2:	609a      	str	r2, [r3, #8]
 800c0f4:	60da      	str	r2, [r3, #12]
 800c0f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	2250      	movs	r2, #80	@ 0x50
 800c0fe:	2100      	movs	r1, #0
 800c100:	4618      	mov	r0, r3
 800c102:	f009 f84a 	bl	801519a <memset>
  if(hpcd->Instance==USB)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a1f      	ldr	r2, [pc, #124]	@ (800c188 <HAL_PCD_MspInit+0xa8>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d136      	bne.n	800c17e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c114:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800c116:	2306      	movs	r3, #6
 800c118:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800c11a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c11e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800c120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c124:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800c126:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c12a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800c12c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c130:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c132:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c136:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c138:	f107 030c 	add.w	r3, r7, #12
 800c13c:	4618      	mov	r0, r3
 800c13e:	f004 fd48 	bl	8010bd2 <HAL_RCCEx_PeriphCLKConfig>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800c148:	f7fa fe2c 	bl	8006da4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c14c:	2001      	movs	r0, #1
 800c14e:	f7ff fdee 	bl	800bd2e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c152:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c156:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c158:	2302      	movs	r3, #2
 800c15a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c15c:	2300      	movs	r3, #0
 800c15e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c160:	2300      	movs	r3, #0
 800c162:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800c164:	230a      	movs	r3, #10
 800c166:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c168:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c16c:	4619      	mov	r1, r3
 800c16e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c172:	f002 fec1 	bl	800eef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c176:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800c17a:	f7ff fe0a 	bl	800bd92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800c17e:	bf00      	nop
 800c180:	3770      	adds	r7, #112	@ 0x70
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	40006800 	.word	0x40006800

0800c18c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <NMI_Handler+0x4>

0800c194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c198:	bf00      	nop
 800c19a:	e7fd      	b.n	800c198 <HardFault_Handler+0x4>

0800c19c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1a0:	bf00      	nop
 800c1a2:	e7fd      	b.n	800c1a0 <MemManage_Handler+0x4>

0800c1a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1a8:	bf00      	nop
 800c1aa:	e7fd      	b.n	800c1a8 <BusFault_Handler+0x4>

0800c1ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1b0:	bf00      	nop
 800c1b2:	e7fd      	b.n	800c1b0 <UsageFault_Handler+0x4>

0800c1b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1b8:	bf00      	nop
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1c6:	bf00      	nop
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c1d4:	bf00      	nop
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c1e2:	f002 fa51 	bl	800e688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c1e6:	bf00      	nop
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c1f0:	4b08      	ldr	r3, [pc, #32]	@ (800c214 <EXTI0_IRQHandler+0x28>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d105      	bne.n	800c204 <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800c1f8:	4b07      	ldr	r3, [pc, #28]	@ (800c218 <EXTI0_IRQHandler+0x2c>)
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f003 f835 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800c202:	e004      	b.n	800c20e <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800c204:	4b05      	ldr	r3, [pc, #20]	@ (800c21c <EXTI0_IRQHandler+0x30>)
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	4618      	mov	r0, r3
 800c20a:	f003 f82f 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
}
 800c20e:	bf00      	nop
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000a50 	.word	0x20000a50
 800c218:	20000cce 	.word	0x20000cce
 800c21c:	20000c86 	.word	0x20000c86

0800c220 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800c224:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <EXTI1_IRQHandler+0x1c>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800c22c:	4b04      	ldr	r3, [pc, #16]	@ (800c240 <EXTI1_IRQHandler+0x20>)
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f003 f81b 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800c236:	bf00      	nop
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000a50 	.word	0x20000a50
 800c240:	20000cd6 	.word	0x20000cd6

0800c244 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800c248:	4b05      	ldr	r3, [pc, #20]	@ (800c260 <EXTI2_IRQHandler+0x1c>)
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800c250:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <EXTI2_IRQHandler+0x20>)
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	4618      	mov	r0, r3
 800c256:	f003 f809 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000a50 	.word	0x20000a50
 800c264:	20000cd6 	.word	0x20000cd6

0800c268 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c26c:	4b08      	ldr	r3, [pc, #32]	@ (800c290 <EXTI4_IRQHandler+0x28>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d105      	bne.n	800c280 <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800c274:	4b07      	ldr	r3, [pc, #28]	@ (800c294 <EXTI4_IRQHandler+0x2c>)
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	4618      	mov	r0, r3
 800c27a:	f002 fff7 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800c27e:	e004      	b.n	800c28a <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800c280:	4b05      	ldr	r3, [pc, #20]	@ (800c298 <EXTI4_IRQHandler+0x30>)
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f002 fff1 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
}
 800c28a:	bf00      	nop
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20000a50 	.word	0x20000a50
 800c294:	20000cc4 	.word	0x20000cc4
 800c298:	20000c9e 	.word	0x20000c9e

0800c29c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c2a0:	4b12      	ldr	r3, [pc, #72]	@ (800c2ec <EXTI9_5_IRQHandler+0x50>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800c2a8:	4b11      	ldr	r3, [pc, #68]	@ (800c2f0 <EXTI9_5_IRQHandler+0x54>)
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f002 ffdd 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800c2b2:	4b10      	ldr	r3, [pc, #64]	@ (800c2f4 <EXTI9_5_IRQHandler+0x58>)
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f002 ffd8 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c2bc:	e013      	b.n	800c2e6 <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800c2be:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f0 <EXTI9_5_IRQHandler+0x54>)
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f002 ffd2 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <EXTI9_5_IRQHandler+0x5c>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f002 ffcd 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <EXTI9_5_IRQHandler+0x60>)
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f002 ffc8 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800c2dc:	4b08      	ldr	r3, [pc, #32]	@ (800c300 <EXTI9_5_IRQHandler+0x64>)
 800c2de:	881b      	ldrh	r3, [r3, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f002 ffc3 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
}
 800c2e6:	bf00      	nop
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000a50 	.word	0x20000a50
 800c2f0:	20000c5e 	.word	0x20000c5e
 800c2f4:	20000c66 	.word	0x20000c66
 800c2f8:	20000c94 	.word	0x20000c94
 800c2fc:	20000ca6 	.word	0x20000ca6
 800c300:	20000cde 	.word	0x20000cde

0800c304 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c308:	4802      	ldr	r0, [pc, #8]	@ (800c314 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800c30a:	f005 ff93 	bl	8012234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800c30e:	bf00      	nop
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	200005d0 	.word	0x200005d0

0800c318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c31c:	4802      	ldr	r0, [pc, #8]	@ (800c328 <USART1_IRQHandler+0x10>)
 800c31e:	f007 f85b 	bl	80133d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c322:	bf00      	nop
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20000444 	.word	0x20000444

0800c32c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800c330:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a4 <EXTI15_10_IRQHandler+0x78>)
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d114      	bne.n	800c362 <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800c338:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a8 <EXTI15_10_IRQHandler+0x7c>)
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f002 ff95 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800c342:	4b1a      	ldr	r3, [pc, #104]	@ (800c3ac <EXTI15_10_IRQHandler+0x80>)
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f002 ff90 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800c34c:	4b18      	ldr	r3, [pc, #96]	@ (800c3b0 <EXTI15_10_IRQHandler+0x84>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f002 ff8b 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800c356:	4b17      	ldr	r3, [pc, #92]	@ (800c3b4 <EXTI15_10_IRQHandler+0x88>)
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f002 ff86 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c360:	e01d      	b.n	800c39e <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800c362:	4b11      	ldr	r3, [pc, #68]	@ (800c3a8 <EXTI15_10_IRQHandler+0x7c>)
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	4618      	mov	r0, r3
 800c368:	f002 ff80 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800c36c:	4b12      	ldr	r3, [pc, #72]	@ (800c3b8 <EXTI15_10_IRQHandler+0x8c>)
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	4618      	mov	r0, r3
 800c372:	f002 ff7b 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800c376:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ac <EXTI15_10_IRQHandler+0x80>)
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f002 ff76 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800c380:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b0 <EXTI15_10_IRQHandler+0x84>)
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f002 ff71 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800c38a:	4b0c      	ldr	r3, [pc, #48]	@ (800c3bc <EXTI15_10_IRQHandler+0x90>)
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	4618      	mov	r0, r3
 800c390:	f002 ff6c 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800c394:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c0 <EXTI15_10_IRQHandler+0x94>)
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f002 ff67 	bl	800f26c <HAL_GPIO_EXTI_IRQHandler>
}
 800c39e:	bf00      	nop
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000a50 	.word	0x20000a50
 800c3a8:	20000c56 	.word	0x20000c56
 800c3ac:	20000c74 	.word	0x20000c74
 800c3b0:	20000c7e 	.word	0x20000c7e
 800c3b4:	20000c86 	.word	0x20000c86
 800c3b8:	20000c66 	.word	0x20000c66
 800c3bc:	20000cc4 	.word	0x20000cc4
 800c3c0:	20000cce 	.word	0x20000cce

0800c3c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800c3c8:	f002 ff68 	bl	800f29c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800c3cc:	bf00      	nop
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	af00      	add	r7, sp, #0
  return 1;
 800c3d4:	2301      	movs	r3, #1
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <_kill>:

int _kill(int pid, int sig)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c3ea:	f009 fdab 	bl	8015f44 <__errno>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2216      	movs	r2, #22
 800c3f2:	601a      	str	r2, [r3, #0]
  return -1;
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_exit>:

void _exit (int status)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c408:	f04f 31ff 	mov.w	r1, #4294967295
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ffe7 	bl	800c3e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <_exit+0x12>

0800c416 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b086      	sub	sp, #24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c422:	2300      	movs	r3, #0
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e00a      	b.n	800c43e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c428:	f3af 8000 	nop.w
 800c42c:	4601      	mov	r1, r0
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	60ba      	str	r2, [r7, #8]
 800c434:	b2ca      	uxtb	r2, r1
 800c436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	3301      	adds	r3, #1
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	dbf0      	blt.n	800c428 <_read+0x12>
  }

  return len;
 800c446:	687b      	ldr	r3, [r7, #4]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c45c:	2300      	movs	r3, #0
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	e009      	b.n	800c476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	1c5a      	adds	r2, r3, #1
 800c466:	60ba      	str	r2, [r7, #8]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	3301      	adds	r3, #1
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	dbf1      	blt.n	800c462 <_write+0x12>
  }
  return len;
 800c47e:	687b      	ldr	r3, [r7, #4]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <_close>:

int _close(int file)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c490:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c4b0:	605a      	str	r2, [r3, #4]
  return 0;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <_isatty>:

int _isatty(int file)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c4c8:	2301      	movs	r3, #1
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c4f8:	4a14      	ldr	r2, [pc, #80]	@ (800c54c <_sbrk+0x5c>)
 800c4fa:	4b15      	ldr	r3, [pc, #84]	@ (800c550 <_sbrk+0x60>)
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c504:	4b13      	ldr	r3, [pc, #76]	@ (800c554 <_sbrk+0x64>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c50c:	4b11      	ldr	r3, [pc, #68]	@ (800c554 <_sbrk+0x64>)
 800c50e:	4a12      	ldr	r2, [pc, #72]	@ (800c558 <_sbrk+0x68>)
 800c510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c512:	4b10      	ldr	r3, [pc, #64]	@ (800c554 <_sbrk+0x64>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4413      	add	r3, r2
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d207      	bcs.n	800c530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c520:	f009 fd10 	bl	8015f44 <__errno>
 800c524:	4603      	mov	r3, r0
 800c526:	220c      	movs	r2, #12
 800c528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e009      	b.n	800c544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c530:	4b08      	ldr	r3, [pc, #32]	@ (800c554 <_sbrk+0x64>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c536:	4b07      	ldr	r3, [pc, #28]	@ (800c554 <_sbrk+0x64>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4413      	add	r3, r2
 800c53e:	4a05      	ldr	r2, [pc, #20]	@ (800c554 <_sbrk+0x64>)
 800c540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c542:	68fb      	ldr	r3, [r7, #12]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	20030000 	.word	0x20030000
 800c550:	00000400 	.word	0x00000400
 800c554:	2000a750 	.word	0x2000a750
 800c558:	2000a988 	.word	0x2000a988

0800c55c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800c560:	4b24      	ldr	r3, [pc, #144]	@ (800c5f4 <SystemInit+0x98>)
 800c562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c566:	4a23      	ldr	r2, [pc, #140]	@ (800c5f4 <SystemInit+0x98>)
 800c568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c56c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800c570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c57a:	f043 0301 	orr.w	r3, r3, #1
 800c57e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800c580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c584:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800c588:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800c58a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c594:	4b18      	ldr	r3, [pc, #96]	@ (800c5f8 <SystemInit+0x9c>)
 800c596:	4013      	ands	r3, r2
 800c598:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800c59a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5a6:	f023 0305 	bic.w	r3, r3, #5
 800c5aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800c5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5ba:	f023 0301 	bic.w	r3, r3, #1
 800c5be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800c5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c5fc <SystemInit+0xa0>)
 800c5c8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800c5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5ce:	4a0b      	ldr	r2, [pc, #44]	@ (800c5fc <SystemInit+0xa0>)
 800c5d0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c5d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	619a      	str	r2, [r3, #24]
}
 800c5ea:	bf00      	nop
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	e000ed00 	.word	0xe000ed00
 800c5f8:	faf6fefb 	.word	0xfaf6fefb
 800c5fc:	22041000 	.word	0x22041000

0800c600 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b08b      	sub	sp, #44	@ 0x2c
 800c604:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800c606:	4a7a      	ldr	r2, [pc, #488]	@ (800c7f0 <VCU_ReceiveMessages+0x1f0>)
 800c608:	2101      	movs	r1, #1
 800c60a:	2000      	movs	r0, #0
 800c60c:	f7f6 f908 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800c610:	e0e2      	b.n	800c7d8 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800c612:	2340      	movs	r3, #64	@ 0x40
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	4b77      	ldr	r3, [pc, #476]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c618:	4a77      	ldr	r2, [pc, #476]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c61a:	2101      	movs	r1, #1
 800c61c:	2000      	movs	r0, #0
 800c61e:	f7f5 ff63 	bl	80024e8 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800c622:	4b76      	ldr	r3, [pc, #472]	@ (800c7fc <VCU_ReceiveMessages+0x1fc>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 0312 	and.w	r3, r3, #18
 800c62a:	2b12      	cmp	r3, #18
 800c62c:	d12c      	bne.n	800c688 <VCU_ReceiveMessages+0x88>
 800c62e:	4b72      	ldr	r3, [pc, #456]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c636:	b29b      	uxth	r3, r3
 800c638:	469c      	mov	ip, r3
 800c63a:	4b6e      	ldr	r3, [pc, #440]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	469e      	mov	lr, r3
 800c640:	4b6c      	ldr	r3, [pc, #432]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c642:	785b      	ldrb	r3, [r3, #1]
 800c644:	461a      	mov	r2, r3
 800c646:	4b6b      	ldr	r3, [pc, #428]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c648:	789b      	ldrb	r3, [r3, #2]
 800c64a:	4619      	mov	r1, r3
 800c64c:	4b69      	ldr	r3, [pc, #420]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c64e:	78db      	ldrb	r3, [r3, #3]
 800c650:	4618      	mov	r0, r3
 800c652:	4b68      	ldr	r3, [pc, #416]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c654:	791b      	ldrb	r3, [r3, #4]
 800c656:	461c      	mov	r4, r3
 800c658:	4b66      	ldr	r3, [pc, #408]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c65a:	795b      	ldrb	r3, [r3, #5]
 800c65c:	461d      	mov	r5, r3
 800c65e:	4b65      	ldr	r3, [pc, #404]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c660:	799b      	ldrb	r3, [r3, #6]
 800c662:	461e      	mov	r6, r3
 800c664:	4b63      	ldr	r3, [pc, #396]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c666:	79db      	ldrb	r3, [r3, #7]
 800c668:	9306      	str	r3, [sp, #24]
 800c66a:	9605      	str	r6, [sp, #20]
 800c66c:	9504      	str	r5, [sp, #16]
 800c66e:	9403      	str	r4, [sp, #12]
 800c670:	9002      	str	r0, [sp, #8]
 800c672:	9101      	str	r1, [sp, #4]
 800c674:	9200      	str	r2, [sp, #0]
 800c676:	4673      	mov	r3, lr
 800c678:	4662      	mov	r2, ip
 800c67a:	4961      	ldr	r1, [pc, #388]	@ (800c800 <VCU_ReceiveMessages+0x200>)
 800c67c:	4861      	ldr	r0, [pc, #388]	@ (800c804 <VCU_ReceiveMessages+0x204>)
 800c67e:	f008 fd25 	bl	80150cc <siprintf>
 800c682:	4860      	ldr	r0, [pc, #384]	@ (800c804 <VCU_ReceiveMessages+0x204>)
 800c684:	f7f8 ffda 	bl	800563c <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800c688:	4b5b      	ldr	r3, [pc, #364]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c690:	b29b      	uxth	r3, r3
 800c692:	461a      	mov	r2, r3
 800c694:	4b5c      	ldr	r3, [pc, #368]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c696:	895b      	ldrh	r3, [r3, #10]
 800c698:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d102      	bne.n	800c6a6 <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800c6a0:	f000 f952 	bl	800c948 <VCU_ProcessVcuCommand>
 800c6a4:	e093      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800c6a6:	4b54      	ldr	r3, [pc, #336]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4b55      	ldr	r3, [pc, #340]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c6b4:	895b      	ldrh	r3, [r3, #10]
 800c6b6:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d102      	bne.n	800c6c4 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800c6be:	f000 fac9 	bl	800cc54 <VCU_ProcessVcuTime>
 800c6c2:	e084      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800c6c4:	4b4c      	ldr	r3, [pc, #304]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4b4d      	ldr	r3, [pc, #308]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c6d2:	895b      	ldrh	r3, [r3, #10]
 800c6d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d102      	bne.n	800c6e2 <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800c6dc:	f000 fb06 	bl	800ccec <VCU_ProcessReadEeprom>
 800c6e0:	e075      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800c6e2:	4b45      	ldr	r3, [pc, #276]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	4b46      	ldr	r3, [pc, #280]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c6f0:	895b      	ldrh	r3, [r3, #10]
 800c6f2:	f203 4303 	addw	r3, r3, #1027	@ 0x403
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d102      	bne.n	800c700 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800c6fa:	f000 fbb3 	bl	800ce64 <VCU_ProcessWriteEeprom>
 800c6fe:	e066      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800c700:	4b3d      	ldr	r3, [pc, #244]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c708:	b29b      	uxth	r3, r3
 800c70a:	461a      	mov	r2, r3
 800c70c:	4b3e      	ldr	r3, [pc, #248]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c70e:	895b      	ldrh	r3, [r3, #10]
 800c710:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c714:	429a      	cmp	r2, r3
 800c716:	d102      	bne.n	800c71e <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800c718:	f000 f9c0 	bl	800ca9c <VCU_ProcessVcuModuleCommand>
 800c71c:	e057      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800c71e:	4b36      	ldr	r3, [pc, #216]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c726:	b29b      	uxth	r3, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	4b37      	ldr	r3, [pc, #220]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c72c:	895b      	ldrh	r3, [r3, #10]
 800c72e:	f203 4305 	addw	r3, r3, #1029	@ 0x405
 800c732:	429a      	cmp	r2, r3
 800c734:	d102      	bne.n	800c73c <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800c736:	f000 fa3d 	bl	800cbb4 <VCU_ProcessVcuKeepAlive>
 800c73a:	e048      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800c73c:	4b2e      	ldr	r3, [pc, #184]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c744:	b29b      	uxth	r3, r3
 800c746:	461a      	mov	r2, r3
 800c748:	4b2f      	ldr	r3, [pc, #188]	@ (800c808 <VCU_ReceiveMessages+0x208>)
 800c74a:	895b      	ldrh	r3, [r3, #10]
 800c74c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c750:	429a      	cmp	r2, r3
 800c752:	d102      	bne.n	800c75a <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800c754:	f000 fc46 	bl	800cfe4 <VCU_ProcessVcuRequestModuleList>
 800c758:	e039      	b.n	800c7ce <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800c75a:	4b28      	ldr	r3, [pc, #160]	@ (800c7fc <VCU_ReceiveMessages+0x1fc>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f003 0311 	and.w	r3, r3, #17
 800c762:	2b11      	cmp	r3, #17
 800c764:	d133      	bne.n	800c7ce <VCU_ReceiveMessages+0x1ce>
 800c766:	4b24      	ldr	r3, [pc, #144]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c76e:	b29b      	uxth	r3, r3
 800c770:	469c      	mov	ip, r3
 800c772:	4b21      	ldr	r3, [pc, #132]	@ (800c7f8 <VCU_ReceiveMessages+0x1f8>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800c77a:	469e      	mov	lr, r3
 800c77c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	461a      	mov	r2, r3
 800c782:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c784:	785b      	ldrb	r3, [r3, #1]
 800c786:	4619      	mov	r1, r3
 800c788:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c78a:	789b      	ldrb	r3, [r3, #2]
 800c78c:	4618      	mov	r0, r3
 800c78e:	4b19      	ldr	r3, [pc, #100]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c790:	78db      	ldrb	r3, [r3, #3]
 800c792:	461c      	mov	r4, r3
 800c794:	4b17      	ldr	r3, [pc, #92]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c796:	791b      	ldrb	r3, [r3, #4]
 800c798:	461d      	mov	r5, r3
 800c79a:	4b16      	ldr	r3, [pc, #88]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c79c:	795b      	ldrb	r3, [r3, #5]
 800c79e:	461e      	mov	r6, r3
 800c7a0:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c7a2:	799b      	ldrb	r3, [r3, #6]
 800c7a4:	607b      	str	r3, [r7, #4]
 800c7a6:	4b13      	ldr	r3, [pc, #76]	@ (800c7f4 <VCU_ReceiveMessages+0x1f4>)
 800c7a8:	79db      	ldrb	r3, [r3, #7]
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	9306      	str	r3, [sp, #24]
 800c7b0:	9605      	str	r6, [sp, #20]
 800c7b2:	9504      	str	r5, [sp, #16]
 800c7b4:	9403      	str	r4, [sp, #12]
 800c7b6:	9002      	str	r0, [sp, #8]
 800c7b8:	9101      	str	r1, [sp, #4]
 800c7ba:	9200      	str	r2, [sp, #0]
 800c7bc:	4673      	mov	r3, lr
 800c7be:	4662      	mov	r2, ip
 800c7c0:	4912      	ldr	r1, [pc, #72]	@ (800c80c <VCU_ReceiveMessages+0x20c>)
 800c7c2:	4810      	ldr	r0, [pc, #64]	@ (800c804 <VCU_ReceiveMessages+0x204>)
 800c7c4:	f008 fc82 	bl	80150cc <siprintf>
 800c7c8:	480e      	ldr	r0, [pc, #56]	@ (800c804 <VCU_ReceiveMessages+0x204>)
 800c7ca:	f7f8 ff37 	bl	800563c <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800c7ce:	4a08      	ldr	r2, [pc, #32]	@ (800c7f0 <VCU_ReceiveMessages+0x1f0>)
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	f7f6 f824 	bl	8002820 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800c7d8:	4b05      	ldr	r3, [pc, #20]	@ (800c7f0 <VCU_ReceiveMessages+0x1f0>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f47f af16 	bne.w	800c612 <VCU_ReceiveMessages+0x12>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7f0:	2000a7a4 	.word	0x2000a7a4
 800c7f4:	2000a7b4 	.word	0x2000a7b4
 800c7f8:	2000a7a8 	.word	0x2000a7a8
 800c7fc:	2000000c 	.word	0x2000000c
 800c800:	0801a278 	.word	0x0801a278
 800c804:	20000b5c 	.word	0x20000b5c
 800c808:	2000a6ec 	.word	0x2000a6ec
 800c80c:	0801a2d0 	.word	0x0801a2d0

0800c810 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c812:	b08d      	sub	sp, #52	@ 0x34
 800c814:	af08      	add	r7, sp, #32
 800c816:	4603      	mov	r3, r0
 800c818:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800c81a:	2332      	movs	r3, #50	@ 0x32
 800c81c:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	4a3e      	ldr	r2, [pc, #248]	@ (800c91c <VCU_TransmitMessageQueue+0x10c>)
 800c822:	2102      	movs	r1, #2
 800c824:	4618      	mov	r0, r3
 800c826:	f7f5 ffc8 	bl	80027ba <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d11a      	bne.n	800c866 <VCU_TransmitMessageQueue+0x56>
      Nop();
 800c830:	bf00      	nop
      Nop();
 800c832:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800c834:	79f8      	ldrb	r0, [r7, #7]
 800c836:	4b3a      	ldr	r3, [pc, #232]	@ (800c920 <VCU_TransmitMessageQueue+0x110>)
 800c838:	4a3a      	ldr	r2, [pc, #232]	@ (800c924 <VCU_TransmitMessageQueue+0x114>)
 800c83a:	493b      	ldr	r1, [pc, #236]	@ (800c928 <VCU_TransmitMessageQueue+0x118>)
 800c83c:	f7f6 f877 	bl	800292e <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800c840:	4b3a      	ldr	r3, [pc, #232]	@ (800c92c <VCU_TransmitMessageQueue+0x11c>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0311 	and.w	r3, r3, #17
 800c848:	2b11      	cmp	r3, #17
 800c84a:	d106      	bne.n	800c85a <VCU_TransmitMessageQueue+0x4a>
 800c84c:	4938      	ldr	r1, [pc, #224]	@ (800c930 <VCU_TransmitMessageQueue+0x120>)
 800c84e:	4839      	ldr	r0, [pc, #228]	@ (800c934 <VCU_TransmitMessageQueue+0x124>)
 800c850:	f008 fc3c 	bl	80150cc <siprintf>
 800c854:	4837      	ldr	r0, [pc, #220]	@ (800c934 <VCU_TransmitMessageQueue+0x124>)
 800c856:	f7f8 fef1 	bl	800563c <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800c85a:	79fb      	ldrb	r3, [r7, #7]
 800c85c:	2102      	movs	r1, #2
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f5 fcee 	bl	8002240 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800c864:	e056      	b.n	800c914 <VCU_TransmitMessageQueue+0x104>
    }
    attempts--;
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	3b01      	subs	r3, #1
 800c86a:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800c86c:	4b2b      	ldr	r3, [pc, #172]	@ (800c91c <VCU_TransmitMessageQueue+0x10c>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0d2      	beq.n	800c81e <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800c878:	4b2f      	ldr	r3, [pc, #188]	@ (800c938 <VCU_TransmitMessageQueue+0x128>)
 800c87a:	791b      	ldrb	r3, [r3, #4]
 800c87c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c880:	b2db      	uxtb	r3, r3
 800c882:	4618      	mov	r0, r3
 800c884:	f7f7 f860 	bl	8003948 <DRV_CANFDSPI_DlcToDataBytes>
 800c888:	4603      	mov	r3, r0
 800c88a:	73bb      	strb	r3, [r7, #14]
  
  // Log TX message if DBG_COMMS is enabled
  if((debugLevel & (DBG_VCU + DBG_COMMS)) == (DBG_VCU + DBG_COMMS)){
 800c88c:	4b27      	ldr	r3, [pc, #156]	@ (800c92c <VCU_TransmitMessageQueue+0x11c>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 0312 	and.w	r3, r3, #18
 800c894:	2b12      	cmp	r3, #18
 800c896:	d133      	bne.n	800c900 <VCU_TransmitMessageQueue+0xf0>
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c898:	4b27      	ldr	r3, [pc, #156]	@ (800c938 <VCU_TransmitMessageQueue+0x128>)
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8a0:	b29b      	uxth	r3, r3
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8a2:	469c      	mov	ip, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8a4:	4b24      	ldr	r3, [pc, #144]	@ (800c938 <VCU_TransmitMessageQueue+0x128>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8ac:	469e      	mov	lr, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8ae:	4b23      	ldr	r3, [pc, #140]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8b2:	461a      	mov	r2, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8b4:	4b21      	ldr	r3, [pc, #132]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8b6:	785b      	ldrb	r3, [r3, #1]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8b8:	4619      	mov	r1, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8ba:	4b20      	ldr	r3, [pc, #128]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8bc:	789b      	ldrb	r3, [r3, #2]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8be:	4618      	mov	r0, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8c2:	78db      	ldrb	r3, [r3, #3]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8c4:	461c      	mov	r4, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8c8:	791b      	ldrb	r3, [r3, #4]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8ca:	461d      	mov	r5, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8cc:	4b1b      	ldr	r3, [pc, #108]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8ce:	795b      	ldrb	r3, [r3, #5]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8d0:	461e      	mov	r6, r3
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8d4:	799b      	ldrb	r3, [r3, #6]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8d6:	603b      	str	r3, [r7, #0]
              vcu_txObj.bF.id.SID, vcu_txObj.bF.id.EID, vcu_txd[0], vcu_txd[1], vcu_txd[2], vcu_txd[3], vcu_txd[4], vcu_txd[5], vcu_txd[6], vcu_txd[7]);
 800c8d8:	4b18      	ldr	r3, [pc, #96]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c8da:	79db      	ldrb	r3, [r3, #7]
      sprintf(tempBuffer,"VCU TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",
 800c8dc:	9307      	str	r3, [sp, #28]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	9306      	str	r3, [sp, #24]
 800c8e2:	9605      	str	r6, [sp, #20]
 800c8e4:	9504      	str	r5, [sp, #16]
 800c8e6:	9403      	str	r4, [sp, #12]
 800c8e8:	9002      	str	r0, [sp, #8]
 800c8ea:	9101      	str	r1, [sp, #4]
 800c8ec:	9200      	str	r2, [sp, #0]
 800c8ee:	4673      	mov	r3, lr
 800c8f0:	4662      	mov	r2, ip
 800c8f2:	4913      	ldr	r1, [pc, #76]	@ (800c940 <VCU_TransmitMessageQueue+0x130>)
 800c8f4:	480f      	ldr	r0, [pc, #60]	@ (800c934 <VCU_TransmitMessageQueue+0x124>)
 800c8f6:	f008 fbe9 	bl	80150cc <siprintf>
      serialOut(tempBuffer);
 800c8fa:	480e      	ldr	r0, [pc, #56]	@ (800c934 <VCU_TransmitMessageQueue+0x124>)
 800c8fc:	f7f8 fe9e 	bl	800563c <serialOut>
  }

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	79f8      	ldrb	r0, [r7, #7]
 800c904:	2201      	movs	r2, #1
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4b0c      	ldr	r3, [pc, #48]	@ (800c93c <VCU_TransmitMessageQueue+0x12c>)
 800c90c:	4a0a      	ldr	r2, [pc, #40]	@ (800c938 <VCU_TransmitMessageQueue+0x128>)
 800c90e:	2102      	movs	r1, #2
 800c910:	f7f5 fba4 	bl	800205c <DRV_CANFDSPI_TransmitChannelLoad>
}
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91a:	bf00      	nop
 800c91c:	2000a754 	.word	0x2000a754
 800c920:	2000a7f6 	.word	0x2000a7f6
 800c924:	2000a7f5 	.word	0x2000a7f5
 800c928:	2000a7f4 	.word	0x2000a7f4
 800c92c:	2000000c 	.word	0x2000000c
 800c930:	0801a33c 	.word	0x0801a33c
 800c934:	20000b5c 	.word	0x20000b5c
 800c938:	2000a758 	.word	0x2000a758
 800c93c:	2000a764 	.word	0x2000a764
 800c940:	0801a36c 	.word	0x0801a36c
 800c944:	00000000 	.word	0x00000000

0800c948 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800c948:	b5b0      	push	{r4, r5, r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800c94e:	4b4a      	ldr	r3, [pc, #296]	@ (800ca78 <VCU_ProcessVcuCommand+0x130>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a4a      	ldr	r2, [pc, #296]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c954:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800c956:	4b4a      	ldr	r3, [pc, #296]	@ (800ca80 <VCU_ProcessVcuCommand+0x138>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c95c:	4a47      	ldr	r2, [pc, #284]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c95e:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800c960:	4b46      	ldr	r3, [pc, #280]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800c968:	463b      	mov	r3, r7
 800c96a:	2208      	movs	r2, #8
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f008 fc13 	bl	801519a <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800c974:	4a43      	ldr	r2, [pc, #268]	@ (800ca84 <VCU_ProcessVcuCommand+0x13c>)
 800c976:	463b      	mov	r3, r7
 800c978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c97c:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800c980:	887a      	ldrh	r2, [r7, #2]
 800c982:	4b3e      	ldr	r3, [pc, #248]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c984:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800c988:	4b3c      	ldr	r3, [pc, #240]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c98a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c98e:	783a      	ldrb	r2, [r7, #0]
 800c990:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800c994:	b2d2      	uxtb	r2, r2
 800c996:	4293      	cmp	r3, r2
 800c998:	d03d      	beq.n	800ca16 <VCU_ProcessVcuCommand+0xce>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800c99a:	783b      	ldrb	r3, [r7, #0]
 800c99c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	4b35      	ldr	r3, [pc, #212]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    switch (pack.vcuRequestedState) {
 800c9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d81b      	bhi.n	800c9ec <VCU_ProcessVcuCommand+0xa4>
 800c9b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9bc <VCU_ProcessVcuCommand+0x74>)
 800c9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ba:	bf00      	nop
 800c9bc:	0800ca11 	.word	0x0800ca11
 800c9c0:	0800ca11 	.word	0x0800ca11
 800c9c4:	0800c9dd 	.word	0x0800c9dd
 800c9c8:	0800c9cd 	.word	0x0800c9cd
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800c9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	76da      	strb	r2, [r3, #27]
        pack.errorCounts.firstModule = 0;
 800c9d2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c9da:	e01c      	b.n	800ca16 <VCU_ProcessVcuCommand+0xce>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800c9dc:	4b27      	ldr	r3, [pc, #156]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	76da      	strb	r2, [r3, #27]
        pack.errorCounts.firstModule = 0;
 800c9e2:	4b26      	ldr	r3, [pc, #152]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        break;
 800c9ea:	e014      	b.n	800ca16 <VCU_ProcessVcuCommand+0xce>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800c9ec:	4b26      	ldr	r3, [pc, #152]	@ (800ca88 <VCU_ProcessVcuCommand+0x140>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	f003 0311 	and.w	r3, r3, #17
 800c9f4:	2b11      	cmp	r3, #17
 800c9f6:	d10d      	bne.n	800ca14 <VCU_ProcessVcuCommand+0xcc>
 800c9f8:	4b20      	ldr	r3, [pc, #128]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800c9fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9fe:	461a      	mov	r2, r3
 800ca00:	4922      	ldr	r1, [pc, #136]	@ (800ca8c <VCU_ProcessVcuCommand+0x144>)
 800ca02:	4823      	ldr	r0, [pc, #140]	@ (800ca90 <VCU_ProcessVcuCommand+0x148>)
 800ca04:	f008 fb62 	bl	80150cc <siprintf>
 800ca08:	4821      	ldr	r0, [pc, #132]	@ (800ca90 <VCU_ProcessVcuCommand+0x148>)
 800ca0a:	f7f8 fe17 	bl	800563c <serialOut>
        break;
 800ca0e:	e001      	b.n	800ca14 <VCU_ProcessVcuCommand+0xcc>
        break;
 800ca10:	bf00      	nop
 800ca12:	e000      	b.n	800ca16 <VCU_ProcessVcuCommand+0xce>
        break;
 800ca14:	bf00      	nop
    }
  }
  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800ca16:	4b1c      	ldr	r3, [pc, #112]	@ (800ca88 <VCU_ProcessVcuCommand+0x140>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	f003 0310 	and.w	r3, r3, #16
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d021      	beq.n	800ca66 <VCU_ProcessVcuCommand+0x11e>
 800ca22:	4b1c      	ldr	r3, [pc, #112]	@ (800ca94 <VCU_ProcessVcuCommand+0x14c>)
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	461c      	mov	r4, r3
 800ca2e:	4b13      	ldr	r3, [pc, #76]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800ca30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca34:	461d      	mov	r5, r3
 800ca36:	4b11      	ldr	r3, [pc, #68]	@ (800ca7c <VCU_ProcessVcuCommand+0x134>)
 800ca38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f3 fd59 	bl	80004f4 <__aeabi_i2d>
 800ca42:	a30b      	add	r3, pc, #44	@ (adr r3, 800ca70 <VCU_ProcessVcuCommand+0x128>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fdbe 	bl	80005c8 <__aeabi_dmul>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	e9cd 2300 	strd	r2, r3, [sp]
 800ca54:	462b      	mov	r3, r5
 800ca56:	4622      	mov	r2, r4
 800ca58:	490f      	ldr	r1, [pc, #60]	@ (800ca98 <VCU_ProcessVcuCommand+0x150>)
 800ca5a:	480d      	ldr	r0, [pc, #52]	@ (800ca90 <VCU_ProcessVcuCommand+0x148>)
 800ca5c:	f008 fb36 	bl	80150cc <siprintf>
 800ca60:	480b      	ldr	r0, [pc, #44]	@ (800ca90 <VCU_ProcessVcuCommand+0x148>)
 800ca62:	f7f8 fdeb 	bl	800563c <serialOut>
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	eb851eb8 	.word	0xeb851eb8
 800ca74:	3f8eb851 	.word	0x3f8eb851
 800ca78:	20000d20 	.word	0x20000d20
 800ca7c:	2000a6ec 	.word	0x2000a6ec
 800ca80:	200005d0 	.word	0x200005d0
 800ca84:	2000a7b4 	.word	0x2000a7b4
 800ca88:	2000000c 	.word	0x2000000c
 800ca8c:	0801a3d0 	.word	0x0801a3d0
 800ca90:	20000b5c 	.word	0x20000b5c
 800ca94:	2000a758 	.word	0x2000a758
 800ca98:	0801a3f8 	.word	0x0801a3f8

0800ca9c <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800caa2:	4b3a      	ldr	r3, [pc, #232]	@ (800cb8c <VCU_ProcessVcuModuleCommand+0xf0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a3a      	ldr	r2, [pc, #232]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800caa8:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800caaa:	4b3a      	ldr	r3, [pc, #232]	@ (800cb94 <VCU_ProcessVcuModuleCommand+0xf8>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab0:	4a37      	ldr	r2, [pc, #220]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cab2:	6453      	str	r3, [r2, #68]	@ 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800cab4:	4b36      	ldr	r3, [pc, #216]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800cabc:	463b      	mov	r3, r7
 800cabe:	220c      	movs	r2, #12
 800cac0:	2100      	movs	r1, #0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f008 fb69 	bl	801519a <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800cac8:	4a33      	ldr	r2, [pc, #204]	@ (800cb98 <VCU_ProcessVcuModuleCommand+0xfc>)
 800caca:	463b      	mov	r3, r7
 800cacc:	ca07      	ldmia	r2, {r0, r1, r2}
 800cace:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800cad2:	783a      	ldrb	r2, [r7, #0]
 800cad4:	4b2e      	ldr	r3, [pc, #184]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cad6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cada:	4b2d      	ldr	r3, [pc, #180]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cadc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe fe83 	bl	800b7ec <MCU_ModuleIndexFromId>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800caea:	4b29      	ldr	r3, [pc, #164]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800caec:	7d1b      	ldrb	r3, [r3, #20]
 800caee:	7bfa      	ldrb	r2, [r7, #15]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d111      	bne.n	800cb18 <VCU_ProcessVcuModuleCommand+0x7c>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800caf4:	4b29      	ldr	r3, [pc, #164]	@ (800cb9c <VCU_ProcessVcuModuleCommand+0x100>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 0311 	and.w	r3, r3, #17
 800cafc:	2b11      	cmp	r3, #17
 800cafe:	d140      	bne.n	800cb82 <VCU_ProcessVcuModuleCommand+0xe6>
 800cb00:	4b23      	ldr	r3, [pc, #140]	@ (800cb90 <VCU_ProcessVcuModuleCommand+0xf4>)
 800cb02:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800cb06:	461a      	mov	r2, r3
 800cb08:	4925      	ldr	r1, [pc, #148]	@ (800cba0 <VCU_ProcessVcuModuleCommand+0x104>)
 800cb0a:	4826      	ldr	r0, [pc, #152]	@ (800cba4 <VCU_ProcessVcuModuleCommand+0x108>)
 800cb0c:	f008 fade 	bl	80150cc <siprintf>
 800cb10:	4824      	ldr	r0, [pc, #144]	@ (800cba4 <VCU_ProcessVcuModuleCommand+0x108>)
 800cb12:	f7f8 fd93 	bl	800563c <serialOut>
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
  }
}
 800cb16:	e034      	b.n	800cb82 <VCU_ProcessVcuModuleCommand+0xe6>
    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	4a23      	ldr	r2, [pc, #140]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0x10c>)
 800cb1c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800cb20:	fb01 f303 	mul.w	r3, r1, r3
 800cb24:	4413      	add	r3, r2
 800cb26:	3327      	adds	r3, #39	@ 0x27
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	787a      	ldrb	r2, [r7, #1]
 800cb2c:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d00e      	beq.n	800cb54 <VCU_ProcessVcuModuleCommand+0xb8>
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800cb36:	787b      	ldrb	r3, [r7, #1]
 800cb38:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	7bfb      	ldrb	r3, [r7, #15]
 800cb40:	4610      	mov	r0, r2
 800cb42:	4a19      	ldr	r2, [pc, #100]	@ (800cba8 <VCU_ProcessVcuModuleCommand+0x10c>)
 800cb44:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800cb48:	fb01 f303 	mul.w	r3, r1, r3
 800cb4c:	4413      	add	r3, r2
 800cb4e:	3328      	adds	r3, #40	@ 0x28
 800cb50:	4602      	mov	r2, r0
 800cb52:	701a      	strb	r2, [r3, #0]
    if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800cb54:	4b11      	ldr	r3, [pc, #68]	@ (800cb9c <VCU_ProcessVcuModuleCommand+0x100>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f003 0310 	and.w	r3, r3, #16
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d010      	beq.n	800cb82 <VCU_ProcessVcuModuleCommand+0xe6>
 800cb60:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <VCU_ProcessVcuModuleCommand+0x110>)
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	787b      	ldrb	r3, [r7, #1]
 800cb6e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	490e      	ldr	r1, [pc, #56]	@ (800cbb0 <VCU_ProcessVcuModuleCommand+0x114>)
 800cb76:	480b      	ldr	r0, [pc, #44]	@ (800cba4 <VCU_ProcessVcuModuleCommand+0x108>)
 800cb78:	f008 faa8 	bl	80150cc <siprintf>
 800cb7c:	4809      	ldr	r0, [pc, #36]	@ (800cba4 <VCU_ProcessVcuModuleCommand+0x108>)
 800cb7e:	f7f8 fd5d 	bl	800563c <serialOut>
}
 800cb82:	bf00      	nop
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000d20 	.word	0x20000d20
 800cb90:	2000a6ec 	.word	0x2000a6ec
 800cb94:	200005d0 	.word	0x200005d0
 800cb98:	2000a7b4 	.word	0x2000a7b4
 800cb9c:	2000000c 	.word	0x2000000c
 800cba0:	0801a428 	.word	0x0801a428
 800cba4:	20000b5c 	.word	0x20000b5c
 800cba8:	20000dec 	.word	0x20000dec
 800cbac:	2000a758 	.word	0x2000a758
 800cbb0:	0801a468 	.word	0x0801a468

0800cbb4 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cbba:	4b1e      	ldr	r3, [pc, #120]	@ (800cc34 <VCU_ProcessVcuKeepAlive+0x80>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a1e      	ldr	r2, [pc, #120]	@ (800cc38 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbc0:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cbc2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc3c <VCU_ProcessVcuKeepAlive+0x88>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc8:	4a1b      	ldr	r2, [pc, #108]	@ (800cc38 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbca:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800cbcc:	463b      	mov	r3, r7
 800cbce:	2208      	movs	r2, #8
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f008 fae1 	bl	801519a <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800cbd8:	4a19      	ldr	r2, [pc, #100]	@ (800cc40 <VCU_ProcessVcuKeepAlive+0x8c>)
 800cbda:	463b      	mov	r3, r7
 800cbdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbe0:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800cbe4:	783b      	ldrb	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d008      	beq.n	800cbfc <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800cbea:	4b13      	ldr	r3, [pc, #76]	@ (800cc38 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800cbf2:	783a      	ldrb	r2, [r7, #0]
 800cbf4:	4b10      	ldr	r3, [pc, #64]	@ (800cc38 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbf6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800cbfa:	e003      	b.n	800cc04 <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800cbfc:	4b0e      	ldr	r3, [pc, #56]	@ (800cc38 <VCU_ProcessVcuKeepAlive+0x84>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  if((debugLevel & DBG_VCU) == DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cc04:	4b0f      	ldr	r3, [pc, #60]	@ (800cc44 <VCU_ProcessVcuKeepAlive+0x90>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f003 0310 	and.w	r3, r3, #16
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00c      	beq.n	800cc2a <VCU_ProcessVcuKeepAlive+0x76>
 800cc10:	4b0d      	ldr	r3, [pc, #52]	@ (800cc48 <VCU_ProcessVcuKeepAlive+0x94>)
 800cc12:	881b      	ldrh	r3, [r3, #0]
 800cc14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	490b      	ldr	r1, [pc, #44]	@ (800cc4c <VCU_ProcessVcuKeepAlive+0x98>)
 800cc1e:	480c      	ldr	r0, [pc, #48]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x9c>)
 800cc20:	f008 fa54 	bl	80150cc <siprintf>
 800cc24:	480a      	ldr	r0, [pc, #40]	@ (800cc50 <VCU_ProcessVcuKeepAlive+0x9c>)
 800cc26:	f7f8 fd09 	bl	800563c <serialOut>
}
 800cc2a:	bf00      	nop
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20000d20 	.word	0x20000d20
 800cc38:	2000a6ec 	.word	0x2000a6ec
 800cc3c:	200005d0 	.word	0x200005d0
 800cc40:	2000a7b4 	.word	0x2000a7b4
 800cc44:	2000000c 	.word	0x2000000c
 800cc48:	2000a758 	.word	0x2000a758
 800cc4c:	0801a498 	.word	0x0801a498
 800cc50:	20000b5c 	.word	0x20000b5c

0800cc54 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cc5a:	4b1c      	ldr	r3, [pc, #112]	@ (800cccc <VCU_ProcessVcuTime+0x78>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	f003 0310 	and.w	r3, r3, #16
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00c      	beq.n	800cc80 <VCU_ProcessVcuTime+0x2c>
 800cc66:	4b1a      	ldr	r3, [pc, #104]	@ (800ccd0 <VCU_ProcessVcuTime+0x7c>)
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	461a      	mov	r2, r3
 800cc72:	4918      	ldr	r1, [pc, #96]	@ (800ccd4 <VCU_ProcessVcuTime+0x80>)
 800cc74:	4818      	ldr	r0, [pc, #96]	@ (800ccd8 <VCU_ProcessVcuTime+0x84>)
 800cc76:	f008 fa29 	bl	80150cc <siprintf>
 800cc7a:	4817      	ldr	r0, [pc, #92]	@ (800ccd8 <VCU_ProcessVcuTime+0x84>)
 800cc7c:	f7f8 fcde 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cc80:	4b16      	ldr	r3, [pc, #88]	@ (800ccdc <VCU_ProcessVcuTime+0x88>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a16      	ldr	r2, [pc, #88]	@ (800cce0 <VCU_ProcessVcuTime+0x8c>)
 800cc86:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cc88:	4b16      	ldr	r3, [pc, #88]	@ (800cce4 <VCU_ProcessVcuTime+0x90>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8e:	4a14      	ldr	r2, [pc, #80]	@ (800cce0 <VCU_ProcessVcuTime+0x8c>)
 800cc90:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800cc92:	463b      	mov	r3, r7
 800cc94:	2208      	movs	r2, #8
 800cc96:	2100      	movs	r1, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f008 fa7e 	bl	801519a <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800cc9e:	463b      	mov	r3, r7
 800cca0:	2208      	movs	r2, #8
 800cca2:	4911      	ldr	r1, [pc, #68]	@ (800cce8 <VCU_ProcessVcuTime+0x94>)
 800cca4:	4618      	mov	r0, r3
 800cca6:	f009 f984 	bl	8015fb2 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800ccaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccae:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800ccb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ccb6:	f7f8 fd2f 	bl	8005718 <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800ccba:	4b09      	ldr	r3, [pc, #36]	@ (800cce0 <VCU_ProcessVcuTime+0x8c>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	2000000c 	.word	0x2000000c
 800ccd0:	2000a758 	.word	0x2000a758
 800ccd4:	0801a4b8 	.word	0x0801a4b8
 800ccd8:	20000b5c 	.word	0x20000b5c
 800ccdc:	20000d20 	.word	0x20000d20
 800cce0:	2000a6ec 	.word	0x2000a6ec
 800cce4:	200005d0 	.word	0x200005d0
 800cce8:	2000a7b4 	.word	0x2000a7b4

0800ccec <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if((debugLevel & DBG_VCU) == DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ccf6:	4b50      	ldr	r3, [pc, #320]	@ (800ce38 <VCU_ProcessReadEeprom+0x14c>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00c      	beq.n	800cd1c <VCU_ProcessReadEeprom+0x30>
 800cd02:	4b4e      	ldr	r3, [pc, #312]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	494c      	ldr	r1, [pc, #304]	@ (800ce40 <VCU_ProcessReadEeprom+0x154>)
 800cd10:	484c      	ldr	r0, [pc, #304]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800cd12:	f008 f9db 	bl	80150cc <siprintf>
 800cd16:	484b      	ldr	r0, [pc, #300]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800cd18:	f7f8 fc90 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800cd1c:	4b4a      	ldr	r3, [pc, #296]	@ (800ce48 <VCU_ProcessReadEeprom+0x15c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a4a      	ldr	r2, [pc, #296]	@ (800ce4c <VCU_ProcessReadEeprom+0x160>)
 800cd22:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800cd24:	4b4a      	ldr	r3, [pc, #296]	@ (800ce50 <VCU_ProcessReadEeprom+0x164>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2a:	4a48      	ldr	r2, [pc, #288]	@ (800ce4c <VCU_ProcessReadEeprom+0x160>)
 800cd2c:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800cd2e:	f107 030c 	add.w	r3, r7, #12
 800cd32:	2208      	movs	r2, #8
 800cd34:	2100      	movs	r1, #0
 800cd36:	4618      	mov	r0, r3
 800cd38:	f008 fa2f 	bl	801519a <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800cd3c:	4a45      	ldr	r2, [pc, #276]	@ (800ce54 <VCU_ProcessReadEeprom+0x168>)
 800cd3e:	f107 030c 	add.w	r3, r7, #12
 800cd42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd46:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800cd4a:	7b3b      	ldrb	r3, [r7, #12]
 800cd4c:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800cd4e:	463a      	mov	r2, r7
 800cd50:	8afb      	ldrh	r3, [r7, #22]
 800cd52:	4611      	mov	r1, r2
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7f7 fc37 	bl	80045c8 <EE_ReadVariable32bits>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800cd5e:	8abb      	ldrh	r3, [r7, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d156      	bne.n	800ce12 <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800cd6a:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800cd70:	8afb      	ldrh	r3, [r7, #22]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cd76:	4b31      	ldr	r3, [pc, #196]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cd7c:	4b2f      	ldr	r3, [pc, #188]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cd82:	4b2e      	ldr	r3, [pc, #184]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800cd88:	4b33      	ldr	r3, [pc, #204]	@ (800ce58 <VCU_ProcessReadEeprom+0x16c>)
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	1d3b      	adds	r3, r7, #4
 800cd8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd92:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cd96:	4b2d      	ldr	r3, [pc, #180]	@ (800ce4c <VCU_ProcessReadEeprom+0x160>)
 800cd98:	895b      	ldrh	r3, [r3, #10]
 800cd9a:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cda4:	b299      	uxth	r1, r3
 800cda6:	4a25      	ldr	r2, [pc, #148]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cda8:	8813      	ldrh	r3, [r2, #0]
 800cdaa:	f361 030a 	bfi	r3, r1, #0, #11
 800cdae:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cdb0:	4a22      	ldr	r2, [pc, #136]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cdb2:	6813      	ldr	r3, [r2, #0]
 800cdb4:	f36f 23dc 	bfc	r3, #11, #18
 800cdb8:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cdba:	4a20      	ldr	r2, [pc, #128]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cdbc:	7913      	ldrb	r3, [r2, #4]
 800cdbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdc2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cdc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cdc6:	7913      	ldrb	r3, [r2, #4]
 800cdc8:	2108      	movs	r1, #8
 800cdca:	f361 0303 	bfi	r3, r1, #0, #4
 800cdce:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cdd0:	4a1a      	ldr	r2, [pc, #104]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cdd2:	7913      	ldrb	r3, [r2, #4]
 800cdd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdd8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cdda:	4a18      	ldr	r2, [pc, #96]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cddc:	7913      	ldrb	r3, [r2, #4]
 800cdde:	f023 0310 	bic.w	r3, r3, #16
 800cde2:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cde4:	4b14      	ldr	r3, [pc, #80]	@ (800ce38 <VCU_ProcessReadEeprom+0x14c>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f003 0310 	and.w	r3, r3, #16
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00c      	beq.n	800ce0a <VCU_ProcessReadEeprom+0x11e>
 800cdf0:	4b12      	ldr	r3, [pc, #72]	@ (800ce3c <VCU_ProcessReadEeprom+0x150>)
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4917      	ldr	r1, [pc, #92]	@ (800ce5c <VCU_ProcessReadEeprom+0x170>)
 800cdfe:	4811      	ldr	r0, [pc, #68]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800ce00:	f008 f964 	bl	80150cc <siprintf>
 800ce04:	480f      	ldr	r0, [pc, #60]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800ce06:	f7f8 fc19 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	f7ff fd00 	bl	800c810 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800ce10:	e00e      	b.n	800ce30 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800ce12:	4b09      	ldr	r3, [pc, #36]	@ (800ce38 <VCU_ProcessReadEeprom+0x14c>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d008      	beq.n	800ce30 <VCU_ProcessReadEeprom+0x144>
 800ce1e:	8abb      	ldrh	r3, [r7, #20]
 800ce20:	461a      	mov	r2, r3
 800ce22:	490f      	ldr	r1, [pc, #60]	@ (800ce60 <VCU_ProcessReadEeprom+0x174>)
 800ce24:	4807      	ldr	r0, [pc, #28]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800ce26:	f008 f951 	bl	80150cc <siprintf>
 800ce2a:	4806      	ldr	r0, [pc, #24]	@ (800ce44 <VCU_ProcessReadEeprom+0x158>)
 800ce2c:	f7f8 fc06 	bl	800563c <serialOut>
}
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	2000000c 	.word	0x2000000c
 800ce3c:	2000a758 	.word	0x2000a758
 800ce40:	0801a4d0 	.word	0x0801a4d0
 800ce44:	20000b5c 	.word	0x20000b5c
 800ce48:	20000d20 	.word	0x20000d20
 800ce4c:	2000a6ec 	.word	0x2000a6ec
 800ce50:	200005d0 	.word	0x200005d0
 800ce54:	2000a7b4 	.word	0x2000a7b4
 800ce58:	2000a764 	.word	0x2000a764
 800ce5c:	0801a4f0 	.word	0x0801a4f0
 800ce60:	0801a510 	.word	0x0801a510

0800ce64 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce6e:	4b52      	ldr	r3, [pc, #328]	@ (800cfb8 <VCU_ProcessWriteEeprom+0x154>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	f003 0310 	and.w	r3, r3, #16
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00c      	beq.n	800ce94 <VCU_ProcessWriteEeprom+0x30>
 800ce7a:	4b50      	ldr	r3, [pc, #320]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	461a      	mov	r2, r3
 800ce86:	494e      	ldr	r1, [pc, #312]	@ (800cfc0 <VCU_ProcessWriteEeprom+0x15c>)
 800ce88:	484e      	ldr	r0, [pc, #312]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800ce8a:	f008 f91f 	bl	80150cc <siprintf>
 800ce8e:	484d      	ldr	r0, [pc, #308]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800ce90:	f7f8 fbd4 	bl	800563c <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ce94:	4b4c      	ldr	r3, [pc, #304]	@ (800cfc8 <VCU_ProcessWriteEeprom+0x164>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a4c      	ldr	r2, [pc, #304]	@ (800cfcc <VCU_ProcessWriteEeprom+0x168>)
 800ce9a:	6493      	str	r3, [r2, #72]	@ 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ce9c:	4b4c      	ldr	r3, [pc, #304]	@ (800cfd0 <VCU_ProcessWriteEeprom+0x16c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea2:	4a4a      	ldr	r2, [pc, #296]	@ (800cfcc <VCU_ProcessWriteEeprom+0x168>)
 800cea4:	6453      	str	r3, [r2, #68]	@ 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	2208      	movs	r2, #8
 800ceac:	2100      	movs	r1, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f008 f973 	bl	801519a <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800ceb4:	4a47      	ldr	r2, [pc, #284]	@ (800cfd4 <VCU_ProcessWriteEeprom+0x170>)
 800ceb6:	f107 0308 	add.w	r3, r7, #8
 800ceba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cebe:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800cec2:	7a3b      	ldrb	r3, [r7, #8]
 800cec4:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800ceca:	8a7b      	ldrh	r3, [r7, #18]
 800cecc:	6979      	ldr	r1, [r7, #20]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f8 fd1a 	bl	8005908 <StoreEEPROM>
 800ced4:	4603      	mov	r3, r0
 800ced6:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800ced8:	8a3b      	ldrh	r3, [r7, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d156      	bne.n	800cf8c <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800cee4:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800ceea:	8a7b      	ldrh	r3, [r7, #18]
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cef0:	4b32      	ldr	r3, [pc, #200]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cef6:	4b31      	ldr	r3, [pc, #196]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cefc:	4b2f      	ldr	r3, [pc, #188]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800cf02:	4b35      	ldr	r3, [pc, #212]	@ (800cfd8 <VCU_ProcessWriteEeprom+0x174>)
 800cf04:	461a      	mov	r2, r3
 800cf06:	463b      	mov	r3, r7
 800cf08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf0c:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cf10:	4b2e      	ldr	r3, [pc, #184]	@ (800cfcc <VCU_ProcessWriteEeprom+0x168>)
 800cf12:	895b      	ldrh	r3, [r3, #10]
 800cf14:	f203 4341 	addw	r3, r3, #1089	@ 0x441
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf1e:	b299      	uxth	r1, r3
 800cf20:	4a26      	ldr	r2, [pc, #152]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf22:	8813      	ldrh	r3, [r2, #0]
 800cf24:	f361 030a 	bfi	r3, r1, #0, #11
 800cf28:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cf2a:	4a24      	ldr	r2, [pc, #144]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf2c:	6813      	ldr	r3, [r2, #0]
 800cf2e:	f36f 23dc 	bfc	r3, #11, #18
 800cf32:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cf34:	4a21      	ldr	r2, [pc, #132]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf36:	7913      	ldrb	r3, [r2, #4]
 800cf38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf3c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cf3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf40:	7913      	ldrb	r3, [r2, #4]
 800cf42:	2108      	movs	r1, #8
 800cf44:	f361 0303 	bfi	r3, r1, #0, #4
 800cf48:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cf4a:	4a1c      	ldr	r2, [pc, #112]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf4c:	7913      	ldrb	r3, [r2, #4]
 800cf4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf52:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cf54:	4a19      	ldr	r2, [pc, #100]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf56:	7913      	ldrb	r3, [r2, #4]
 800cf58:	f023 0310 	bic.w	r3, r3, #16
 800cf5c:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cf5e:	4b16      	ldr	r3, [pc, #88]	@ (800cfb8 <VCU_ProcessWriteEeprom+0x154>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	f003 0310 	and.w	r3, r3, #16
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00c      	beq.n	800cf84 <VCU_ProcessWriteEeprom+0x120>
 800cf6a:	4b14      	ldr	r3, [pc, #80]	@ (800cfbc <VCU_ProcessWriteEeprom+0x158>)
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	461a      	mov	r2, r3
 800cf76:	4919      	ldr	r1, [pc, #100]	@ (800cfdc <VCU_ProcessWriteEeprom+0x178>)
 800cf78:	4812      	ldr	r0, [pc, #72]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800cf7a:	f008 f8a7 	bl	80150cc <siprintf>
 800cf7e:	4811      	ldr	r0, [pc, #68]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800cf80:	f7f8 fb5c 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cf84:	2000      	movs	r0, #0
 800cf86:	f7ff fc43 	bl	800c810 <VCU_TransmitMessageQueue>
 800cf8a:	e00e      	b.n	800cfaa <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb8 <VCU_ProcessWriteEeprom+0x154>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d008      	beq.n	800cfaa <VCU_ProcessWriteEeprom+0x146>
 800cf98:	8a3b      	ldrh	r3, [r7, #16]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	4910      	ldr	r1, [pc, #64]	@ (800cfe0 <VCU_ProcessWriteEeprom+0x17c>)
 800cf9e:	4809      	ldr	r0, [pc, #36]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800cfa0:	f008 f894 	bl	80150cc <siprintf>
 800cfa4:	4807      	ldr	r0, [pc, #28]	@ (800cfc4 <VCU_ProcessWriteEeprom+0x160>)
 800cfa6:	f7f8 fb49 	bl	800563c <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800cfaa:	f7fa f827 	bl	8006ffc <PCU_Initialize>
}
 800cfae:	bf00      	nop
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000000c 	.word	0x2000000c
 800cfbc:	2000a758 	.word	0x2000a758
 800cfc0:	0801a534 	.word	0x0801a534
 800cfc4:	20000b5c 	.word	0x20000b5c
 800cfc8:	20000d20 	.word	0x20000d20
 800cfcc:	2000a6ec 	.word	0x2000a6ec
 800cfd0:	200005d0 	.word	0x200005d0
 800cfd4:	2000a7b4 	.word	0x2000a7b4
 800cfd8:	2000a764 	.word	0x2000a764
 800cfdc:	0801a4f0 	.word	0x0801a4f0
 800cfe0:	0801a554 	.word	0x0801a554

0800cfe4 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	af00      	add	r7, sp, #0

}
 800cfe8:	bf00      	nop
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
	...

0800cff4 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800cffa:	4b16      	ldr	r3, [pc, #88]	@ (800d054 <VCU_TicksSinceLastMessage+0x60>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d000:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800d002:	4b15      	ldr	r3, [pc, #84]	@ (800d058 <VCU_TicksSinceLastMessage+0x64>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800d008:	4b14      	ldr	r3, [pc, #80]	@ (800d05c <VCU_TicksSinceLastMessage+0x68>)
 800d00a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d105      	bne.n	800d01e <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800d012:	4b12      	ldr	r3, [pc, #72]	@ (800d05c <VCU_TicksSinceLastMessage+0x68>)
 800d014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	e013      	b.n	800d046 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800d01e:	4b0d      	ldr	r3, [pc, #52]	@ (800d054 <VCU_TicksSinceLastMessage+0x60>)
 800d020:	68da      	ldr	r2, [r3, #12]
 800d022:	4b0e      	ldr	r3, [pc, #56]	@ (800d05c <VCU_TicksSinceLastMessage+0x68>)
 800d024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	4b0a      	ldr	r3, [pc, #40]	@ (800d054 <VCU_TicksSinceLastMessage+0x60>)
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	3301      	adds	r3, #1
 800d02e:	490b      	ldr	r1, [pc, #44]	@ (800d05c <VCU_TicksSinceLastMessage+0x68>)
 800d030:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	1a41      	subs	r1, r0, r1
 800d036:	3901      	subs	r1, #1
 800d038:	fb01 f303 	mul.w	r3, r1, r3
 800d03c:	441a      	add	r2, r3
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	4413      	add	r3, r2
 800d042:	3301      	adds	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800d046:	68fb      	ldr	r3, [r7, #12]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	200005d0 	.word	0x200005d0
 800d058:	20000d20 	.word	0x20000d20
 800d05c:	2000a6ec 	.word	0x2000a6ec

0800d060 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800d066:	f04f 0300 	mov.w	r3, #0
 800d06a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800d072:	4b67      	ldr	r3, [pc, #412]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d074:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f3 fa3b 	bl	80004f4 <__aeabi_i2d>
 800d07e:	f04f 0200 	mov.w	r2, #0
 800d082:	4b64      	ldr	r3, [pc, #400]	@ (800d214 <VCU_TransmitBmsState+0x1b4>)
 800d084:	f7f3 faa0 	bl	80005c8 <__aeabi_dmul>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	4610      	mov	r0, r2
 800d08e:	4619      	mov	r1, r3
 800d090:	f04f 0200 	mov.w	r2, #0
 800d094:	f04f 0300 	mov.w	r3, #0
 800d098:	f7f3 f8e0 	bl	800025c <__adddf3>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	f7f3 fd88 	bl	8000bb8 <__aeabi_d2f>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800d0ac:	6978      	ldr	r0, [r7, #20]
 800d0ae:	f7f3 fa33 	bl	8000518 <__aeabi_f2d>
 800d0b2:	a355      	add	r3, pc, #340	@ (adr r3, 800d208 <VCU_TransmitBmsState+0x1a8>)
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f7f3 fbb0 	bl	800081c <__aeabi_ddiv>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	f7f3 fd78 	bl	8000bb8 <__aeabi_d2f>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800d0cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0d4:	edc7 7a01 	vstr	s15, [r7, #4]
 800d0d8:	793b      	ldrb	r3, [r7, #4]
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	893b      	ldrh	r3, [r7, #8]
 800d0de:	f362 0389 	bfi	r3, r2, #2, #8
 800d0e2:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800d0e4:	4b4a      	ldr	r3, [pc, #296]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d0e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	7a3b      	ldrb	r3, [r7, #8]
 800d0f2:	f362 0301 	bfi	r3, r2, #0, #2
 800d0f6:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800d0f8:	4b45      	ldr	r3, [pc, #276]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d0fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d0fe:	f003 0303 	and.w	r3, r3, #3
 800d102:	b2da      	uxtb	r2, r3
 800d104:	7a7b      	ldrb	r3, [r7, #9]
 800d106:	f362 0383 	bfi	r3, r2, #2, #2
 800d10a:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800d10c:	4b40      	ldr	r3, [pc, #256]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d10e:	7d9b      	ldrb	r3, [r3, #22]
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	b2da      	uxtb	r2, r3
 800d116:	7a7b      	ldrb	r3, [r7, #9]
 800d118:	f362 1304 	bfi	r3, r2, #4, #1
 800d11c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800d11e:	4b3c      	ldr	r3, [pc, #240]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d120:	7d5b      	ldrb	r3, [r3, #21]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	b2da      	uxtb	r2, r3
 800d128:	7a7b      	ldrb	r3, [r7, #9]
 800d12a:	f362 1345 	bfi	r3, r2, #5, #1
 800d12e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800d130:	4b37      	ldr	r3, [pc, #220]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d132:	7ddb      	ldrb	r3, [r3, #23]
 800d134:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800d136:	4b36      	ldr	r3, [pc, #216]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d138:	7e1b      	ldrb	r3, [r3, #24]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d004      	beq.n	800d148 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800d13e:	7a7b      	ldrb	r3, [r7, #9]
 800d140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d144:	727b      	strb	r3, [r7, #9]
 800d146:	e003      	b.n	800d150 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800d148:	7a7b      	ldrb	r3, [r7, #9]
 800d14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d14e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800d150:	4b2f      	ldr	r3, [pc, #188]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d152:	7d1b      	ldrb	r3, [r3, #20]
 800d154:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800d156:	7a7b      	ldrb	r3, [r7, #9]
 800d158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d15c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d162:	4b2d      	ldr	r3, [pc, #180]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d168:	4b2b      	ldr	r3, [pc, #172]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d16e:	4b2a      	ldr	r3, [pc, #168]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d170:	2200      	movs	r2, #0
 800d172:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800d174:	4b29      	ldr	r3, [pc, #164]	@ (800d21c <VCU_TransmitBmsState+0x1bc>)
 800d176:	461a      	mov	r2, r3
 800d178:	f107 0308 	add.w	r3, r7, #8
 800d17c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d180:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d184:	4b22      	ldr	r3, [pc, #136]	@ (800d210 <VCU_TransmitBmsState+0x1b0>)
 800d186:	895b      	ldrh	r3, [r3, #10]
 800d188:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d192:	b299      	uxth	r1, r3
 800d194:	4a20      	ldr	r2, [pc, #128]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d196:	8813      	ldrh	r3, [r2, #0]
 800d198:	f361 030a 	bfi	r3, r1, #0, #11
 800d19c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d19e:	4a1e      	ldr	r2, [pc, #120]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1a0:	6813      	ldr	r3, [r2, #0]
 800d1a2:	f36f 23dc 	bfc	r3, #11, #18
 800d1a6:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d1a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1aa:	7913      	ldrb	r3, [r2, #4]
 800d1ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1b0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d1b2:	4a19      	ldr	r2, [pc, #100]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1b4:	7913      	ldrb	r3, [r2, #4]
 800d1b6:	2108      	movs	r1, #8
 800d1b8:	f361 0303 	bfi	r3, r1, #0, #4
 800d1bc:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d1be:	4a16      	ldr	r2, [pc, #88]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1c0:	7913      	ldrb	r3, [r2, #4]
 800d1c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1c6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d1c8:	4a13      	ldr	r2, [pc, #76]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1ca:	7913      	ldrb	r3, [r2, #4]
 800d1cc:	f023 0310 	bic.w	r3, r3, #16
 800d1d0:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d1d2:	4b13      	ldr	r3, [pc, #76]	@ (800d220 <VCU_TransmitBmsState+0x1c0>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 0310 	and.w	r3, r3, #16
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00c      	beq.n	800d1f8 <VCU_TransmitBmsState+0x198>
 800d1de:	4b0e      	ldr	r3, [pc, #56]	@ (800d218 <VCU_TransmitBmsState+0x1b8>)
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	490e      	ldr	r1, [pc, #56]	@ (800d224 <VCU_TransmitBmsState+0x1c4>)
 800d1ec:	480e      	ldr	r0, [pc, #56]	@ (800d228 <VCU_TransmitBmsState+0x1c8>)
 800d1ee:	f007 ff6d 	bl	80150cc <siprintf>
 800d1f2:	480d      	ldr	r0, [pc, #52]	@ (800d228 <VCU_TransmitBmsState+0x1c8>)
 800d1f4:	f7f8 fa22 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	f7ff fb09 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800d1fe:	bf00      	nop
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	9999999a 	.word	0x9999999a
 800d20c:	3fd99999 	.word	0x3fd99999
 800d210:	2000a6ec 	.word	0x2000a6ec
 800d214:	3fe00000 	.word	0x3fe00000
 800d218:	2000a758 	.word	0x2000a758
 800d21c:	2000a764 	.word	0x2000a764
 800d220:	2000000c 	.word	0x2000000c
 800d224:	0801a578 	.word	0x0801a578
 800d228:	20000b5c 	.word	0x20000b5c
 800d22c:	00000000 	.word	0x00000000

0800d230 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800d236:	f04f 0300 	mov.w	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d23c:	f04f 0300 	mov.w	r3, #0
 800d240:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800d242:	4b65      	ldr	r3, [pc, #404]	@ (800d3d8 <VCU_TransmitBmsData1+0x1a8>)
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f3 f944 	bl	80004d4 <__aeabi_ui2d>
 800d24c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d3c8 <VCU_TransmitBmsData1+0x198>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f9b9 	bl	80005c8 <__aeabi_dmul>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4610      	mov	r0, r2
 800d25c:	4619      	mov	r1, r3
 800d25e:	f04f 0200 	mov.w	r2, #0
 800d262:	4b5e      	ldr	r3, [pc, #376]	@ (800d3dc <VCU_TransmitBmsData1+0x1ac>)
 800d264:	f7f2 fff8 	bl	8000258 <__aeabi_dsub>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	4610      	mov	r0, r2
 800d26e:	4619      	mov	r1, r3
 800d270:	f7f3 fca2 	bl	8000bb8 <__aeabi_d2f>
 800d274:	4603      	mov	r3, r0
 800d276:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f7f3 f94d 	bl	8000518 <__aeabi_f2d>
 800d27e:	a352      	add	r3, pc, #328	@ (adr r3, 800d3c8 <VCU_TransmitBmsData1+0x198>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f3 faca 	bl	800081c <__aeabi_ddiv>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4610      	mov	r0, r2
 800d28e:	4619      	mov	r1, r3
 800d290:	f04f 0200 	mov.w	r2, #0
 800d294:	4b52      	ldr	r3, [pc, #328]	@ (800d3e0 <VCU_TransmitBmsData1+0x1b0>)
 800d296:	f7f2 ffe1 	bl	800025c <__adddf3>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4610      	mov	r0, r2
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f7f3 fc89 	bl	8000bb8 <__aeabi_d2f>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800d2aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800d2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2b2:	ee17 3a90 	vmov	r3, s15
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800d2ba:	4b47      	ldr	r3, [pc, #284]	@ (800d3d8 <VCU_TransmitBmsData1+0x1a8>)
 800d2bc:	899b      	ldrh	r3, [r3, #12]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f3 f918 	bl	80004f4 <__aeabi_i2d>
 800d2c4:	a342      	add	r3, pc, #264	@ (adr r3, 800d3d0 <VCU_TransmitBmsData1+0x1a0>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	f7f3 f97d 	bl	80005c8 <__aeabi_dmul>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f04f 0200 	mov.w	r2, #0
 800d2da:	f04f 0300 	mov.w	r3, #0
 800d2de:	f7f2 ffbd 	bl	800025c <__adddf3>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4610      	mov	r0, r2
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f7f3 fc65 	bl	8000bb8 <__aeabi_d2f>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f7f3 f910 	bl	8000518 <__aeabi_f2d>
 800d2f8:	a333      	add	r3, pc, #204	@ (adr r3, 800d3c8 <VCU_TransmitBmsData1+0x198>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f3 fa8d 	bl	800081c <__aeabi_ddiv>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4610      	mov	r0, r2
 800d308:	4619      	mov	r1, r3
 800d30a:	f7f3 fc55 	bl	8000bb8 <__aeabi_d2f>
 800d30e:	4603      	mov	r3, r0
 800d310:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800d312:	edd7 7a02 	vldr	s15, [r7, #8]
 800d316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d31a:	ee17 3a90 	vmov	r3, s15
 800d31e:	b29b      	uxth	r3, r3
 800d320:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d326:	4b2f      	ldr	r3, [pc, #188]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d32c:	4b2d      	ldr	r3, [pc, #180]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d32e:	2200      	movs	r2, #0
 800d330:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d332:	4b2c      	ldr	r3, [pc, #176]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d334:	2200      	movs	r2, #0
 800d336:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800d338:	4b2b      	ldr	r3, [pc, #172]	@ (800d3e8 <VCU_TransmitBmsData1+0x1b8>)
 800d33a:	461a      	mov	r2, r3
 800d33c:	463b      	mov	r3, r7
 800d33e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d342:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d346:	4b24      	ldr	r3, [pc, #144]	@ (800d3d8 <VCU_TransmitBmsData1+0x1a8>)
 800d348:	895b      	ldrh	r3, [r3, #10]
 800d34a:	f203 4321 	addw	r3, r3, #1057	@ 0x421
 800d34e:	b29b      	uxth	r3, r3
 800d350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d354:	b299      	uxth	r1, r3
 800d356:	4a23      	ldr	r2, [pc, #140]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d358:	8813      	ldrh	r3, [r2, #0]
 800d35a:	f361 030a 	bfi	r3, r1, #0, #11
 800d35e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d360:	4a20      	ldr	r2, [pc, #128]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d362:	6813      	ldr	r3, [r2, #0]
 800d364:	f36f 23dc 	bfc	r3, #11, #18
 800d368:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d36a:	4a1e      	ldr	r2, [pc, #120]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d36c:	7913      	ldrb	r3, [r2, #4]
 800d36e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d372:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d374:	4a1b      	ldr	r2, [pc, #108]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d376:	7913      	ldrb	r3, [r2, #4]
 800d378:	2108      	movs	r1, #8
 800d37a:	f361 0303 	bfi	r3, r1, #0, #4
 800d37e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d380:	4a18      	ldr	r2, [pc, #96]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d382:	7913      	ldrb	r3, [r2, #4]
 800d384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d388:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d38a:	4a16      	ldr	r2, [pc, #88]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d38c:	7913      	ldrb	r3, [r2, #4]
 800d38e:	f023 0310 	bic.w	r3, r3, #16
 800d392:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d394:	4b15      	ldr	r3, [pc, #84]	@ (800d3ec <VCU_TransmitBmsData1+0x1bc>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00c      	beq.n	800d3ba <VCU_TransmitBmsData1+0x18a>
 800d3a0:	4b10      	ldr	r3, [pc, #64]	@ (800d3e4 <VCU_TransmitBmsData1+0x1b4>)
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	4910      	ldr	r1, [pc, #64]	@ (800d3f0 <VCU_TransmitBmsData1+0x1c0>)
 800d3ae:	4811      	ldr	r0, [pc, #68]	@ (800d3f4 <VCU_TransmitBmsData1+0x1c4>)
 800d3b0:	f007 fe8c 	bl	80150cc <siprintf>
 800d3b4:	480f      	ldr	r0, [pc, #60]	@ (800d3f4 <VCU_TransmitBmsData1+0x1c4>)
 800d3b6:	f7f8 f941 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	f7ff fa28 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800d3c0:	bf00      	nop
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	9999999a 	.word	0x9999999a
 800d3cc:	3fa99999 	.word	0x3fa99999
 800d3d0:	eb851eb8 	.word	0xeb851eb8
 800d3d4:	3f8eb851 	.word	0x3f8eb851
 800d3d8:	2000a6ec 	.word	0x2000a6ec
 800d3dc:	40990000 	.word	0x40990000
 800d3e0:	40df4000 	.word	0x40df4000
 800d3e4:	2000a758 	.word	0x2000a758
 800d3e8:	2000a764 	.word	0x2000a764
 800d3ec:	2000000c 	.word	0x2000000c
 800d3f0:	0801a590 	.word	0x0801a590
 800d3f4:	20000b5c 	.word	0x20000b5c

0800d3f8 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800d3fe:	f04f 0300 	mov.w	r3, #0
 800d402:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d404:	f04f 0300 	mov.w	r3, #0
 800d408:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800d40a:	4b95      	ldr	r3, [pc, #596]	@ (800d660 <VCU_TransmitBmsData2+0x268>)
 800d40c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d410:	4618      	mov	r0, r3
 800d412:	f7f3 f86f 	bl	80004f4 <__aeabi_i2d>
 800d416:	f04f 0200 	mov.w	r2, #0
 800d41a:	4b92      	ldr	r3, [pc, #584]	@ (800d664 <VCU_TransmitBmsData2+0x26c>)
 800d41c:	f7f3 f8d4 	bl	80005c8 <__aeabi_dmul>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	4610      	mov	r0, r2
 800d426:	4619      	mov	r1, r3
 800d428:	f04f 0200 	mov.w	r2, #0
 800d42c:	f04f 0300 	mov.w	r3, #0
 800d430:	f7f2 ff14 	bl	800025c <__adddf3>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4610      	mov	r0, r2
 800d43a:	4619      	mov	r1, r3
 800d43c:	f7f3 fbbc 	bl	8000bb8 <__aeabi_d2f>
 800d440:	4603      	mov	r3, r0
 800d442:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7f3 f867 	bl	8000518 <__aeabi_f2d>
 800d44a:	a381      	add	r3, pc, #516	@ (adr r3, 800d650 <VCU_TransmitBmsData2+0x258>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	f7f3 f9e4 	bl	800081c <__aeabi_ddiv>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	4610      	mov	r0, r2
 800d45a:	4619      	mov	r1, r3
 800d45c:	f7f3 fbac 	bl	8000bb8 <__aeabi_d2f>
 800d460:	4603      	mov	r3, r0
 800d462:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800d464:	edd7 7a02 	vldr	s15, [r7, #8]
 800d468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d46c:	ee17 3a90 	vmov	r3, s15
 800d470:	b29b      	uxth	r3, r3
 800d472:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800d474:	4b7a      	ldr	r3, [pc, #488]	@ (800d660 <VCU_TransmitBmsData2+0x268>)
 800d476:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f3 f83b 	bl	80004f4 <__aeabi_i2d>
 800d47e:	a376      	add	r3, pc, #472	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f3 f8a0 	bl	80005c8 <__aeabi_dmul>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4610      	mov	r0, r2
 800d48e:	4619      	mov	r1, r3
 800d490:	f04f 0200 	mov.w	r2, #0
 800d494:	f04f 0300 	mov.w	r3, #0
 800d498:	f7f2 fee0 	bl	800025c <__adddf3>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	f7f3 fb88 	bl	8000bb8 <__aeabi_d2f>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7f3 f833 	bl	8000518 <__aeabi_f2d>
 800d4b2:	a369      	add	r3, pc, #420	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	f7f3 f9b0 	bl	800081c <__aeabi_ddiv>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	4610      	mov	r0, r2
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f7f3 fb78 	bl	8000bb8 <__aeabi_d2f>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800d4cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4d4:	ee17 3a90 	vmov	r3, s15
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800d4dc:	4b60      	ldr	r3, [pc, #384]	@ (800d660 <VCU_TransmitBmsData2+0x268>)
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7f3 f807 	bl	80004f4 <__aeabi_i2d>
 800d4e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	f7f3 f86c 	bl	80005c8 <__aeabi_dmul>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	f04f 0200 	mov.w	r2, #0
 800d4fc:	f04f 0300 	mov.w	r3, #0
 800d500:	f7f2 feac 	bl	800025c <__adddf3>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	4610      	mov	r0, r2
 800d50a:	4619      	mov	r1, r3
 800d50c:	f7f3 fb54 	bl	8000bb8 <__aeabi_d2f>
 800d510:	4603      	mov	r3, r0
 800d512:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f7f2 ffff 	bl	8000518 <__aeabi_f2d>
 800d51a:	a34f      	add	r3, pc, #316	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f7f3 f97c 	bl	800081c <__aeabi_ddiv>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4610      	mov	r0, r2
 800d52a:	4619      	mov	r1, r3
 800d52c:	f7f3 fb44 	bl	8000bb8 <__aeabi_d2f>
 800d530:	4603      	mov	r3, r0
 800d532:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800d534:	edd7 7a02 	vldr	s15, [r7, #8]
 800d538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d53c:	ee17 3a90 	vmov	r3, s15
 800d540:	b29b      	uxth	r3, r3
 800d542:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800d544:	4b46      	ldr	r3, [pc, #280]	@ (800d660 <VCU_TransmitBmsData2+0x268>)
 800d546:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d548:	4618      	mov	r0, r3
 800d54a:	f7f2 ffd3 	bl	80004f4 <__aeabi_i2d>
 800d54e:	a342      	add	r3, pc, #264	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	f7f3 f838 	bl	80005c8 <__aeabi_dmul>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4610      	mov	r0, r2
 800d55e:	4619      	mov	r1, r3
 800d560:	f04f 0200 	mov.w	r2, #0
 800d564:	f04f 0300 	mov.w	r3, #0
 800d568:	f7f2 fe78 	bl	800025c <__adddf3>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4610      	mov	r0, r2
 800d572:	4619      	mov	r1, r3
 800d574:	f7f3 fb20 	bl	8000bb8 <__aeabi_d2f>
 800d578:	4603      	mov	r3, r0
 800d57a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7f2 ffcb 	bl	8000518 <__aeabi_f2d>
 800d582:	a335      	add	r3, pc, #212	@ (adr r3, 800d658 <VCU_TransmitBmsData2+0x260>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	f7f3 f948 	bl	800081c <__aeabi_ddiv>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4610      	mov	r0, r2
 800d592:	4619      	mov	r1, r3
 800d594:	f7f3 fb10 	bl	8000bb8 <__aeabi_d2f>
 800d598:	4603      	mov	r3, r0
 800d59a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800d59c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a4:	ee17 3a90 	vmov	r3, s15
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d5ac:	4b2e      	ldr	r3, [pc, #184]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d5b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d5b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800d5be:	4b2b      	ldr	r3, [pc, #172]	@ (800d66c <VCU_TransmitBmsData2+0x274>)
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	463b      	mov	r3, r7
 800d5c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5c8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d5cc:	4b24      	ldr	r3, [pc, #144]	@ (800d660 <VCU_TransmitBmsData2+0x268>)
 800d5ce:	895b      	ldrh	r3, [r3, #10]
 800d5d0:	f203 4322 	addw	r3, r3, #1058	@ 0x422
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5da:	b299      	uxth	r1, r3
 800d5dc:	4a22      	ldr	r2, [pc, #136]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5de:	8813      	ldrh	r3, [r2, #0]
 800d5e0:	f361 030a 	bfi	r3, r1, #0, #11
 800d5e4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d5e6:	4a20      	ldr	r2, [pc, #128]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5e8:	6813      	ldr	r3, [r2, #0]
 800d5ea:	f36f 23dc 	bfc	r3, #11, #18
 800d5ee:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5f2:	7913      	ldrb	r3, [r2, #4]
 800d5f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5f8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d5fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d5fc:	7913      	ldrb	r3, [r2, #4]
 800d5fe:	2108      	movs	r1, #8
 800d600:	f361 0303 	bfi	r3, r1, #0, #4
 800d604:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d606:	4a18      	ldr	r2, [pc, #96]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d608:	7913      	ldrb	r3, [r2, #4]
 800d60a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d60e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d610:	4a15      	ldr	r2, [pc, #84]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d612:	7913      	ldrb	r3, [r2, #4]
 800d614:	f023 0310 	bic.w	r3, r3, #16
 800d618:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d61a:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <VCU_TransmitBmsData2+0x278>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0310 	and.w	r3, r3, #16
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00c      	beq.n	800d640 <VCU_TransmitBmsData2+0x248>
 800d626:	4b10      	ldr	r3, [pc, #64]	@ (800d668 <VCU_TransmitBmsData2+0x270>)
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d62e:	b29b      	uxth	r3, r3
 800d630:	461a      	mov	r2, r3
 800d632:	4910      	ldr	r1, [pc, #64]	@ (800d674 <VCU_TransmitBmsData2+0x27c>)
 800d634:	4810      	ldr	r0, [pc, #64]	@ (800d678 <VCU_TransmitBmsData2+0x280>)
 800d636:	f007 fd49 	bl	80150cc <siprintf>
 800d63a:	480f      	ldr	r0, [pc, #60]	@ (800d678 <VCU_TransmitBmsData2+0x280>)
 800d63c:	f7f7 fffe 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d640:	2000      	movs	r0, #0
 800d642:	f7ff f8e5 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	9999999a 	.word	0x9999999a
 800d654:	3f599999 	.word	0x3f599999
 800d658:	d2f1a9fc 	.word	0xd2f1a9fc
 800d65c:	3f50624d 	.word	0x3f50624d
 800d660:	2000a6ec 	.word	0x2000a6ec
 800d664:	3fe00000 	.word	0x3fe00000
 800d668:	2000a758 	.word	0x2000a758
 800d66c:	2000a764 	.word	0x2000a764
 800d670:	2000000c 	.word	0x2000000c
 800d674:	0801a5ac 	.word	0x0801a5ac
 800d678:	20000b5c 	.word	0x20000b5c
 800d67c:	00000000 	.word	0x00000000

0800d680 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800d686:	f04f 0300 	mov.w	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d68c:	f04f 0300 	mov.w	r3, #0
 800d690:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800d692:	4b89      	ldr	r3, [pc, #548]	@ (800d8b8 <VCU_TransmitBmsData3+0x238>)
 800d694:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d696:	4618      	mov	r0, r3
 800d698:	f7f2 ff2c 	bl	80004f4 <__aeabi_i2d>
 800d69c:	a380      	add	r3, pc, #512	@ (adr r3, 800d8a0 <VCU_TransmitBmsData3+0x220>)
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	f7f2 ff91 	bl	80005c8 <__aeabi_dmul>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	a37e      	add	r3, pc, #504	@ (adr r3, 800d8a8 <VCU_TransmitBmsData3+0x228>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 fdd0 	bl	8000258 <__aeabi_dsub>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f7f3 fa7a 	bl	8000bb8 <__aeabi_d2f>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7f2 ff25 	bl	8000518 <__aeabi_f2d>
 800d6ce:	f04f 0200 	mov.w	r2, #0
 800d6d2:	4b7a      	ldr	r3, [pc, #488]	@ (800d8bc <VCU_TransmitBmsData3+0x23c>)
 800d6d4:	f7f3 f8a2 	bl	800081c <__aeabi_ddiv>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4610      	mov	r0, r2
 800d6de:	4619      	mov	r1, r3
 800d6e0:	a373      	add	r3, pc, #460	@ (adr r3, 800d8b0 <VCU_TransmitBmsData3+0x230>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f2 fdb9 	bl	800025c <__adddf3>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	f7f3 fa61 	bl	8000bb8 <__aeabi_d2f>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800d6fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d702:	ee17 3a90 	vmov	r3, s15
 800d706:	b29b      	uxth	r3, r3
 800d708:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800d70a:	4b6b      	ldr	r3, [pc, #428]	@ (800d8b8 <VCU_TransmitBmsData3+0x238>)
 800d70c:	8bdb      	ldrh	r3, [r3, #30]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7f2 fef0 	bl	80004f4 <__aeabi_i2d>
 800d714:	a362      	add	r3, pc, #392	@ (adr r3, 800d8a0 <VCU_TransmitBmsData3+0x220>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f2 ff55 	bl	80005c8 <__aeabi_dmul>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	4610      	mov	r0, r2
 800d724:	4619      	mov	r1, r3
 800d726:	a360      	add	r3, pc, #384	@ (adr r3, 800d8a8 <VCU_TransmitBmsData3+0x228>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f7f2 fd94 	bl	8000258 <__aeabi_dsub>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4610      	mov	r0, r2
 800d736:	4619      	mov	r1, r3
 800d738:	f7f3 fa3e 	bl	8000bb8 <__aeabi_d2f>
 800d73c:	4603      	mov	r3, r0
 800d73e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7f2 fee9 	bl	8000518 <__aeabi_f2d>
 800d746:	f04f 0200 	mov.w	r2, #0
 800d74a:	4b5c      	ldr	r3, [pc, #368]	@ (800d8bc <VCU_TransmitBmsData3+0x23c>)
 800d74c:	f7f3 f866 	bl	800081c <__aeabi_ddiv>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4610      	mov	r0, r2
 800d756:	4619      	mov	r1, r3
 800d758:	a355      	add	r3, pc, #340	@ (adr r3, 800d8b0 <VCU_TransmitBmsData3+0x230>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f2 fd7d 	bl	800025c <__adddf3>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	f7f3 fa25 	bl	8000bb8 <__aeabi_d2f>
 800d76e:	4603      	mov	r3, r0
 800d770:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800d772:	edd7 7a02 	vldr	s15, [r7, #8]
 800d776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d77a:	ee17 3a90 	vmov	r3, s15
 800d77e:	b29b      	uxth	r3, r3
 800d780:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800d782:	4b4d      	ldr	r3, [pc, #308]	@ (800d8b8 <VCU_TransmitBmsData3+0x238>)
 800d784:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800d786:	4618      	mov	r0, r3
 800d788:	f7f2 feb4 	bl	80004f4 <__aeabi_i2d>
 800d78c:	a344      	add	r3, pc, #272	@ (adr r3, 800d8a0 <VCU_TransmitBmsData3+0x220>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	f7f2 ff19 	bl	80005c8 <__aeabi_dmul>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	4610      	mov	r0, r2
 800d79c:	4619      	mov	r1, r3
 800d79e:	a342      	add	r3, pc, #264	@ (adr r3, 800d8a8 <VCU_TransmitBmsData3+0x228>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f7f2 fd58 	bl	8000258 <__aeabi_dsub>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	f7f3 fa02 	bl	8000bb8 <__aeabi_d2f>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7f2 fead 	bl	8000518 <__aeabi_f2d>
 800d7be:	f04f 0200 	mov.w	r2, #0
 800d7c2:	4b3e      	ldr	r3, [pc, #248]	@ (800d8bc <VCU_TransmitBmsData3+0x23c>)
 800d7c4:	f7f3 f82a 	bl	800081c <__aeabi_ddiv>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	a337      	add	r3, pc, #220	@ (adr r3, 800d8b0 <VCU_TransmitBmsData3+0x230>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f7f2 fd41 	bl	800025c <__adddf3>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4610      	mov	r0, r2
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	f7f3 f9e9 	bl	8000bb8 <__aeabi_d2f>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800d7ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800d7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f2:	ee17 3a90 	vmov	r3, s15
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d7fe:	4b30      	ldr	r3, [pc, #192]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d800:	2200      	movs	r2, #0
 800d802:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d804:	4b2e      	ldr	r3, [pc, #184]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d806:	2200      	movs	r2, #0
 800d808:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d80a:	4b2d      	ldr	r3, [pc, #180]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800d810:	4b2c      	ldr	r3, [pc, #176]	@ (800d8c4 <VCU_TransmitBmsData3+0x244>)
 800d812:	461a      	mov	r2, r3
 800d814:	463b      	mov	r3, r7
 800d816:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d81a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d81e:	4b26      	ldr	r3, [pc, #152]	@ (800d8b8 <VCU_TransmitBmsData3+0x238>)
 800d820:	895b      	ldrh	r3, [r3, #10]
 800d822:	f203 4323 	addw	r3, r3, #1059	@ 0x423
 800d826:	b29b      	uxth	r3, r3
 800d828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d82c:	b299      	uxth	r1, r3
 800d82e:	4a24      	ldr	r2, [pc, #144]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d830:	8813      	ldrh	r3, [r2, #0]
 800d832:	f361 030a 	bfi	r3, r1, #0, #11
 800d836:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800d838:	4a21      	ldr	r2, [pc, #132]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d83a:	6813      	ldr	r3, [r2, #0]
 800d83c:	f36f 23dc 	bfc	r3, #11, #18
 800d840:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d842:	4a1f      	ldr	r2, [pc, #124]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d844:	7913      	ldrb	r3, [r2, #4]
 800d846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d84a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d84c:	4a1c      	ldr	r2, [pc, #112]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d84e:	7913      	ldrb	r3, [r2, #4]
 800d850:	2108      	movs	r1, #8
 800d852:	f361 0303 	bfi	r3, r1, #0, #4
 800d856:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d858:	4a19      	ldr	r2, [pc, #100]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d85a:	7913      	ldrb	r3, [r2, #4]
 800d85c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d860:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d862:	4a17      	ldr	r2, [pc, #92]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d864:	7913      	ldrb	r3, [r2, #4]
 800d866:	f023 0310 	bic.w	r3, r3, #16
 800d86a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d86c:	4b16      	ldr	r3, [pc, #88]	@ (800d8c8 <VCU_TransmitBmsData3+0x248>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 0310 	and.w	r3, r3, #16
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00c      	beq.n	800d892 <VCU_TransmitBmsData3+0x212>
 800d878:	4b11      	ldr	r3, [pc, #68]	@ (800d8c0 <VCU_TransmitBmsData3+0x240>)
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d880:	b29b      	uxth	r3, r3
 800d882:	461a      	mov	r2, r3
 800d884:	4911      	ldr	r1, [pc, #68]	@ (800d8cc <VCU_TransmitBmsData3+0x24c>)
 800d886:	4812      	ldr	r0, [pc, #72]	@ (800d8d0 <VCU_TransmitBmsData3+0x250>)
 800d888:	f007 fc20 	bl	80150cc <siprintf>
 800d88c:	4810      	ldr	r0, [pc, #64]	@ (800d8d0 <VCU_TransmitBmsData3+0x250>)
 800d88e:	f7f7 fed5 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d892:	2000      	movs	r0, #0
 800d894:	f7fe ffbc 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800d898:	bf00      	nop
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	47ae147b 	.word	0x47ae147b
 800d8a4:	3f847ae1 	.word	0x3f847ae1
 800d8a8:	cccccccd 	.word	0xcccccccd
 800d8ac:	404baccc 	.word	0x404baccc
 800d8b0:	00000000 	.word	0x00000000
 800d8b4:	40c11000 	.word	0x40c11000
 800d8b8:	2000a6ec 	.word	0x2000a6ec
 800d8bc:	3fa00000 	.word	0x3fa00000
 800d8c0:	2000a758 	.word	0x2000a758
 800d8c4:	2000a764 	.word	0x2000a764
 800d8c8:	2000000c 	.word	0x2000000c
 800d8cc:	0801a5c8 	.word	0x0801a5c8
 800d8d0:	20000b5c 	.word	0x20000b5c
 800d8d4:	00000000 	.word	0x00000000

0800d8d8 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800d8de:	f04f 0300 	mov.w	r3, #0
 800d8e2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800d8e4:	f04f 0300 	mov.w	r3, #0
 800d8e8:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800d8ea:	4b83      	ldr	r3, [pc, #524]	@ (800daf8 <VCU_TransmitBmsData5+0x220>)
 800d8ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f2 fdf0 	bl	80004d4 <__aeabi_ui2d>
 800d8f4:	a37c      	add	r3, pc, #496	@ (adr r3, 800dae8 <VCU_TransmitBmsData5+0x210>)
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	f7f2 fe65 	bl	80005c8 <__aeabi_dmul>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	4610      	mov	r0, r2
 800d904:	4619      	mov	r1, r3
 800d906:	f04f 0200 	mov.w	r2, #0
 800d90a:	4b7c      	ldr	r3, [pc, #496]	@ (800dafc <VCU_TransmitBmsData5+0x224>)
 800d90c:	f7f2 fca4 	bl	8000258 <__aeabi_dsub>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4610      	mov	r0, r2
 800d916:	4619      	mov	r1, r3
 800d918:	f7f3 f94e 	bl	8000bb8 <__aeabi_d2f>
 800d91c:	4603      	mov	r3, r0
 800d91e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f7f2 fdf9 	bl	8000518 <__aeabi_f2d>
 800d926:	a370      	add	r3, pc, #448	@ (adr r3, 800dae8 <VCU_TransmitBmsData5+0x210>)
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	f7f2 ff76 	bl	800081c <__aeabi_ddiv>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4610      	mov	r0, r2
 800d936:	4619      	mov	r1, r3
 800d938:	f04f 0200 	mov.w	r2, #0
 800d93c:	4b70      	ldr	r3, [pc, #448]	@ (800db00 <VCU_TransmitBmsData5+0x228>)
 800d93e:	f7f2 fc8d 	bl	800025c <__adddf3>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4610      	mov	r0, r2
 800d948:	4619      	mov	r1, r3
 800d94a:	f7f3 f935 	bl	8000bb8 <__aeabi_d2f>
 800d94e:	4603      	mov	r3, r0
 800d950:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800d952:	edd7 7a02 	vldr	s15, [r7, #8]
 800d956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d95a:	ee17 3a90 	vmov	r3, s15
 800d95e:	b29b      	uxth	r3, r3
 800d960:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800d962:	4b65      	ldr	r3, [pc, #404]	@ (800daf8 <VCU_TransmitBmsData5+0x220>)
 800d964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d966:	4618      	mov	r0, r3
 800d968:	f7f2 fdb4 	bl	80004d4 <__aeabi_ui2d>
 800d96c:	a35e      	add	r3, pc, #376	@ (adr r3, 800dae8 <VCU_TransmitBmsData5+0x210>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	f7f2 fe29 	bl	80005c8 <__aeabi_dmul>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4610      	mov	r0, r2
 800d97c:	4619      	mov	r1, r3
 800d97e:	f04f 0200 	mov.w	r2, #0
 800d982:	4b5e      	ldr	r3, [pc, #376]	@ (800dafc <VCU_TransmitBmsData5+0x224>)
 800d984:	f7f2 fc68 	bl	8000258 <__aeabi_dsub>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4610      	mov	r0, r2
 800d98e:	4619      	mov	r1, r3
 800d990:	f7f3 f912 	bl	8000bb8 <__aeabi_d2f>
 800d994:	4603      	mov	r3, r0
 800d996:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f7f2 fdbd 	bl	8000518 <__aeabi_f2d>
 800d99e:	a352      	add	r3, pc, #328	@ (adr r3, 800dae8 <VCU_TransmitBmsData5+0x210>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 ff3a 	bl	800081c <__aeabi_ddiv>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f04f 0200 	mov.w	r2, #0
 800d9b4:	4b52      	ldr	r3, [pc, #328]	@ (800db00 <VCU_TransmitBmsData5+0x228>)
 800d9b6:	f7f2 fc51 	bl	800025c <__adddf3>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4610      	mov	r0, r2
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	f7f3 f8f9 	bl	8000bb8 <__aeabi_d2f>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800d9ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9d2:	ee17 3a90 	vmov	r3, s15
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800d9da:	4b47      	ldr	r3, [pc, #284]	@ (800daf8 <VCU_TransmitBmsData5+0x220>)
 800d9dc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7f2 fd88 	bl	80004f4 <__aeabi_i2d>
 800d9e4:	a342      	add	r3, pc, #264	@ (adr r3, 800daf0 <VCU_TransmitBmsData5+0x218>)
 800d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ea:	f7f2 fded 	bl	80005c8 <__aeabi_dmul>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	f04f 0200 	mov.w	r2, #0
 800d9fa:	f04f 0300 	mov.w	r3, #0
 800d9fe:	f7f2 fc2d 	bl	800025c <__adddf3>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4610      	mov	r0, r2
 800da08:	4619      	mov	r1, r3
 800da0a:	f7f3 f8d5 	bl	8000bb8 <__aeabi_d2f>
 800da0e:	4603      	mov	r3, r0
 800da10:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f7f2 fd80 	bl	8000518 <__aeabi_f2d>
 800da18:	a333      	add	r3, pc, #204	@ (adr r3, 800dae8 <VCU_TransmitBmsData5+0x210>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 fefd 	bl	800081c <__aeabi_ddiv>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4610      	mov	r0, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	f7f3 f8c5 	bl	8000bb8 <__aeabi_d2f>
 800da2e:	4603      	mov	r3, r0
 800da30:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800da32:	edd7 7a02 	vldr	s15, [r7, #8]
 800da36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da3a:	ee17 3a90 	vmov	r3, s15
 800da3e:	b29b      	uxth	r3, r3
 800da40:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800da42:	2300      	movs	r3, #0
 800da44:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800da46:	4b2f      	ldr	r3, [pc, #188]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800da4c:	4b2d      	ldr	r3, [pc, #180]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da4e:	2200      	movs	r2, #0
 800da50:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800da52:	4b2c      	ldr	r3, [pc, #176]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da54:	2200      	movs	r2, #0
 800da56:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800da58:	4b2b      	ldr	r3, [pc, #172]	@ (800db08 <VCU_TransmitBmsData5+0x230>)
 800da5a:	461a      	mov	r2, r3
 800da5c:	463b      	mov	r3, r7
 800da5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da62:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800da66:	4b24      	ldr	r3, [pc, #144]	@ (800daf8 <VCU_TransmitBmsData5+0x220>)
 800da68:	895b      	ldrh	r3, [r3, #10]
 800da6a:	f203 4325 	addw	r3, r3, #1061	@ 0x425
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da74:	b299      	uxth	r1, r3
 800da76:	4a23      	ldr	r2, [pc, #140]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da78:	8813      	ldrh	r3, [r2, #0]
 800da7a:	f361 030a 	bfi	r3, r1, #0, #11
 800da7e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800da80:	4a20      	ldr	r2, [pc, #128]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da82:	6813      	ldr	r3, [r2, #0]
 800da84:	f36f 23dc 	bfc	r3, #11, #18
 800da88:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800da8a:	4a1e      	ldr	r2, [pc, #120]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da8c:	7913      	ldrb	r3, [r2, #4]
 800da8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da92:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800da94:	4a1b      	ldr	r2, [pc, #108]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800da96:	7913      	ldrb	r3, [r2, #4]
 800da98:	2108      	movs	r1, #8
 800da9a:	f361 0303 	bfi	r3, r1, #0, #4
 800da9e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800daa0:	4a18      	ldr	r2, [pc, #96]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800daa2:	7913      	ldrb	r3, [r2, #4]
 800daa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800daa8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800daaa:	4a16      	ldr	r2, [pc, #88]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800daac:	7913      	ldrb	r3, [r2, #4]
 800daae:	f023 0310 	bic.w	r3, r3, #16
 800dab2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dab4:	4b15      	ldr	r3, [pc, #84]	@ (800db0c <VCU_TransmitBmsData5+0x234>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	f003 0310 	and.w	r3, r3, #16
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00c      	beq.n	800dada <VCU_TransmitBmsData5+0x202>
 800dac0:	4b10      	ldr	r3, [pc, #64]	@ (800db04 <VCU_TransmitBmsData5+0x22c>)
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dac8:	b29b      	uxth	r3, r3
 800daca:	461a      	mov	r2, r3
 800dacc:	4910      	ldr	r1, [pc, #64]	@ (800db10 <VCU_TransmitBmsData5+0x238>)
 800dace:	4811      	ldr	r0, [pc, #68]	@ (800db14 <VCU_TransmitBmsData5+0x23c>)
 800dad0:	f007 fafc 	bl	80150cc <siprintf>
 800dad4:	480f      	ldr	r0, [pc, #60]	@ (800db14 <VCU_TransmitBmsData5+0x23c>)
 800dad6:	f7f7 fdb1 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dada:	2000      	movs	r0, #0
 800dadc:	f7fe fe98 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	9999999a 	.word	0x9999999a
 800daec:	3fa99999 	.word	0x3fa99999
 800daf0:	eb851eb8 	.word	0xeb851eb8
 800daf4:	3f8eb851 	.word	0x3f8eb851
 800daf8:	2000a6ec 	.word	0x2000a6ec
 800dafc:	40990000 	.word	0x40990000
 800db00:	40df4000 	.word	0x40df4000
 800db04:	2000a758 	.word	0x2000a758
 800db08:	2000a764 	.word	0x2000a764
 800db0c:	2000000c 	.word	0x2000000c
 800db10:	0801a5e4 	.word	0x0801a5e4
 800db14:	20000b5c 	.word	0x20000b5c

0800db18 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800db22:	2300      	movs	r3, #0
 800db24:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800db26:	4b2d      	ldr	r3, [pc, #180]	@ (800dbdc <VCU_TransmitBmsData8+0xc4>)
 800db28:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800db2c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800db2e:	2300      	movs	r3, #0
 800db30:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800db32:	4b2a      	ldr	r3, [pc, #168]	@ (800dbdc <VCU_TransmitBmsData8+0xc4>)
 800db34:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800db38:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800db3a:	4b29      	ldr	r3, [pc, #164]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800db40:	4b27      	ldr	r3, [pc, #156]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db42:	2200      	movs	r2, #0
 800db44:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800db46:	4b26      	ldr	r3, [pc, #152]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db48:	2200      	movs	r2, #0
 800db4a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800db4c:	4b25      	ldr	r3, [pc, #148]	@ (800dbe4 <VCU_TransmitBmsData8+0xcc>)
 800db4e:	461a      	mov	r2, r3
 800db50:	463b      	mov	r3, r7
 800db52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800db56:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800db5a:	4b20      	ldr	r3, [pc, #128]	@ (800dbdc <VCU_TransmitBmsData8+0xc4>)
 800db5c:	895b      	ldrh	r3, [r3, #10]
 800db5e:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800db62:	b29b      	uxth	r3, r3
 800db64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db68:	b299      	uxth	r1, r3
 800db6a:	4a1d      	ldr	r2, [pc, #116]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db6c:	8813      	ldrh	r3, [r2, #0]
 800db6e:	f361 030a 	bfi	r3, r1, #0, #11
 800db72:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800db74:	4a1a      	ldr	r2, [pc, #104]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db76:	6813      	ldr	r3, [r2, #0]
 800db78:	f36f 23dc 	bfc	r3, #11, #18
 800db7c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800db7e:	4a18      	ldr	r2, [pc, #96]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db80:	7913      	ldrb	r3, [r2, #4]
 800db82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db86:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800db88:	4a15      	ldr	r2, [pc, #84]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db8a:	7913      	ldrb	r3, [r2, #4]
 800db8c:	2108      	movs	r1, #8
 800db8e:	f361 0303 	bfi	r3, r1, #0, #4
 800db92:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800db94:	4a12      	ldr	r2, [pc, #72]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800db96:	7913      	ldrb	r3, [r2, #4]
 800db98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db9c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800db9e:	4a10      	ldr	r2, [pc, #64]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800dba0:	7913      	ldrb	r3, [r2, #4]
 800dba2:	f023 0310 	bic.w	r3, r3, #16
 800dba6:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dba8:	4b0f      	ldr	r3, [pc, #60]	@ (800dbe8 <VCU_TransmitBmsData8+0xd0>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 0310 	and.w	r3, r3, #16
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00c      	beq.n	800dbce <VCU_TransmitBmsData8+0xb6>
 800dbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe0 <VCU_TransmitBmsData8+0xc8>)
 800dbb6:	881b      	ldrh	r3, [r3, #0]
 800dbb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	490a      	ldr	r1, [pc, #40]	@ (800dbec <VCU_TransmitBmsData8+0xd4>)
 800dbc2:	480b      	ldr	r0, [pc, #44]	@ (800dbf0 <VCU_TransmitBmsData8+0xd8>)
 800dbc4:	f007 fa82 	bl	80150cc <siprintf>
 800dbc8:	4809      	ldr	r0, [pc, #36]	@ (800dbf0 <VCU_TransmitBmsData8+0xd8>)
 800dbca:	f7f7 fd37 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dbce:	2000      	movs	r0, #0
 800dbd0:	f7fe fe1e 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	2000a6ec 	.word	0x2000a6ec
 800dbe0:	2000a758 	.word	0x2000a758
 800dbe4:	2000a764 	.word	0x2000a764
 800dbe8:	2000000c 	.word	0x2000000c
 800dbec:	0801a600 	.word	0x0801a600
 800dbf0:	20000b5c 	.word	0x20000b5c

0800dbf4 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800dbfe:	2300      	movs	r3, #0
 800dc00:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800dc02:	4b2d      	ldr	r3, [pc, #180]	@ (800dcb8 <VCU_TransmitBmsData9+0xc4>)
 800dc04:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc08:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800dc0e:	4b2a      	ldr	r3, [pc, #168]	@ (800dcb8 <VCU_TransmitBmsData9+0xc4>)
 800dc10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc14:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dc16:	4b29      	ldr	r3, [pc, #164]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc18:	2200      	movs	r2, #0
 800dc1a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dc1c:	4b27      	ldr	r3, [pc, #156]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dc22:	4b26      	ldr	r3, [pc, #152]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800dc28:	4b25      	ldr	r3, [pc, #148]	@ (800dcc0 <VCU_TransmitBmsData9+0xcc>)
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc32:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dc36:	4b20      	ldr	r3, [pc, #128]	@ (800dcb8 <VCU_TransmitBmsData9+0xc4>)
 800dc38:	895b      	ldrh	r3, [r3, #10]
 800dc3a:	f203 4329 	addw	r3, r3, #1065	@ 0x429
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc44:	b299      	uxth	r1, r3
 800dc46:	4a1d      	ldr	r2, [pc, #116]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc48:	8813      	ldrh	r3, [r2, #0]
 800dc4a:	f361 030a 	bfi	r3, r1, #0, #11
 800dc4e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dc50:	4a1a      	ldr	r2, [pc, #104]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc52:	6813      	ldr	r3, [r2, #0]
 800dc54:	f36f 23dc 	bfc	r3, #11, #18
 800dc58:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dc5a:	4a18      	ldr	r2, [pc, #96]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc5c:	7913      	ldrb	r3, [r2, #4]
 800dc5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc62:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dc64:	4a15      	ldr	r2, [pc, #84]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc66:	7913      	ldrb	r3, [r2, #4]
 800dc68:	2108      	movs	r1, #8
 800dc6a:	f361 0303 	bfi	r3, r1, #0, #4
 800dc6e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dc70:	4a12      	ldr	r2, [pc, #72]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc72:	7913      	ldrb	r3, [r2, #4]
 800dc74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc78:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dc7a:	4a10      	ldr	r2, [pc, #64]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc7c:	7913      	ldrb	r3, [r2, #4]
 800dc7e:	f023 0310 	bic.w	r3, r3, #16
 800dc82:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dc84:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc4 <VCU_TransmitBmsData9+0xd0>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	f003 0310 	and.w	r3, r3, #16
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00c      	beq.n	800dcaa <VCU_TransmitBmsData9+0xb6>
 800dc90:	4b0a      	ldr	r3, [pc, #40]	@ (800dcbc <VCU_TransmitBmsData9+0xc8>)
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	490a      	ldr	r1, [pc, #40]	@ (800dcc8 <VCU_TransmitBmsData9+0xd4>)
 800dc9e:	480b      	ldr	r0, [pc, #44]	@ (800dccc <VCU_TransmitBmsData9+0xd8>)
 800dca0:	f007 fa14 	bl	80150cc <siprintf>
 800dca4:	4809      	ldr	r0, [pc, #36]	@ (800dccc <VCU_TransmitBmsData9+0xd8>)
 800dca6:	f7f7 fcc9 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7fe fdb0 	bl	800c810 <VCU_TransmitMessageQueue>

}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	2000a6ec 	.word	0x2000a6ec
 800dcbc:	2000a758 	.word	0x2000a758
 800dcc0:	2000a764 	.word	0x2000a764
 800dcc4:	2000000c 	.word	0x2000000c
 800dcc8:	0801a61c 	.word	0x0801a61c
 800dccc:	20000b5c 	.word	0x20000b5c

0800dcd0 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800dcde:	2300      	movs	r3, #0
 800dce0:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800dce2:	4b28      	ldr	r3, [pc, #160]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800dce8:	4b26      	ldr	r3, [pc, #152]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800dcee:	4b25      	ldr	r3, [pc, #148]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800dcf4:	4b24      	ldr	r3, [pc, #144]	@ (800dd88 <VCU_TransmitBmsData10+0xb8>)
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dcfe:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800dd02:	4b22      	ldr	r3, [pc, #136]	@ (800dd8c <VCU_TransmitBmsData10+0xbc>)
 800dd04:	895b      	ldrh	r3, [r3, #10]
 800dd06:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd10:	b299      	uxth	r1, r3
 800dd12:	4a1c      	ldr	r2, [pc, #112]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd14:	8813      	ldrh	r3, [r2, #0]
 800dd16:	f361 030a 	bfi	r3, r1, #0, #11
 800dd1a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800dd1c:	4a19      	ldr	r2, [pc, #100]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd1e:	6813      	ldr	r3, [r2, #0]
 800dd20:	f36f 23dc 	bfc	r3, #11, #18
 800dd24:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800dd26:	4a17      	ldr	r2, [pc, #92]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd28:	7913      	ldrb	r3, [r2, #4]
 800dd2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd2e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800dd30:	4a14      	ldr	r2, [pc, #80]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd32:	7913      	ldrb	r3, [r2, #4]
 800dd34:	2108      	movs	r1, #8
 800dd36:	f361 0303 	bfi	r3, r1, #0, #4
 800dd3a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800dd3c:	4a11      	ldr	r2, [pc, #68]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd3e:	7913      	ldrb	r3, [r2, #4]
 800dd40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd44:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dd46:	4a0f      	ldr	r2, [pc, #60]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd48:	7913      	ldrb	r3, [r2, #4]
 800dd4a:	f023 0310 	bic.w	r3, r3, #16
 800dd4e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dd50:	4b0f      	ldr	r3, [pc, #60]	@ (800dd90 <VCU_TransmitBmsData10+0xc0>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f003 0310 	and.w	r3, r3, #16
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00c      	beq.n	800dd76 <VCU_TransmitBmsData10+0xa6>
 800dd5c:	4b09      	ldr	r3, [pc, #36]	@ (800dd84 <VCU_TransmitBmsData10+0xb4>)
 800dd5e:	881b      	ldrh	r3, [r3, #0]
 800dd60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	461a      	mov	r2, r3
 800dd68:	490a      	ldr	r1, [pc, #40]	@ (800dd94 <VCU_TransmitBmsData10+0xc4>)
 800dd6a:	480b      	ldr	r0, [pc, #44]	@ (800dd98 <VCU_TransmitBmsData10+0xc8>)
 800dd6c:	f007 f9ae 	bl	80150cc <siprintf>
 800dd70:	4809      	ldr	r0, [pc, #36]	@ (800dd98 <VCU_TransmitBmsData10+0xc8>)
 800dd72:	f7f7 fc63 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dd76:	2000      	movs	r0, #0
 800dd78:	f7fe fd4a 	bl	800c810 <VCU_TransmitMessageQueue>

}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	2000a758 	.word	0x2000a758
 800dd88:	2000a764 	.word	0x2000a764
 800dd8c:	2000a6ec 	.word	0x2000a6ec
 800dd90:	2000000c 	.word	0x2000000c
 800dd94:	0801a638 	.word	0x0801a638
 800dd98:	20000b5c 	.word	0x20000b5c

0800dd9c <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800dda2:	4b8f      	ldr	r3, [pc, #572]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800dda4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd fd1f 	bl	800b7ec <MCU_ModuleIndexFromId>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800ddb2:	4b8b      	ldr	r3, [pc, #556]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800ddb4:	7d1b      	ldrb	r3, [r3, #20]
 800ddb6:	7bfa      	ldrb	r2, [r7, #15]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d112      	bne.n	800dde2 <VCU_TransmitModuleState+0x46>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800ddbc:	4b89      	ldr	r3, [pc, #548]	@ (800dfe4 <VCU_TransmitModuleState+0x248>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	f003 0311 	and.w	r3, r3, #17
 800ddc4:	2b11      	cmp	r3, #17
 800ddc6:	f040 8107 	bne.w	800dfd8 <VCU_TransmitModuleState+0x23c>
 800ddca:	4b85      	ldr	r3, [pc, #532]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800ddcc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4985      	ldr	r1, [pc, #532]	@ (800dfe8 <VCU_TransmitModuleState+0x24c>)
 800ddd4:	4885      	ldr	r0, [pc, #532]	@ (800dfec <VCU_TransmitModuleState+0x250>)
 800ddd6:	f007 f979 	bl	80150cc <siprintf>
 800ddda:	4884      	ldr	r0, [pc, #528]	@ (800dfec <VCU_TransmitModuleState+0x250>)
 800dddc:	f7f7 fc2e 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800dde0:	e0fa      	b.n	800dfd8 <VCU_TransmitModuleState+0x23c>
    moduleState.module_id                   = pack.dmcModuleId;
 800dde2:	4b7f      	ldr	r3, [pc, #508]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800dde4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800dde8:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
 800ddec:	4a80      	ldr	r2, [pc, #512]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800ddee:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800ddf2:	fb01 f303 	mul.w	r3, r1, r3
 800ddf6:	4413      	add	r3, r2
 800ddf8:	332b      	adds	r3, #43	@ 0x2b
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	4a7b      	ldr	r2, [pc, #492]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de02:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de06:	fb01 f303 	mul.w	r3, r1, r3
 800de0a:	4413      	add	r3, r2
 800de0c:	3327      	adds	r3, #39	@ 0x27
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 0303 	and.w	r3, r3, #3
 800de14:	b2da      	uxtb	r2, r3
 800de16:	797b      	ldrb	r3, [r7, #5]
 800de18:	f362 0301 	bfi	r3, r2, #0, #2
 800de1c:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	4a73      	ldr	r2, [pc, #460]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de22:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de26:	fb01 f303 	mul.w	r3, r1, r3
 800de2a:	4413      	add	r3, r2
 800de2c:	3326      	adds	r3, #38	@ 0x26
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f003 0303 	and.w	r3, r3, #3
 800de34:	b2da      	uxtb	r2, r3
 800de36:	79bb      	ldrb	r3, [r7, #6]
 800de38:	f362 0383 	bfi	r3, r2, #2, #2
 800de3c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
 800de40:	4a6b      	ldr	r2, [pc, #428]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de42:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de46:	fb01 f303 	mul.w	r3, r1, r3
 800de4a:	4413      	add	r3, r2
 800de4c:	332c      	adds	r3, #44	@ 0x2c
 800de4e:	781a      	ldrb	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f362 2391 	bfi	r3, r2, #10, #8
 800de56:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800de58:	7bfb      	ldrb	r3, [r7, #15]
 800de5a:	4a65      	ldr	r2, [pc, #404]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de5c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800de60:	fb01 f303 	mul.w	r3, r1, r3
 800de64:	4413      	add	r3, r2
 800de66:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800de6a:	789b      	ldrb	r3, [r3, #2]
 800de6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800de70:	b2db      	uxtb	r3, r3
 800de72:	b25a      	sxtb	r2, r3
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	495e      	ldr	r1, [pc, #376]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de78:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800de7c:	fb00 f303 	mul.w	r3, r0, r3
 800de80:	440b      	add	r3, r1
 800de82:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800de86:	789b      	ldrb	r3, [r3, #2]
 800de88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	b25b      	sxtb	r3, r3
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	b25b      	sxtb	r3, r3
 800de94:	4313      	orrs	r3, r2
 800de96:	b25a      	sxtb	r2, r3
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	4955      	ldr	r1, [pc, #340]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800de9c:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800dea0:	fb00 f303 	mul.w	r3, r0, r3
 800dea4:	440b      	add	r3, r1
 800dea6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800deaa:	789b      	ldrb	r3, [r3, #2]
 800deac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	b25b      	sxtb	r3, r3
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	b25b      	sxtb	r3, r3
 800deb8:	4313      	orrs	r3, r2
 800deba:	b25a      	sxtb	r2, r3
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	494c      	ldr	r1, [pc, #304]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800dec0:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800dec4:	fb00 f303 	mul.w	r3, r0, r3
 800dec8:	440b      	add	r3, r1
 800deca:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800dece:	789b      	ldrb	r3, [r3, #2]
 800ded0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	b25b      	sxtb	r3, r3
 800ded8:	00db      	lsls	r3, r3, #3
 800deda:	b25b      	sxtb	r3, r3
 800dedc:	4313      	orrs	r3, r2
 800dede:	b25a      	sxtb	r2, r3
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	4943      	ldr	r1, [pc, #268]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800dee4:	f44f 6099 	mov.w	r0, #1224	@ 0x4c8
 800dee8:	fb00 f303 	mul.w	r3, r0, r3
 800deec:	440b      	add	r3, r1
 800deee:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800def2:	789b      	ldrb	r3, [r3, #2]
 800def4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800def8:	b2db      	uxtb	r3, r3
 800defa:	b25b      	sxtb	r3, r3
 800defc:	011b      	lsls	r3, r3, #4
 800defe:	b25b      	sxtb	r3, r3
 800df00:	4313      	orrs	r3, r2
 800df02:	b25b      	sxtb	r3, r3
 800df04:	b2da      	uxtb	r2, r3
 800df06:	88fb      	ldrh	r3, [r7, #6]
 800df08:	f362 138d 	bfi	r3, r2, #6, #8
 800df0c:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800df0e:	79bb      	ldrb	r3, [r7, #6]
 800df10:	f023 0320 	bic.w	r3, r3, #32
 800df14:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800df16:	79bb      	ldrb	r3, [r7, #6]
 800df18:	f023 0310 	bic.w	r3, r3, #16
 800df1c:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800df1e:	4b30      	ldr	r3, [pc, #192]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800df20:	7d1b      	ldrb	r3, [r3, #20]
 800df22:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800df24:	4b2e      	ldr	r3, [pc, #184]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800df26:	7ddb      	ldrb	r3, [r3, #23]
 800df28:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	4a30      	ldr	r2, [pc, #192]	@ (800dff0 <VCU_TransmitModuleState+0x254>)
 800df2e:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800df32:	fb01 f303 	mul.w	r3, r1, r3
 800df36:	4413      	add	r3, r2
 800df38:	332d      	adds	r3, #45	@ 0x2d
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	72fb      	strb	r3, [r7, #11]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800df3e:	4b2d      	ldr	r3, [pc, #180]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800df44:	4b2b      	ldr	r3, [pc, #172]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df46:	2200      	movs	r2, #0
 800df48:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800df4a:	4b2a      	ldr	r3, [pc, #168]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800df50:	4b29      	ldr	r3, [pc, #164]	@ (800dff8 <VCU_TransmitModuleState+0x25c>)
 800df52:	461a      	mov	r2, r3
 800df54:	1d3b      	adds	r3, r7, #4
 800df56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df5a:	e882 0003 	stmia.w	r2, {r0, r1}
    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800df5e:	4b20      	ldr	r3, [pc, #128]	@ (800dfe0 <VCU_TransmitModuleState+0x244>)
 800df60:	895b      	ldrh	r3, [r3, #10]
 800df62:	f203 4311 	addw	r3, r3, #1041	@ 0x411
 800df66:	b29b      	uxth	r3, r3
 800df68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df6c:	b299      	uxth	r1, r3
 800df6e:	4a21      	ldr	r2, [pc, #132]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df70:	8813      	ldrh	r3, [r2, #0]
 800df72:	f361 030a 	bfi	r3, r1, #0, #11
 800df76:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800df78:	4a1e      	ldr	r2, [pc, #120]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df7a:	6813      	ldr	r3, [r2, #0]
 800df7c:	f36f 23dc 	bfc	r3, #11, #18
 800df80:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800df82:	4a1c      	ldr	r2, [pc, #112]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df84:	7913      	ldrb	r3, [r2, #4]
 800df86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df8a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800df8c:	4a19      	ldr	r2, [pc, #100]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df8e:	7913      	ldrb	r3, [r2, #4]
 800df90:	2108      	movs	r1, #8
 800df92:	f361 0303 	bfi	r3, r1, #0, #4
 800df96:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800df98:	4a16      	ldr	r2, [pc, #88]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800df9a:	7913      	ldrb	r3, [r2, #4]
 800df9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfa0:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800dfa2:	4a14      	ldr	r2, [pc, #80]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800dfa4:	7913      	ldrb	r3, [r2, #4]
 800dfa6:	f023 0310 	bic.w	r3, r3, #16
 800dfaa:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800dfac:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <VCU_TransmitModuleState+0x248>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 0310 	and.w	r3, r3, #16
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00c      	beq.n	800dfd2 <VCU_TransmitModuleState+0x236>
 800dfb8:	4b0e      	ldr	r3, [pc, #56]	@ (800dff4 <VCU_TransmitModuleState+0x258>)
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	490d      	ldr	r1, [pc, #52]	@ (800dffc <VCU_TransmitModuleState+0x260>)
 800dfc6:	4809      	ldr	r0, [pc, #36]	@ (800dfec <VCU_TransmitModuleState+0x250>)
 800dfc8:	f007 f880 	bl	80150cc <siprintf>
 800dfcc:	4807      	ldr	r0, [pc, #28]	@ (800dfec <VCU_TransmitModuleState+0x250>)
 800dfce:	f7f7 fb35 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	f7fe fc1c 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800dfd8:	bf00      	nop
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	2000a6ec 	.word	0x2000a6ec
 800dfe4:	2000000c 	.word	0x2000000c
 800dfe8:	0801a654 	.word	0x0801a654
 800dfec:	20000b5c 	.word	0x20000b5c
 800dff0:	20000dec 	.word	0x20000dec
 800dff4:	2000a758 	.word	0x2000a758
 800dff8:	2000a764 	.word	0x2000a764
 800dffc:	0801a690 	.word	0x0801a690

0800e000 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800e000:	b590      	push	{r4, r7, lr}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e006:	4b46      	ldr	r3, [pc, #280]	@ (800e120 <VCU_TransmitModulePower+0x120>)
 800e008:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd fbed 	bl	800b7ec <MCU_ModuleIndexFromId>
 800e012:	4603      	mov	r3, r0
 800e014:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e016:	4b42      	ldr	r3, [pc, #264]	@ (800e120 <VCU_TransmitModulePower+0x120>)
 800e018:	7d1b      	ldrb	r3, [r3, #20]
 800e01a:	7bfa      	ldrb	r2, [r7, #15]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d111      	bne.n	800e044 <VCU_TransmitModulePower+0x44>
    // Invalid module Id
    if((debugLevel & (DBG_VCU + DBG_ERRORS)) == (DBG_VCU + DBG_ERRORS)) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
 800e020:	4b40      	ldr	r3, [pc, #256]	@ (800e124 <VCU_TransmitModulePower+0x124>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	f003 0311 	and.w	r3, r3, #17
 800e028:	2b11      	cmp	r3, #17
 800e02a:	d175      	bne.n	800e118 <VCU_TransmitModulePower+0x118>
 800e02c:	4b3c      	ldr	r3, [pc, #240]	@ (800e120 <VCU_TransmitModulePower+0x120>)
 800e02e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e032:	461a      	mov	r2, r3
 800e034:	493c      	ldr	r1, [pc, #240]	@ (800e128 <VCU_TransmitModulePower+0x128>)
 800e036:	483d      	ldr	r0, [pc, #244]	@ (800e12c <VCU_TransmitModulePower+0x12c>)
 800e038:	f007 f848 	bl	80150cc <siprintf>
 800e03c:	483b      	ldr	r0, [pc, #236]	@ (800e12c <VCU_TransmitModulePower+0x12c>)
 800e03e:	f7f7 fafd 	bl	800563c <serialOut>

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
  }
}
 800e042:	e069      	b.n	800e118 <VCU_TransmitModulePower+0x118>
    modulePower.module_id       = pack.dmcModuleId;
 800e044:	4b36      	ldr	r3, [pc, #216]	@ (800e120 <VCU_TransmitModulePower+0x120>)
 800e046:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e04a:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	4a38      	ldr	r2, [pc, #224]	@ (800e130 <VCU_TransmitModulePower+0x130>)
 800e050:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e054:	fb01 f303 	mul.w	r3, r1, r3
 800e058:	4413      	add	r3, r2
 800e05a:	3316      	adds	r3, #22
 800e05c:	881b      	ldrh	r3, [r3, #0]
 800e05e:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	4a33      	ldr	r2, [pc, #204]	@ (800e130 <VCU_TransmitModulePower+0x130>)
 800e064:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e068:	fb01 f303 	mul.w	r3, r1, r3
 800e06c:	4413      	add	r3, r2
 800e06e:	3314      	adds	r3, #20
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	813b      	strh	r3, [r7, #8]
 800e07a:	2300      	movs	r3, #0
 800e07c:	72bb      	strb	r3, [r7, #10]
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e07e:	4b2d      	ldr	r3, [pc, #180]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e080:	2200      	movs	r2, #0
 800e082:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e084:	4b2b      	ldr	r3, [pc, #172]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e086:	2200      	movs	r2, #0
 800e088:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e08a:	4b2a      	ldr	r3, [pc, #168]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	609a      	str	r2, [r3, #8]
    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800e090:	4b29      	ldr	r3, [pc, #164]	@ (800e138 <VCU_TransmitModulePower+0x138>)
 800e092:	461c      	mov	r4, r3
 800e094:	463b      	mov	r3, r7
 800e096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e09a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e09e:	4b20      	ldr	r3, [pc, #128]	@ (800e120 <VCU_TransmitModulePower+0x120>)
 800e0a0:	895b      	ldrh	r3, [r3, #10]
 800e0a2:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0ac:	b299      	uxth	r1, r3
 800e0ae:	4a21      	ldr	r2, [pc, #132]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0b0:	8813      	ldrh	r3, [r2, #0]
 800e0b2:	f361 030a 	bfi	r3, r1, #0, #11
 800e0b6:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e0b8:	4a1e      	ldr	r2, [pc, #120]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0ba:	6813      	ldr	r3, [r2, #0]
 800e0bc:	f36f 23dc 	bfc	r3, #11, #18
 800e0c0:	6013      	str	r3, [r2, #0]
    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e0c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0c4:	7913      	ldrb	r3, [r2, #4]
 800e0c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ca:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e0cc:	4a19      	ldr	r2, [pc, #100]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0ce:	7913      	ldrb	r3, [r2, #4]
 800e0d0:	2108      	movs	r1, #8
 800e0d2:	f361 0303 	bfi	r3, r1, #0, #4
 800e0d6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e0d8:	4a16      	ldr	r2, [pc, #88]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0da:	7913      	ldrb	r3, [r2, #4]
 800e0dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0e0:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e0e2:	4a14      	ldr	r2, [pc, #80]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0e4:	7913      	ldrb	r3, [r2, #4]
 800e0e6:	f023 0310 	bic.w	r3, r3, #16
 800e0ea:	7113      	strb	r3, [r2, #4]
    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e124 <VCU_TransmitModulePower+0x124>)
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	f003 0310 	and.w	r3, r3, #16
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00c      	beq.n	800e112 <VCU_TransmitModulePower+0x112>
 800e0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e134 <VCU_TransmitModulePower+0x134>)
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e100:	b29b      	uxth	r3, r3
 800e102:	461a      	mov	r2, r3
 800e104:	490d      	ldr	r1, [pc, #52]	@ (800e13c <VCU_TransmitModulePower+0x13c>)
 800e106:	4809      	ldr	r0, [pc, #36]	@ (800e12c <VCU_TransmitModulePower+0x12c>)
 800e108:	f006 ffe0 	bl	80150cc <siprintf>
 800e10c:	4807      	ldr	r0, [pc, #28]	@ (800e12c <VCU_TransmitModulePower+0x12c>)
 800e10e:	f7f7 fa95 	bl	800563c <serialOut>
    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e112:	2000      	movs	r0, #0
 800e114:	f7fe fb7c 	bl	800c810 <VCU_TransmitMessageQueue>
}
 800e118:	bf00      	nop
 800e11a:	3714      	adds	r7, #20
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd90      	pop	{r4, r7, pc}
 800e120:	2000a6ec 	.word	0x2000a6ec
 800e124:	2000000c 	.word	0x2000000c
 800e128:	0801a6ac 	.word	0x0801a6ac
 800e12c:	20000b5c 	.word	0x20000b5c
 800e130:	20000dec 	.word	0x20000dec
 800e134:	2000a758 	.word	0x2000a758
 800e138:	2000a764 	.word	0x2000a764
 800e13c:	0801a6e8 	.word	0x0801a6e8

0800e140 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e146:	4b41      	ldr	r3, [pc, #260]	@ (800e24c <VCU_TransmitModuleCellVoltage+0x10c>)
 800e148:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fd fb4d 	bl	800b7ec <MCU_ModuleIndexFromId>
 800e152:	4603      	mov	r3, r0
 800e154:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e156:	4b3d      	ldr	r3, [pc, #244]	@ (800e24c <VCU_TransmitModuleCellVoltage+0x10c>)
 800e158:	7d1b      	ldrb	r3, [r3, #20]
 800e15a:	7bfa      	ldrb	r2, [r7, #15]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d071      	beq.n	800e244 <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800e160:	4b3a      	ldr	r3, [pc, #232]	@ (800e24c <VCU_TransmitModuleCellVoltage+0x10c>)
 800e162:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e166:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800e168:	7bfb      	ldrb	r3, [r7, #15]
 800e16a:	4a39      	ldr	r2, [pc, #228]	@ (800e250 <VCU_TransmitModuleCellVoltage+0x110>)
 800e16c:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e170:	fb01 f303 	mul.w	r3, r1, r3
 800e174:	4413      	add	r3, r2
 800e176:	3322      	adds	r3, #34	@ 0x22
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4a34      	ldr	r2, [pc, #208]	@ (800e250 <VCU_TransmitModuleCellVoltage+0x110>)
 800e180:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e184:	fb01 f303 	mul.w	r3, r1, r3
 800e188:	4413      	add	r3, r2
 800e18a:	331e      	adds	r3, #30
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4a2e      	ldr	r2, [pc, #184]	@ (800e250 <VCU_TransmitModuleCellVoltage+0x110>)
 800e196:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e19a:	fb01 f303 	mul.w	r3, r1, r3
 800e19e:	4413      	add	r3, r2
 800e1a0:	3320      	adds	r3, #32
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e1aa:	4b2a      	ldr	r3, [pc, #168]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e1b0:	4b28      	ldr	r3, [pc, #160]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e1b6:	4b27      	ldr	r3, [pc, #156]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800e1bc:	4b26      	ldr	r3, [pc, #152]	@ (800e258 <VCU_TransmitModuleCellVoltage+0x118>)
 800e1be:	461c      	mov	r4, r3
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e1ca:	4b20      	ldr	r3, [pc, #128]	@ (800e24c <VCU_TransmitModuleCellVoltage+0x10c>)
 800e1cc:	895b      	ldrh	r3, [r3, #10]
 800e1ce:	f203 4313 	addw	r3, r3, #1043	@ 0x413
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1d8:	b299      	uxth	r1, r3
 800e1da:	4a1e      	ldr	r2, [pc, #120]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1dc:	8813      	ldrh	r3, [r2, #0]
 800e1de:	f361 030a 	bfi	r3, r1, #0, #11
 800e1e2:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e1e4:	4a1b      	ldr	r2, [pc, #108]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1e6:	6813      	ldr	r3, [r2, #0]
 800e1e8:	f36f 23dc 	bfc	r3, #11, #18
 800e1ec:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e1ee:	4a19      	ldr	r2, [pc, #100]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1f0:	7913      	ldrb	r3, [r2, #4]
 800e1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1f6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e1f8:	4a16      	ldr	r2, [pc, #88]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e1fa:	7913      	ldrb	r3, [r2, #4]
 800e1fc:	2108      	movs	r1, #8
 800e1fe:	f361 0303 	bfi	r3, r1, #0, #4
 800e202:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e204:	4a13      	ldr	r2, [pc, #76]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e206:	7913      	ldrb	r3, [r2, #4]
 800e208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e20c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e20e:	4a11      	ldr	r2, [pc, #68]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e210:	7913      	ldrb	r3, [r2, #4]
 800e212:	f023 0310 	bic.w	r3, r3, #16
 800e216:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e218:	4b10      	ldr	r3, [pc, #64]	@ (800e25c <VCU_TransmitModuleCellVoltage+0x11c>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	f003 0310 	and.w	r3, r3, #16
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00c      	beq.n	800e23e <VCU_TransmitModuleCellVoltage+0xfe>
 800e224:	4b0b      	ldr	r3, [pc, #44]	@ (800e254 <VCU_TransmitModuleCellVoltage+0x114>)
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	461a      	mov	r2, r3
 800e230:	490b      	ldr	r1, [pc, #44]	@ (800e260 <VCU_TransmitModuleCellVoltage+0x120>)
 800e232:	480c      	ldr	r0, [pc, #48]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x124>)
 800e234:	f006 ff4a 	bl	80150cc <siprintf>
 800e238:	480a      	ldr	r0, [pc, #40]	@ (800e264 <VCU_TransmitModuleCellVoltage+0x124>)
 800e23a:	f7f7 f9ff 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e23e:	2000      	movs	r0, #0
 800e240:	f7fe fae6 	bl	800c810 <VCU_TransmitMessageQueue>
  }
}
 800e244:	bf00      	nop
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd90      	pop	{r4, r7, pc}
 800e24c:	2000a6ec 	.word	0x2000a6ec
 800e250:	20000dec 	.word	0x20000dec
 800e254:	2000a758 	.word	0x2000a758
 800e258:	2000a764 	.word	0x2000a764
 800e25c:	2000000c 	.word	0x2000000c
 800e260:	0801a704 	.word	0x0801a704
 800e264:	20000b5c 	.word	0x20000b5c

0800e268 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800e268:	b590      	push	{r4, r7, lr}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e26e:	4b41      	ldr	r3, [pc, #260]	@ (800e374 <VCU_TransmitModuleCellTemp+0x10c>)
 800e270:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e274:	4618      	mov	r0, r3
 800e276:	f7fd fab9 	bl	800b7ec <MCU_ModuleIndexFromId>
 800e27a:	4603      	mov	r3, r0
 800e27c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e27e:	4b3d      	ldr	r3, [pc, #244]	@ (800e374 <VCU_TransmitModuleCellTemp+0x10c>)
 800e280:	7d1b      	ldrb	r3, [r3, #20]
 800e282:	7bfa      	ldrb	r2, [r7, #15]
 800e284:	429a      	cmp	r2, r3
 800e286:	d071      	beq.n	800e36c <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800e288:	4b3a      	ldr	r3, [pc, #232]	@ (800e374 <VCU_TransmitModuleCellTemp+0x10c>)
 800e28a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e28e:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800e290:	7bfb      	ldrb	r3, [r7, #15]
 800e292:	4a39      	ldr	r2, [pc, #228]	@ (800e378 <VCU_TransmitModuleCellTemp+0x110>)
 800e294:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e298:	fb01 f303 	mul.w	r3, r1, r3
 800e29c:	4413      	add	r3, r2
 800e29e:	331c      	adds	r3, #28
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4a34      	ldr	r2, [pc, #208]	@ (800e378 <VCU_TransmitModuleCellTemp+0x110>)
 800e2a8:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e2ac:	fb01 f303 	mul.w	r3, r1, r3
 800e2b0:	4413      	add	r3, r2
 800e2b2:	3318      	adds	r3, #24
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	4a2e      	ldr	r2, [pc, #184]	@ (800e378 <VCU_TransmitModuleCellTemp+0x110>)
 800e2be:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e2c2:	fb01 f303 	mul.w	r3, r1, r3
 800e2c6:	4413      	add	r3, r2
 800e2c8:	331a      	adds	r3, #26
 800e2ca:	881b      	ldrh	r3, [r3, #0]
 800e2cc:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e2d2:	4b2a      	ldr	r3, [pc, #168]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e2d8:	4b28      	ldr	r3, [pc, #160]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e2de:	4b27      	ldr	r3, [pc, #156]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800e2e4:	4b26      	ldr	r3, [pc, #152]	@ (800e380 <VCU_TransmitModuleCellTemp+0x118>)
 800e2e6:	461c      	mov	r4, r3
 800e2e8:	463b      	mov	r3, r7
 800e2ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e2ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e2f2:	4b20      	ldr	r3, [pc, #128]	@ (800e374 <VCU_TransmitModuleCellTemp+0x10c>)
 800e2f4:	895b      	ldrh	r3, [r3, #10]
 800e2f6:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e300:	b299      	uxth	r1, r3
 800e302:	4a1e      	ldr	r2, [pc, #120]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e304:	8813      	ldrh	r3, [r2, #0]
 800e306:	f361 030a 	bfi	r3, r1, #0, #11
 800e30a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e30c:	4a1b      	ldr	r2, [pc, #108]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e30e:	6813      	ldr	r3, [r2, #0]
 800e310:	f36f 23dc 	bfc	r3, #11, #18
 800e314:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e316:	4a19      	ldr	r2, [pc, #100]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e318:	7913      	ldrb	r3, [r2, #4]
 800e31a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e31e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e320:	4a16      	ldr	r2, [pc, #88]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e322:	7913      	ldrb	r3, [r2, #4]
 800e324:	2108      	movs	r1, #8
 800e326:	f361 0303 	bfi	r3, r1, #0, #4
 800e32a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e32c:	4a13      	ldr	r2, [pc, #76]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e32e:	7913      	ldrb	r3, [r2, #4]
 800e330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e334:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e336:	4a11      	ldr	r2, [pc, #68]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e338:	7913      	ldrb	r3, [r2, #4]
 800e33a:	f023 0310 	bic.w	r3, r3, #16
 800e33e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e340:	4b10      	ldr	r3, [pc, #64]	@ (800e384 <VCU_TransmitModuleCellTemp+0x11c>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	f003 0310 	and.w	r3, r3, #16
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00c      	beq.n	800e366 <VCU_TransmitModuleCellTemp+0xfe>
 800e34c:	4b0b      	ldr	r3, [pc, #44]	@ (800e37c <VCU_TransmitModuleCellTemp+0x114>)
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e354:	b29b      	uxth	r3, r3
 800e356:	461a      	mov	r2, r3
 800e358:	490b      	ldr	r1, [pc, #44]	@ (800e388 <VCU_TransmitModuleCellTemp+0x120>)
 800e35a:	480c      	ldr	r0, [pc, #48]	@ (800e38c <VCU_TransmitModuleCellTemp+0x124>)
 800e35c:	f006 feb6 	bl	80150cc <siprintf>
 800e360:	480a      	ldr	r0, [pc, #40]	@ (800e38c <VCU_TransmitModuleCellTemp+0x124>)
 800e362:	f7f7 f96b 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e366:	2000      	movs	r0, #0
 800e368:	f7fe fa52 	bl	800c810 <VCU_TransmitMessageQueue>
  }
}
 800e36c:	bf00      	nop
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	bd90      	pop	{r4, r7, pc}
 800e374:	2000a6ec 	.word	0x2000a6ec
 800e378:	20000dec 	.word	0x20000dec
 800e37c:	2000a758 	.word	0x2000a758
 800e380:	2000a764 	.word	0x2000a764
 800e384:	2000000c 	.word	0x2000000c
 800e388:	0801a728 	.word	0x0801a728
 800e38c:	20000b5c 	.word	0x20000b5c

0800e390 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800e396:	4b41      	ldr	r3, [pc, #260]	@ (800e49c <VCU_TransmitModuleLimits+0x10c>)
 800e398:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fd fa25 	bl	800b7ec <MCU_ModuleIndexFromId>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800e3a6:	4b3d      	ldr	r3, [pc, #244]	@ (800e49c <VCU_TransmitModuleLimits+0x10c>)
 800e3a8:	7d1b      	ldrb	r3, [r3, #20]
 800e3aa:	7bfa      	ldrb	r2, [r7, #15]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d071      	beq.n	800e494 <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800e3b0:	4b3a      	ldr	r3, [pc, #232]	@ (800e49c <VCU_TransmitModuleLimits+0x10c>)
 800e3b2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e3b6:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800e3b8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ba:	4a39      	ldr	r2, [pc, #228]	@ (800e4a0 <VCU_TransmitModuleLimits+0x110>)
 800e3bc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e3c0:	fb01 f303 	mul.w	r3, r1, r3
 800e3c4:	4413      	add	r3, r2
 800e3c6:	3312      	adds	r3, #18
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	4a34      	ldr	r2, [pc, #208]	@ (800e4a0 <VCU_TransmitModuleLimits+0x110>)
 800e3d0:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e3d4:	fb01 f303 	mul.w	r3, r1, r3
 800e3d8:	4413      	add	r3, r2
 800e3da:	330e      	adds	r3, #14
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
 800e3e2:	4a2f      	ldr	r2, [pc, #188]	@ (800e4a0 <VCU_TransmitModuleLimits+0x110>)
 800e3e4:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800e3e8:	fb01 f303 	mul.w	r3, r1, r3
 800e3ec:	4413      	add	r3, r2
 800e3ee:	3310      	adds	r3, #16
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e3fa:	4b2a      	ldr	r3, [pc, #168]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800e400:	4b28      	ldr	r3, [pc, #160]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e402:	2200      	movs	r2, #0
 800e404:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800e406:	4b27      	ldr	r3, [pc, #156]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e408:	2200      	movs	r2, #0
 800e40a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800e40c:	4b26      	ldr	r3, [pc, #152]	@ (800e4a8 <VCU_TransmitModuleLimits+0x118>)
 800e40e:	461c      	mov	r4, r3
 800e410:	463b      	mov	r3, r7
 800e412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e416:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e41a:	4b20      	ldr	r3, [pc, #128]	@ (800e49c <VCU_TransmitModuleLimits+0x10c>)
 800e41c:	895b      	ldrh	r3, [r3, #10]
 800e41e:	f203 4316 	addw	r3, r3, #1046	@ 0x416
 800e422:	b29b      	uxth	r3, r3
 800e424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e428:	b299      	uxth	r1, r3
 800e42a:	4a1e      	ldr	r2, [pc, #120]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e42c:	8813      	ldrh	r3, [r2, #0]
 800e42e:	f361 030a 	bfi	r3, r1, #0, #11
 800e432:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e434:	4a1b      	ldr	r2, [pc, #108]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e436:	6813      	ldr	r3, [r2, #0]
 800e438:	f36f 23dc 	bfc	r3, #11, #18
 800e43c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e43e:	4a19      	ldr	r2, [pc, #100]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e440:	7913      	ldrb	r3, [r2, #4]
 800e442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e446:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e448:	4a16      	ldr	r2, [pc, #88]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e44a:	7913      	ldrb	r3, [r2, #4]
 800e44c:	2108      	movs	r1, #8
 800e44e:	f361 0303 	bfi	r3, r1, #0, #4
 800e452:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e454:	4a13      	ldr	r2, [pc, #76]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e456:	7913      	ldrb	r3, [r2, #4]
 800e458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e45c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e45e:	4a11      	ldr	r2, [pc, #68]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e460:	7913      	ldrb	r3, [r2, #4]
 800e462:	f023 0310 	bic.w	r3, r3, #16
 800e466:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e468:	4b10      	ldr	r3, [pc, #64]	@ (800e4ac <VCU_TransmitModuleLimits+0x11c>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f003 0310 	and.w	r3, r3, #16
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00c      	beq.n	800e48e <VCU_TransmitModuleLimits+0xfe>
 800e474:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a4 <VCU_TransmitModuleLimits+0x114>)
 800e476:	881b      	ldrh	r3, [r3, #0]
 800e478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	461a      	mov	r2, r3
 800e480:	490b      	ldr	r1, [pc, #44]	@ (800e4b0 <VCU_TransmitModuleLimits+0x120>)
 800e482:	480c      	ldr	r0, [pc, #48]	@ (800e4b4 <VCU_TransmitModuleLimits+0x124>)
 800e484:	f006 fe22 	bl	80150cc <siprintf>
 800e488:	480a      	ldr	r0, [pc, #40]	@ (800e4b4 <VCU_TransmitModuleLimits+0x124>)
 800e48a:	f7f7 f8d7 	bl	800563c <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e48e:	2000      	movs	r0, #0
 800e490:	f7fe f9be 	bl	800c810 <VCU_TransmitMessageQueue>
  }

}
 800e494:	bf00      	nop
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd90      	pop	{r4, r7, pc}
 800e49c:	2000a6ec 	.word	0x2000a6ec
 800e4a0:	20000dec 	.word	0x20000dec
 800e4a4:	2000a758 	.word	0x2000a758
 800e4a8:	2000a764 	.word	0x2000a764
 800e4ac:	2000000c 	.word	0x2000000c
 800e4b0:	0801a748 	.word	0x0801a748
 800e4b4:	20000b5c 	.word	0x20000b5c

0800e4b8 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800e4bc:	4b23      	ldr	r3, [pc, #140]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4be:	2200      	movs	r2, #0
 800e4c0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800e4c2:	4b22      	ldr	r3, [pc, #136]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800e4c8:	4b20      	ldr	r3, [pc, #128]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800e4ce:	4b20      	ldr	r3, [pc, #128]	@ (800e550 <VCU_RequestTime+0x98>)
 800e4d0:	895b      	ldrh	r3, [r3, #10]
 800e4d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4dc:	b299      	uxth	r1, r3
 800e4de:	4a1b      	ldr	r2, [pc, #108]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4e0:	8813      	ldrh	r3, [r2, #0]
 800e4e2:	f361 030a 	bfi	r3, r1, #0, #11
 800e4e6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800e4e8:	4a18      	ldr	r2, [pc, #96]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4ea:	6813      	ldr	r3, [r2, #0]
 800e4ec:	f36f 23dc 	bfc	r3, #11, #18
 800e4f0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800e4f2:	4a16      	ldr	r2, [pc, #88]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4f4:	7913      	ldrb	r3, [r2, #4]
 800e4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4fa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800e4fc:	4a13      	ldr	r2, [pc, #76]	@ (800e54c <VCU_RequestTime+0x94>)
 800e4fe:	7913      	ldrb	r3, [r2, #4]
 800e500:	2108      	movs	r1, #8
 800e502:	f361 0303 	bfi	r3, r1, #0, #4
 800e506:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800e508:	4a10      	ldr	r2, [pc, #64]	@ (800e54c <VCU_RequestTime+0x94>)
 800e50a:	7913      	ldrb	r3, [r2, #4]
 800e50c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e510:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800e512:	4a0e      	ldr	r2, [pc, #56]	@ (800e54c <VCU_RequestTime+0x94>)
 800e514:	7913      	ldrb	r3, [r2, #4]
 800e516:	f023 0310 	bic.w	r3, r3, #16
 800e51a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800e51c:	4b0d      	ldr	r3, [pc, #52]	@ (800e554 <VCU_RequestTime+0x9c>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	f003 0310 	and.w	r3, r3, #16
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00c      	beq.n	800e542 <VCU_RequestTime+0x8a>
 800e528:	4b08      	ldr	r3, [pc, #32]	@ (800e54c <VCU_RequestTime+0x94>)
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e530:	b29b      	uxth	r3, r3
 800e532:	461a      	mov	r2, r3
 800e534:	4908      	ldr	r1, [pc, #32]	@ (800e558 <VCU_RequestTime+0xa0>)
 800e536:	4809      	ldr	r0, [pc, #36]	@ (800e55c <VCU_RequestTime+0xa4>)
 800e538:	f006 fdc8 	bl	80150cc <siprintf>
 800e53c:	4807      	ldr	r0, [pc, #28]	@ (800e55c <VCU_RequestTime+0xa4>)
 800e53e:	f7f7 f87d 	bl	800563c <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800e542:	2000      	movs	r0, #0
 800e544:	f7fe f964 	bl	800c810 <VCU_TransmitMessageQueue>

}
 800e548:	bf00      	nop
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	2000a758 	.word	0x2000a758
 800e550:	2000a6ec 	.word	0x2000a6ec
 800e554:	2000000c 	.word	0x2000000c
 800e558:	0801a764 	.word	0x0801a764
 800e55c:	20000b5c 	.word	0x20000b5c

0800e560 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800e560:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e562:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e564:	3304      	adds	r3, #4

0800e566 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e566:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e568:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800e56a:	d3f9      	bcc.n	800e560 <CopyDataInit>
  bx lr
 800e56c:	4770      	bx	lr

0800e56e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800e56e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800e570:	3004      	adds	r0, #4

0800e572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800e572:	4288      	cmp	r0, r1
  bcc FillZerobss
 800e574:	d3fb      	bcc.n	800e56e <FillZerobss>
  bx lr
 800e576:	4770      	bx	lr

0800e578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e578:	480c      	ldr	r0, [pc, #48]	@ (800e5ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e57a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e57c:	f7fd ffee 	bl	800c55c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800e580:	480b      	ldr	r0, [pc, #44]	@ (800e5b0 <LoopForever+0x6>)
 800e582:	490c      	ldr	r1, [pc, #48]	@ (800e5b4 <LoopForever+0xa>)
 800e584:	4a0c      	ldr	r2, [pc, #48]	@ (800e5b8 <LoopForever+0xe>)
 800e586:	2300      	movs	r3, #0
 800e588:	f7ff ffed 	bl	800e566 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800e58c:	480b      	ldr	r0, [pc, #44]	@ (800e5bc <LoopForever+0x12>)
 800e58e:	490c      	ldr	r1, [pc, #48]	@ (800e5c0 <LoopForever+0x16>)
 800e590:	4a0c      	ldr	r2, [pc, #48]	@ (800e5c4 <LoopForever+0x1a>)
 800e592:	2300      	movs	r3, #0
 800e594:	f7ff ffe7 	bl	800e566 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800e598:	480b      	ldr	r0, [pc, #44]	@ (800e5c8 <LoopForever+0x1e>)
 800e59a:	490c      	ldr	r1, [pc, #48]	@ (800e5cc <LoopForever+0x22>)
 800e59c:	2300      	movs	r3, #0
 800e59e:	f7ff ffe8 	bl	800e572 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e5a2:	f007 fcd5 	bl	8015f50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800e5a6:	f7f7 fbfb 	bl	8005da0 <main>

0800e5aa <LoopForever>:

LoopForever:
  b LoopForever
 800e5aa:	e7fe      	b.n	800e5aa <LoopForever>
  ldr   r0, =_estack
 800e5ac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800e5b0:	20000008 	.word	0x20000008
 800e5b4:	200002c8 	.word	0x200002c8
 800e5b8:	0801ade4 	.word	0x0801ade4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800e5bc:	20030000 	.word	0x20030000
 800e5c0:	20030000 	.word	0x20030000
 800e5c4:	0801b0a4 	.word	0x0801b0a4
  INIT_BSS _sbss, _ebss
 800e5c8:	200002c8 	.word	0x200002c8
 800e5cc:	2000a984 	.word	0x2000a984

0800e5d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e5d0:	e7fe      	b.n	800e5d0 <ADC1_IRQHandler>
	...

0800e5d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e5de:	4b0c      	ldr	r3, [pc, #48]	@ (800e610 <HAL_Init+0x3c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a0b      	ldr	r2, [pc, #44]	@ (800e610 <HAL_Init+0x3c>)
 800e5e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e5e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e5ea:	2003      	movs	r0, #3
 800e5ec:	f000 f96c 	bl	800e8c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e5f0:	200f      	movs	r0, #15
 800e5f2:	f000 f80f 	bl	800e614 <HAL_InitTick>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	71fb      	strb	r3, [r7, #7]
 800e600:	e001      	b.n	800e606 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e602:	f7fd fc11 	bl	800be28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e606:	79fb      	ldrb	r3, [r7, #7]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	58004000 	.word	0x58004000

0800e614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800e620:	4b17      	ldr	r3, [pc, #92]	@ (800e680 <HAL_InitTick+0x6c>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d024      	beq.n	800e672 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800e628:	f002 f842 	bl	80106b0 <HAL_RCC_GetHCLKFreq>
 800e62c:	4602      	mov	r2, r0
 800e62e:	4b14      	ldr	r3, [pc, #80]	@ (800e680 <HAL_InitTick+0x6c>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	4619      	mov	r1, r3
 800e634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e638:	fbb3 f3f1 	udiv	r3, r3, r1
 800e63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e640:	4618      	mov	r0, r3
 800e642:	f000 f974 	bl	800e92e <HAL_SYSTICK_Config>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10f      	bne.n	800e66c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b0f      	cmp	r3, #15
 800e650:	d809      	bhi.n	800e666 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e652:	2200      	movs	r2, #0
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	f04f 30ff 	mov.w	r0, #4294967295
 800e65a:	f000 f940 	bl	800e8de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e65e:	4a09      	ldr	r2, [pc, #36]	@ (800e684 <HAL_InitTick+0x70>)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6013      	str	r3, [r2, #0]
 800e664:	e007      	b.n	800e676 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	73fb      	strb	r3, [r7, #15]
 800e66a:	e004      	b.n	800e676 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	73fb      	strb	r3, [r7, #15]
 800e670:	e001      	b.n	800e676 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000020 	.word	0x20000020
 800e684:	2000001c 	.word	0x2000001c

0800e688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e688:	b480      	push	{r7}
 800e68a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e68c:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <HAL_IncTick+0x20>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	461a      	mov	r2, r3
 800e692:	4b06      	ldr	r3, [pc, #24]	@ (800e6ac <HAL_IncTick+0x24>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4413      	add	r3, r2
 800e698:	4a04      	ldr	r2, [pc, #16]	@ (800e6ac <HAL_IncTick+0x24>)
 800e69a:	6013      	str	r3, [r2, #0]
}
 800e69c:	bf00      	nop
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	20000020 	.word	0x20000020
 800e6ac:	2000a7f8 	.word	0x2000a7f8

0800e6b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0
  return uwTick;
 800e6b4:	4b03      	ldr	r3, [pc, #12]	@ (800e6c4 <HAL_GetTick+0x14>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	2000a7f8 	.word	0x2000a7f8

0800e6c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800e6cc:	4b03      	ldr	r3, [pc, #12]	@ (800e6dc <HAL_GetTickPrio+0x14>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	2000001c 	.word	0x2000001c

0800e6e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e6e8:	f7ff ffe2 	bl	800e6b0 <HAL_GetTick>
 800e6ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f8:	d005      	beq.n	800e706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e724 <HAL_Delay+0x44>)
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	461a      	mov	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	4413      	add	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e706:	bf00      	nop
 800e708:	f7ff ffd2 	bl	800e6b0 <HAL_GetTick>
 800e70c:	4602      	mov	r2, r0
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	429a      	cmp	r2, r3
 800e716:	d8f7      	bhi.n	800e708 <HAL_Delay+0x28>
  {
  }
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	20000020 	.word	0x20000020

0800e728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f003 0307 	and.w	r3, r3, #7
 800e736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e738:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <__NVIC_SetPriorityGrouping+0x44>)
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e744:	4013      	ands	r3, r2
 800e746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e75a:	4a04      	ldr	r2, [pc, #16]	@ (800e76c <__NVIC_SetPriorityGrouping+0x44>)
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	60d3      	str	r3, [r2, #12]
}
 800e760:	bf00      	nop
 800e762:	3714      	adds	r7, #20
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	e000ed00 	.word	0xe000ed00

0800e770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e770:	b480      	push	{r7}
 800e772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e774:	4b04      	ldr	r3, [pc, #16]	@ (800e788 <__NVIC_GetPriorityGrouping+0x18>)
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	0a1b      	lsrs	r3, r3, #8
 800e77a:	f003 0307 	and.w	r3, r3, #7
}
 800e77e:	4618      	mov	r0, r3
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	e000ed00 	.word	0xe000ed00

0800e78c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db0b      	blt.n	800e7b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e79e:	79fb      	ldrb	r3, [r7, #7]
 800e7a0:	f003 021f 	and.w	r2, r3, #31
 800e7a4:	4907      	ldr	r1, [pc, #28]	@ (800e7c4 <__NVIC_EnableIRQ+0x38>)
 800e7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7aa:	095b      	lsrs	r3, r3, #5
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	fa00 f202 	lsl.w	r2, r0, r2
 800e7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	e000e100 	.word	0xe000e100

0800e7c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	6039      	str	r1, [r7, #0]
 800e7d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	db0a      	blt.n	800e7f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	490c      	ldr	r1, [pc, #48]	@ (800e814 <__NVIC_SetPriority+0x4c>)
 800e7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7e6:	0112      	lsls	r2, r2, #4
 800e7e8:	b2d2      	uxtb	r2, r2
 800e7ea:	440b      	add	r3, r1
 800e7ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e7f0:	e00a      	b.n	800e808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	4908      	ldr	r1, [pc, #32]	@ (800e818 <__NVIC_SetPriority+0x50>)
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	f003 030f 	and.w	r3, r3, #15
 800e7fe:	3b04      	subs	r3, #4
 800e800:	0112      	lsls	r2, r2, #4
 800e802:	b2d2      	uxtb	r2, r2
 800e804:	440b      	add	r3, r1
 800e806:	761a      	strb	r2, [r3, #24]
}
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	e000e100 	.word	0xe000e100
 800e818:	e000ed00 	.word	0xe000ed00

0800e81c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b089      	sub	sp, #36	@ 0x24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f003 0307 	and.w	r3, r3, #7
 800e82e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	f1c3 0307 	rsb	r3, r3, #7
 800e836:	2b04      	cmp	r3, #4
 800e838:	bf28      	it	cs
 800e83a:	2304      	movcs	r3, #4
 800e83c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	3304      	adds	r3, #4
 800e842:	2b06      	cmp	r3, #6
 800e844:	d902      	bls.n	800e84c <NVIC_EncodePriority+0x30>
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	3b03      	subs	r3, #3
 800e84a:	e000      	b.n	800e84e <NVIC_EncodePriority+0x32>
 800e84c:	2300      	movs	r3, #0
 800e84e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e850:	f04f 32ff 	mov.w	r2, #4294967295
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	fa02 f303 	lsl.w	r3, r2, r3
 800e85a:	43da      	mvns	r2, r3
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	401a      	ands	r2, r3
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e864:	f04f 31ff 	mov.w	r1, #4294967295
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	fa01 f303 	lsl.w	r3, r1, r3
 800e86e:	43d9      	mvns	r1, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e874:	4313      	orrs	r3, r2
         );
}
 800e876:	4618      	mov	r0, r3
 800e878:	3724      	adds	r7, #36	@ 0x24
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
	...

0800e884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3b01      	subs	r3, #1
 800e890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e894:	d301      	bcc.n	800e89a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e896:	2301      	movs	r3, #1
 800e898:	e00f      	b.n	800e8ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e89a:	4a0a      	ldr	r2, [pc, #40]	@ (800e8c4 <SysTick_Config+0x40>)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e8a2:	210f      	movs	r1, #15
 800e8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a8:	f7ff ff8e 	bl	800e7c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e8ac:	4b05      	ldr	r3, [pc, #20]	@ (800e8c4 <SysTick_Config+0x40>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e8b2:	4b04      	ldr	r3, [pc, #16]	@ (800e8c4 <SysTick_Config+0x40>)
 800e8b4:	2207      	movs	r2, #7
 800e8b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	e000e010 	.word	0xe000e010

0800e8c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7ff ff29 	bl	800e728 <__NVIC_SetPriorityGrouping>
}
 800e8d6:	bf00      	nop
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	607a      	str	r2, [r7, #4]
 800e8ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e8ec:	f7ff ff40 	bl	800e770 <__NVIC_GetPriorityGrouping>
 800e8f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	6978      	ldr	r0, [r7, #20]
 800e8f8:	f7ff ff90 	bl	800e81c <NVIC_EncodePriority>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f7ff ff5f 	bl	800e7c8 <__NVIC_SetPriority>
}
 800e90a:	bf00      	nop
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	4603      	mov	r3, r0
 800e91a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff ff33 	bl	800e78c <__NVIC_EnableIRQ>
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b082      	sub	sp, #8
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff ffa4 	bl	800e884 <SysTick_Config>
 800e93c:	4603      	mov	r3, r0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e946:	b480      	push	{r7}
 800e948:	b083      	sub	sp, #12
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d101      	bne.n	800e958 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e954:	2301      	movs	r3, #1
 800e956:	e04f      	b.n	800e9f8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	d008      	beq.n	800e976 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2204      	movs	r2, #4
 800e968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	e040      	b.n	800e9f8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f022 020e 	bic.w	r2, r2, #14
 800e984:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e994:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f022 0201 	bic.w	r2, r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9aa:	f003 021c 	and.w	r2, r3, #28
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9b2:	2101      	movs	r1, #1
 800e9b4:	fa01 f202 	lsl.w	r2, r1, r2
 800e9b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00c      	beq.n	800e9e6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800e9e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d005      	beq.n	800ea28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2204      	movs	r2, #4
 800ea20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	73fb      	strb	r3, [r7, #15]
 800ea26:	e047      	b.n	800eab8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f022 020e 	bic.w	r2, r2, #14
 800ea36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f022 0201 	bic.w	r2, r2, #1
 800ea46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ea56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea5c:	f003 021c 	and.w	r2, r3, #28
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea64:	2101      	movs	r1, #1
 800ea66:	fa01 f202 	lsl.w	r2, r1, r2
 800ea6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ea74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00c      	beq.n	800ea98 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ea8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ea96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d003      	beq.n	800eab8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	4798      	blx	r3
    }
  }
  return status;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ead2:	4b1c      	ldr	r3, [pc, #112]	@ (800eb44 <HAL_FLASH_Program+0x80>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d101      	bne.n	800eade <HAL_FLASH_Program+0x1a>
 800eada:	2302      	movs	r3, #2
 800eadc:	e02d      	b.n	800eb3a <HAL_FLASH_Program+0x76>
 800eade:	4b19      	ldr	r3, [pc, #100]	@ (800eb44 <HAL_FLASH_Program+0x80>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800eae4:	4b17      	ldr	r3, [pc, #92]	@ (800eb44 <HAL_FLASH_Program+0x80>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eaea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eaee:	f000 f869 	bl	800ebc4 <FLASH_WaitForLastOperation>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d11a      	bne.n	800eb32 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d105      	bne.n	800eb0e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800eb02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb06:	68b8      	ldr	r0, [r7, #8]
 800eb08:	f000 f8ca 	bl	800eca0 <FLASH_Program_DoubleWord>
 800eb0c:	e004      	b.n	800eb18 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	4619      	mov	r1, r3
 800eb12:	68b8      	ldr	r0, [r7, #8]
 800eb14:	f00a f87c 	bl	8018c10 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eb18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eb1c:	f000 f852 	bl	800ebc4 <FLASH_WaitForLastOperation>
 800eb20:	4603      	mov	r3, r0
 800eb22:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800eb24:	4b08      	ldr	r3, [pc, #32]	@ (800eb48 <HAL_FLASH_Program+0x84>)
 800eb26:	695a      	ldr	r2, [r3, #20]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	43db      	mvns	r3, r3
 800eb2c:	4906      	ldr	r1, [pc, #24]	@ (800eb48 <HAL_FLASH_Program+0x84>)
 800eb2e:	4013      	ands	r3, r2
 800eb30:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800eb32:	4b04      	ldr	r3, [pc, #16]	@ (800eb44 <HAL_FLASH_Program+0x80>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	2000a7fc 	.word	0x2000a7fc
 800eb48:	58004000 	.word	0x58004000

0800eb4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800eb56:	4b0b      	ldr	r3, [pc, #44]	@ (800eb84 <HAL_FLASH_Unlock+0x38>)
 800eb58:	695b      	ldr	r3, [r3, #20]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	da0b      	bge.n	800eb76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800eb5e:	4b09      	ldr	r3, [pc, #36]	@ (800eb84 <HAL_FLASH_Unlock+0x38>)
 800eb60:	4a09      	ldr	r2, [pc, #36]	@ (800eb88 <HAL_FLASH_Unlock+0x3c>)
 800eb62:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800eb64:	4b07      	ldr	r3, [pc, #28]	@ (800eb84 <HAL_FLASH_Unlock+0x38>)
 800eb66:	4a09      	ldr	r2, [pc, #36]	@ (800eb8c <HAL_FLASH_Unlock+0x40>)
 800eb68:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800eb6a:	4b06      	ldr	r3, [pc, #24]	@ (800eb84 <HAL_FLASH_Unlock+0x38>)
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	da01      	bge.n	800eb76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800eb76:	79fb      	ldrb	r3, [r7, #7]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	58004000 	.word	0x58004000
 800eb88:	45670123 	.word	0x45670123
 800eb8c:	cdef89ab 	.word	0xcdef89ab

0800eb90 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800eb9a:	4b09      	ldr	r3, [pc, #36]	@ (800ebc0 <HAL_FLASH_Lock+0x30>)
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	4a08      	ldr	r2, [pc, #32]	@ (800ebc0 <HAL_FLASH_Lock+0x30>)
 800eba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eba4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800eba6:	4b06      	ldr	r3, [pc, #24]	@ (800ebc0 <HAL_FLASH_Lock+0x30>)
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	db01      	blt.n	800ebb2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	58004000 	.word	0x58004000

0800ebc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800ebcc:	f7ff fd70 	bl	800e6b0 <HAL_GetTick>
 800ebd0:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ebd2:	e009      	b.n	800ebe8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800ebd4:	f7ff fd6c 	bl	800e6b0 <HAL_GetTick>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d801      	bhi.n	800ebe8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	e053      	b.n	800ec90 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ebf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebf4:	d0ee      	beq.n	800ebd4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800ebf6:	4b28      	ldr	r3, [pc, #160]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ec06:	4b24      	ldr	r3, [pc, #144]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec08:	2201      	movs	r2, #1
 800ec0a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d007      	beq.n	800ec26 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800ec16:	4b20      	ldr	r3, [pc, #128]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ec1c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ec24:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec36:	d307      	bcc.n	800ec48 <FLASH_WaitForLastOperation+0x84>
 800ec38:	4b17      	ldr	r3, [pc, #92]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec3a:	699a      	ldr	r2, [r3, #24]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ec42:	4915      	ldr	r1, [pc, #84]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec44:	4313      	orrs	r3, r2
 800ec46:	618b      	str	r3, [r1, #24]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d004      	beq.n	800ec5c <FLASH_WaitForLastOperation+0x98>
 800ec52:	4a11      	ldr	r2, [pc, #68]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ec5a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00e      	beq.n	800ec80 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800ec62:	4a0e      	ldr	r2, [pc, #56]	@ (800ec9c <FLASH_WaitForLastOperation+0xd8>)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e011      	b.n	800ec90 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800ec6c:	f7ff fd20 	bl	800e6b0 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d801      	bhi.n	800ec80 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	e007      	b.n	800ec90 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800ec80:	4b05      	ldr	r3, [pc, #20]	@ (800ec98 <FLASH_WaitForLastOperation+0xd4>)
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ec88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ec8c:	d0ee      	beq.n	800ec6c <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	58004000 	.word	0x58004000
 800ec9c:	2000a7fc 	.word	0x2000a7fc

0800eca0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ecac:	4b0e      	ldr	r3, [pc, #56]	@ (800ece8 <FLASH_Program_DoubleWord+0x48>)
 800ecae:	695b      	ldr	r3, [r3, #20]
 800ecb0:	4a0d      	ldr	r2, [pc, #52]	@ (800ece8 <FLASH_Program_DoubleWord+0x48>)
 800ecb2:	f043 0301 	orr.w	r3, r3, #1
 800ecb6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ecbe:	f3bf 8f6f 	isb	sy
}
 800ecc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800ecc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ecc8:	f04f 0200 	mov.w	r2, #0
 800eccc:	f04f 0300 	mov.w	r3, #0
 800ecd0:	000a      	movs	r2, r1
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	68f9      	ldr	r1, [r7, #12]
 800ecd6:	3104      	adds	r1, #4
 800ecd8:	4613      	mov	r3, r2
 800ecda:	600b      	str	r3, [r1, #0]
}
 800ecdc:	bf00      	nop
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	58004000 	.word	0x58004000

0800ecec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ecf6:	4b24      	ldr	r3, [pc, #144]	@ (800ed88 <HAL_FLASHEx_Erase+0x9c>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d101      	bne.n	800ed02 <HAL_FLASHEx_Erase+0x16>
 800ecfe:	2302      	movs	r3, #2
 800ed00:	e03d      	b.n	800ed7e <HAL_FLASHEx_Erase+0x92>
 800ed02:	4b21      	ldr	r3, [pc, #132]	@ (800ed88 <HAL_FLASHEx_Erase+0x9c>)
 800ed04:	2201      	movs	r2, #1
 800ed06:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed08:	4b1f      	ldr	r3, [pc, #124]	@ (800ed88 <HAL_FLASHEx_Erase+0x9c>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ed12:	f7ff ff57 	bl	800ebc4 <FLASH_WaitForLastOperation>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d12a      	bne.n	800ed76 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d124      	bne.n	800ed72 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	60bb      	str	r3, [r7, #8]
 800ed36:	e012      	b.n	800ed5e <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800ed38:	68b8      	ldr	r0, [r7, #8]
 800ed3a:	f000 f869 	bl	800ee10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ed42:	f7ff ff3f 	bl	800ebc4 <FLASH_WaitForLastOperation>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	601a      	str	r2, [r3, #0]
          break;
 800ed56:	e00a      	b.n	800ed6e <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	60bb      	str	r3, [r7, #8]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4413      	add	r3, r2
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d3e4      	bcc.n	800ed38 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800ed6e:	f000 f8b1 	bl	800eed4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ed72:	f000 f867 	bl	800ee44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ed76:	4b04      	ldr	r3, [pc, #16]	@ (800ed88 <HAL_FLASHEx_Erase+0x9c>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]

  return status;
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	2000a7fc 	.word	0x2000a7fc

0800ed8c <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ed94:	4b1c      	ldr	r3, [pc, #112]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_FLASHEx_Erase_IT+0x14>
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e02e      	b.n	800edfe <HAL_FLASHEx_Erase_IT+0x72>
 800eda0:	4b19      	ldr	r3, [pc, #100]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800eda2:	2201      	movs	r2, #1
 800eda4:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800eda6:	4b18      	ldr	r3, [pc, #96]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a15      	ldr	r2, [pc, #84]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edb2:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800edb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800edb8:	f7ff ff04 	bl	800ebc4 <FLASH_WaitForLastOperation>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d003      	beq.n	800edce <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800edc6:	4b10      	ldr	r3, [pc, #64]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edc8:	2200      	movs	r2, #0
 800edca:	701a      	strb	r2, [r3, #0]
 800edcc:	e016      	b.n	800edfc <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800edce:	4b0f      	ldr	r3, [pc, #60]	@ (800ee0c <HAL_FLASHEx_Erase_IT+0x80>)
 800edd0:	695b      	ldr	r3, [r3, #20]
 800edd2:	4a0e      	ldr	r2, [pc, #56]	@ (800ee0c <HAL_FLASHEx_Erase_IT+0x80>)
 800edd4:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800edd8:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d10c      	bne.n	800edfc <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	4a08      	ldr	r2, [pc, #32]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800ede8:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	4a06      	ldr	r2, [pc, #24]	@ (800ee08 <HAL_FLASHEx_Erase_IT+0x7c>)
 800edf0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 f80a 	bl	800ee10 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	2000a7fc 	.word	0x2000a7fc
 800ee0c:	58004000 	.word	0x58004000

0800ee10 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800ee18:	4b09      	ldr	r3, [pc, #36]	@ (800ee40 <FLASH_PageErase+0x30>)
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	00db      	lsls	r3, r3, #3
 800ee24:	4313      	orrs	r3, r2
 800ee26:	4a06      	ldr	r2, [pc, #24]	@ (800ee40 <FLASH_PageErase+0x30>)
 800ee28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee2c:	f043 0302 	orr.w	r3, r3, #2
 800ee30:	6153      	str	r3, [r2, #20]
}
 800ee32:	bf00      	nop
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	58004000 	.word	0x58004000

0800ee44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800ee44:	b480      	push	{r7}
 800ee46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800ee48:	4b21      	ldr	r3, [pc, #132]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee54:	d117      	bne.n	800ee86 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ee56:	4b1e      	ldr	r3, [pc, #120]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4a1d      	ldr	r2, [pc, #116]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee60:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ee62:	4b1b      	ldr	r3, [pc, #108]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a1a      	ldr	r2, [pc, #104]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	4b18      	ldr	r3, [pc, #96]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a17      	ldr	r2, [pc, #92]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee78:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ee7a:	4b15      	ldr	r3, [pc, #84]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a14      	ldr	r2, [pc, #80]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ee84:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800ee86:	4b12      	ldr	r3, [pc, #72]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee92:	d117      	bne.n	800eec4 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ee94:	4b0e      	ldr	r3, [pc, #56]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a0d      	ldr	r2, [pc, #52]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800ee9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eea0:	4b0b      	ldr	r3, [pc, #44]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a0a      	ldr	r2, [pc, #40]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eea6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	4b08      	ldr	r3, [pc, #32]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a07      	ldr	r2, [pc, #28]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eeb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eeb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eeb8:	4b05      	ldr	r3, [pc, #20]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a04      	ldr	r2, [pc, #16]	@ (800eed0 <FLASH_FlushCaches+0x8c>)
 800eebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eec2:	6013      	str	r3, [r2, #0]
  }
}
 800eec4:	bf00      	nop
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	58004000 	.word	0x58004000

0800eed4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800eed4:	b480      	push	{r7}
 800eed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800eed8:	4b06      	ldr	r3, [pc, #24]	@ (800eef4 <FLASH_AcknowledgePageErase+0x20>)
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	4a05      	ldr	r2, [pc, #20]	@ (800eef4 <FLASH_AcknowledgePageErase+0x20>)
 800eede:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800eee2:	f023 0302 	bic.w	r3, r3, #2
 800eee6:	6153      	str	r3, [r2, #20]
}
 800eee8:	bf00      	nop
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	58004000 	.word	0x58004000

0800eef8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ef02:	2300      	movs	r3, #0
 800ef04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ef06:	e14c      	b.n	800f1a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	fa01 f303 	lsl.w	r3, r1, r3
 800ef14:	4013      	ands	r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 813e 	beq.w	800f19c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	f003 0303 	and.w	r3, r3, #3
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d005      	beq.n	800ef38 <HAL_GPIO_Init+0x40>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	f003 0303 	and.w	r3, r3, #3
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d130      	bne.n	800ef9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	2203      	movs	r2, #3
 800ef44:	fa02 f303 	lsl.w	r3, r2, r3
 800ef48:	43db      	mvns	r3, r3
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	fa02 f303 	lsl.w	r3, r2, r3
 800ef5c:	693a      	ldr	r2, [r7, #16]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ef6e:	2201      	movs	r2, #1
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	fa02 f303 	lsl.w	r3, r2, r3
 800ef76:	43db      	mvns	r3, r3
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	091b      	lsrs	r3, r3, #4
 800ef84:	f003 0201 	and.w	r2, r3, #1
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	693a      	ldr	r2, [r7, #16]
 800ef98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	f003 0303 	and.w	r3, r3, #3
 800efa2:	2b03      	cmp	r3, #3
 800efa4:	d017      	beq.n	800efd6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	2203      	movs	r2, #3
 800efb2:	fa02 f303 	lsl.w	r3, r2, r3
 800efb6:	43db      	mvns	r3, r3
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	4013      	ands	r3, r2
 800efbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	689a      	ldr	r2, [r3, #8]
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	fa02 f303 	lsl.w	r3, r2, r3
 800efca:	693a      	ldr	r2, [r7, #16]
 800efcc:	4313      	orrs	r3, r2
 800efce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	693a      	ldr	r2, [r7, #16]
 800efd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	f003 0303 	and.w	r3, r3, #3
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d123      	bne.n	800f02a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	08da      	lsrs	r2, r3, #3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	3208      	adds	r2, #8
 800efea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f003 0307 	and.w	r3, r3, #7
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	220f      	movs	r2, #15
 800effa:	fa02 f303 	lsl.w	r3, r2, r3
 800effe:	43db      	mvns	r3, r3
 800f000:	693a      	ldr	r2, [r7, #16]
 800f002:	4013      	ands	r3, r2
 800f004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	691a      	ldr	r2, [r3, #16]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f003 0307 	and.w	r3, r3, #7
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	fa02 f303 	lsl.w	r3, r2, r3
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	4313      	orrs	r3, r2
 800f01a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	08da      	lsrs	r2, r3, #3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3208      	adds	r2, #8
 800f024:	6939      	ldr	r1, [r7, #16]
 800f026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	005b      	lsls	r3, r3, #1
 800f034:	2203      	movs	r2, #3
 800f036:	fa02 f303 	lsl.w	r3, r2, r3
 800f03a:	43db      	mvns	r3, r3
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	4013      	ands	r3, r2
 800f040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f003 0203 	and.w	r2, r3, #3
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	fa02 f303 	lsl.w	r3, r2, r3
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	4313      	orrs	r3, r2
 800f056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	693a      	ldr	r2, [r7, #16]
 800f05c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 8098 	beq.w	800f19c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800f06c:	4a54      	ldr	r2, [pc, #336]	@ (800f1c0 <HAL_GPIO_Init+0x2c8>)
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	089b      	lsrs	r3, r3, #2
 800f072:	3302      	adds	r3, #2
 800f074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	220f      	movs	r2, #15
 800f084:	fa02 f303 	lsl.w	r3, r2, r3
 800f088:	43db      	mvns	r3, r3
 800f08a:	693a      	ldr	r2, [r7, #16]
 800f08c:	4013      	ands	r3, r2
 800f08e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800f096:	d019      	beq.n	800f0cc <HAL_GPIO_Init+0x1d4>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a4a      	ldr	r2, [pc, #296]	@ (800f1c4 <HAL_GPIO_Init+0x2cc>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d013      	beq.n	800f0c8 <HAL_GPIO_Init+0x1d0>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a49      	ldr	r2, [pc, #292]	@ (800f1c8 <HAL_GPIO_Init+0x2d0>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d00d      	beq.n	800f0c4 <HAL_GPIO_Init+0x1cc>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a48      	ldr	r2, [pc, #288]	@ (800f1cc <HAL_GPIO_Init+0x2d4>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d007      	beq.n	800f0c0 <HAL_GPIO_Init+0x1c8>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a47      	ldr	r2, [pc, #284]	@ (800f1d0 <HAL_GPIO_Init+0x2d8>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d101      	bne.n	800f0bc <HAL_GPIO_Init+0x1c4>
 800f0b8:	2304      	movs	r3, #4
 800f0ba:	e008      	b.n	800f0ce <HAL_GPIO_Init+0x1d6>
 800f0bc:	2307      	movs	r3, #7
 800f0be:	e006      	b.n	800f0ce <HAL_GPIO_Init+0x1d6>
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e004      	b.n	800f0ce <HAL_GPIO_Init+0x1d6>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	e002      	b.n	800f0ce <HAL_GPIO_Init+0x1d6>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e000      	b.n	800f0ce <HAL_GPIO_Init+0x1d6>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	697a      	ldr	r2, [r7, #20]
 800f0d0:	f002 0203 	and.w	r2, r2, #3
 800f0d4:	0092      	lsls	r2, r2, #2
 800f0d6:	4093      	lsls	r3, r2
 800f0d8:	693a      	ldr	r2, [r7, #16]
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f0de:	4938      	ldr	r1, [pc, #224]	@ (800f1c0 <HAL_GPIO_Init+0x2c8>)
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	089b      	lsrs	r3, r3, #2
 800f0e4:	3302      	adds	r3, #2
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f0ec:	4b39      	ldr	r3, [pc, #228]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	43db      	mvns	r3, r3
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d003      	beq.n	800f110 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f110:	4a30      	ldr	r2, [pc, #192]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f116:	4b2f      	ldr	r3, [pc, #188]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	43db      	mvns	r3, r3
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	4013      	ands	r3, r2
 800f124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4313      	orrs	r3, r2
 800f138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f13a:	4a26      	ldr	r2, [pc, #152]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800f140:	4b24      	ldr	r3, [pc, #144]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	43db      	mvns	r3, r3
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	4013      	ands	r3, r2
 800f150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d003      	beq.n	800f166 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4313      	orrs	r3, r2
 800f164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f166:	4a1b      	ldr	r2, [pc, #108]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800f16e:	4b19      	ldr	r3, [pc, #100]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	43db      	mvns	r3, r3
 800f17a:	693a      	ldr	r2, [r7, #16]
 800f17c:	4013      	ands	r3, r2
 800f17e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800f18c:	693a      	ldr	r2, [r7, #16]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	4313      	orrs	r3, r2
 800f192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f194:	4a0f      	ldr	r2, [pc, #60]	@ (800f1d4 <HAL_GPIO_Init+0x2dc>)
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f47f aeab 	bne.w	800ef08 <HAL_GPIO_Init+0x10>
  }
}
 800f1b2:	bf00      	nop
 800f1b4:	bf00      	nop
 800f1b6:	371c      	adds	r7, #28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr
 800f1c0:	40010000 	.word	0x40010000
 800f1c4:	48000400 	.word	0x48000400
 800f1c8:	48000800 	.word	0x48000800
 800f1cc:	48000c00 	.word	0x48000c00
 800f1d0:	48001000 	.word	0x48001000
 800f1d4:	58000800 	.word	0x58000800

0800f1d8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	691a      	ldr	r2, [r3, #16]
 800f1e8:	887b      	ldrh	r3, [r7, #2]
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	73fb      	strb	r3, [r7, #15]
 800f1f4:	e001      	b.n	800f1fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3714      	adds	r7, #20
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	807b      	strh	r3, [r7, #2]
 800f214:	4613      	mov	r3, r2
 800f216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f218:	787b      	ldrb	r3, [r7, #1]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d003      	beq.n	800f226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f21e:	887a      	ldrh	r2, [r7, #2]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f224:	e002      	b.n	800f22c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f226:	887a      	ldrh	r2, [r7, #2]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	460b      	mov	r3, r1
 800f242:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f24a:	887a      	ldrh	r2, [r7, #2]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	4013      	ands	r3, r2
 800f250:	041a      	lsls	r2, r3, #16
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	43d9      	mvns	r1, r3
 800f256:	887b      	ldrh	r3, [r7, #2]
 800f258:	400b      	ands	r3, r1
 800f25a:	431a      	orrs	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	619a      	str	r2, [r3, #24]
}
 800f260:	bf00      	nop
 800f262:	3714      	adds	r7, #20
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	4603      	mov	r3, r0
 800f274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f276:	4b08      	ldr	r3, [pc, #32]	@ (800f298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f278:	68da      	ldr	r2, [r3, #12]
 800f27a:	88fb      	ldrh	r3, [r7, #6]
 800f27c:	4013      	ands	r3, r2
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d006      	beq.n	800f290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f282:	4a05      	ldr	r2, [pc, #20]	@ (800f298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f284:	88fb      	ldrh	r3, [r7, #6]
 800f286:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7f6 fc20 	bl	8005ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 800f290:	bf00      	nop
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	58000800 	.word	0x58000800

0800f29c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800f2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2cc <HAL_HSEM_IRQHandler+0x30>)
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800f2a8:	4b08      	ldr	r3, [pc, #32]	@ (800f2cc <HAL_HSEM_IRQHandler+0x30>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	43db      	mvns	r3, r3
 800f2b0:	4906      	ldr	r1, [pc, #24]	@ (800f2cc <HAL_HSEM_IRQHandler+0x30>)
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800f2b6:	4a05      	ldr	r2, [pc, #20]	@ (800f2cc <HAL_HSEM_IRQHandler+0x30>)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f807 	bl	800f2d0 <HAL_HSEM_FreeCallback>
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	58001500 	.word	0x58001500

0800f2d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e6:	b08b      	sub	sp, #44	@ 0x2c
 800f2e8:	af06      	add	r7, sp, #24
 800f2ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e0cb      	b.n	800f48e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d106      	bne.n	800f310 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7fc fee8 	bl	800c0e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2203      	movs	r2, #3
 800f314:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f005 f943 	bl	80145a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f322:	2300      	movs	r3, #0
 800f324:	73fb      	strb	r3, [r7, #15]
 800f326:	e040      	b.n	800f3aa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f328:	7bfb      	ldrb	r3, [r7, #15]
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	4613      	mov	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	440b      	add	r3, r1
 800f338:	3301      	adds	r3, #1
 800f33a:	2201      	movs	r2, #1
 800f33c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	4613      	mov	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	00db      	lsls	r3, r3, #3
 800f34c:	440b      	add	r3, r1
 800f34e:	7bfa      	ldrb	r2, [r7, #15]
 800f350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f352:	7bfb      	ldrb	r3, [r7, #15]
 800f354:	6879      	ldr	r1, [r7, #4]
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	4613      	mov	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	440b      	add	r3, r1
 800f362:	3303      	adds	r3, #3
 800f364:	2200      	movs	r2, #0
 800f366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f368:	7bfa      	ldrb	r2, [r7, #15]
 800f36a:	6879      	ldr	r1, [r7, #4]
 800f36c:	4613      	mov	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4413      	add	r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	440b      	add	r3, r1
 800f376:	3338      	adds	r3, #56	@ 0x38
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f37c:	7bfa      	ldrb	r2, [r7, #15]
 800f37e:	6879      	ldr	r1, [r7, #4]
 800f380:	4613      	mov	r3, r2
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	4413      	add	r3, r2
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	440b      	add	r3, r1
 800f38a:	333c      	adds	r3, #60	@ 0x3c
 800f38c:	2200      	movs	r2, #0
 800f38e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f390:	7bfa      	ldrb	r2, [r7, #15]
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	4613      	mov	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	440b      	add	r3, r1
 800f39e:	3340      	adds	r3, #64	@ 0x40
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3a4:	7bfb      	ldrb	r3, [r7, #15]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	73fb      	strb	r3, [r7, #15]
 800f3aa:	7bfa      	ldrb	r2, [r7, #15]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d3b9      	bcc.n	800f328 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	73fb      	strb	r3, [r7, #15]
 800f3b8:	e044      	b.n	800f444 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f3ba:	7bfa      	ldrb	r2, [r7, #15]
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4413      	add	r3, r2
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	440b      	add	r3, r1
 800f3c8:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f3d0:	7bfa      	ldrb	r2, [r7, #15]
 800f3d2:	6879      	ldr	r1, [r7, #4]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4413      	add	r3, r2
 800f3da:	00db      	lsls	r3, r3, #3
 800f3dc:	440b      	add	r3, r1
 800f3de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800f3e2:	7bfa      	ldrb	r2, [r7, #15]
 800f3e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f3e6:	7bfa      	ldrb	r2, [r7, #15]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	440b      	add	r3, r1
 800f3f4:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f3fc:	7bfa      	ldrb	r2, [r7, #15]
 800f3fe:	6879      	ldr	r1, [r7, #4]
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	440b      	add	r3, r1
 800f40a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800f40e:	2200      	movs	r2, #0
 800f410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f412:	7bfa      	ldrb	r2, [r7, #15]
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	4613      	mov	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	440b      	add	r3, r1
 800f420:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800f424:	2200      	movs	r2, #0
 800f426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f428:	7bfa      	ldrb	r2, [r7, #15]
 800f42a:	6879      	ldr	r1, [r7, #4]
 800f42c:	4613      	mov	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	440b      	add	r3, r1
 800f436:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
 800f440:	3301      	adds	r3, #1
 800f442:	73fb      	strb	r3, [r7, #15]
 800f444:	7bfa      	ldrb	r2, [r7, #15]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d3b5      	bcc.n	800f3ba <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	687e      	ldr	r6, [r7, #4]
 800f456:	466d      	mov	r5, sp
 800f458:	f106 0410 	add.w	r4, r6, #16
 800f45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f45e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	602b      	str	r3, [r5, #0]
 800f464:	1d33      	adds	r3, r6, #4
 800f466:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f468:	6838      	ldr	r0, [r7, #0]
 800f46a:	f005 f8b8 	bl	80145de <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	69db      	ldr	r3, [r3, #28]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d102      	bne.n	800f48c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f805 	bl	800f496 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f496 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	f043 0301 	orr.w	r3, r3, #1
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	f043 0302 	orr.w	r3, r3, #2
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01d      	beq.n	800f538 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	791b      	ldrb	r3, [r3, #4]
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d102      	bne.n	800f50c <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7fc fd18 	bl	800bf3c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2202      	movs	r2, #2
 800f510:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2201      	movs	r2, #1
 800f518:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	689a      	ldr	r2, [r3, #8]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800f528:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	711a      	strb	r2, [r3, #4]
 800f536:	e001      	b.n	800f53c <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800f538:	2301      	movs	r3, #1
 800f53a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f548:	b480      	push	{r7}
 800f54a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f54c:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a04      	ldr	r2, [pc, #16]	@ (800f564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f556:	6013      	str	r3, [r2, #0]
}
 800f558:	bf00      	nop
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	58000400 	.word	0x58000400

0800f568 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f568:	b480      	push	{r7}
 800f56a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800f56c:	4b04      	ldr	r3, [pc, #16]	@ (800f580 <HAL_PWREx_GetVoltageRange+0x18>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800f574:	4618      	mov	r0, r3
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	58000400 	.word	0x58000400

0800f584 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800f584:	b480      	push	{r7}
 800f586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800f588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f596:	d101      	bne.n	800f59c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800f598:	2301      	movs	r3, #1
 800f59a:	e000      	b.n	800f59e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <LL_RCC_HSE_Enable>:
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800f5ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f5ba:	6013      	str	r3, [r2, #0]
}
 800f5bc:	bf00      	nop
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <LL_RCC_HSE_Disable>:
{
 800f5c6:	b480      	push	{r7}
 800f5c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800f5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5d8:	6013      	str	r3, [r2, #0]
}
 800f5da:	bf00      	nop
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <LL_RCC_HSE_IsReady>:
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800f5e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5f6:	d101      	bne.n	800f5fc <LL_RCC_HSE_IsReady+0x18>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e000      	b.n	800f5fe <LL_RCC_HSE_IsReady+0x1a>
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <LL_RCC_HSI_Enable>:
{
 800f608:	b480      	push	{r7}
 800f60a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f60c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f61a:	6013      	str	r3, [r2, #0]
}
 800f61c:	bf00      	nop
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <LL_RCC_HSI_Disable>:
{
 800f626:	b480      	push	{r7}
 800f628:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800f62a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f638:	6013      	str	r3, [r2, #0]
}
 800f63a:	bf00      	nop
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <LL_RCC_HSI_IsReady>:
{
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f656:	d101      	bne.n	800f65c <LL_RCC_HSI_IsReady+0x18>
 800f658:	2301      	movs	r3, #1
 800f65a:	e000      	b.n	800f65e <LL_RCC_HSI_IsReady+0x1a>
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <LL_RCC_HSI_SetCalibTrimming>:
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800f670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	061b      	lsls	r3, r3, #24
 800f67e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f682:	4313      	orrs	r3, r2
 800f684:	604b      	str	r3, [r1, #4]
}
 800f686:	bf00      	nop
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <LL_RCC_HSI48_Enable>:
{
 800f692:	b480      	push	{r7}
 800f694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800f696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f69a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f69e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f6a2:	f043 0301 	orr.w	r3, r3, #1
 800f6a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800f6aa:	bf00      	nop
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <LL_RCC_HSI48_Disable>:
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800f6b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f6c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f6c4:	f023 0301 	bic.w	r3, r3, #1
 800f6c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800f6cc:	bf00      	nop
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <LL_RCC_HSI48_IsReady>:
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800f6da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f6e2:	f003 0302 	and.w	r3, r3, #2
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d101      	bne.n	800f6ee <LL_RCC_HSI48_IsReady+0x18>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e000      	b.n	800f6f0 <LL_RCC_HSI48_IsReady+0x1a>
 800f6ee:	2300      	movs	r3, #0
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <LL_RCC_LSE_Enable>:
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f6fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f712:	bf00      	nop
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <LL_RCC_LSE_Disable>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f72c:	f023 0301 	bic.w	r3, r3, #1
 800f730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f734:	bf00      	nop
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <LL_RCC_LSE_EnableBypass>:
{
 800f73e:	b480      	push	{r7}
 800f740:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f74a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f74e:	f043 0304 	orr.w	r3, r3, #4
 800f752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f756:	bf00      	nop
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <LL_RCC_LSE_DisableBypass>:
{
 800f760:	b480      	push	{r7}
 800f762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f76c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f770:	f023 0304 	bic.w	r3, r3, #4
 800f774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f778:	bf00      	nop
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <LL_RCC_LSE_IsReady>:
{
 800f782:	b480      	push	{r7}
 800f784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f78e:	f003 0302 	and.w	r3, r3, #2
 800f792:	2b02      	cmp	r3, #2
 800f794:	d101      	bne.n	800f79a <LL_RCC_LSE_IsReady+0x18>
 800f796:	2301      	movs	r3, #1
 800f798:	e000      	b.n	800f79c <LL_RCC_LSE_IsReady+0x1a>
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <LL_RCC_LSI1_Enable>:
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800f7aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7b6:	f043 0301 	orr.w	r3, r3, #1
 800f7ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f7be:	bf00      	nop
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <LL_RCC_LSI1_Disable>:
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800f7cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7d8:	f023 0301 	bic.w	r3, r3, #1
 800f7dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f7e0:	bf00      	nop
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <LL_RCC_LSI1_IsReady>:
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800f7ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7f6:	f003 0302 	and.w	r3, r3, #2
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	d101      	bne.n	800f802 <LL_RCC_LSI1_IsReady+0x18>
 800f7fe:	2301      	movs	r3, #1
 800f800:	e000      	b.n	800f804 <LL_RCC_LSI1_IsReady+0x1a>
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <LL_RCC_LSI2_Enable>:
{
 800f80e:	b480      	push	{r7}
 800f810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f81a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f81e:	f043 0304 	orr.w	r3, r3, #4
 800f822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f826:	bf00      	nop
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <LL_RCC_LSI2_Disable>:
{
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800f834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f83c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f840:	f023 0304 	bic.w	r3, r3, #4
 800f844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800f848:	bf00      	nop
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <LL_RCC_LSI2_IsReady>:
{
 800f852:	b480      	push	{r7}
 800f854:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800f856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f85a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f85e:	f003 0308 	and.w	r3, r3, #8
 800f862:	2b08      	cmp	r3, #8
 800f864:	d101      	bne.n	800f86a <LL_RCC_LSI2_IsReady+0x18>
 800f866:	2301      	movs	r3, #1
 800f868:	e000      	b.n	800f86c <LL_RCC_LSI2_IsReady+0x1a>
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr

0800f876 <LL_RCC_LSI2_SetTrimming>:
{
 800f876:	b480      	push	{r7}
 800f878:	b083      	sub	sp, #12
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800f87e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f886:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	021b      	lsls	r3, r3, #8
 800f88e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f892:	4313      	orrs	r3, r2
 800f894:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <LL_RCC_MSI_Enable>:
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8b2:	f043 0301 	orr.w	r3, r3, #1
 800f8b6:	6013      	str	r3, [r2, #0]
}
 800f8b8:	bf00      	nop
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <LL_RCC_MSI_Disable>:
{
 800f8c2:	b480      	push	{r7}
 800f8c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f8d0:	f023 0301 	bic.w	r3, r3, #1
 800f8d4:	6013      	str	r3, [r2, #0]
}
 800f8d6:	bf00      	nop
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <LL_RCC_MSI_IsReady>:
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f003 0302 	and.w	r3, r3, #2
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d101      	bne.n	800f8f6 <LL_RCC_MSI_IsReady+0x16>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e000      	b.n	800f8f8 <LL_RCC_MSI_IsReady+0x18>
 800f8f6:	2300      	movs	r3, #0
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <LL_RCC_MSI_SetRange>:
{
 800f902:	b480      	push	{r7}
 800f904:	b083      	sub	sp, #12
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800f90a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f914:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	600b      	str	r3, [r1, #0]
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <LL_RCC_MSI_GetRange>:
{
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800f930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f93a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2bb0      	cmp	r3, #176	@ 0xb0
 800f940:	d901      	bls.n	800f946 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800f942:	23b0      	movs	r3, #176	@ 0xb0
 800f944:	607b      	str	r3, [r7, #4]
  return msiRange;
 800f946:	687b      	ldr	r3, [r7, #4]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <LL_RCC_MSI_SetCalibTrimming>:
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	021b      	lsls	r3, r3, #8
 800f96a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f96e:	4313      	orrs	r3, r2
 800f970:	604b      	str	r3, [r1, #4]
}
 800f972:	bf00      	nop
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <LL_RCC_SetSysClkSource>:
{
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f023 0203 	bic.w	r2, r3, #3
 800f990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4313      	orrs	r3, r2
 800f998:	608b      	str	r3, [r1, #8]
}
 800f99a:	bf00      	nop
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <LL_RCC_GetSysClkSource>:
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f9aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	f003 030c 	and.w	r3, r3, #12
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <LL_RCC_SetAHBPrescaler>:
{
 800f9be:	b480      	push	{r7}
 800f9c0:	b083      	sub	sp, #12
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f9c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f9d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	608b      	str	r3, [r1, #8]
}
 800f9da:	bf00      	nop
 800f9dc:	370c      	adds	r7, #12
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800f9e6:	b480      	push	{r7}
 800f9e8:	b083      	sub	sp, #12
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800f9ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f9f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f9fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800fa06:	bf00      	nop
 800fa08:	370c      	adds	r7, #12
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr

0800fa12 <LL_RCC_SetAHB4Prescaler>:
{
 800fa12:	b480      	push	{r7}
 800fa14:	b083      	sub	sp, #12
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800fa1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fa22:	f023 020f 	bic.w	r2, r3, #15
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	091b      	lsrs	r3, r3, #4
 800fa2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <LL_RCC_SetAPB1Prescaler>:
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800fa48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800fa52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	608b      	str	r3, [r1, #8]
}
 800fa5c:	bf00      	nop
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <LL_RCC_SetAPB2Prescaler>:
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800fa70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800fa7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	608b      	str	r3, [r1, #8]
}
 800fa84:	bf00      	nop
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <LL_RCC_GetAHBPrescaler>:
{
 800fa90:	b480      	push	{r7}
 800fa92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800fa94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <LL_RCC_GetAHB4Prescaler>:
{
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800faac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fab0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fab4:	011b      	lsls	r3, r3, #4
 800fab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <LL_RCC_GetAPB1Prescaler>:
{
 800fac4:	b480      	push	{r7}
 800fac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800fac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <LL_RCC_GetAPB2Prescaler>:
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800fae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800faea:	4618      	mov	r0, r3
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr

0800faf4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800faf4:	b480      	push	{r7}
 800faf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800faf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fb06:	6013      	str	r3, [r2, #0]
}
 800fb08:	bf00      	nop
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800fb12:	b480      	push	{r7}
 800fb14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800fb16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb24:	6013      	str	r3, [r2, #0]
}
 800fb26:	bf00      	nop
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800fb30:	b480      	push	{r7}
 800fb32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800fb34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb42:	d101      	bne.n	800fb48 <LL_RCC_PLL_IsReady+0x18>
 800fb44:	2301      	movs	r3, #1
 800fb46:	e000      	b.n	800fb4a <LL_RCC_PLL_IsReady+0x1a>
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800fb54:	b480      	push	{r7}
 800fb56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800fb58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	0a1b      	lsrs	r3, r3, #8
 800fb60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800fb6e:	b480      	push	{r7}
 800fb70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800fb72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800fb86:	b480      	push	{r7}
 800fb88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800fb8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800fba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f003 0303 	and.w	r3, r3, #3
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800fbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbc8:	d101      	bne.n	800fbce <LL_RCC_IsActiveFlag_HPRE+0x18>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e000      	b.n	800fbd0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800fbda:	b480      	push	{r7}
 800fbdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800fbde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fbe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fbee:	d101      	bne.n	800fbf4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e000      	b.n	800fbf6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800fc00:	b480      	push	{r7}
 800fc02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800fc04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fc0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fc10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc14:	d101      	bne.n	800fc1a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800fc16:	2301      	movs	r3, #1
 800fc18:	e000      	b.n	800fc1c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800fc1a:	2300      	movs	r3, #0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr

0800fc26 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800fc26:	b480      	push	{r7}
 800fc28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800fc2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc38:	d101      	bne.n	800fc3e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e000      	b.n	800fc40 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800fc4a:	b480      	push	{r7}
 800fc4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800fc4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fc58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fc5c:	d101      	bne.n	800fc62 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e000      	b.n	800fc64 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
	...

0800fc70 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc70:	b590      	push	{r4, r7, lr}
 800fc72:	b08d      	sub	sp, #52	@ 0x34
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d101      	bne.n	800fc82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e363      	b.n	801034a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 0320 	and.w	r3, r3, #32
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 808d 	beq.w	800fdaa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fc90:	f7ff fe89 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 800fc94:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fc96:	f7ff ff82 	bl	800fb9e <LL_RCC_PLL_GetMainSource>
 800fc9a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800fc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d005      	beq.n	800fcae <HAL_RCC_OscConfig+0x3e>
 800fca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca4:	2b0c      	cmp	r3, #12
 800fca6:	d147      	bne.n	800fd38 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800fca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d144      	bne.n	800fd38 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e347      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fcbe:	f7ff fe34 	bl	800f92a <LL_RCC_MSI_GetRange>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	429c      	cmp	r4, r3
 800fcc6:	d914      	bls.n	800fcf2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fccc:	4618      	mov	r0, r3
 800fcce:	f000 fd2f 	bl	8010730 <RCC_SetFlashLatencyFromMSIRange>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e336      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff fe0e 	bl	800f902 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff fe32 	bl	800f954 <LL_RCC_MSI_SetCalibTrimming>
 800fcf0:	e013      	b.n	800fd1a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7ff fe03 	bl	800f902 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a1b      	ldr	r3, [r3, #32]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7ff fe27 	bl	800f954 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fd10 	bl	8010730 <RCC_SetFlashLatencyFromMSIRange>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	e317      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fd1a:	f000 fcc9 	bl	80106b0 <HAL_RCC_GetHCLKFreq>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	4aa4      	ldr	r2, [pc, #656]	@ (800ffb4 <HAL_RCC_OscConfig+0x344>)
 800fd22:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800fd24:	4ba4      	ldr	r3, [pc, #656]	@ (800ffb8 <HAL_RCC_OscConfig+0x348>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fc73 	bl	800e614 <HAL_InitTick>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d039      	beq.n	800fda8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e308      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	69db      	ldr	r3, [r3, #28]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d01e      	beq.n	800fd7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fd40:	f7ff fdb0 	bl	800f8a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fd44:	f7fe fcb4 	bl	800e6b0 <HAL_GetTick>
 800fd48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800fd4a:	e008      	b.n	800fd5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd4c:	f7fe fcb0 	bl	800e6b0 <HAL_GetTick>
 800fd50:	4602      	mov	r2, r0
 800fd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d901      	bls.n	800fd5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	e2f5      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800fd5e:	f7ff fdbf 	bl	800f8e0 <LL_RCC_MSI_IsReady>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d0f1      	beq.n	800fd4c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7ff fdc8 	bl	800f902 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff fdec 	bl	800f954 <LL_RCC_MSI_SetCalibTrimming>
 800fd7c:	e015      	b.n	800fdaa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd7e:	f7ff fda0 	bl	800f8c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fd82:	f7fe fc95 	bl	800e6b0 <HAL_GetTick>
 800fd86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800fd88:	e008      	b.n	800fd9c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd8a:	f7fe fc91 	bl	800e6b0 <HAL_GetTick>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d901      	bls.n	800fd9c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800fd98:	2303      	movs	r3, #3
 800fd9a:	e2d6      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800fd9c:	f7ff fda0 	bl	800f8e0 <LL_RCC_MSI_IsReady>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1f1      	bne.n	800fd8a <HAL_RCC_OscConfig+0x11a>
 800fda6:	e000      	b.n	800fdaa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800fda8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d047      	beq.n	800fe46 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fdb6:	f7ff fdf6 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 800fdba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fdbc:	f7ff feef 	bl	800fb9e <LL_RCC_PLL_GetMainSource>
 800fdc0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800fdc2:	6a3b      	ldr	r3, [r7, #32]
 800fdc4:	2b08      	cmp	r3, #8
 800fdc6:	d005      	beq.n	800fdd4 <HAL_RCC_OscConfig+0x164>
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	2b0c      	cmp	r3, #12
 800fdcc:	d108      	bne.n	800fde0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d105      	bne.n	800fde0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d134      	bne.n	800fe46 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e2b4      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fde8:	d102      	bne.n	800fdf0 <HAL_RCC_OscConfig+0x180>
 800fdea:	f7ff fbdd 	bl	800f5a8 <LL_RCC_HSE_Enable>
 800fdee:	e001      	b.n	800fdf4 <HAL_RCC_OscConfig+0x184>
 800fdf0:	f7ff fbe9 	bl	800f5c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d012      	beq.n	800fe22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdfc:	f7fe fc58 	bl	800e6b0 <HAL_GetTick>
 800fe00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800fe02:	e008      	b.n	800fe16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe04:	f7fe fc54 	bl	800e6b0 <HAL_GetTick>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe0c:	1ad3      	subs	r3, r2, r3
 800fe0e:	2b64      	cmp	r3, #100	@ 0x64
 800fe10:	d901      	bls.n	800fe16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800fe12:	2303      	movs	r3, #3
 800fe14:	e299      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800fe16:	f7ff fbe5 	bl	800f5e4 <LL_RCC_HSE_IsReady>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d0f1      	beq.n	800fe04 <HAL_RCC_OscConfig+0x194>
 800fe20:	e011      	b.n	800fe46 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe22:	f7fe fc45 	bl	800e6b0 <HAL_GetTick>
 800fe26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800fe28:	e008      	b.n	800fe3c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe2a:	f7fe fc41 	bl	800e6b0 <HAL_GetTick>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	2b64      	cmp	r3, #100	@ 0x64
 800fe36:	d901      	bls.n	800fe3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	e286      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800fe3c:	f7ff fbd2 	bl	800f5e4 <LL_RCC_HSE_IsReady>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1f1      	bne.n	800fe2a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f003 0302 	and.w	r3, r3, #2
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d04c      	beq.n	800feec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe52:	f7ff fda8 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 800fe56:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fe58:	f7ff fea1 	bl	800fb9e <LL_RCC_PLL_GetMainSource>
 800fe5c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	2b04      	cmp	r3, #4
 800fe62:	d005      	beq.n	800fe70 <HAL_RCC_OscConfig+0x200>
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	2b0c      	cmp	r3, #12
 800fe68:	d10e      	bne.n	800fe88 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d10b      	bne.n	800fe88 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d101      	bne.n	800fe7c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e266      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	691b      	ldr	r3, [r3, #16]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff fbf1 	bl	800f668 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800fe86:	e031      	b.n	800feec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d019      	beq.n	800fec4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fe90:	f7ff fbba 	bl	800f608 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe94:	f7fe fc0c 	bl	800e6b0 <HAL_GetTick>
 800fe98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800fe9a:	e008      	b.n	800feae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fe9c:	f7fe fc08 	bl	800e6b0 <HAL_GetTick>
 800fea0:	4602      	mov	r2, r0
 800fea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d901      	bls.n	800feae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800feaa:	2303      	movs	r3, #3
 800feac:	e24d      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800feae:	f7ff fbc9 	bl	800f644 <LL_RCC_HSI_IsReady>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d0f1      	beq.n	800fe9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fbd3 	bl	800f668 <LL_RCC_HSI_SetCalibTrimming>
 800fec2:	e013      	b.n	800feec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fec4:	f7ff fbaf 	bl	800f626 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fec8:	f7fe fbf2 	bl	800e6b0 <HAL_GetTick>
 800fecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800fece:	e008      	b.n	800fee2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fed0:	f7fe fbee 	bl	800e6b0 <HAL_GetTick>
 800fed4:	4602      	mov	r2, r0
 800fed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	2b02      	cmp	r3, #2
 800fedc:	d901      	bls.n	800fee2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800fede:	2303      	movs	r3, #3
 800fee0:	e233      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800fee2:	f7ff fbaf 	bl	800f644 <LL_RCC_HSI_IsReady>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1f1      	bne.n	800fed0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f003 0308 	and.w	r3, r3, #8
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d106      	bne.n	800ff06 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80a3 	beq.w	801004c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d076      	beq.n	800fffc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f003 0310 	and.w	r3, r3, #16
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d046      	beq.n	800ffa8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ff1a:	f7ff fc66 	bl	800f7ea <LL_RCC_LSI1_IsReady>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d113      	bne.n	800ff4c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ff24:	f7ff fc3f 	bl	800f7a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ff28:	f7fe fbc2 	bl	800e6b0 <HAL_GetTick>
 800ff2c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ff2e:	e008      	b.n	800ff42 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ff30:	f7fe fbbe 	bl	800e6b0 <HAL_GetTick>
 800ff34:	4602      	mov	r2, r0
 800ff36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	2b02      	cmp	r3, #2
 800ff3c:	d901      	bls.n	800ff42 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ff3e:	2303      	movs	r3, #3
 800ff40:	e203      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ff42:	f7ff fc52 	bl	800f7ea <LL_RCC_LSI1_IsReady>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d0f1      	beq.n	800ff30 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ff4c:	f7ff fc5f 	bl	800f80e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff50:	f7fe fbae 	bl	800e6b0 <HAL_GetTick>
 800ff54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ff56:	e008      	b.n	800ff6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ff58:	f7fe fbaa 	bl	800e6b0 <HAL_GetTick>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	d901      	bls.n	800ff6a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ff66:	2303      	movs	r3, #3
 800ff68:	e1ef      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ff6a:	f7ff fc72 	bl	800f852 <LL_RCC_LSI2_IsReady>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d0f1      	beq.n	800ff58 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff fc7c 	bl	800f876 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ff7e:	f7ff fc23 	bl	800f7c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff82:	f7fe fb95 	bl	800e6b0 <HAL_GetTick>
 800ff86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ff88:	e008      	b.n	800ff9c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ff8a:	f7fe fb91 	bl	800e6b0 <HAL_GetTick>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d901      	bls.n	800ff9c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ff98:	2303      	movs	r3, #3
 800ff9a:	e1d6      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ff9c:	f7ff fc25 	bl	800f7ea <LL_RCC_LSI1_IsReady>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1f1      	bne.n	800ff8a <HAL_RCC_OscConfig+0x31a>
 800ffa6:	e051      	b.n	801004c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ffa8:	f7ff fbfd 	bl	800f7a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffac:	f7fe fb80 	bl	800e6b0 <HAL_GetTick>
 800ffb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ffb2:	e00c      	b.n	800ffce <HAL_RCC_OscConfig+0x35e>
 800ffb4:	20000018 	.word	0x20000018
 800ffb8:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ffbc:	f7fe fb78 	bl	800e6b0 <HAL_GetTick>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d901      	bls.n	800ffce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ffca:	2303      	movs	r3, #3
 800ffcc:	e1bd      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ffce:	f7ff fc0c 	bl	800f7ea <LL_RCC_LSI1_IsReady>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d0f1      	beq.n	800ffbc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ffd8:	f7ff fc2a 	bl	800f830 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ffdc:	e008      	b.n	800fff0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ffde:	f7fe fb67 	bl	800e6b0 <HAL_GetTick>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	d901      	bls.n	800fff0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ffec:	2303      	movs	r3, #3
 800ffee:	e1ac      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800fff0:	f7ff fc2f 	bl	800f852 <LL_RCC_LSI2_IsReady>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1f1      	bne.n	800ffde <HAL_RCC_OscConfig+0x36e>
 800fffa:	e027      	b.n	801004c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800fffc:	f7ff fc18 	bl	800f830 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010000:	f7fe fb56 	bl	800e6b0 <HAL_GetTick>
 8010004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8010006:	e008      	b.n	801001a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8010008:	f7fe fb52 	bl	800e6b0 <HAL_GetTick>
 801000c:	4602      	mov	r2, r0
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2b03      	cmp	r3, #3
 8010014:	d901      	bls.n	801001a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e197      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801001a:	f7ff fc1a 	bl	800f852 <LL_RCC_LSI2_IsReady>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1f1      	bne.n	8010008 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8010024:	f7ff fbd0 	bl	800f7c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010028:	f7fe fb42 	bl	800e6b0 <HAL_GetTick>
 801002c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801002e:	e008      	b.n	8010042 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8010030:	f7fe fb3e 	bl	800e6b0 <HAL_GetTick>
 8010034:	4602      	mov	r2, r0
 8010036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	2b02      	cmp	r3, #2
 801003c:	d901      	bls.n	8010042 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801003e:	2303      	movs	r3, #3
 8010040:	e183      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8010042:	f7ff fbd2 	bl	800f7ea <LL_RCC_LSI1_IsReady>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1f1      	bne.n	8010030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f003 0304 	and.w	r3, r3, #4
 8010054:	2b00      	cmp	r3, #0
 8010056:	d05b      	beq.n	8010110 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010058:	4ba7      	ldr	r3, [pc, #668]	@ (80102f8 <HAL_RCC_OscConfig+0x688>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010060:	2b00      	cmp	r3, #0
 8010062:	d114      	bne.n	801008e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8010064:	f7ff fa70 	bl	800f548 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010068:	f7fe fb22 	bl	800e6b0 <HAL_GetTick>
 801006c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801006e:	e008      	b.n	8010082 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010070:	f7fe fb1e 	bl	800e6b0 <HAL_GetTick>
 8010074:	4602      	mov	r2, r0
 8010076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	2b02      	cmp	r3, #2
 801007c:	d901      	bls.n	8010082 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801007e:	2303      	movs	r3, #3
 8010080:	e163      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010082:	4b9d      	ldr	r3, [pc, #628]	@ (80102f8 <HAL_RCC_OscConfig+0x688>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801008a:	2b00      	cmp	r3, #0
 801008c:	d0f0      	beq.n	8010070 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d102      	bne.n	801009c <HAL_RCC_OscConfig+0x42c>
 8010096:	f7ff fb30 	bl	800f6fa <LL_RCC_LSE_Enable>
 801009a:	e00c      	b.n	80100b6 <HAL_RCC_OscConfig+0x446>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	2b05      	cmp	r3, #5
 80100a2:	d104      	bne.n	80100ae <HAL_RCC_OscConfig+0x43e>
 80100a4:	f7ff fb4b 	bl	800f73e <LL_RCC_LSE_EnableBypass>
 80100a8:	f7ff fb27 	bl	800f6fa <LL_RCC_LSE_Enable>
 80100ac:	e003      	b.n	80100b6 <HAL_RCC_OscConfig+0x446>
 80100ae:	f7ff fb35 	bl	800f71c <LL_RCC_LSE_Disable>
 80100b2:	f7ff fb55 	bl	800f760 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	689b      	ldr	r3, [r3, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d014      	beq.n	80100e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80100be:	f7fe faf7 	bl	800e6b0 <HAL_GetTick>
 80100c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80100c4:	e00a      	b.n	80100dc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100c6:	f7fe faf3 	bl	800e6b0 <HAL_GetTick>
 80100ca:	4602      	mov	r2, r0
 80100cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d901      	bls.n	80100dc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80100d8:	2303      	movs	r3, #3
 80100da:	e136      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80100dc:	f7ff fb51 	bl	800f782 <LL_RCC_LSE_IsReady>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0ef      	beq.n	80100c6 <HAL_RCC_OscConfig+0x456>
 80100e6:	e013      	b.n	8010110 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80100e8:	f7fe fae2 	bl	800e6b0 <HAL_GetTick>
 80100ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80100ee:	e00a      	b.n	8010106 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100f0:	f7fe fade 	bl	800e6b0 <HAL_GetTick>
 80100f4:	4602      	mov	r2, r0
 80100f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100fe:	4293      	cmp	r3, r2
 8010100:	d901      	bls.n	8010106 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8010102:	2303      	movs	r3, #3
 8010104:	e121      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8010106:	f7ff fb3c 	bl	800f782 <LL_RCC_LSE_IsReady>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d1ef      	bne.n	80100f0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010118:	2b00      	cmp	r3, #0
 801011a:	d02c      	beq.n	8010176 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010120:	2b00      	cmp	r3, #0
 8010122:	d014      	beq.n	801014e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010124:	f7ff fab5 	bl	800f692 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010128:	f7fe fac2 	bl	800e6b0 <HAL_GetTick>
 801012c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801012e:	e008      	b.n	8010142 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010130:	f7fe fabe 	bl	800e6b0 <HAL_GetTick>
 8010134:	4602      	mov	r2, r0
 8010136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	2b02      	cmp	r3, #2
 801013c:	d901      	bls.n	8010142 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801013e:	2303      	movs	r3, #3
 8010140:	e103      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8010142:	f7ff fac8 	bl	800f6d6 <LL_RCC_HSI48_IsReady>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d0f1      	beq.n	8010130 <HAL_RCC_OscConfig+0x4c0>
 801014c:	e013      	b.n	8010176 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801014e:	f7ff fab1 	bl	800f6b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010152:	f7fe faad 	bl	800e6b0 <HAL_GetTick>
 8010156:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8010158:	e008      	b.n	801016c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801015a:	f7fe faa9 	bl	800e6b0 <HAL_GetTick>
 801015e:	4602      	mov	r2, r0
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	1ad3      	subs	r3, r2, r3
 8010164:	2b02      	cmp	r3, #2
 8010166:	d901      	bls.n	801016c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8010168:	2303      	movs	r3, #3
 801016a:	e0ee      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801016c:	f7ff fab3 	bl	800f6d6 <LL_RCC_HSI48_IsReady>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1f1      	bne.n	801015a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 80e4 	beq.w	8010348 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010180:	f7ff fc11 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 8010184:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8010186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010192:	2b02      	cmp	r3, #2
 8010194:	f040 80b4 	bne.w	8010300 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f003 0203 	and.w	r2, r3, #3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d123      	bne.n	80101ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d11c      	bne.n	80101ee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	0a1b      	lsrs	r3, r3, #8
 80101b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d114      	bne.n	80101ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d10d      	bne.n	80101ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80101dc:	429a      	cmp	r2, r3
 80101de:	d106      	bne.n	80101ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d05d      	beq.n	80102aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	2b0c      	cmp	r3, #12
 80101f2:	d058      	beq.n	80102a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80101f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d001      	beq.n	8010206 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e0a1      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8010206:	f7ff fc84 	bl	800fb12 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801020a:	f7fe fa51 	bl	800e6b0 <HAL_GetTick>
 801020e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010210:	e008      	b.n	8010224 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010212:	f7fe fa4d 	bl	800e6b0 <HAL_GetTick>
 8010216:	4602      	mov	r2, r0
 8010218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	2b02      	cmp	r3, #2
 801021e:	d901      	bls.n	8010224 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8010220:	2303      	movs	r3, #3
 8010222:	e092      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1ef      	bne.n	8010212 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010236:	68da      	ldr	r2, [r3, #12]
 8010238:	4b30      	ldr	r3, [pc, #192]	@ (80102fc <HAL_RCC_OscConfig+0x68c>)
 801023a:	4013      	ands	r3, r2
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010244:	4311      	orrs	r1, r2
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801024a:	0212      	lsls	r2, r2, #8
 801024c:	4311      	orrs	r1, r2
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010252:	4311      	orrs	r1, r2
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010258:	4311      	orrs	r1, r2
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801025e:	430a      	orrs	r2, r1
 8010260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010264:	4313      	orrs	r3, r2
 8010266:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010268:	f7ff fc44 	bl	800faf4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801026c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801027a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801027c:	f7fe fa18 	bl	800e6b0 <HAL_GetTick>
 8010280:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010282:	e008      	b.n	8010296 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010284:	f7fe fa14 	bl	800e6b0 <HAL_GetTick>
 8010288:	4602      	mov	r2, r0
 801028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	2b02      	cmp	r3, #2
 8010290:	d901      	bls.n	8010296 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8010292:	2303      	movs	r3, #3
 8010294:	e059      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0ef      	beq.n	8010284 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80102a4:	e050      	b.n	8010348 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	e04f      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d147      	bne.n	8010348 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80102b8:	f7ff fc1c 	bl	800faf4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80102bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80102c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80102cc:	f7fe f9f0 	bl	800e6b0 <HAL_GetTick>
 80102d0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102d2:	e008      	b.n	80102e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102d4:	f7fe f9ec 	bl	800e6b0 <HAL_GetTick>
 80102d8:	4602      	mov	r2, r0
 80102da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d901      	bls.n	80102e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80102e2:	2303      	movs	r3, #3
 80102e4:	e031      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80102e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d0ef      	beq.n	80102d4 <HAL_RCC_OscConfig+0x664>
 80102f4:	e028      	b.n	8010348 <HAL_RCC_OscConfig+0x6d8>
 80102f6:	bf00      	nop
 80102f8:	58000400 	.word	0x58000400
 80102fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	2b0c      	cmp	r3, #12
 8010304:	d01e      	beq.n	8010344 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010306:	f7ff fc04 	bl	800fb12 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801030a:	f7fe f9d1 	bl	800e6b0 <HAL_GetTick>
 801030e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010310:	e008      	b.n	8010324 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010312:	f7fe f9cd 	bl	800e6b0 <HAL_GetTick>
 8010316:	4602      	mov	r2, r0
 8010318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	2b02      	cmp	r3, #2
 801031e:	d901      	bls.n	8010324 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8010320:	2303      	movs	r3, #3
 8010322:	e012      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1ef      	bne.n	8010312 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8010332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010336:	68da      	ldr	r2, [r3, #12]
 8010338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801033c:	4b05      	ldr	r3, [pc, #20]	@ (8010354 <HAL_RCC_OscConfig+0x6e4>)
 801033e:	4013      	ands	r3, r2
 8010340:	60cb      	str	r3, [r1, #12]
 8010342:	e001      	b.n	8010348 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	3734      	adds	r7, #52	@ 0x34
 801034e:	46bd      	mov	sp, r7
 8010350:	bd90      	pop	{r4, r7, pc}
 8010352:	bf00      	nop
 8010354:	eefefffc 	.word	0xeefefffc

08010358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d101      	bne.n	801036c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010368:	2301      	movs	r3, #1
 801036a:	e12d      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801036c:	4b98      	ldr	r3, [pc, #608]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f003 0307 	and.w	r3, r3, #7
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	429a      	cmp	r2, r3
 8010378:	d91b      	bls.n	80103b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801037a:	4b95      	ldr	r3, [pc, #596]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f023 0207 	bic.w	r2, r3, #7
 8010382:	4993      	ldr	r1, [pc, #588]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	4313      	orrs	r3, r2
 8010388:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801038a:	f7fe f991 	bl	800e6b0 <HAL_GetTick>
 801038e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010390:	e008      	b.n	80103a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010392:	f7fe f98d 	bl	800e6b0 <HAL_GetTick>
 8010396:	4602      	mov	r2, r0
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	2b02      	cmp	r3, #2
 801039e:	d901      	bls.n	80103a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80103a0:	2303      	movs	r3, #3
 80103a2:	e111      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80103a4:	4b8a      	ldr	r3, [pc, #552]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f003 0307 	and.w	r3, r3, #7
 80103ac:	683a      	ldr	r2, [r7, #0]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d1ef      	bne.n	8010392 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f003 0302 	and.w	r3, r3, #2
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d016      	beq.n	80103ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7ff fafb 	bl	800f9be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80103c8:	f7fe f972 	bl	800e6b0 <HAL_GetTick>
 80103cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80103ce:	e008      	b.n	80103e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80103d0:	f7fe f96e 	bl	800e6b0 <HAL_GetTick>
 80103d4:	4602      	mov	r2, r0
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d901      	bls.n	80103e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80103de:	2303      	movs	r3, #3
 80103e0:	e0f2      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80103e2:	f7ff fbe8 	bl	800fbb6 <LL_RCC_IsActiveFlag_HPRE>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d0f1      	beq.n	80103d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 0320 	and.w	r3, r3, #32
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d016      	beq.n	8010426 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	695b      	ldr	r3, [r3, #20]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff faf2 	bl	800f9e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8010402:	f7fe f955 	bl	800e6b0 <HAL_GetTick>
 8010406:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8010408:	e008      	b.n	801041c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801040a:	f7fe f951 	bl	800e6b0 <HAL_GetTick>
 801040e:	4602      	mov	r2, r0
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	2b02      	cmp	r3, #2
 8010416:	d901      	bls.n	801041c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8010418:	2303      	movs	r3, #3
 801041a:	e0d5      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801041c:	f7ff fbdd 	bl	800fbda <LL_RCC_IsActiveFlag_C2HPRE>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d0f1      	beq.n	801040a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801042e:	2b00      	cmp	r3, #0
 8010430:	d016      	beq.n	8010460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff faeb 	bl	800fa12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801043c:	f7fe f938 	bl	800e6b0 <HAL_GetTick>
 8010440:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8010442:	e008      	b.n	8010456 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8010444:	f7fe f934 	bl	800e6b0 <HAL_GetTick>
 8010448:	4602      	mov	r2, r0
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	2b02      	cmp	r3, #2
 8010450:	d901      	bls.n	8010456 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8010452:	2303      	movs	r3, #3
 8010454:	e0b8      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8010456:	f7ff fbd3 	bl	800fc00 <LL_RCC_IsActiveFlag_SHDHPRE>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d0f1      	beq.n	8010444 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f003 0304 	and.w	r3, r3, #4
 8010468:	2b00      	cmp	r3, #0
 801046a:	d016      	beq.n	801049a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff fae5 	bl	800fa40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8010476:	f7fe f91b 	bl	800e6b0 <HAL_GetTick>
 801047a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801047c:	e008      	b.n	8010490 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801047e:	f7fe f917 	bl	800e6b0 <HAL_GetTick>
 8010482:	4602      	mov	r2, r0
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	2b02      	cmp	r3, #2
 801048a:	d901      	bls.n	8010490 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801048c:	2303      	movs	r3, #3
 801048e:	e09b      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8010490:	f7ff fbc9 	bl	800fc26 <LL_RCC_IsActiveFlag_PPRE1>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0f1      	beq.n	801047e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f003 0308 	and.w	r3, r3, #8
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d017      	beq.n	80104d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	691b      	ldr	r3, [r3, #16]
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff fadb 	bl	800fa68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80104b2:	f7fe f8fd 	bl	800e6b0 <HAL_GetTick>
 80104b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80104b8:	e008      	b.n	80104cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80104ba:	f7fe f8f9 	bl	800e6b0 <HAL_GetTick>
 80104be:	4602      	mov	r2, r0
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d901      	bls.n	80104cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	e07d      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80104cc:	f7ff fbbd 	bl	800fc4a <LL_RCC_IsActiveFlag_PPRE2>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d0f1      	beq.n	80104ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d043      	beq.n	801056a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	2b02      	cmp	r3, #2
 80104e8:	d106      	bne.n	80104f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80104ea:	f7ff f87b 	bl	800f5e4 <LL_RCC_HSE_IsReady>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d11e      	bne.n	8010532 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80104f4:	2301      	movs	r3, #1
 80104f6:	e067      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	2b03      	cmp	r3, #3
 80104fe:	d106      	bne.n	801050e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8010500:	f7ff fb16 	bl	800fb30 <LL_RCC_PLL_IsReady>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d113      	bne.n	8010532 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	e05c      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d106      	bne.n	8010524 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8010516:	f7ff f9e3 	bl	800f8e0 <LL_RCC_MSI_IsReady>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d108      	bne.n	8010532 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	e051      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8010524:	f7ff f88e 	bl	800f644 <LL_RCC_HSI_IsReady>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801052e:	2301      	movs	r3, #1
 8010530:	e04a      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fa21 	bl	800f97e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801053c:	f7fe f8b8 	bl	800e6b0 <HAL_GetTick>
 8010540:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010542:	e00a      	b.n	801055a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010544:	f7fe f8b4 	bl	800e6b0 <HAL_GetTick>
 8010548:	4602      	mov	r2, r0
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010552:	4293      	cmp	r3, r2
 8010554:	d901      	bls.n	801055a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8010556:	2303      	movs	r3, #3
 8010558:	e036      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801055a:	f7ff fa24 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 801055e:	4602      	mov	r2, r0
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	429a      	cmp	r2, r3
 8010568:	d1ec      	bne.n	8010544 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801056a:	4b19      	ldr	r3, [pc, #100]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f003 0307 	and.w	r3, r3, #7
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	429a      	cmp	r2, r3
 8010576:	d21b      	bcs.n	80105b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010578:	4b15      	ldr	r3, [pc, #84]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f023 0207 	bic.w	r2, r3, #7
 8010580:	4913      	ldr	r1, [pc, #76]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	4313      	orrs	r3, r2
 8010586:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010588:	f7fe f892 	bl	800e6b0 <HAL_GetTick>
 801058c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801058e:	e008      	b.n	80105a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010590:	f7fe f88e 	bl	800e6b0 <HAL_GetTick>
 8010594:	4602      	mov	r2, r0
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	2b02      	cmp	r3, #2
 801059c:	d901      	bls.n	80105a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801059e:	2303      	movs	r3, #3
 80105a0:	e012      	b.n	80105c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105a2:	4b0b      	ldr	r3, [pc, #44]	@ (80105d0 <HAL_RCC_ClockConfig+0x278>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f003 0307 	and.w	r3, r3, #7
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d1ef      	bne.n	8010590 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80105b0:	f000 f87e 	bl	80106b0 <HAL_RCC_GetHCLKFreq>
 80105b4:	4603      	mov	r3, r0
 80105b6:	4a07      	ldr	r2, [pc, #28]	@ (80105d4 <HAL_RCC_ClockConfig+0x27c>)
 80105b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80105ba:	f7fe f885 	bl	800e6c8 <HAL_GetTickPrio>
 80105be:	4603      	mov	r3, r0
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7fe f827 	bl	800e614 <HAL_InitTick>
 80105c6:	4603      	mov	r3, r0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	58004000 	.word	0x58004000
 80105d4:	20000018 	.word	0x20000018

080105d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80105de:	f7ff f9e2 	bl	800f9a6 <LL_RCC_GetSysClkSource>
 80105e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10a      	bne.n	8010600 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80105ea:	f7ff f99e 	bl	800f92a <LL_RCC_MSI_GetRange>
 80105ee:	4603      	mov	r3, r0
 80105f0:	091b      	lsrs	r3, r3, #4
 80105f2:	f003 030f 	and.w	r3, r3, #15
 80105f6:	4a2b      	ldr	r2, [pc, #172]	@ (80106a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e04b      	b.n	8010698 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b04      	cmp	r3, #4
 8010604:	d102      	bne.n	801060c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010606:	4b28      	ldr	r3, [pc, #160]	@ (80106a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	e045      	b.n	8010698 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b08      	cmp	r3, #8
 8010610:	d10a      	bne.n	8010628 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8010612:	f7fe ffb7 	bl	800f584 <LL_RCC_HSE_IsEnabledDiv2>
 8010616:	4603      	mov	r3, r0
 8010618:	2b01      	cmp	r3, #1
 801061a:	d102      	bne.n	8010622 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801061c:	4b22      	ldr	r3, [pc, #136]	@ (80106a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	e03a      	b.n	8010698 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8010622:	4b22      	ldr	r3, [pc, #136]	@ (80106ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8010624:	60fb      	str	r3, [r7, #12]
 8010626:	e037      	b.n	8010698 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8010628:	f7ff fab9 	bl	800fb9e <LL_RCC_PLL_GetMainSource>
 801062c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2b02      	cmp	r3, #2
 8010632:	d003      	beq.n	801063c <HAL_RCC_GetSysClockFreq+0x64>
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2b03      	cmp	r3, #3
 8010638:	d003      	beq.n	8010642 <HAL_RCC_GetSysClockFreq+0x6a>
 801063a:	e00d      	b.n	8010658 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801063c:	4b1a      	ldr	r3, [pc, #104]	@ (80106a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801063e:	60bb      	str	r3, [r7, #8]
        break;
 8010640:	e015      	b.n	801066e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8010642:	f7fe ff9f 	bl	800f584 <LL_RCC_HSE_IsEnabledDiv2>
 8010646:	4603      	mov	r3, r0
 8010648:	2b01      	cmp	r3, #1
 801064a:	d102      	bne.n	8010652 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801064c:	4b16      	ldr	r3, [pc, #88]	@ (80106a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801064e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8010650:	e00d      	b.n	801066e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8010652:	4b16      	ldr	r3, [pc, #88]	@ (80106ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8010654:	60bb      	str	r3, [r7, #8]
        break;
 8010656:	e00a      	b.n	801066e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8010658:	f7ff f967 	bl	800f92a <LL_RCC_MSI_GetRange>
 801065c:	4603      	mov	r3, r0
 801065e:	091b      	lsrs	r3, r3, #4
 8010660:	f003 030f 	and.w	r3, r3, #15
 8010664:	4a0f      	ldr	r2, [pc, #60]	@ (80106a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8010666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801066a:	60bb      	str	r3, [r7, #8]
        break;
 801066c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801066e:	f7ff fa71 	bl	800fb54 <LL_RCC_PLL_GetN>
 8010672:	4602      	mov	r2, r0
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	fb03 f402 	mul.w	r4, r3, r2
 801067a:	f7ff fa84 	bl	800fb86 <LL_RCC_PLL_GetDivider>
 801067e:	4603      	mov	r3, r0
 8010680:	091b      	lsrs	r3, r3, #4
 8010682:	3301      	adds	r3, #1
 8010684:	fbb4 f4f3 	udiv	r4, r4, r3
 8010688:	f7ff fa71 	bl	800fb6e <LL_RCC_PLL_GetR>
 801068c:	4603      	mov	r3, r0
 801068e:	0f5b      	lsrs	r3, r3, #29
 8010690:	3301      	adds	r3, #1
 8010692:	fbb4 f3f3 	udiv	r3, r4, r3
 8010696:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8010698:	68fb      	ldr	r3, [r7, #12]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd90      	pop	{r4, r7, pc}
 80106a2:	bf00      	nop
 80106a4:	0801a81c 	.word	0x0801a81c
 80106a8:	00f42400 	.word	0x00f42400
 80106ac:	01e84800 	.word	0x01e84800

080106b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80106b0:	b598      	push	{r3, r4, r7, lr}
 80106b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80106b4:	f7ff ff90 	bl	80105d8 <HAL_RCC_GetSysClockFreq>
 80106b8:	4604      	mov	r4, r0
 80106ba:	f7ff f9e9 	bl	800fa90 <LL_RCC_GetAHBPrescaler>
 80106be:	4603      	mov	r3, r0
 80106c0:	091b      	lsrs	r3, r3, #4
 80106c2:	f003 030f 	and.w	r3, r3, #15
 80106c6:	4a03      	ldr	r2, [pc, #12]	@ (80106d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80106c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	bd98      	pop	{r3, r4, r7, pc}
 80106d4:	0801a7bc 	.word	0x0801a7bc

080106d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80106d8:	b598      	push	{r3, r4, r7, lr}
 80106da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80106dc:	f7ff ffe8 	bl	80106b0 <HAL_RCC_GetHCLKFreq>
 80106e0:	4604      	mov	r4, r0
 80106e2:	f7ff f9ef 	bl	800fac4 <LL_RCC_GetAPB1Prescaler>
 80106e6:	4603      	mov	r3, r0
 80106e8:	0a1b      	lsrs	r3, r3, #8
 80106ea:	f003 0307 	and.w	r3, r3, #7
 80106ee:	4a04      	ldr	r2, [pc, #16]	@ (8010700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80106f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106f4:	f003 031f 	and.w	r3, r3, #31
 80106f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	bd98      	pop	{r3, r4, r7, pc}
 8010700:	0801a7fc 	.word	0x0801a7fc

08010704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010704:	b598      	push	{r3, r4, r7, lr}
 8010706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8010708:	f7ff ffd2 	bl	80106b0 <HAL_RCC_GetHCLKFreq>
 801070c:	4604      	mov	r4, r0
 801070e:	f7ff f9e5 	bl	800fadc <LL_RCC_GetAPB2Prescaler>
 8010712:	4603      	mov	r3, r0
 8010714:	0adb      	lsrs	r3, r3, #11
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	4a04      	ldr	r2, [pc, #16]	@ (801072c <HAL_RCC_GetPCLK2Freq+0x28>)
 801071c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010720:	f003 031f 	and.w	r3, r3, #31
 8010724:	fa24 f303 	lsr.w	r3, r4, r3
}
 8010728:	4618      	mov	r0, r3
 801072a:	bd98      	pop	{r3, r4, r7, pc}
 801072c:	0801a7fc 	.word	0x0801a7fc

08010730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8010730:	b590      	push	{r4, r7, lr}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2bb0      	cmp	r3, #176	@ 0xb0
 801073c:	d903      	bls.n	8010746 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801073e:	4b15      	ldr	r3, [pc, #84]	@ (8010794 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8010740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010742:	60fb      	str	r3, [r7, #12]
 8010744:	e007      	b.n	8010756 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	091b      	lsrs	r3, r3, #4
 801074a:	f003 030f 	and.w	r3, r3, #15
 801074e:	4a11      	ldr	r2, [pc, #68]	@ (8010794 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8010750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010754:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8010756:	f7ff f9a7 	bl	800faa8 <LL_RCC_GetAHB4Prescaler>
 801075a:	4603      	mov	r3, r0
 801075c:	091b      	lsrs	r3, r3, #4
 801075e:	f003 030f 	and.w	r3, r3, #15
 8010762:	4a0d      	ldr	r2, [pc, #52]	@ (8010798 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8010764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	fbb2 f3f3 	udiv	r3, r2, r3
 801076e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	4a0a      	ldr	r2, [pc, #40]	@ (801079c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8010774:	fba2 2303 	umull	r2, r3, r2, r3
 8010778:	0c9c      	lsrs	r4, r3, #18
 801077a:	f7fe fef5 	bl	800f568 <HAL_PWREx_GetVoltageRange>
 801077e:	4603      	mov	r3, r0
 8010780:	4619      	mov	r1, r3
 8010782:	4620      	mov	r0, r4
 8010784:	f000 f80c 	bl	80107a0 <RCC_SetFlashLatency>
 8010788:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801078a:	4618      	mov	r0, r3
 801078c:	3714      	adds	r7, #20
 801078e:	46bd      	mov	sp, r7
 8010790:	bd90      	pop	{r4, r7, pc}
 8010792:	bf00      	nop
 8010794:	0801a81c 	.word	0x0801a81c
 8010798:	0801a7bc 	.word	0x0801a7bc
 801079c:	431bde83 	.word	0x431bde83

080107a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80107a0:	b590      	push	{r4, r7, lr}
 80107a2:	b093      	sub	sp, #76	@ 0x4c
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80107aa:	4b37      	ldr	r3, [pc, #220]	@ (8010888 <RCC_SetFlashLatency+0xe8>)
 80107ac:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80107b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80107b6:	4a35      	ldr	r2, [pc, #212]	@ (801088c <RCC_SetFlashLatency+0xec>)
 80107b8:	f107 031c 	add.w	r3, r7, #28
 80107bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80107be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80107c2:	4b33      	ldr	r3, [pc, #204]	@ (8010890 <RCC_SetFlashLatency+0xf0>)
 80107c4:	f107 040c 	add.w	r4, r7, #12
 80107c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80107ce:	2300      	movs	r3, #0
 80107d0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107d8:	d11a      	bne.n	8010810 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80107da:	2300      	movs	r3, #0
 80107dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80107de:	e013      	b.n	8010808 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80107e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	3348      	adds	r3, #72	@ 0x48
 80107e6:	443b      	add	r3, r7
 80107e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d807      	bhi.n	8010802 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80107f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	3348      	adds	r3, #72	@ 0x48
 80107f8:	443b      	add	r3, r7
 80107fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80107fe:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8010800:	e020      	b.n	8010844 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8010802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010804:	3301      	adds	r3, #1
 8010806:	643b      	str	r3, [r7, #64]	@ 0x40
 8010808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801080a:	2b03      	cmp	r3, #3
 801080c:	d9e8      	bls.n	80107e0 <RCC_SetFlashLatency+0x40>
 801080e:	e019      	b.n	8010844 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010810:	2300      	movs	r3, #0
 8010812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010814:	e013      	b.n	801083e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8010816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	3348      	adds	r3, #72	@ 0x48
 801081c:	443b      	add	r3, r7
 801081e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d807      	bhi.n	8010838 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	3348      	adds	r3, #72	@ 0x48
 801082e:	443b      	add	r3, r7
 8010830:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010834:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8010836:	e005      	b.n	8010844 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801083a:	3301      	adds	r3, #1
 801083c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801083e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010840:	2b02      	cmp	r3, #2
 8010842:	d9e8      	bls.n	8010816 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8010844:	4b13      	ldr	r3, [pc, #76]	@ (8010894 <RCC_SetFlashLatency+0xf4>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f023 0207 	bic.w	r2, r3, #7
 801084c:	4911      	ldr	r1, [pc, #68]	@ (8010894 <RCC_SetFlashLatency+0xf4>)
 801084e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010850:	4313      	orrs	r3, r2
 8010852:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010854:	f7fd ff2c 	bl	800e6b0 <HAL_GetTick>
 8010858:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801085a:	e008      	b.n	801086e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801085c:	f7fd ff28 	bl	800e6b0 <HAL_GetTick>
 8010860:	4602      	mov	r2, r0
 8010862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010864:	1ad3      	subs	r3, r2, r3
 8010866:	2b02      	cmp	r3, #2
 8010868:	d901      	bls.n	801086e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801086a:	2303      	movs	r3, #3
 801086c:	e007      	b.n	801087e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801086e:	4b09      	ldr	r3, [pc, #36]	@ (8010894 <RCC_SetFlashLatency+0xf4>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010878:	429a      	cmp	r2, r3
 801087a:	d1ef      	bne.n	801085c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	374c      	adds	r7, #76	@ 0x4c
 8010882:	46bd      	mov	sp, r7
 8010884:	bd90      	pop	{r4, r7, pc}
 8010886:	bf00      	nop
 8010888:	0801a784 	.word	0x0801a784
 801088c:	0801a794 	.word	0x0801a794
 8010890:	0801a7a0 	.word	0x0801a7a0
 8010894:	58004000 	.word	0x58004000

08010898 <LL_RCC_LSE_IsEnabled>:
{
 8010898:	b480      	push	{r7}
 801089a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801089c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d101      	bne.n	80108b0 <LL_RCC_LSE_IsEnabled+0x18>
 80108ac:	2301      	movs	r3, #1
 80108ae:	e000      	b.n	80108b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <LL_RCC_LSE_IsReady>:
{
 80108bc:	b480      	push	{r7}
 80108be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80108c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	d101      	bne.n	80108d4 <LL_RCC_LSE_IsReady+0x18>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <LL_RCC_LSE_IsReady+0x1a>
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <LL_RCC_SetRFWKPClockSource>:
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80108e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80108ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80108f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4313      	orrs	r3, r2
 80108fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8010900:	bf00      	nop
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <LL_RCC_SetSMPSClockSource>:
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8010914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801091a:	f023 0203 	bic.w	r2, r3, #3
 801091e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4313      	orrs	r3, r2
 8010926:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010928:	bf00      	nop
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <LL_RCC_SetSMPSPrescaler>:
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801093c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010942:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4313      	orrs	r3, r2
 801094e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <LL_RCC_SetUSARTClockSource>:
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8010964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801096c:	f023 0203 	bic.w	r2, r3, #3
 8010970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4313      	orrs	r3, r2
 8010978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <LL_RCC_SetLPUARTClockSource>:
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8010990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010998:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801099c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4313      	orrs	r3, r2
 80109a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <LL_RCC_SetI2CClockSource>:
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80109bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80109c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	091b      	lsrs	r3, r3, #4
 80109c8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80109cc:	43db      	mvns	r3, r3
 80109ce:	401a      	ands	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	011b      	lsls	r3, r3, #4
 80109d4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80109d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80109dc:	4313      	orrs	r3, r2
 80109de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80109e2:	bf00      	nop
 80109e4:	370c      	adds	r7, #12
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <LL_RCC_SetLPTIMClockSource>:
{
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80109f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80109fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	0c1b      	lsrs	r3, r3, #16
 8010a02:	041b      	lsls	r3, r3, #16
 8010a04:	43db      	mvns	r3, r3
 8010a06:	401a      	ands	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	041b      	lsls	r3, r3, #16
 8010a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a10:	4313      	orrs	r3, r2
 8010a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a16:	bf00      	nop
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <LL_RCC_SetSAIClockSource>:
{
 8010a22:	b480      	push	{r7}
 8010a24:	b083      	sub	sp, #12
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8010a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8010a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a42:	bf00      	nop
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr

08010a4e <LL_RCC_SetRNGClockSource>:
{
 8010a4e:	b480      	push	{r7}
 8010a50:	b083      	sub	sp, #12
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8010a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8010a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a6e:	bf00      	nop
 8010a70:	370c      	adds	r7, #12
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <LL_RCC_SetCLK48ClockSource>:
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	b083      	sub	sp, #12
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8010a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010a8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4313      	orrs	r3, r2
 8010a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010a9a:	bf00      	nop
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr

08010aa6 <LL_RCC_SetUSBClockSource>:
{
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b082      	sub	sp, #8
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7ff ffe3 	bl	8010a7a <LL_RCC_SetCLK48ClockSource>
}
 8010ab4:	bf00      	nop
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <LL_RCC_SetADCClockSource>:
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8010ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010acc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8010adc:	bf00      	nop
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <LL_RCC_SetRTCClockSource>:
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010afc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4313      	orrs	r3, r2
 8010b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <LL_RCC_GetRTCClockSource>:
{
 8010b14:	b480      	push	{r7}
 8010b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8010b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <LL_RCC_ForceBackupDomainReset>:
{
 8010b2e:	b480      	push	{r7}
 8010b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010b42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8010b46:	bf00      	nop
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <LL_RCC_ReleaseBackupDomainReset>:
{
 8010b50:	b480      	push	{r7}
 8010b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8010b68:	bf00      	nop
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <LL_RCC_PLLSAI1_Enable>:
{
 8010b72:	b480      	push	{r7}
 8010b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8010b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010b84:	6013      	str	r3, [r2, #0]
}
 8010b86:	bf00      	nop
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <LL_RCC_PLLSAI1_Disable>:
{
 8010b90:	b480      	push	{r7}
 8010b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8010b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010ba2:	6013      	str	r3, [r2, #0]
}
 8010ba4:	bf00      	nop
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr

08010bae <LL_RCC_PLLSAI1_IsReady>:
{
 8010bae:	b480      	push	{r7}
 8010bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8010bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010bc0:	d101      	bne.n	8010bc6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e000      	b.n	8010bc8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b088      	sub	sp, #32
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8010bda:	2300      	movs	r3, #0
 8010bdc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8010bde:	2300      	movs	r3, #0
 8010be0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d034      	beq.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bf2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010bf6:	d021      	beq.n	8010c3c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8010bf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010bfc:	d81b      	bhi.n	8010c36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010bfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010c02:	d01d      	beq.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8010c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010c08:	d815      	bhi.n	8010c36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00b      	beq.n	8010c26 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8010c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010c12:	d110      	bne.n	8010c36 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8010c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010c22:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8010c24:	e00d      	b.n	8010c42 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3304      	adds	r3, #4
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 f947 	bl	8010ebe <RCCEx_PLLSAI1_ConfigNP>
 8010c30:	4603      	mov	r3, r0
 8010c32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8010c34:	e005      	b.n	8010c42 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8010c36:	2301      	movs	r3, #1
 8010c38:	77fb      	strb	r3, [r7, #31]
        break;
 8010c3a:	e002      	b.n	8010c42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010c3c:	bf00      	nop
 8010c3e:	e000      	b.n	8010c42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8010c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c42:	7ffb      	ldrb	r3, [r7, #31]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d105      	bne.n	8010c54 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7ff fee8 	bl	8010a22 <LL_RCC_SetSAIClockSource>
 8010c52:	e001      	b.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c54:	7ffb      	ldrb	r3, [r7, #31]
 8010c56:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d046      	beq.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8010c64:	f7ff ff56 	bl	8010b14 <LL_RCC_GetRTCClockSource>
 8010c68:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c6e:	69ba      	ldr	r2, [r7, #24]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d03c      	beq.n	8010cee <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8010c74:	f7fe fc68 	bl	800f548 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d105      	bne.n	8010c8a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7ff ff30 	bl	8010ae8 <LL_RCC_SetRTCClockSource>
 8010c88:	e02e      	b.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8010c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c92:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8010c94:	f7ff ff4b 	bl	8010b2e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8010c98:	f7ff ff5a 	bl	8010b50 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8010caa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8010cb4:	f7ff fdf0 	bl	8010898 <LL_RCC_LSE_IsEnabled>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d114      	bne.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010cbe:	f7fd fcf7 	bl	800e6b0 <HAL_GetTick>
 8010cc2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8010cc4:	e00b      	b.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010cc6:	f7fd fcf3 	bl	800e6b0 <HAL_GetTick>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d902      	bls.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	77fb      	strb	r3, [r7, #31]
              break;
 8010cdc:	e004      	b.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8010cde:	f7ff fded 	bl	80108bc <LL_RCC_LSE_IsReady>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d1ee      	bne.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8010ce8:	7ffb      	ldrb	r3, [r7, #31]
 8010cea:	77bb      	strb	r3, [r7, #30]
 8010cec:	e001      	b.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010cee:	7ffb      	ldrb	r3, [r7, #31]
 8010cf0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d004      	beq.n	8010d08 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ff fe2a 	bl	801095c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f003 0302 	and.w	r3, r3, #2
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d004      	beq.n	8010d1e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	69db      	ldr	r3, [r3, #28]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fe35 	bl	8010988 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f003 0310 	and.w	r3, r3, #16
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d004      	beq.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7ff fe5d 	bl	80109ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f003 0320 	and.w	r3, r3, #32
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d004      	beq.n	8010d4a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ff fe52 	bl	80109ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f003 0304 	and.w	r3, r3, #4
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d004      	beq.n	8010d60 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7ff fe2a 	bl	80109b4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f003 0308 	and.w	r3, r3, #8
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff fe1f 	bl	80109b4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d022      	beq.n	8010dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7ff fe8d 	bl	8010aa6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d94:	d107      	bne.n	8010da6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8010d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010da0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010da4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010dae:	d10b      	bne.n	8010dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	3304      	adds	r3, #4
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 f8dd 	bl	8010f74 <RCCEx_PLLSAI1_ConfigNQ>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8010dbe:	7ffb      	ldrb	r3, [r7, #31]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8010dc4:	7ffb      	ldrb	r3, [r7, #31]
 8010dc6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d02b      	beq.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ddc:	d008      	beq.n	8010df0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010de6:	d003      	beq.n	8010df0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d105      	bne.n	8010dfc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff fe2a 	bl	8010a4e <LL_RCC_SetRNGClockSource>
 8010dfa:	e00a      	b.n	8010e12 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e04:	60fb      	str	r3, [r7, #12]
 8010e06:	2000      	movs	r0, #0
 8010e08:	f7ff fe21 	bl	8010a4e <LL_RCC_SetRNGClockSource>
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f7ff fe34 	bl	8010a7a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e16:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010e1a:	d107      	bne.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010e2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d022      	beq.n	8010e7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fe3d 	bl	8010abc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e4a:	d107      	bne.n	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e5a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e64:	d10b      	bne.n	8010e7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f000 f8dd 	bl	801102a <RCCEx_PLLSAI1_ConfigNR>
 8010e70:	4603      	mov	r3, r0
 8010e72:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8010e74:	7ffb      	ldrb	r3, [r7, #31]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8010e7a:	7ffb      	ldrb	r3, [r7, #31]
 8010e7c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d004      	beq.n	8010e94 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff fd26 	bl	80108e0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d009      	beq.n	8010eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff fd45 	bl	8010934 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7ff fd2c 	bl	801090c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8010eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3720      	adds	r7, #32
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}

08010ebe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b084      	sub	sp, #16
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010eca:	f7ff fe61 	bl	8010b90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010ece:	f7fd fbef 	bl	800e6b0 <HAL_GetTick>
 8010ed2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010ed4:	e009      	b.n	8010eea <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010ed6:	f7fd fbeb 	bl	800e6b0 <HAL_GetTick>
 8010eda:	4602      	mov	r2, r0
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d902      	bls.n	8010eea <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8010ee4:	2303      	movs	r3, #3
 8010ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ee8:	e004      	b.n	8010ef4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010eea:	f7ff fe60 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d1f0      	bne.n	8010ed6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8010ef4:	7bfb      	ldrb	r3, [r7, #15]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d137      	bne.n	8010f6a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8010f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f16:	691b      	ldr	r3, [r3, #16]
 8010f18:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f24:	4313      	orrs	r3, r2
 8010f26:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010f28:	f7ff fe23 	bl	8010b72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f2c:	f7fd fbc0 	bl	800e6b0 <HAL_GetTick>
 8010f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010f32:	e009      	b.n	8010f48 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010f34:	f7fd fbbc 	bl	800e6b0 <HAL_GetTick>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d902      	bls.n	8010f48 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8010f42:	2303      	movs	r3, #3
 8010f44:	73fb      	strb	r3, [r7, #15]
        break;
 8010f46:	e004      	b.n	8010f52 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010f48:	f7ff fe31 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d1f0      	bne.n	8010f34 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d108      	bne.n	8010f6a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8010f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010f5c:	691a      	ldr	r2, [r3, #16]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	691b      	ldr	r3, [r3, #16]
 8010f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010f66:	4313      	orrs	r3, r2
 8010f68:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8010f80:	f7ff fe06 	bl	8010b90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010f84:	f7fd fb94 	bl	800e6b0 <HAL_GetTick>
 8010f88:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010f8a:	e009      	b.n	8010fa0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010f8c:	f7fd fb90 	bl	800e6b0 <HAL_GetTick>
 8010f90:	4602      	mov	r2, r0
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d902      	bls.n	8010fa0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8010f9a:	2303      	movs	r3, #3
 8010f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f9e:	e004      	b.n	8010faa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8010fa0:	f7ff fe05 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d1f0      	bne.n	8010f8c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d137      	bne.n	8011020 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8010fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010fb4:	691b      	ldr	r3, [r3, #16]
 8010fb6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	021b      	lsls	r3, r3, #8
 8010fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8010fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	689b      	ldr	r3, [r3, #8]
 8010fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8010fde:	f7ff fdc8 	bl	8010b72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fe2:	f7fd fb65 	bl	800e6b0 <HAL_GetTick>
 8010fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010fe8:	e009      	b.n	8010ffe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010fea:	f7fd fb61 	bl	800e6b0 <HAL_GetTick>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	2b02      	cmp	r3, #2
 8010ff6:	d902      	bls.n	8010ffe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	73fb      	strb	r3, [r7, #15]
        break;
 8010ffc:	e004      	b.n	8011008 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8010ffe:	f7ff fdd6 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 8011002:	4603      	mov	r3, r0
 8011004:	2b01      	cmp	r3, #1
 8011006:	d1f0      	bne.n	8010fea <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8011008:	7bfb      	ldrb	r3, [r7, #15]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d108      	bne.n	8011020 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801100e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011012:	691a      	ldr	r2, [r3, #16]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	691b      	ldr	r3, [r3, #16]
 8011018:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801101c:	4313      	orrs	r3, r2
 801101e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8011020:	7bfb      	ldrb	r3, [r7, #15]
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b084      	sub	sp, #16
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011032:	2300      	movs	r3, #0
 8011034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8011036:	f7ff fdab 	bl	8010b90 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801103a:	f7fd fb39 	bl	800e6b0 <HAL_GetTick>
 801103e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8011040:	e009      	b.n	8011056 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011042:	f7fd fb35 	bl	800e6b0 <HAL_GetTick>
 8011046:	4602      	mov	r2, r0
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	1ad3      	subs	r3, r2, r3
 801104c:	2b02      	cmp	r3, #2
 801104e:	d902      	bls.n	8011056 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8011050:	2303      	movs	r3, #3
 8011052:	73fb      	strb	r3, [r7, #15]
      break;
 8011054:	e004      	b.n	8011060 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8011056:	f7ff fdaa 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1f0      	bne.n	8011042 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8011060:	7bfb      	ldrb	r3, [r7, #15]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d137      	bne.n	80110d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8011066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	021b      	lsls	r3, r3, #8
 8011076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801107a:	4313      	orrs	r3, r2
 801107c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801107e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011090:	4313      	orrs	r3, r2
 8011092:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8011094:	f7ff fd6d 	bl	8010b72 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011098:	f7fd fb0a 	bl	800e6b0 <HAL_GetTick>
 801109c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801109e:	e009      	b.n	80110b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80110a0:	f7fd fb06 	bl	800e6b0 <HAL_GetTick>
 80110a4:	4602      	mov	r2, r0
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	2b02      	cmp	r3, #2
 80110ac:	d902      	bls.n	80110b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80110ae:	2303      	movs	r3, #3
 80110b0:	73fb      	strb	r3, [r7, #15]
        break;
 80110b2:	e004      	b.n	80110be <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80110b4:	f7ff fd7b 	bl	8010bae <LL_RCC_PLLSAI1_IsReady>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d1f0      	bne.n	80110a0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80110be:	7bfb      	ldrb	r3, [r7, #15]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d108      	bne.n	80110d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80110c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80110c8:	691a      	ldr	r2, [r3, #16]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80110d2:	4313      	orrs	r3, r2
 80110d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d101      	bne.n	80110f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80110ee:	2301      	movs	r3, #1
 80110f0:	e09f      	b.n	8011232 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7fa ff2c 	bl	800bf64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2202      	movs	r2, #2
 8011110:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011114:	4b49      	ldr	r3, [pc, #292]	@ (801123c <HAL_RTC_Init+0x15c>)
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	f003 0310 	and.w	r3, r3, #16
 801111c:	2b10      	cmp	r3, #16
 801111e:	d07e      	beq.n	801121e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	22ca      	movs	r2, #202	@ 0xca
 8011126:	625a      	str	r2, [r3, #36]	@ 0x24
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2253      	movs	r2, #83	@ 0x53
 801112e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f000 fac6 	bl	80116c2 <RTC_EnterInitMode>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00a      	beq.n	8011152 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	22ff      	movs	r2, #255	@ 0xff
 8011142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2204      	movs	r2, #4
 8011148:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 801114c:	2301      	movs	r3, #1
 801114e:	73fb      	strb	r3, [r7, #15]
 8011150:	e067      	b.n	8011222 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	6812      	ldr	r2, [r2, #0]
 801115c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011164:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6899      	ldr	r1, [r3, #8]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	431a      	orrs	r2, r3
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	699b      	ldr	r3, [r3, #24]
 801117a:	431a      	orrs	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	430a      	orrs	r2, r1
 8011182:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	68d2      	ldr	r2, [r2, #12]
 801118c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	6919      	ldr	r1, [r3, #16]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	041a      	lsls	r2, r3, #16
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	430a      	orrs	r2, r1
 80111a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	68da      	ldr	r2, [r3, #12]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80111b0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f022 0203 	bic.w	r2, r2, #3
 80111c0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	69da      	ldr	r2, [r3, #28]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	695b      	ldr	r3, [r3, #20]
 80111d0:	431a      	orrs	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	430a      	orrs	r2, r1
 80111d8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	f003 0320 	and.w	r3, r3, #32
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d113      	bne.n	8011210 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 fa44 	bl	8011676 <HAL_RTC_WaitForSynchro>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00d      	beq.n	8011210 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	22ff      	movs	r2, #255	@ 0xff
 80111fa:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2204      	movs	r2, #4
 8011200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 801120c:	2301      	movs	r3, #1
 801120e:	e010      	b.n	8011232 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	22ff      	movs	r2, #255	@ 0xff
 8011216:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8011218:	2300      	movs	r3, #0
 801121a:	73fb      	strb	r3, [r7, #15]
 801121c:	e001      	b.n	8011222 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8011222:	7bfb      	ldrb	r3, [r7, #15]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d103      	bne.n	8011230 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8011230:	7bfb      	ldrb	r3, [r7, #15]
}
 8011232:	4618      	mov	r0, r3
 8011234:	3710      	adds	r7, #16
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	40002800 	.word	0x40002800

08011240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011240:	b590      	push	{r4, r7, lr}
 8011242:	b087      	sub	sp, #28
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d101      	bne.n	801125a <HAL_RTC_SetTime+0x1a>
 8011256:	2302      	movs	r3, #2
 8011258:	e0b2      	b.n	80113c0 <HAL_RTC_SetTime+0x180>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2201      	movs	r2, #1
 801125e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2202      	movs	r2, #2
 8011266:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d126      	bne.n	80112be <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801127a:	2b00      	cmp	r3, #0
 801127c:	d102      	bne.n	8011284 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2200      	movs	r2, #0
 8011282:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 fa44 	bl	8011716 <RTC_ByteToBcd2>
 801128e:	4603      	mov	r3, r0
 8011290:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	785b      	ldrb	r3, [r3, #1]
 8011296:	4618      	mov	r0, r3
 8011298:	f000 fa3d 	bl	8011716 <RTC_ByteToBcd2>
 801129c:	4603      	mov	r3, r0
 801129e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80112a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	789b      	ldrb	r3, [r3, #2]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 fa35 	bl	8011716 <RTC_ByteToBcd2>
 80112ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80112ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	78db      	ldrb	r3, [r3, #3]
 80112b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80112b8:	4313      	orrs	r3, r2
 80112ba:	617b      	str	r3, [r7, #20]
 80112bc:	e018      	b.n	80112f0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2200      	movs	r2, #0
 80112d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	785b      	ldrb	r3, [r3, #1]
 80112dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80112de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80112e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	78db      	ldrb	r3, [r3, #3]
 80112ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80112ec:	4313      	orrs	r3, r2
 80112ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	22ca      	movs	r2, #202	@ 0xca
 80112f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2253      	movs	r2, #83	@ 0x53
 80112fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 f9de 	bl	80116c2 <RTC_EnterInitMode>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00d      	beq.n	8011328 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	22ff      	movs	r2, #255	@ 0xff
 8011312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2204      	movs	r2, #4
 8011318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	e04b      	b.n	80113c0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011332:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011336:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8011346:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	6899      	ldr	r1, [r3, #8]
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	68da      	ldr	r2, [r3, #12]
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	691b      	ldr	r3, [r3, #16]
 8011356:	431a      	orrs	r2, r3
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	430a      	orrs	r2, r1
 801135e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	68da      	ldr	r2, [r3, #12]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801136e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f003 0320 	and.w	r3, r3, #32
 801137a:	2b00      	cmp	r3, #0
 801137c:	d113      	bne.n	80113a6 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f000 f979 	bl	8011676 <HAL_RTC_WaitForSynchro>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00d      	beq.n	80113a6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	22ff      	movs	r2, #255	@ 0xff
 8011390:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2204      	movs	r2, #4
 8011396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	e00c      	b.n	80113c0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	22ff      	movs	r2, #255	@ 0xff
 80113ac:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2201      	movs	r2, #1
 80113b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2200      	movs	r2, #0
 80113ba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80113be:	2300      	movs	r3, #0
  }
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	371c      	adds	r7, #28
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd90      	pop	{r4, r7, pc}

080113c8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80113f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80113fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	0c1b      	lsrs	r3, r3, #16
 8011400:	b2db      	uxtb	r3, r3
 8011402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011406:	b2da      	uxtb	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	0a1b      	lsrs	r3, r3, #8
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011416:	b2da      	uxtb	r2, r3
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	b2db      	uxtb	r3, r3
 8011420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011424:	b2da      	uxtb	r2, r3
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	0c1b      	lsrs	r3, r3, #16
 801142e:	b2db      	uxtb	r3, r3
 8011430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011434:	b2da      	uxtb	r2, r3
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11a      	bne.n	8011476 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	4618      	mov	r0, r3
 8011446:	f000 f986 	bl	8011756 <RTC_Bcd2ToByte>
 801144a:	4603      	mov	r3, r0
 801144c:	461a      	mov	r2, r3
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	785b      	ldrb	r3, [r3, #1]
 8011456:	4618      	mov	r0, r3
 8011458:	f000 f97d 	bl	8011756 <RTC_Bcd2ToByte>
 801145c:	4603      	mov	r3, r0
 801145e:	461a      	mov	r2, r3
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	789b      	ldrb	r3, [r3, #2]
 8011468:	4618      	mov	r0, r3
 801146a:	f000 f974 	bl	8011756 <RTC_Bcd2ToByte>
 801146e:	4603      	mov	r3, r0
 8011470:	461a      	mov	r2, r3
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3718      	adds	r7, #24
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011480:	b590      	push	{r4, r7, lr}
 8011482:	b087      	sub	sp, #28
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d101      	bne.n	801149a <HAL_RTC_SetDate+0x1a>
 8011496:	2302      	movs	r3, #2
 8011498:	e09c      	b.n	80115d4 <HAL_RTC_SetDate+0x154>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2201      	movs	r2, #1
 801149e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2202      	movs	r2, #2
 80114a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10e      	bne.n	80114ce <HAL_RTC_SetDate+0x4e>
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	785b      	ldrb	r3, [r3, #1]
 80114b4:	f003 0310 	and.w	r3, r3, #16
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d008      	beq.n	80114ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	785b      	ldrb	r3, [r3, #1]
 80114c0:	f023 0310 	bic.w	r3, r3, #16
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	330a      	adds	r3, #10
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d11c      	bne.n	801150e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	78db      	ldrb	r3, [r3, #3]
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 f91c 	bl	8011716 <RTC_ByteToBcd2>
 80114de:	4603      	mov	r3, r0
 80114e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	785b      	ldrb	r3, [r3, #1]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f000 f915 	bl	8011716 <RTC_ByteToBcd2>
 80114ec:	4603      	mov	r3, r0
 80114ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80114f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	789b      	ldrb	r3, [r3, #2]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f000 f90d 	bl	8011716 <RTC_ByteToBcd2>
 80114fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80114fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8011508:	4313      	orrs	r3, r2
 801150a:	617b      	str	r3, [r7, #20]
 801150c:	e00e      	b.n	801152c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	78db      	ldrb	r3, [r3, #3]
 8011512:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	785b      	ldrb	r3, [r3, #1]
 8011518:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801151a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8011520:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8011528:	4313      	orrs	r3, r2
 801152a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	22ca      	movs	r2, #202	@ 0xca
 8011532:	625a      	str	r2, [r3, #36]	@ 0x24
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2253      	movs	r2, #83	@ 0x53
 801153a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f000 f8c0 	bl	80116c2 <RTC_EnterInitMode>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00d      	beq.n	8011564 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	22ff      	movs	r2, #255	@ 0xff
 801154e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2204      	movs	r2, #4
 8011554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2200      	movs	r2, #0
 801155c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8011560:	2301      	movs	r3, #1
 8011562:	e037      	b.n	80115d4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801156e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011572:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68da      	ldr	r2, [r3, #12]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011582:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	f003 0320 	and.w	r3, r3, #32
 801158e:	2b00      	cmp	r3, #0
 8011590:	d113      	bne.n	80115ba <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f000 f86f 	bl	8011676 <HAL_RTC_WaitForSynchro>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00d      	beq.n	80115ba <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	22ff      	movs	r2, #255	@ 0xff
 80115a4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2204      	movs	r2, #4
 80115aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80115b6:	2301      	movs	r3, #1
 80115b8:	e00c      	b.n	80115d4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	22ff      	movs	r2, #255	@ 0xff
 80115c0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2201      	movs	r2, #1
 80115c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2200      	movs	r2, #0
 80115ce:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80115d2:	2300      	movs	r3, #0
  }
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	371c      	adds	r7, #28
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd90      	pop	{r4, r7, pc}

080115dc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b086      	sub	sp, #24
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80115f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80115f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	0c1b      	lsrs	r3, r3, #16
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	0a1b      	lsrs	r3, r3, #8
 8011606:	b2db      	uxtb	r3, r3
 8011608:	f003 031f 	and.w	r3, r3, #31
 801160c:	b2da      	uxtb	r2, r3
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	b2db      	uxtb	r3, r3
 8011616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801161a:	b2da      	uxtb	r2, r3
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	0b5b      	lsrs	r3, r3, #13
 8011624:	b2db      	uxtb	r3, r3
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	b2da      	uxtb	r2, r3
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d11a      	bne.n	801166c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	78db      	ldrb	r3, [r3, #3]
 801163a:	4618      	mov	r0, r3
 801163c:	f000 f88b 	bl	8011756 <RTC_Bcd2ToByte>
 8011640:	4603      	mov	r3, r0
 8011642:	461a      	mov	r2, r3
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	4618      	mov	r0, r3
 801164e:	f000 f882 	bl	8011756 <RTC_Bcd2ToByte>
 8011652:	4603      	mov	r3, r0
 8011654:	461a      	mov	r2, r3
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	789b      	ldrb	r3, [r3, #2]
 801165e:	4618      	mov	r0, r3
 8011660:	f000 f879 	bl	8011756 <RTC_Bcd2ToByte>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801166c:	2300      	movs	r3, #0
}
 801166e:	4618      	mov	r0, r3
 8011670:	3718      	adds	r7, #24
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b084      	sub	sp, #16
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	68da      	ldr	r2, [r3, #12]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 801168c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801168e:	f7fd f80f 	bl	800e6b0 <HAL_GetTick>
 8011692:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011694:	e009      	b.n	80116aa <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011696:	f7fd f80b 	bl	800e6b0 <HAL_GetTick>
 801169a:	4602      	mov	r2, r0
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116a4:	d901      	bls.n	80116aa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80116a6:	2303      	movs	r3, #3
 80116a8:	e007      	b.n	80116ba <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	f003 0320 	and.w	r3, r3, #32
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0ee      	beq.n	8011696 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b084      	sub	sp, #16
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d119      	bne.n	801170c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f04f 32ff 	mov.w	r2, #4294967295
 80116e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80116e2:	f7fc ffe5 	bl	800e6b0 <HAL_GetTick>
 80116e6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80116e8:	e009      	b.n	80116fe <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80116ea:	f7fc ffe1 	bl	800e6b0 <HAL_GetTick>
 80116ee:	4602      	mov	r2, r0
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116f8:	d901      	bls.n	80116fe <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e007      	b.n	801170e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011708:	2b00      	cmp	r3, #0
 801170a:	d0ee      	beq.n	80116ea <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011716:	b480      	push	{r7}
 8011718:	b085      	sub	sp, #20
 801171a:	af00      	add	r7, sp, #0
 801171c:	4603      	mov	r3, r0
 801171e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011720:	2300      	movs	r3, #0
 8011722:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8011724:	79fb      	ldrb	r3, [r7, #7]
 8011726:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8011728:	e005      	b.n	8011736 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	3301      	adds	r3, #1
 801172e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8011730:	7afb      	ldrb	r3, [r7, #11]
 8011732:	3b0a      	subs	r3, #10
 8011734:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8011736:	7afb      	ldrb	r3, [r7, #11]
 8011738:	2b09      	cmp	r3, #9
 801173a:	d8f6      	bhi.n	801172a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	b2db      	uxtb	r3, r3
 8011740:	011b      	lsls	r3, r3, #4
 8011742:	b2da      	uxtb	r2, r3
 8011744:	7afb      	ldrb	r3, [r7, #11]
 8011746:	4313      	orrs	r3, r2
 8011748:	b2db      	uxtb	r3, r3
}
 801174a:	4618      	mov	r0, r3
 801174c:	3714      	adds	r7, #20
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011756:	b480      	push	{r7}
 8011758:	b085      	sub	sp, #20
 801175a:	af00      	add	r7, sp, #0
 801175c:	4603      	mov	r3, r0
 801175e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	091b      	lsrs	r3, r3, #4
 8011764:	b2db      	uxtb	r3, r3
 8011766:	461a      	mov	r2, r3
 8011768:	4613      	mov	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4413      	add	r3, r2
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	b2da      	uxtb	r2, r3
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	f003 030f 	and.w	r3, r3, #15
 801177c:	b2db      	uxtb	r3, r3
 801177e:	4413      	add	r3, r2
 8011780:	b2db      	uxtb	r3, r3
}
 8011782:	4618      	mov	r0, r3
 8011784:	3714      	adds	r7, #20
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801178e:	b480      	push	{r7}
 8011790:	b087      	sub	sp, #28
 8011792:	af00      	add	r7, sp, #0
 8011794:	60f8      	str	r0, [r7, #12]
 8011796:	60b9      	str	r1, [r7, #8]
 8011798:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	3350      	adds	r3, #80	@ 0x50
 80117a0:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	4413      	add	r3, r2
 80117aa:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	601a      	str	r2, [r3, #0]
}
 80117b2:	bf00      	nop
 80117b4:	371c      	adds	r7, #28
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d101      	bne.n	80117d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80117cc:	2301      	movs	r3, #1
 80117ce:	e095      	b.n	80118fc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d108      	bne.n	80117ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80117e0:	d009      	beq.n	80117f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	61da      	str	r2, [r3, #28]
 80117e8:	e005      	b.n	80117f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b00      	cmp	r3, #0
 8011806:	d106      	bne.n	8011816 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7fa fbd3 	bl	800bfbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2202      	movs	r2, #2
 801181a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801182c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011836:	d902      	bls.n	801183e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011838:	2300      	movs	r3, #0
 801183a:	60fb      	str	r3, [r7, #12]
 801183c:	e002      	b.n	8011844 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011842:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801184c:	d007      	beq.n	801185e <HAL_SPI_Init+0xa0>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011856:	d002      	beq.n	801185e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801186e:	431a      	orrs	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	f003 0302 	and.w	r3, r3, #2
 8011878:	431a      	orrs	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	f003 0301 	and.w	r3, r3, #1
 8011882:	431a      	orrs	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801188c:	431a      	orrs	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	69db      	ldr	r3, [r3, #28]
 8011892:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011896:	431a      	orrs	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6a1b      	ldr	r3, [r3, #32]
 801189c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118a0:	ea42 0103 	orr.w	r1, r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	430a      	orrs	r2, r1
 80118b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	699b      	ldr	r3, [r3, #24]
 80118b8:	0c1b      	lsrs	r3, r3, #16
 80118ba:	f003 0204 	and.w	r2, r3, #4
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118c2:	f003 0310 	and.w	r3, r3, #16
 80118c6:	431a      	orrs	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118cc:	f003 0308 	and.w	r3, r3, #8
 80118d0:	431a      	orrs	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80118da:	ea42 0103 	orr.w	r1, r2, r3
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	430a      	orrs	r2, r1
 80118ea:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3710      	adds	r7, #16
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b08a      	sub	sp, #40	@ 0x28
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
 8011910:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011912:	2301      	movs	r3, #1
 8011914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011916:	2300      	movs	r3, #0
 8011918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011922:	2b01      	cmp	r3, #1
 8011924:	d101      	bne.n	801192a <HAL_SPI_TransmitReceive+0x26>
 8011926:	2302      	movs	r3, #2
 8011928:	e1fb      	b.n	8011d22 <HAL_SPI_TransmitReceive+0x41e>
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2201      	movs	r2, #1
 801192e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011932:	f7fc febd 	bl	800e6b0 <HAL_GetTick>
 8011936:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801193e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011946:	887b      	ldrh	r3, [r7, #2]
 8011948:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801194a:	887b      	ldrh	r3, [r7, #2]
 801194c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801194e:	7efb      	ldrb	r3, [r7, #27]
 8011950:	2b01      	cmp	r3, #1
 8011952:	d00e      	beq.n	8011972 <HAL_SPI_TransmitReceive+0x6e>
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801195a:	d106      	bne.n	801196a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <HAL_SPI_TransmitReceive+0x66>
 8011964:	7efb      	ldrb	r3, [r7, #27]
 8011966:	2b04      	cmp	r3, #4
 8011968:	d003      	beq.n	8011972 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801196a:	2302      	movs	r3, #2
 801196c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8011970:	e1cd      	b.n	8011d0e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <HAL_SPI_TransmitReceive+0x80>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d002      	beq.n	8011984 <HAL_SPI_TransmitReceive+0x80>
 801197e:	887b      	ldrh	r3, [r7, #2]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d103      	bne.n	801198c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 801198a:	e1c0      	b.n	8011d0e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b04      	cmp	r3, #4
 8011996:	d003      	beq.n	80119a0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2205      	movs	r2, #5
 801199c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2200      	movs	r2, #0
 80119a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	887a      	ldrh	r2, [r7, #2]
 80119b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	887a      	ldrh	r2, [r7, #2]
 80119b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	68ba      	ldr	r2, [r7, #8]
 80119c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	887a      	ldrh	r2, [r7, #2]
 80119c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	887a      	ldrh	r2, [r7, #2]
 80119cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2200      	movs	r2, #0
 80119d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80119e2:	d802      	bhi.n	80119ea <HAL_SPI_TransmitReceive+0xe6>
 80119e4:	8a3b      	ldrh	r3, [r7, #16]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d908      	bls.n	80119fc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	685a      	ldr	r2, [r3, #4]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80119f8:	605a      	str	r2, [r3, #4]
 80119fa:	e007      	b.n	8011a0c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011a0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a16:	2b40      	cmp	r3, #64	@ 0x40
 8011a18:	d007      	beq.n	8011a2a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011a32:	d97c      	bls.n	8011b2e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d002      	beq.n	8011a42 <HAL_SPI_TransmitReceive+0x13e>
 8011a3c:	8a7b      	ldrh	r3, [r7, #18]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d169      	bne.n	8011b16 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a46:	881a      	ldrh	r2, [r3, #0]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a52:	1c9a      	adds	r2, r3, #2
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a66:	e056      	b.n	8011b16 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f003 0302 	and.w	r3, r3, #2
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d11b      	bne.n	8011aae <HAL_SPI_TransmitReceive+0x1aa>
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d016      	beq.n	8011aae <HAL_SPI_TransmitReceive+0x1aa>
 8011a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d113      	bne.n	8011aae <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8a:	881a      	ldrh	r2, [r3, #0]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a96:	1c9a      	adds	r2, r3, #2
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d11c      	bne.n	8011af6 <HAL_SPI_TransmitReceive+0x1f2>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d016      	beq.n	8011af6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ad2:	b292      	uxth	r2, r2
 8011ad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ada:	1c9a      	adds	r2, r3, #2
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	b29a      	uxth	r2, r3
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011af2:	2301      	movs	r3, #1
 8011af4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011af6:	f7fc fddb 	bl	800e6b0 <HAL_GetTick>
 8011afa:	4602      	mov	r2, r0
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d807      	bhi.n	8011b16 <HAL_SPI_TransmitReceive+0x212>
 8011b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b0c:	d003      	beq.n	8011b16 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011b0e:	2303      	movs	r3, #3
 8011b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8011b14:	e0fb      	b.n	8011d0e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d1a3      	bne.n	8011a68 <HAL_SPI_TransmitReceive+0x164>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d19d      	bne.n	8011a68 <HAL_SPI_TransmitReceive+0x164>
 8011b2c:	e0df      	b.n	8011cee <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d003      	beq.n	8011b3e <HAL_SPI_TransmitReceive+0x23a>
 8011b36:	8a7b      	ldrh	r3, [r7, #18]
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	f040 80cb 	bne.w	8011cd4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d912      	bls.n	8011b6e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b4c:	881a      	ldrh	r2, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b58:	1c9a      	adds	r2, r3, #2
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	3b02      	subs	r3, #2
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b6c:	e0b2      	b.n	8011cd4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	330c      	adds	r3, #12
 8011b78:	7812      	ldrb	r2, [r2, #0]
 8011b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b94:	e09e      	b.n	8011cd4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	689b      	ldr	r3, [r3, #8]
 8011b9c:	f003 0302 	and.w	r3, r3, #2
 8011ba0:	2b02      	cmp	r3, #2
 8011ba2:	d134      	bne.n	8011c0e <HAL_SPI_TransmitReceive+0x30a>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d02f      	beq.n	8011c0e <HAL_SPI_TransmitReceive+0x30a>
 8011bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d12c      	bne.n	8011c0e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d912      	bls.n	8011be4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bc2:	881a      	ldrh	r2, [r3, #0]
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bce:	1c9a      	adds	r2, r3, #2
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	3b02      	subs	r3, #2
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011be2:	e012      	b.n	8011c0a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	330c      	adds	r3, #12
 8011bee:	7812      	ldrb	r2, [r2, #0]
 8011bf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bf6:	1c5a      	adds	r2, r3, #1
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	3b01      	subs	r3, #1
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	f003 0301 	and.w	r3, r3, #1
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d148      	bne.n	8011cae <HAL_SPI_TransmitReceive+0x3aa>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d042      	beq.n	8011cae <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d923      	bls.n	8011c7c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68da      	ldr	r2, [r3, #12]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c3e:	b292      	uxth	r2, r2
 8011c40:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c46:	1c9a      	adds	r2, r3, #2
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	3b02      	subs	r3, #2
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d81f      	bhi.n	8011caa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c78:	605a      	str	r2, [r3, #4]
 8011c7a:	e016      	b.n	8011caa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f103 020c 	add.w	r2, r3, #12
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c88:	7812      	ldrb	r2, [r2, #0]
 8011c8a:	b2d2      	uxtb	r2, r2
 8011c8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011caa:	2301      	movs	r3, #1
 8011cac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011cae:	f7fc fcff 	bl	800e6b0 <HAL_GetTick>
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d803      	bhi.n	8011cc6 <HAL_SPI_TransmitReceive+0x3c2>
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc4:	d102      	bne.n	8011ccc <HAL_SPI_TransmitReceive+0x3c8>
 8011cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d103      	bne.n	8011cd4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011ccc:	2303      	movs	r3, #3
 8011cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8011cd2:	e01c      	b.n	8011d0e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f47f af5b 	bne.w	8011b96 <HAL_SPI_TransmitReceive+0x292>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f47f af54 	bne.w	8011b96 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011cee:	69fa      	ldr	r2, [r7, #28]
 8011cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f000 f938 	bl	8011f68 <SPI_EndRxTxTransaction>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d006      	beq.n	8011d0c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	2220      	movs	r2, #32
 8011d08:	661a      	str	r2, [r3, #96]	@ 0x60
 8011d0a:	e000      	b.n	8011d0e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011d0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2201      	movs	r2, #1
 8011d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8011d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3728      	adds	r7, #40	@ 0x28
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
	...

08011d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	603b      	str	r3, [r7, #0]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011d3c:	f7fc fcb8 	bl	800e6b0 <HAL_GetTick>
 8011d40:	4602      	mov	r2, r0
 8011d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d44:	1a9b      	subs	r3, r3, r2
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	4413      	add	r3, r2
 8011d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011d4c:	f7fc fcb0 	bl	800e6b0 <HAL_GetTick>
 8011d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011d52:	4b39      	ldr	r3, [pc, #228]	@ (8011e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	015b      	lsls	r3, r3, #5
 8011d58:	0d1b      	lsrs	r3, r3, #20
 8011d5a:	69fa      	ldr	r2, [r7, #28]
 8011d5c:	fb02 f303 	mul.w	r3, r2, r3
 8011d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011d62:	e054      	b.n	8011e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d6a:	d050      	beq.n	8011e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011d6c:	f7fc fca0 	bl	800e6b0 <HAL_GetTick>
 8011d70:	4602      	mov	r2, r0
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	69fa      	ldr	r2, [r7, #28]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d902      	bls.n	8011d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d13d      	bne.n	8011dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	685a      	ldr	r2, [r3, #4]
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011d9a:	d111      	bne.n	8011dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011da4:	d004      	beq.n	8011db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011dae:	d107      	bne.n	8011dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011dc8:	d10f      	bne.n	8011dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2201      	movs	r2, #1
 8011dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2200      	movs	r2, #0
 8011df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011dfa:	2303      	movs	r3, #3
 8011dfc:	e017      	b.n	8011e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d101      	bne.n	8011e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011e04:	2300      	movs	r3, #0
 8011e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	689a      	ldr	r2, [r3, #8]
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	4013      	ands	r3, r2
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	bf0c      	ite	eq
 8011e1e:	2301      	moveq	r3, #1
 8011e20:	2300      	movne	r3, #0
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	461a      	mov	r2, r3
 8011e26:	79fb      	ldrb	r3, [r7, #7]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d19b      	bne.n	8011d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3720      	adds	r7, #32
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	20000018 	.word	0x20000018

08011e3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b08a      	sub	sp, #40	@ 0x28
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011e4e:	f7fc fc2f 	bl	800e6b0 <HAL_GetTick>
 8011e52:	4602      	mov	r2, r0
 8011e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e56:	1a9b      	subs	r3, r3, r2
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011e5e:	f7fc fc27 	bl	800e6b0 <HAL_GetTick>
 8011e62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	330c      	adds	r3, #12
 8011e6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8011f64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	4613      	mov	r3, r2
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	00da      	lsls	r2, r3, #3
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	0d1b      	lsrs	r3, r3, #20
 8011e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e7e:	fb02 f303 	mul.w	r3, r2, r3
 8011e82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011e84:	e060      	b.n	8011f48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011e8c:	d107      	bne.n	8011e9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d104      	bne.n	8011e9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011e9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea4:	d050      	beq.n	8011f48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011ea6:	f7fc fc03 	bl	800e6b0 <HAL_GetTick>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d902      	bls.n	8011ebc <SPI_WaitFifoStateUntilTimeout+0x80>
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d13d      	bne.n	8011f38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	685a      	ldr	r2, [r3, #4]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011eca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ed4:	d111      	bne.n	8011efa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ede:	d004      	beq.n	8011eea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ee8:	d107      	bne.n	8011efa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ef8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011f02:	d10f      	bne.n	8011f24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011f12:	601a      	str	r2, [r3, #0]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011f22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2201      	movs	r2, #1
 8011f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e010      	b.n	8011f5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	3b01      	subs	r3, #1
 8011f46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	689a      	ldr	r2, [r3, #8]
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	4013      	ands	r3, r2
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d196      	bne.n	8011e86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3728      	adds	r7, #40	@ 0x28
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	20000018 	.word	0x20000018

08011f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b086      	sub	sp, #24
 8011f6c:	af02      	add	r7, sp, #8
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	f7ff ff5b 	bl	8011e3c <SPI_WaitFifoStateUntilTimeout>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d007      	beq.n	8011f9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f90:	f043 0220 	orr.w	r2, r3, #32
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011f98:	2303      	movs	r3, #3
 8011f9a:	e027      	b.n	8011fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	2180      	movs	r1, #128	@ 0x80
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f7ff fec0 	bl	8011d2c <SPI_WaitFlagStateUntilTimeout>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d007      	beq.n	8011fc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fb6:	f043 0220 	orr.w	r2, r3, #32
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011fbe:	2303      	movs	r3, #3
 8011fc0:	e014      	b.n	8011fec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f7ff ff34 	bl	8011e3c <SPI_WaitFifoStateUntilTimeout>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fde:	f043 0220 	orr.w	r2, r3, #32
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	e000      	b.n	8011fec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3710      	adds	r7, #16
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d101      	bne.n	8012006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012002:	2301      	movs	r3, #1
 8012004:	e054      	b.n	80120b0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d111      	bne.n	8012036 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f000 ff68 	bl	8012ef0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012024:	2b00      	cmp	r3, #0
 8012026:	d102      	bne.n	801202e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	4a23      	ldr	r2, [pc, #140]	@ (80120b8 <HAL_TIM_Base_Init+0xc4>)
 801202c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2202      	movs	r2, #2
 801203a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	3304      	adds	r3, #4
 8012046:	4619      	mov	r1, r3
 8012048:	4610      	mov	r0, r2
 801204a:	f000 fbd3 	bl	80127f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2201      	movs	r2, #1
 8012052:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2201      	movs	r2, #1
 801205a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2201      	movs	r2, #1
 8012062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2201      	movs	r2, #1
 8012072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2201      	movs	r2, #1
 801207a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2201      	movs	r2, #1
 8012082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2201      	movs	r2, #1
 801208a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2201      	movs	r2, #1
 8012092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2201      	movs	r2, #1
 801209a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2201      	movs	r2, #1
 80120a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2201      	movs	r2, #1
 80120aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	0800c0a9 	.word	0x0800c0a9

080120bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80120bc:	b480      	push	{r7}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d001      	beq.n	80120d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80120d0:	2301      	movs	r3, #1
 80120d2:	e036      	b.n	8012142 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2202      	movs	r2, #2
 80120d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	68da      	ldr	r2, [r3, #12]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f042 0201 	orr.w	r2, r2, #1
 80120ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a17      	ldr	r2, [pc, #92]	@ (8012150 <HAL_TIM_Base_Start_IT+0x94>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d004      	beq.n	8012100 <HAL_TIM_Base_Start_IT+0x44>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120fe:	d115      	bne.n	801212c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	689a      	ldr	r2, [r3, #8]
 8012106:	4b13      	ldr	r3, [pc, #76]	@ (8012154 <HAL_TIM_Base_Start_IT+0x98>)
 8012108:	4013      	ands	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b06      	cmp	r3, #6
 8012110:	d015      	beq.n	801213e <HAL_TIM_Base_Start_IT+0x82>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012118:	d011      	beq.n	801213e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f042 0201 	orr.w	r2, r2, #1
 8012128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801212a:	e008      	b.n	801213e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f042 0201 	orr.w	r2, r2, #1
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	e000      	b.n	8012140 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801213e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3714      	adds	r7, #20
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop
 8012150:	40012c00 	.word	0x40012c00
 8012154:	00010007 	.word	0x00010007

08012158 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	e054      	b.n	8012214 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012170:	b2db      	uxtb	r3, r3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d111      	bne.n	801219a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 feb6 	bl	8012ef0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012188:	2b00      	cmp	r3, #0
 801218a:	d102      	bne.n	8012192 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	4a23      	ldr	r2, [pc, #140]	@ (801221c <HAL_TIM_OC_Init+0xc4>)
 8012190:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2202      	movs	r2, #2
 801219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	3304      	adds	r3, #4
 80121aa:	4619      	mov	r1, r3
 80121ac:	4610      	mov	r0, r2
 80121ae:	f000 fb21 	bl	80127f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2201      	movs	r2, #1
 80121b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2201      	movs	r2, #1
 80121be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2201      	movs	r2, #1
 80121c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2201      	movs	r2, #1
 80121ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2201      	movs	r2, #1
 80121d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2201      	movs	r2, #1
 80121e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2201      	movs	r2, #1
 80121fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	08012221 	.word	0x08012221

08012220 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012228:	bf00      	nop
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	f003 0302 	and.w	r3, r3, #2
 8012246:	2b02      	cmp	r3, #2
 8012248:	d128      	bne.n	801229c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	f003 0302 	and.w	r3, r3, #2
 8012254:	2b02      	cmp	r3, #2
 8012256:	d121      	bne.n	801229c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f06f 0202 	mvn.w	r2, #2
 8012260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2201      	movs	r2, #1
 8012266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	699b      	ldr	r3, [r3, #24]
 801226e:	f003 0303 	and.w	r3, r3, #3
 8012272:	2b00      	cmp	r3, #0
 8012274:	d005      	beq.n	8012282 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	4798      	blx	r3
 8012280:	e009      	b.n	8012296 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	691b      	ldr	r3, [r3, #16]
 80122a2:	f003 0304 	and.w	r3, r3, #4
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d128      	bne.n	80122fc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f003 0304 	and.w	r3, r3, #4
 80122b4:	2b04      	cmp	r3, #4
 80122b6:	d121      	bne.n	80122fc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f06f 0204 	mvn.w	r2, #4
 80122c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2202      	movs	r2, #2
 80122c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	699b      	ldr	r3, [r3, #24]
 80122ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d005      	beq.n	80122e2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	4798      	blx	r3
 80122e0:	e009      	b.n	80122f6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	691b      	ldr	r3, [r3, #16]
 8012302:	f003 0308 	and.w	r3, r3, #8
 8012306:	2b08      	cmp	r3, #8
 8012308:	d128      	bne.n	801235c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	f003 0308 	and.w	r3, r3, #8
 8012314:	2b08      	cmp	r3, #8
 8012316:	d121      	bne.n	801235c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f06f 0208 	mvn.w	r2, #8
 8012320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2204      	movs	r2, #4
 8012326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	69db      	ldr	r3, [r3, #28]
 801232e:	f003 0303 	and.w	r3, r3, #3
 8012332:	2b00      	cmp	r3, #0
 8012334:	d005      	beq.n	8012342 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	4798      	blx	r3
 8012340:	e009      	b.n	8012356 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	691b      	ldr	r3, [r3, #16]
 8012362:	f003 0310 	and.w	r3, r3, #16
 8012366:	2b10      	cmp	r3, #16
 8012368:	d128      	bne.n	80123bc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	f003 0310 	and.w	r3, r3, #16
 8012374:	2b10      	cmp	r3, #16
 8012376:	d121      	bne.n	80123bc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f06f 0210 	mvn.w	r2, #16
 8012380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2208      	movs	r2, #8
 8012386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	69db      	ldr	r3, [r3, #28]
 801238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012392:	2b00      	cmp	r3, #0
 8012394:	d005      	beq.n	80123a2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	4798      	blx	r3
 80123a0:	e009      	b.n	80123b6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	691b      	ldr	r3, [r3, #16]
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	d110      	bne.n	80123ec <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d109      	bne.n	80123ec <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f06f 0201 	mvn.w	r2, #1
 80123e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	691b      	ldr	r3, [r3, #16]
 80123f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123f6:	2b80      	cmp	r3, #128	@ 0x80
 80123f8:	d110      	bne.n	801241c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012404:	2b80      	cmp	r3, #128	@ 0x80
 8012406:	d109      	bne.n	801241c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8012410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801242a:	d110      	bne.n	801244e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012436:	2b80      	cmp	r3, #128	@ 0x80
 8012438:	d109      	bne.n	801244e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	691b      	ldr	r3, [r3, #16]
 8012454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012458:	2b40      	cmp	r3, #64	@ 0x40
 801245a:	d110      	bne.n	801247e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012466:	2b40      	cmp	r3, #64	@ 0x40
 8012468:	d109      	bne.n	801247e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	f003 0320 	and.w	r3, r3, #32
 8012488:	2b20      	cmp	r3, #32
 801248a:	d110      	bne.n	80124ae <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	f003 0320 	and.w	r3, r3, #32
 8012496:	2b20      	cmp	r3, #32
 8012498:	d109      	bne.n	80124ae <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f06f 0220 	mvn.w	r2, #32
 80124a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
	...

080124b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d101      	bne.n	80124d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80124d2:	2302      	movs	r3, #2
 80124d4:	e066      	b.n	80125a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2201      	movs	r2, #1
 80124da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2b14      	cmp	r3, #20
 80124e2:	d857      	bhi.n	8012594 <HAL_TIM_OC_ConfigChannel+0xdc>
 80124e4:	a201      	add	r2, pc, #4	@ (adr r2, 80124ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80124e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ea:	bf00      	nop
 80124ec:	08012541 	.word	0x08012541
 80124f0:	08012595 	.word	0x08012595
 80124f4:	08012595 	.word	0x08012595
 80124f8:	08012595 	.word	0x08012595
 80124fc:	0801254f 	.word	0x0801254f
 8012500:	08012595 	.word	0x08012595
 8012504:	08012595 	.word	0x08012595
 8012508:	08012595 	.word	0x08012595
 801250c:	0801255d 	.word	0x0801255d
 8012510:	08012595 	.word	0x08012595
 8012514:	08012595 	.word	0x08012595
 8012518:	08012595 	.word	0x08012595
 801251c:	0801256b 	.word	0x0801256b
 8012520:	08012595 	.word	0x08012595
 8012524:	08012595 	.word	0x08012595
 8012528:	08012595 	.word	0x08012595
 801252c:	08012579 	.word	0x08012579
 8012530:	08012595 	.word	0x08012595
 8012534:	08012595 	.word	0x08012595
 8012538:	08012595 	.word	0x08012595
 801253c:	08012587 	.word	0x08012587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	4618      	mov	r0, r3
 8012548:	f000 f9b8 	bl	80128bc <TIM_OC1_SetConfig>
      break;
 801254c:	e025      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	68b9      	ldr	r1, [r7, #8]
 8012554:	4618      	mov	r0, r3
 8012556:	f000 fa2d 	bl	80129b4 <TIM_OC2_SetConfig>
      break;
 801255a:	e01e      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	68b9      	ldr	r1, [r7, #8]
 8012562:	4618      	mov	r0, r3
 8012564:	f000 faa0 	bl	8012aa8 <TIM_OC3_SetConfig>
      break;
 8012568:	e017      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	68b9      	ldr	r1, [r7, #8]
 8012570:	4618      	mov	r0, r3
 8012572:	f000 fb11 	bl	8012b98 <TIM_OC4_SetConfig>
      break;
 8012576:	e010      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	4618      	mov	r0, r3
 8012580:	f000 fb68 	bl	8012c54 <TIM_OC5_SetConfig>
      break;
 8012584:	e009      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	68b9      	ldr	r1, [r7, #8]
 801258c:	4618      	mov	r0, r3
 801258e:	f000 fbb9 	bl	8012d04 <TIM_OC6_SetConfig>
      break;
 8012592:	e002      	b.n	801259a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8012594:	2301      	movs	r3, #1
 8012596:	75fb      	strb	r3, [r7, #23]
      break;
 8012598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80125a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3718      	adds	r7, #24
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d101      	bne.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c>
 80125c4:	2302      	movs	r3, #2
 80125c6:	e0b6      	b.n	8012736 <HAL_TIM_ConfigClockSource+0x18a>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2202      	movs	r2, #2
 80125d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80125e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80125ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80125f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012604:	d03e      	beq.n	8012684 <HAL_TIM_ConfigClockSource+0xd8>
 8012606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801260a:	f200 8087 	bhi.w	801271c <HAL_TIM_ConfigClockSource+0x170>
 801260e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012612:	f000 8086 	beq.w	8012722 <HAL_TIM_ConfigClockSource+0x176>
 8012616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801261a:	d87f      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 801261c:	2b70      	cmp	r3, #112	@ 0x70
 801261e:	d01a      	beq.n	8012656 <HAL_TIM_ConfigClockSource+0xaa>
 8012620:	2b70      	cmp	r3, #112	@ 0x70
 8012622:	d87b      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 8012624:	2b60      	cmp	r3, #96	@ 0x60
 8012626:	d050      	beq.n	80126ca <HAL_TIM_ConfigClockSource+0x11e>
 8012628:	2b60      	cmp	r3, #96	@ 0x60
 801262a:	d877      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 801262c:	2b50      	cmp	r3, #80	@ 0x50
 801262e:	d03c      	beq.n	80126aa <HAL_TIM_ConfigClockSource+0xfe>
 8012630:	2b50      	cmp	r3, #80	@ 0x50
 8012632:	d873      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 8012634:	2b40      	cmp	r3, #64	@ 0x40
 8012636:	d058      	beq.n	80126ea <HAL_TIM_ConfigClockSource+0x13e>
 8012638:	2b40      	cmp	r3, #64	@ 0x40
 801263a:	d86f      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 801263c:	2b30      	cmp	r3, #48	@ 0x30
 801263e:	d064      	beq.n	801270a <HAL_TIM_ConfigClockSource+0x15e>
 8012640:	2b30      	cmp	r3, #48	@ 0x30
 8012642:	d86b      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 8012644:	2b20      	cmp	r3, #32
 8012646:	d060      	beq.n	801270a <HAL_TIM_ConfigClockSource+0x15e>
 8012648:	2b20      	cmp	r3, #32
 801264a:	d867      	bhi.n	801271c <HAL_TIM_ConfigClockSource+0x170>
 801264c:	2b00      	cmp	r3, #0
 801264e:	d05c      	beq.n	801270a <HAL_TIM_ConfigClockSource+0x15e>
 8012650:	2b10      	cmp	r3, #16
 8012652:	d05a      	beq.n	801270a <HAL_TIM_ConfigClockSource+0x15e>
 8012654:	e062      	b.n	801271c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012666:	f000 fc23 	bl	8012eb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	609a      	str	r2, [r3, #8]
      break;
 8012682:	e04f      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012694:	f000 fc0c 	bl	8012eb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	689a      	ldr	r2, [r3, #8]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80126a6:	609a      	str	r2, [r3, #8]
      break;
 80126a8:	e03c      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80126b6:	461a      	mov	r2, r3
 80126b8:	f000 fb7e 	bl	8012db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2150      	movs	r1, #80	@ 0x50
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 fbd7 	bl	8012e76 <TIM_ITRx_SetConfig>
      break;
 80126c8:	e02c      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80126d6:	461a      	mov	r2, r3
 80126d8:	f000 fb9d 	bl	8012e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2160      	movs	r1, #96	@ 0x60
 80126e2:	4618      	mov	r0, r3
 80126e4:	f000 fbc7 	bl	8012e76 <TIM_ITRx_SetConfig>
      break;
 80126e8:	e01c      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80126f6:	461a      	mov	r2, r3
 80126f8:	f000 fb5e 	bl	8012db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2140      	movs	r1, #64	@ 0x40
 8012702:	4618      	mov	r0, r3
 8012704:	f000 fbb7 	bl	8012e76 <TIM_ITRx_SetConfig>
      break;
 8012708:	e00c      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4619      	mov	r1, r3
 8012714:	4610      	mov	r0, r2
 8012716:	f000 fbae 	bl	8012e76 <TIM_ITRx_SetConfig>
      break;
 801271a:	e003      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801271c:	2301      	movs	r3, #1
 801271e:	73fb      	strb	r3, [r7, #15]
      break;
 8012720:	e000      	b.n	8012724 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8012722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2201      	movs	r2, #1
 8012728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012734:	7bfb      	ldrb	r3, [r7, #15]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3710      	adds	r7, #16
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801273e:	b480      	push	{r7}
 8012740:	b083      	sub	sp, #12
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801275a:	bf00      	nop
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801276e:	bf00      	nop
 8012770:	370c      	adds	r7, #12
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr

0801277a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801277a:	b480      	push	{r7}
 801277c:	b083      	sub	sp, #12
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8012782:	bf00      	nop
 8012784:	370c      	adds	r7, #12
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr

0801278e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801278e:	b480      	push	{r7}
 8012790:	b083      	sub	sp, #12
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012796:	bf00      	nop
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr

080127a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80127a2:	b480      	push	{r7}
 80127a4:	b083      	sub	sp, #12
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80127aa:	bf00      	nop
 80127ac:	370c      	adds	r7, #12
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr

080127b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80127b6:	b480      	push	{r7}
 80127b8:	b083      	sub	sp, #12
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80127be:	bf00      	nop
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80127ca:	b480      	push	{r7}
 80127cc:	b083      	sub	sp, #12
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80127d2:	bf00      	nop
 80127d4:	370c      	adds	r7, #12
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr

080127de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80127de:	b480      	push	{r7}
 80127e0:	b083      	sub	sp, #12
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80127e6:	bf00      	nop
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
	...

080127f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4a2a      	ldr	r2, [pc, #168]	@ (80128b0 <TIM_Base_SetConfig+0xbc>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d003      	beq.n	8012814 <TIM_Base_SetConfig+0x20>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012812:	d108      	bne.n	8012826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801281a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	4313      	orrs	r3, r2
 8012824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4a21      	ldr	r2, [pc, #132]	@ (80128b0 <TIM_Base_SetConfig+0xbc>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d00b      	beq.n	8012846 <TIM_Base_SetConfig+0x52>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012834:	d007      	beq.n	8012846 <TIM_Base_SetConfig+0x52>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4a1e      	ldr	r2, [pc, #120]	@ (80128b4 <TIM_Base_SetConfig+0xc0>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d003      	beq.n	8012846 <TIM_Base_SetConfig+0x52>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4a1d      	ldr	r2, [pc, #116]	@ (80128b8 <TIM_Base_SetConfig+0xc4>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d108      	bne.n	8012858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4313      	orrs	r3, r2
 8012856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	695b      	ldr	r3, [r3, #20]
 8012862:	4313      	orrs	r3, r2
 8012864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	689a      	ldr	r2, [r3, #8]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4a0c      	ldr	r2, [pc, #48]	@ (80128b0 <TIM_Base_SetConfig+0xbc>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d007      	beq.n	8012894 <TIM_Base_SetConfig+0xa0>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4a0b      	ldr	r2, [pc, #44]	@ (80128b4 <TIM_Base_SetConfig+0xc0>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d003      	beq.n	8012894 <TIM_Base_SetConfig+0xa0>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	4a0a      	ldr	r2, [pc, #40]	@ (80128b8 <TIM_Base_SetConfig+0xc4>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d103      	bne.n	801289c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	691a      	ldr	r2, [r3, #16]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2201      	movs	r2, #1
 80128a0:	615a      	str	r2, [r3, #20]
}
 80128a2:	bf00      	nop
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	40012c00 	.word	0x40012c00
 80128b4:	40014400 	.word	0x40014400
 80128b8:	40014800 	.word	0x40014800

080128bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80128bc:	b480      	push	{r7}
 80128be:	b087      	sub	sp, #28
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6a1b      	ldr	r3, [r3, #32]
 80128ca:	f023 0201 	bic.w	r2, r3, #1
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6a1b      	ldr	r3, [r3, #32]
 80128d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	699b      	ldr	r3, [r3, #24]
 80128e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80128ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80128ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f023 0303 	bic.w	r3, r3, #3
 80128f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	4313      	orrs	r3, r2
 8012900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	f023 0302 	bic.w	r3, r3, #2
 8012908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	689b      	ldr	r3, [r3, #8]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	4313      	orrs	r3, r2
 8012912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	4a24      	ldr	r2, [pc, #144]	@ (80129a8 <TIM_OC1_SetConfig+0xec>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d007      	beq.n	801292c <TIM_OC1_SetConfig+0x70>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	4a23      	ldr	r2, [pc, #140]	@ (80129ac <TIM_OC1_SetConfig+0xf0>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d003      	beq.n	801292c <TIM_OC1_SetConfig+0x70>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4a22      	ldr	r2, [pc, #136]	@ (80129b0 <TIM_OC1_SetConfig+0xf4>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d10c      	bne.n	8012946 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	f023 0308 	bic.w	r3, r3, #8
 8012932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	697a      	ldr	r2, [r7, #20]
 801293a:	4313      	orrs	r3, r2
 801293c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	f023 0304 	bic.w	r3, r3, #4
 8012944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a17      	ldr	r2, [pc, #92]	@ (80129a8 <TIM_OC1_SetConfig+0xec>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d007      	beq.n	801295e <TIM_OC1_SetConfig+0xa2>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4a17      	ldr	r2, [pc, #92]	@ (80129b0 <TIM_OC1_SetConfig+0xf4>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d003      	beq.n	801295e <TIM_OC1_SetConfig+0xa2>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4a14      	ldr	r2, [pc, #80]	@ (80129ac <TIM_OC1_SetConfig+0xf0>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d111      	bne.n	8012982 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801296c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	695b      	ldr	r3, [r3, #20]
 8012972:	693a      	ldr	r2, [r7, #16]
 8012974:	4313      	orrs	r3, r2
 8012976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	699b      	ldr	r3, [r3, #24]
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	4313      	orrs	r3, r2
 8012980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	693a      	ldr	r2, [r7, #16]
 8012986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	697a      	ldr	r2, [r7, #20]
 801299a:	621a      	str	r2, [r3, #32]
}
 801299c:	bf00      	nop
 801299e:	371c      	adds	r7, #28
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr
 80129a8:	40012c00 	.word	0x40012c00
 80129ac:	40014800 	.word	0x40014800
 80129b0:	40014400 	.word	0x40014400

080129b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b087      	sub	sp, #28
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6a1b      	ldr	r3, [r3, #32]
 80129c2:	f023 0210 	bic.w	r2, r3, #16
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a1b      	ldr	r3, [r3, #32]
 80129ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	699b      	ldr	r3, [r3, #24]
 80129da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80129e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80129e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80129ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	021b      	lsls	r3, r3, #8
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	4313      	orrs	r3, r2
 80129fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	f023 0320 	bic.w	r3, r3, #32
 8012a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4a22      	ldr	r2, [pc, #136]	@ (8012a9c <TIM_OC2_SetConfig+0xe8>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d10d      	bne.n	8012a34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	011b      	lsls	r3, r3, #4
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	4a19      	ldr	r2, [pc, #100]	@ (8012a9c <TIM_OC2_SetConfig+0xe8>)
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d007      	beq.n	8012a4c <TIM_OC2_SetConfig+0x98>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	4a18      	ldr	r2, [pc, #96]	@ (8012aa0 <TIM_OC2_SetConfig+0xec>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d003      	beq.n	8012a4c <TIM_OC2_SetConfig+0x98>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	4a17      	ldr	r2, [pc, #92]	@ (8012aa4 <TIM_OC2_SetConfig+0xf0>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d113      	bne.n	8012a74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	695b      	ldr	r3, [r3, #20]
 8012a60:	009b      	lsls	r3, r3, #2
 8012a62:	693a      	ldr	r2, [r7, #16]
 8012a64:	4313      	orrs	r3, r2
 8012a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	699b      	ldr	r3, [r3, #24]
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	693a      	ldr	r2, [r7, #16]
 8012a70:	4313      	orrs	r3, r2
 8012a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	693a      	ldr	r2, [r7, #16]
 8012a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	685a      	ldr	r2, [r3, #4]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	697a      	ldr	r2, [r7, #20]
 8012a8c:	621a      	str	r2, [r3, #32]
}
 8012a8e:	bf00      	nop
 8012a90:	371c      	adds	r7, #28
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	40012c00 	.word	0x40012c00
 8012aa0:	40014400 	.word	0x40014400
 8012aa4:	40014800 	.word	0x40014800

08012aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b087      	sub	sp, #28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6a1b      	ldr	r3, [r3, #32]
 8012ab6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6a1b      	ldr	r3, [r3, #32]
 8012ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	69db      	ldr	r3, [r3, #28]
 8012ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f023 0303 	bic.w	r3, r3, #3
 8012ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	68fa      	ldr	r2, [r7, #12]
 8012aea:	4313      	orrs	r3, r2
 8012aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	021b      	lsls	r3, r3, #8
 8012afc:	697a      	ldr	r2, [r7, #20]
 8012afe:	4313      	orrs	r3, r2
 8012b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	4a21      	ldr	r2, [pc, #132]	@ (8012b8c <TIM_OC3_SetConfig+0xe4>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d10d      	bne.n	8012b26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	021b      	lsls	r3, r3, #8
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a18      	ldr	r2, [pc, #96]	@ (8012b8c <TIM_OC3_SetConfig+0xe4>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d007      	beq.n	8012b3e <TIM_OC3_SetConfig+0x96>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a17      	ldr	r2, [pc, #92]	@ (8012b90 <TIM_OC3_SetConfig+0xe8>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d003      	beq.n	8012b3e <TIM_OC3_SetConfig+0x96>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a16      	ldr	r2, [pc, #88]	@ (8012b94 <TIM_OC3_SetConfig+0xec>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d113      	bne.n	8012b66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	695b      	ldr	r3, [r3, #20]
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	693a      	ldr	r2, [r7, #16]
 8012b56:	4313      	orrs	r3, r2
 8012b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	699b      	ldr	r3, [r3, #24]
 8012b5e:	011b      	lsls	r3, r3, #4
 8012b60:	693a      	ldr	r2, [r7, #16]
 8012b62:	4313      	orrs	r3, r2
 8012b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	693a      	ldr	r2, [r7, #16]
 8012b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	68fa      	ldr	r2, [r7, #12]
 8012b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	685a      	ldr	r2, [r3, #4]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	697a      	ldr	r2, [r7, #20]
 8012b7e:	621a      	str	r2, [r3, #32]
}
 8012b80:	bf00      	nop
 8012b82:	371c      	adds	r7, #28
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr
 8012b8c:	40012c00 	.word	0x40012c00
 8012b90:	40014400 	.word	0x40014400
 8012b94:	40014800 	.word	0x40014800

08012b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b087      	sub	sp, #28
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6a1b      	ldr	r3, [r3, #32]
 8012ba6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6a1b      	ldr	r3, [r3, #32]
 8012bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	69db      	ldr	r3, [r3, #28]
 8012bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	021b      	lsls	r3, r3, #8
 8012bda:	68fa      	ldr	r2, [r7, #12]
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	689b      	ldr	r3, [r3, #8]
 8012bec:	031b      	lsls	r3, r3, #12
 8012bee:	693a      	ldr	r2, [r7, #16]
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	4a14      	ldr	r2, [pc, #80]	@ (8012c48 <TIM_OC4_SetConfig+0xb0>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d007      	beq.n	8012c0c <TIM_OC4_SetConfig+0x74>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4a13      	ldr	r2, [pc, #76]	@ (8012c4c <TIM_OC4_SetConfig+0xb4>)
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d003      	beq.n	8012c0c <TIM_OC4_SetConfig+0x74>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	4a12      	ldr	r2, [pc, #72]	@ (8012c50 <TIM_OC4_SetConfig+0xb8>)
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d109      	bne.n	8012c20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	695b      	ldr	r3, [r3, #20]
 8012c18:	019b      	lsls	r3, r3, #6
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	697a      	ldr	r2, [r7, #20]
 8012c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	685a      	ldr	r2, [r3, #4]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	693a      	ldr	r2, [r7, #16]
 8012c38:	621a      	str	r2, [r3, #32]
}
 8012c3a:	bf00      	nop
 8012c3c:	371c      	adds	r7, #28
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop
 8012c48:	40012c00 	.word	0x40012c00
 8012c4c:	40014400 	.word	0x40014400
 8012c50:	40014800 	.word	0x40014800

08012c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b087      	sub	sp, #28
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a1b      	ldr	r3, [r3, #32]
 8012c62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6a1b      	ldr	r3, [r3, #32]
 8012c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	68fa      	ldr	r2, [r7, #12]
 8012c8e:	4313      	orrs	r3, r2
 8012c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	041b      	lsls	r3, r3, #16
 8012ca0:	693a      	ldr	r2, [r7, #16]
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4a13      	ldr	r2, [pc, #76]	@ (8012cf8 <TIM_OC5_SetConfig+0xa4>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d007      	beq.n	8012cbe <TIM_OC5_SetConfig+0x6a>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4a12      	ldr	r2, [pc, #72]	@ (8012cfc <TIM_OC5_SetConfig+0xa8>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d003      	beq.n	8012cbe <TIM_OC5_SetConfig+0x6a>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4a11      	ldr	r2, [pc, #68]	@ (8012d00 <TIM_OC5_SetConfig+0xac>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d109      	bne.n	8012cd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	695b      	ldr	r3, [r3, #20]
 8012cca:	021b      	lsls	r3, r3, #8
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	697a      	ldr	r2, [r7, #20]
 8012cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	685a      	ldr	r2, [r3, #4]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	693a      	ldr	r2, [r7, #16]
 8012cea:	621a      	str	r2, [r3, #32]
}
 8012cec:	bf00      	nop
 8012cee:	371c      	adds	r7, #28
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr
 8012cf8:	40012c00 	.word	0x40012c00
 8012cfc:	40014400 	.word	0x40014400
 8012d00:	40014800 	.word	0x40014800

08012d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b087      	sub	sp, #28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a1b      	ldr	r3, [r3, #32]
 8012d12:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6a1b      	ldr	r3, [r3, #32]
 8012d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	021b      	lsls	r3, r3, #8
 8012d3e:	68fa      	ldr	r2, [r7, #12]
 8012d40:	4313      	orrs	r3, r2
 8012d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	051b      	lsls	r3, r3, #20
 8012d52:	693a      	ldr	r2, [r7, #16]
 8012d54:	4313      	orrs	r3, r2
 8012d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4a14      	ldr	r2, [pc, #80]	@ (8012dac <TIM_OC6_SetConfig+0xa8>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d007      	beq.n	8012d70 <TIM_OC6_SetConfig+0x6c>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	4a13      	ldr	r2, [pc, #76]	@ (8012db0 <TIM_OC6_SetConfig+0xac>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d003      	beq.n	8012d70 <TIM_OC6_SetConfig+0x6c>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4a12      	ldr	r2, [pc, #72]	@ (8012db4 <TIM_OC6_SetConfig+0xb0>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d109      	bne.n	8012d84 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	695b      	ldr	r3, [r3, #20]
 8012d7c:	029b      	lsls	r3, r3, #10
 8012d7e:	697a      	ldr	r2, [r7, #20]
 8012d80:	4313      	orrs	r3, r2
 8012d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	685a      	ldr	r2, [r3, #4]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	693a      	ldr	r2, [r7, #16]
 8012d9c:	621a      	str	r2, [r3, #32]
}
 8012d9e:	bf00      	nop
 8012da0:	371c      	adds	r7, #28
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	40012c00 	.word	0x40012c00
 8012db0:	40014400 	.word	0x40014400
 8012db4:	40014800 	.word	0x40014800

08012db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b087      	sub	sp, #28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6a1b      	ldr	r3, [r3, #32]
 8012dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6a1b      	ldr	r3, [r3, #32]
 8012dce:	f023 0201 	bic.w	r2, r3, #1
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	699b      	ldr	r3, [r3, #24]
 8012dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	011b      	lsls	r3, r3, #4
 8012de8:	693a      	ldr	r2, [r7, #16]
 8012dea:	4313      	orrs	r3, r2
 8012dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	f023 030a 	bic.w	r3, r3, #10
 8012df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	4313      	orrs	r3, r2
 8012dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	697a      	ldr	r2, [r7, #20]
 8012e08:	621a      	str	r2, [r3, #32]
}
 8012e0a:	bf00      	nop
 8012e0c:	371c      	adds	r7, #28
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr

08012e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e16:	b480      	push	{r7}
 8012e18:	b087      	sub	sp, #28
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	60f8      	str	r0, [r7, #12]
 8012e1e:	60b9      	str	r1, [r7, #8]
 8012e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6a1b      	ldr	r3, [r3, #32]
 8012e26:	f023 0210 	bic.w	r2, r3, #16
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	699b      	ldr	r3, [r3, #24]
 8012e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6a1b      	ldr	r3, [r3, #32]
 8012e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	031b      	lsls	r3, r3, #12
 8012e46:	697a      	ldr	r2, [r7, #20]
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	011b      	lsls	r3, r3, #4
 8012e58:	693a      	ldr	r2, [r7, #16]
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	697a      	ldr	r2, [r7, #20]
 8012e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	693a      	ldr	r2, [r7, #16]
 8012e68:	621a      	str	r2, [r3, #32]
}
 8012e6a:	bf00      	nop
 8012e6c:	371c      	adds	r7, #28
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b085      	sub	sp, #20
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	689b      	ldr	r3, [r3, #8]
 8012e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8012e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012e92:	683a      	ldr	r2, [r7, #0]
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	4313      	orrs	r3, r2
 8012e98:	f043 0307 	orr.w	r3, r3, #7
 8012e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	609a      	str	r2, [r3, #8]
}
 8012ea4:	bf00      	nop
 8012ea6:	3714      	adds	r7, #20
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b087      	sub	sp, #28
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	021a      	lsls	r2, r3, #8
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	431a      	orrs	r2, r3
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	697a      	ldr	r2, [r7, #20]
 8012eda:	4313      	orrs	r3, r2
 8012edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	697a      	ldr	r2, [r7, #20]
 8012ee2:	609a      	str	r2, [r3, #8]
}
 8012ee4:	bf00      	nop
 8012ee6:	371c      	adds	r7, #28
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	b083      	sub	sp, #12
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4a1e      	ldr	r2, [pc, #120]	@ (8012f74 <TIM_ResetCallback+0x84>)
 8012efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	4a1d      	ldr	r2, [pc, #116]	@ (8012f78 <TIM_ResetCallback+0x88>)
 8012f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8012f7c <TIM_ResetCallback+0x8c>)
 8012f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4a1b      	ldr	r2, [pc, #108]	@ (8012f80 <TIM_ResetCallback+0x90>)
 8012f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8012f84 <TIM_ResetCallback+0x94>)
 8012f1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4a19      	ldr	r2, [pc, #100]	@ (8012f88 <TIM_ResetCallback+0x98>)
 8012f24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	4a18      	ldr	r2, [pc, #96]	@ (8012f8c <TIM_ResetCallback+0x9c>)
 8012f2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4a17      	ldr	r2, [pc, #92]	@ (8012f90 <TIM_ResetCallback+0xa0>)
 8012f34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4a16      	ldr	r2, [pc, #88]	@ (8012f94 <TIM_ResetCallback+0xa4>)
 8012f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4a15      	ldr	r2, [pc, #84]	@ (8012f98 <TIM_ResetCallback+0xa8>)
 8012f44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4a14      	ldr	r2, [pc, #80]	@ (8012f9c <TIM_ResetCallback+0xac>)
 8012f4c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4a13      	ldr	r2, [pc, #76]	@ (8012fa0 <TIM_ResetCallback+0xb0>)
 8012f54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	4a12      	ldr	r2, [pc, #72]	@ (8012fa4 <TIM_ResetCallback+0xb4>)
 8012f5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	4a11      	ldr	r2, [pc, #68]	@ (8012fa8 <TIM_ResetCallback+0xb8>)
 8012f64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8012f68:	bf00      	nop
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr
 8012f74:	08005bfd 	.word	0x08005bfd
 8012f78:	0801273f 	.word	0x0801273f
 8012f7c:	080127b7 	.word	0x080127b7
 8012f80:	080127cb 	.word	0x080127cb
 8012f84:	08012767 	.word	0x08012767
 8012f88:	0801277b 	.word	0x0801277b
 8012f8c:	08012753 	.word	0x08012753
 8012f90:	0801278f 	.word	0x0801278f
 8012f94:	080127a3 	.word	0x080127a3
 8012f98:	080127df 	.word	0x080127df
 8012f9c:	0801318d 	.word	0x0801318d
 8012fa0:	080131a1 	.word	0x080131a1
 8012fa4:	080131b5 	.word	0x080131b5
 8012fa8:	080131c9 	.word	0x080131c9

08012fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b085      	sub	sp, #20
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d101      	bne.n	8012fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	e04a      	b.n	801305a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2202      	movs	r2, #2
 8012fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8013068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d108      	bne.n	8013000 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012ff4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	68fa      	ldr	r2, [r7, #12]
 8012ffc:	4313      	orrs	r3, r2
 8012ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	4313      	orrs	r3, r2
 8013010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	4a12      	ldr	r2, [pc, #72]	@ (8013068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8013020:	4293      	cmp	r3, r2
 8013022:	d004      	beq.n	801302e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801302c:	d10c      	bne.n	8013048 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	689b      	ldr	r3, [r3, #8]
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	4313      	orrs	r3, r2
 801303e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2201      	movs	r2, #1
 801304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013058:	2300      	movs	r3, #0
}
 801305a:	4618      	mov	r0, r3
 801305c:	3714      	adds	r7, #20
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop
 8013068:	40012c00 	.word	0x40012c00

0801306c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801306c:	b480      	push	{r7}
 801306e:	b085      	sub	sp, #20
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013076:	2300      	movs	r3, #0
 8013078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013080:	2b01      	cmp	r3, #1
 8013082:	d101      	bne.n	8013088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013084:	2302      	movs	r3, #2
 8013086:	e078      	b.n	801317a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2201      	movs	r2, #1
 801308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	4313      	orrs	r3, r2
 801309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	689b      	ldr	r3, [r3, #8]
 80130a8:	4313      	orrs	r3, r2
 80130aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	4313      	orrs	r3, r2
 80130b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	691b      	ldr	r3, [r3, #16]
 80130d2:	4313      	orrs	r3, r2
 80130d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	695b      	ldr	r3, [r3, #20]
 80130e0:	4313      	orrs	r3, r2
 80130e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130ee:	4313      	orrs	r3, r2
 80130f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	041b      	lsls	r3, r3, #16
 80130fe:	4313      	orrs	r3, r2
 8013100:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a20      	ldr	r2, [pc, #128]	@ (8013188 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d106      	bne.n	801311a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	69db      	ldr	r3, [r3, #28]
 8013116:	4313      	orrs	r3, r2
 8013118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a1a      	ldr	r2, [pc, #104]	@ (8013188 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d121      	bne.n	8013168 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801312e:	051b      	lsls	r3, r3, #20
 8013130:	4313      	orrs	r3, r2
 8013132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	6a1b      	ldr	r3, [r3, #32]
 801313e:	4313      	orrs	r3, r2
 8013140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801314c:	4313      	orrs	r3, r2
 801314e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4a0c      	ldr	r2, [pc, #48]	@ (8013188 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8013156:	4293      	cmp	r3, r2
 8013158:	d106      	bne.n	8013168 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013164:	4313      	orrs	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68fa      	ldr	r2, [r7, #12]
 801316e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013178:	2300      	movs	r3, #0
}
 801317a:	4618      	mov	r0, r3
 801317c:	3714      	adds	r7, #20
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop
 8013188:	40012c00 	.word	0x40012c00

0801318c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801318c:	b480      	push	{r7}
 801318e:	b083      	sub	sp, #12
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013194:	bf00      	nop
 8013196:	370c      	adds	r7, #12
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80131a8:	bf00      	nop
 80131aa:	370c      	adds	r7, #12
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80131bc:	bf00      	nop
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b083      	sub	sp, #12
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80131d0:	bf00      	nop
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr

080131dc <LL_RCC_GetUSARTClockSource>:
{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80131e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80131e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4013      	ands	r3, r2
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <LL_RCC_GetLPUARTClockSource>:
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8013204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013208:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4013      	ands	r3, r2
}
 8013210:	4618      	mov	r0, r3
 8013212:	370c      	adds	r7, #12
 8013214:	46bd      	mov	sp, r7
 8013216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321a:	4770      	bx	lr

0801321c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d101      	bne.n	801322e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801322a:	2301      	movs	r3, #1
 801322c:	e042      	b.n	80132b4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013234:	2b00      	cmp	r3, #0
 8013236:	d106      	bne.n	8013246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f7f8 fe01 	bl	800be48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2224      	movs	r2, #36	@ 0x24
 801324a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f022 0201 	bic.w	r2, r2, #1
 801325c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 fbfe 	bl	8013a60 <UART_SetConfig>
 8013264:	4603      	mov	r3, r0
 8013266:	2b01      	cmp	r3, #1
 8013268:	d101      	bne.n	801326e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801326a:	2301      	movs	r3, #1
 801326c:	e022      	b.n	80132b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f000 fe1a 	bl	8013eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	689a      	ldr	r2, [r3, #8]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801329a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f042 0201 	orr.w	r2, r2, #1
 80132aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 fea1 	bl	8013ff4 <UART_CheckIdleState>
 80132b2:	4603      	mov	r3, r0
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08a      	sub	sp, #40	@ 0x28
 80132c0:	af02      	add	r7, sp, #8
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	603b      	str	r3, [r7, #0]
 80132c8:	4613      	mov	r3, r2
 80132ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80132d2:	2b20      	cmp	r3, #32
 80132d4:	d17b      	bne.n	80133ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <HAL_UART_Transmit+0x26>
 80132dc:	88fb      	ldrh	r3, [r7, #6]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d101      	bne.n	80132e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80132e2:	2301      	movs	r3, #1
 80132e4:	e074      	b.n	80133d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2221      	movs	r2, #33	@ 0x21
 80132f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80132f6:	f7fb f9db 	bl	800e6b0 <HAL_GetTick>
 80132fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	88fa      	ldrh	r2, [r7, #6]
 8013300:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	88fa      	ldrh	r2, [r7, #6]
 8013308:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	689b      	ldr	r3, [r3, #8]
 8013310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013314:	d108      	bne.n	8013328 <HAL_UART_Transmit+0x6c>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	691b      	ldr	r3, [r3, #16]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d104      	bne.n	8013328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801331e:	2300      	movs	r3, #0
 8013320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	61bb      	str	r3, [r7, #24]
 8013326:	e003      	b.n	8013330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801332c:	2300      	movs	r3, #0
 801332e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013330:	e030      	b.n	8013394 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	2200      	movs	r2, #0
 801333a:	2180      	movs	r1, #128	@ 0x80
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f000 ff03 	bl	8014148 <UART_WaitOnFlagUntilTimeout>
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d005      	beq.n	8013354 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2220      	movs	r2, #32
 801334c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013350:	2303      	movs	r3, #3
 8013352:	e03d      	b.n	80133d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d10b      	bne.n	8013372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	881b      	ldrh	r3, [r3, #0]
 801335e:	461a      	mov	r2, r3
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013368:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	3302      	adds	r3, #2
 801336e:	61bb      	str	r3, [r7, #24]
 8013370:	e007      	b.n	8013382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	781a      	ldrb	r2, [r3, #0]
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	3301      	adds	r3, #1
 8013380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013388:	b29b      	uxth	r3, r3
 801338a:	3b01      	subs	r3, #1
 801338c:	b29a      	uxth	r2, r3
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801339a:	b29b      	uxth	r3, r3
 801339c:	2b00      	cmp	r3, #0
 801339e:	d1c8      	bne.n	8013332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	2200      	movs	r2, #0
 80133a8:	2140      	movs	r1, #64	@ 0x40
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f000 fecc 	bl	8014148 <UART_WaitOnFlagUntilTimeout>
 80133b0:	4603      	mov	r3, r0
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d005      	beq.n	80133c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2220      	movs	r2, #32
 80133ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80133be:	2303      	movs	r3, #3
 80133c0:	e006      	b.n	80133d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2220      	movs	r2, #32
 80133c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80133ca:	2300      	movs	r3, #0
 80133cc:	e000      	b.n	80133d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80133ce:	2302      	movs	r3, #2
  }
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3720      	adds	r7, #32
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b0ba      	sub	sp, #232	@ 0xe8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	69db      	ldr	r3, [r3, #28]
 80133e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80133fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013402:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013406:	4013      	ands	r3, r2
 8013408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801340c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013410:	2b00      	cmp	r3, #0
 8013412:	d11b      	bne.n	801344c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013418:	f003 0320 	and.w	r3, r3, #32
 801341c:	2b00      	cmp	r3, #0
 801341e:	d015      	beq.n	801344c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013424:	f003 0320 	and.w	r3, r3, #32
 8013428:	2b00      	cmp	r3, #0
 801342a:	d105      	bne.n	8013438 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801342c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013434:	2b00      	cmp	r3, #0
 8013436:	d009      	beq.n	801344c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801343c:	2b00      	cmp	r3, #0
 801343e:	f000 82e3 	beq.w	8013a08 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	4798      	blx	r3
      }
      return;
 801344a:	e2dd      	b.n	8013a08 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801344c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013450:	2b00      	cmp	r3, #0
 8013452:	f000 8123 	beq.w	801369c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013456:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801345a:	4b8d      	ldr	r3, [pc, #564]	@ (8013690 <HAL_UART_IRQHandler+0x2b8>)
 801345c:	4013      	ands	r3, r2
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013466:	4b8b      	ldr	r3, [pc, #556]	@ (8013694 <HAL_UART_IRQHandler+0x2bc>)
 8013468:	4013      	ands	r3, r2
 801346a:	2b00      	cmp	r3, #0
 801346c:	f000 8116 	beq.w	801369c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013474:	f003 0301 	and.w	r3, r3, #1
 8013478:	2b00      	cmp	r3, #0
 801347a:	d011      	beq.n	80134a0 <HAL_UART_IRQHandler+0xc8>
 801347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013484:	2b00      	cmp	r3, #0
 8013486:	d00b      	beq.n	80134a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2201      	movs	r2, #1
 801348e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013496:	f043 0201 	orr.w	r2, r3, #1
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80134a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80134a4:	f003 0302 	and.w	r3, r3, #2
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d011      	beq.n	80134d0 <HAL_UART_IRQHandler+0xf8>
 80134ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134b0:	f003 0301 	and.w	r3, r3, #1
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00b      	beq.n	80134d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2202      	movs	r2, #2
 80134be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80134c6:	f043 0204 	orr.w	r2, r3, #4
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80134d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80134d4:	f003 0304 	and.w	r3, r3, #4
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d011      	beq.n	8013500 <HAL_UART_IRQHandler+0x128>
 80134dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134e0:	f003 0301 	and.w	r3, r3, #1
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d00b      	beq.n	8013500 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2204      	movs	r2, #4
 80134ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80134f6:	f043 0202 	orr.w	r2, r3, #2
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013504:	f003 0308 	and.w	r3, r3, #8
 8013508:	2b00      	cmp	r3, #0
 801350a:	d017      	beq.n	801353c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013510:	f003 0320 	and.w	r3, r3, #32
 8013514:	2b00      	cmp	r3, #0
 8013516:	d105      	bne.n	8013524 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013518:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801351c:	4b5c      	ldr	r3, [pc, #368]	@ (8013690 <HAL_UART_IRQHandler+0x2b8>)
 801351e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00b      	beq.n	801353c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2208      	movs	r2, #8
 801352a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013532:	f043 0208 	orr.w	r2, r3, #8
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801353c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013544:	2b00      	cmp	r3, #0
 8013546:	d012      	beq.n	801356e <HAL_UART_IRQHandler+0x196>
 8013548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801354c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00c      	beq.n	801356e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801355c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013564:	f043 0220 	orr.w	r2, r3, #32
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013574:	2b00      	cmp	r3, #0
 8013576:	f000 8249 	beq.w	8013a0c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801357e:	f003 0320 	and.w	r3, r3, #32
 8013582:	2b00      	cmp	r3, #0
 8013584:	d013      	beq.n	80135ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801358a:	f003 0320 	and.w	r3, r3, #32
 801358e:	2b00      	cmp	r3, #0
 8013590:	d105      	bne.n	801359e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801359a:	2b00      	cmp	r3, #0
 801359c:	d007      	beq.n	80135ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d003      	beq.n	80135ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80135b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135c2:	2b40      	cmp	r3, #64	@ 0x40
 80135c4:	d005      	beq.n	80135d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80135c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80135ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d054      	beq.n	801367c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f000 fe1f 	bl	8014216 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135e2:	2b40      	cmp	r3, #64	@ 0x40
 80135e4:	d146      	bne.n	8013674 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	3308      	adds	r3, #8
 80135ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80135f4:	e853 3f00 	ldrex	r3, [r3]
 80135f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80135fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	3308      	adds	r3, #8
 801360e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801361a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801361e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013622:	e841 2300 	strex	r3, r2, [r1]
 8013626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801362a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1d9      	bne.n	80135e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013638:	2b00      	cmp	r3, #0
 801363a:	d017      	beq.n	801366c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013642:	4a15      	ldr	r2, [pc, #84]	@ (8013698 <HAL_UART_IRQHandler+0x2c0>)
 8013644:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801364c:	4618      	mov	r0, r3
 801364e:	f7fb f9d9 	bl	800ea04 <HAL_DMA_Abort_IT>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d019      	beq.n	801368c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013666:	4610      	mov	r0, r2
 8013668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801366a:	e00f      	b.n	801368c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f9e1 	bl	8013a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013672:	e00b      	b.n	801368c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 f9dd 	bl	8013a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801367a:	e007      	b.n	801368c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f000 f9d9 	bl	8013a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801368a:	e1bf      	b.n	8013a0c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801368c:	bf00      	nop
    return;
 801368e:	e1bd      	b.n	8013a0c <HAL_UART_IRQHandler+0x634>
 8013690:	10000001 	.word	0x10000001
 8013694:	04000120 	.word	0x04000120
 8013698:	080142e3 	.word	0x080142e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	f040 8153 	bne.w	801394c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80136a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80136aa:	f003 0310 	and.w	r3, r3, #16
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 814c 	beq.w	801394c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80136b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80136b8:	f003 0310 	and.w	r3, r3, #16
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f000 8145 	beq.w	801394c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2210      	movs	r2, #16
 80136c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136d4:	2b40      	cmp	r3, #64	@ 0x40
 80136d6:	f040 80bb 	bne.w	8013850 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80136e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	f000 818f 	beq.w	8013a10 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80136f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80136fc:	429a      	cmp	r2, r3
 80136fe:	f080 8187 	bcs.w	8013a10 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	f003 0320 	and.w	r3, r3, #32
 801371a:	2b00      	cmp	r3, #0
 801371c:	f040 8087 	bne.w	801382e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801372c:	e853 3f00 	ldrex	r3, [r3]
 8013730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8013734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801373c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801374a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801374e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013752:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013756:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801375a:	e841 2300 	strex	r3, r2, [r1]
 801375e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8013762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013766:	2b00      	cmp	r3, #0
 8013768:	d1da      	bne.n	8013720 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	3308      	adds	r3, #8
 8013770:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013774:	e853 3f00 	ldrex	r3, [r3]
 8013778:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801377a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801377c:	f023 0301 	bic.w	r3, r3, #1
 8013780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	3308      	adds	r3, #8
 801378a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801378e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8013792:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013794:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013796:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801379a:	e841 2300 	strex	r3, r2, [r1]
 801379e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80137a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d1e1      	bne.n	801376a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	3308      	adds	r3, #8
 80137ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80137b0:	e853 3f00 	ldrex	r3, [r3]
 80137b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80137b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80137bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	3308      	adds	r3, #8
 80137c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80137ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80137cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80137d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80137d2:	e841 2300 	strex	r3, r2, [r1]
 80137d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80137d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d1e3      	bne.n	80137a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2220      	movs	r2, #32
 80137e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f4:	e853 3f00 	ldrex	r3, [r3]
 80137f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80137fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80137fc:	f023 0310 	bic.w	r3, r3, #16
 8013800:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	461a      	mov	r2, r3
 801380a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801380e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013810:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013816:	e841 2300 	strex	r3, r2, [r1]
 801381a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801381c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801381e:	2b00      	cmp	r3, #0
 8013820:	d1e4      	bne.n	80137ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013828:	4618      	mov	r0, r3
 801382a:	f7fb f88c 	bl	800e946 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2202      	movs	r2, #2
 8013832:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013840:	b29b      	uxth	r3, r3
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	b29b      	uxth	r3, r3
 8013846:	4619      	mov	r1, r3
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 f8fd 	bl	8013a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801384e:	e0df      	b.n	8013a10 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801385c:	b29b      	uxth	r3, r3
 801385e:	1ad3      	subs	r3, r2, r3
 8013860:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801386a:	b29b      	uxth	r3, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	f000 80d1 	beq.w	8013a14 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8013872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013876:	2b00      	cmp	r3, #0
 8013878:	f000 80cc 	beq.w	8013a14 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013884:	e853 3f00 	ldrex	r3, [r3]
 8013888:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801388a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801388c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	461a      	mov	r2, r3
 801389a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801389e:	647b      	str	r3, [r7, #68]	@ 0x44
 80138a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80138a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138a6:	e841 2300 	strex	r3, r2, [r1]
 80138aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80138ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1e4      	bne.n	801387c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	3308      	adds	r3, #8
 80138b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138bc:	e853 3f00 	ldrex	r3, [r3]
 80138c0:	623b      	str	r3, [r7, #32]
   return(result);
 80138c2:	6a3b      	ldr	r3, [r7, #32]
 80138c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80138c8:	f023 0301 	bic.w	r3, r3, #1
 80138cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3308      	adds	r3, #8
 80138d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80138da:	633a      	str	r2, [r7, #48]	@ 0x30
 80138dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138e2:	e841 2300 	strex	r3, r2, [r1]
 80138e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80138e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d1e1      	bne.n	80138b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2220      	movs	r2, #32
 80138f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2200      	movs	r2, #0
 8013900:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	e853 3f00 	ldrex	r3, [r3]
 801390e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f023 0310 	bic.w	r3, r3, #16
 8013916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	461a      	mov	r2, r3
 8013920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013924:	61fb      	str	r3, [r7, #28]
 8013926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013928:	69b9      	ldr	r1, [r7, #24]
 801392a:	69fa      	ldr	r2, [r7, #28]
 801392c:	e841 2300 	strex	r3, r2, [r1]
 8013930:	617b      	str	r3, [r7, #20]
   return(result);
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d1e4      	bne.n	8013902 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2202      	movs	r2, #2
 801393c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801393e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013942:	4619      	mov	r1, r3
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f000 f87f 	bl	8013a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801394a:	e063      	b.n	8013a14 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00e      	beq.n	8013976 <HAL_UART_IRQHandler+0x59e>
 8013958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801395c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013960:	2b00      	cmp	r3, #0
 8013962:	d008      	beq.n	8013976 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801396c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 fcf8 	bl	8014364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013974:	e051      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801397e:	2b00      	cmp	r3, #0
 8013980:	d014      	beq.n	80139ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801398a:	2b00      	cmp	r3, #0
 801398c:	d105      	bne.n	801399a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013996:	2b00      	cmp	r3, #0
 8013998:	d008      	beq.n	80139ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d03a      	beq.n	8013a18 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	4798      	blx	r3
    }
    return;
 80139aa:	e035      	b.n	8013a18 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80139ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80139b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d009      	beq.n	80139cc <HAL_UART_IRQHandler+0x5f4>
 80139b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80139bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d003      	beq.n	80139cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 fca2 	bl	801430e <UART_EndTransmit_IT>
    return;
 80139ca:	e026      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80139cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80139d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d009      	beq.n	80139ec <HAL_UART_IRQHandler+0x614>
 80139d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80139dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d003      	beq.n	80139ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fcd1 	bl	801438c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80139ea:	e016      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80139ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80139f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d010      	beq.n	8013a1a <HAL_UART_IRQHandler+0x642>
 80139f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	da0c      	bge.n	8013a1a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 fcb9 	bl	8014378 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013a06:	e008      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
      return;
 8013a08:	bf00      	nop
 8013a0a:	e006      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
    return;
 8013a0c:	bf00      	nop
 8013a0e:	e004      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
      return;
 8013a10:	bf00      	nop
 8013a12:	e002      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
      return;
 8013a14:	bf00      	nop
 8013a16:	e000      	b.n	8013a1a <HAL_UART_IRQHandler+0x642>
    return;
 8013a18:	bf00      	nop
  }
}
 8013a1a:	37e8      	adds	r7, #232	@ 0xe8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b083      	sub	sp, #12
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013a28:	bf00      	nop
 8013a2a:	370c      	adds	r7, #12
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b083      	sub	sp, #12
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013a3c:	bf00      	nop
 8013a3e:	370c      	adds	r7, #12
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013a54:	bf00      	nop
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a64:	b08c      	sub	sp, #48	@ 0x30
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	689a      	ldr	r2, [r3, #8]
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	431a      	orrs	r2, r3
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	695b      	ldr	r3, [r3, #20]
 8013a7e:	431a      	orrs	r2, r3
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	69db      	ldr	r3, [r3, #28]
 8013a84:	4313      	orrs	r3, r2
 8013a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	4baf      	ldr	r3, [pc, #700]	@ (8013d4c <UART_SetConfig+0x2ec>)
 8013a90:	4013      	ands	r3, r2
 8013a92:	697a      	ldr	r2, [r7, #20]
 8013a94:	6812      	ldr	r2, [r2, #0]
 8013a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013a98:	430b      	orrs	r3, r1
 8013a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	68da      	ldr	r2, [r3, #12]
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	430a      	orrs	r2, r1
 8013ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	699b      	ldr	r3, [r3, #24]
 8013ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	4aa4      	ldr	r2, [pc, #656]	@ (8013d50 <UART_SetConfig+0x2f0>)
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d004      	beq.n	8013acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	6a1b      	ldr	r3, [r3, #32]
 8013ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8013ad6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	6812      	ldr	r2, [r2, #0]
 8013ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ae0:	430b      	orrs	r3, r1
 8013ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aea:	f023 010f 	bic.w	r1, r3, #15
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	430a      	orrs	r2, r1
 8013af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4a95      	ldr	r2, [pc, #596]	@ (8013d54 <UART_SetConfig+0x2f4>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d125      	bne.n	8013b50 <UART_SetConfig+0xf0>
 8013b04:	2003      	movs	r0, #3
 8013b06:	f7ff fb69 	bl	80131dc <LL_RCC_GetUSARTClockSource>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b03      	cmp	r3, #3
 8013b0e:	d81b      	bhi.n	8013b48 <UART_SetConfig+0xe8>
 8013b10:	a201      	add	r2, pc, #4	@ (adr r2, 8013b18 <UART_SetConfig+0xb8>)
 8013b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b16:	bf00      	nop
 8013b18:	08013b29 	.word	0x08013b29
 8013b1c:	08013b39 	.word	0x08013b39
 8013b20:	08013b31 	.word	0x08013b31
 8013b24:	08013b41 	.word	0x08013b41
 8013b28:	2301      	movs	r3, #1
 8013b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b2e:	e042      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b30:	2302      	movs	r3, #2
 8013b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b36:	e03e      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b38:	2304      	movs	r3, #4
 8013b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b3e:	e03a      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b40:	2308      	movs	r3, #8
 8013b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b46:	e036      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b48:	2310      	movs	r3, #16
 8013b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b4e:	e032      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a7e      	ldr	r2, [pc, #504]	@ (8013d50 <UART_SetConfig+0x2f0>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d12a      	bne.n	8013bb0 <UART_SetConfig+0x150>
 8013b5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8013b5e:	f7ff fb4d 	bl	80131fc <LL_RCC_GetLPUARTClockSource>
 8013b62:	4603      	mov	r3, r0
 8013b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013b68:	d01a      	beq.n	8013ba0 <UART_SetConfig+0x140>
 8013b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013b6e:	d81b      	bhi.n	8013ba8 <UART_SetConfig+0x148>
 8013b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013b74:	d00c      	beq.n	8013b90 <UART_SetConfig+0x130>
 8013b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013b7a:	d815      	bhi.n	8013ba8 <UART_SetConfig+0x148>
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d003      	beq.n	8013b88 <UART_SetConfig+0x128>
 8013b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013b84:	d008      	beq.n	8013b98 <UART_SetConfig+0x138>
 8013b86:	e00f      	b.n	8013ba8 <UART_SetConfig+0x148>
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b8e:	e012      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b90:	2302      	movs	r3, #2
 8013b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b96:	e00e      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013b98:	2304      	movs	r3, #4
 8013b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013b9e:	e00a      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013ba0:	2308      	movs	r3, #8
 8013ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013ba6:	e006      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013ba8:	2310      	movs	r3, #16
 8013baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013bae:	e002      	b.n	8013bb6 <UART_SetConfig+0x156>
 8013bb0:	2310      	movs	r3, #16
 8013bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4a65      	ldr	r2, [pc, #404]	@ (8013d50 <UART_SetConfig+0x2f0>)
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	f040 8097 	bne.w	8013cf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013bc6:	2b08      	cmp	r3, #8
 8013bc8:	d823      	bhi.n	8013c12 <UART_SetConfig+0x1b2>
 8013bca:	a201      	add	r2, pc, #4	@ (adr r2, 8013bd0 <UART_SetConfig+0x170>)
 8013bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd0:	08013bf5 	.word	0x08013bf5
 8013bd4:	08013c13 	.word	0x08013c13
 8013bd8:	08013bfd 	.word	0x08013bfd
 8013bdc:	08013c13 	.word	0x08013c13
 8013be0:	08013c03 	.word	0x08013c03
 8013be4:	08013c13 	.word	0x08013c13
 8013be8:	08013c13 	.word	0x08013c13
 8013bec:	08013c13 	.word	0x08013c13
 8013bf0:	08013c0b 	.word	0x08013c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013bf4:	f7fc fd70 	bl	80106d8 <HAL_RCC_GetPCLK1Freq>
 8013bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013bfa:	e010      	b.n	8013c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013bfc:	4b56      	ldr	r3, [pc, #344]	@ (8013d58 <UART_SetConfig+0x2f8>)
 8013bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013c00:	e00d      	b.n	8013c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013c02:	f7fc fce9 	bl	80105d8 <HAL_RCC_GetSysClockFreq>
 8013c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013c08:	e009      	b.n	8013c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013c10:	e005      	b.n	8013c1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8013c12:	2300      	movs	r3, #0
 8013c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013c16:	2301      	movs	r3, #1
 8013c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 812b 	beq.w	8013e7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8013d5c <UART_SetConfig+0x2fc>)
 8013c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c30:	461a      	mov	r2, r3
 8013c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	4613      	mov	r3, r2
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	4413      	add	r3, r2
 8013c44:	69ba      	ldr	r2, [r7, #24]
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d305      	bcc.n	8013c56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c50:	69ba      	ldr	r2, [r7, #24]
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d903      	bls.n	8013c5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8013c56:	2301      	movs	r3, #1
 8013c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013c5c:	e10e      	b.n	8013e7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c60:	2200      	movs	r2, #0
 8013c62:	60bb      	str	r3, [r7, #8]
 8013c64:	60fa      	str	r2, [r7, #12]
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8013d5c <UART_SetConfig+0x2fc>)
 8013c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	2200      	movs	r2, #0
 8013c74:	603b      	str	r3, [r7, #0]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013c80:	f7ed f83a 	bl	8000cf8 <__aeabi_uldivmod>
 8013c84:	4602      	mov	r2, r0
 8013c86:	460b      	mov	r3, r1
 8013c88:	4610      	mov	r0, r2
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	f04f 0200 	mov.w	r2, #0
 8013c90:	f04f 0300 	mov.w	r3, #0
 8013c94:	020b      	lsls	r3, r1, #8
 8013c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013c9a:	0202      	lsls	r2, r0, #8
 8013c9c:	6979      	ldr	r1, [r7, #20]
 8013c9e:	6849      	ldr	r1, [r1, #4]
 8013ca0:	0849      	lsrs	r1, r1, #1
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	460c      	mov	r4, r1
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	eb12 0804 	adds.w	r8, r2, r4
 8013cac:	eb43 0905 	adc.w	r9, r3, r5
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	469a      	mov	sl, r3
 8013cb8:	4693      	mov	fp, r2
 8013cba:	4652      	mov	r2, sl
 8013cbc:	465b      	mov	r3, fp
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	4649      	mov	r1, r9
 8013cc2:	f7ed f819 	bl	8000cf8 <__aeabi_uldivmod>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	4613      	mov	r3, r2
 8013ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013cce:	6a3b      	ldr	r3, [r7, #32]
 8013cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013cd4:	d308      	bcc.n	8013ce8 <UART_SetConfig+0x288>
 8013cd6:	6a3b      	ldr	r3, [r7, #32]
 8013cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013cdc:	d204      	bcs.n	8013ce8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	6a3a      	ldr	r2, [r7, #32]
 8013ce4:	60da      	str	r2, [r3, #12]
 8013ce6:	e0c9      	b.n	8013e7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013cee:	e0c5      	b.n	8013e7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	69db      	ldr	r3, [r3, #28]
 8013cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013cf8:	d16d      	bne.n	8013dd6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8013cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013cfe:	3b01      	subs	r3, #1
 8013d00:	2b07      	cmp	r3, #7
 8013d02:	d82d      	bhi.n	8013d60 <UART_SetConfig+0x300>
 8013d04:	a201      	add	r2, pc, #4	@ (adr r2, 8013d0c <UART_SetConfig+0x2ac>)
 8013d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d0a:	bf00      	nop
 8013d0c:	08013d2d 	.word	0x08013d2d
 8013d10:	08013d35 	.word	0x08013d35
 8013d14:	08013d61 	.word	0x08013d61
 8013d18:	08013d3b 	.word	0x08013d3b
 8013d1c:	08013d61 	.word	0x08013d61
 8013d20:	08013d61 	.word	0x08013d61
 8013d24:	08013d61 	.word	0x08013d61
 8013d28:	08013d43 	.word	0x08013d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013d2c:	f7fc fcea 	bl	8010704 <HAL_RCC_GetPCLK2Freq>
 8013d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013d32:	e01b      	b.n	8013d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013d34:	4b08      	ldr	r3, [pc, #32]	@ (8013d58 <UART_SetConfig+0x2f8>)
 8013d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013d38:	e018      	b.n	8013d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013d3a:	f7fc fc4d 	bl	80105d8 <HAL_RCC_GetSysClockFreq>
 8013d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013d40:	e014      	b.n	8013d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013d48:	e010      	b.n	8013d6c <UART_SetConfig+0x30c>
 8013d4a:	bf00      	nop
 8013d4c:	cfff69f3 	.word	0xcfff69f3
 8013d50:	40008000 	.word	0x40008000
 8013d54:	40013800 	.word	0x40013800
 8013d58:	00f42400 	.word	0x00f42400
 8013d5c:	0801a85c 	.word	0x0801a85c
      default:
        pclk = 0U;
 8013d60:	2300      	movs	r3, #0
 8013d62:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013d64:	2301      	movs	r3, #1
 8013d66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	f000 8084 	beq.w	8013e7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d78:	4a4b      	ldr	r2, [pc, #300]	@ (8013ea8 <UART_SetConfig+0x448>)
 8013d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d7e:	461a      	mov	r2, r3
 8013d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d86:	005a      	lsls	r2, r3, #1
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	085b      	lsrs	r3, r3, #1
 8013d8e:	441a      	add	r2, r3
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013d9a:	6a3b      	ldr	r3, [r7, #32]
 8013d9c:	2b0f      	cmp	r3, #15
 8013d9e:	d916      	bls.n	8013dce <UART_SetConfig+0x36e>
 8013da0:	6a3b      	ldr	r3, [r7, #32]
 8013da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013da6:	d212      	bcs.n	8013dce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013da8:	6a3b      	ldr	r3, [r7, #32]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	f023 030f 	bic.w	r3, r3, #15
 8013db0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013db2:	6a3b      	ldr	r3, [r7, #32]
 8013db4:	085b      	lsrs	r3, r3, #1
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	f003 0307 	and.w	r3, r3, #7
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	8bfb      	ldrh	r3, [r7, #30]
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	8bfa      	ldrh	r2, [r7, #30]
 8013dca:	60da      	str	r2, [r3, #12]
 8013dcc:	e056      	b.n	8013e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013dd4:	e052      	b.n	8013e7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	2b07      	cmp	r3, #7
 8013dde:	d822      	bhi.n	8013e26 <UART_SetConfig+0x3c6>
 8013de0:	a201      	add	r2, pc, #4	@ (adr r2, 8013de8 <UART_SetConfig+0x388>)
 8013de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013de6:	bf00      	nop
 8013de8:	08013e09 	.word	0x08013e09
 8013dec:	08013e11 	.word	0x08013e11
 8013df0:	08013e27 	.word	0x08013e27
 8013df4:	08013e17 	.word	0x08013e17
 8013df8:	08013e27 	.word	0x08013e27
 8013dfc:	08013e27 	.word	0x08013e27
 8013e00:	08013e27 	.word	0x08013e27
 8013e04:	08013e1f 	.word	0x08013e1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013e08:	f7fc fc7c 	bl	8010704 <HAL_RCC_GetPCLK2Freq>
 8013e0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013e0e:	e010      	b.n	8013e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013e10:	4b26      	ldr	r3, [pc, #152]	@ (8013eac <UART_SetConfig+0x44c>)
 8013e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013e14:	e00d      	b.n	8013e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013e16:	f7fc fbdf 	bl	80105d8 <HAL_RCC_GetSysClockFreq>
 8013e1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8013e1c:	e009      	b.n	8013e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8013e24:	e005      	b.n	8013e32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8013e26:	2300      	movs	r3, #0
 8013e28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8013e30:	bf00      	nop
    }

    if (pclk != 0U)
 8013e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d021      	beq.n	8013e7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8013ea8 <UART_SetConfig+0x448>)
 8013e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e42:	461a      	mov	r2, r3
 8013e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	085b      	lsrs	r3, r3, #1
 8013e50:	441a      	add	r2, r3
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013e5c:	6a3b      	ldr	r3, [r7, #32]
 8013e5e:	2b0f      	cmp	r3, #15
 8013e60:	d909      	bls.n	8013e76 <UART_SetConfig+0x416>
 8013e62:	6a3b      	ldr	r3, [r7, #32]
 8013e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e68:	d205      	bcs.n	8013e76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013e6a:	6a3b      	ldr	r3, [r7, #32]
 8013e6c:	b29a      	uxth	r2, r3
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	60da      	str	r2, [r3, #12]
 8013e74:	e002      	b.n	8013e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8013e76:	2301      	movs	r3, #1
 8013e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	2201      	movs	r2, #1
 8013e88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2200      	movs	r2, #0
 8013e96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013e98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3730      	adds	r7, #48	@ 0x30
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013ea6:	bf00      	nop
 8013ea8:	0801a85c 	.word	0x0801a85c
 8013eac:	00f42400 	.word	0x00f42400

08013eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00a      	beq.n	8013eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	430a      	orrs	r2, r1
 8013ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ede:	f003 0302 	and.w	r3, r3, #2
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d00a      	beq.n	8013efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	430a      	orrs	r2, r1
 8013efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f00:	f003 0304 	and.w	r3, r3, #4
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00a      	beq.n	8013f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	430a      	orrs	r2, r1
 8013f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f22:	f003 0308 	and.w	r3, r3, #8
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d00a      	beq.n	8013f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	430a      	orrs	r2, r1
 8013f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f44:	f003 0310 	and.w	r3, r3, #16
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00a      	beq.n	8013f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	430a      	orrs	r2, r1
 8013f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f66:	f003 0320 	and.w	r3, r3, #32
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00a      	beq.n	8013f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	430a      	orrs	r2, r1
 8013f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d01a      	beq.n	8013fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	430a      	orrs	r2, r1
 8013fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013fae:	d10a      	bne.n	8013fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	430a      	orrs	r2, r1
 8013fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00a      	beq.n	8013fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	430a      	orrs	r2, r1
 8013fe6:	605a      	str	r2, [r3, #4]
  }
}
 8013fe8:	bf00      	nop
 8013fea:	370c      	adds	r7, #12
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr

08013ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b098      	sub	sp, #96	@ 0x60
 8013ff8:	af02      	add	r7, sp, #8
 8013ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014004:	f7fa fb54 	bl	800e6b0 <HAL_GetTick>
 8014008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f003 0308 	and.w	r3, r3, #8
 8014014:	2b08      	cmp	r3, #8
 8014016:	d12f      	bne.n	8014078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014020:	2200      	movs	r2, #0
 8014022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 f88e 	bl	8014148 <UART_WaitOnFlagUntilTimeout>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	d022      	beq.n	8014078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801403a:	e853 3f00 	ldrex	r3, [r3]
 801403e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014046:	653b      	str	r3, [r7, #80]	@ 0x50
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	461a      	mov	r2, r3
 801404e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014050:	647b      	str	r3, [r7, #68]	@ 0x44
 8014052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014058:	e841 2300 	strex	r3, r2, [r1]
 801405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1e6      	bne.n	8014032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2220      	movs	r2, #32
 8014068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2200      	movs	r2, #0
 8014070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014074:	2303      	movs	r3, #3
 8014076:	e063      	b.n	8014140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f003 0304 	and.w	r3, r3, #4
 8014082:	2b04      	cmp	r3, #4
 8014084:	d149      	bne.n	801411a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801408a:	9300      	str	r3, [sp, #0]
 801408c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408e:	2200      	movs	r2, #0
 8014090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 f857 	bl	8014148 <UART_WaitOnFlagUntilTimeout>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d03c      	beq.n	801411a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a8:	e853 3f00 	ldrex	r3, [r3]
 80140ac:	623b      	str	r3, [r7, #32]
   return(result);
 80140ae:	6a3b      	ldr	r3, [r7, #32]
 80140b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80140b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	461a      	mov	r2, r3
 80140bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140be:	633b      	str	r3, [r7, #48]	@ 0x30
 80140c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80140c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140c6:	e841 2300 	strex	r3, r2, [r1]
 80140ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80140cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d1e6      	bne.n	80140a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	3308      	adds	r3, #8
 80140d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	e853 3f00 	ldrex	r3, [r3]
 80140e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	f023 0301 	bic.w	r3, r3, #1
 80140e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	3308      	adds	r3, #8
 80140f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80140f2:	61fa      	str	r2, [r7, #28]
 80140f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140f6:	69b9      	ldr	r1, [r7, #24]
 80140f8:	69fa      	ldr	r2, [r7, #28]
 80140fa:	e841 2300 	strex	r3, r2, [r1]
 80140fe:	617b      	str	r3, [r7, #20]
   return(result);
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d1e5      	bne.n	80140d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2220      	movs	r2, #32
 801410a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2200      	movs	r2, #0
 8014112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014116:	2303      	movs	r3, #3
 8014118:	e012      	b.n	8014140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2220      	movs	r2, #32
 801411e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2220      	movs	r2, #32
 8014126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2200      	movs	r2, #0
 801412e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2200      	movs	r2, #0
 8014134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801413e:	2300      	movs	r3, #0
}
 8014140:	4618      	mov	r0, r3
 8014142:	3758      	adds	r7, #88	@ 0x58
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	603b      	str	r3, [r7, #0]
 8014154:	4613      	mov	r3, r2
 8014156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014158:	e049      	b.n	80141ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801415a:	69bb      	ldr	r3, [r7, #24]
 801415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014160:	d045      	beq.n	80141ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014162:	f7fa faa5 	bl	800e6b0 <HAL_GetTick>
 8014166:	4602      	mov	r2, r0
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	69ba      	ldr	r2, [r7, #24]
 801416e:	429a      	cmp	r2, r3
 8014170:	d302      	bcc.n	8014178 <UART_WaitOnFlagUntilTimeout+0x30>
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d101      	bne.n	801417c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014178:	2303      	movs	r3, #3
 801417a:	e048      	b.n	801420e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f003 0304 	and.w	r3, r3, #4
 8014186:	2b00      	cmp	r3, #0
 8014188:	d031      	beq.n	80141ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	69db      	ldr	r3, [r3, #28]
 8014190:	f003 0308 	and.w	r3, r3, #8
 8014194:	2b08      	cmp	r3, #8
 8014196:	d110      	bne.n	80141ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2208      	movs	r2, #8
 801419e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80141a0:	68f8      	ldr	r0, [r7, #12]
 80141a2:	f000 f838 	bl	8014216 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	2208      	movs	r2, #8
 80141aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	2200      	movs	r2, #0
 80141b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80141b6:	2301      	movs	r3, #1
 80141b8:	e029      	b.n	801420e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	69db      	ldr	r3, [r3, #28]
 80141c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80141c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80141c8:	d111      	bne.n	80141ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80141d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f000 f81e 	bl	8014216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2220      	movs	r2, #32
 80141de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80141ea:	2303      	movs	r3, #3
 80141ec:	e00f      	b.n	801420e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	69da      	ldr	r2, [r3, #28]
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	4013      	ands	r3, r2
 80141f8:	68ba      	ldr	r2, [r7, #8]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	bf0c      	ite	eq
 80141fe:	2301      	moveq	r3, #1
 8014200:	2300      	movne	r3, #0
 8014202:	b2db      	uxtb	r3, r3
 8014204:	461a      	mov	r2, r3
 8014206:	79fb      	ldrb	r3, [r7, #7]
 8014208:	429a      	cmp	r2, r3
 801420a:	d0a6      	beq.n	801415a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801420c:	2300      	movs	r3, #0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014216:	b480      	push	{r7}
 8014218:	b095      	sub	sp, #84	@ 0x54
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014226:	e853 3f00 	ldrex	r3, [r3]
 801422a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	461a      	mov	r2, r3
 801423a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801423c:	643b      	str	r3, [r7, #64]	@ 0x40
 801423e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014244:	e841 2300 	strex	r3, r2, [r1]
 8014248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1e6      	bne.n	801421e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	3308      	adds	r3, #8
 8014256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014258:	6a3b      	ldr	r3, [r7, #32]
 801425a:	e853 3f00 	ldrex	r3, [r3]
 801425e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014266:	f023 0301 	bic.w	r3, r3, #1
 801426a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	3308      	adds	r3, #8
 8014272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801427a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801427c:	e841 2300 	strex	r3, r2, [r1]
 8014280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014284:	2b00      	cmp	r3, #0
 8014286:	d1e3      	bne.n	8014250 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801428c:	2b01      	cmp	r3, #1
 801428e:	d118      	bne.n	80142c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	e853 3f00 	ldrex	r3, [r3]
 801429c:	60bb      	str	r3, [r7, #8]
   return(result);
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	f023 0310 	bic.w	r3, r3, #16
 80142a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	461a      	mov	r2, r3
 80142ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142ae:	61bb      	str	r3, [r7, #24]
 80142b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142b2:	6979      	ldr	r1, [r7, #20]
 80142b4:	69ba      	ldr	r2, [r7, #24]
 80142b6:	e841 2300 	strex	r3, r2, [r1]
 80142ba:	613b      	str	r3, [r7, #16]
   return(result);
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1e6      	bne.n	8014290 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2220      	movs	r2, #32
 80142c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2200      	movs	r2, #0
 80142ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80142d6:	bf00      	nop
 80142d8:	3754      	adds	r7, #84	@ 0x54
 80142da:	46bd      	mov	sp, r7
 80142dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e0:	4770      	bx	lr

080142e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b084      	sub	sp, #16
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	2200      	movs	r2, #0
 80142f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f7ff fb97 	bl	8013a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014306:	bf00      	nop
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}

0801430e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801430e:	b580      	push	{r7, lr}
 8014310:	b088      	sub	sp, #32
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	e853 3f00 	ldrex	r3, [r3]
 8014322:	60bb      	str	r3, [r7, #8]
   return(result);
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801432a:	61fb      	str	r3, [r7, #28]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	461a      	mov	r2, r3
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	61bb      	str	r3, [r7, #24]
 8014336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014338:	6979      	ldr	r1, [r7, #20]
 801433a:	69ba      	ldr	r2, [r7, #24]
 801433c:	e841 2300 	strex	r3, r2, [r1]
 8014340:	613b      	str	r3, [r7, #16]
   return(result);
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d1e6      	bne.n	8014316 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2220      	movs	r2, #32
 801434c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2200      	movs	r2, #0
 8014354:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f7ff fb62 	bl	8013a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801435c:	bf00      	nop
 801435e:	3720      	adds	r7, #32
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}

08014364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014364:	b480      	push	{r7}
 8014366:	b083      	sub	sp, #12
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801436c:	bf00      	nop
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014378:	b480      	push	{r7}
 801437a:	b083      	sub	sp, #12
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014380:	bf00      	nop
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr

0801438c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801438c:	b480      	push	{r7}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014394:	bf00      	nop
 8014396:	370c      	adds	r7, #12
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr

080143a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d101      	bne.n	80143b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80143b2:	2302      	movs	r3, #2
 80143b4:	e027      	b.n	8014406 <HAL_UARTEx_DisableFifoMode+0x66>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2201      	movs	r2, #1
 80143ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2224      	movs	r2, #36	@ 0x24
 80143c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f022 0201 	bic.w	r2, r2, #1
 80143dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80143e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	68fa      	ldr	r2, [r7, #12]
 80143f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2220      	movs	r2, #32
 80143f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2200      	movs	r2, #0
 8014400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014404:	2300      	movs	r3, #0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3714      	adds	r7, #20
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr

08014412 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014412:	b580      	push	{r7, lr}
 8014414:	b084      	sub	sp, #16
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
 801441a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014422:	2b01      	cmp	r3, #1
 8014424:	d101      	bne.n	801442a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014426:	2302      	movs	r3, #2
 8014428:	e02d      	b.n	8014486 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2201      	movs	r2, #1
 801442e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2224      	movs	r2, #36	@ 0x24
 8014436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	f022 0201 	bic.w	r2, r2, #1
 8014450:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	689b      	ldr	r3, [r3, #8]
 8014458:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	430a      	orrs	r2, r1
 8014464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 f850 	bl	801450c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2220      	movs	r2, #32
 8014478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2200      	movs	r2, #0
 8014480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b084      	sub	sp, #16
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
 8014496:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d101      	bne.n	80144a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80144a2:	2302      	movs	r3, #2
 80144a4:	e02d      	b.n	8014502 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2201      	movs	r2, #1
 80144aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2224      	movs	r2, #36	@ 0x24
 80144b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	f022 0201 	bic.w	r2, r2, #1
 80144cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	683a      	ldr	r2, [r7, #0]
 80144de:	430a      	orrs	r2, r1
 80144e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f000 f812 	bl	801450c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	68fa      	ldr	r2, [r7, #12]
 80144ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2220      	movs	r2, #32
 80144f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2200      	movs	r2, #0
 80144fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3710      	adds	r7, #16
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
	...

0801450c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801450c:	b480      	push	{r7}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014518:	2b00      	cmp	r3, #0
 801451a:	d108      	bne.n	801452e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2201      	movs	r2, #1
 8014520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2201      	movs	r2, #1
 8014528:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801452c:	e031      	b.n	8014592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801452e:	2308      	movs	r3, #8
 8014530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014532:	2308      	movs	r3, #8
 8014534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	689b      	ldr	r3, [r3, #8]
 801453c:	0e5b      	lsrs	r3, r3, #25
 801453e:	b2db      	uxtb	r3, r3
 8014540:	f003 0307 	and.w	r3, r3, #7
 8014544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	0f5b      	lsrs	r3, r3, #29
 801454e:	b2db      	uxtb	r3, r3
 8014550:	f003 0307 	and.w	r3, r3, #7
 8014554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014556:	7bbb      	ldrb	r3, [r7, #14]
 8014558:	7b3a      	ldrb	r2, [r7, #12]
 801455a:	4911      	ldr	r1, [pc, #68]	@ (80145a0 <UARTEx_SetNbDataToProcess+0x94>)
 801455c:	5c8a      	ldrb	r2, [r1, r2]
 801455e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014562:	7b3a      	ldrb	r2, [r7, #12]
 8014564:	490f      	ldr	r1, [pc, #60]	@ (80145a4 <UARTEx_SetNbDataToProcess+0x98>)
 8014566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014568:	fb93 f3f2 	sdiv	r3, r3, r2
 801456c:	b29a      	uxth	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014574:	7bfb      	ldrb	r3, [r7, #15]
 8014576:	7b7a      	ldrb	r2, [r7, #13]
 8014578:	4909      	ldr	r1, [pc, #36]	@ (80145a0 <UARTEx_SetNbDataToProcess+0x94>)
 801457a:	5c8a      	ldrb	r2, [r1, r2]
 801457c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014580:	7b7a      	ldrb	r2, [r7, #13]
 8014582:	4908      	ldr	r1, [pc, #32]	@ (80145a4 <UARTEx_SetNbDataToProcess+0x98>)
 8014584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014586:	fb93 f3f2 	sdiv	r3, r3, r2
 801458a:	b29a      	uxth	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014592:	bf00      	nop
 8014594:	3714      	adds	r7, #20
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	0801a874 	.word	0x0801a874
 80145a4:	0801a87c 	.word	0x0801a87c

080145a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b085      	sub	sp, #20
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80145b0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80145b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80145bc:	b29a      	uxth	r2, r3
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	43db      	mvns	r3, r3
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	4013      	ands	r3, r2
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3714      	adds	r7, #20
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80145de:	b084      	sub	sp, #16
 80145e0:	b480      	push	{r7}
 80145e2:	b083      	sub	sp, #12
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	f107 0014 	add.w	r0, r7, #20
 80145ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2201      	movs	r2, #1
 80145f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2200      	movs	r2, #0
 80145fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2200      	movs	r2, #0
 8014604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8014610:	2300      	movs	r3, #0
}
 8014612:	4618      	mov	r0, r3
 8014614:	370c      	adds	r7, #12
 8014616:	46bd      	mov	sp, r7
 8014618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461c:	b004      	add	sp, #16
 801461e:	4770      	bx	lr

08014620 <rand>:
 8014620:	4b16      	ldr	r3, [pc, #88]	@ (801467c <rand+0x5c>)
 8014622:	b510      	push	{r4, lr}
 8014624:	681c      	ldr	r4, [r3, #0]
 8014626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014628:	b9b3      	cbnz	r3, 8014658 <rand+0x38>
 801462a:	2018      	movs	r0, #24
 801462c:	f002 fbde 	bl	8016dec <malloc>
 8014630:	4602      	mov	r2, r0
 8014632:	6320      	str	r0, [r4, #48]	@ 0x30
 8014634:	b920      	cbnz	r0, 8014640 <rand+0x20>
 8014636:	4b12      	ldr	r3, [pc, #72]	@ (8014680 <rand+0x60>)
 8014638:	4812      	ldr	r0, [pc, #72]	@ (8014684 <rand+0x64>)
 801463a:	2152      	movs	r1, #82	@ 0x52
 801463c:	f001 fcc8 	bl	8015fd0 <__assert_func>
 8014640:	4911      	ldr	r1, [pc, #68]	@ (8014688 <rand+0x68>)
 8014642:	4b12      	ldr	r3, [pc, #72]	@ (801468c <rand+0x6c>)
 8014644:	e9c0 1300 	strd	r1, r3, [r0]
 8014648:	4b11      	ldr	r3, [pc, #68]	@ (8014690 <rand+0x70>)
 801464a:	6083      	str	r3, [r0, #8]
 801464c:	230b      	movs	r3, #11
 801464e:	8183      	strh	r3, [r0, #12]
 8014650:	2100      	movs	r1, #0
 8014652:	2001      	movs	r0, #1
 8014654:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014658:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801465a:	480e      	ldr	r0, [pc, #56]	@ (8014694 <rand+0x74>)
 801465c:	690b      	ldr	r3, [r1, #16]
 801465e:	694c      	ldr	r4, [r1, #20]
 8014660:	4a0d      	ldr	r2, [pc, #52]	@ (8014698 <rand+0x78>)
 8014662:	4358      	muls	r0, r3
 8014664:	fb02 0004 	mla	r0, r2, r4, r0
 8014668:	fba3 3202 	umull	r3, r2, r3, r2
 801466c:	3301      	adds	r3, #1
 801466e:	eb40 0002 	adc.w	r0, r0, r2
 8014672:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014676:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801467a:	bd10      	pop	{r4, pc}
 801467c:	20000038 	.word	0x20000038
 8014680:	0801a884 	.word	0x0801a884
 8014684:	0801a89b 	.word	0x0801a89b
 8014688:	abcd330e 	.word	0xabcd330e
 801468c:	e66d1234 	.word	0xe66d1234
 8014690:	0005deec 	.word	0x0005deec
 8014694:	5851f42d 	.word	0x5851f42d
 8014698:	4c957f2d 	.word	0x4c957f2d

0801469c <__cvt>:
 801469c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146a0:	ec57 6b10 	vmov	r6, r7, d0
 80146a4:	2f00      	cmp	r7, #0
 80146a6:	460c      	mov	r4, r1
 80146a8:	4619      	mov	r1, r3
 80146aa:	463b      	mov	r3, r7
 80146ac:	bfbb      	ittet	lt
 80146ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80146b2:	461f      	movlt	r7, r3
 80146b4:	2300      	movge	r3, #0
 80146b6:	232d      	movlt	r3, #45	@ 0x2d
 80146b8:	700b      	strb	r3, [r1, #0]
 80146ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80146c0:	4691      	mov	r9, r2
 80146c2:	f023 0820 	bic.w	r8, r3, #32
 80146c6:	bfbc      	itt	lt
 80146c8:	4632      	movlt	r2, r6
 80146ca:	4616      	movlt	r6, r2
 80146cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80146d0:	d005      	beq.n	80146de <__cvt+0x42>
 80146d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80146d6:	d100      	bne.n	80146da <__cvt+0x3e>
 80146d8:	3401      	adds	r4, #1
 80146da:	2102      	movs	r1, #2
 80146dc:	e000      	b.n	80146e0 <__cvt+0x44>
 80146de:	2103      	movs	r1, #3
 80146e0:	ab03      	add	r3, sp, #12
 80146e2:	9301      	str	r3, [sp, #4]
 80146e4:	ab02      	add	r3, sp, #8
 80146e6:	9300      	str	r3, [sp, #0]
 80146e8:	ec47 6b10 	vmov	d0, r6, r7
 80146ec:	4653      	mov	r3, sl
 80146ee:	4622      	mov	r2, r4
 80146f0:	f001 fd1e 	bl	8016130 <_dtoa_r>
 80146f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80146f8:	4605      	mov	r5, r0
 80146fa:	d119      	bne.n	8014730 <__cvt+0x94>
 80146fc:	f019 0f01 	tst.w	r9, #1
 8014700:	d00e      	beq.n	8014720 <__cvt+0x84>
 8014702:	eb00 0904 	add.w	r9, r0, r4
 8014706:	2200      	movs	r2, #0
 8014708:	2300      	movs	r3, #0
 801470a:	4630      	mov	r0, r6
 801470c:	4639      	mov	r1, r7
 801470e:	f7ec f9c3 	bl	8000a98 <__aeabi_dcmpeq>
 8014712:	b108      	cbz	r0, 8014718 <__cvt+0x7c>
 8014714:	f8cd 900c 	str.w	r9, [sp, #12]
 8014718:	2230      	movs	r2, #48	@ 0x30
 801471a:	9b03      	ldr	r3, [sp, #12]
 801471c:	454b      	cmp	r3, r9
 801471e:	d31e      	bcc.n	801475e <__cvt+0xc2>
 8014720:	9b03      	ldr	r3, [sp, #12]
 8014722:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014724:	1b5b      	subs	r3, r3, r5
 8014726:	4628      	mov	r0, r5
 8014728:	6013      	str	r3, [r2, #0]
 801472a:	b004      	add	sp, #16
 801472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014730:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014734:	eb00 0904 	add.w	r9, r0, r4
 8014738:	d1e5      	bne.n	8014706 <__cvt+0x6a>
 801473a:	7803      	ldrb	r3, [r0, #0]
 801473c:	2b30      	cmp	r3, #48	@ 0x30
 801473e:	d10a      	bne.n	8014756 <__cvt+0xba>
 8014740:	2200      	movs	r2, #0
 8014742:	2300      	movs	r3, #0
 8014744:	4630      	mov	r0, r6
 8014746:	4639      	mov	r1, r7
 8014748:	f7ec f9a6 	bl	8000a98 <__aeabi_dcmpeq>
 801474c:	b918      	cbnz	r0, 8014756 <__cvt+0xba>
 801474e:	f1c4 0401 	rsb	r4, r4, #1
 8014752:	f8ca 4000 	str.w	r4, [sl]
 8014756:	f8da 3000 	ldr.w	r3, [sl]
 801475a:	4499      	add	r9, r3
 801475c:	e7d3      	b.n	8014706 <__cvt+0x6a>
 801475e:	1c59      	adds	r1, r3, #1
 8014760:	9103      	str	r1, [sp, #12]
 8014762:	701a      	strb	r2, [r3, #0]
 8014764:	e7d9      	b.n	801471a <__cvt+0x7e>

08014766 <__exponent>:
 8014766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014768:	2900      	cmp	r1, #0
 801476a:	bfba      	itte	lt
 801476c:	4249      	neglt	r1, r1
 801476e:	232d      	movlt	r3, #45	@ 0x2d
 8014770:	232b      	movge	r3, #43	@ 0x2b
 8014772:	2909      	cmp	r1, #9
 8014774:	7002      	strb	r2, [r0, #0]
 8014776:	7043      	strb	r3, [r0, #1]
 8014778:	dd29      	ble.n	80147ce <__exponent+0x68>
 801477a:	f10d 0307 	add.w	r3, sp, #7
 801477e:	461d      	mov	r5, r3
 8014780:	270a      	movs	r7, #10
 8014782:	461a      	mov	r2, r3
 8014784:	fbb1 f6f7 	udiv	r6, r1, r7
 8014788:	fb07 1416 	mls	r4, r7, r6, r1
 801478c:	3430      	adds	r4, #48	@ 0x30
 801478e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014792:	460c      	mov	r4, r1
 8014794:	2c63      	cmp	r4, #99	@ 0x63
 8014796:	f103 33ff 	add.w	r3, r3, #4294967295
 801479a:	4631      	mov	r1, r6
 801479c:	dcf1      	bgt.n	8014782 <__exponent+0x1c>
 801479e:	3130      	adds	r1, #48	@ 0x30
 80147a0:	1e94      	subs	r4, r2, #2
 80147a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80147a6:	1c41      	adds	r1, r0, #1
 80147a8:	4623      	mov	r3, r4
 80147aa:	42ab      	cmp	r3, r5
 80147ac:	d30a      	bcc.n	80147c4 <__exponent+0x5e>
 80147ae:	f10d 0309 	add.w	r3, sp, #9
 80147b2:	1a9b      	subs	r3, r3, r2
 80147b4:	42ac      	cmp	r4, r5
 80147b6:	bf88      	it	hi
 80147b8:	2300      	movhi	r3, #0
 80147ba:	3302      	adds	r3, #2
 80147bc:	4403      	add	r3, r0
 80147be:	1a18      	subs	r0, r3, r0
 80147c0:	b003      	add	sp, #12
 80147c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80147c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80147cc:	e7ed      	b.n	80147aa <__exponent+0x44>
 80147ce:	2330      	movs	r3, #48	@ 0x30
 80147d0:	3130      	adds	r1, #48	@ 0x30
 80147d2:	7083      	strb	r3, [r0, #2]
 80147d4:	70c1      	strb	r1, [r0, #3]
 80147d6:	1d03      	adds	r3, r0, #4
 80147d8:	e7f1      	b.n	80147be <__exponent+0x58>
	...

080147dc <_printf_float>:
 80147dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e0:	b08d      	sub	sp, #52	@ 0x34
 80147e2:	460c      	mov	r4, r1
 80147e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80147e8:	4616      	mov	r6, r2
 80147ea:	461f      	mov	r7, r3
 80147ec:	4605      	mov	r5, r0
 80147ee:	f001 fb5f 	bl	8015eb0 <_localeconv_r>
 80147f2:	6803      	ldr	r3, [r0, #0]
 80147f4:	9304      	str	r3, [sp, #16]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7eb fd22 	bl	8000240 <strlen>
 80147fc:	2300      	movs	r3, #0
 80147fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8014800:	f8d8 3000 	ldr.w	r3, [r8]
 8014804:	9005      	str	r0, [sp, #20]
 8014806:	3307      	adds	r3, #7
 8014808:	f023 0307 	bic.w	r3, r3, #7
 801480c:	f103 0208 	add.w	r2, r3, #8
 8014810:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014814:	f8d4 b000 	ldr.w	fp, [r4]
 8014818:	f8c8 2000 	str.w	r2, [r8]
 801481c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014820:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014824:	9307      	str	r3, [sp, #28]
 8014826:	f8cd 8018 	str.w	r8, [sp, #24]
 801482a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801482e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014832:	4b9c      	ldr	r3, [pc, #624]	@ (8014aa4 <_printf_float+0x2c8>)
 8014834:	f04f 32ff 	mov.w	r2, #4294967295
 8014838:	f7ec f960 	bl	8000afc <__aeabi_dcmpun>
 801483c:	bb70      	cbnz	r0, 801489c <_printf_float+0xc0>
 801483e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014842:	4b98      	ldr	r3, [pc, #608]	@ (8014aa4 <_printf_float+0x2c8>)
 8014844:	f04f 32ff 	mov.w	r2, #4294967295
 8014848:	f7ec f93a 	bl	8000ac0 <__aeabi_dcmple>
 801484c:	bb30      	cbnz	r0, 801489c <_printf_float+0xc0>
 801484e:	2200      	movs	r2, #0
 8014850:	2300      	movs	r3, #0
 8014852:	4640      	mov	r0, r8
 8014854:	4649      	mov	r1, r9
 8014856:	f7ec f929 	bl	8000aac <__aeabi_dcmplt>
 801485a:	b110      	cbz	r0, 8014862 <_printf_float+0x86>
 801485c:	232d      	movs	r3, #45	@ 0x2d
 801485e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014862:	4a91      	ldr	r2, [pc, #580]	@ (8014aa8 <_printf_float+0x2cc>)
 8014864:	4b91      	ldr	r3, [pc, #580]	@ (8014aac <_printf_float+0x2d0>)
 8014866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801486a:	bf8c      	ite	hi
 801486c:	4690      	movhi	r8, r2
 801486e:	4698      	movls	r8, r3
 8014870:	2303      	movs	r3, #3
 8014872:	6123      	str	r3, [r4, #16]
 8014874:	f02b 0304 	bic.w	r3, fp, #4
 8014878:	6023      	str	r3, [r4, #0]
 801487a:	f04f 0900 	mov.w	r9, #0
 801487e:	9700      	str	r7, [sp, #0]
 8014880:	4633      	mov	r3, r6
 8014882:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014884:	4621      	mov	r1, r4
 8014886:	4628      	mov	r0, r5
 8014888:	f000 f9d2 	bl	8014c30 <_printf_common>
 801488c:	3001      	adds	r0, #1
 801488e:	f040 808d 	bne.w	80149ac <_printf_float+0x1d0>
 8014892:	f04f 30ff 	mov.w	r0, #4294967295
 8014896:	b00d      	add	sp, #52	@ 0x34
 8014898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489c:	4642      	mov	r2, r8
 801489e:	464b      	mov	r3, r9
 80148a0:	4640      	mov	r0, r8
 80148a2:	4649      	mov	r1, r9
 80148a4:	f7ec f92a 	bl	8000afc <__aeabi_dcmpun>
 80148a8:	b140      	cbz	r0, 80148bc <_printf_float+0xe0>
 80148aa:	464b      	mov	r3, r9
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	bfbc      	itt	lt
 80148b0:	232d      	movlt	r3, #45	@ 0x2d
 80148b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80148b6:	4a7e      	ldr	r2, [pc, #504]	@ (8014ab0 <_printf_float+0x2d4>)
 80148b8:	4b7e      	ldr	r3, [pc, #504]	@ (8014ab4 <_printf_float+0x2d8>)
 80148ba:	e7d4      	b.n	8014866 <_printf_float+0x8a>
 80148bc:	6863      	ldr	r3, [r4, #4]
 80148be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80148c2:	9206      	str	r2, [sp, #24]
 80148c4:	1c5a      	adds	r2, r3, #1
 80148c6:	d13b      	bne.n	8014940 <_printf_float+0x164>
 80148c8:	2306      	movs	r3, #6
 80148ca:	6063      	str	r3, [r4, #4]
 80148cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80148d0:	2300      	movs	r3, #0
 80148d2:	6022      	str	r2, [r4, #0]
 80148d4:	9303      	str	r3, [sp, #12]
 80148d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80148d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80148dc:	ab09      	add	r3, sp, #36	@ 0x24
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	6861      	ldr	r1, [r4, #4]
 80148e2:	ec49 8b10 	vmov	d0, r8, r9
 80148e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80148ea:	4628      	mov	r0, r5
 80148ec:	f7ff fed6 	bl	801469c <__cvt>
 80148f0:	9b06      	ldr	r3, [sp, #24]
 80148f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80148f4:	2b47      	cmp	r3, #71	@ 0x47
 80148f6:	4680      	mov	r8, r0
 80148f8:	d129      	bne.n	801494e <_printf_float+0x172>
 80148fa:	1cc8      	adds	r0, r1, #3
 80148fc:	db02      	blt.n	8014904 <_printf_float+0x128>
 80148fe:	6863      	ldr	r3, [r4, #4]
 8014900:	4299      	cmp	r1, r3
 8014902:	dd41      	ble.n	8014988 <_printf_float+0x1ac>
 8014904:	f1aa 0a02 	sub.w	sl, sl, #2
 8014908:	fa5f fa8a 	uxtb.w	sl, sl
 801490c:	3901      	subs	r1, #1
 801490e:	4652      	mov	r2, sl
 8014910:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014914:	9109      	str	r1, [sp, #36]	@ 0x24
 8014916:	f7ff ff26 	bl	8014766 <__exponent>
 801491a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801491c:	1813      	adds	r3, r2, r0
 801491e:	2a01      	cmp	r2, #1
 8014920:	4681      	mov	r9, r0
 8014922:	6123      	str	r3, [r4, #16]
 8014924:	dc02      	bgt.n	801492c <_printf_float+0x150>
 8014926:	6822      	ldr	r2, [r4, #0]
 8014928:	07d2      	lsls	r2, r2, #31
 801492a:	d501      	bpl.n	8014930 <_printf_float+0x154>
 801492c:	3301      	adds	r3, #1
 801492e:	6123      	str	r3, [r4, #16]
 8014930:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014934:	2b00      	cmp	r3, #0
 8014936:	d0a2      	beq.n	801487e <_printf_float+0xa2>
 8014938:	232d      	movs	r3, #45	@ 0x2d
 801493a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801493e:	e79e      	b.n	801487e <_printf_float+0xa2>
 8014940:	9a06      	ldr	r2, [sp, #24]
 8014942:	2a47      	cmp	r2, #71	@ 0x47
 8014944:	d1c2      	bne.n	80148cc <_printf_float+0xf0>
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1c0      	bne.n	80148cc <_printf_float+0xf0>
 801494a:	2301      	movs	r3, #1
 801494c:	e7bd      	b.n	80148ca <_printf_float+0xee>
 801494e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014952:	d9db      	bls.n	801490c <_printf_float+0x130>
 8014954:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014958:	d118      	bne.n	801498c <_printf_float+0x1b0>
 801495a:	2900      	cmp	r1, #0
 801495c:	6863      	ldr	r3, [r4, #4]
 801495e:	dd0b      	ble.n	8014978 <_printf_float+0x19c>
 8014960:	6121      	str	r1, [r4, #16]
 8014962:	b913      	cbnz	r3, 801496a <_printf_float+0x18e>
 8014964:	6822      	ldr	r2, [r4, #0]
 8014966:	07d0      	lsls	r0, r2, #31
 8014968:	d502      	bpl.n	8014970 <_printf_float+0x194>
 801496a:	3301      	adds	r3, #1
 801496c:	440b      	add	r3, r1
 801496e:	6123      	str	r3, [r4, #16]
 8014970:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014972:	f04f 0900 	mov.w	r9, #0
 8014976:	e7db      	b.n	8014930 <_printf_float+0x154>
 8014978:	b913      	cbnz	r3, 8014980 <_printf_float+0x1a4>
 801497a:	6822      	ldr	r2, [r4, #0]
 801497c:	07d2      	lsls	r2, r2, #31
 801497e:	d501      	bpl.n	8014984 <_printf_float+0x1a8>
 8014980:	3302      	adds	r3, #2
 8014982:	e7f4      	b.n	801496e <_printf_float+0x192>
 8014984:	2301      	movs	r3, #1
 8014986:	e7f2      	b.n	801496e <_printf_float+0x192>
 8014988:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801498c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801498e:	4299      	cmp	r1, r3
 8014990:	db05      	blt.n	801499e <_printf_float+0x1c2>
 8014992:	6823      	ldr	r3, [r4, #0]
 8014994:	6121      	str	r1, [r4, #16]
 8014996:	07d8      	lsls	r0, r3, #31
 8014998:	d5ea      	bpl.n	8014970 <_printf_float+0x194>
 801499a:	1c4b      	adds	r3, r1, #1
 801499c:	e7e7      	b.n	801496e <_printf_float+0x192>
 801499e:	2900      	cmp	r1, #0
 80149a0:	bfd4      	ite	le
 80149a2:	f1c1 0202 	rsble	r2, r1, #2
 80149a6:	2201      	movgt	r2, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	e7e0      	b.n	801496e <_printf_float+0x192>
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	055a      	lsls	r2, r3, #21
 80149b0:	d407      	bmi.n	80149c2 <_printf_float+0x1e6>
 80149b2:	6923      	ldr	r3, [r4, #16]
 80149b4:	4642      	mov	r2, r8
 80149b6:	4631      	mov	r1, r6
 80149b8:	4628      	mov	r0, r5
 80149ba:	47b8      	blx	r7
 80149bc:	3001      	adds	r0, #1
 80149be:	d12b      	bne.n	8014a18 <_printf_float+0x23c>
 80149c0:	e767      	b.n	8014892 <_printf_float+0xb6>
 80149c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80149c6:	f240 80dd 	bls.w	8014b84 <_printf_float+0x3a8>
 80149ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80149ce:	2200      	movs	r2, #0
 80149d0:	2300      	movs	r3, #0
 80149d2:	f7ec f861 	bl	8000a98 <__aeabi_dcmpeq>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d033      	beq.n	8014a42 <_printf_float+0x266>
 80149da:	4a37      	ldr	r2, [pc, #220]	@ (8014ab8 <_printf_float+0x2dc>)
 80149dc:	2301      	movs	r3, #1
 80149de:	4631      	mov	r1, r6
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b8      	blx	r7
 80149e4:	3001      	adds	r0, #1
 80149e6:	f43f af54 	beq.w	8014892 <_printf_float+0xb6>
 80149ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80149ee:	4543      	cmp	r3, r8
 80149f0:	db02      	blt.n	80149f8 <_printf_float+0x21c>
 80149f2:	6823      	ldr	r3, [r4, #0]
 80149f4:	07d8      	lsls	r0, r3, #31
 80149f6:	d50f      	bpl.n	8014a18 <_printf_float+0x23c>
 80149f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149fc:	4631      	mov	r1, r6
 80149fe:	4628      	mov	r0, r5
 8014a00:	47b8      	blx	r7
 8014a02:	3001      	adds	r0, #1
 8014a04:	f43f af45 	beq.w	8014892 <_printf_float+0xb6>
 8014a08:	f04f 0900 	mov.w	r9, #0
 8014a0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a10:	f104 0a1a 	add.w	sl, r4, #26
 8014a14:	45c8      	cmp	r8, r9
 8014a16:	dc09      	bgt.n	8014a2c <_printf_float+0x250>
 8014a18:	6823      	ldr	r3, [r4, #0]
 8014a1a:	079b      	lsls	r3, r3, #30
 8014a1c:	f100 8103 	bmi.w	8014c26 <_printf_float+0x44a>
 8014a20:	68e0      	ldr	r0, [r4, #12]
 8014a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a24:	4298      	cmp	r0, r3
 8014a26:	bfb8      	it	lt
 8014a28:	4618      	movlt	r0, r3
 8014a2a:	e734      	b.n	8014896 <_printf_float+0xba>
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	4652      	mov	r2, sl
 8014a30:	4631      	mov	r1, r6
 8014a32:	4628      	mov	r0, r5
 8014a34:	47b8      	blx	r7
 8014a36:	3001      	adds	r0, #1
 8014a38:	f43f af2b 	beq.w	8014892 <_printf_float+0xb6>
 8014a3c:	f109 0901 	add.w	r9, r9, #1
 8014a40:	e7e8      	b.n	8014a14 <_printf_float+0x238>
 8014a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	dc39      	bgt.n	8014abc <_printf_float+0x2e0>
 8014a48:	4a1b      	ldr	r2, [pc, #108]	@ (8014ab8 <_printf_float+0x2dc>)
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	4631      	mov	r1, r6
 8014a4e:	4628      	mov	r0, r5
 8014a50:	47b8      	blx	r7
 8014a52:	3001      	adds	r0, #1
 8014a54:	f43f af1d 	beq.w	8014892 <_printf_float+0xb6>
 8014a58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014a5c:	ea59 0303 	orrs.w	r3, r9, r3
 8014a60:	d102      	bne.n	8014a68 <_printf_float+0x28c>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	07d9      	lsls	r1, r3, #31
 8014a66:	d5d7      	bpl.n	8014a18 <_printf_float+0x23c>
 8014a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a6c:	4631      	mov	r1, r6
 8014a6e:	4628      	mov	r0, r5
 8014a70:	47b8      	blx	r7
 8014a72:	3001      	adds	r0, #1
 8014a74:	f43f af0d 	beq.w	8014892 <_printf_float+0xb6>
 8014a78:	f04f 0a00 	mov.w	sl, #0
 8014a7c:	f104 0b1a 	add.w	fp, r4, #26
 8014a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a82:	425b      	negs	r3, r3
 8014a84:	4553      	cmp	r3, sl
 8014a86:	dc01      	bgt.n	8014a8c <_printf_float+0x2b0>
 8014a88:	464b      	mov	r3, r9
 8014a8a:	e793      	b.n	80149b4 <_printf_float+0x1d8>
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	465a      	mov	r2, fp
 8014a90:	4631      	mov	r1, r6
 8014a92:	4628      	mov	r0, r5
 8014a94:	47b8      	blx	r7
 8014a96:	3001      	adds	r0, #1
 8014a98:	f43f aefb 	beq.w	8014892 <_printf_float+0xb6>
 8014a9c:	f10a 0a01 	add.w	sl, sl, #1
 8014aa0:	e7ee      	b.n	8014a80 <_printf_float+0x2a4>
 8014aa2:	bf00      	nop
 8014aa4:	7fefffff 	.word	0x7fefffff
 8014aa8:	0801a8f7 	.word	0x0801a8f7
 8014aac:	0801a8f3 	.word	0x0801a8f3
 8014ab0:	0801a8ff 	.word	0x0801a8ff
 8014ab4:	0801a8fb 	.word	0x0801a8fb
 8014ab8:	0801ab08 	.word	0x0801ab08
 8014abc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014abe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014ac2:	4553      	cmp	r3, sl
 8014ac4:	bfa8      	it	ge
 8014ac6:	4653      	movge	r3, sl
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	4699      	mov	r9, r3
 8014acc:	dc36      	bgt.n	8014b3c <_printf_float+0x360>
 8014ace:	f04f 0b00 	mov.w	fp, #0
 8014ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014ad6:	f104 021a 	add.w	r2, r4, #26
 8014ada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014adc:	9306      	str	r3, [sp, #24]
 8014ade:	eba3 0309 	sub.w	r3, r3, r9
 8014ae2:	455b      	cmp	r3, fp
 8014ae4:	dc31      	bgt.n	8014b4a <_printf_float+0x36e>
 8014ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ae8:	459a      	cmp	sl, r3
 8014aea:	dc3a      	bgt.n	8014b62 <_printf_float+0x386>
 8014aec:	6823      	ldr	r3, [r4, #0]
 8014aee:	07da      	lsls	r2, r3, #31
 8014af0:	d437      	bmi.n	8014b62 <_printf_float+0x386>
 8014af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014af4:	ebaa 0903 	sub.w	r9, sl, r3
 8014af8:	9b06      	ldr	r3, [sp, #24]
 8014afa:	ebaa 0303 	sub.w	r3, sl, r3
 8014afe:	4599      	cmp	r9, r3
 8014b00:	bfa8      	it	ge
 8014b02:	4699      	movge	r9, r3
 8014b04:	f1b9 0f00 	cmp.w	r9, #0
 8014b08:	dc33      	bgt.n	8014b72 <_printf_float+0x396>
 8014b0a:	f04f 0800 	mov.w	r8, #0
 8014b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b12:	f104 0b1a 	add.w	fp, r4, #26
 8014b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b18:	ebaa 0303 	sub.w	r3, sl, r3
 8014b1c:	eba3 0309 	sub.w	r3, r3, r9
 8014b20:	4543      	cmp	r3, r8
 8014b22:	f77f af79 	ble.w	8014a18 <_printf_float+0x23c>
 8014b26:	2301      	movs	r3, #1
 8014b28:	465a      	mov	r2, fp
 8014b2a:	4631      	mov	r1, r6
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	47b8      	blx	r7
 8014b30:	3001      	adds	r0, #1
 8014b32:	f43f aeae 	beq.w	8014892 <_printf_float+0xb6>
 8014b36:	f108 0801 	add.w	r8, r8, #1
 8014b3a:	e7ec      	b.n	8014b16 <_printf_float+0x33a>
 8014b3c:	4642      	mov	r2, r8
 8014b3e:	4631      	mov	r1, r6
 8014b40:	4628      	mov	r0, r5
 8014b42:	47b8      	blx	r7
 8014b44:	3001      	adds	r0, #1
 8014b46:	d1c2      	bne.n	8014ace <_printf_float+0x2f2>
 8014b48:	e6a3      	b.n	8014892 <_printf_float+0xb6>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	4631      	mov	r1, r6
 8014b4e:	4628      	mov	r0, r5
 8014b50:	9206      	str	r2, [sp, #24]
 8014b52:	47b8      	blx	r7
 8014b54:	3001      	adds	r0, #1
 8014b56:	f43f ae9c 	beq.w	8014892 <_printf_float+0xb6>
 8014b5a:	9a06      	ldr	r2, [sp, #24]
 8014b5c:	f10b 0b01 	add.w	fp, fp, #1
 8014b60:	e7bb      	b.n	8014ada <_printf_float+0x2fe>
 8014b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b66:	4631      	mov	r1, r6
 8014b68:	4628      	mov	r0, r5
 8014b6a:	47b8      	blx	r7
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	d1c0      	bne.n	8014af2 <_printf_float+0x316>
 8014b70:	e68f      	b.n	8014892 <_printf_float+0xb6>
 8014b72:	9a06      	ldr	r2, [sp, #24]
 8014b74:	464b      	mov	r3, r9
 8014b76:	4442      	add	r2, r8
 8014b78:	4631      	mov	r1, r6
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	47b8      	blx	r7
 8014b7e:	3001      	adds	r0, #1
 8014b80:	d1c3      	bne.n	8014b0a <_printf_float+0x32e>
 8014b82:	e686      	b.n	8014892 <_printf_float+0xb6>
 8014b84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014b88:	f1ba 0f01 	cmp.w	sl, #1
 8014b8c:	dc01      	bgt.n	8014b92 <_printf_float+0x3b6>
 8014b8e:	07db      	lsls	r3, r3, #31
 8014b90:	d536      	bpl.n	8014c00 <_printf_float+0x424>
 8014b92:	2301      	movs	r3, #1
 8014b94:	4642      	mov	r2, r8
 8014b96:	4631      	mov	r1, r6
 8014b98:	4628      	mov	r0, r5
 8014b9a:	47b8      	blx	r7
 8014b9c:	3001      	adds	r0, #1
 8014b9e:	f43f ae78 	beq.w	8014892 <_printf_float+0xb6>
 8014ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	4628      	mov	r0, r5
 8014baa:	47b8      	blx	r7
 8014bac:	3001      	adds	r0, #1
 8014bae:	f43f ae70 	beq.w	8014892 <_printf_float+0xb6>
 8014bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	2300      	movs	r3, #0
 8014bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bbe:	f7eb ff6b 	bl	8000a98 <__aeabi_dcmpeq>
 8014bc2:	b9c0      	cbnz	r0, 8014bf6 <_printf_float+0x41a>
 8014bc4:	4653      	mov	r3, sl
 8014bc6:	f108 0201 	add.w	r2, r8, #1
 8014bca:	4631      	mov	r1, r6
 8014bcc:	4628      	mov	r0, r5
 8014bce:	47b8      	blx	r7
 8014bd0:	3001      	adds	r0, #1
 8014bd2:	d10c      	bne.n	8014bee <_printf_float+0x412>
 8014bd4:	e65d      	b.n	8014892 <_printf_float+0xb6>
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	465a      	mov	r2, fp
 8014bda:	4631      	mov	r1, r6
 8014bdc:	4628      	mov	r0, r5
 8014bde:	47b8      	blx	r7
 8014be0:	3001      	adds	r0, #1
 8014be2:	f43f ae56 	beq.w	8014892 <_printf_float+0xb6>
 8014be6:	f108 0801 	add.w	r8, r8, #1
 8014bea:	45d0      	cmp	r8, sl
 8014bec:	dbf3      	blt.n	8014bd6 <_printf_float+0x3fa>
 8014bee:	464b      	mov	r3, r9
 8014bf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014bf4:	e6df      	b.n	80149b6 <_printf_float+0x1da>
 8014bf6:	f04f 0800 	mov.w	r8, #0
 8014bfa:	f104 0b1a 	add.w	fp, r4, #26
 8014bfe:	e7f4      	b.n	8014bea <_printf_float+0x40e>
 8014c00:	2301      	movs	r3, #1
 8014c02:	4642      	mov	r2, r8
 8014c04:	e7e1      	b.n	8014bca <_printf_float+0x3ee>
 8014c06:	2301      	movs	r3, #1
 8014c08:	464a      	mov	r2, r9
 8014c0a:	4631      	mov	r1, r6
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	47b8      	blx	r7
 8014c10:	3001      	adds	r0, #1
 8014c12:	f43f ae3e 	beq.w	8014892 <_printf_float+0xb6>
 8014c16:	f108 0801 	add.w	r8, r8, #1
 8014c1a:	68e3      	ldr	r3, [r4, #12]
 8014c1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014c1e:	1a5b      	subs	r3, r3, r1
 8014c20:	4543      	cmp	r3, r8
 8014c22:	dcf0      	bgt.n	8014c06 <_printf_float+0x42a>
 8014c24:	e6fc      	b.n	8014a20 <_printf_float+0x244>
 8014c26:	f04f 0800 	mov.w	r8, #0
 8014c2a:	f104 0919 	add.w	r9, r4, #25
 8014c2e:	e7f4      	b.n	8014c1a <_printf_float+0x43e>

08014c30 <_printf_common>:
 8014c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c34:	4616      	mov	r6, r2
 8014c36:	4698      	mov	r8, r3
 8014c38:	688a      	ldr	r2, [r1, #8]
 8014c3a:	690b      	ldr	r3, [r1, #16]
 8014c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014c40:	4293      	cmp	r3, r2
 8014c42:	bfb8      	it	lt
 8014c44:	4613      	movlt	r3, r2
 8014c46:	6033      	str	r3, [r6, #0]
 8014c48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014c4c:	4607      	mov	r7, r0
 8014c4e:	460c      	mov	r4, r1
 8014c50:	b10a      	cbz	r2, 8014c56 <_printf_common+0x26>
 8014c52:	3301      	adds	r3, #1
 8014c54:	6033      	str	r3, [r6, #0]
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	0699      	lsls	r1, r3, #26
 8014c5a:	bf42      	ittt	mi
 8014c5c:	6833      	ldrmi	r3, [r6, #0]
 8014c5e:	3302      	addmi	r3, #2
 8014c60:	6033      	strmi	r3, [r6, #0]
 8014c62:	6825      	ldr	r5, [r4, #0]
 8014c64:	f015 0506 	ands.w	r5, r5, #6
 8014c68:	d106      	bne.n	8014c78 <_printf_common+0x48>
 8014c6a:	f104 0a19 	add.w	sl, r4, #25
 8014c6e:	68e3      	ldr	r3, [r4, #12]
 8014c70:	6832      	ldr	r2, [r6, #0]
 8014c72:	1a9b      	subs	r3, r3, r2
 8014c74:	42ab      	cmp	r3, r5
 8014c76:	dc26      	bgt.n	8014cc6 <_printf_common+0x96>
 8014c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014c7c:	6822      	ldr	r2, [r4, #0]
 8014c7e:	3b00      	subs	r3, #0
 8014c80:	bf18      	it	ne
 8014c82:	2301      	movne	r3, #1
 8014c84:	0692      	lsls	r2, r2, #26
 8014c86:	d42b      	bmi.n	8014ce0 <_printf_common+0xb0>
 8014c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014c8c:	4641      	mov	r1, r8
 8014c8e:	4638      	mov	r0, r7
 8014c90:	47c8      	blx	r9
 8014c92:	3001      	adds	r0, #1
 8014c94:	d01e      	beq.n	8014cd4 <_printf_common+0xa4>
 8014c96:	6823      	ldr	r3, [r4, #0]
 8014c98:	6922      	ldr	r2, [r4, #16]
 8014c9a:	f003 0306 	and.w	r3, r3, #6
 8014c9e:	2b04      	cmp	r3, #4
 8014ca0:	bf02      	ittt	eq
 8014ca2:	68e5      	ldreq	r5, [r4, #12]
 8014ca4:	6833      	ldreq	r3, [r6, #0]
 8014ca6:	1aed      	subeq	r5, r5, r3
 8014ca8:	68a3      	ldr	r3, [r4, #8]
 8014caa:	bf0c      	ite	eq
 8014cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cb0:	2500      	movne	r5, #0
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	bfc4      	itt	gt
 8014cb6:	1a9b      	subgt	r3, r3, r2
 8014cb8:	18ed      	addgt	r5, r5, r3
 8014cba:	2600      	movs	r6, #0
 8014cbc:	341a      	adds	r4, #26
 8014cbe:	42b5      	cmp	r5, r6
 8014cc0:	d11a      	bne.n	8014cf8 <_printf_common+0xc8>
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	e008      	b.n	8014cd8 <_printf_common+0xa8>
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	4652      	mov	r2, sl
 8014cca:	4641      	mov	r1, r8
 8014ccc:	4638      	mov	r0, r7
 8014cce:	47c8      	blx	r9
 8014cd0:	3001      	adds	r0, #1
 8014cd2:	d103      	bne.n	8014cdc <_printf_common+0xac>
 8014cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cdc:	3501      	adds	r5, #1
 8014cde:	e7c6      	b.n	8014c6e <_printf_common+0x3e>
 8014ce0:	18e1      	adds	r1, r4, r3
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	2030      	movs	r0, #48	@ 0x30
 8014ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014cea:	4422      	add	r2, r4
 8014cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014cf4:	3302      	adds	r3, #2
 8014cf6:	e7c7      	b.n	8014c88 <_printf_common+0x58>
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	4622      	mov	r2, r4
 8014cfc:	4641      	mov	r1, r8
 8014cfe:	4638      	mov	r0, r7
 8014d00:	47c8      	blx	r9
 8014d02:	3001      	adds	r0, #1
 8014d04:	d0e6      	beq.n	8014cd4 <_printf_common+0xa4>
 8014d06:	3601      	adds	r6, #1
 8014d08:	e7d9      	b.n	8014cbe <_printf_common+0x8e>
	...

08014d0c <_printf_i>:
 8014d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d10:	7e0f      	ldrb	r7, [r1, #24]
 8014d12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014d14:	2f78      	cmp	r7, #120	@ 0x78
 8014d16:	4691      	mov	r9, r2
 8014d18:	4680      	mov	r8, r0
 8014d1a:	460c      	mov	r4, r1
 8014d1c:	469a      	mov	sl, r3
 8014d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014d22:	d807      	bhi.n	8014d34 <_printf_i+0x28>
 8014d24:	2f62      	cmp	r7, #98	@ 0x62
 8014d26:	d80a      	bhi.n	8014d3e <_printf_i+0x32>
 8014d28:	2f00      	cmp	r7, #0
 8014d2a:	f000 80d1 	beq.w	8014ed0 <_printf_i+0x1c4>
 8014d2e:	2f58      	cmp	r7, #88	@ 0x58
 8014d30:	f000 80b8 	beq.w	8014ea4 <_printf_i+0x198>
 8014d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014d3c:	e03a      	b.n	8014db4 <_printf_i+0xa8>
 8014d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014d42:	2b15      	cmp	r3, #21
 8014d44:	d8f6      	bhi.n	8014d34 <_printf_i+0x28>
 8014d46:	a101      	add	r1, pc, #4	@ (adr r1, 8014d4c <_printf_i+0x40>)
 8014d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d4c:	08014da5 	.word	0x08014da5
 8014d50:	08014db9 	.word	0x08014db9
 8014d54:	08014d35 	.word	0x08014d35
 8014d58:	08014d35 	.word	0x08014d35
 8014d5c:	08014d35 	.word	0x08014d35
 8014d60:	08014d35 	.word	0x08014d35
 8014d64:	08014db9 	.word	0x08014db9
 8014d68:	08014d35 	.word	0x08014d35
 8014d6c:	08014d35 	.word	0x08014d35
 8014d70:	08014d35 	.word	0x08014d35
 8014d74:	08014d35 	.word	0x08014d35
 8014d78:	08014eb7 	.word	0x08014eb7
 8014d7c:	08014de3 	.word	0x08014de3
 8014d80:	08014e71 	.word	0x08014e71
 8014d84:	08014d35 	.word	0x08014d35
 8014d88:	08014d35 	.word	0x08014d35
 8014d8c:	08014ed9 	.word	0x08014ed9
 8014d90:	08014d35 	.word	0x08014d35
 8014d94:	08014de3 	.word	0x08014de3
 8014d98:	08014d35 	.word	0x08014d35
 8014d9c:	08014d35 	.word	0x08014d35
 8014da0:	08014e79 	.word	0x08014e79
 8014da4:	6833      	ldr	r3, [r6, #0]
 8014da6:	1d1a      	adds	r2, r3, #4
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	6032      	str	r2, [r6, #0]
 8014dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014db4:	2301      	movs	r3, #1
 8014db6:	e09c      	b.n	8014ef2 <_printf_i+0x1e6>
 8014db8:	6833      	ldr	r3, [r6, #0]
 8014dba:	6820      	ldr	r0, [r4, #0]
 8014dbc:	1d19      	adds	r1, r3, #4
 8014dbe:	6031      	str	r1, [r6, #0]
 8014dc0:	0606      	lsls	r6, r0, #24
 8014dc2:	d501      	bpl.n	8014dc8 <_printf_i+0xbc>
 8014dc4:	681d      	ldr	r5, [r3, #0]
 8014dc6:	e003      	b.n	8014dd0 <_printf_i+0xc4>
 8014dc8:	0645      	lsls	r5, r0, #25
 8014dca:	d5fb      	bpl.n	8014dc4 <_printf_i+0xb8>
 8014dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014dd0:	2d00      	cmp	r5, #0
 8014dd2:	da03      	bge.n	8014ddc <_printf_i+0xd0>
 8014dd4:	232d      	movs	r3, #45	@ 0x2d
 8014dd6:	426d      	negs	r5, r5
 8014dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014ddc:	4858      	ldr	r0, [pc, #352]	@ (8014f40 <_printf_i+0x234>)
 8014dde:	230a      	movs	r3, #10
 8014de0:	e011      	b.n	8014e06 <_printf_i+0xfa>
 8014de2:	6821      	ldr	r1, [r4, #0]
 8014de4:	6833      	ldr	r3, [r6, #0]
 8014de6:	0608      	lsls	r0, r1, #24
 8014de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8014dec:	d402      	bmi.n	8014df4 <_printf_i+0xe8>
 8014dee:	0649      	lsls	r1, r1, #25
 8014df0:	bf48      	it	mi
 8014df2:	b2ad      	uxthmi	r5, r5
 8014df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8014df6:	4852      	ldr	r0, [pc, #328]	@ (8014f40 <_printf_i+0x234>)
 8014df8:	6033      	str	r3, [r6, #0]
 8014dfa:	bf14      	ite	ne
 8014dfc:	230a      	movne	r3, #10
 8014dfe:	2308      	moveq	r3, #8
 8014e00:	2100      	movs	r1, #0
 8014e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014e06:	6866      	ldr	r6, [r4, #4]
 8014e08:	60a6      	str	r6, [r4, #8]
 8014e0a:	2e00      	cmp	r6, #0
 8014e0c:	db05      	blt.n	8014e1a <_printf_i+0x10e>
 8014e0e:	6821      	ldr	r1, [r4, #0]
 8014e10:	432e      	orrs	r6, r5
 8014e12:	f021 0104 	bic.w	r1, r1, #4
 8014e16:	6021      	str	r1, [r4, #0]
 8014e18:	d04b      	beq.n	8014eb2 <_printf_i+0x1a6>
 8014e1a:	4616      	mov	r6, r2
 8014e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8014e20:	fb03 5711 	mls	r7, r3, r1, r5
 8014e24:	5dc7      	ldrb	r7, [r0, r7]
 8014e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014e2a:	462f      	mov	r7, r5
 8014e2c:	42bb      	cmp	r3, r7
 8014e2e:	460d      	mov	r5, r1
 8014e30:	d9f4      	bls.n	8014e1c <_printf_i+0x110>
 8014e32:	2b08      	cmp	r3, #8
 8014e34:	d10b      	bne.n	8014e4e <_printf_i+0x142>
 8014e36:	6823      	ldr	r3, [r4, #0]
 8014e38:	07df      	lsls	r7, r3, #31
 8014e3a:	d508      	bpl.n	8014e4e <_printf_i+0x142>
 8014e3c:	6923      	ldr	r3, [r4, #16]
 8014e3e:	6861      	ldr	r1, [r4, #4]
 8014e40:	4299      	cmp	r1, r3
 8014e42:	bfde      	ittt	le
 8014e44:	2330      	movle	r3, #48	@ 0x30
 8014e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e4e:	1b92      	subs	r2, r2, r6
 8014e50:	6122      	str	r2, [r4, #16]
 8014e52:	f8cd a000 	str.w	sl, [sp]
 8014e56:	464b      	mov	r3, r9
 8014e58:	aa03      	add	r2, sp, #12
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	4640      	mov	r0, r8
 8014e5e:	f7ff fee7 	bl	8014c30 <_printf_common>
 8014e62:	3001      	adds	r0, #1
 8014e64:	d14a      	bne.n	8014efc <_printf_i+0x1f0>
 8014e66:	f04f 30ff 	mov.w	r0, #4294967295
 8014e6a:	b004      	add	sp, #16
 8014e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e70:	6823      	ldr	r3, [r4, #0]
 8014e72:	f043 0320 	orr.w	r3, r3, #32
 8014e76:	6023      	str	r3, [r4, #0]
 8014e78:	4832      	ldr	r0, [pc, #200]	@ (8014f44 <_printf_i+0x238>)
 8014e7a:	2778      	movs	r7, #120	@ 0x78
 8014e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014e80:	6823      	ldr	r3, [r4, #0]
 8014e82:	6831      	ldr	r1, [r6, #0]
 8014e84:	061f      	lsls	r7, r3, #24
 8014e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8014e8a:	d402      	bmi.n	8014e92 <_printf_i+0x186>
 8014e8c:	065f      	lsls	r7, r3, #25
 8014e8e:	bf48      	it	mi
 8014e90:	b2ad      	uxthmi	r5, r5
 8014e92:	6031      	str	r1, [r6, #0]
 8014e94:	07d9      	lsls	r1, r3, #31
 8014e96:	bf44      	itt	mi
 8014e98:	f043 0320 	orrmi.w	r3, r3, #32
 8014e9c:	6023      	strmi	r3, [r4, #0]
 8014e9e:	b11d      	cbz	r5, 8014ea8 <_printf_i+0x19c>
 8014ea0:	2310      	movs	r3, #16
 8014ea2:	e7ad      	b.n	8014e00 <_printf_i+0xf4>
 8014ea4:	4826      	ldr	r0, [pc, #152]	@ (8014f40 <_printf_i+0x234>)
 8014ea6:	e7e9      	b.n	8014e7c <_printf_i+0x170>
 8014ea8:	6823      	ldr	r3, [r4, #0]
 8014eaa:	f023 0320 	bic.w	r3, r3, #32
 8014eae:	6023      	str	r3, [r4, #0]
 8014eb0:	e7f6      	b.n	8014ea0 <_printf_i+0x194>
 8014eb2:	4616      	mov	r6, r2
 8014eb4:	e7bd      	b.n	8014e32 <_printf_i+0x126>
 8014eb6:	6833      	ldr	r3, [r6, #0]
 8014eb8:	6825      	ldr	r5, [r4, #0]
 8014eba:	6961      	ldr	r1, [r4, #20]
 8014ebc:	1d18      	adds	r0, r3, #4
 8014ebe:	6030      	str	r0, [r6, #0]
 8014ec0:	062e      	lsls	r6, r5, #24
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	d501      	bpl.n	8014eca <_printf_i+0x1be>
 8014ec6:	6019      	str	r1, [r3, #0]
 8014ec8:	e002      	b.n	8014ed0 <_printf_i+0x1c4>
 8014eca:	0668      	lsls	r0, r5, #25
 8014ecc:	d5fb      	bpl.n	8014ec6 <_printf_i+0x1ba>
 8014ece:	8019      	strh	r1, [r3, #0]
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	6123      	str	r3, [r4, #16]
 8014ed4:	4616      	mov	r6, r2
 8014ed6:	e7bc      	b.n	8014e52 <_printf_i+0x146>
 8014ed8:	6833      	ldr	r3, [r6, #0]
 8014eda:	1d1a      	adds	r2, r3, #4
 8014edc:	6032      	str	r2, [r6, #0]
 8014ede:	681e      	ldr	r6, [r3, #0]
 8014ee0:	6862      	ldr	r2, [r4, #4]
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f7eb f95b 	bl	80001a0 <memchr>
 8014eea:	b108      	cbz	r0, 8014ef0 <_printf_i+0x1e4>
 8014eec:	1b80      	subs	r0, r0, r6
 8014eee:	6060      	str	r0, [r4, #4]
 8014ef0:	6863      	ldr	r3, [r4, #4]
 8014ef2:	6123      	str	r3, [r4, #16]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014efa:	e7aa      	b.n	8014e52 <_printf_i+0x146>
 8014efc:	6923      	ldr	r3, [r4, #16]
 8014efe:	4632      	mov	r2, r6
 8014f00:	4649      	mov	r1, r9
 8014f02:	4640      	mov	r0, r8
 8014f04:	47d0      	blx	sl
 8014f06:	3001      	adds	r0, #1
 8014f08:	d0ad      	beq.n	8014e66 <_printf_i+0x15a>
 8014f0a:	6823      	ldr	r3, [r4, #0]
 8014f0c:	079b      	lsls	r3, r3, #30
 8014f0e:	d413      	bmi.n	8014f38 <_printf_i+0x22c>
 8014f10:	68e0      	ldr	r0, [r4, #12]
 8014f12:	9b03      	ldr	r3, [sp, #12]
 8014f14:	4298      	cmp	r0, r3
 8014f16:	bfb8      	it	lt
 8014f18:	4618      	movlt	r0, r3
 8014f1a:	e7a6      	b.n	8014e6a <_printf_i+0x15e>
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	4632      	mov	r2, r6
 8014f20:	4649      	mov	r1, r9
 8014f22:	4640      	mov	r0, r8
 8014f24:	47d0      	blx	sl
 8014f26:	3001      	adds	r0, #1
 8014f28:	d09d      	beq.n	8014e66 <_printf_i+0x15a>
 8014f2a:	3501      	adds	r5, #1
 8014f2c:	68e3      	ldr	r3, [r4, #12]
 8014f2e:	9903      	ldr	r1, [sp, #12]
 8014f30:	1a5b      	subs	r3, r3, r1
 8014f32:	42ab      	cmp	r3, r5
 8014f34:	dcf2      	bgt.n	8014f1c <_printf_i+0x210>
 8014f36:	e7eb      	b.n	8014f10 <_printf_i+0x204>
 8014f38:	2500      	movs	r5, #0
 8014f3a:	f104 0619 	add.w	r6, r4, #25
 8014f3e:	e7f5      	b.n	8014f2c <_printf_i+0x220>
 8014f40:	0801a903 	.word	0x0801a903
 8014f44:	0801a914 	.word	0x0801a914

08014f48 <std>:
 8014f48:	2300      	movs	r3, #0
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8014f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f56:	6083      	str	r3, [r0, #8]
 8014f58:	8181      	strh	r1, [r0, #12]
 8014f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8014f5c:	81c2      	strh	r2, [r0, #14]
 8014f5e:	6183      	str	r3, [r0, #24]
 8014f60:	4619      	mov	r1, r3
 8014f62:	2208      	movs	r2, #8
 8014f64:	305c      	adds	r0, #92	@ 0x5c
 8014f66:	f000 f918 	bl	801519a <memset>
 8014f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa0 <std+0x58>)
 8014f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8014f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa4 <std+0x5c>)
 8014f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014f72:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa8 <std+0x60>)
 8014f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014f76:	4b0d      	ldr	r3, [pc, #52]	@ (8014fac <std+0x64>)
 8014f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8014f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8014fb0 <std+0x68>)
 8014f7c:	6224      	str	r4, [r4, #32]
 8014f7e:	429c      	cmp	r4, r3
 8014f80:	d006      	beq.n	8014f90 <std+0x48>
 8014f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014f86:	4294      	cmp	r4, r2
 8014f88:	d002      	beq.n	8014f90 <std+0x48>
 8014f8a:	33d0      	adds	r3, #208	@ 0xd0
 8014f8c:	429c      	cmp	r4, r3
 8014f8e:	d105      	bne.n	8014f9c <std+0x54>
 8014f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f98:	f000 bffe 	b.w	8015f98 <__retarget_lock_init_recursive>
 8014f9c:	bd10      	pop	{r4, pc}
 8014f9e:	bf00      	nop
 8014fa0:	08015111 	.word	0x08015111
 8014fa4:	08015137 	.word	0x08015137
 8014fa8:	0801516f 	.word	0x0801516f
 8014fac:	08015193 	.word	0x08015193
 8014fb0:	2000a814 	.word	0x2000a814

08014fb4 <stdio_exit_handler>:
 8014fb4:	4a02      	ldr	r2, [pc, #8]	@ (8014fc0 <stdio_exit_handler+0xc>)
 8014fb6:	4903      	ldr	r1, [pc, #12]	@ (8014fc4 <stdio_exit_handler+0x10>)
 8014fb8:	4803      	ldr	r0, [pc, #12]	@ (8014fc8 <stdio_exit_handler+0x14>)
 8014fba:	f000 b869 	b.w	8015090 <_fwalk_sglue>
 8014fbe:	bf00      	nop
 8014fc0:	20000024 	.word	0x20000024
 8014fc4:	08017b09 	.word	0x08017b09
 8014fc8:	2000003c 	.word	0x2000003c

08014fcc <cleanup_stdio>:
 8014fcc:	6841      	ldr	r1, [r0, #4]
 8014fce:	4b0c      	ldr	r3, [pc, #48]	@ (8015000 <cleanup_stdio+0x34>)
 8014fd0:	4299      	cmp	r1, r3
 8014fd2:	b510      	push	{r4, lr}
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	d001      	beq.n	8014fdc <cleanup_stdio+0x10>
 8014fd8:	f002 fd96 	bl	8017b08 <_fflush_r>
 8014fdc:	68a1      	ldr	r1, [r4, #8]
 8014fde:	4b09      	ldr	r3, [pc, #36]	@ (8015004 <cleanup_stdio+0x38>)
 8014fe0:	4299      	cmp	r1, r3
 8014fe2:	d002      	beq.n	8014fea <cleanup_stdio+0x1e>
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	f002 fd8f 	bl	8017b08 <_fflush_r>
 8014fea:	68e1      	ldr	r1, [r4, #12]
 8014fec:	4b06      	ldr	r3, [pc, #24]	@ (8015008 <cleanup_stdio+0x3c>)
 8014fee:	4299      	cmp	r1, r3
 8014ff0:	d004      	beq.n	8014ffc <cleanup_stdio+0x30>
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ff8:	f002 bd86 	b.w	8017b08 <_fflush_r>
 8014ffc:	bd10      	pop	{r4, pc}
 8014ffe:	bf00      	nop
 8015000:	2000a814 	.word	0x2000a814
 8015004:	2000a87c 	.word	0x2000a87c
 8015008:	2000a8e4 	.word	0x2000a8e4

0801500c <global_stdio_init.part.0>:
 801500c:	b510      	push	{r4, lr}
 801500e:	4b0b      	ldr	r3, [pc, #44]	@ (801503c <global_stdio_init.part.0+0x30>)
 8015010:	4c0b      	ldr	r4, [pc, #44]	@ (8015040 <global_stdio_init.part.0+0x34>)
 8015012:	4a0c      	ldr	r2, [pc, #48]	@ (8015044 <global_stdio_init.part.0+0x38>)
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	4620      	mov	r0, r4
 8015018:	2200      	movs	r2, #0
 801501a:	2104      	movs	r1, #4
 801501c:	f7ff ff94 	bl	8014f48 <std>
 8015020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015024:	2201      	movs	r2, #1
 8015026:	2109      	movs	r1, #9
 8015028:	f7ff ff8e 	bl	8014f48 <std>
 801502c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015030:	2202      	movs	r2, #2
 8015032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015036:	2112      	movs	r1, #18
 8015038:	f7ff bf86 	b.w	8014f48 <std>
 801503c:	2000a94c 	.word	0x2000a94c
 8015040:	2000a814 	.word	0x2000a814
 8015044:	08014fb5 	.word	0x08014fb5

08015048 <__sfp_lock_acquire>:
 8015048:	4801      	ldr	r0, [pc, #4]	@ (8015050 <__sfp_lock_acquire+0x8>)
 801504a:	f000 bfa7 	b.w	8015f9c <__retarget_lock_acquire_recursive>
 801504e:	bf00      	nop
 8015050:	2000a97b 	.word	0x2000a97b

08015054 <__sfp_lock_release>:
 8015054:	4801      	ldr	r0, [pc, #4]	@ (801505c <__sfp_lock_release+0x8>)
 8015056:	f000 bfa3 	b.w	8015fa0 <__retarget_lock_release_recursive>
 801505a:	bf00      	nop
 801505c:	2000a97b 	.word	0x2000a97b

08015060 <__sinit>:
 8015060:	b510      	push	{r4, lr}
 8015062:	4604      	mov	r4, r0
 8015064:	f7ff fff0 	bl	8015048 <__sfp_lock_acquire>
 8015068:	6a23      	ldr	r3, [r4, #32]
 801506a:	b11b      	cbz	r3, 8015074 <__sinit+0x14>
 801506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015070:	f7ff bff0 	b.w	8015054 <__sfp_lock_release>
 8015074:	4b04      	ldr	r3, [pc, #16]	@ (8015088 <__sinit+0x28>)
 8015076:	6223      	str	r3, [r4, #32]
 8015078:	4b04      	ldr	r3, [pc, #16]	@ (801508c <__sinit+0x2c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d1f5      	bne.n	801506c <__sinit+0xc>
 8015080:	f7ff ffc4 	bl	801500c <global_stdio_init.part.0>
 8015084:	e7f2      	b.n	801506c <__sinit+0xc>
 8015086:	bf00      	nop
 8015088:	08014fcd 	.word	0x08014fcd
 801508c:	2000a94c 	.word	0x2000a94c

08015090 <_fwalk_sglue>:
 8015090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015094:	4607      	mov	r7, r0
 8015096:	4688      	mov	r8, r1
 8015098:	4614      	mov	r4, r2
 801509a:	2600      	movs	r6, #0
 801509c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150a0:	f1b9 0901 	subs.w	r9, r9, #1
 80150a4:	d505      	bpl.n	80150b2 <_fwalk_sglue+0x22>
 80150a6:	6824      	ldr	r4, [r4, #0]
 80150a8:	2c00      	cmp	r4, #0
 80150aa:	d1f7      	bne.n	801509c <_fwalk_sglue+0xc>
 80150ac:	4630      	mov	r0, r6
 80150ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150b2:	89ab      	ldrh	r3, [r5, #12]
 80150b4:	2b01      	cmp	r3, #1
 80150b6:	d907      	bls.n	80150c8 <_fwalk_sglue+0x38>
 80150b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150bc:	3301      	adds	r3, #1
 80150be:	d003      	beq.n	80150c8 <_fwalk_sglue+0x38>
 80150c0:	4629      	mov	r1, r5
 80150c2:	4638      	mov	r0, r7
 80150c4:	47c0      	blx	r8
 80150c6:	4306      	orrs	r6, r0
 80150c8:	3568      	adds	r5, #104	@ 0x68
 80150ca:	e7e9      	b.n	80150a0 <_fwalk_sglue+0x10>

080150cc <siprintf>:
 80150cc:	b40e      	push	{r1, r2, r3}
 80150ce:	b510      	push	{r4, lr}
 80150d0:	b09d      	sub	sp, #116	@ 0x74
 80150d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80150d4:	9002      	str	r0, [sp, #8]
 80150d6:	9006      	str	r0, [sp, #24]
 80150d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150dc:	480a      	ldr	r0, [pc, #40]	@ (8015108 <siprintf+0x3c>)
 80150de:	9107      	str	r1, [sp, #28]
 80150e0:	9104      	str	r1, [sp, #16]
 80150e2:	490a      	ldr	r1, [pc, #40]	@ (801510c <siprintf+0x40>)
 80150e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80150e8:	9105      	str	r1, [sp, #20]
 80150ea:	2400      	movs	r4, #0
 80150ec:	a902      	add	r1, sp, #8
 80150ee:	6800      	ldr	r0, [r0, #0]
 80150f0:	9301      	str	r3, [sp, #4]
 80150f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80150f4:	f002 fb88 	bl	8017808 <_svfiprintf_r>
 80150f8:	9b02      	ldr	r3, [sp, #8]
 80150fa:	701c      	strb	r4, [r3, #0]
 80150fc:	b01d      	add	sp, #116	@ 0x74
 80150fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015102:	b003      	add	sp, #12
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	20000038 	.word	0x20000038
 801510c:	ffff0208 	.word	0xffff0208

08015110 <__sread>:
 8015110:	b510      	push	{r4, lr}
 8015112:	460c      	mov	r4, r1
 8015114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015118:	f000 fef0 	bl	8015efc <_read_r>
 801511c:	2800      	cmp	r0, #0
 801511e:	bfab      	itete	ge
 8015120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015122:	89a3      	ldrhlt	r3, [r4, #12]
 8015124:	181b      	addge	r3, r3, r0
 8015126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801512a:	bfac      	ite	ge
 801512c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801512e:	81a3      	strhlt	r3, [r4, #12]
 8015130:	bd10      	pop	{r4, pc}

08015132 <__seofread>:
 8015132:	2000      	movs	r0, #0
 8015134:	4770      	bx	lr

08015136 <__swrite>:
 8015136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801513a:	461f      	mov	r7, r3
 801513c:	898b      	ldrh	r3, [r1, #12]
 801513e:	05db      	lsls	r3, r3, #23
 8015140:	4605      	mov	r5, r0
 8015142:	460c      	mov	r4, r1
 8015144:	4616      	mov	r6, r2
 8015146:	d505      	bpl.n	8015154 <__swrite+0x1e>
 8015148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801514c:	2302      	movs	r3, #2
 801514e:	2200      	movs	r2, #0
 8015150:	f000 fec2 	bl	8015ed8 <_lseek_r>
 8015154:	89a3      	ldrh	r3, [r4, #12]
 8015156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801515a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801515e:	81a3      	strh	r3, [r4, #12]
 8015160:	4632      	mov	r2, r6
 8015162:	463b      	mov	r3, r7
 8015164:	4628      	mov	r0, r5
 8015166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801516a:	f000 bed9 	b.w	8015f20 <_write_r>

0801516e <__sseek>:
 801516e:	b510      	push	{r4, lr}
 8015170:	460c      	mov	r4, r1
 8015172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015176:	f000 feaf 	bl	8015ed8 <_lseek_r>
 801517a:	1c43      	adds	r3, r0, #1
 801517c:	89a3      	ldrh	r3, [r4, #12]
 801517e:	bf15      	itete	ne
 8015180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801518a:	81a3      	strheq	r3, [r4, #12]
 801518c:	bf18      	it	ne
 801518e:	81a3      	strhne	r3, [r4, #12]
 8015190:	bd10      	pop	{r4, pc}

08015192 <__sclose>:
 8015192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015196:	f000 be8f 	b.w	8015eb8 <_close_r>

0801519a <memset>:
 801519a:	4402      	add	r2, r0
 801519c:	4603      	mov	r3, r0
 801519e:	4293      	cmp	r3, r2
 80151a0:	d100      	bne.n	80151a4 <memset+0xa>
 80151a2:	4770      	bx	lr
 80151a4:	f803 1b01 	strb.w	r1, [r3], #1
 80151a8:	e7f9      	b.n	801519e <memset+0x4>
	...

080151ac <localtime>:
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	4b0b      	ldr	r3, [pc, #44]	@ (80151dc <localtime+0x30>)
 80151b0:	681d      	ldr	r5, [r3, #0]
 80151b2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80151b4:	4604      	mov	r4, r0
 80151b6:	b953      	cbnz	r3, 80151ce <localtime+0x22>
 80151b8:	2024      	movs	r0, #36	@ 0x24
 80151ba:	f001 fe17 	bl	8016dec <malloc>
 80151be:	4602      	mov	r2, r0
 80151c0:	6368      	str	r0, [r5, #52]	@ 0x34
 80151c2:	b920      	cbnz	r0, 80151ce <localtime+0x22>
 80151c4:	4b06      	ldr	r3, [pc, #24]	@ (80151e0 <localtime+0x34>)
 80151c6:	4807      	ldr	r0, [pc, #28]	@ (80151e4 <localtime+0x38>)
 80151c8:	2132      	movs	r1, #50	@ 0x32
 80151ca:	f000 ff01 	bl	8015fd0 <__assert_func>
 80151ce:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80151d0:	4620      	mov	r0, r4
 80151d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151d6:	f000 b807 	b.w	80151e8 <localtime_r>
 80151da:	bf00      	nop
 80151dc:	20000038 	.word	0x20000038
 80151e0:	0801a884 	.word	0x0801a884
 80151e4:	0801a925 	.word	0x0801a925

080151e8 <localtime_r>:
 80151e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ec:	460c      	mov	r4, r1
 80151ee:	4607      	mov	r7, r0
 80151f0:	f002 fd1c 	bl	8017c2c <__gettzinfo>
 80151f4:	4621      	mov	r1, r4
 80151f6:	4605      	mov	r5, r0
 80151f8:	4638      	mov	r0, r7
 80151fa:	f002 fd1b 	bl	8017c34 <gmtime_r>
 80151fe:	6943      	ldr	r3, [r0, #20]
 8015200:	0799      	lsls	r1, r3, #30
 8015202:	4604      	mov	r4, r0
 8015204:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8015208:	d106      	bne.n	8015218 <localtime_r+0x30>
 801520a:	2264      	movs	r2, #100	@ 0x64
 801520c:	fb98 f3f2 	sdiv	r3, r8, r2
 8015210:	fb02 8313 	mls	r3, r2, r3, r8
 8015214:	2b00      	cmp	r3, #0
 8015216:	d171      	bne.n	80152fc <localtime_r+0x114>
 8015218:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801521c:	fb98 f3f2 	sdiv	r3, r8, r2
 8015220:	fb02 8313 	mls	r3, r2, r3, r8
 8015224:	fab3 f383 	clz	r3, r3
 8015228:	095b      	lsrs	r3, r3, #5
 801522a:	425e      	negs	r6, r3
 801522c:	4b64      	ldr	r3, [pc, #400]	@ (80153c0 <localtime_r+0x1d8>)
 801522e:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 8015232:	441e      	add	r6, r3
 8015234:	f000 fc08 	bl	8015a48 <__tz_lock>
 8015238:	f000 fc12 	bl	8015a60 <_tzset_unlocked>
 801523c:	4b61      	ldr	r3, [pc, #388]	@ (80153c4 <localtime_r+0x1dc>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d06a      	beq.n	801531a <localtime_r+0x132>
 8015244:	686b      	ldr	r3, [r5, #4]
 8015246:	4543      	cmp	r3, r8
 8015248:	d15a      	bne.n	8015300 <localtime_r+0x118>
 801524a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801524e:	682f      	ldr	r7, [r5, #0]
 8015250:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8015254:	2f00      	cmp	r7, #0
 8015256:	d15b      	bne.n	8015310 <localtime_r+0x128>
 8015258:	4282      	cmp	r2, r0
 801525a:	eb73 0101 	sbcs.w	r1, r3, r1
 801525e:	db5e      	blt.n	801531e <localtime_r+0x136>
 8015260:	2301      	movs	r3, #1
 8015262:	6223      	str	r3, [r4, #32]
 8015264:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8015266:	6861      	ldr	r1, [r4, #4]
 8015268:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801526c:	fb93 f0f2 	sdiv	r0, r3, r2
 8015270:	fb02 3310 	mls	r3, r2, r0, r3
 8015274:	223c      	movs	r2, #60	@ 0x3c
 8015276:	fb93 f5f2 	sdiv	r5, r3, r2
 801527a:	fb02 3215 	mls	r2, r2, r5, r3
 801527e:	6823      	ldr	r3, [r4, #0]
 8015280:	1a9b      	subs	r3, r3, r2
 8015282:	68a2      	ldr	r2, [r4, #8]
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	1b49      	subs	r1, r1, r5
 8015288:	1a12      	subs	r2, r2, r0
 801528a:	2b3b      	cmp	r3, #59	@ 0x3b
 801528c:	6061      	str	r1, [r4, #4]
 801528e:	60a2      	str	r2, [r4, #8]
 8015290:	dd51      	ble.n	8015336 <localtime_r+0x14e>
 8015292:	3101      	adds	r1, #1
 8015294:	6061      	str	r1, [r4, #4]
 8015296:	3b3c      	subs	r3, #60	@ 0x3c
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	6863      	ldr	r3, [r4, #4]
 801529c:	2b3b      	cmp	r3, #59	@ 0x3b
 801529e:	dd50      	ble.n	8015342 <localtime_r+0x15a>
 80152a0:	3201      	adds	r2, #1
 80152a2:	60a2      	str	r2, [r4, #8]
 80152a4:	3b3c      	subs	r3, #60	@ 0x3c
 80152a6:	6063      	str	r3, [r4, #4]
 80152a8:	68a3      	ldr	r3, [r4, #8]
 80152aa:	2b17      	cmp	r3, #23
 80152ac:	dd4f      	ble.n	801534e <localtime_r+0x166>
 80152ae:	69e2      	ldr	r2, [r4, #28]
 80152b0:	3201      	adds	r2, #1
 80152b2:	61e2      	str	r2, [r4, #28]
 80152b4:	69a2      	ldr	r2, [r4, #24]
 80152b6:	3201      	adds	r2, #1
 80152b8:	2a07      	cmp	r2, #7
 80152ba:	bfa8      	it	ge
 80152bc:	2200      	movge	r2, #0
 80152be:	61a2      	str	r2, [r4, #24]
 80152c0:	68e2      	ldr	r2, [r4, #12]
 80152c2:	3b18      	subs	r3, #24
 80152c4:	3201      	adds	r2, #1
 80152c6:	60a3      	str	r3, [r4, #8]
 80152c8:	6923      	ldr	r3, [r4, #16]
 80152ca:	60e2      	str	r2, [r4, #12]
 80152cc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80152d0:	428a      	cmp	r2, r1
 80152d2:	dd0e      	ble.n	80152f2 <localtime_r+0x10a>
 80152d4:	2b0b      	cmp	r3, #11
 80152d6:	eba2 0201 	sub.w	r2, r2, r1
 80152da:	60e2      	str	r2, [r4, #12]
 80152dc:	f103 0201 	add.w	r2, r3, #1
 80152e0:	bf09      	itett	eq
 80152e2:	6963      	ldreq	r3, [r4, #20]
 80152e4:	6122      	strne	r2, [r4, #16]
 80152e6:	2200      	moveq	r2, #0
 80152e8:	3301      	addeq	r3, #1
 80152ea:	bf02      	ittt	eq
 80152ec:	6122      	streq	r2, [r4, #16]
 80152ee:	6163      	streq	r3, [r4, #20]
 80152f0:	61e2      	streq	r2, [r4, #28]
 80152f2:	f000 fbaf 	bl	8015a54 <__tz_unlock>
 80152f6:	4620      	mov	r0, r4
 80152f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fc:	2301      	movs	r3, #1
 80152fe:	e794      	b.n	801522a <localtime_r+0x42>
 8015300:	4640      	mov	r0, r8
 8015302:	f000 faed 	bl	80158e0 <__tzcalc_limits>
 8015306:	2800      	cmp	r0, #0
 8015308:	d19f      	bne.n	801524a <localtime_r+0x62>
 801530a:	f04f 33ff 	mov.w	r3, #4294967295
 801530e:	e004      	b.n	801531a <localtime_r+0x132>
 8015310:	4282      	cmp	r2, r0
 8015312:	eb73 0101 	sbcs.w	r1, r3, r1
 8015316:	da02      	bge.n	801531e <localtime_r+0x136>
 8015318:	2300      	movs	r3, #0
 801531a:	6223      	str	r3, [r4, #32]
 801531c:	e009      	b.n	8015332 <localtime_r+0x14a>
 801531e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8015322:	4282      	cmp	r2, r0
 8015324:	418b      	sbcs	r3, r1
 8015326:	bfb4      	ite	lt
 8015328:	2301      	movlt	r3, #1
 801532a:	2300      	movge	r3, #0
 801532c:	6223      	str	r3, [r4, #32]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d198      	bne.n	8015264 <localtime_r+0x7c>
 8015332:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8015334:	e797      	b.n	8015266 <localtime_r+0x7e>
 8015336:	2b00      	cmp	r3, #0
 8015338:	daaf      	bge.n	801529a <localtime_r+0xb2>
 801533a:	3901      	subs	r1, #1
 801533c:	6061      	str	r1, [r4, #4]
 801533e:	333c      	adds	r3, #60	@ 0x3c
 8015340:	e7aa      	b.n	8015298 <localtime_r+0xb0>
 8015342:	2b00      	cmp	r3, #0
 8015344:	dab0      	bge.n	80152a8 <localtime_r+0xc0>
 8015346:	3a01      	subs	r2, #1
 8015348:	60a2      	str	r2, [r4, #8]
 801534a:	333c      	adds	r3, #60	@ 0x3c
 801534c:	e7ab      	b.n	80152a6 <localtime_r+0xbe>
 801534e:	2b00      	cmp	r3, #0
 8015350:	dacf      	bge.n	80152f2 <localtime_r+0x10a>
 8015352:	69e2      	ldr	r2, [r4, #28]
 8015354:	3a01      	subs	r2, #1
 8015356:	61e2      	str	r2, [r4, #28]
 8015358:	69a2      	ldr	r2, [r4, #24]
 801535a:	3a01      	subs	r2, #1
 801535c:	bf48      	it	mi
 801535e:	2206      	movmi	r2, #6
 8015360:	61a2      	str	r2, [r4, #24]
 8015362:	68e2      	ldr	r2, [r4, #12]
 8015364:	3318      	adds	r3, #24
 8015366:	3a01      	subs	r2, #1
 8015368:	60e2      	str	r2, [r4, #12]
 801536a:	60a3      	str	r3, [r4, #8]
 801536c:	2a00      	cmp	r2, #0
 801536e:	d1c0      	bne.n	80152f2 <localtime_r+0x10a>
 8015370:	6923      	ldr	r3, [r4, #16]
 8015372:	3b01      	subs	r3, #1
 8015374:	d405      	bmi.n	8015382 <localtime_r+0x19a>
 8015376:	6123      	str	r3, [r4, #16]
 8015378:	6923      	ldr	r3, [r4, #16]
 801537a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801537e:	60e3      	str	r3, [r4, #12]
 8015380:	e7b7      	b.n	80152f2 <localtime_r+0x10a>
 8015382:	230b      	movs	r3, #11
 8015384:	6123      	str	r3, [r4, #16]
 8015386:	6963      	ldr	r3, [r4, #20]
 8015388:	1e5a      	subs	r2, r3, #1
 801538a:	6162      	str	r2, [r4, #20]
 801538c:	0792      	lsls	r2, r2, #30
 801538e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8015392:	d105      	bne.n	80153a0 <localtime_r+0x1b8>
 8015394:	2164      	movs	r1, #100	@ 0x64
 8015396:	fb93 f2f1 	sdiv	r2, r3, r1
 801539a:	fb01 3212 	mls	r2, r1, r2, r3
 801539e:	b962      	cbnz	r2, 80153ba <localtime_r+0x1d2>
 80153a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80153a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80153a8:	fb02 3311 	mls	r3, r2, r1, r3
 80153ac:	fab3 f383 	clz	r3, r3
 80153b0:	095b      	lsrs	r3, r3, #5
 80153b2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80153b6:	61e3      	str	r3, [r4, #28]
 80153b8:	e7de      	b.n	8015378 <localtime_r+0x190>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e7f9      	b.n	80153b2 <localtime_r+0x1ca>
 80153be:	bf00      	nop
 80153c0:	0801ab70 	.word	0x0801ab70
 80153c4:	2000a970 	.word	0x2000a970

080153c8 <validate_structure>:
 80153c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153ca:	6801      	ldr	r1, [r0, #0]
 80153cc:	293b      	cmp	r1, #59	@ 0x3b
 80153ce:	4604      	mov	r4, r0
 80153d0:	d911      	bls.n	80153f6 <validate_structure+0x2e>
 80153d2:	223c      	movs	r2, #60	@ 0x3c
 80153d4:	4668      	mov	r0, sp
 80153d6:	f000 fe19 	bl	801600c <div>
 80153da:	9a01      	ldr	r2, [sp, #4]
 80153dc:	6863      	ldr	r3, [r4, #4]
 80153de:	9900      	ldr	r1, [sp, #0]
 80153e0:	2a00      	cmp	r2, #0
 80153e2:	440b      	add	r3, r1
 80153e4:	6063      	str	r3, [r4, #4]
 80153e6:	bfbb      	ittet	lt
 80153e8:	323c      	addlt	r2, #60	@ 0x3c
 80153ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80153ee:	6022      	strge	r2, [r4, #0]
 80153f0:	6022      	strlt	r2, [r4, #0]
 80153f2:	bfb8      	it	lt
 80153f4:	6063      	strlt	r3, [r4, #4]
 80153f6:	6861      	ldr	r1, [r4, #4]
 80153f8:	293b      	cmp	r1, #59	@ 0x3b
 80153fa:	d911      	bls.n	8015420 <validate_structure+0x58>
 80153fc:	223c      	movs	r2, #60	@ 0x3c
 80153fe:	4668      	mov	r0, sp
 8015400:	f000 fe04 	bl	801600c <div>
 8015404:	9a01      	ldr	r2, [sp, #4]
 8015406:	68a3      	ldr	r3, [r4, #8]
 8015408:	9900      	ldr	r1, [sp, #0]
 801540a:	2a00      	cmp	r2, #0
 801540c:	440b      	add	r3, r1
 801540e:	60a3      	str	r3, [r4, #8]
 8015410:	bfbb      	ittet	lt
 8015412:	323c      	addlt	r2, #60	@ 0x3c
 8015414:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015418:	6062      	strge	r2, [r4, #4]
 801541a:	6062      	strlt	r2, [r4, #4]
 801541c:	bfb8      	it	lt
 801541e:	60a3      	strlt	r3, [r4, #8]
 8015420:	68a1      	ldr	r1, [r4, #8]
 8015422:	2917      	cmp	r1, #23
 8015424:	d911      	bls.n	801544a <validate_structure+0x82>
 8015426:	2218      	movs	r2, #24
 8015428:	4668      	mov	r0, sp
 801542a:	f000 fdef 	bl	801600c <div>
 801542e:	9a01      	ldr	r2, [sp, #4]
 8015430:	68e3      	ldr	r3, [r4, #12]
 8015432:	9900      	ldr	r1, [sp, #0]
 8015434:	2a00      	cmp	r2, #0
 8015436:	440b      	add	r3, r1
 8015438:	60e3      	str	r3, [r4, #12]
 801543a:	bfbb      	ittet	lt
 801543c:	3218      	addlt	r2, #24
 801543e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015442:	60a2      	strge	r2, [r4, #8]
 8015444:	60a2      	strlt	r2, [r4, #8]
 8015446:	bfb8      	it	lt
 8015448:	60e3      	strlt	r3, [r4, #12]
 801544a:	6921      	ldr	r1, [r4, #16]
 801544c:	290b      	cmp	r1, #11
 801544e:	d911      	bls.n	8015474 <validate_structure+0xac>
 8015450:	220c      	movs	r2, #12
 8015452:	4668      	mov	r0, sp
 8015454:	f000 fdda 	bl	801600c <div>
 8015458:	9a01      	ldr	r2, [sp, #4]
 801545a:	6963      	ldr	r3, [r4, #20]
 801545c:	9900      	ldr	r1, [sp, #0]
 801545e:	2a00      	cmp	r2, #0
 8015460:	440b      	add	r3, r1
 8015462:	6163      	str	r3, [r4, #20]
 8015464:	bfbb      	ittet	lt
 8015466:	320c      	addlt	r2, #12
 8015468:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801546c:	6122      	strge	r2, [r4, #16]
 801546e:	6122      	strlt	r2, [r4, #16]
 8015470:	bfb8      	it	lt
 8015472:	6163      	strlt	r3, [r4, #20]
 8015474:	6963      	ldr	r3, [r4, #20]
 8015476:	079a      	lsls	r2, r3, #30
 8015478:	d11c      	bne.n	80154b4 <validate_structure+0xec>
 801547a:	2164      	movs	r1, #100	@ 0x64
 801547c:	fb93 f2f1 	sdiv	r2, r3, r1
 8015480:	fb01 3212 	mls	r2, r1, r2, r3
 8015484:	b9c2      	cbnz	r2, 80154b8 <validate_structure+0xf0>
 8015486:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801548a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801548e:	fb93 f1f2 	sdiv	r1, r3, r2
 8015492:	fb02 3311 	mls	r3, r2, r1, r3
 8015496:	2b00      	cmp	r3, #0
 8015498:	bf0c      	ite	eq
 801549a:	231d      	moveq	r3, #29
 801549c:	231c      	movne	r3, #28
 801549e:	68e2      	ldr	r2, [r4, #12]
 80154a0:	2a00      	cmp	r2, #0
 80154a2:	dc0b      	bgt.n	80154bc <validate_structure+0xf4>
 80154a4:	4d31      	ldr	r5, [pc, #196]	@ (801556c <validate_structure+0x1a4>)
 80154a6:	200b      	movs	r0, #11
 80154a8:	2164      	movs	r1, #100	@ 0x64
 80154aa:	68e6      	ldr	r6, [r4, #12]
 80154ac:	2e00      	cmp	r6, #0
 80154ae:	dd30      	ble.n	8015512 <validate_structure+0x14a>
 80154b0:	b003      	add	sp, #12
 80154b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154b4:	231c      	movs	r3, #28
 80154b6:	e7f2      	b.n	801549e <validate_structure+0xd6>
 80154b8:	231d      	movs	r3, #29
 80154ba:	e7f0      	b.n	801549e <validate_structure+0xd6>
 80154bc:	4d2b      	ldr	r5, [pc, #172]	@ (801556c <validate_structure+0x1a4>)
 80154be:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80154c2:	2a01      	cmp	r2, #1
 80154c4:	bf14      	ite	ne
 80154c6:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80154ca:	4618      	moveq	r0, r3
 80154cc:	4281      	cmp	r1, r0
 80154ce:	ddef      	ble.n	80154b0 <validate_structure+0xe8>
 80154d0:	3201      	adds	r2, #1
 80154d2:	1a09      	subs	r1, r1, r0
 80154d4:	2a0c      	cmp	r2, #12
 80154d6:	60e1      	str	r1, [r4, #12]
 80154d8:	6122      	str	r2, [r4, #16]
 80154da:	d1f0      	bne.n	80154be <validate_structure+0xf6>
 80154dc:	6963      	ldr	r3, [r4, #20]
 80154de:	2100      	movs	r1, #0
 80154e0:	1c5a      	adds	r2, r3, #1
 80154e2:	6121      	str	r1, [r4, #16]
 80154e4:	0791      	lsls	r1, r2, #30
 80154e6:	6162      	str	r2, [r4, #20]
 80154e8:	d13c      	bne.n	8015564 <validate_structure+0x19c>
 80154ea:	2164      	movs	r1, #100	@ 0x64
 80154ec:	fb92 f0f1 	sdiv	r0, r2, r1
 80154f0:	fb01 2210 	mls	r2, r1, r0, r2
 80154f4:	2a00      	cmp	r2, #0
 80154f6:	d137      	bne.n	8015568 <validate_structure+0x1a0>
 80154f8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80154fc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015500:	fb93 f1f2 	sdiv	r1, r3, r2
 8015504:	fb02 3311 	mls	r3, r2, r1, r3
 8015508:	2b00      	cmp	r3, #0
 801550a:	bf0c      	ite	eq
 801550c:	231d      	moveq	r3, #29
 801550e:	231c      	movne	r3, #28
 8015510:	e7d5      	b.n	80154be <validate_structure+0xf6>
 8015512:	6922      	ldr	r2, [r4, #16]
 8015514:	3a01      	subs	r2, #1
 8015516:	6122      	str	r2, [r4, #16]
 8015518:	3201      	adds	r2, #1
 801551a:	d116      	bne.n	801554a <validate_structure+0x182>
 801551c:	6963      	ldr	r3, [r4, #20]
 801551e:	1e5a      	subs	r2, r3, #1
 8015520:	0797      	lsls	r7, r2, #30
 8015522:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8015526:	d119      	bne.n	801555c <validate_structure+0x194>
 8015528:	fb92 f7f1 	sdiv	r7, r2, r1
 801552c:	fb01 2217 	mls	r2, r1, r7, r2
 8015530:	b9b2      	cbnz	r2, 8015560 <validate_structure+0x198>
 8015532:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8015536:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801553a:	fb93 f7f2 	sdiv	r7, r3, r2
 801553e:	fb02 3317 	mls	r3, r2, r7, r3
 8015542:	2b00      	cmp	r3, #0
 8015544:	bf0c      	ite	eq
 8015546:	231d      	moveq	r3, #29
 8015548:	231c      	movne	r3, #28
 801554a:	6922      	ldr	r2, [r4, #16]
 801554c:	2a01      	cmp	r2, #1
 801554e:	bf14      	ite	ne
 8015550:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8015554:	461a      	moveq	r2, r3
 8015556:	4432      	add	r2, r6
 8015558:	60e2      	str	r2, [r4, #12]
 801555a:	e7a6      	b.n	80154aa <validate_structure+0xe2>
 801555c:	231c      	movs	r3, #28
 801555e:	e7f4      	b.n	801554a <validate_structure+0x182>
 8015560:	231d      	movs	r3, #29
 8015562:	e7f2      	b.n	801554a <validate_structure+0x182>
 8015564:	231c      	movs	r3, #28
 8015566:	e7aa      	b.n	80154be <validate_structure+0xf6>
 8015568:	231d      	movs	r3, #29
 801556a:	e7a8      	b.n	80154be <validate_structure+0xf6>
 801556c:	0801ab40 	.word	0x0801ab40

08015570 <mktime>:
 8015570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015574:	b085      	sub	sp, #20
 8015576:	4607      	mov	r7, r0
 8015578:	f002 fb58 	bl	8017c2c <__gettzinfo>
 801557c:	4681      	mov	r9, r0
 801557e:	4638      	mov	r0, r7
 8015580:	f7ff ff22 	bl	80153c8 <validate_structure>
 8015584:	e9d7 4300 	ldrd	r4, r3, [r7]
 8015588:	223c      	movs	r2, #60	@ 0x3c
 801558a:	fb02 4403 	mla	r4, r2, r3, r4
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	697d      	ldr	r5, [r7, #20]
 8015592:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8015596:	fb02 4403 	mla	r4, r2, r3, r4
 801559a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 801559e:	4ac3      	ldr	r2, [pc, #780]	@ (80158ac <mktime+0x33c>)
 80155a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80155a4:	3e01      	subs	r6, #1
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	4416      	add	r6, r2
 80155aa:	dd11      	ble.n	80155d0 <mktime+0x60>
 80155ac:	07a9      	lsls	r1, r5, #30
 80155ae:	d10f      	bne.n	80155d0 <mktime+0x60>
 80155b0:	2264      	movs	r2, #100	@ 0x64
 80155b2:	fb95 f3f2 	sdiv	r3, r5, r2
 80155b6:	fb02 5313 	mls	r3, r2, r3, r5
 80155ba:	b943      	cbnz	r3, 80155ce <mktime+0x5e>
 80155bc:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80155c0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80155c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80155c8:	fb02 3311 	mls	r3, r2, r1, r3
 80155cc:	b903      	cbnz	r3, 80155d0 <mktime+0x60>
 80155ce:	3601      	adds	r6, #1
 80155d0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80155d4:	3310      	adds	r3, #16
 80155d6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80155da:	4293      	cmp	r3, r2
 80155dc:	61fe      	str	r6, [r7, #28]
 80155de:	f200 8170 	bhi.w	80158c2 <mktime+0x352>
 80155e2:	2d46      	cmp	r5, #70	@ 0x46
 80155e4:	f340 80b6 	ble.w	8015754 <mktime+0x1e4>
 80155e8:	2346      	movs	r3, #70	@ 0x46
 80155ea:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80155ee:	2164      	movs	r1, #100	@ 0x64
 80155f0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80155f4:	079a      	lsls	r2, r3, #30
 80155f6:	f040 80a7 	bne.w	8015748 <mktime+0x1d8>
 80155fa:	fb93 f2f1 	sdiv	r2, r3, r1
 80155fe:	fb01 3212 	mls	r2, r1, r2, r3
 8015602:	2a00      	cmp	r2, #0
 8015604:	f040 80a3 	bne.w	801574e <mktime+0x1de>
 8015608:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801560c:	fb92 fef0 	sdiv	lr, r2, r0
 8015610:	fb00 221e 	mls	r2, r0, lr, r2
 8015614:	2a00      	cmp	r2, #0
 8015616:	bf0c      	ite	eq
 8015618:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801561c:	4662      	movne	r2, ip
 801561e:	3301      	adds	r3, #1
 8015620:	429d      	cmp	r5, r3
 8015622:	4416      	add	r6, r2
 8015624:	d1e6      	bne.n	80155f4 <mktime+0x84>
 8015626:	4ba2      	ldr	r3, [pc, #648]	@ (80158b0 <mktime+0x340>)
 8015628:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801562c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8015630:	f000 fa0a 	bl	8015a48 <__tz_lock>
 8015634:	f000 fa14 	bl	8015a60 <_tzset_unlocked>
 8015638:	4b9e      	ldr	r3, [pc, #632]	@ (80158b4 <mktime+0x344>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2b00      	cmp	r3, #0
 801563e:	f000 8147 	beq.w	80158d0 <mktime+0x360>
 8015642:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8015646:	6978      	ldr	r0, [r7, #20]
 8015648:	4653      	mov	r3, sl
 801564a:	2b01      	cmp	r3, #1
 801564c:	bfa8      	it	ge
 801564e:	2301      	movge	r3, #1
 8015650:	9301      	str	r3, [sp, #4]
 8015652:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015656:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801565a:	4283      	cmp	r3, r0
 801565c:	f040 80bd 	bne.w	80157da <mktime+0x26a>
 8015660:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8015664:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8015668:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801566c:	1a13      	subs	r3, r2, r0
 801566e:	9303      	str	r3, [sp, #12]
 8015670:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8015674:	9302      	str	r3, [sp, #8]
 8015676:	9a02      	ldr	r2, [sp, #8]
 8015678:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801567c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8015680:	ebb2 0e03 	subs.w	lr, r2, r3
 8015684:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8015688:	4574      	cmp	r4, lr
 801568a:	eb78 0201 	sbcs.w	r2, r8, r1
 801568e:	f280 80c7 	bge.w	8015820 <mktime+0x2b0>
 8015692:	f8d9 2000 	ldr.w	r2, [r9]
 8015696:	2a00      	cmp	r2, #0
 8015698:	f000 80d0 	beq.w	801583c <mktime+0x2cc>
 801569c:	9a03      	ldr	r2, [sp, #12]
 801569e:	4294      	cmp	r4, r2
 80156a0:	eb78 020b 	sbcs.w	r2, r8, fp
 80156a4:	f2c0 8111 	blt.w	80158ca <mktime+0x35a>
 80156a8:	4574      	cmp	r4, lr
 80156aa:	eb78 0101 	sbcs.w	r1, r8, r1
 80156ae:	bfb4      	ite	lt
 80156b0:	f04f 0b01 	movlt.w	fp, #1
 80156b4:	f04f 0b00 	movge.w	fp, #0
 80156b8:	f1ba 0f00 	cmp.w	sl, #0
 80156bc:	f2c0 8094 	blt.w	80157e8 <mktime+0x278>
 80156c0:	9a01      	ldr	r2, [sp, #4]
 80156c2:	ea82 0a0b 	eor.w	sl, r2, fp
 80156c6:	f1ba 0f01 	cmp.w	sl, #1
 80156ca:	f040 808d 	bne.w	80157e8 <mktime+0x278>
 80156ce:	f1bb 0f00 	cmp.w	fp, #0
 80156d2:	f000 80c2 	beq.w	801585a <mktime+0x2ea>
 80156d6:	1a1b      	subs	r3, r3, r0
 80156d8:	683a      	ldr	r2, [r7, #0]
 80156da:	441a      	add	r2, r3
 80156dc:	191c      	adds	r4, r3, r4
 80156de:	603a      	str	r2, [r7, #0]
 80156e0:	4638      	mov	r0, r7
 80156e2:	68fa      	ldr	r2, [r7, #12]
 80156e4:	9201      	str	r2, [sp, #4]
 80156e6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80156ea:	f7ff fe6d 	bl	80153c8 <validate_structure>
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	9a01      	ldr	r2, [sp, #4]
 80156f2:	1a9b      	subs	r3, r3, r2
 80156f4:	d078      	beq.n	80157e8 <mktime+0x278>
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	f300 80b1 	bgt.w	801585e <mktime+0x2ee>
 80156fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015700:	bfa8      	it	ge
 8015702:	469a      	movge	sl, r3
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	eb1a 0303 	adds.w	r3, sl, r3
 801570a:	4456      	add	r6, sl
 801570c:	f140 80b0 	bpl.w	8015870 <mktime+0x300>
 8015710:	1e6b      	subs	r3, r5, #1
 8015712:	0799      	lsls	r1, r3, #30
 8015714:	f040 80a6 	bne.w	8015864 <mktime+0x2f4>
 8015718:	2264      	movs	r2, #100	@ 0x64
 801571a:	fb93 f1f2 	sdiv	r1, r3, r2
 801571e:	fb02 3311 	mls	r3, r2, r1, r3
 8015722:	2b00      	cmp	r3, #0
 8015724:	f040 80a1 	bne.w	801586a <mktime+0x2fa>
 8015728:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801572c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8015730:	fb95 f2f3 	sdiv	r2, r5, r3
 8015734:	fb03 5512 	mls	r5, r3, r2, r5
 8015738:	2d00      	cmp	r5, #0
 801573a:	f240 136d 	movw	r3, #365	@ 0x16d
 801573e:	bf18      	it	ne
 8015740:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8015744:	61fb      	str	r3, [r7, #28]
 8015746:	e04f      	b.n	80157e8 <mktime+0x278>
 8015748:	f240 126d 	movw	r2, #365	@ 0x16d
 801574c:	e767      	b.n	801561e <mktime+0xae>
 801574e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8015752:	e764      	b.n	801561e <mktime+0xae>
 8015754:	f43f af67 	beq.w	8015626 <mktime+0xb6>
 8015758:	2345      	movs	r3, #69	@ 0x45
 801575a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801575e:	2164      	movs	r1, #100	@ 0x64
 8015760:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8015764:	e012      	b.n	801578c <mktime+0x21c>
 8015766:	bb62      	cbnz	r2, 80157c2 <mktime+0x252>
 8015768:	fb93 f2f1 	sdiv	r2, r3, r1
 801576c:	fb01 3212 	mls	r2, r1, r2, r3
 8015770:	bb52      	cbnz	r2, 80157c8 <mktime+0x258>
 8015772:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8015776:	fb92 fef0 	sdiv	lr, r2, r0
 801577a:	fb00 221e 	mls	r2, r0, lr, r2
 801577e:	2a00      	cmp	r2, #0
 8015780:	bf0c      	ite	eq
 8015782:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8015786:	4662      	movne	r2, ip
 8015788:	1ab6      	subs	r6, r6, r2
 801578a:	3b01      	subs	r3, #1
 801578c:	429d      	cmp	r5, r3
 801578e:	f003 0203 	and.w	r2, r3, #3
 8015792:	dbe8      	blt.n	8015766 <mktime+0x1f6>
 8015794:	b9da      	cbnz	r2, 80157ce <mktime+0x25e>
 8015796:	2264      	movs	r2, #100	@ 0x64
 8015798:	fb95 f3f2 	sdiv	r3, r5, r2
 801579c:	fb02 5313 	mls	r3, r2, r3, r5
 80157a0:	b9c3      	cbnz	r3, 80157d4 <mktime+0x264>
 80157a2:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80157a6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80157aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80157ae:	fb02 3311 	mls	r3, r2, r1, r3
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f240 136d 	movw	r3, #365	@ 0x16d
 80157b8:	bf08      	it	eq
 80157ba:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80157be:	1af6      	subs	r6, r6, r3
 80157c0:	e731      	b.n	8015626 <mktime+0xb6>
 80157c2:	f240 126d 	movw	r2, #365	@ 0x16d
 80157c6:	e7df      	b.n	8015788 <mktime+0x218>
 80157c8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80157cc:	e7dc      	b.n	8015788 <mktime+0x218>
 80157ce:	f240 136d 	movw	r3, #365	@ 0x16d
 80157d2:	e7f4      	b.n	80157be <mktime+0x24e>
 80157d4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80157d8:	e7f1      	b.n	80157be <mktime+0x24e>
 80157da:	f000 f881 	bl	80158e0 <__tzcalc_limits>
 80157de:	2800      	cmp	r0, #0
 80157e0:	f47f af3e 	bne.w	8015660 <mktime+0xf0>
 80157e4:	f8dd b004 	ldr.w	fp, [sp, #4]
 80157e8:	f1bb 0f01 	cmp.w	fp, #1
 80157ec:	d172      	bne.n	80158d4 <mktime+0x364>
 80157ee:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80157f2:	191c      	adds	r4, r3, r4
 80157f4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80157f8:	f04f 0b01 	mov.w	fp, #1
 80157fc:	f000 f92a 	bl	8015a54 <__tz_unlock>
 8015800:	3604      	adds	r6, #4
 8015802:	2307      	movs	r3, #7
 8015804:	fb96 f3f3 	sdiv	r3, r6, r3
 8015808:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801580c:	1af6      	subs	r6, r6, r3
 801580e:	d456      	bmi.n	80158be <mktime+0x34e>
 8015810:	f8c7 b020 	str.w	fp, [r7, #32]
 8015814:	61be      	str	r6, [r7, #24]
 8015816:	4620      	mov	r0, r4
 8015818:	4641      	mov	r1, r8
 801581a:	b005      	add	sp, #20
 801581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015820:	9a02      	ldr	r2, [sp, #8]
 8015822:	1a12      	subs	r2, r2, r0
 8015824:	9202      	str	r2, [sp, #8]
 8015826:	ea4f 72e0 	mov.w	r2, r0, asr #31
 801582a:	eb6c 0c02 	sbc.w	ip, ip, r2
 801582e:	9a02      	ldr	r2, [sp, #8]
 8015830:	4294      	cmp	r4, r2
 8015832:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8015836:	f6bf af2c 	bge.w	8015692 <mktime+0x122>
 801583a:	e7d3      	b.n	80157e4 <mktime+0x274>
 801583c:	9a03      	ldr	r2, [sp, #12]
 801583e:	4294      	cmp	r4, r2
 8015840:	eb78 020b 	sbcs.w	r2, r8, fp
 8015844:	f6ff af30 	blt.w	80156a8 <mktime+0x138>
 8015848:	f1ba 0f00 	cmp.w	sl, #0
 801584c:	dbcf      	blt.n	80157ee <mktime+0x27e>
 801584e:	f04f 0b01 	mov.w	fp, #1
 8015852:	e735      	b.n	80156c0 <mktime+0x150>
 8015854:	f04f 0b00 	mov.w	fp, #0
 8015858:	e732      	b.n	80156c0 <mktime+0x150>
 801585a:	1ac3      	subs	r3, r0, r3
 801585c:	e73c      	b.n	80156d8 <mktime+0x168>
 801585e:	f04f 3aff 	mov.w	sl, #4294967295
 8015862:	e74f      	b.n	8015704 <mktime+0x194>
 8015864:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8015868:	e76c      	b.n	8015744 <mktime+0x1d4>
 801586a:	f240 136d 	movw	r3, #365	@ 0x16d
 801586e:	e769      	b.n	8015744 <mktime+0x1d4>
 8015870:	07aa      	lsls	r2, r5, #30
 8015872:	d117      	bne.n	80158a4 <mktime+0x334>
 8015874:	2164      	movs	r1, #100	@ 0x64
 8015876:	fb95 f2f1 	sdiv	r2, r5, r1
 801587a:	fb01 5212 	mls	r2, r1, r2, r5
 801587e:	b9da      	cbnz	r2, 80158b8 <mktime+0x348>
 8015880:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015884:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8015888:	fb95 f1f2 	sdiv	r1, r5, r2
 801588c:	fb02 5511 	mls	r5, r2, r1, r5
 8015890:	2d00      	cmp	r5, #0
 8015892:	f240 126d 	movw	r2, #365	@ 0x16d
 8015896:	bf08      	it	eq
 8015898:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801589c:	4293      	cmp	r3, r2
 801589e:	bfa8      	it	ge
 80158a0:	1a9b      	subge	r3, r3, r2
 80158a2:	e74f      	b.n	8015744 <mktime+0x1d4>
 80158a4:	f240 126d 	movw	r2, #365	@ 0x16d
 80158a8:	e7f8      	b.n	801589c <mktime+0x32c>
 80158aa:	bf00      	nop
 80158ac:	0801ab10 	.word	0x0801ab10
 80158b0:	00015180 	.word	0x00015180
 80158b4:	2000a970 	.word	0x2000a970
 80158b8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80158bc:	e7ee      	b.n	801589c <mktime+0x32c>
 80158be:	3607      	adds	r6, #7
 80158c0:	e7a6      	b.n	8015810 <mktime+0x2a0>
 80158c2:	f04f 34ff 	mov.w	r4, #4294967295
 80158c6:	46a0      	mov	r8, r4
 80158c8:	e7a5      	b.n	8015816 <mktime+0x2a6>
 80158ca:	f1ba 0f00 	cmp.w	sl, #0
 80158ce:	dac1      	bge.n	8015854 <mktime+0x2e4>
 80158d0:	f04f 0b00 	mov.w	fp, #0
 80158d4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80158d8:	191c      	adds	r4, r3, r4
 80158da:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80158de:	e78d      	b.n	80157fc <mktime+0x28c>

080158e0 <__tzcalc_limits>:
 80158e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158e4:	4604      	mov	r4, r0
 80158e6:	f002 f9a1 	bl	8017c2c <__gettzinfo>
 80158ea:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80158ee:	429c      	cmp	r4, r3
 80158f0:	f340 80a3 	ble.w	8015a3a <__tzcalc_limits+0x15a>
 80158f4:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 80158f8:	1865      	adds	r5, r4, r1
 80158fa:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80158fe:	f240 126d 	movw	r2, #365	@ 0x16d
 8015902:	10ad      	asrs	r5, r5, #2
 8015904:	fb02 5503 	mla	r5, r2, r3, r5
 8015908:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 801590c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8015910:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8015914:	fb93 f3f2 	sdiv	r3, r3, r2
 8015918:	441d      	add	r5, r3
 801591a:	19a3      	adds	r3, r4, r6
 801591c:	4e48      	ldr	r6, [pc, #288]	@ (8015a40 <__tzcalc_limits+0x160>)
 801591e:	6044      	str	r4, [r0, #4]
 8015920:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015924:	4601      	mov	r1, r0
 8015926:	fbb3 f3f2 	udiv	r3, r3, r2
 801592a:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 801592e:	441d      	add	r5, r3
 8015930:	7a0b      	ldrb	r3, [r1, #8]
 8015932:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8015936:	2b4a      	cmp	r3, #74	@ 0x4a
 8015938:	d138      	bne.n	80159ac <__tzcalc_limits+0xcc>
 801593a:	07a2      	lsls	r2, r4, #30
 801593c:	eb05 030c 	add.w	r3, r5, ip
 8015940:	d106      	bne.n	8015950 <__tzcalc_limits+0x70>
 8015942:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8015946:	fb94 f2fe 	sdiv	r2, r4, lr
 801594a:	fb0e 4212 	mls	r2, lr, r2, r4
 801594e:	b932      	cbnz	r2, 801595e <__tzcalc_limits+0x7e>
 8015950:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8015954:	fb94 f2fe 	sdiv	r2, r4, lr
 8015958:	fb0e 4212 	mls	r2, lr, r2, r4
 801595c:	bb1a      	cbnz	r2, 80159a6 <__tzcalc_limits+0xc6>
 801595e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8015962:	bfd4      	ite	le
 8015964:	f04f 0c00 	movle.w	ip, #0
 8015968:	f04f 0c01 	movgt.w	ip, #1
 801596c:	4463      	add	r3, ip
 801596e:	3b01      	subs	r3, #1
 8015970:	698a      	ldr	r2, [r1, #24]
 8015972:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8015976:	fbc3 2c06 	smlal	r2, ip, r3, r6
 801597a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801597c:	18d2      	adds	r2, r2, r3
 801597e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8015982:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8015986:	3128      	adds	r1, #40	@ 0x28
 8015988:	428f      	cmp	r7, r1
 801598a:	d1d1      	bne.n	8015930 <__tzcalc_limits+0x50>
 801598c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8015990:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8015994:	428c      	cmp	r4, r1
 8015996:	4193      	sbcs	r3, r2
 8015998:	bfb4      	ite	lt
 801599a:	2301      	movlt	r3, #1
 801599c:	2300      	movge	r3, #0
 801599e:	6003      	str	r3, [r0, #0]
 80159a0:	2001      	movs	r0, #1
 80159a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159a6:	f04f 0c00 	mov.w	ip, #0
 80159aa:	e7df      	b.n	801596c <__tzcalc_limits+0x8c>
 80159ac:	2b44      	cmp	r3, #68	@ 0x44
 80159ae:	d102      	bne.n	80159b6 <__tzcalc_limits+0xd6>
 80159b0:	eb05 030c 	add.w	r3, r5, ip
 80159b4:	e7dc      	b.n	8015970 <__tzcalc_limits+0x90>
 80159b6:	07a3      	lsls	r3, r4, #30
 80159b8:	d105      	bne.n	80159c6 <__tzcalc_limits+0xe6>
 80159ba:	2264      	movs	r2, #100	@ 0x64
 80159bc:	fb94 f3f2 	sdiv	r3, r4, r2
 80159c0:	fb02 4313 	mls	r3, r2, r3, r4
 80159c4:	bb93      	cbnz	r3, 8015a2c <__tzcalc_limits+0x14c>
 80159c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80159ca:	fb94 f3f2 	sdiv	r3, r4, r2
 80159ce:	fb02 4313 	mls	r3, r2, r3, r4
 80159d2:	fab3 f383 	clz	r3, r3
 80159d6:	095b      	lsrs	r3, r3, #5
 80159d8:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8015a44 <__tzcalc_limits+0x164>
 80159dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80159e0:	425b      	negs	r3, r3
 80159e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80159e6:	462a      	mov	r2, r5
 80159e8:	f04f 0800 	mov.w	r8, #0
 80159ec:	4473      	add	r3, lr
 80159ee:	f108 0801 	add.w	r8, r8, #1
 80159f2:	45c1      	cmp	r9, r8
 80159f4:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 80159f8:	dc1a      	bgt.n	8015a30 <__tzcalc_limits+0x150>
 80159fa:	f102 0804 	add.w	r8, r2, #4
 80159fe:	2307      	movs	r3, #7
 8015a00:	fb98 f3f3 	sdiv	r3, r8, r3
 8015a04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015a08:	eba8 0303 	sub.w	r3, r8, r3
 8015a0c:	ebbc 0c03 	subs.w	ip, ip, r3
 8015a10:	690b      	ldr	r3, [r1, #16]
 8015a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a16:	bf48      	it	mi
 8015a18:	f10c 0c07 	addmi.w	ip, ip, #7
 8015a1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015a20:	449c      	add	ip, r3
 8015a22:	45f4      	cmp	ip, lr
 8015a24:	da06      	bge.n	8015a34 <__tzcalc_limits+0x154>
 8015a26:	eb02 030c 	add.w	r3, r2, ip
 8015a2a:	e7a1      	b.n	8015970 <__tzcalc_limits+0x90>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e7d3      	b.n	80159d8 <__tzcalc_limits+0xf8>
 8015a30:	4472      	add	r2, lr
 8015a32:	e7dc      	b.n	80159ee <__tzcalc_limits+0x10e>
 8015a34:	f1ac 0c07 	sub.w	ip, ip, #7
 8015a38:	e7f3      	b.n	8015a22 <__tzcalc_limits+0x142>
 8015a3a:	2000      	movs	r0, #0
 8015a3c:	e7b1      	b.n	80159a2 <__tzcalc_limits+0xc2>
 8015a3e:	bf00      	nop
 8015a40:	00015180 	.word	0x00015180
 8015a44:	0801ab6c 	.word	0x0801ab6c

08015a48 <__tz_lock>:
 8015a48:	4801      	ldr	r0, [pc, #4]	@ (8015a50 <__tz_lock+0x8>)
 8015a4a:	f000 baa6 	b.w	8015f9a <__retarget_lock_acquire>
 8015a4e:	bf00      	nop
 8015a50:	2000a978 	.word	0x2000a978

08015a54 <__tz_unlock>:
 8015a54:	4801      	ldr	r0, [pc, #4]	@ (8015a5c <__tz_unlock+0x8>)
 8015a56:	f000 baa2 	b.w	8015f9e <__retarget_lock_release>
 8015a5a:	bf00      	nop
 8015a5c:	2000a978 	.word	0x2000a978

08015a60 <_tzset_unlocked>:
 8015a60:	4b01      	ldr	r3, [pc, #4]	@ (8015a68 <_tzset_unlocked+0x8>)
 8015a62:	6818      	ldr	r0, [r3, #0]
 8015a64:	f000 b802 	b.w	8015a6c <_tzset_unlocked_r>
 8015a68:	20000038 	.word	0x20000038

08015a6c <_tzset_unlocked_r>:
 8015a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a70:	b08d      	sub	sp, #52	@ 0x34
 8015a72:	4607      	mov	r7, r0
 8015a74:	f002 f8da 	bl	8017c2c <__gettzinfo>
 8015a78:	49bc      	ldr	r1, [pc, #752]	@ (8015d6c <_tzset_unlocked_r+0x300>)
 8015a7a:	4dbd      	ldr	r5, [pc, #756]	@ (8015d70 <_tzset_unlocked_r+0x304>)
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	4638      	mov	r0, r7
 8015a80:	f001 f9ac 	bl	8016ddc <_getenv_r>
 8015a84:	4606      	mov	r6, r0
 8015a86:	bb10      	cbnz	r0, 8015ace <_tzset_unlocked_r+0x62>
 8015a88:	4bba      	ldr	r3, [pc, #744]	@ (8015d74 <_tzset_unlocked_r+0x308>)
 8015a8a:	4abb      	ldr	r2, [pc, #748]	@ (8015d78 <_tzset_unlocked_r+0x30c>)
 8015a8c:	6018      	str	r0, [r3, #0]
 8015a8e:	4bbb      	ldr	r3, [pc, #748]	@ (8015d7c <_tzset_unlocked_r+0x310>)
 8015a90:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015a92:	6018      	str	r0, [r3, #0]
 8015a94:	4bba      	ldr	r3, [pc, #744]	@ (8015d80 <_tzset_unlocked_r+0x314>)
 8015a96:	6520      	str	r0, [r4, #80]	@ 0x50
 8015a98:	e9c3 2200 	strd	r2, r2, [r3]
 8015a9c:	214a      	movs	r1, #74	@ 0x4a
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8015aa6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8015aaa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8015aae:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8015ab2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015ab6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8015aba:	6828      	ldr	r0, [r5, #0]
 8015abc:	7221      	strb	r1, [r4, #8]
 8015abe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8015ac2:	f001 f99b 	bl	8016dfc <free>
 8015ac6:	602e      	str	r6, [r5, #0]
 8015ac8:	b00d      	add	sp, #52	@ 0x34
 8015aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ace:	6829      	ldr	r1, [r5, #0]
 8015ad0:	2900      	cmp	r1, #0
 8015ad2:	f040 808e 	bne.w	8015bf2 <_tzset_unlocked_r+0x186>
 8015ad6:	6828      	ldr	r0, [r5, #0]
 8015ad8:	f001 f990 	bl	8016dfc <free>
 8015adc:	4630      	mov	r0, r6
 8015ade:	f7ea fbaf 	bl	8000240 <strlen>
 8015ae2:	1c41      	adds	r1, r0, #1
 8015ae4:	4638      	mov	r0, r7
 8015ae6:	f001 f9b3 	bl	8016e50 <_malloc_r>
 8015aea:	6028      	str	r0, [r5, #0]
 8015aec:	2800      	cmp	r0, #0
 8015aee:	f040 8086 	bne.w	8015bfe <_tzset_unlocked_r+0x192>
 8015af2:	4aa2      	ldr	r2, [pc, #648]	@ (8015d7c <_tzset_unlocked_r+0x310>)
 8015af4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8015d80 <_tzset_unlocked_r+0x314>
 8015af8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8015d74 <_tzset_unlocked_r+0x308>
 8015afc:	2300      	movs	r3, #0
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	4aa0      	ldr	r2, [pc, #640]	@ (8015d84 <_tzset_unlocked_r+0x318>)
 8015b02:	f8ca 3000 	str.w	r3, [sl]
 8015b06:	2000      	movs	r0, #0
 8015b08:	2100      	movs	r1, #0
 8015b0a:	e9c8 2200 	strd	r2, r2, [r8]
 8015b0e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8015b12:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8015b16:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8015b1a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015b1e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8015b22:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8015b26:	224a      	movs	r2, #74	@ 0x4a
 8015b28:	7222      	strb	r2, [r4, #8]
 8015b2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015b2c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8015b30:	6523      	str	r3, [r4, #80]	@ 0x50
 8015b32:	7833      	ldrb	r3, [r6, #0]
 8015b34:	2b3a      	cmp	r3, #58	@ 0x3a
 8015b36:	bf08      	it	eq
 8015b38:	3601      	addeq	r6, #1
 8015b3a:	7833      	ldrb	r3, [r6, #0]
 8015b3c:	2b3c      	cmp	r3, #60	@ 0x3c
 8015b3e:	d162      	bne.n	8015c06 <_tzset_unlocked_r+0x19a>
 8015b40:	1c75      	adds	r5, r6, #1
 8015b42:	4a91      	ldr	r2, [pc, #580]	@ (8015d88 <_tzset_unlocked_r+0x31c>)
 8015b44:	4991      	ldr	r1, [pc, #580]	@ (8015d8c <_tzset_unlocked_r+0x320>)
 8015b46:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b48:	4628      	mov	r0, r5
 8015b4a:	f002 f817 	bl	8017b7c <siscanf>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	ddba      	ble.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b54:	1eda      	subs	r2, r3, #3
 8015b56:	2a07      	cmp	r2, #7
 8015b58:	d8b6      	bhi.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015b5a:	5ceb      	ldrb	r3, [r5, r3]
 8015b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b5e:	d1b3      	bne.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015b60:	3602      	adds	r6, #2
 8015b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b64:	18f5      	adds	r5, r6, r3
 8015b66:	5cf3      	ldrb	r3, [r6, r3]
 8015b68:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b6a:	d15a      	bne.n	8015c22 <_tzset_unlocked_r+0x1b6>
 8015b6c:	3501      	adds	r5, #1
 8015b6e:	f04f 39ff 	mov.w	r9, #4294967295
 8015b72:	2300      	movs	r3, #0
 8015b74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015b78:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015b7c:	af08      	add	r7, sp, #32
 8015b7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b80:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8015b84:	9303      	str	r3, [sp, #12]
 8015b86:	f10d 031e 	add.w	r3, sp, #30
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	4980      	ldr	r1, [pc, #512]	@ (8015d90 <_tzset_unlocked_r+0x324>)
 8015b8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b90:	aa07      	add	r2, sp, #28
 8015b92:	4628      	mov	r0, r5
 8015b94:	f001 fff2 	bl	8017b7c <siscanf>
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	dd95      	ble.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015b9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015ba0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8015ba4:	223c      	movs	r2, #60	@ 0x3c
 8015ba6:	fb02 6603 	mla	r6, r2, r3, r6
 8015baa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015bae:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8015bb2:	fb02 6603 	mla	r6, r2, r3, r6
 8015bb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bb8:	fb09 f606 	mul.w	r6, r9, r6
 8015bbc:	eb05 0903 	add.w	r9, r5, r3
 8015bc0:	5ceb      	ldrb	r3, [r5, r3]
 8015bc2:	2b3c      	cmp	r3, #60	@ 0x3c
 8015bc4:	f040 80ee 	bne.w	8015da4 <_tzset_unlocked_r+0x338>
 8015bc8:	f109 0501 	add.w	r5, r9, #1
 8015bcc:	4a71      	ldr	r2, [pc, #452]	@ (8015d94 <_tzset_unlocked_r+0x328>)
 8015bce:	496f      	ldr	r1, [pc, #444]	@ (8015d8c <_tzset_unlocked_r+0x320>)
 8015bd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8015bd2:	4628      	mov	r0, r5
 8015bd4:	f001 ffd2 	bl	8017b7c <siscanf>
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	dc28      	bgt.n	8015c2e <_tzset_unlocked_r+0x1c2>
 8015bdc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8015be0:	2b3e      	cmp	r3, #62	@ 0x3e
 8015be2:	d124      	bne.n	8015c2e <_tzset_unlocked_r+0x1c2>
 8015be4:	4b68      	ldr	r3, [pc, #416]	@ (8015d88 <_tzset_unlocked_r+0x31c>)
 8015be6:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015be8:	e9c8 3300 	strd	r3, r3, [r8]
 8015bec:	f8ca 6000 	str.w	r6, [sl]
 8015bf0:	e76a      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015bf2:	f7ea fac5 	bl	8000180 <strcmp>
 8015bf6:	2800      	cmp	r0, #0
 8015bf8:	f47f af6d 	bne.w	8015ad6 <_tzset_unlocked_r+0x6a>
 8015bfc:	e764      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015bfe:	4631      	mov	r1, r6
 8015c00:	f000 f9cf 	bl	8015fa2 <strcpy>
 8015c04:	e775      	b.n	8015af2 <_tzset_unlocked_r+0x86>
 8015c06:	4a60      	ldr	r2, [pc, #384]	@ (8015d88 <_tzset_unlocked_r+0x31c>)
 8015c08:	4963      	ldr	r1, [pc, #396]	@ (8015d98 <_tzset_unlocked_r+0x32c>)
 8015c0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	f001 ffb5 	bl	8017b7c <siscanf>
 8015c12:	2800      	cmp	r0, #0
 8015c14:	f77f af58 	ble.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c1a:	3b03      	subs	r3, #3
 8015c1c:	2b07      	cmp	r3, #7
 8015c1e:	d9a0      	bls.n	8015b62 <_tzset_unlocked_r+0xf6>
 8015c20:	e752      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015c22:	2b2b      	cmp	r3, #43	@ 0x2b
 8015c24:	bf08      	it	eq
 8015c26:	3501      	addeq	r5, #1
 8015c28:	f04f 0901 	mov.w	r9, #1
 8015c2c:	e7a1      	b.n	8015b72 <_tzset_unlocked_r+0x106>
 8015c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c30:	1eda      	subs	r2, r3, #3
 8015c32:	2a07      	cmp	r2, #7
 8015c34:	f63f af48 	bhi.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015c38:	5ceb      	ldrb	r3, [r5, r3]
 8015c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8015c3c:	f47f af44 	bne.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015c40:	f109 0902 	add.w	r9, r9, #2
 8015c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c46:	eb09 0503 	add.w	r5, r9, r3
 8015c4a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015c4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8015c50:	f040 80b7 	bne.w	8015dc2 <_tzset_unlocked_r+0x356>
 8015c54:	3501      	adds	r5, #1
 8015c56:	f04f 39ff 	mov.w	r9, #4294967295
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015c64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c68:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c6a:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c6c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8015c70:	9301      	str	r3, [sp, #4]
 8015c72:	f10d 031e 	add.w	r3, sp, #30
 8015c76:	9300      	str	r3, [sp, #0]
 8015c78:	4945      	ldr	r1, [pc, #276]	@ (8015d90 <_tzset_unlocked_r+0x324>)
 8015c7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8015c7c:	aa07      	add	r2, sp, #28
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f001 ff7c 	bl	8017b7c <siscanf>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	f300 80a2 	bgt.w	8015dce <_tzset_unlocked_r+0x362>
 8015c8a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8015c8e:	9304      	str	r3, [sp, #16]
 8015c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c92:	4627      	mov	r7, r4
 8015c94:	441d      	add	r5, r3
 8015c96:	f04f 0b00 	mov.w	fp, #0
 8015c9a:	782b      	ldrb	r3, [r5, #0]
 8015c9c:	2b2c      	cmp	r3, #44	@ 0x2c
 8015c9e:	bf08      	it	eq
 8015ca0:	3501      	addeq	r5, #1
 8015ca2:	f895 9000 	ldrb.w	r9, [r5]
 8015ca6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8015caa:	f040 80a3 	bne.w	8015df4 <_tzset_unlocked_r+0x388>
 8015cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8015cb0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8015cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015cb8:	aa09      	add	r2, sp, #36	@ 0x24
 8015cba:	9200      	str	r2, [sp, #0]
 8015cbc:	4937      	ldr	r1, [pc, #220]	@ (8015d9c <_tzset_unlocked_r+0x330>)
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	f001 ff59 	bl	8017b7c <siscanf>
 8015cca:	2803      	cmp	r0, #3
 8015ccc:	f47f aefc 	bne.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015cd0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8015cd4:	1e4b      	subs	r3, r1, #1
 8015cd6:	2b0b      	cmp	r3, #11
 8015cd8:	f63f aef6 	bhi.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015cdc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8015ce0:	1e53      	subs	r3, r2, #1
 8015ce2:	2b04      	cmp	r3, #4
 8015ce4:	f63f aef0 	bhi.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015ce8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015cec:	2b06      	cmp	r3, #6
 8015cee:	f63f aeeb 	bhi.w	8015ac8 <_tzset_unlocked_r+0x5c>
 8015cf2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8015cf6:	f887 9008 	strb.w	r9, [r7, #8]
 8015cfa:	617b      	str	r3, [r7, #20]
 8015cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cfe:	eb05 0903 	add.w	r9, r5, r3
 8015d02:	2500      	movs	r5, #0
 8015d04:	f04f 0302 	mov.w	r3, #2
 8015d08:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015d0c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8015d10:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015d14:	950a      	str	r5, [sp, #40]	@ 0x28
 8015d16:	f899 3000 	ldrb.w	r3, [r9]
 8015d1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d1c:	f040 8096 	bne.w	8015e4c <_tzset_unlocked_r+0x3e0>
 8015d20:	ab0a      	add	r3, sp, #40	@ 0x28
 8015d22:	aa08      	add	r2, sp, #32
 8015d24:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015d28:	f10d 021e 	add.w	r2, sp, #30
 8015d2c:	9200      	str	r2, [sp, #0]
 8015d2e:	491c      	ldr	r1, [pc, #112]	@ (8015da0 <_tzset_unlocked_r+0x334>)
 8015d30:	9303      	str	r3, [sp, #12]
 8015d32:	aa07      	add	r2, sp, #28
 8015d34:	4648      	mov	r0, r9
 8015d36:	f001 ff21 	bl	8017b7c <siscanf>
 8015d3a:	42a8      	cmp	r0, r5
 8015d3c:	f300 8086 	bgt.w	8015e4c <_tzset_unlocked_r+0x3e0>
 8015d40:	214a      	movs	r1, #74	@ 0x4a
 8015d42:	2200      	movs	r2, #0
 8015d44:	2300      	movs	r3, #0
 8015d46:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8015d4a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015d4e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015d52:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8015d56:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8015d5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8015d5e:	7221      	strb	r1, [r4, #8]
 8015d60:	62a5      	str	r5, [r4, #40]	@ 0x28
 8015d62:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8015d66:	6525      	str	r5, [r4, #80]	@ 0x50
 8015d68:	e6ae      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015d6a:	bf00      	nop
 8015d6c:	0801a97e 	.word	0x0801a97e
 8015d70:	2000a950 	.word	0x2000a950
 8015d74:	2000a96c 	.word	0x2000a96c
 8015d78:	0801a981 	.word	0x0801a981
 8015d7c:	2000a970 	.word	0x2000a970
 8015d80:	20000030 	.word	0x20000030
 8015d84:	0801aa07 	.word	0x0801aa07
 8015d88:	2000a960 	.word	0x2000a960
 8015d8c:	0801a985 	.word	0x0801a985
 8015d90:	0801a9ba 	.word	0x0801a9ba
 8015d94:	2000a954 	.word	0x2000a954
 8015d98:	0801a998 	.word	0x0801a998
 8015d9c:	0801a9a6 	.word	0x0801a9a6
 8015da0:	0801a9b9 	.word	0x0801a9b9
 8015da4:	4a3e      	ldr	r2, [pc, #248]	@ (8015ea0 <_tzset_unlocked_r+0x434>)
 8015da6:	493f      	ldr	r1, [pc, #252]	@ (8015ea4 <_tzset_unlocked_r+0x438>)
 8015da8:	ab0a      	add	r3, sp, #40	@ 0x28
 8015daa:	4648      	mov	r0, r9
 8015dac:	f001 fee6 	bl	8017b7c <siscanf>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	f77f af17 	ble.w	8015be4 <_tzset_unlocked_r+0x178>
 8015db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015db8:	3b03      	subs	r3, #3
 8015dba:	2b07      	cmp	r3, #7
 8015dbc:	f67f af42 	bls.w	8015c44 <_tzset_unlocked_r+0x1d8>
 8015dc0:	e682      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015dc2:	2b2b      	cmp	r3, #43	@ 0x2b
 8015dc4:	bf08      	it	eq
 8015dc6:	3501      	addeq	r5, #1
 8015dc8:	f04f 0901 	mov.w	r9, #1
 8015dcc:	e745      	b.n	8015c5a <_tzset_unlocked_r+0x1ee>
 8015dce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015dd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015dd6:	213c      	movs	r1, #60	@ 0x3c
 8015dd8:	fb01 3302 	mla	r3, r1, r2, r3
 8015ddc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015de0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8015de4:	fb01 3302 	mla	r3, r1, r2, r3
 8015de8:	fb09 f303 	mul.w	r3, r9, r3
 8015dec:	e74f      	b.n	8015c8e <_tzset_unlocked_r+0x222>
 8015dee:	f04f 0b01 	mov.w	fp, #1
 8015df2:	e752      	b.n	8015c9a <_tzset_unlocked_r+0x22e>
 8015df4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8015df8:	bf06      	itte	eq
 8015dfa:	3501      	addeq	r5, #1
 8015dfc:	464b      	moveq	r3, r9
 8015dfe:	2344      	movne	r3, #68	@ 0x44
 8015e00:	220a      	movs	r2, #10
 8015e02:	a90b      	add	r1, sp, #44	@ 0x2c
 8015e04:	4628      	mov	r0, r5
 8015e06:	9305      	str	r3, [sp, #20]
 8015e08:	f001 fc98 	bl	801773c <strtoul>
 8015e0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8015e10:	9b05      	ldr	r3, [sp, #20]
 8015e12:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8015e16:	45a9      	cmp	r9, r5
 8015e18:	d114      	bne.n	8015e44 <_tzset_unlocked_r+0x3d8>
 8015e1a:	234d      	movs	r3, #77	@ 0x4d
 8015e1c:	f1bb 0f00 	cmp.w	fp, #0
 8015e20:	d107      	bne.n	8015e32 <_tzset_unlocked_r+0x3c6>
 8015e22:	7223      	strb	r3, [r4, #8]
 8015e24:	2103      	movs	r1, #3
 8015e26:	2302      	movs	r3, #2
 8015e28:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8015e2c:	f8c4 b014 	str.w	fp, [r4, #20]
 8015e30:	e767      	b.n	8015d02 <_tzset_unlocked_r+0x296>
 8015e32:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8015e36:	220b      	movs	r2, #11
 8015e38:	2301      	movs	r3, #1
 8015e3a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8015e3e:	2300      	movs	r3, #0
 8015e40:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015e42:	e75e      	b.n	8015d02 <_tzset_unlocked_r+0x296>
 8015e44:	b280      	uxth	r0, r0
 8015e46:	723b      	strb	r3, [r7, #8]
 8015e48:	6178      	str	r0, [r7, #20]
 8015e4a:	e75a      	b.n	8015d02 <_tzset_unlocked_r+0x296>
 8015e4c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015e50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015e54:	213c      	movs	r1, #60	@ 0x3c
 8015e56:	fb01 3302 	mla	r3, r1, r2, r3
 8015e5a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015e5e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8015e62:	fb01 3302 	mla	r3, r1, r2, r3
 8015e66:	61bb      	str	r3, [r7, #24]
 8015e68:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015e6a:	3728      	adds	r7, #40	@ 0x28
 8015e6c:	444d      	add	r5, r9
 8015e6e:	f1bb 0f00 	cmp.w	fp, #0
 8015e72:	d0bc      	beq.n	8015dee <_tzset_unlocked_r+0x382>
 8015e74:	9b04      	ldr	r3, [sp, #16]
 8015e76:	6523      	str	r3, [r4, #80]	@ 0x50
 8015e78:	4b0b      	ldr	r3, [pc, #44]	@ (8015ea8 <_tzset_unlocked_r+0x43c>)
 8015e7a:	f8c8 3000 	str.w	r3, [r8]
 8015e7e:	6860      	ldr	r0, [r4, #4]
 8015e80:	4b07      	ldr	r3, [pc, #28]	@ (8015ea0 <_tzset_unlocked_r+0x434>)
 8015e82:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015e84:	f8c8 3004 	str.w	r3, [r8, #4]
 8015e88:	f7ff fd2a 	bl	80158e0 <__tzcalc_limits>
 8015e8c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015e8e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015e90:	f8ca 2000 	str.w	r2, [sl]
 8015e94:	1a9b      	subs	r3, r3, r2
 8015e96:	4a05      	ldr	r2, [pc, #20]	@ (8015eac <_tzset_unlocked_r+0x440>)
 8015e98:	bf18      	it	ne
 8015e9a:	2301      	movne	r3, #1
 8015e9c:	6013      	str	r3, [r2, #0]
 8015e9e:	e613      	b.n	8015ac8 <_tzset_unlocked_r+0x5c>
 8015ea0:	2000a954 	.word	0x2000a954
 8015ea4:	0801a998 	.word	0x0801a998
 8015ea8:	2000a960 	.word	0x2000a960
 8015eac:	2000a970 	.word	0x2000a970

08015eb0 <_localeconv_r>:
 8015eb0:	4800      	ldr	r0, [pc, #0]	@ (8015eb4 <_localeconv_r+0x4>)
 8015eb2:	4770      	bx	lr
 8015eb4:	200001d0 	.word	0x200001d0

08015eb8 <_close_r>:
 8015eb8:	b538      	push	{r3, r4, r5, lr}
 8015eba:	4d06      	ldr	r5, [pc, #24]	@ (8015ed4 <_close_r+0x1c>)
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	4608      	mov	r0, r1
 8015ec2:	602b      	str	r3, [r5, #0]
 8015ec4:	f7f6 fae0 	bl	800c488 <_close>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_close_r+0x1a>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_close_r+0x1a>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	2000a974 	.word	0x2000a974

08015ed8 <_lseek_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4d07      	ldr	r5, [pc, #28]	@ (8015ef8 <_lseek_r+0x20>)
 8015edc:	4604      	mov	r4, r0
 8015ede:	4608      	mov	r0, r1
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	602a      	str	r2, [r5, #0]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f7f6 faf5 	bl	800c4d6 <_lseek>
 8015eec:	1c43      	adds	r3, r0, #1
 8015eee:	d102      	bne.n	8015ef6 <_lseek_r+0x1e>
 8015ef0:	682b      	ldr	r3, [r5, #0]
 8015ef2:	b103      	cbz	r3, 8015ef6 <_lseek_r+0x1e>
 8015ef4:	6023      	str	r3, [r4, #0]
 8015ef6:	bd38      	pop	{r3, r4, r5, pc}
 8015ef8:	2000a974 	.word	0x2000a974

08015efc <_read_r>:
 8015efc:	b538      	push	{r3, r4, r5, lr}
 8015efe:	4d07      	ldr	r5, [pc, #28]	@ (8015f1c <_read_r+0x20>)
 8015f00:	4604      	mov	r4, r0
 8015f02:	4608      	mov	r0, r1
 8015f04:	4611      	mov	r1, r2
 8015f06:	2200      	movs	r2, #0
 8015f08:	602a      	str	r2, [r5, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	f7f6 fa83 	bl	800c416 <_read>
 8015f10:	1c43      	adds	r3, r0, #1
 8015f12:	d102      	bne.n	8015f1a <_read_r+0x1e>
 8015f14:	682b      	ldr	r3, [r5, #0]
 8015f16:	b103      	cbz	r3, 8015f1a <_read_r+0x1e>
 8015f18:	6023      	str	r3, [r4, #0]
 8015f1a:	bd38      	pop	{r3, r4, r5, pc}
 8015f1c:	2000a974 	.word	0x2000a974

08015f20 <_write_r>:
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	4d07      	ldr	r5, [pc, #28]	@ (8015f40 <_write_r+0x20>)
 8015f24:	4604      	mov	r4, r0
 8015f26:	4608      	mov	r0, r1
 8015f28:	4611      	mov	r1, r2
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	602a      	str	r2, [r5, #0]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	f7f6 fa8e 	bl	800c450 <_write>
 8015f34:	1c43      	adds	r3, r0, #1
 8015f36:	d102      	bne.n	8015f3e <_write_r+0x1e>
 8015f38:	682b      	ldr	r3, [r5, #0]
 8015f3a:	b103      	cbz	r3, 8015f3e <_write_r+0x1e>
 8015f3c:	6023      	str	r3, [r4, #0]
 8015f3e:	bd38      	pop	{r3, r4, r5, pc}
 8015f40:	2000a974 	.word	0x2000a974

08015f44 <__errno>:
 8015f44:	4b01      	ldr	r3, [pc, #4]	@ (8015f4c <__errno+0x8>)
 8015f46:	6818      	ldr	r0, [r3, #0]
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop
 8015f4c:	20000038 	.word	0x20000038

08015f50 <__libc_init_array>:
 8015f50:	b570      	push	{r4, r5, r6, lr}
 8015f52:	4d0d      	ldr	r5, [pc, #52]	@ (8015f88 <__libc_init_array+0x38>)
 8015f54:	4c0d      	ldr	r4, [pc, #52]	@ (8015f8c <__libc_init_array+0x3c>)
 8015f56:	1b64      	subs	r4, r4, r5
 8015f58:	10a4      	asrs	r4, r4, #2
 8015f5a:	2600      	movs	r6, #0
 8015f5c:	42a6      	cmp	r6, r4
 8015f5e:	d109      	bne.n	8015f74 <__libc_init_array+0x24>
 8015f60:	4d0b      	ldr	r5, [pc, #44]	@ (8015f90 <__libc_init_array+0x40>)
 8015f62:	4c0c      	ldr	r4, [pc, #48]	@ (8015f94 <__libc_init_array+0x44>)
 8015f64:	f002 fe46 	bl	8018bf4 <_init>
 8015f68:	1b64      	subs	r4, r4, r5
 8015f6a:	10a4      	asrs	r4, r4, #2
 8015f6c:	2600      	movs	r6, #0
 8015f6e:	42a6      	cmp	r6, r4
 8015f70:	d105      	bne.n	8015f7e <__libc_init_array+0x2e>
 8015f72:	bd70      	pop	{r4, r5, r6, pc}
 8015f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f78:	4798      	blx	r3
 8015f7a:	3601      	adds	r6, #1
 8015f7c:	e7ee      	b.n	8015f5c <__libc_init_array+0xc>
 8015f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f82:	4798      	blx	r3
 8015f84:	3601      	adds	r6, #1
 8015f86:	e7f2      	b.n	8015f6e <__libc_init_array+0x1e>
 8015f88:	0801addc 	.word	0x0801addc
 8015f8c:	0801addc 	.word	0x0801addc
 8015f90:	0801addc 	.word	0x0801addc
 8015f94:	0801ade0 	.word	0x0801ade0

08015f98 <__retarget_lock_init_recursive>:
 8015f98:	4770      	bx	lr

08015f9a <__retarget_lock_acquire>:
 8015f9a:	4770      	bx	lr

08015f9c <__retarget_lock_acquire_recursive>:
 8015f9c:	4770      	bx	lr

08015f9e <__retarget_lock_release>:
 8015f9e:	4770      	bx	lr

08015fa0 <__retarget_lock_release_recursive>:
 8015fa0:	4770      	bx	lr

08015fa2 <strcpy>:
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fa8:	f803 2b01 	strb.w	r2, [r3], #1
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	d1f9      	bne.n	8015fa4 <strcpy+0x2>
 8015fb0:	4770      	bx	lr

08015fb2 <memcpy>:
 8015fb2:	440a      	add	r2, r1
 8015fb4:	4291      	cmp	r1, r2
 8015fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8015fba:	d100      	bne.n	8015fbe <memcpy+0xc>
 8015fbc:	4770      	bx	lr
 8015fbe:	b510      	push	{r4, lr}
 8015fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fc8:	4291      	cmp	r1, r2
 8015fca:	d1f9      	bne.n	8015fc0 <memcpy+0xe>
 8015fcc:	bd10      	pop	{r4, pc}
	...

08015fd0 <__assert_func>:
 8015fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fd2:	4614      	mov	r4, r2
 8015fd4:	461a      	mov	r2, r3
 8015fd6:	4b09      	ldr	r3, [pc, #36]	@ (8015ffc <__assert_func+0x2c>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	4605      	mov	r5, r0
 8015fdc:	68d8      	ldr	r0, [r3, #12]
 8015fde:	b14c      	cbz	r4, 8015ff4 <__assert_func+0x24>
 8015fe0:	4b07      	ldr	r3, [pc, #28]	@ (8016000 <__assert_func+0x30>)
 8015fe2:	9100      	str	r1, [sp, #0]
 8015fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015fe8:	4906      	ldr	r1, [pc, #24]	@ (8016004 <__assert_func+0x34>)
 8015fea:	462b      	mov	r3, r5
 8015fec:	f001 fdb4 	bl	8017b58 <fiprintf>
 8015ff0:	f001 fed6 	bl	8017da0 <abort>
 8015ff4:	4b04      	ldr	r3, [pc, #16]	@ (8016008 <__assert_func+0x38>)
 8015ff6:	461c      	mov	r4, r3
 8015ff8:	e7f3      	b.n	8015fe2 <__assert_func+0x12>
 8015ffa:	bf00      	nop
 8015ffc:	20000038 	.word	0x20000038
 8016000:	0801a9cc 	.word	0x0801a9cc
 8016004:	0801a9d9 	.word	0x0801a9d9
 8016008:	0801aa07 	.word	0x0801aa07

0801600c <div>:
 801600c:	b510      	push	{r4, lr}
 801600e:	fb91 f4f2 	sdiv	r4, r1, r2
 8016012:	fb02 1114 	mls	r1, r2, r4, r1
 8016016:	6004      	str	r4, [r0, #0]
 8016018:	6041      	str	r1, [r0, #4]
 801601a:	bd10      	pop	{r4, pc}

0801601c <quorem>:
 801601c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016020:	6903      	ldr	r3, [r0, #16]
 8016022:	690c      	ldr	r4, [r1, #16]
 8016024:	42a3      	cmp	r3, r4
 8016026:	4607      	mov	r7, r0
 8016028:	db7e      	blt.n	8016128 <quorem+0x10c>
 801602a:	3c01      	subs	r4, #1
 801602c:	f101 0814 	add.w	r8, r1, #20
 8016030:	00a3      	lsls	r3, r4, #2
 8016032:	f100 0514 	add.w	r5, r0, #20
 8016036:	9300      	str	r3, [sp, #0]
 8016038:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016046:	3301      	adds	r3, #1
 8016048:	429a      	cmp	r2, r3
 801604a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801604e:	fbb2 f6f3 	udiv	r6, r2, r3
 8016052:	d32e      	bcc.n	80160b2 <quorem+0x96>
 8016054:	f04f 0a00 	mov.w	sl, #0
 8016058:	46c4      	mov	ip, r8
 801605a:	46ae      	mov	lr, r5
 801605c:	46d3      	mov	fp, sl
 801605e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016062:	b298      	uxth	r0, r3
 8016064:	fb06 a000 	mla	r0, r6, r0, sl
 8016068:	0c02      	lsrs	r2, r0, #16
 801606a:	0c1b      	lsrs	r3, r3, #16
 801606c:	fb06 2303 	mla	r3, r6, r3, r2
 8016070:	f8de 2000 	ldr.w	r2, [lr]
 8016074:	b280      	uxth	r0, r0
 8016076:	b292      	uxth	r2, r2
 8016078:	1a12      	subs	r2, r2, r0
 801607a:	445a      	add	r2, fp
 801607c:	f8de 0000 	ldr.w	r0, [lr]
 8016080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016084:	b29b      	uxth	r3, r3
 8016086:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801608a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801608e:	b292      	uxth	r2, r2
 8016090:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016094:	45e1      	cmp	r9, ip
 8016096:	f84e 2b04 	str.w	r2, [lr], #4
 801609a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801609e:	d2de      	bcs.n	801605e <quorem+0x42>
 80160a0:	9b00      	ldr	r3, [sp, #0]
 80160a2:	58eb      	ldr	r3, [r5, r3]
 80160a4:	b92b      	cbnz	r3, 80160b2 <quorem+0x96>
 80160a6:	9b01      	ldr	r3, [sp, #4]
 80160a8:	3b04      	subs	r3, #4
 80160aa:	429d      	cmp	r5, r3
 80160ac:	461a      	mov	r2, r3
 80160ae:	d32f      	bcc.n	8016110 <quorem+0xf4>
 80160b0:	613c      	str	r4, [r7, #16]
 80160b2:	4638      	mov	r0, r7
 80160b4:	f001 f9ca 	bl	801744c <__mcmp>
 80160b8:	2800      	cmp	r0, #0
 80160ba:	db25      	blt.n	8016108 <quorem+0xec>
 80160bc:	4629      	mov	r1, r5
 80160be:	2000      	movs	r0, #0
 80160c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80160c4:	f8d1 c000 	ldr.w	ip, [r1]
 80160c8:	fa1f fe82 	uxth.w	lr, r2
 80160cc:	fa1f f38c 	uxth.w	r3, ip
 80160d0:	eba3 030e 	sub.w	r3, r3, lr
 80160d4:	4403      	add	r3, r0
 80160d6:	0c12      	lsrs	r2, r2, #16
 80160d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80160dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160e6:	45c1      	cmp	r9, r8
 80160e8:	f841 3b04 	str.w	r3, [r1], #4
 80160ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80160f0:	d2e6      	bcs.n	80160c0 <quorem+0xa4>
 80160f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80160f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80160fa:	b922      	cbnz	r2, 8016106 <quorem+0xea>
 80160fc:	3b04      	subs	r3, #4
 80160fe:	429d      	cmp	r5, r3
 8016100:	461a      	mov	r2, r3
 8016102:	d30b      	bcc.n	801611c <quorem+0x100>
 8016104:	613c      	str	r4, [r7, #16]
 8016106:	3601      	adds	r6, #1
 8016108:	4630      	mov	r0, r6
 801610a:	b003      	add	sp, #12
 801610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016110:	6812      	ldr	r2, [r2, #0]
 8016112:	3b04      	subs	r3, #4
 8016114:	2a00      	cmp	r2, #0
 8016116:	d1cb      	bne.n	80160b0 <quorem+0x94>
 8016118:	3c01      	subs	r4, #1
 801611a:	e7c6      	b.n	80160aa <quorem+0x8e>
 801611c:	6812      	ldr	r2, [r2, #0]
 801611e:	3b04      	subs	r3, #4
 8016120:	2a00      	cmp	r2, #0
 8016122:	d1ef      	bne.n	8016104 <quorem+0xe8>
 8016124:	3c01      	subs	r4, #1
 8016126:	e7ea      	b.n	80160fe <quorem+0xe2>
 8016128:	2000      	movs	r0, #0
 801612a:	e7ee      	b.n	801610a <quorem+0xee>
 801612c:	0000      	movs	r0, r0
	...

08016130 <_dtoa_r>:
 8016130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	69c7      	ldr	r7, [r0, #28]
 8016136:	b097      	sub	sp, #92	@ 0x5c
 8016138:	ed8d 0b04 	vstr	d0, [sp, #16]
 801613c:	ec55 4b10 	vmov	r4, r5, d0
 8016140:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8016142:	9107      	str	r1, [sp, #28]
 8016144:	4681      	mov	r9, r0
 8016146:	920c      	str	r2, [sp, #48]	@ 0x30
 8016148:	9311      	str	r3, [sp, #68]	@ 0x44
 801614a:	b97f      	cbnz	r7, 801616c <_dtoa_r+0x3c>
 801614c:	2010      	movs	r0, #16
 801614e:	f000 fe4d 	bl	8016dec <malloc>
 8016152:	4602      	mov	r2, r0
 8016154:	f8c9 001c 	str.w	r0, [r9, #28]
 8016158:	b920      	cbnz	r0, 8016164 <_dtoa_r+0x34>
 801615a:	4ba9      	ldr	r3, [pc, #676]	@ (8016400 <_dtoa_r+0x2d0>)
 801615c:	21ef      	movs	r1, #239	@ 0xef
 801615e:	48a9      	ldr	r0, [pc, #676]	@ (8016404 <_dtoa_r+0x2d4>)
 8016160:	f7ff ff36 	bl	8015fd0 <__assert_func>
 8016164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016168:	6007      	str	r7, [r0, #0]
 801616a:	60c7      	str	r7, [r0, #12]
 801616c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016170:	6819      	ldr	r1, [r3, #0]
 8016172:	b159      	cbz	r1, 801618c <_dtoa_r+0x5c>
 8016174:	685a      	ldr	r2, [r3, #4]
 8016176:	604a      	str	r2, [r1, #4]
 8016178:	2301      	movs	r3, #1
 801617a:	4093      	lsls	r3, r2
 801617c:	608b      	str	r3, [r1, #8]
 801617e:	4648      	mov	r0, r9
 8016180:	f000 ff32 	bl	8016fe8 <_Bfree>
 8016184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016188:	2200      	movs	r2, #0
 801618a:	601a      	str	r2, [r3, #0]
 801618c:	1e2b      	subs	r3, r5, #0
 801618e:	bfb9      	ittee	lt
 8016190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016194:	9305      	strlt	r3, [sp, #20]
 8016196:	2300      	movge	r3, #0
 8016198:	6033      	strge	r3, [r6, #0]
 801619a:	9f05      	ldr	r7, [sp, #20]
 801619c:	4b9a      	ldr	r3, [pc, #616]	@ (8016408 <_dtoa_r+0x2d8>)
 801619e:	bfbc      	itt	lt
 80161a0:	2201      	movlt	r2, #1
 80161a2:	6032      	strlt	r2, [r6, #0]
 80161a4:	43bb      	bics	r3, r7
 80161a6:	d112      	bne.n	80161ce <_dtoa_r+0x9e>
 80161a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80161aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80161ae:	6013      	str	r3, [r2, #0]
 80161b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80161b4:	4323      	orrs	r3, r4
 80161b6:	f000 855a 	beq.w	8016c6e <_dtoa_r+0xb3e>
 80161ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80161bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801641c <_dtoa_r+0x2ec>
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f000 855c 	beq.w	8016c7e <_dtoa_r+0xb4e>
 80161c6:	f10a 0303 	add.w	r3, sl, #3
 80161ca:	f000 bd56 	b.w	8016c7a <_dtoa_r+0xb4a>
 80161ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80161d2:	2200      	movs	r2, #0
 80161d4:	ec51 0b17 	vmov	r0, r1, d7
 80161d8:	2300      	movs	r3, #0
 80161da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80161de:	f7ea fc5b 	bl	8000a98 <__aeabi_dcmpeq>
 80161e2:	4680      	mov	r8, r0
 80161e4:	b158      	cbz	r0, 80161fe <_dtoa_r+0xce>
 80161e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80161e8:	2301      	movs	r3, #1
 80161ea:	6013      	str	r3, [r2, #0]
 80161ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80161ee:	b113      	cbz	r3, 80161f6 <_dtoa_r+0xc6>
 80161f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80161f2:	4b86      	ldr	r3, [pc, #536]	@ (801640c <_dtoa_r+0x2dc>)
 80161f4:	6013      	str	r3, [r2, #0]
 80161f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8016420 <_dtoa_r+0x2f0>
 80161fa:	f000 bd40 	b.w	8016c7e <_dtoa_r+0xb4e>
 80161fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8016202:	aa14      	add	r2, sp, #80	@ 0x50
 8016204:	a915      	add	r1, sp, #84	@ 0x54
 8016206:	4648      	mov	r0, r9
 8016208:	f001 f9d0 	bl	80175ac <__d2b>
 801620c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016210:	9002      	str	r0, [sp, #8]
 8016212:	2e00      	cmp	r6, #0
 8016214:	d078      	beq.n	8016308 <_dtoa_r+0x1d8>
 8016216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016218:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8016224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801622c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016230:	4619      	mov	r1, r3
 8016232:	2200      	movs	r2, #0
 8016234:	4b76      	ldr	r3, [pc, #472]	@ (8016410 <_dtoa_r+0x2e0>)
 8016236:	f7ea f80f 	bl	8000258 <__aeabi_dsub>
 801623a:	a36b      	add	r3, pc, #428	@ (adr r3, 80163e8 <_dtoa_r+0x2b8>)
 801623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016240:	f7ea f9c2 	bl	80005c8 <__aeabi_dmul>
 8016244:	a36a      	add	r3, pc, #424	@ (adr r3, 80163f0 <_dtoa_r+0x2c0>)
 8016246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624a:	f7ea f807 	bl	800025c <__adddf3>
 801624e:	4604      	mov	r4, r0
 8016250:	4630      	mov	r0, r6
 8016252:	460d      	mov	r5, r1
 8016254:	f7ea f94e 	bl	80004f4 <__aeabi_i2d>
 8016258:	a367      	add	r3, pc, #412	@ (adr r3, 80163f8 <_dtoa_r+0x2c8>)
 801625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801625e:	f7ea f9b3 	bl	80005c8 <__aeabi_dmul>
 8016262:	4602      	mov	r2, r0
 8016264:	460b      	mov	r3, r1
 8016266:	4620      	mov	r0, r4
 8016268:	4629      	mov	r1, r5
 801626a:	f7e9 fff7 	bl	800025c <__adddf3>
 801626e:	4604      	mov	r4, r0
 8016270:	460d      	mov	r5, r1
 8016272:	f7ea fc59 	bl	8000b28 <__aeabi_d2iz>
 8016276:	2200      	movs	r2, #0
 8016278:	4607      	mov	r7, r0
 801627a:	2300      	movs	r3, #0
 801627c:	4620      	mov	r0, r4
 801627e:	4629      	mov	r1, r5
 8016280:	f7ea fc14 	bl	8000aac <__aeabi_dcmplt>
 8016284:	b140      	cbz	r0, 8016298 <_dtoa_r+0x168>
 8016286:	4638      	mov	r0, r7
 8016288:	f7ea f934 	bl	80004f4 <__aeabi_i2d>
 801628c:	4622      	mov	r2, r4
 801628e:	462b      	mov	r3, r5
 8016290:	f7ea fc02 	bl	8000a98 <__aeabi_dcmpeq>
 8016294:	b900      	cbnz	r0, 8016298 <_dtoa_r+0x168>
 8016296:	3f01      	subs	r7, #1
 8016298:	2f16      	cmp	r7, #22
 801629a:	d852      	bhi.n	8016342 <_dtoa_r+0x212>
 801629c:	4b5d      	ldr	r3, [pc, #372]	@ (8016414 <_dtoa_r+0x2e4>)
 801629e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80162a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80162aa:	f7ea fbff 	bl	8000aac <__aeabi_dcmplt>
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d049      	beq.n	8016346 <_dtoa_r+0x216>
 80162b2:	3f01      	subs	r7, #1
 80162b4:	2300      	movs	r3, #0
 80162b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80162b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80162ba:	1b9b      	subs	r3, r3, r6
 80162bc:	1e5a      	subs	r2, r3, #1
 80162be:	bf45      	ittet	mi
 80162c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80162c4:	9300      	strmi	r3, [sp, #0]
 80162c6:	2300      	movpl	r3, #0
 80162c8:	2300      	movmi	r3, #0
 80162ca:	9206      	str	r2, [sp, #24]
 80162cc:	bf54      	ite	pl
 80162ce:	9300      	strpl	r3, [sp, #0]
 80162d0:	9306      	strmi	r3, [sp, #24]
 80162d2:	2f00      	cmp	r7, #0
 80162d4:	db39      	blt.n	801634a <_dtoa_r+0x21a>
 80162d6:	9b06      	ldr	r3, [sp, #24]
 80162d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80162da:	443b      	add	r3, r7
 80162dc:	9306      	str	r3, [sp, #24]
 80162de:	2300      	movs	r3, #0
 80162e0:	9308      	str	r3, [sp, #32]
 80162e2:	9b07      	ldr	r3, [sp, #28]
 80162e4:	2b09      	cmp	r3, #9
 80162e6:	d863      	bhi.n	80163b0 <_dtoa_r+0x280>
 80162e8:	2b05      	cmp	r3, #5
 80162ea:	bfc4      	itt	gt
 80162ec:	3b04      	subgt	r3, #4
 80162ee:	9307      	strgt	r3, [sp, #28]
 80162f0:	9b07      	ldr	r3, [sp, #28]
 80162f2:	f1a3 0302 	sub.w	r3, r3, #2
 80162f6:	bfcc      	ite	gt
 80162f8:	2400      	movgt	r4, #0
 80162fa:	2401      	movle	r4, #1
 80162fc:	2b03      	cmp	r3, #3
 80162fe:	d863      	bhi.n	80163c8 <_dtoa_r+0x298>
 8016300:	e8df f003 	tbb	[pc, r3]
 8016304:	2b375452 	.word	0x2b375452
 8016308:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801630c:	441e      	add	r6, r3
 801630e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016312:	2b20      	cmp	r3, #32
 8016314:	bfc1      	itttt	gt
 8016316:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801631a:	409f      	lslgt	r7, r3
 801631c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016320:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016324:	bfd6      	itet	le
 8016326:	f1c3 0320 	rsble	r3, r3, #32
 801632a:	ea47 0003 	orrgt.w	r0, r7, r3
 801632e:	fa04 f003 	lslle.w	r0, r4, r3
 8016332:	f7ea f8cf 	bl	80004d4 <__aeabi_ui2d>
 8016336:	2201      	movs	r2, #1
 8016338:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801633c:	3e01      	subs	r6, #1
 801633e:	9212      	str	r2, [sp, #72]	@ 0x48
 8016340:	e776      	b.n	8016230 <_dtoa_r+0x100>
 8016342:	2301      	movs	r3, #1
 8016344:	e7b7      	b.n	80162b6 <_dtoa_r+0x186>
 8016346:	9010      	str	r0, [sp, #64]	@ 0x40
 8016348:	e7b6      	b.n	80162b8 <_dtoa_r+0x188>
 801634a:	9b00      	ldr	r3, [sp, #0]
 801634c:	1bdb      	subs	r3, r3, r7
 801634e:	9300      	str	r3, [sp, #0]
 8016350:	427b      	negs	r3, r7
 8016352:	9308      	str	r3, [sp, #32]
 8016354:	2300      	movs	r3, #0
 8016356:	930d      	str	r3, [sp, #52]	@ 0x34
 8016358:	e7c3      	b.n	80162e2 <_dtoa_r+0x1b2>
 801635a:	2301      	movs	r3, #1
 801635c:	9309      	str	r3, [sp, #36]	@ 0x24
 801635e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016360:	eb07 0b03 	add.w	fp, r7, r3
 8016364:	f10b 0301 	add.w	r3, fp, #1
 8016368:	2b01      	cmp	r3, #1
 801636a:	9303      	str	r3, [sp, #12]
 801636c:	bfb8      	it	lt
 801636e:	2301      	movlt	r3, #1
 8016370:	e006      	b.n	8016380 <_dtoa_r+0x250>
 8016372:	2301      	movs	r3, #1
 8016374:	9309      	str	r3, [sp, #36]	@ 0x24
 8016376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016378:	2b00      	cmp	r3, #0
 801637a:	dd28      	ble.n	80163ce <_dtoa_r+0x29e>
 801637c:	469b      	mov	fp, r3
 801637e:	9303      	str	r3, [sp, #12]
 8016380:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8016384:	2100      	movs	r1, #0
 8016386:	2204      	movs	r2, #4
 8016388:	f102 0514 	add.w	r5, r2, #20
 801638c:	429d      	cmp	r5, r3
 801638e:	d926      	bls.n	80163de <_dtoa_r+0x2ae>
 8016390:	6041      	str	r1, [r0, #4]
 8016392:	4648      	mov	r0, r9
 8016394:	f000 fde8 	bl	8016f68 <_Balloc>
 8016398:	4682      	mov	sl, r0
 801639a:	2800      	cmp	r0, #0
 801639c:	d142      	bne.n	8016424 <_dtoa_r+0x2f4>
 801639e:	4b1e      	ldr	r3, [pc, #120]	@ (8016418 <_dtoa_r+0x2e8>)
 80163a0:	4602      	mov	r2, r0
 80163a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80163a6:	e6da      	b.n	801615e <_dtoa_r+0x2e>
 80163a8:	2300      	movs	r3, #0
 80163aa:	e7e3      	b.n	8016374 <_dtoa_r+0x244>
 80163ac:	2300      	movs	r3, #0
 80163ae:	e7d5      	b.n	801635c <_dtoa_r+0x22c>
 80163b0:	2401      	movs	r4, #1
 80163b2:	2300      	movs	r3, #0
 80163b4:	9307      	str	r3, [sp, #28]
 80163b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80163b8:	f04f 3bff 	mov.w	fp, #4294967295
 80163bc:	2200      	movs	r2, #0
 80163be:	f8cd b00c 	str.w	fp, [sp, #12]
 80163c2:	2312      	movs	r3, #18
 80163c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80163c6:	e7db      	b.n	8016380 <_dtoa_r+0x250>
 80163c8:	2301      	movs	r3, #1
 80163ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80163cc:	e7f4      	b.n	80163b8 <_dtoa_r+0x288>
 80163ce:	f04f 0b01 	mov.w	fp, #1
 80163d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80163d6:	465b      	mov	r3, fp
 80163d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80163dc:	e7d0      	b.n	8016380 <_dtoa_r+0x250>
 80163de:	3101      	adds	r1, #1
 80163e0:	0052      	lsls	r2, r2, #1
 80163e2:	e7d1      	b.n	8016388 <_dtoa_r+0x258>
 80163e4:	f3af 8000 	nop.w
 80163e8:	636f4361 	.word	0x636f4361
 80163ec:	3fd287a7 	.word	0x3fd287a7
 80163f0:	8b60c8b3 	.word	0x8b60c8b3
 80163f4:	3fc68a28 	.word	0x3fc68a28
 80163f8:	509f79fb 	.word	0x509f79fb
 80163fc:	3fd34413 	.word	0x3fd34413
 8016400:	0801a884 	.word	0x0801a884
 8016404:	0801aa15 	.word	0x0801aa15
 8016408:	7ff00000 	.word	0x7ff00000
 801640c:	0801ab09 	.word	0x0801ab09
 8016410:	3ff80000 	.word	0x3ff80000
 8016414:	0801ac08 	.word	0x0801ac08
 8016418:	0801aa6d 	.word	0x0801aa6d
 801641c:	0801aa11 	.word	0x0801aa11
 8016420:	0801ab08 	.word	0x0801ab08
 8016424:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016428:	6018      	str	r0, [r3, #0]
 801642a:	9b03      	ldr	r3, [sp, #12]
 801642c:	2b0e      	cmp	r3, #14
 801642e:	f200 80a1 	bhi.w	8016574 <_dtoa_r+0x444>
 8016432:	2c00      	cmp	r4, #0
 8016434:	f000 809e 	beq.w	8016574 <_dtoa_r+0x444>
 8016438:	2f00      	cmp	r7, #0
 801643a:	dd33      	ble.n	80164a4 <_dtoa_r+0x374>
 801643c:	4b9c      	ldr	r3, [pc, #624]	@ (80166b0 <_dtoa_r+0x580>)
 801643e:	f007 020f 	and.w	r2, r7, #15
 8016442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016446:	ed93 7b00 	vldr	d7, [r3]
 801644a:	05f8      	lsls	r0, r7, #23
 801644c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8016450:	ea4f 1427 	mov.w	r4, r7, asr #4
 8016454:	d516      	bpl.n	8016484 <_dtoa_r+0x354>
 8016456:	4b97      	ldr	r3, [pc, #604]	@ (80166b4 <_dtoa_r+0x584>)
 8016458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801645c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016460:	f7ea f9dc 	bl	800081c <__aeabi_ddiv>
 8016464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016468:	f004 040f 	and.w	r4, r4, #15
 801646c:	2603      	movs	r6, #3
 801646e:	4d91      	ldr	r5, [pc, #580]	@ (80166b4 <_dtoa_r+0x584>)
 8016470:	b954      	cbnz	r4, 8016488 <_dtoa_r+0x358>
 8016472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801647a:	f7ea f9cf 	bl	800081c <__aeabi_ddiv>
 801647e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016482:	e028      	b.n	80164d6 <_dtoa_r+0x3a6>
 8016484:	2602      	movs	r6, #2
 8016486:	e7f2      	b.n	801646e <_dtoa_r+0x33e>
 8016488:	07e1      	lsls	r1, r4, #31
 801648a:	d508      	bpl.n	801649e <_dtoa_r+0x36e>
 801648c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016494:	f7ea f898 	bl	80005c8 <__aeabi_dmul>
 8016498:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801649c:	3601      	adds	r6, #1
 801649e:	1064      	asrs	r4, r4, #1
 80164a0:	3508      	adds	r5, #8
 80164a2:	e7e5      	b.n	8016470 <_dtoa_r+0x340>
 80164a4:	f000 80af 	beq.w	8016606 <_dtoa_r+0x4d6>
 80164a8:	427c      	negs	r4, r7
 80164aa:	4b81      	ldr	r3, [pc, #516]	@ (80166b0 <_dtoa_r+0x580>)
 80164ac:	4d81      	ldr	r5, [pc, #516]	@ (80166b4 <_dtoa_r+0x584>)
 80164ae:	f004 020f 	and.w	r2, r4, #15
 80164b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80164b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80164be:	f7ea f883 	bl	80005c8 <__aeabi_dmul>
 80164c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164c6:	1124      	asrs	r4, r4, #4
 80164c8:	2300      	movs	r3, #0
 80164ca:	2602      	movs	r6, #2
 80164cc:	2c00      	cmp	r4, #0
 80164ce:	f040 808f 	bne.w	80165f0 <_dtoa_r+0x4c0>
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d1d3      	bne.n	801647e <_dtoa_r+0x34e>
 80164d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80164d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	f000 8094 	beq.w	801660a <_dtoa_r+0x4da>
 80164e2:	4b75      	ldr	r3, [pc, #468]	@ (80166b8 <_dtoa_r+0x588>)
 80164e4:	2200      	movs	r2, #0
 80164e6:	4620      	mov	r0, r4
 80164e8:	4629      	mov	r1, r5
 80164ea:	f7ea fadf 	bl	8000aac <__aeabi_dcmplt>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	f000 808b 	beq.w	801660a <_dtoa_r+0x4da>
 80164f4:	9b03      	ldr	r3, [sp, #12]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f000 8087 	beq.w	801660a <_dtoa_r+0x4da>
 80164fc:	f1bb 0f00 	cmp.w	fp, #0
 8016500:	dd34      	ble.n	801656c <_dtoa_r+0x43c>
 8016502:	4620      	mov	r0, r4
 8016504:	4b6d      	ldr	r3, [pc, #436]	@ (80166bc <_dtoa_r+0x58c>)
 8016506:	2200      	movs	r2, #0
 8016508:	4629      	mov	r1, r5
 801650a:	f7ea f85d 	bl	80005c8 <__aeabi_dmul>
 801650e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016512:	f107 38ff 	add.w	r8, r7, #4294967295
 8016516:	3601      	adds	r6, #1
 8016518:	465c      	mov	r4, fp
 801651a:	4630      	mov	r0, r6
 801651c:	f7e9 ffea 	bl	80004f4 <__aeabi_i2d>
 8016520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016524:	f7ea f850 	bl	80005c8 <__aeabi_dmul>
 8016528:	4b65      	ldr	r3, [pc, #404]	@ (80166c0 <_dtoa_r+0x590>)
 801652a:	2200      	movs	r2, #0
 801652c:	f7e9 fe96 	bl	800025c <__adddf3>
 8016530:	4605      	mov	r5, r0
 8016532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8016536:	2c00      	cmp	r4, #0
 8016538:	d16a      	bne.n	8016610 <_dtoa_r+0x4e0>
 801653a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801653e:	4b61      	ldr	r3, [pc, #388]	@ (80166c4 <_dtoa_r+0x594>)
 8016540:	2200      	movs	r2, #0
 8016542:	f7e9 fe89 	bl	8000258 <__aeabi_dsub>
 8016546:	4602      	mov	r2, r0
 8016548:	460b      	mov	r3, r1
 801654a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801654e:	462a      	mov	r2, r5
 8016550:	4633      	mov	r3, r6
 8016552:	f7ea fac9 	bl	8000ae8 <__aeabi_dcmpgt>
 8016556:	2800      	cmp	r0, #0
 8016558:	f040 8298 	bne.w	8016a8c <_dtoa_r+0x95c>
 801655c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016560:	462a      	mov	r2, r5
 8016562:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016566:	f7ea faa1 	bl	8000aac <__aeabi_dcmplt>
 801656a:	bb38      	cbnz	r0, 80165bc <_dtoa_r+0x48c>
 801656c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8016570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8016574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016576:	2b00      	cmp	r3, #0
 8016578:	f2c0 8157 	blt.w	801682a <_dtoa_r+0x6fa>
 801657c:	2f0e      	cmp	r7, #14
 801657e:	f300 8154 	bgt.w	801682a <_dtoa_r+0x6fa>
 8016582:	4b4b      	ldr	r3, [pc, #300]	@ (80166b0 <_dtoa_r+0x580>)
 8016584:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016588:	ed93 7b00 	vldr	d7, [r3]
 801658c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801658e:	2b00      	cmp	r3, #0
 8016590:	ed8d 7b00 	vstr	d7, [sp]
 8016594:	f280 80e5 	bge.w	8016762 <_dtoa_r+0x632>
 8016598:	9b03      	ldr	r3, [sp, #12]
 801659a:	2b00      	cmp	r3, #0
 801659c:	f300 80e1 	bgt.w	8016762 <_dtoa_r+0x632>
 80165a0:	d10c      	bne.n	80165bc <_dtoa_r+0x48c>
 80165a2:	4b48      	ldr	r3, [pc, #288]	@ (80166c4 <_dtoa_r+0x594>)
 80165a4:	2200      	movs	r2, #0
 80165a6:	ec51 0b17 	vmov	r0, r1, d7
 80165aa:	f7ea f80d 	bl	80005c8 <__aeabi_dmul>
 80165ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165b2:	f7ea fa8f 	bl	8000ad4 <__aeabi_dcmpge>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	f000 8266 	beq.w	8016a88 <_dtoa_r+0x958>
 80165bc:	2400      	movs	r4, #0
 80165be:	4625      	mov	r5, r4
 80165c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165c2:	4656      	mov	r6, sl
 80165c4:	ea6f 0803 	mvn.w	r8, r3
 80165c8:	2700      	movs	r7, #0
 80165ca:	4621      	mov	r1, r4
 80165cc:	4648      	mov	r0, r9
 80165ce:	f000 fd0b 	bl	8016fe8 <_Bfree>
 80165d2:	2d00      	cmp	r5, #0
 80165d4:	f000 80bd 	beq.w	8016752 <_dtoa_r+0x622>
 80165d8:	b12f      	cbz	r7, 80165e6 <_dtoa_r+0x4b6>
 80165da:	42af      	cmp	r7, r5
 80165dc:	d003      	beq.n	80165e6 <_dtoa_r+0x4b6>
 80165de:	4639      	mov	r1, r7
 80165e0:	4648      	mov	r0, r9
 80165e2:	f000 fd01 	bl	8016fe8 <_Bfree>
 80165e6:	4629      	mov	r1, r5
 80165e8:	4648      	mov	r0, r9
 80165ea:	f000 fcfd 	bl	8016fe8 <_Bfree>
 80165ee:	e0b0      	b.n	8016752 <_dtoa_r+0x622>
 80165f0:	07e2      	lsls	r2, r4, #31
 80165f2:	d505      	bpl.n	8016600 <_dtoa_r+0x4d0>
 80165f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80165f8:	f7e9 ffe6 	bl	80005c8 <__aeabi_dmul>
 80165fc:	3601      	adds	r6, #1
 80165fe:	2301      	movs	r3, #1
 8016600:	1064      	asrs	r4, r4, #1
 8016602:	3508      	adds	r5, #8
 8016604:	e762      	b.n	80164cc <_dtoa_r+0x39c>
 8016606:	2602      	movs	r6, #2
 8016608:	e765      	b.n	80164d6 <_dtoa_r+0x3a6>
 801660a:	9c03      	ldr	r4, [sp, #12]
 801660c:	46b8      	mov	r8, r7
 801660e:	e784      	b.n	801651a <_dtoa_r+0x3ea>
 8016610:	4b27      	ldr	r3, [pc, #156]	@ (80166b0 <_dtoa_r+0x580>)
 8016612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801661c:	4454      	add	r4, sl
 801661e:	2900      	cmp	r1, #0
 8016620:	d054      	beq.n	80166cc <_dtoa_r+0x59c>
 8016622:	4929      	ldr	r1, [pc, #164]	@ (80166c8 <_dtoa_r+0x598>)
 8016624:	2000      	movs	r0, #0
 8016626:	f7ea f8f9 	bl	800081c <__aeabi_ddiv>
 801662a:	4633      	mov	r3, r6
 801662c:	462a      	mov	r2, r5
 801662e:	f7e9 fe13 	bl	8000258 <__aeabi_dsub>
 8016632:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016636:	4656      	mov	r6, sl
 8016638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801663c:	f7ea fa74 	bl	8000b28 <__aeabi_d2iz>
 8016640:	4605      	mov	r5, r0
 8016642:	f7e9 ff57 	bl	80004f4 <__aeabi_i2d>
 8016646:	4602      	mov	r2, r0
 8016648:	460b      	mov	r3, r1
 801664a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801664e:	f7e9 fe03 	bl	8000258 <__aeabi_dsub>
 8016652:	3530      	adds	r5, #48	@ 0x30
 8016654:	4602      	mov	r2, r0
 8016656:	460b      	mov	r3, r1
 8016658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801665c:	f806 5b01 	strb.w	r5, [r6], #1
 8016660:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016664:	f7ea fa22 	bl	8000aac <__aeabi_dcmplt>
 8016668:	2800      	cmp	r0, #0
 801666a:	d172      	bne.n	8016752 <_dtoa_r+0x622>
 801666c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016670:	4911      	ldr	r1, [pc, #68]	@ (80166b8 <_dtoa_r+0x588>)
 8016672:	2000      	movs	r0, #0
 8016674:	f7e9 fdf0 	bl	8000258 <__aeabi_dsub>
 8016678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801667c:	f7ea fa16 	bl	8000aac <__aeabi_dcmplt>
 8016680:	2800      	cmp	r0, #0
 8016682:	f040 80b4 	bne.w	80167ee <_dtoa_r+0x6be>
 8016686:	42a6      	cmp	r6, r4
 8016688:	f43f af70 	beq.w	801656c <_dtoa_r+0x43c>
 801668c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016690:	4b0a      	ldr	r3, [pc, #40]	@ (80166bc <_dtoa_r+0x58c>)
 8016692:	2200      	movs	r2, #0
 8016694:	f7e9 ff98 	bl	80005c8 <__aeabi_dmul>
 8016698:	4b08      	ldr	r3, [pc, #32]	@ (80166bc <_dtoa_r+0x58c>)
 801669a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801669e:	2200      	movs	r2, #0
 80166a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166a4:	f7e9 ff90 	bl	80005c8 <__aeabi_dmul>
 80166a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80166ac:	e7c4      	b.n	8016638 <_dtoa_r+0x508>
 80166ae:	bf00      	nop
 80166b0:	0801ac08 	.word	0x0801ac08
 80166b4:	0801abe0 	.word	0x0801abe0
 80166b8:	3ff00000 	.word	0x3ff00000
 80166bc:	40240000 	.word	0x40240000
 80166c0:	401c0000 	.word	0x401c0000
 80166c4:	40140000 	.word	0x40140000
 80166c8:	3fe00000 	.word	0x3fe00000
 80166cc:	4631      	mov	r1, r6
 80166ce:	4628      	mov	r0, r5
 80166d0:	f7e9 ff7a 	bl	80005c8 <__aeabi_dmul>
 80166d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80166d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80166da:	4656      	mov	r6, sl
 80166dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166e0:	f7ea fa22 	bl	8000b28 <__aeabi_d2iz>
 80166e4:	4605      	mov	r5, r0
 80166e6:	f7e9 ff05 	bl	80004f4 <__aeabi_i2d>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166f2:	f7e9 fdb1 	bl	8000258 <__aeabi_dsub>
 80166f6:	3530      	adds	r5, #48	@ 0x30
 80166f8:	f806 5b01 	strb.w	r5, [r6], #1
 80166fc:	4602      	mov	r2, r0
 80166fe:	460b      	mov	r3, r1
 8016700:	42a6      	cmp	r6, r4
 8016702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016706:	f04f 0200 	mov.w	r2, #0
 801670a:	d124      	bne.n	8016756 <_dtoa_r+0x626>
 801670c:	4baf      	ldr	r3, [pc, #700]	@ (80169cc <_dtoa_r+0x89c>)
 801670e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016712:	f7e9 fda3 	bl	800025c <__adddf3>
 8016716:	4602      	mov	r2, r0
 8016718:	460b      	mov	r3, r1
 801671a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801671e:	f7ea f9e3 	bl	8000ae8 <__aeabi_dcmpgt>
 8016722:	2800      	cmp	r0, #0
 8016724:	d163      	bne.n	80167ee <_dtoa_r+0x6be>
 8016726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801672a:	49a8      	ldr	r1, [pc, #672]	@ (80169cc <_dtoa_r+0x89c>)
 801672c:	2000      	movs	r0, #0
 801672e:	f7e9 fd93 	bl	8000258 <__aeabi_dsub>
 8016732:	4602      	mov	r2, r0
 8016734:	460b      	mov	r3, r1
 8016736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801673a:	f7ea f9b7 	bl	8000aac <__aeabi_dcmplt>
 801673e:	2800      	cmp	r0, #0
 8016740:	f43f af14 	beq.w	801656c <_dtoa_r+0x43c>
 8016744:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8016746:	1e73      	subs	r3, r6, #1
 8016748:	9313      	str	r3, [sp, #76]	@ 0x4c
 801674a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801674e:	2b30      	cmp	r3, #48	@ 0x30
 8016750:	d0f8      	beq.n	8016744 <_dtoa_r+0x614>
 8016752:	4647      	mov	r7, r8
 8016754:	e03b      	b.n	80167ce <_dtoa_r+0x69e>
 8016756:	4b9e      	ldr	r3, [pc, #632]	@ (80169d0 <_dtoa_r+0x8a0>)
 8016758:	f7e9 ff36 	bl	80005c8 <__aeabi_dmul>
 801675c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016760:	e7bc      	b.n	80166dc <_dtoa_r+0x5ac>
 8016762:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8016766:	4656      	mov	r6, sl
 8016768:	e9dd 2300 	ldrd	r2, r3, [sp]
 801676c:	4620      	mov	r0, r4
 801676e:	4629      	mov	r1, r5
 8016770:	f7ea f854 	bl	800081c <__aeabi_ddiv>
 8016774:	f7ea f9d8 	bl	8000b28 <__aeabi_d2iz>
 8016778:	4680      	mov	r8, r0
 801677a:	f7e9 febb 	bl	80004f4 <__aeabi_i2d>
 801677e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016782:	f7e9 ff21 	bl	80005c8 <__aeabi_dmul>
 8016786:	4602      	mov	r2, r0
 8016788:	460b      	mov	r3, r1
 801678a:	4620      	mov	r0, r4
 801678c:	4629      	mov	r1, r5
 801678e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016792:	f7e9 fd61 	bl	8000258 <__aeabi_dsub>
 8016796:	f806 4b01 	strb.w	r4, [r6], #1
 801679a:	9d03      	ldr	r5, [sp, #12]
 801679c:	eba6 040a 	sub.w	r4, r6, sl
 80167a0:	42a5      	cmp	r5, r4
 80167a2:	4602      	mov	r2, r0
 80167a4:	460b      	mov	r3, r1
 80167a6:	d133      	bne.n	8016810 <_dtoa_r+0x6e0>
 80167a8:	f7e9 fd58 	bl	800025c <__adddf3>
 80167ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167b0:	4604      	mov	r4, r0
 80167b2:	460d      	mov	r5, r1
 80167b4:	f7ea f998 	bl	8000ae8 <__aeabi_dcmpgt>
 80167b8:	b9c0      	cbnz	r0, 80167ec <_dtoa_r+0x6bc>
 80167ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167be:	4620      	mov	r0, r4
 80167c0:	4629      	mov	r1, r5
 80167c2:	f7ea f969 	bl	8000a98 <__aeabi_dcmpeq>
 80167c6:	b110      	cbz	r0, 80167ce <_dtoa_r+0x69e>
 80167c8:	f018 0f01 	tst.w	r8, #1
 80167cc:	d10e      	bne.n	80167ec <_dtoa_r+0x6bc>
 80167ce:	9902      	ldr	r1, [sp, #8]
 80167d0:	4648      	mov	r0, r9
 80167d2:	f000 fc09 	bl	8016fe8 <_Bfree>
 80167d6:	2300      	movs	r3, #0
 80167d8:	7033      	strb	r3, [r6, #0]
 80167da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80167dc:	3701      	adds	r7, #1
 80167de:	601f      	str	r7, [r3, #0]
 80167e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f000 824b 	beq.w	8016c7e <_dtoa_r+0xb4e>
 80167e8:	601e      	str	r6, [r3, #0]
 80167ea:	e248      	b.n	8016c7e <_dtoa_r+0xb4e>
 80167ec:	46b8      	mov	r8, r7
 80167ee:	4633      	mov	r3, r6
 80167f0:	461e      	mov	r6, r3
 80167f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80167f6:	2a39      	cmp	r2, #57	@ 0x39
 80167f8:	d106      	bne.n	8016808 <_dtoa_r+0x6d8>
 80167fa:	459a      	cmp	sl, r3
 80167fc:	d1f8      	bne.n	80167f0 <_dtoa_r+0x6c0>
 80167fe:	2230      	movs	r2, #48	@ 0x30
 8016800:	f108 0801 	add.w	r8, r8, #1
 8016804:	f88a 2000 	strb.w	r2, [sl]
 8016808:	781a      	ldrb	r2, [r3, #0]
 801680a:	3201      	adds	r2, #1
 801680c:	701a      	strb	r2, [r3, #0]
 801680e:	e7a0      	b.n	8016752 <_dtoa_r+0x622>
 8016810:	4b6f      	ldr	r3, [pc, #444]	@ (80169d0 <_dtoa_r+0x8a0>)
 8016812:	2200      	movs	r2, #0
 8016814:	f7e9 fed8 	bl	80005c8 <__aeabi_dmul>
 8016818:	2200      	movs	r2, #0
 801681a:	2300      	movs	r3, #0
 801681c:	4604      	mov	r4, r0
 801681e:	460d      	mov	r5, r1
 8016820:	f7ea f93a 	bl	8000a98 <__aeabi_dcmpeq>
 8016824:	2800      	cmp	r0, #0
 8016826:	d09f      	beq.n	8016768 <_dtoa_r+0x638>
 8016828:	e7d1      	b.n	80167ce <_dtoa_r+0x69e>
 801682a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801682c:	2a00      	cmp	r2, #0
 801682e:	f000 80ea 	beq.w	8016a06 <_dtoa_r+0x8d6>
 8016832:	9a07      	ldr	r2, [sp, #28]
 8016834:	2a01      	cmp	r2, #1
 8016836:	f300 80cd 	bgt.w	80169d4 <_dtoa_r+0x8a4>
 801683a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801683c:	2a00      	cmp	r2, #0
 801683e:	f000 80c1 	beq.w	80169c4 <_dtoa_r+0x894>
 8016842:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8016846:	9c08      	ldr	r4, [sp, #32]
 8016848:	9e00      	ldr	r6, [sp, #0]
 801684a:	9a00      	ldr	r2, [sp, #0]
 801684c:	441a      	add	r2, r3
 801684e:	9200      	str	r2, [sp, #0]
 8016850:	9a06      	ldr	r2, [sp, #24]
 8016852:	2101      	movs	r1, #1
 8016854:	441a      	add	r2, r3
 8016856:	4648      	mov	r0, r9
 8016858:	9206      	str	r2, [sp, #24]
 801685a:	f000 fc79 	bl	8017150 <__i2b>
 801685e:	4605      	mov	r5, r0
 8016860:	b166      	cbz	r6, 801687c <_dtoa_r+0x74c>
 8016862:	9b06      	ldr	r3, [sp, #24]
 8016864:	2b00      	cmp	r3, #0
 8016866:	dd09      	ble.n	801687c <_dtoa_r+0x74c>
 8016868:	42b3      	cmp	r3, r6
 801686a:	9a00      	ldr	r2, [sp, #0]
 801686c:	bfa8      	it	ge
 801686e:	4633      	movge	r3, r6
 8016870:	1ad2      	subs	r2, r2, r3
 8016872:	9200      	str	r2, [sp, #0]
 8016874:	9a06      	ldr	r2, [sp, #24]
 8016876:	1af6      	subs	r6, r6, r3
 8016878:	1ad3      	subs	r3, r2, r3
 801687a:	9306      	str	r3, [sp, #24]
 801687c:	9b08      	ldr	r3, [sp, #32]
 801687e:	b30b      	cbz	r3, 80168c4 <_dtoa_r+0x794>
 8016880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016882:	2b00      	cmp	r3, #0
 8016884:	f000 80c6 	beq.w	8016a14 <_dtoa_r+0x8e4>
 8016888:	2c00      	cmp	r4, #0
 801688a:	f000 80c0 	beq.w	8016a0e <_dtoa_r+0x8de>
 801688e:	4629      	mov	r1, r5
 8016890:	4622      	mov	r2, r4
 8016892:	4648      	mov	r0, r9
 8016894:	f000 fd14 	bl	80172c0 <__pow5mult>
 8016898:	9a02      	ldr	r2, [sp, #8]
 801689a:	4601      	mov	r1, r0
 801689c:	4605      	mov	r5, r0
 801689e:	4648      	mov	r0, r9
 80168a0:	f000 fc6c 	bl	801717c <__multiply>
 80168a4:	9902      	ldr	r1, [sp, #8]
 80168a6:	4680      	mov	r8, r0
 80168a8:	4648      	mov	r0, r9
 80168aa:	f000 fb9d 	bl	8016fe8 <_Bfree>
 80168ae:	9b08      	ldr	r3, [sp, #32]
 80168b0:	1b1b      	subs	r3, r3, r4
 80168b2:	9308      	str	r3, [sp, #32]
 80168b4:	f000 80b1 	beq.w	8016a1a <_dtoa_r+0x8ea>
 80168b8:	9a08      	ldr	r2, [sp, #32]
 80168ba:	4641      	mov	r1, r8
 80168bc:	4648      	mov	r0, r9
 80168be:	f000 fcff 	bl	80172c0 <__pow5mult>
 80168c2:	9002      	str	r0, [sp, #8]
 80168c4:	2101      	movs	r1, #1
 80168c6:	4648      	mov	r0, r9
 80168c8:	f000 fc42 	bl	8017150 <__i2b>
 80168cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80168ce:	4604      	mov	r4, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f000 81d8 	beq.w	8016c86 <_dtoa_r+0xb56>
 80168d6:	461a      	mov	r2, r3
 80168d8:	4601      	mov	r1, r0
 80168da:	4648      	mov	r0, r9
 80168dc:	f000 fcf0 	bl	80172c0 <__pow5mult>
 80168e0:	9b07      	ldr	r3, [sp, #28]
 80168e2:	2b01      	cmp	r3, #1
 80168e4:	4604      	mov	r4, r0
 80168e6:	f300 809f 	bgt.w	8016a28 <_dtoa_r+0x8f8>
 80168ea:	9b04      	ldr	r3, [sp, #16]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	f040 8097 	bne.w	8016a20 <_dtoa_r+0x8f0>
 80168f2:	9b05      	ldr	r3, [sp, #20]
 80168f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f040 8093 	bne.w	8016a24 <_dtoa_r+0x8f4>
 80168fe:	9b05      	ldr	r3, [sp, #20]
 8016900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016904:	0d1b      	lsrs	r3, r3, #20
 8016906:	051b      	lsls	r3, r3, #20
 8016908:	b133      	cbz	r3, 8016918 <_dtoa_r+0x7e8>
 801690a:	9b00      	ldr	r3, [sp, #0]
 801690c:	3301      	adds	r3, #1
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	9b06      	ldr	r3, [sp, #24]
 8016912:	3301      	adds	r3, #1
 8016914:	9306      	str	r3, [sp, #24]
 8016916:	2301      	movs	r3, #1
 8016918:	9308      	str	r3, [sp, #32]
 801691a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801691c:	2b00      	cmp	r3, #0
 801691e:	f000 81b8 	beq.w	8016c92 <_dtoa_r+0xb62>
 8016922:	6923      	ldr	r3, [r4, #16]
 8016924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016928:	6918      	ldr	r0, [r3, #16]
 801692a:	f000 fbc5 	bl	80170b8 <__hi0bits>
 801692e:	f1c0 0020 	rsb	r0, r0, #32
 8016932:	9b06      	ldr	r3, [sp, #24]
 8016934:	4418      	add	r0, r3
 8016936:	f010 001f 	ands.w	r0, r0, #31
 801693a:	f000 8082 	beq.w	8016a42 <_dtoa_r+0x912>
 801693e:	f1c0 0320 	rsb	r3, r0, #32
 8016942:	2b04      	cmp	r3, #4
 8016944:	dd73      	ble.n	8016a2e <_dtoa_r+0x8fe>
 8016946:	9b00      	ldr	r3, [sp, #0]
 8016948:	f1c0 001c 	rsb	r0, r0, #28
 801694c:	4403      	add	r3, r0
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	9b06      	ldr	r3, [sp, #24]
 8016952:	4403      	add	r3, r0
 8016954:	4406      	add	r6, r0
 8016956:	9306      	str	r3, [sp, #24]
 8016958:	9b00      	ldr	r3, [sp, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	dd05      	ble.n	801696a <_dtoa_r+0x83a>
 801695e:	9902      	ldr	r1, [sp, #8]
 8016960:	461a      	mov	r2, r3
 8016962:	4648      	mov	r0, r9
 8016964:	f000 fd06 	bl	8017374 <__lshift>
 8016968:	9002      	str	r0, [sp, #8]
 801696a:	9b06      	ldr	r3, [sp, #24]
 801696c:	2b00      	cmp	r3, #0
 801696e:	dd05      	ble.n	801697c <_dtoa_r+0x84c>
 8016970:	4621      	mov	r1, r4
 8016972:	461a      	mov	r2, r3
 8016974:	4648      	mov	r0, r9
 8016976:	f000 fcfd 	bl	8017374 <__lshift>
 801697a:	4604      	mov	r4, r0
 801697c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801697e:	2b00      	cmp	r3, #0
 8016980:	d061      	beq.n	8016a46 <_dtoa_r+0x916>
 8016982:	9802      	ldr	r0, [sp, #8]
 8016984:	4621      	mov	r1, r4
 8016986:	f000 fd61 	bl	801744c <__mcmp>
 801698a:	2800      	cmp	r0, #0
 801698c:	da5b      	bge.n	8016a46 <_dtoa_r+0x916>
 801698e:	2300      	movs	r3, #0
 8016990:	9902      	ldr	r1, [sp, #8]
 8016992:	220a      	movs	r2, #10
 8016994:	4648      	mov	r0, r9
 8016996:	f000 fb49 	bl	801702c <__multadd>
 801699a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801699c:	9002      	str	r0, [sp, #8]
 801699e:	f107 38ff 	add.w	r8, r7, #4294967295
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	f000 8177 	beq.w	8016c96 <_dtoa_r+0xb66>
 80169a8:	4629      	mov	r1, r5
 80169aa:	2300      	movs	r3, #0
 80169ac:	220a      	movs	r2, #10
 80169ae:	4648      	mov	r0, r9
 80169b0:	f000 fb3c 	bl	801702c <__multadd>
 80169b4:	f1bb 0f00 	cmp.w	fp, #0
 80169b8:	4605      	mov	r5, r0
 80169ba:	dc6f      	bgt.n	8016a9c <_dtoa_r+0x96c>
 80169bc:	9b07      	ldr	r3, [sp, #28]
 80169be:	2b02      	cmp	r3, #2
 80169c0:	dc49      	bgt.n	8016a56 <_dtoa_r+0x926>
 80169c2:	e06b      	b.n	8016a9c <_dtoa_r+0x96c>
 80169c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80169c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80169ca:	e73c      	b.n	8016846 <_dtoa_r+0x716>
 80169cc:	3fe00000 	.word	0x3fe00000
 80169d0:	40240000 	.word	0x40240000
 80169d4:	9b03      	ldr	r3, [sp, #12]
 80169d6:	1e5c      	subs	r4, r3, #1
 80169d8:	9b08      	ldr	r3, [sp, #32]
 80169da:	42a3      	cmp	r3, r4
 80169dc:	db09      	blt.n	80169f2 <_dtoa_r+0x8c2>
 80169de:	1b1c      	subs	r4, r3, r4
 80169e0:	9b03      	ldr	r3, [sp, #12]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	f6bf af30 	bge.w	8016848 <_dtoa_r+0x718>
 80169e8:	9b00      	ldr	r3, [sp, #0]
 80169ea:	9a03      	ldr	r2, [sp, #12]
 80169ec:	1a9e      	subs	r6, r3, r2
 80169ee:	2300      	movs	r3, #0
 80169f0:	e72b      	b.n	801684a <_dtoa_r+0x71a>
 80169f2:	9b08      	ldr	r3, [sp, #32]
 80169f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80169f6:	9408      	str	r4, [sp, #32]
 80169f8:	1ae3      	subs	r3, r4, r3
 80169fa:	441a      	add	r2, r3
 80169fc:	9e00      	ldr	r6, [sp, #0]
 80169fe:	9b03      	ldr	r3, [sp, #12]
 8016a00:	920d      	str	r2, [sp, #52]	@ 0x34
 8016a02:	2400      	movs	r4, #0
 8016a04:	e721      	b.n	801684a <_dtoa_r+0x71a>
 8016a06:	9c08      	ldr	r4, [sp, #32]
 8016a08:	9e00      	ldr	r6, [sp, #0]
 8016a0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016a0c:	e728      	b.n	8016860 <_dtoa_r+0x730>
 8016a0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8016a12:	e751      	b.n	80168b8 <_dtoa_r+0x788>
 8016a14:	9a08      	ldr	r2, [sp, #32]
 8016a16:	9902      	ldr	r1, [sp, #8]
 8016a18:	e750      	b.n	80168bc <_dtoa_r+0x78c>
 8016a1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a1e:	e751      	b.n	80168c4 <_dtoa_r+0x794>
 8016a20:	2300      	movs	r3, #0
 8016a22:	e779      	b.n	8016918 <_dtoa_r+0x7e8>
 8016a24:	9b04      	ldr	r3, [sp, #16]
 8016a26:	e777      	b.n	8016918 <_dtoa_r+0x7e8>
 8016a28:	2300      	movs	r3, #0
 8016a2a:	9308      	str	r3, [sp, #32]
 8016a2c:	e779      	b.n	8016922 <_dtoa_r+0x7f2>
 8016a2e:	d093      	beq.n	8016958 <_dtoa_r+0x828>
 8016a30:	9a00      	ldr	r2, [sp, #0]
 8016a32:	331c      	adds	r3, #28
 8016a34:	441a      	add	r2, r3
 8016a36:	9200      	str	r2, [sp, #0]
 8016a38:	9a06      	ldr	r2, [sp, #24]
 8016a3a:	441a      	add	r2, r3
 8016a3c:	441e      	add	r6, r3
 8016a3e:	9206      	str	r2, [sp, #24]
 8016a40:	e78a      	b.n	8016958 <_dtoa_r+0x828>
 8016a42:	4603      	mov	r3, r0
 8016a44:	e7f4      	b.n	8016a30 <_dtoa_r+0x900>
 8016a46:	9b03      	ldr	r3, [sp, #12]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	46b8      	mov	r8, r7
 8016a4c:	dc20      	bgt.n	8016a90 <_dtoa_r+0x960>
 8016a4e:	469b      	mov	fp, r3
 8016a50:	9b07      	ldr	r3, [sp, #28]
 8016a52:	2b02      	cmp	r3, #2
 8016a54:	dd1e      	ble.n	8016a94 <_dtoa_r+0x964>
 8016a56:	f1bb 0f00 	cmp.w	fp, #0
 8016a5a:	f47f adb1 	bne.w	80165c0 <_dtoa_r+0x490>
 8016a5e:	4621      	mov	r1, r4
 8016a60:	465b      	mov	r3, fp
 8016a62:	2205      	movs	r2, #5
 8016a64:	4648      	mov	r0, r9
 8016a66:	f000 fae1 	bl	801702c <__multadd>
 8016a6a:	4601      	mov	r1, r0
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	9802      	ldr	r0, [sp, #8]
 8016a70:	f000 fcec 	bl	801744c <__mcmp>
 8016a74:	2800      	cmp	r0, #0
 8016a76:	f77f ada3 	ble.w	80165c0 <_dtoa_r+0x490>
 8016a7a:	4656      	mov	r6, sl
 8016a7c:	2331      	movs	r3, #49	@ 0x31
 8016a7e:	f806 3b01 	strb.w	r3, [r6], #1
 8016a82:	f108 0801 	add.w	r8, r8, #1
 8016a86:	e59f      	b.n	80165c8 <_dtoa_r+0x498>
 8016a88:	9c03      	ldr	r4, [sp, #12]
 8016a8a:	46b8      	mov	r8, r7
 8016a8c:	4625      	mov	r5, r4
 8016a8e:	e7f4      	b.n	8016a7a <_dtoa_r+0x94a>
 8016a90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8016a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	f000 8101 	beq.w	8016c9e <_dtoa_r+0xb6e>
 8016a9c:	2e00      	cmp	r6, #0
 8016a9e:	dd05      	ble.n	8016aac <_dtoa_r+0x97c>
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	4632      	mov	r2, r6
 8016aa4:	4648      	mov	r0, r9
 8016aa6:	f000 fc65 	bl	8017374 <__lshift>
 8016aaa:	4605      	mov	r5, r0
 8016aac:	9b08      	ldr	r3, [sp, #32]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d05c      	beq.n	8016b6c <_dtoa_r+0xa3c>
 8016ab2:	6869      	ldr	r1, [r5, #4]
 8016ab4:	4648      	mov	r0, r9
 8016ab6:	f000 fa57 	bl	8016f68 <_Balloc>
 8016aba:	4606      	mov	r6, r0
 8016abc:	b928      	cbnz	r0, 8016aca <_dtoa_r+0x99a>
 8016abe:	4b82      	ldr	r3, [pc, #520]	@ (8016cc8 <_dtoa_r+0xb98>)
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016ac6:	f7ff bb4a 	b.w	801615e <_dtoa_r+0x2e>
 8016aca:	692a      	ldr	r2, [r5, #16]
 8016acc:	3202      	adds	r2, #2
 8016ace:	0092      	lsls	r2, r2, #2
 8016ad0:	f105 010c 	add.w	r1, r5, #12
 8016ad4:	300c      	adds	r0, #12
 8016ad6:	f7ff fa6c 	bl	8015fb2 <memcpy>
 8016ada:	2201      	movs	r2, #1
 8016adc:	4631      	mov	r1, r6
 8016ade:	4648      	mov	r0, r9
 8016ae0:	f000 fc48 	bl	8017374 <__lshift>
 8016ae4:	f10a 0301 	add.w	r3, sl, #1
 8016ae8:	9300      	str	r3, [sp, #0]
 8016aea:	eb0a 030b 	add.w	r3, sl, fp
 8016aee:	9308      	str	r3, [sp, #32]
 8016af0:	9b04      	ldr	r3, [sp, #16]
 8016af2:	f003 0301 	and.w	r3, r3, #1
 8016af6:	462f      	mov	r7, r5
 8016af8:	9306      	str	r3, [sp, #24]
 8016afa:	4605      	mov	r5, r0
 8016afc:	9b00      	ldr	r3, [sp, #0]
 8016afe:	9802      	ldr	r0, [sp, #8]
 8016b00:	4621      	mov	r1, r4
 8016b02:	f103 3bff 	add.w	fp, r3, #4294967295
 8016b06:	f7ff fa89 	bl	801601c <quorem>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	3330      	adds	r3, #48	@ 0x30
 8016b0e:	9003      	str	r0, [sp, #12]
 8016b10:	4639      	mov	r1, r7
 8016b12:	9802      	ldr	r0, [sp, #8]
 8016b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b16:	f000 fc99 	bl	801744c <__mcmp>
 8016b1a:	462a      	mov	r2, r5
 8016b1c:	9004      	str	r0, [sp, #16]
 8016b1e:	4621      	mov	r1, r4
 8016b20:	4648      	mov	r0, r9
 8016b22:	f000 fcaf 	bl	8017484 <__mdiff>
 8016b26:	68c2      	ldr	r2, [r0, #12]
 8016b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b2a:	4606      	mov	r6, r0
 8016b2c:	bb02      	cbnz	r2, 8016b70 <_dtoa_r+0xa40>
 8016b2e:	4601      	mov	r1, r0
 8016b30:	9802      	ldr	r0, [sp, #8]
 8016b32:	f000 fc8b 	bl	801744c <__mcmp>
 8016b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b38:	4602      	mov	r2, r0
 8016b3a:	4631      	mov	r1, r6
 8016b3c:	4648      	mov	r0, r9
 8016b3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b42:	f000 fa51 	bl	8016fe8 <_Bfree>
 8016b46:	9b07      	ldr	r3, [sp, #28]
 8016b48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016b4a:	9e00      	ldr	r6, [sp, #0]
 8016b4c:	ea42 0103 	orr.w	r1, r2, r3
 8016b50:	9b06      	ldr	r3, [sp, #24]
 8016b52:	4319      	orrs	r1, r3
 8016b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b56:	d10d      	bne.n	8016b74 <_dtoa_r+0xa44>
 8016b58:	2b39      	cmp	r3, #57	@ 0x39
 8016b5a:	d027      	beq.n	8016bac <_dtoa_r+0xa7c>
 8016b5c:	9a04      	ldr	r2, [sp, #16]
 8016b5e:	2a00      	cmp	r2, #0
 8016b60:	dd01      	ble.n	8016b66 <_dtoa_r+0xa36>
 8016b62:	9b03      	ldr	r3, [sp, #12]
 8016b64:	3331      	adds	r3, #49	@ 0x31
 8016b66:	f88b 3000 	strb.w	r3, [fp]
 8016b6a:	e52e      	b.n	80165ca <_dtoa_r+0x49a>
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	e7b9      	b.n	8016ae4 <_dtoa_r+0x9b4>
 8016b70:	2201      	movs	r2, #1
 8016b72:	e7e2      	b.n	8016b3a <_dtoa_r+0xa0a>
 8016b74:	9904      	ldr	r1, [sp, #16]
 8016b76:	2900      	cmp	r1, #0
 8016b78:	db04      	blt.n	8016b84 <_dtoa_r+0xa54>
 8016b7a:	9807      	ldr	r0, [sp, #28]
 8016b7c:	4301      	orrs	r1, r0
 8016b7e:	9806      	ldr	r0, [sp, #24]
 8016b80:	4301      	orrs	r1, r0
 8016b82:	d120      	bne.n	8016bc6 <_dtoa_r+0xa96>
 8016b84:	2a00      	cmp	r2, #0
 8016b86:	ddee      	ble.n	8016b66 <_dtoa_r+0xa36>
 8016b88:	9902      	ldr	r1, [sp, #8]
 8016b8a:	9300      	str	r3, [sp, #0]
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	4648      	mov	r0, r9
 8016b90:	f000 fbf0 	bl	8017374 <__lshift>
 8016b94:	4621      	mov	r1, r4
 8016b96:	9002      	str	r0, [sp, #8]
 8016b98:	f000 fc58 	bl	801744c <__mcmp>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	9b00      	ldr	r3, [sp, #0]
 8016ba0:	dc02      	bgt.n	8016ba8 <_dtoa_r+0xa78>
 8016ba2:	d1e0      	bne.n	8016b66 <_dtoa_r+0xa36>
 8016ba4:	07da      	lsls	r2, r3, #31
 8016ba6:	d5de      	bpl.n	8016b66 <_dtoa_r+0xa36>
 8016ba8:	2b39      	cmp	r3, #57	@ 0x39
 8016baa:	d1da      	bne.n	8016b62 <_dtoa_r+0xa32>
 8016bac:	2339      	movs	r3, #57	@ 0x39
 8016bae:	f88b 3000 	strb.w	r3, [fp]
 8016bb2:	4633      	mov	r3, r6
 8016bb4:	461e      	mov	r6, r3
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016bbc:	2a39      	cmp	r2, #57	@ 0x39
 8016bbe:	d04e      	beq.n	8016c5e <_dtoa_r+0xb2e>
 8016bc0:	3201      	adds	r2, #1
 8016bc2:	701a      	strb	r2, [r3, #0]
 8016bc4:	e501      	b.n	80165ca <_dtoa_r+0x49a>
 8016bc6:	2a00      	cmp	r2, #0
 8016bc8:	dd03      	ble.n	8016bd2 <_dtoa_r+0xaa2>
 8016bca:	2b39      	cmp	r3, #57	@ 0x39
 8016bcc:	d0ee      	beq.n	8016bac <_dtoa_r+0xa7c>
 8016bce:	3301      	adds	r3, #1
 8016bd0:	e7c9      	b.n	8016b66 <_dtoa_r+0xa36>
 8016bd2:	9a00      	ldr	r2, [sp, #0]
 8016bd4:	9908      	ldr	r1, [sp, #32]
 8016bd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016bda:	428a      	cmp	r2, r1
 8016bdc:	d028      	beq.n	8016c30 <_dtoa_r+0xb00>
 8016bde:	9902      	ldr	r1, [sp, #8]
 8016be0:	2300      	movs	r3, #0
 8016be2:	220a      	movs	r2, #10
 8016be4:	4648      	mov	r0, r9
 8016be6:	f000 fa21 	bl	801702c <__multadd>
 8016bea:	42af      	cmp	r7, r5
 8016bec:	9002      	str	r0, [sp, #8]
 8016bee:	f04f 0300 	mov.w	r3, #0
 8016bf2:	f04f 020a 	mov.w	r2, #10
 8016bf6:	4639      	mov	r1, r7
 8016bf8:	4648      	mov	r0, r9
 8016bfa:	d107      	bne.n	8016c0c <_dtoa_r+0xadc>
 8016bfc:	f000 fa16 	bl	801702c <__multadd>
 8016c00:	4607      	mov	r7, r0
 8016c02:	4605      	mov	r5, r0
 8016c04:	9b00      	ldr	r3, [sp, #0]
 8016c06:	3301      	adds	r3, #1
 8016c08:	9300      	str	r3, [sp, #0]
 8016c0a:	e777      	b.n	8016afc <_dtoa_r+0x9cc>
 8016c0c:	f000 fa0e 	bl	801702c <__multadd>
 8016c10:	4629      	mov	r1, r5
 8016c12:	4607      	mov	r7, r0
 8016c14:	2300      	movs	r3, #0
 8016c16:	220a      	movs	r2, #10
 8016c18:	4648      	mov	r0, r9
 8016c1a:	f000 fa07 	bl	801702c <__multadd>
 8016c1e:	4605      	mov	r5, r0
 8016c20:	e7f0      	b.n	8016c04 <_dtoa_r+0xad4>
 8016c22:	f1bb 0f00 	cmp.w	fp, #0
 8016c26:	bfcc      	ite	gt
 8016c28:	465e      	movgt	r6, fp
 8016c2a:	2601      	movle	r6, #1
 8016c2c:	4456      	add	r6, sl
 8016c2e:	2700      	movs	r7, #0
 8016c30:	9902      	ldr	r1, [sp, #8]
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	2201      	movs	r2, #1
 8016c36:	4648      	mov	r0, r9
 8016c38:	f000 fb9c 	bl	8017374 <__lshift>
 8016c3c:	4621      	mov	r1, r4
 8016c3e:	9002      	str	r0, [sp, #8]
 8016c40:	f000 fc04 	bl	801744c <__mcmp>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	dcb4      	bgt.n	8016bb2 <_dtoa_r+0xa82>
 8016c48:	d102      	bne.n	8016c50 <_dtoa_r+0xb20>
 8016c4a:	9b00      	ldr	r3, [sp, #0]
 8016c4c:	07db      	lsls	r3, r3, #31
 8016c4e:	d4b0      	bmi.n	8016bb2 <_dtoa_r+0xa82>
 8016c50:	4633      	mov	r3, r6
 8016c52:	461e      	mov	r6, r3
 8016c54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016c58:	2a30      	cmp	r2, #48	@ 0x30
 8016c5a:	d0fa      	beq.n	8016c52 <_dtoa_r+0xb22>
 8016c5c:	e4b5      	b.n	80165ca <_dtoa_r+0x49a>
 8016c5e:	459a      	cmp	sl, r3
 8016c60:	d1a8      	bne.n	8016bb4 <_dtoa_r+0xa84>
 8016c62:	2331      	movs	r3, #49	@ 0x31
 8016c64:	f108 0801 	add.w	r8, r8, #1
 8016c68:	f88a 3000 	strb.w	r3, [sl]
 8016c6c:	e4ad      	b.n	80165ca <_dtoa_r+0x49a>
 8016c6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016c70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8016ccc <_dtoa_r+0xb9c>
 8016c74:	b11b      	cbz	r3, 8016c7e <_dtoa_r+0xb4e>
 8016c76:	f10a 0308 	add.w	r3, sl, #8
 8016c7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016c7c:	6013      	str	r3, [r2, #0]
 8016c7e:	4650      	mov	r0, sl
 8016c80:	b017      	add	sp, #92	@ 0x5c
 8016c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c86:	9b07      	ldr	r3, [sp, #28]
 8016c88:	2b01      	cmp	r3, #1
 8016c8a:	f77f ae2e 	ble.w	80168ea <_dtoa_r+0x7ba>
 8016c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016c90:	9308      	str	r3, [sp, #32]
 8016c92:	2001      	movs	r0, #1
 8016c94:	e64d      	b.n	8016932 <_dtoa_r+0x802>
 8016c96:	f1bb 0f00 	cmp.w	fp, #0
 8016c9a:	f77f aed9 	ble.w	8016a50 <_dtoa_r+0x920>
 8016c9e:	4656      	mov	r6, sl
 8016ca0:	9802      	ldr	r0, [sp, #8]
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	f7ff f9ba 	bl	801601c <quorem>
 8016ca8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8016cac:	f806 3b01 	strb.w	r3, [r6], #1
 8016cb0:	eba6 020a 	sub.w	r2, r6, sl
 8016cb4:	4593      	cmp	fp, r2
 8016cb6:	ddb4      	ble.n	8016c22 <_dtoa_r+0xaf2>
 8016cb8:	9902      	ldr	r1, [sp, #8]
 8016cba:	2300      	movs	r3, #0
 8016cbc:	220a      	movs	r2, #10
 8016cbe:	4648      	mov	r0, r9
 8016cc0:	f000 f9b4 	bl	801702c <__multadd>
 8016cc4:	9002      	str	r0, [sp, #8]
 8016cc6:	e7eb      	b.n	8016ca0 <_dtoa_r+0xb70>
 8016cc8:	0801aa6d 	.word	0x0801aa6d
 8016ccc:	0801aa08 	.word	0x0801aa08

08016cd0 <_free_r>:
 8016cd0:	b538      	push	{r3, r4, r5, lr}
 8016cd2:	4605      	mov	r5, r0
 8016cd4:	2900      	cmp	r1, #0
 8016cd6:	d041      	beq.n	8016d5c <_free_r+0x8c>
 8016cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cdc:	1f0c      	subs	r4, r1, #4
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	bfb8      	it	lt
 8016ce2:	18e4      	addlt	r4, r4, r3
 8016ce4:	f000 f934 	bl	8016f50 <__malloc_lock>
 8016ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8016d60 <_free_r+0x90>)
 8016cea:	6813      	ldr	r3, [r2, #0]
 8016cec:	b933      	cbnz	r3, 8016cfc <_free_r+0x2c>
 8016cee:	6063      	str	r3, [r4, #4]
 8016cf0:	6014      	str	r4, [r2, #0]
 8016cf2:	4628      	mov	r0, r5
 8016cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cf8:	f000 b930 	b.w	8016f5c <__malloc_unlock>
 8016cfc:	42a3      	cmp	r3, r4
 8016cfe:	d908      	bls.n	8016d12 <_free_r+0x42>
 8016d00:	6820      	ldr	r0, [r4, #0]
 8016d02:	1821      	adds	r1, r4, r0
 8016d04:	428b      	cmp	r3, r1
 8016d06:	bf01      	itttt	eq
 8016d08:	6819      	ldreq	r1, [r3, #0]
 8016d0a:	685b      	ldreq	r3, [r3, #4]
 8016d0c:	1809      	addeq	r1, r1, r0
 8016d0e:	6021      	streq	r1, [r4, #0]
 8016d10:	e7ed      	b.n	8016cee <_free_r+0x1e>
 8016d12:	461a      	mov	r2, r3
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	b10b      	cbz	r3, 8016d1c <_free_r+0x4c>
 8016d18:	42a3      	cmp	r3, r4
 8016d1a:	d9fa      	bls.n	8016d12 <_free_r+0x42>
 8016d1c:	6811      	ldr	r1, [r2, #0]
 8016d1e:	1850      	adds	r0, r2, r1
 8016d20:	42a0      	cmp	r0, r4
 8016d22:	d10b      	bne.n	8016d3c <_free_r+0x6c>
 8016d24:	6820      	ldr	r0, [r4, #0]
 8016d26:	4401      	add	r1, r0
 8016d28:	1850      	adds	r0, r2, r1
 8016d2a:	4283      	cmp	r3, r0
 8016d2c:	6011      	str	r1, [r2, #0]
 8016d2e:	d1e0      	bne.n	8016cf2 <_free_r+0x22>
 8016d30:	6818      	ldr	r0, [r3, #0]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	6053      	str	r3, [r2, #4]
 8016d36:	4408      	add	r0, r1
 8016d38:	6010      	str	r0, [r2, #0]
 8016d3a:	e7da      	b.n	8016cf2 <_free_r+0x22>
 8016d3c:	d902      	bls.n	8016d44 <_free_r+0x74>
 8016d3e:	230c      	movs	r3, #12
 8016d40:	602b      	str	r3, [r5, #0]
 8016d42:	e7d6      	b.n	8016cf2 <_free_r+0x22>
 8016d44:	6820      	ldr	r0, [r4, #0]
 8016d46:	1821      	adds	r1, r4, r0
 8016d48:	428b      	cmp	r3, r1
 8016d4a:	bf04      	itt	eq
 8016d4c:	6819      	ldreq	r1, [r3, #0]
 8016d4e:	685b      	ldreq	r3, [r3, #4]
 8016d50:	6063      	str	r3, [r4, #4]
 8016d52:	bf04      	itt	eq
 8016d54:	1809      	addeq	r1, r1, r0
 8016d56:	6021      	streq	r1, [r4, #0]
 8016d58:	6054      	str	r4, [r2, #4]
 8016d5a:	e7ca      	b.n	8016cf2 <_free_r+0x22>
 8016d5c:	bd38      	pop	{r3, r4, r5, pc}
 8016d5e:	bf00      	nop
 8016d60:	2000a980 	.word	0x2000a980

08016d64 <_findenv_r>:
 8016d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d68:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016dd8 <_findenv_r+0x74>
 8016d6c:	4606      	mov	r6, r0
 8016d6e:	4689      	mov	r9, r1
 8016d70:	4617      	mov	r7, r2
 8016d72:	f001 f831 	bl	8017dd8 <__env_lock>
 8016d76:	f8da 4000 	ldr.w	r4, [sl]
 8016d7a:	b134      	cbz	r4, 8016d8a <_findenv_r+0x26>
 8016d7c:	464b      	mov	r3, r9
 8016d7e:	4698      	mov	r8, r3
 8016d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d84:	b13a      	cbz	r2, 8016d96 <_findenv_r+0x32>
 8016d86:	2a3d      	cmp	r2, #61	@ 0x3d
 8016d88:	d1f9      	bne.n	8016d7e <_findenv_r+0x1a>
 8016d8a:	4630      	mov	r0, r6
 8016d8c:	f001 f82a 	bl	8017de4 <__env_unlock>
 8016d90:	2000      	movs	r0, #0
 8016d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d96:	eba8 0809 	sub.w	r8, r8, r9
 8016d9a:	46a3      	mov	fp, r4
 8016d9c:	f854 0b04 	ldr.w	r0, [r4], #4
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d0f2      	beq.n	8016d8a <_findenv_r+0x26>
 8016da4:	4642      	mov	r2, r8
 8016da6:	4649      	mov	r1, r9
 8016da8:	f000 ff2e 	bl	8017c08 <strncmp>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d1f4      	bne.n	8016d9a <_findenv_r+0x36>
 8016db0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016db4:	eb03 0508 	add.w	r5, r3, r8
 8016db8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016dbc:	2b3d      	cmp	r3, #61	@ 0x3d
 8016dbe:	d1ec      	bne.n	8016d9a <_findenv_r+0x36>
 8016dc0:	f8da 3000 	ldr.w	r3, [sl]
 8016dc4:	ebab 0303 	sub.w	r3, fp, r3
 8016dc8:	109b      	asrs	r3, r3, #2
 8016dca:	4630      	mov	r0, r6
 8016dcc:	603b      	str	r3, [r7, #0]
 8016dce:	f001 f809 	bl	8017de4 <__env_unlock>
 8016dd2:	1c68      	adds	r0, r5, #1
 8016dd4:	e7dd      	b.n	8016d92 <_findenv_r+0x2e>
 8016dd6:	bf00      	nop
 8016dd8:	20000014 	.word	0x20000014

08016ddc <_getenv_r>:
 8016ddc:	b507      	push	{r0, r1, r2, lr}
 8016dde:	aa01      	add	r2, sp, #4
 8016de0:	f7ff ffc0 	bl	8016d64 <_findenv_r>
 8016de4:	b003      	add	sp, #12
 8016de6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016dec <malloc>:
 8016dec:	4b02      	ldr	r3, [pc, #8]	@ (8016df8 <malloc+0xc>)
 8016dee:	4601      	mov	r1, r0
 8016df0:	6818      	ldr	r0, [r3, #0]
 8016df2:	f000 b82d 	b.w	8016e50 <_malloc_r>
 8016df6:	bf00      	nop
 8016df8:	20000038 	.word	0x20000038

08016dfc <free>:
 8016dfc:	4b02      	ldr	r3, [pc, #8]	@ (8016e08 <free+0xc>)
 8016dfe:	4601      	mov	r1, r0
 8016e00:	6818      	ldr	r0, [r3, #0]
 8016e02:	f7ff bf65 	b.w	8016cd0 <_free_r>
 8016e06:	bf00      	nop
 8016e08:	20000038 	.word	0x20000038

08016e0c <sbrk_aligned>:
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8016e4c <sbrk_aligned+0x40>)
 8016e10:	460c      	mov	r4, r1
 8016e12:	6831      	ldr	r1, [r6, #0]
 8016e14:	4605      	mov	r5, r0
 8016e16:	b911      	cbnz	r1, 8016e1e <sbrk_aligned+0x12>
 8016e18:	f000 ffb2 	bl	8017d80 <_sbrk_r>
 8016e1c:	6030      	str	r0, [r6, #0]
 8016e1e:	4621      	mov	r1, r4
 8016e20:	4628      	mov	r0, r5
 8016e22:	f000 ffad 	bl	8017d80 <_sbrk_r>
 8016e26:	1c43      	adds	r3, r0, #1
 8016e28:	d103      	bne.n	8016e32 <sbrk_aligned+0x26>
 8016e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bd70      	pop	{r4, r5, r6, pc}
 8016e32:	1cc4      	adds	r4, r0, #3
 8016e34:	f024 0403 	bic.w	r4, r4, #3
 8016e38:	42a0      	cmp	r0, r4
 8016e3a:	d0f8      	beq.n	8016e2e <sbrk_aligned+0x22>
 8016e3c:	1a21      	subs	r1, r4, r0
 8016e3e:	4628      	mov	r0, r5
 8016e40:	f000 ff9e 	bl	8017d80 <_sbrk_r>
 8016e44:	3001      	adds	r0, #1
 8016e46:	d1f2      	bne.n	8016e2e <sbrk_aligned+0x22>
 8016e48:	e7ef      	b.n	8016e2a <sbrk_aligned+0x1e>
 8016e4a:	bf00      	nop
 8016e4c:	2000a97c 	.word	0x2000a97c

08016e50 <_malloc_r>:
 8016e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e54:	1ccd      	adds	r5, r1, #3
 8016e56:	f025 0503 	bic.w	r5, r5, #3
 8016e5a:	3508      	adds	r5, #8
 8016e5c:	2d0c      	cmp	r5, #12
 8016e5e:	bf38      	it	cc
 8016e60:	250c      	movcc	r5, #12
 8016e62:	2d00      	cmp	r5, #0
 8016e64:	4606      	mov	r6, r0
 8016e66:	db01      	blt.n	8016e6c <_malloc_r+0x1c>
 8016e68:	42a9      	cmp	r1, r5
 8016e6a:	d904      	bls.n	8016e76 <_malloc_r+0x26>
 8016e6c:	230c      	movs	r3, #12
 8016e6e:	6033      	str	r3, [r6, #0]
 8016e70:	2000      	movs	r0, #0
 8016e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016f4c <_malloc_r+0xfc>
 8016e7a:	f000 f869 	bl	8016f50 <__malloc_lock>
 8016e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8016e82:	461c      	mov	r4, r3
 8016e84:	bb44      	cbnz	r4, 8016ed8 <_malloc_r+0x88>
 8016e86:	4629      	mov	r1, r5
 8016e88:	4630      	mov	r0, r6
 8016e8a:	f7ff ffbf 	bl	8016e0c <sbrk_aligned>
 8016e8e:	1c43      	adds	r3, r0, #1
 8016e90:	4604      	mov	r4, r0
 8016e92:	d158      	bne.n	8016f46 <_malloc_r+0xf6>
 8016e94:	f8d8 4000 	ldr.w	r4, [r8]
 8016e98:	4627      	mov	r7, r4
 8016e9a:	2f00      	cmp	r7, #0
 8016e9c:	d143      	bne.n	8016f26 <_malloc_r+0xd6>
 8016e9e:	2c00      	cmp	r4, #0
 8016ea0:	d04b      	beq.n	8016f3a <_malloc_r+0xea>
 8016ea2:	6823      	ldr	r3, [r4, #0]
 8016ea4:	4639      	mov	r1, r7
 8016ea6:	4630      	mov	r0, r6
 8016ea8:	eb04 0903 	add.w	r9, r4, r3
 8016eac:	f000 ff68 	bl	8017d80 <_sbrk_r>
 8016eb0:	4581      	cmp	r9, r0
 8016eb2:	d142      	bne.n	8016f3a <_malloc_r+0xea>
 8016eb4:	6821      	ldr	r1, [r4, #0]
 8016eb6:	1a6d      	subs	r5, r5, r1
 8016eb8:	4629      	mov	r1, r5
 8016eba:	4630      	mov	r0, r6
 8016ebc:	f7ff ffa6 	bl	8016e0c <sbrk_aligned>
 8016ec0:	3001      	adds	r0, #1
 8016ec2:	d03a      	beq.n	8016f3a <_malloc_r+0xea>
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	442b      	add	r3, r5
 8016ec8:	6023      	str	r3, [r4, #0]
 8016eca:	f8d8 3000 	ldr.w	r3, [r8]
 8016ece:	685a      	ldr	r2, [r3, #4]
 8016ed0:	bb62      	cbnz	r2, 8016f2c <_malloc_r+0xdc>
 8016ed2:	f8c8 7000 	str.w	r7, [r8]
 8016ed6:	e00f      	b.n	8016ef8 <_malloc_r+0xa8>
 8016ed8:	6822      	ldr	r2, [r4, #0]
 8016eda:	1b52      	subs	r2, r2, r5
 8016edc:	d420      	bmi.n	8016f20 <_malloc_r+0xd0>
 8016ede:	2a0b      	cmp	r2, #11
 8016ee0:	d917      	bls.n	8016f12 <_malloc_r+0xc2>
 8016ee2:	1961      	adds	r1, r4, r5
 8016ee4:	42a3      	cmp	r3, r4
 8016ee6:	6025      	str	r5, [r4, #0]
 8016ee8:	bf18      	it	ne
 8016eea:	6059      	strne	r1, [r3, #4]
 8016eec:	6863      	ldr	r3, [r4, #4]
 8016eee:	bf08      	it	eq
 8016ef0:	f8c8 1000 	streq.w	r1, [r8]
 8016ef4:	5162      	str	r2, [r4, r5]
 8016ef6:	604b      	str	r3, [r1, #4]
 8016ef8:	4630      	mov	r0, r6
 8016efa:	f000 f82f 	bl	8016f5c <__malloc_unlock>
 8016efe:	f104 000b 	add.w	r0, r4, #11
 8016f02:	1d23      	adds	r3, r4, #4
 8016f04:	f020 0007 	bic.w	r0, r0, #7
 8016f08:	1ac2      	subs	r2, r0, r3
 8016f0a:	bf1c      	itt	ne
 8016f0c:	1a1b      	subne	r3, r3, r0
 8016f0e:	50a3      	strne	r3, [r4, r2]
 8016f10:	e7af      	b.n	8016e72 <_malloc_r+0x22>
 8016f12:	6862      	ldr	r2, [r4, #4]
 8016f14:	42a3      	cmp	r3, r4
 8016f16:	bf0c      	ite	eq
 8016f18:	f8c8 2000 	streq.w	r2, [r8]
 8016f1c:	605a      	strne	r2, [r3, #4]
 8016f1e:	e7eb      	b.n	8016ef8 <_malloc_r+0xa8>
 8016f20:	4623      	mov	r3, r4
 8016f22:	6864      	ldr	r4, [r4, #4]
 8016f24:	e7ae      	b.n	8016e84 <_malloc_r+0x34>
 8016f26:	463c      	mov	r4, r7
 8016f28:	687f      	ldr	r7, [r7, #4]
 8016f2a:	e7b6      	b.n	8016e9a <_malloc_r+0x4a>
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	42a3      	cmp	r3, r4
 8016f32:	d1fb      	bne.n	8016f2c <_malloc_r+0xdc>
 8016f34:	2300      	movs	r3, #0
 8016f36:	6053      	str	r3, [r2, #4]
 8016f38:	e7de      	b.n	8016ef8 <_malloc_r+0xa8>
 8016f3a:	230c      	movs	r3, #12
 8016f3c:	6033      	str	r3, [r6, #0]
 8016f3e:	4630      	mov	r0, r6
 8016f40:	f000 f80c 	bl	8016f5c <__malloc_unlock>
 8016f44:	e794      	b.n	8016e70 <_malloc_r+0x20>
 8016f46:	6005      	str	r5, [r0, #0]
 8016f48:	e7d6      	b.n	8016ef8 <_malloc_r+0xa8>
 8016f4a:	bf00      	nop
 8016f4c:	2000a980 	.word	0x2000a980

08016f50 <__malloc_lock>:
 8016f50:	4801      	ldr	r0, [pc, #4]	@ (8016f58 <__malloc_lock+0x8>)
 8016f52:	f7ff b823 	b.w	8015f9c <__retarget_lock_acquire_recursive>
 8016f56:	bf00      	nop
 8016f58:	2000a97a 	.word	0x2000a97a

08016f5c <__malloc_unlock>:
 8016f5c:	4801      	ldr	r0, [pc, #4]	@ (8016f64 <__malloc_unlock+0x8>)
 8016f5e:	f7ff b81f 	b.w	8015fa0 <__retarget_lock_release_recursive>
 8016f62:	bf00      	nop
 8016f64:	2000a97a 	.word	0x2000a97a

08016f68 <_Balloc>:
 8016f68:	b570      	push	{r4, r5, r6, lr}
 8016f6a:	69c6      	ldr	r6, [r0, #28]
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	460d      	mov	r5, r1
 8016f70:	b976      	cbnz	r6, 8016f90 <_Balloc+0x28>
 8016f72:	2010      	movs	r0, #16
 8016f74:	f7ff ff3a 	bl	8016dec <malloc>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	61e0      	str	r0, [r4, #28]
 8016f7c:	b920      	cbnz	r0, 8016f88 <_Balloc+0x20>
 8016f7e:	4b18      	ldr	r3, [pc, #96]	@ (8016fe0 <_Balloc+0x78>)
 8016f80:	4818      	ldr	r0, [pc, #96]	@ (8016fe4 <_Balloc+0x7c>)
 8016f82:	216b      	movs	r1, #107	@ 0x6b
 8016f84:	f7ff f824 	bl	8015fd0 <__assert_func>
 8016f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016f8c:	6006      	str	r6, [r0, #0]
 8016f8e:	60c6      	str	r6, [r0, #12]
 8016f90:	69e6      	ldr	r6, [r4, #28]
 8016f92:	68f3      	ldr	r3, [r6, #12]
 8016f94:	b183      	cbz	r3, 8016fb8 <_Balloc+0x50>
 8016f96:	69e3      	ldr	r3, [r4, #28]
 8016f98:	68db      	ldr	r3, [r3, #12]
 8016f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016f9e:	b9b8      	cbnz	r0, 8016fd0 <_Balloc+0x68>
 8016fa0:	2101      	movs	r1, #1
 8016fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8016fa6:	1d72      	adds	r2, r6, #5
 8016fa8:	0092      	lsls	r2, r2, #2
 8016faa:	4620      	mov	r0, r4
 8016fac:	f000 feff 	bl	8017dae <_calloc_r>
 8016fb0:	b160      	cbz	r0, 8016fcc <_Balloc+0x64>
 8016fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016fb6:	e00e      	b.n	8016fd6 <_Balloc+0x6e>
 8016fb8:	2221      	movs	r2, #33	@ 0x21
 8016fba:	2104      	movs	r1, #4
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	f000 fef6 	bl	8017dae <_calloc_r>
 8016fc2:	69e3      	ldr	r3, [r4, #28]
 8016fc4:	60f0      	str	r0, [r6, #12]
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d1e4      	bne.n	8016f96 <_Balloc+0x2e>
 8016fcc:	2000      	movs	r0, #0
 8016fce:	bd70      	pop	{r4, r5, r6, pc}
 8016fd0:	6802      	ldr	r2, [r0, #0]
 8016fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016fdc:	e7f7      	b.n	8016fce <_Balloc+0x66>
 8016fde:	bf00      	nop
 8016fe0:	0801a884 	.word	0x0801a884
 8016fe4:	0801aa7e 	.word	0x0801aa7e

08016fe8 <_Bfree>:
 8016fe8:	b570      	push	{r4, r5, r6, lr}
 8016fea:	69c6      	ldr	r6, [r0, #28]
 8016fec:	4605      	mov	r5, r0
 8016fee:	460c      	mov	r4, r1
 8016ff0:	b976      	cbnz	r6, 8017010 <_Bfree+0x28>
 8016ff2:	2010      	movs	r0, #16
 8016ff4:	f7ff fefa 	bl	8016dec <malloc>
 8016ff8:	4602      	mov	r2, r0
 8016ffa:	61e8      	str	r0, [r5, #28]
 8016ffc:	b920      	cbnz	r0, 8017008 <_Bfree+0x20>
 8016ffe:	4b09      	ldr	r3, [pc, #36]	@ (8017024 <_Bfree+0x3c>)
 8017000:	4809      	ldr	r0, [pc, #36]	@ (8017028 <_Bfree+0x40>)
 8017002:	218f      	movs	r1, #143	@ 0x8f
 8017004:	f7fe ffe4 	bl	8015fd0 <__assert_func>
 8017008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801700c:	6006      	str	r6, [r0, #0]
 801700e:	60c6      	str	r6, [r0, #12]
 8017010:	b13c      	cbz	r4, 8017022 <_Bfree+0x3a>
 8017012:	69eb      	ldr	r3, [r5, #28]
 8017014:	6862      	ldr	r2, [r4, #4]
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801701c:	6021      	str	r1, [r4, #0]
 801701e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017022:	bd70      	pop	{r4, r5, r6, pc}
 8017024:	0801a884 	.word	0x0801a884
 8017028:	0801aa7e 	.word	0x0801aa7e

0801702c <__multadd>:
 801702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017030:	690d      	ldr	r5, [r1, #16]
 8017032:	4607      	mov	r7, r0
 8017034:	460c      	mov	r4, r1
 8017036:	461e      	mov	r6, r3
 8017038:	f101 0c14 	add.w	ip, r1, #20
 801703c:	2000      	movs	r0, #0
 801703e:	f8dc 3000 	ldr.w	r3, [ip]
 8017042:	b299      	uxth	r1, r3
 8017044:	fb02 6101 	mla	r1, r2, r1, r6
 8017048:	0c1e      	lsrs	r6, r3, #16
 801704a:	0c0b      	lsrs	r3, r1, #16
 801704c:	fb02 3306 	mla	r3, r2, r6, r3
 8017050:	b289      	uxth	r1, r1
 8017052:	3001      	adds	r0, #1
 8017054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017058:	4285      	cmp	r5, r0
 801705a:	f84c 1b04 	str.w	r1, [ip], #4
 801705e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017062:	dcec      	bgt.n	801703e <__multadd+0x12>
 8017064:	b30e      	cbz	r6, 80170aa <__multadd+0x7e>
 8017066:	68a3      	ldr	r3, [r4, #8]
 8017068:	42ab      	cmp	r3, r5
 801706a:	dc19      	bgt.n	80170a0 <__multadd+0x74>
 801706c:	6861      	ldr	r1, [r4, #4]
 801706e:	4638      	mov	r0, r7
 8017070:	3101      	adds	r1, #1
 8017072:	f7ff ff79 	bl	8016f68 <_Balloc>
 8017076:	4680      	mov	r8, r0
 8017078:	b928      	cbnz	r0, 8017086 <__multadd+0x5a>
 801707a:	4602      	mov	r2, r0
 801707c:	4b0c      	ldr	r3, [pc, #48]	@ (80170b0 <__multadd+0x84>)
 801707e:	480d      	ldr	r0, [pc, #52]	@ (80170b4 <__multadd+0x88>)
 8017080:	21ba      	movs	r1, #186	@ 0xba
 8017082:	f7fe ffa5 	bl	8015fd0 <__assert_func>
 8017086:	6922      	ldr	r2, [r4, #16]
 8017088:	3202      	adds	r2, #2
 801708a:	f104 010c 	add.w	r1, r4, #12
 801708e:	0092      	lsls	r2, r2, #2
 8017090:	300c      	adds	r0, #12
 8017092:	f7fe ff8e 	bl	8015fb2 <memcpy>
 8017096:	4621      	mov	r1, r4
 8017098:	4638      	mov	r0, r7
 801709a:	f7ff ffa5 	bl	8016fe8 <_Bfree>
 801709e:	4644      	mov	r4, r8
 80170a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80170a4:	3501      	adds	r5, #1
 80170a6:	615e      	str	r6, [r3, #20]
 80170a8:	6125      	str	r5, [r4, #16]
 80170aa:	4620      	mov	r0, r4
 80170ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170b0:	0801aa6d 	.word	0x0801aa6d
 80170b4:	0801aa7e 	.word	0x0801aa7e

080170b8 <__hi0bits>:
 80170b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80170bc:	4603      	mov	r3, r0
 80170be:	bf36      	itet	cc
 80170c0:	0403      	lslcc	r3, r0, #16
 80170c2:	2000      	movcs	r0, #0
 80170c4:	2010      	movcc	r0, #16
 80170c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80170ca:	bf3c      	itt	cc
 80170cc:	021b      	lslcc	r3, r3, #8
 80170ce:	3008      	addcc	r0, #8
 80170d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80170d4:	bf3c      	itt	cc
 80170d6:	011b      	lslcc	r3, r3, #4
 80170d8:	3004      	addcc	r0, #4
 80170da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170de:	bf3c      	itt	cc
 80170e0:	009b      	lslcc	r3, r3, #2
 80170e2:	3002      	addcc	r0, #2
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	db05      	blt.n	80170f4 <__hi0bits+0x3c>
 80170e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80170ec:	f100 0001 	add.w	r0, r0, #1
 80170f0:	bf08      	it	eq
 80170f2:	2020      	moveq	r0, #32
 80170f4:	4770      	bx	lr

080170f6 <__lo0bits>:
 80170f6:	6803      	ldr	r3, [r0, #0]
 80170f8:	4602      	mov	r2, r0
 80170fa:	f013 0007 	ands.w	r0, r3, #7
 80170fe:	d00b      	beq.n	8017118 <__lo0bits+0x22>
 8017100:	07d9      	lsls	r1, r3, #31
 8017102:	d421      	bmi.n	8017148 <__lo0bits+0x52>
 8017104:	0798      	lsls	r0, r3, #30
 8017106:	bf49      	itett	mi
 8017108:	085b      	lsrmi	r3, r3, #1
 801710a:	089b      	lsrpl	r3, r3, #2
 801710c:	2001      	movmi	r0, #1
 801710e:	6013      	strmi	r3, [r2, #0]
 8017110:	bf5c      	itt	pl
 8017112:	6013      	strpl	r3, [r2, #0]
 8017114:	2002      	movpl	r0, #2
 8017116:	4770      	bx	lr
 8017118:	b299      	uxth	r1, r3
 801711a:	b909      	cbnz	r1, 8017120 <__lo0bits+0x2a>
 801711c:	0c1b      	lsrs	r3, r3, #16
 801711e:	2010      	movs	r0, #16
 8017120:	b2d9      	uxtb	r1, r3
 8017122:	b909      	cbnz	r1, 8017128 <__lo0bits+0x32>
 8017124:	3008      	adds	r0, #8
 8017126:	0a1b      	lsrs	r3, r3, #8
 8017128:	0719      	lsls	r1, r3, #28
 801712a:	bf04      	itt	eq
 801712c:	091b      	lsreq	r3, r3, #4
 801712e:	3004      	addeq	r0, #4
 8017130:	0799      	lsls	r1, r3, #30
 8017132:	bf04      	itt	eq
 8017134:	089b      	lsreq	r3, r3, #2
 8017136:	3002      	addeq	r0, #2
 8017138:	07d9      	lsls	r1, r3, #31
 801713a:	d403      	bmi.n	8017144 <__lo0bits+0x4e>
 801713c:	085b      	lsrs	r3, r3, #1
 801713e:	f100 0001 	add.w	r0, r0, #1
 8017142:	d003      	beq.n	801714c <__lo0bits+0x56>
 8017144:	6013      	str	r3, [r2, #0]
 8017146:	4770      	bx	lr
 8017148:	2000      	movs	r0, #0
 801714a:	4770      	bx	lr
 801714c:	2020      	movs	r0, #32
 801714e:	4770      	bx	lr

08017150 <__i2b>:
 8017150:	b510      	push	{r4, lr}
 8017152:	460c      	mov	r4, r1
 8017154:	2101      	movs	r1, #1
 8017156:	f7ff ff07 	bl	8016f68 <_Balloc>
 801715a:	4602      	mov	r2, r0
 801715c:	b928      	cbnz	r0, 801716a <__i2b+0x1a>
 801715e:	4b05      	ldr	r3, [pc, #20]	@ (8017174 <__i2b+0x24>)
 8017160:	4805      	ldr	r0, [pc, #20]	@ (8017178 <__i2b+0x28>)
 8017162:	f240 1145 	movw	r1, #325	@ 0x145
 8017166:	f7fe ff33 	bl	8015fd0 <__assert_func>
 801716a:	2301      	movs	r3, #1
 801716c:	6144      	str	r4, [r0, #20]
 801716e:	6103      	str	r3, [r0, #16]
 8017170:	bd10      	pop	{r4, pc}
 8017172:	bf00      	nop
 8017174:	0801aa6d 	.word	0x0801aa6d
 8017178:	0801aa7e 	.word	0x0801aa7e

0801717c <__multiply>:
 801717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017180:	4617      	mov	r7, r2
 8017182:	690a      	ldr	r2, [r1, #16]
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	429a      	cmp	r2, r3
 8017188:	bfa8      	it	ge
 801718a:	463b      	movge	r3, r7
 801718c:	4689      	mov	r9, r1
 801718e:	bfa4      	itt	ge
 8017190:	460f      	movge	r7, r1
 8017192:	4699      	movge	r9, r3
 8017194:	693d      	ldr	r5, [r7, #16]
 8017196:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	6879      	ldr	r1, [r7, #4]
 801719e:	eb05 060a 	add.w	r6, r5, sl
 80171a2:	42b3      	cmp	r3, r6
 80171a4:	b085      	sub	sp, #20
 80171a6:	bfb8      	it	lt
 80171a8:	3101      	addlt	r1, #1
 80171aa:	f7ff fedd 	bl	8016f68 <_Balloc>
 80171ae:	b930      	cbnz	r0, 80171be <__multiply+0x42>
 80171b0:	4602      	mov	r2, r0
 80171b2:	4b41      	ldr	r3, [pc, #260]	@ (80172b8 <__multiply+0x13c>)
 80171b4:	4841      	ldr	r0, [pc, #260]	@ (80172bc <__multiply+0x140>)
 80171b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80171ba:	f7fe ff09 	bl	8015fd0 <__assert_func>
 80171be:	f100 0414 	add.w	r4, r0, #20
 80171c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80171c6:	4623      	mov	r3, r4
 80171c8:	2200      	movs	r2, #0
 80171ca:	4573      	cmp	r3, lr
 80171cc:	d320      	bcc.n	8017210 <__multiply+0x94>
 80171ce:	f107 0814 	add.w	r8, r7, #20
 80171d2:	f109 0114 	add.w	r1, r9, #20
 80171d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80171da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80171de:	9302      	str	r3, [sp, #8]
 80171e0:	1beb      	subs	r3, r5, r7
 80171e2:	3b15      	subs	r3, #21
 80171e4:	f023 0303 	bic.w	r3, r3, #3
 80171e8:	3304      	adds	r3, #4
 80171ea:	3715      	adds	r7, #21
 80171ec:	42bd      	cmp	r5, r7
 80171ee:	bf38      	it	cc
 80171f0:	2304      	movcc	r3, #4
 80171f2:	9301      	str	r3, [sp, #4]
 80171f4:	9b02      	ldr	r3, [sp, #8]
 80171f6:	9103      	str	r1, [sp, #12]
 80171f8:	428b      	cmp	r3, r1
 80171fa:	d80c      	bhi.n	8017216 <__multiply+0x9a>
 80171fc:	2e00      	cmp	r6, #0
 80171fe:	dd03      	ble.n	8017208 <__multiply+0x8c>
 8017200:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017204:	2b00      	cmp	r3, #0
 8017206:	d055      	beq.n	80172b4 <__multiply+0x138>
 8017208:	6106      	str	r6, [r0, #16]
 801720a:	b005      	add	sp, #20
 801720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017210:	f843 2b04 	str.w	r2, [r3], #4
 8017214:	e7d9      	b.n	80171ca <__multiply+0x4e>
 8017216:	f8b1 a000 	ldrh.w	sl, [r1]
 801721a:	f1ba 0f00 	cmp.w	sl, #0
 801721e:	d01f      	beq.n	8017260 <__multiply+0xe4>
 8017220:	46c4      	mov	ip, r8
 8017222:	46a1      	mov	r9, r4
 8017224:	2700      	movs	r7, #0
 8017226:	f85c 2b04 	ldr.w	r2, [ip], #4
 801722a:	f8d9 3000 	ldr.w	r3, [r9]
 801722e:	fa1f fb82 	uxth.w	fp, r2
 8017232:	b29b      	uxth	r3, r3
 8017234:	fb0a 330b 	mla	r3, sl, fp, r3
 8017238:	443b      	add	r3, r7
 801723a:	f8d9 7000 	ldr.w	r7, [r9]
 801723e:	0c12      	lsrs	r2, r2, #16
 8017240:	0c3f      	lsrs	r7, r7, #16
 8017242:	fb0a 7202 	mla	r2, sl, r2, r7
 8017246:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801724a:	b29b      	uxth	r3, r3
 801724c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017250:	4565      	cmp	r5, ip
 8017252:	f849 3b04 	str.w	r3, [r9], #4
 8017256:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801725a:	d8e4      	bhi.n	8017226 <__multiply+0xaa>
 801725c:	9b01      	ldr	r3, [sp, #4]
 801725e:	50e7      	str	r7, [r4, r3]
 8017260:	9b03      	ldr	r3, [sp, #12]
 8017262:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017266:	3104      	adds	r1, #4
 8017268:	f1b9 0f00 	cmp.w	r9, #0
 801726c:	d020      	beq.n	80172b0 <__multiply+0x134>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	4647      	mov	r7, r8
 8017272:	46a4      	mov	ip, r4
 8017274:	f04f 0a00 	mov.w	sl, #0
 8017278:	f8b7 b000 	ldrh.w	fp, [r7]
 801727c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8017280:	fb09 220b 	mla	r2, r9, fp, r2
 8017284:	4452      	add	r2, sl
 8017286:	b29b      	uxth	r3, r3
 8017288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801728c:	f84c 3b04 	str.w	r3, [ip], #4
 8017290:	f857 3b04 	ldr.w	r3, [r7], #4
 8017294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017298:	f8bc 3000 	ldrh.w	r3, [ip]
 801729c:	fb09 330a 	mla	r3, r9, sl, r3
 80172a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80172a4:	42bd      	cmp	r5, r7
 80172a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80172aa:	d8e5      	bhi.n	8017278 <__multiply+0xfc>
 80172ac:	9a01      	ldr	r2, [sp, #4]
 80172ae:	50a3      	str	r3, [r4, r2]
 80172b0:	3404      	adds	r4, #4
 80172b2:	e79f      	b.n	80171f4 <__multiply+0x78>
 80172b4:	3e01      	subs	r6, #1
 80172b6:	e7a1      	b.n	80171fc <__multiply+0x80>
 80172b8:	0801aa6d 	.word	0x0801aa6d
 80172bc:	0801aa7e 	.word	0x0801aa7e

080172c0 <__pow5mult>:
 80172c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172c4:	4615      	mov	r5, r2
 80172c6:	f012 0203 	ands.w	r2, r2, #3
 80172ca:	4607      	mov	r7, r0
 80172cc:	460e      	mov	r6, r1
 80172ce:	d007      	beq.n	80172e0 <__pow5mult+0x20>
 80172d0:	4c25      	ldr	r4, [pc, #148]	@ (8017368 <__pow5mult+0xa8>)
 80172d2:	3a01      	subs	r2, #1
 80172d4:	2300      	movs	r3, #0
 80172d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80172da:	f7ff fea7 	bl	801702c <__multadd>
 80172de:	4606      	mov	r6, r0
 80172e0:	10ad      	asrs	r5, r5, #2
 80172e2:	d03d      	beq.n	8017360 <__pow5mult+0xa0>
 80172e4:	69fc      	ldr	r4, [r7, #28]
 80172e6:	b97c      	cbnz	r4, 8017308 <__pow5mult+0x48>
 80172e8:	2010      	movs	r0, #16
 80172ea:	f7ff fd7f 	bl	8016dec <malloc>
 80172ee:	4602      	mov	r2, r0
 80172f0:	61f8      	str	r0, [r7, #28]
 80172f2:	b928      	cbnz	r0, 8017300 <__pow5mult+0x40>
 80172f4:	4b1d      	ldr	r3, [pc, #116]	@ (801736c <__pow5mult+0xac>)
 80172f6:	481e      	ldr	r0, [pc, #120]	@ (8017370 <__pow5mult+0xb0>)
 80172f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80172fc:	f7fe fe68 	bl	8015fd0 <__assert_func>
 8017300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017304:	6004      	str	r4, [r0, #0]
 8017306:	60c4      	str	r4, [r0, #12]
 8017308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017310:	b94c      	cbnz	r4, 8017326 <__pow5mult+0x66>
 8017312:	f240 2171 	movw	r1, #625	@ 0x271
 8017316:	4638      	mov	r0, r7
 8017318:	f7ff ff1a 	bl	8017150 <__i2b>
 801731c:	2300      	movs	r3, #0
 801731e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017322:	4604      	mov	r4, r0
 8017324:	6003      	str	r3, [r0, #0]
 8017326:	f04f 0900 	mov.w	r9, #0
 801732a:	07eb      	lsls	r3, r5, #31
 801732c:	d50a      	bpl.n	8017344 <__pow5mult+0x84>
 801732e:	4631      	mov	r1, r6
 8017330:	4622      	mov	r2, r4
 8017332:	4638      	mov	r0, r7
 8017334:	f7ff ff22 	bl	801717c <__multiply>
 8017338:	4631      	mov	r1, r6
 801733a:	4680      	mov	r8, r0
 801733c:	4638      	mov	r0, r7
 801733e:	f7ff fe53 	bl	8016fe8 <_Bfree>
 8017342:	4646      	mov	r6, r8
 8017344:	106d      	asrs	r5, r5, #1
 8017346:	d00b      	beq.n	8017360 <__pow5mult+0xa0>
 8017348:	6820      	ldr	r0, [r4, #0]
 801734a:	b938      	cbnz	r0, 801735c <__pow5mult+0x9c>
 801734c:	4622      	mov	r2, r4
 801734e:	4621      	mov	r1, r4
 8017350:	4638      	mov	r0, r7
 8017352:	f7ff ff13 	bl	801717c <__multiply>
 8017356:	6020      	str	r0, [r4, #0]
 8017358:	f8c0 9000 	str.w	r9, [r0]
 801735c:	4604      	mov	r4, r0
 801735e:	e7e4      	b.n	801732a <__pow5mult+0x6a>
 8017360:	4630      	mov	r0, r6
 8017362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017366:	bf00      	nop
 8017368:	0801abd0 	.word	0x0801abd0
 801736c:	0801a884 	.word	0x0801a884
 8017370:	0801aa7e 	.word	0x0801aa7e

08017374 <__lshift>:
 8017374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017378:	460c      	mov	r4, r1
 801737a:	6849      	ldr	r1, [r1, #4]
 801737c:	6923      	ldr	r3, [r4, #16]
 801737e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017382:	68a3      	ldr	r3, [r4, #8]
 8017384:	4607      	mov	r7, r0
 8017386:	4691      	mov	r9, r2
 8017388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801738c:	f108 0601 	add.w	r6, r8, #1
 8017390:	42b3      	cmp	r3, r6
 8017392:	db0b      	blt.n	80173ac <__lshift+0x38>
 8017394:	4638      	mov	r0, r7
 8017396:	f7ff fde7 	bl	8016f68 <_Balloc>
 801739a:	4605      	mov	r5, r0
 801739c:	b948      	cbnz	r0, 80173b2 <__lshift+0x3e>
 801739e:	4602      	mov	r2, r0
 80173a0:	4b28      	ldr	r3, [pc, #160]	@ (8017444 <__lshift+0xd0>)
 80173a2:	4829      	ldr	r0, [pc, #164]	@ (8017448 <__lshift+0xd4>)
 80173a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80173a8:	f7fe fe12 	bl	8015fd0 <__assert_func>
 80173ac:	3101      	adds	r1, #1
 80173ae:	005b      	lsls	r3, r3, #1
 80173b0:	e7ee      	b.n	8017390 <__lshift+0x1c>
 80173b2:	2300      	movs	r3, #0
 80173b4:	f100 0114 	add.w	r1, r0, #20
 80173b8:	f100 0210 	add.w	r2, r0, #16
 80173bc:	4618      	mov	r0, r3
 80173be:	4553      	cmp	r3, sl
 80173c0:	db33      	blt.n	801742a <__lshift+0xb6>
 80173c2:	6920      	ldr	r0, [r4, #16]
 80173c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80173c8:	f104 0314 	add.w	r3, r4, #20
 80173cc:	f019 091f 	ands.w	r9, r9, #31
 80173d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80173d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80173d8:	d02b      	beq.n	8017432 <__lshift+0xbe>
 80173da:	f1c9 0e20 	rsb	lr, r9, #32
 80173de:	468a      	mov	sl, r1
 80173e0:	2200      	movs	r2, #0
 80173e2:	6818      	ldr	r0, [r3, #0]
 80173e4:	fa00 f009 	lsl.w	r0, r0, r9
 80173e8:	4310      	orrs	r0, r2
 80173ea:	f84a 0b04 	str.w	r0, [sl], #4
 80173ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80173f2:	459c      	cmp	ip, r3
 80173f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80173f8:	d8f3      	bhi.n	80173e2 <__lshift+0x6e>
 80173fa:	ebac 0304 	sub.w	r3, ip, r4
 80173fe:	3b15      	subs	r3, #21
 8017400:	f023 0303 	bic.w	r3, r3, #3
 8017404:	3304      	adds	r3, #4
 8017406:	f104 0015 	add.w	r0, r4, #21
 801740a:	4560      	cmp	r0, ip
 801740c:	bf88      	it	hi
 801740e:	2304      	movhi	r3, #4
 8017410:	50ca      	str	r2, [r1, r3]
 8017412:	b10a      	cbz	r2, 8017418 <__lshift+0xa4>
 8017414:	f108 0602 	add.w	r6, r8, #2
 8017418:	3e01      	subs	r6, #1
 801741a:	4638      	mov	r0, r7
 801741c:	612e      	str	r6, [r5, #16]
 801741e:	4621      	mov	r1, r4
 8017420:	f7ff fde2 	bl	8016fe8 <_Bfree>
 8017424:	4628      	mov	r0, r5
 8017426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801742a:	f842 0f04 	str.w	r0, [r2, #4]!
 801742e:	3301      	adds	r3, #1
 8017430:	e7c5      	b.n	80173be <__lshift+0x4a>
 8017432:	3904      	subs	r1, #4
 8017434:	f853 2b04 	ldr.w	r2, [r3], #4
 8017438:	f841 2f04 	str.w	r2, [r1, #4]!
 801743c:	459c      	cmp	ip, r3
 801743e:	d8f9      	bhi.n	8017434 <__lshift+0xc0>
 8017440:	e7ea      	b.n	8017418 <__lshift+0xa4>
 8017442:	bf00      	nop
 8017444:	0801aa6d 	.word	0x0801aa6d
 8017448:	0801aa7e 	.word	0x0801aa7e

0801744c <__mcmp>:
 801744c:	690a      	ldr	r2, [r1, #16]
 801744e:	4603      	mov	r3, r0
 8017450:	6900      	ldr	r0, [r0, #16]
 8017452:	1a80      	subs	r0, r0, r2
 8017454:	b530      	push	{r4, r5, lr}
 8017456:	d10e      	bne.n	8017476 <__mcmp+0x2a>
 8017458:	3314      	adds	r3, #20
 801745a:	3114      	adds	r1, #20
 801745c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801746c:	4295      	cmp	r5, r2
 801746e:	d003      	beq.n	8017478 <__mcmp+0x2c>
 8017470:	d205      	bcs.n	801747e <__mcmp+0x32>
 8017472:	f04f 30ff 	mov.w	r0, #4294967295
 8017476:	bd30      	pop	{r4, r5, pc}
 8017478:	42a3      	cmp	r3, r4
 801747a:	d3f3      	bcc.n	8017464 <__mcmp+0x18>
 801747c:	e7fb      	b.n	8017476 <__mcmp+0x2a>
 801747e:	2001      	movs	r0, #1
 8017480:	e7f9      	b.n	8017476 <__mcmp+0x2a>
	...

08017484 <__mdiff>:
 8017484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017488:	4689      	mov	r9, r1
 801748a:	4606      	mov	r6, r0
 801748c:	4611      	mov	r1, r2
 801748e:	4648      	mov	r0, r9
 8017490:	4614      	mov	r4, r2
 8017492:	f7ff ffdb 	bl	801744c <__mcmp>
 8017496:	1e05      	subs	r5, r0, #0
 8017498:	d112      	bne.n	80174c0 <__mdiff+0x3c>
 801749a:	4629      	mov	r1, r5
 801749c:	4630      	mov	r0, r6
 801749e:	f7ff fd63 	bl	8016f68 <_Balloc>
 80174a2:	4602      	mov	r2, r0
 80174a4:	b928      	cbnz	r0, 80174b2 <__mdiff+0x2e>
 80174a6:	4b3f      	ldr	r3, [pc, #252]	@ (80175a4 <__mdiff+0x120>)
 80174a8:	f240 2137 	movw	r1, #567	@ 0x237
 80174ac:	483e      	ldr	r0, [pc, #248]	@ (80175a8 <__mdiff+0x124>)
 80174ae:	f7fe fd8f 	bl	8015fd0 <__assert_func>
 80174b2:	2301      	movs	r3, #1
 80174b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80174b8:	4610      	mov	r0, r2
 80174ba:	b003      	add	sp, #12
 80174bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c0:	bfbc      	itt	lt
 80174c2:	464b      	movlt	r3, r9
 80174c4:	46a1      	movlt	r9, r4
 80174c6:	4630      	mov	r0, r6
 80174c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80174cc:	bfba      	itte	lt
 80174ce:	461c      	movlt	r4, r3
 80174d0:	2501      	movlt	r5, #1
 80174d2:	2500      	movge	r5, #0
 80174d4:	f7ff fd48 	bl	8016f68 <_Balloc>
 80174d8:	4602      	mov	r2, r0
 80174da:	b918      	cbnz	r0, 80174e4 <__mdiff+0x60>
 80174dc:	4b31      	ldr	r3, [pc, #196]	@ (80175a4 <__mdiff+0x120>)
 80174de:	f240 2145 	movw	r1, #581	@ 0x245
 80174e2:	e7e3      	b.n	80174ac <__mdiff+0x28>
 80174e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80174e8:	6926      	ldr	r6, [r4, #16]
 80174ea:	60c5      	str	r5, [r0, #12]
 80174ec:	f109 0310 	add.w	r3, r9, #16
 80174f0:	f109 0514 	add.w	r5, r9, #20
 80174f4:	f104 0e14 	add.w	lr, r4, #20
 80174f8:	f100 0b14 	add.w	fp, r0, #20
 80174fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017504:	9301      	str	r3, [sp, #4]
 8017506:	46d9      	mov	r9, fp
 8017508:	f04f 0c00 	mov.w	ip, #0
 801750c:	9b01      	ldr	r3, [sp, #4]
 801750e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017516:	9301      	str	r3, [sp, #4]
 8017518:	fa1f f38a 	uxth.w	r3, sl
 801751c:	4619      	mov	r1, r3
 801751e:	b283      	uxth	r3, r0
 8017520:	1acb      	subs	r3, r1, r3
 8017522:	0c00      	lsrs	r0, r0, #16
 8017524:	4463      	add	r3, ip
 8017526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801752a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801752e:	b29b      	uxth	r3, r3
 8017530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017534:	4576      	cmp	r6, lr
 8017536:	f849 3b04 	str.w	r3, [r9], #4
 801753a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801753e:	d8e5      	bhi.n	801750c <__mdiff+0x88>
 8017540:	1b33      	subs	r3, r6, r4
 8017542:	3b15      	subs	r3, #21
 8017544:	f023 0303 	bic.w	r3, r3, #3
 8017548:	3415      	adds	r4, #21
 801754a:	3304      	adds	r3, #4
 801754c:	42a6      	cmp	r6, r4
 801754e:	bf38      	it	cc
 8017550:	2304      	movcc	r3, #4
 8017552:	441d      	add	r5, r3
 8017554:	445b      	add	r3, fp
 8017556:	461e      	mov	r6, r3
 8017558:	462c      	mov	r4, r5
 801755a:	4544      	cmp	r4, r8
 801755c:	d30e      	bcc.n	801757c <__mdiff+0xf8>
 801755e:	f108 0103 	add.w	r1, r8, #3
 8017562:	1b49      	subs	r1, r1, r5
 8017564:	f021 0103 	bic.w	r1, r1, #3
 8017568:	3d03      	subs	r5, #3
 801756a:	45a8      	cmp	r8, r5
 801756c:	bf38      	it	cc
 801756e:	2100      	movcc	r1, #0
 8017570:	440b      	add	r3, r1
 8017572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017576:	b191      	cbz	r1, 801759e <__mdiff+0x11a>
 8017578:	6117      	str	r7, [r2, #16]
 801757a:	e79d      	b.n	80174b8 <__mdiff+0x34>
 801757c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017580:	46e6      	mov	lr, ip
 8017582:	0c08      	lsrs	r0, r1, #16
 8017584:	fa1c fc81 	uxtah	ip, ip, r1
 8017588:	4471      	add	r1, lr
 801758a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801758e:	b289      	uxth	r1, r1
 8017590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017594:	f846 1b04 	str.w	r1, [r6], #4
 8017598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801759c:	e7dd      	b.n	801755a <__mdiff+0xd6>
 801759e:	3f01      	subs	r7, #1
 80175a0:	e7e7      	b.n	8017572 <__mdiff+0xee>
 80175a2:	bf00      	nop
 80175a4:	0801aa6d 	.word	0x0801aa6d
 80175a8:	0801aa7e 	.word	0x0801aa7e

080175ac <__d2b>:
 80175ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80175b0:	460f      	mov	r7, r1
 80175b2:	2101      	movs	r1, #1
 80175b4:	ec59 8b10 	vmov	r8, r9, d0
 80175b8:	4616      	mov	r6, r2
 80175ba:	f7ff fcd5 	bl	8016f68 <_Balloc>
 80175be:	4604      	mov	r4, r0
 80175c0:	b930      	cbnz	r0, 80175d0 <__d2b+0x24>
 80175c2:	4602      	mov	r2, r0
 80175c4:	4b23      	ldr	r3, [pc, #140]	@ (8017654 <__d2b+0xa8>)
 80175c6:	4824      	ldr	r0, [pc, #144]	@ (8017658 <__d2b+0xac>)
 80175c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80175cc:	f7fe fd00 	bl	8015fd0 <__assert_func>
 80175d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80175d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80175d8:	b10d      	cbz	r5, 80175de <__d2b+0x32>
 80175da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80175de:	9301      	str	r3, [sp, #4]
 80175e0:	f1b8 0300 	subs.w	r3, r8, #0
 80175e4:	d023      	beq.n	801762e <__d2b+0x82>
 80175e6:	4668      	mov	r0, sp
 80175e8:	9300      	str	r3, [sp, #0]
 80175ea:	f7ff fd84 	bl	80170f6 <__lo0bits>
 80175ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80175f2:	b1d0      	cbz	r0, 801762a <__d2b+0x7e>
 80175f4:	f1c0 0320 	rsb	r3, r0, #32
 80175f8:	fa02 f303 	lsl.w	r3, r2, r3
 80175fc:	430b      	orrs	r3, r1
 80175fe:	40c2      	lsrs	r2, r0
 8017600:	6163      	str	r3, [r4, #20]
 8017602:	9201      	str	r2, [sp, #4]
 8017604:	9b01      	ldr	r3, [sp, #4]
 8017606:	61a3      	str	r3, [r4, #24]
 8017608:	2b00      	cmp	r3, #0
 801760a:	bf0c      	ite	eq
 801760c:	2201      	moveq	r2, #1
 801760e:	2202      	movne	r2, #2
 8017610:	6122      	str	r2, [r4, #16]
 8017612:	b1a5      	cbz	r5, 801763e <__d2b+0x92>
 8017614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017618:	4405      	add	r5, r0
 801761a:	603d      	str	r5, [r7, #0]
 801761c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017620:	6030      	str	r0, [r6, #0]
 8017622:	4620      	mov	r0, r4
 8017624:	b003      	add	sp, #12
 8017626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801762a:	6161      	str	r1, [r4, #20]
 801762c:	e7ea      	b.n	8017604 <__d2b+0x58>
 801762e:	a801      	add	r0, sp, #4
 8017630:	f7ff fd61 	bl	80170f6 <__lo0bits>
 8017634:	9b01      	ldr	r3, [sp, #4]
 8017636:	6163      	str	r3, [r4, #20]
 8017638:	3020      	adds	r0, #32
 801763a:	2201      	movs	r2, #1
 801763c:	e7e8      	b.n	8017610 <__d2b+0x64>
 801763e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017646:	6038      	str	r0, [r7, #0]
 8017648:	6918      	ldr	r0, [r3, #16]
 801764a:	f7ff fd35 	bl	80170b8 <__hi0bits>
 801764e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017652:	e7e5      	b.n	8017620 <__d2b+0x74>
 8017654:	0801aa6d 	.word	0x0801aa6d
 8017658:	0801aa7e 	.word	0x0801aa7e

0801765c <_strtoul_l.isra.0>:
 801765c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017660:	4e34      	ldr	r6, [pc, #208]	@ (8017734 <_strtoul_l.isra.0+0xd8>)
 8017662:	4686      	mov	lr, r0
 8017664:	460d      	mov	r5, r1
 8017666:	4628      	mov	r0, r5
 8017668:	f815 4b01 	ldrb.w	r4, [r5], #1
 801766c:	5d37      	ldrb	r7, [r6, r4]
 801766e:	f017 0708 	ands.w	r7, r7, #8
 8017672:	d1f8      	bne.n	8017666 <_strtoul_l.isra.0+0xa>
 8017674:	2c2d      	cmp	r4, #45	@ 0x2d
 8017676:	d110      	bne.n	801769a <_strtoul_l.isra.0+0x3e>
 8017678:	782c      	ldrb	r4, [r5, #0]
 801767a:	2701      	movs	r7, #1
 801767c:	1c85      	adds	r5, r0, #2
 801767e:	f033 0010 	bics.w	r0, r3, #16
 8017682:	d115      	bne.n	80176b0 <_strtoul_l.isra.0+0x54>
 8017684:	2c30      	cmp	r4, #48	@ 0x30
 8017686:	d10d      	bne.n	80176a4 <_strtoul_l.isra.0+0x48>
 8017688:	7828      	ldrb	r0, [r5, #0]
 801768a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801768e:	2858      	cmp	r0, #88	@ 0x58
 8017690:	d108      	bne.n	80176a4 <_strtoul_l.isra.0+0x48>
 8017692:	786c      	ldrb	r4, [r5, #1]
 8017694:	3502      	adds	r5, #2
 8017696:	2310      	movs	r3, #16
 8017698:	e00a      	b.n	80176b0 <_strtoul_l.isra.0+0x54>
 801769a:	2c2b      	cmp	r4, #43	@ 0x2b
 801769c:	bf04      	itt	eq
 801769e:	782c      	ldrbeq	r4, [r5, #0]
 80176a0:	1c85      	addeq	r5, r0, #2
 80176a2:	e7ec      	b.n	801767e <_strtoul_l.isra.0+0x22>
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d1f6      	bne.n	8017696 <_strtoul_l.isra.0+0x3a>
 80176a8:	2c30      	cmp	r4, #48	@ 0x30
 80176aa:	bf14      	ite	ne
 80176ac:	230a      	movne	r3, #10
 80176ae:	2308      	moveq	r3, #8
 80176b0:	f04f 38ff 	mov.w	r8, #4294967295
 80176b4:	2600      	movs	r6, #0
 80176b6:	fbb8 f8f3 	udiv	r8, r8, r3
 80176ba:	fb03 f908 	mul.w	r9, r3, r8
 80176be:	ea6f 0909 	mvn.w	r9, r9
 80176c2:	4630      	mov	r0, r6
 80176c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80176c8:	f1bc 0f09 	cmp.w	ip, #9
 80176cc:	d810      	bhi.n	80176f0 <_strtoul_l.isra.0+0x94>
 80176ce:	4664      	mov	r4, ip
 80176d0:	42a3      	cmp	r3, r4
 80176d2:	dd1e      	ble.n	8017712 <_strtoul_l.isra.0+0xb6>
 80176d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80176d8:	d007      	beq.n	80176ea <_strtoul_l.isra.0+0x8e>
 80176da:	4580      	cmp	r8, r0
 80176dc:	d316      	bcc.n	801770c <_strtoul_l.isra.0+0xb0>
 80176de:	d101      	bne.n	80176e4 <_strtoul_l.isra.0+0x88>
 80176e0:	45a1      	cmp	r9, r4
 80176e2:	db13      	blt.n	801770c <_strtoul_l.isra.0+0xb0>
 80176e4:	fb00 4003 	mla	r0, r0, r3, r4
 80176e8:	2601      	movs	r6, #1
 80176ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176ee:	e7e9      	b.n	80176c4 <_strtoul_l.isra.0+0x68>
 80176f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80176f4:	f1bc 0f19 	cmp.w	ip, #25
 80176f8:	d801      	bhi.n	80176fe <_strtoul_l.isra.0+0xa2>
 80176fa:	3c37      	subs	r4, #55	@ 0x37
 80176fc:	e7e8      	b.n	80176d0 <_strtoul_l.isra.0+0x74>
 80176fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017702:	f1bc 0f19 	cmp.w	ip, #25
 8017706:	d804      	bhi.n	8017712 <_strtoul_l.isra.0+0xb6>
 8017708:	3c57      	subs	r4, #87	@ 0x57
 801770a:	e7e1      	b.n	80176d0 <_strtoul_l.isra.0+0x74>
 801770c:	f04f 36ff 	mov.w	r6, #4294967295
 8017710:	e7eb      	b.n	80176ea <_strtoul_l.isra.0+0x8e>
 8017712:	1c73      	adds	r3, r6, #1
 8017714:	d106      	bne.n	8017724 <_strtoul_l.isra.0+0xc8>
 8017716:	2322      	movs	r3, #34	@ 0x22
 8017718:	f8ce 3000 	str.w	r3, [lr]
 801771c:	4630      	mov	r0, r6
 801771e:	b932      	cbnz	r2, 801772e <_strtoul_l.isra.0+0xd2>
 8017720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017724:	b107      	cbz	r7, 8017728 <_strtoul_l.isra.0+0xcc>
 8017726:	4240      	negs	r0, r0
 8017728:	2a00      	cmp	r2, #0
 801772a:	d0f9      	beq.n	8017720 <_strtoul_l.isra.0+0xc4>
 801772c:	b106      	cbz	r6, 8017730 <_strtoul_l.isra.0+0xd4>
 801772e:	1e69      	subs	r1, r5, #1
 8017730:	6011      	str	r1, [r2, #0]
 8017732:	e7f5      	b.n	8017720 <_strtoul_l.isra.0+0xc4>
 8017734:	0801acd1 	.word	0x0801acd1

08017738 <_strtoul_r>:
 8017738:	f7ff bf90 	b.w	801765c <_strtoul_l.isra.0>

0801773c <strtoul>:
 801773c:	4613      	mov	r3, r2
 801773e:	460a      	mov	r2, r1
 8017740:	4601      	mov	r1, r0
 8017742:	4802      	ldr	r0, [pc, #8]	@ (801774c <strtoul+0x10>)
 8017744:	6800      	ldr	r0, [r0, #0]
 8017746:	f7ff bf89 	b.w	801765c <_strtoul_l.isra.0>
 801774a:	bf00      	nop
 801774c:	20000038 	.word	0x20000038

08017750 <__ssputs_r>:
 8017750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017754:	688e      	ldr	r6, [r1, #8]
 8017756:	461f      	mov	r7, r3
 8017758:	42be      	cmp	r6, r7
 801775a:	680b      	ldr	r3, [r1, #0]
 801775c:	4682      	mov	sl, r0
 801775e:	460c      	mov	r4, r1
 8017760:	4690      	mov	r8, r2
 8017762:	d82d      	bhi.n	80177c0 <__ssputs_r+0x70>
 8017764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801776c:	d026      	beq.n	80177bc <__ssputs_r+0x6c>
 801776e:	6965      	ldr	r5, [r4, #20]
 8017770:	6909      	ldr	r1, [r1, #16]
 8017772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017776:	eba3 0901 	sub.w	r9, r3, r1
 801777a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801777e:	1c7b      	adds	r3, r7, #1
 8017780:	444b      	add	r3, r9
 8017782:	106d      	asrs	r5, r5, #1
 8017784:	429d      	cmp	r5, r3
 8017786:	bf38      	it	cc
 8017788:	461d      	movcc	r5, r3
 801778a:	0553      	lsls	r3, r2, #21
 801778c:	d527      	bpl.n	80177de <__ssputs_r+0x8e>
 801778e:	4629      	mov	r1, r5
 8017790:	f7ff fb5e 	bl	8016e50 <_malloc_r>
 8017794:	4606      	mov	r6, r0
 8017796:	b360      	cbz	r0, 80177f2 <__ssputs_r+0xa2>
 8017798:	6921      	ldr	r1, [r4, #16]
 801779a:	464a      	mov	r2, r9
 801779c:	f7fe fc09 	bl	8015fb2 <memcpy>
 80177a0:	89a3      	ldrh	r3, [r4, #12]
 80177a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80177a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177aa:	81a3      	strh	r3, [r4, #12]
 80177ac:	6126      	str	r6, [r4, #16]
 80177ae:	6165      	str	r5, [r4, #20]
 80177b0:	444e      	add	r6, r9
 80177b2:	eba5 0509 	sub.w	r5, r5, r9
 80177b6:	6026      	str	r6, [r4, #0]
 80177b8:	60a5      	str	r5, [r4, #8]
 80177ba:	463e      	mov	r6, r7
 80177bc:	42be      	cmp	r6, r7
 80177be:	d900      	bls.n	80177c2 <__ssputs_r+0x72>
 80177c0:	463e      	mov	r6, r7
 80177c2:	6820      	ldr	r0, [r4, #0]
 80177c4:	4632      	mov	r2, r6
 80177c6:	4641      	mov	r1, r8
 80177c8:	f000 fa04 	bl	8017bd4 <memmove>
 80177cc:	68a3      	ldr	r3, [r4, #8]
 80177ce:	1b9b      	subs	r3, r3, r6
 80177d0:	60a3      	str	r3, [r4, #8]
 80177d2:	6823      	ldr	r3, [r4, #0]
 80177d4:	4433      	add	r3, r6
 80177d6:	6023      	str	r3, [r4, #0]
 80177d8:	2000      	movs	r0, #0
 80177da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177de:	462a      	mov	r2, r5
 80177e0:	f000 fb18 	bl	8017e14 <_realloc_r>
 80177e4:	4606      	mov	r6, r0
 80177e6:	2800      	cmp	r0, #0
 80177e8:	d1e0      	bne.n	80177ac <__ssputs_r+0x5c>
 80177ea:	6921      	ldr	r1, [r4, #16]
 80177ec:	4650      	mov	r0, sl
 80177ee:	f7ff fa6f 	bl	8016cd0 <_free_r>
 80177f2:	230c      	movs	r3, #12
 80177f4:	f8ca 3000 	str.w	r3, [sl]
 80177f8:	89a3      	ldrh	r3, [r4, #12]
 80177fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177fe:	81a3      	strh	r3, [r4, #12]
 8017800:	f04f 30ff 	mov.w	r0, #4294967295
 8017804:	e7e9      	b.n	80177da <__ssputs_r+0x8a>
	...

08017808 <_svfiprintf_r>:
 8017808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780c:	4698      	mov	r8, r3
 801780e:	898b      	ldrh	r3, [r1, #12]
 8017810:	061b      	lsls	r3, r3, #24
 8017812:	b09d      	sub	sp, #116	@ 0x74
 8017814:	4607      	mov	r7, r0
 8017816:	460d      	mov	r5, r1
 8017818:	4614      	mov	r4, r2
 801781a:	d510      	bpl.n	801783e <_svfiprintf_r+0x36>
 801781c:	690b      	ldr	r3, [r1, #16]
 801781e:	b973      	cbnz	r3, 801783e <_svfiprintf_r+0x36>
 8017820:	2140      	movs	r1, #64	@ 0x40
 8017822:	f7ff fb15 	bl	8016e50 <_malloc_r>
 8017826:	6028      	str	r0, [r5, #0]
 8017828:	6128      	str	r0, [r5, #16]
 801782a:	b930      	cbnz	r0, 801783a <_svfiprintf_r+0x32>
 801782c:	230c      	movs	r3, #12
 801782e:	603b      	str	r3, [r7, #0]
 8017830:	f04f 30ff 	mov.w	r0, #4294967295
 8017834:	b01d      	add	sp, #116	@ 0x74
 8017836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801783a:	2340      	movs	r3, #64	@ 0x40
 801783c:	616b      	str	r3, [r5, #20]
 801783e:	2300      	movs	r3, #0
 8017840:	9309      	str	r3, [sp, #36]	@ 0x24
 8017842:	2320      	movs	r3, #32
 8017844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017848:	f8cd 800c 	str.w	r8, [sp, #12]
 801784c:	2330      	movs	r3, #48	@ 0x30
 801784e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80179ec <_svfiprintf_r+0x1e4>
 8017852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017856:	f04f 0901 	mov.w	r9, #1
 801785a:	4623      	mov	r3, r4
 801785c:	469a      	mov	sl, r3
 801785e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017862:	b10a      	cbz	r2, 8017868 <_svfiprintf_r+0x60>
 8017864:	2a25      	cmp	r2, #37	@ 0x25
 8017866:	d1f9      	bne.n	801785c <_svfiprintf_r+0x54>
 8017868:	ebba 0b04 	subs.w	fp, sl, r4
 801786c:	d00b      	beq.n	8017886 <_svfiprintf_r+0x7e>
 801786e:	465b      	mov	r3, fp
 8017870:	4622      	mov	r2, r4
 8017872:	4629      	mov	r1, r5
 8017874:	4638      	mov	r0, r7
 8017876:	f7ff ff6b 	bl	8017750 <__ssputs_r>
 801787a:	3001      	adds	r0, #1
 801787c:	f000 80a7 	beq.w	80179ce <_svfiprintf_r+0x1c6>
 8017880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017882:	445a      	add	r2, fp
 8017884:	9209      	str	r2, [sp, #36]	@ 0x24
 8017886:	f89a 3000 	ldrb.w	r3, [sl]
 801788a:	2b00      	cmp	r3, #0
 801788c:	f000 809f 	beq.w	80179ce <_svfiprintf_r+0x1c6>
 8017890:	2300      	movs	r3, #0
 8017892:	f04f 32ff 	mov.w	r2, #4294967295
 8017896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801789a:	f10a 0a01 	add.w	sl, sl, #1
 801789e:	9304      	str	r3, [sp, #16]
 80178a0:	9307      	str	r3, [sp, #28]
 80178a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80178a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80178a8:	4654      	mov	r4, sl
 80178aa:	2205      	movs	r2, #5
 80178ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178b0:	484e      	ldr	r0, [pc, #312]	@ (80179ec <_svfiprintf_r+0x1e4>)
 80178b2:	f7e8 fc75 	bl	80001a0 <memchr>
 80178b6:	9a04      	ldr	r2, [sp, #16]
 80178b8:	b9d8      	cbnz	r0, 80178f2 <_svfiprintf_r+0xea>
 80178ba:	06d0      	lsls	r0, r2, #27
 80178bc:	bf44      	itt	mi
 80178be:	2320      	movmi	r3, #32
 80178c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178c4:	0711      	lsls	r1, r2, #28
 80178c6:	bf44      	itt	mi
 80178c8:	232b      	movmi	r3, #43	@ 0x2b
 80178ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178ce:	f89a 3000 	ldrb.w	r3, [sl]
 80178d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80178d4:	d015      	beq.n	8017902 <_svfiprintf_r+0xfa>
 80178d6:	9a07      	ldr	r2, [sp, #28]
 80178d8:	4654      	mov	r4, sl
 80178da:	2000      	movs	r0, #0
 80178dc:	f04f 0c0a 	mov.w	ip, #10
 80178e0:	4621      	mov	r1, r4
 80178e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178e6:	3b30      	subs	r3, #48	@ 0x30
 80178e8:	2b09      	cmp	r3, #9
 80178ea:	d94b      	bls.n	8017984 <_svfiprintf_r+0x17c>
 80178ec:	b1b0      	cbz	r0, 801791c <_svfiprintf_r+0x114>
 80178ee:	9207      	str	r2, [sp, #28]
 80178f0:	e014      	b.n	801791c <_svfiprintf_r+0x114>
 80178f2:	eba0 0308 	sub.w	r3, r0, r8
 80178f6:	fa09 f303 	lsl.w	r3, r9, r3
 80178fa:	4313      	orrs	r3, r2
 80178fc:	9304      	str	r3, [sp, #16]
 80178fe:	46a2      	mov	sl, r4
 8017900:	e7d2      	b.n	80178a8 <_svfiprintf_r+0xa0>
 8017902:	9b03      	ldr	r3, [sp, #12]
 8017904:	1d19      	adds	r1, r3, #4
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	9103      	str	r1, [sp, #12]
 801790a:	2b00      	cmp	r3, #0
 801790c:	bfbb      	ittet	lt
 801790e:	425b      	neglt	r3, r3
 8017910:	f042 0202 	orrlt.w	r2, r2, #2
 8017914:	9307      	strge	r3, [sp, #28]
 8017916:	9307      	strlt	r3, [sp, #28]
 8017918:	bfb8      	it	lt
 801791a:	9204      	strlt	r2, [sp, #16]
 801791c:	7823      	ldrb	r3, [r4, #0]
 801791e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017920:	d10a      	bne.n	8017938 <_svfiprintf_r+0x130>
 8017922:	7863      	ldrb	r3, [r4, #1]
 8017924:	2b2a      	cmp	r3, #42	@ 0x2a
 8017926:	d132      	bne.n	801798e <_svfiprintf_r+0x186>
 8017928:	9b03      	ldr	r3, [sp, #12]
 801792a:	1d1a      	adds	r2, r3, #4
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	9203      	str	r2, [sp, #12]
 8017930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017934:	3402      	adds	r4, #2
 8017936:	9305      	str	r3, [sp, #20]
 8017938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80179fc <_svfiprintf_r+0x1f4>
 801793c:	7821      	ldrb	r1, [r4, #0]
 801793e:	2203      	movs	r2, #3
 8017940:	4650      	mov	r0, sl
 8017942:	f7e8 fc2d 	bl	80001a0 <memchr>
 8017946:	b138      	cbz	r0, 8017958 <_svfiprintf_r+0x150>
 8017948:	9b04      	ldr	r3, [sp, #16]
 801794a:	eba0 000a 	sub.w	r0, r0, sl
 801794e:	2240      	movs	r2, #64	@ 0x40
 8017950:	4082      	lsls	r2, r0
 8017952:	4313      	orrs	r3, r2
 8017954:	3401      	adds	r4, #1
 8017956:	9304      	str	r3, [sp, #16]
 8017958:	f814 1b01 	ldrb.w	r1, [r4], #1
 801795c:	4824      	ldr	r0, [pc, #144]	@ (80179f0 <_svfiprintf_r+0x1e8>)
 801795e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017962:	2206      	movs	r2, #6
 8017964:	f7e8 fc1c 	bl	80001a0 <memchr>
 8017968:	2800      	cmp	r0, #0
 801796a:	d036      	beq.n	80179da <_svfiprintf_r+0x1d2>
 801796c:	4b21      	ldr	r3, [pc, #132]	@ (80179f4 <_svfiprintf_r+0x1ec>)
 801796e:	bb1b      	cbnz	r3, 80179b8 <_svfiprintf_r+0x1b0>
 8017970:	9b03      	ldr	r3, [sp, #12]
 8017972:	3307      	adds	r3, #7
 8017974:	f023 0307 	bic.w	r3, r3, #7
 8017978:	3308      	adds	r3, #8
 801797a:	9303      	str	r3, [sp, #12]
 801797c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801797e:	4433      	add	r3, r6
 8017980:	9309      	str	r3, [sp, #36]	@ 0x24
 8017982:	e76a      	b.n	801785a <_svfiprintf_r+0x52>
 8017984:	fb0c 3202 	mla	r2, ip, r2, r3
 8017988:	460c      	mov	r4, r1
 801798a:	2001      	movs	r0, #1
 801798c:	e7a8      	b.n	80178e0 <_svfiprintf_r+0xd8>
 801798e:	2300      	movs	r3, #0
 8017990:	3401      	adds	r4, #1
 8017992:	9305      	str	r3, [sp, #20]
 8017994:	4619      	mov	r1, r3
 8017996:	f04f 0c0a 	mov.w	ip, #10
 801799a:	4620      	mov	r0, r4
 801799c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179a0:	3a30      	subs	r2, #48	@ 0x30
 80179a2:	2a09      	cmp	r2, #9
 80179a4:	d903      	bls.n	80179ae <_svfiprintf_r+0x1a6>
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d0c6      	beq.n	8017938 <_svfiprintf_r+0x130>
 80179aa:	9105      	str	r1, [sp, #20]
 80179ac:	e7c4      	b.n	8017938 <_svfiprintf_r+0x130>
 80179ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80179b2:	4604      	mov	r4, r0
 80179b4:	2301      	movs	r3, #1
 80179b6:	e7f0      	b.n	801799a <_svfiprintf_r+0x192>
 80179b8:	ab03      	add	r3, sp, #12
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	462a      	mov	r2, r5
 80179be:	4b0e      	ldr	r3, [pc, #56]	@ (80179f8 <_svfiprintf_r+0x1f0>)
 80179c0:	a904      	add	r1, sp, #16
 80179c2:	4638      	mov	r0, r7
 80179c4:	f7fc ff0a 	bl	80147dc <_printf_float>
 80179c8:	1c42      	adds	r2, r0, #1
 80179ca:	4606      	mov	r6, r0
 80179cc:	d1d6      	bne.n	801797c <_svfiprintf_r+0x174>
 80179ce:	89ab      	ldrh	r3, [r5, #12]
 80179d0:	065b      	lsls	r3, r3, #25
 80179d2:	f53f af2d 	bmi.w	8017830 <_svfiprintf_r+0x28>
 80179d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179d8:	e72c      	b.n	8017834 <_svfiprintf_r+0x2c>
 80179da:	ab03      	add	r3, sp, #12
 80179dc:	9300      	str	r3, [sp, #0]
 80179de:	462a      	mov	r2, r5
 80179e0:	4b05      	ldr	r3, [pc, #20]	@ (80179f8 <_svfiprintf_r+0x1f0>)
 80179e2:	a904      	add	r1, sp, #16
 80179e4:	4638      	mov	r0, r7
 80179e6:	f7fd f991 	bl	8014d0c <_printf_i>
 80179ea:	e7ed      	b.n	80179c8 <_svfiprintf_r+0x1c0>
 80179ec:	0801aad7 	.word	0x0801aad7
 80179f0:	0801aae1 	.word	0x0801aae1
 80179f4:	080147dd 	.word	0x080147dd
 80179f8:	08017751 	.word	0x08017751
 80179fc:	0801aadd 	.word	0x0801aadd

08017a00 <__sflush_r>:
 8017a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a08:	0716      	lsls	r6, r2, #28
 8017a0a:	4605      	mov	r5, r0
 8017a0c:	460c      	mov	r4, r1
 8017a0e:	d454      	bmi.n	8017aba <__sflush_r+0xba>
 8017a10:	684b      	ldr	r3, [r1, #4]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	dc02      	bgt.n	8017a1c <__sflush_r+0x1c>
 8017a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	dd48      	ble.n	8017aae <__sflush_r+0xae>
 8017a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a1e:	2e00      	cmp	r6, #0
 8017a20:	d045      	beq.n	8017aae <__sflush_r+0xae>
 8017a22:	2300      	movs	r3, #0
 8017a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a28:	682f      	ldr	r7, [r5, #0]
 8017a2a:	6a21      	ldr	r1, [r4, #32]
 8017a2c:	602b      	str	r3, [r5, #0]
 8017a2e:	d030      	beq.n	8017a92 <__sflush_r+0x92>
 8017a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a32:	89a3      	ldrh	r3, [r4, #12]
 8017a34:	0759      	lsls	r1, r3, #29
 8017a36:	d505      	bpl.n	8017a44 <__sflush_r+0x44>
 8017a38:	6863      	ldr	r3, [r4, #4]
 8017a3a:	1ad2      	subs	r2, r2, r3
 8017a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a3e:	b10b      	cbz	r3, 8017a44 <__sflush_r+0x44>
 8017a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a42:	1ad2      	subs	r2, r2, r3
 8017a44:	2300      	movs	r3, #0
 8017a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a48:	6a21      	ldr	r1, [r4, #32]
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	47b0      	blx	r6
 8017a4e:	1c43      	adds	r3, r0, #1
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	d106      	bne.n	8017a62 <__sflush_r+0x62>
 8017a54:	6829      	ldr	r1, [r5, #0]
 8017a56:	291d      	cmp	r1, #29
 8017a58:	d82b      	bhi.n	8017ab2 <__sflush_r+0xb2>
 8017a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8017b04 <__sflush_r+0x104>)
 8017a5c:	40ca      	lsrs	r2, r1
 8017a5e:	07d6      	lsls	r6, r2, #31
 8017a60:	d527      	bpl.n	8017ab2 <__sflush_r+0xb2>
 8017a62:	2200      	movs	r2, #0
 8017a64:	6062      	str	r2, [r4, #4]
 8017a66:	04d9      	lsls	r1, r3, #19
 8017a68:	6922      	ldr	r2, [r4, #16]
 8017a6a:	6022      	str	r2, [r4, #0]
 8017a6c:	d504      	bpl.n	8017a78 <__sflush_r+0x78>
 8017a6e:	1c42      	adds	r2, r0, #1
 8017a70:	d101      	bne.n	8017a76 <__sflush_r+0x76>
 8017a72:	682b      	ldr	r3, [r5, #0]
 8017a74:	b903      	cbnz	r3, 8017a78 <__sflush_r+0x78>
 8017a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a7a:	602f      	str	r7, [r5, #0]
 8017a7c:	b1b9      	cbz	r1, 8017aae <__sflush_r+0xae>
 8017a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a82:	4299      	cmp	r1, r3
 8017a84:	d002      	beq.n	8017a8c <__sflush_r+0x8c>
 8017a86:	4628      	mov	r0, r5
 8017a88:	f7ff f922 	bl	8016cd0 <_free_r>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a90:	e00d      	b.n	8017aae <__sflush_r+0xae>
 8017a92:	2301      	movs	r3, #1
 8017a94:	4628      	mov	r0, r5
 8017a96:	47b0      	blx	r6
 8017a98:	4602      	mov	r2, r0
 8017a9a:	1c50      	adds	r0, r2, #1
 8017a9c:	d1c9      	bne.n	8017a32 <__sflush_r+0x32>
 8017a9e:	682b      	ldr	r3, [r5, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d0c6      	beq.n	8017a32 <__sflush_r+0x32>
 8017aa4:	2b1d      	cmp	r3, #29
 8017aa6:	d001      	beq.n	8017aac <__sflush_r+0xac>
 8017aa8:	2b16      	cmp	r3, #22
 8017aaa:	d11e      	bne.n	8017aea <__sflush_r+0xea>
 8017aac:	602f      	str	r7, [r5, #0]
 8017aae:	2000      	movs	r0, #0
 8017ab0:	e022      	b.n	8017af8 <__sflush_r+0xf8>
 8017ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ab6:	b21b      	sxth	r3, r3
 8017ab8:	e01b      	b.n	8017af2 <__sflush_r+0xf2>
 8017aba:	690f      	ldr	r7, [r1, #16]
 8017abc:	2f00      	cmp	r7, #0
 8017abe:	d0f6      	beq.n	8017aae <__sflush_r+0xae>
 8017ac0:	0793      	lsls	r3, r2, #30
 8017ac2:	680e      	ldr	r6, [r1, #0]
 8017ac4:	bf08      	it	eq
 8017ac6:	694b      	ldreq	r3, [r1, #20]
 8017ac8:	600f      	str	r7, [r1, #0]
 8017aca:	bf18      	it	ne
 8017acc:	2300      	movne	r3, #0
 8017ace:	eba6 0807 	sub.w	r8, r6, r7
 8017ad2:	608b      	str	r3, [r1, #8]
 8017ad4:	f1b8 0f00 	cmp.w	r8, #0
 8017ad8:	dde9      	ble.n	8017aae <__sflush_r+0xae>
 8017ada:	6a21      	ldr	r1, [r4, #32]
 8017adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017ade:	4643      	mov	r3, r8
 8017ae0:	463a      	mov	r2, r7
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	47b0      	blx	r6
 8017ae6:	2800      	cmp	r0, #0
 8017ae8:	dc08      	bgt.n	8017afc <__sflush_r+0xfc>
 8017aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017af2:	81a3      	strh	r3, [r4, #12]
 8017af4:	f04f 30ff 	mov.w	r0, #4294967295
 8017af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017afc:	4407      	add	r7, r0
 8017afe:	eba8 0800 	sub.w	r8, r8, r0
 8017b02:	e7e7      	b.n	8017ad4 <__sflush_r+0xd4>
 8017b04:	20400001 	.word	0x20400001

08017b08 <_fflush_r>:
 8017b08:	b538      	push	{r3, r4, r5, lr}
 8017b0a:	690b      	ldr	r3, [r1, #16]
 8017b0c:	4605      	mov	r5, r0
 8017b0e:	460c      	mov	r4, r1
 8017b10:	b913      	cbnz	r3, 8017b18 <_fflush_r+0x10>
 8017b12:	2500      	movs	r5, #0
 8017b14:	4628      	mov	r0, r5
 8017b16:	bd38      	pop	{r3, r4, r5, pc}
 8017b18:	b118      	cbz	r0, 8017b22 <_fflush_r+0x1a>
 8017b1a:	6a03      	ldr	r3, [r0, #32]
 8017b1c:	b90b      	cbnz	r3, 8017b22 <_fflush_r+0x1a>
 8017b1e:	f7fd fa9f 	bl	8015060 <__sinit>
 8017b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d0f3      	beq.n	8017b12 <_fflush_r+0xa>
 8017b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b2c:	07d0      	lsls	r0, r2, #31
 8017b2e:	d404      	bmi.n	8017b3a <_fflush_r+0x32>
 8017b30:	0599      	lsls	r1, r3, #22
 8017b32:	d402      	bmi.n	8017b3a <_fflush_r+0x32>
 8017b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b36:	f7fe fa31 	bl	8015f9c <__retarget_lock_acquire_recursive>
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	4621      	mov	r1, r4
 8017b3e:	f7ff ff5f 	bl	8017a00 <__sflush_r>
 8017b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b44:	07da      	lsls	r2, r3, #31
 8017b46:	4605      	mov	r5, r0
 8017b48:	d4e4      	bmi.n	8017b14 <_fflush_r+0xc>
 8017b4a:	89a3      	ldrh	r3, [r4, #12]
 8017b4c:	059b      	lsls	r3, r3, #22
 8017b4e:	d4e1      	bmi.n	8017b14 <_fflush_r+0xc>
 8017b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b52:	f7fe fa25 	bl	8015fa0 <__retarget_lock_release_recursive>
 8017b56:	e7dd      	b.n	8017b14 <_fflush_r+0xc>

08017b58 <fiprintf>:
 8017b58:	b40e      	push	{r1, r2, r3}
 8017b5a:	b503      	push	{r0, r1, lr}
 8017b5c:	4601      	mov	r1, r0
 8017b5e:	ab03      	add	r3, sp, #12
 8017b60:	4805      	ldr	r0, [pc, #20]	@ (8017b78 <fiprintf+0x20>)
 8017b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b66:	6800      	ldr	r0, [r0, #0]
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	f000 fb89 	bl	8018280 <_vfiprintf_r>
 8017b6e:	b002      	add	sp, #8
 8017b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b74:	b003      	add	sp, #12
 8017b76:	4770      	bx	lr
 8017b78:	20000038 	.word	0x20000038

08017b7c <siscanf>:
 8017b7c:	b40e      	push	{r1, r2, r3}
 8017b7e:	b570      	push	{r4, r5, r6, lr}
 8017b80:	b09d      	sub	sp, #116	@ 0x74
 8017b82:	ac21      	add	r4, sp, #132	@ 0x84
 8017b84:	2500      	movs	r5, #0
 8017b86:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017b8a:	f854 6b04 	ldr.w	r6, [r4], #4
 8017b8e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b92:	951b      	str	r5, [sp, #108]	@ 0x6c
 8017b94:	9002      	str	r0, [sp, #8]
 8017b96:	9006      	str	r0, [sp, #24]
 8017b98:	f7e8 fb52 	bl	8000240 <strlen>
 8017b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8017bcc <siscanf+0x50>)
 8017b9e:	9003      	str	r0, [sp, #12]
 8017ba0:	9007      	str	r0, [sp, #28]
 8017ba2:	480b      	ldr	r0, [pc, #44]	@ (8017bd0 <siscanf+0x54>)
 8017ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017ba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017baa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bae:	4632      	mov	r2, r6
 8017bb0:	4623      	mov	r3, r4
 8017bb2:	a902      	add	r1, sp, #8
 8017bb4:	6800      	ldr	r0, [r0, #0]
 8017bb6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017bb8:	9514      	str	r5, [sp, #80]	@ 0x50
 8017bba:	9401      	str	r4, [sp, #4]
 8017bbc:	f000 f9c0 	bl	8017f40 <__ssvfiscanf_r>
 8017bc0:	b01d      	add	sp, #116	@ 0x74
 8017bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bc6:	b003      	add	sp, #12
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	08015133 	.word	0x08015133
 8017bd0:	20000038 	.word	0x20000038

08017bd4 <memmove>:
 8017bd4:	4288      	cmp	r0, r1
 8017bd6:	b510      	push	{r4, lr}
 8017bd8:	eb01 0402 	add.w	r4, r1, r2
 8017bdc:	d902      	bls.n	8017be4 <memmove+0x10>
 8017bde:	4284      	cmp	r4, r0
 8017be0:	4623      	mov	r3, r4
 8017be2:	d807      	bhi.n	8017bf4 <memmove+0x20>
 8017be4:	1e43      	subs	r3, r0, #1
 8017be6:	42a1      	cmp	r1, r4
 8017be8:	d008      	beq.n	8017bfc <memmove+0x28>
 8017bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bf2:	e7f8      	b.n	8017be6 <memmove+0x12>
 8017bf4:	4402      	add	r2, r0
 8017bf6:	4601      	mov	r1, r0
 8017bf8:	428a      	cmp	r2, r1
 8017bfa:	d100      	bne.n	8017bfe <memmove+0x2a>
 8017bfc:	bd10      	pop	{r4, pc}
 8017bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c06:	e7f7      	b.n	8017bf8 <memmove+0x24>

08017c08 <strncmp>:
 8017c08:	b510      	push	{r4, lr}
 8017c0a:	b16a      	cbz	r2, 8017c28 <strncmp+0x20>
 8017c0c:	3901      	subs	r1, #1
 8017c0e:	1884      	adds	r4, r0, r2
 8017c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d103      	bne.n	8017c24 <strncmp+0x1c>
 8017c1c:	42a0      	cmp	r0, r4
 8017c1e:	d001      	beq.n	8017c24 <strncmp+0x1c>
 8017c20:	2a00      	cmp	r2, #0
 8017c22:	d1f5      	bne.n	8017c10 <strncmp+0x8>
 8017c24:	1ad0      	subs	r0, r2, r3
 8017c26:	bd10      	pop	{r4, pc}
 8017c28:	4610      	mov	r0, r2
 8017c2a:	e7fc      	b.n	8017c26 <strncmp+0x1e>

08017c2c <__gettzinfo>:
 8017c2c:	4800      	ldr	r0, [pc, #0]	@ (8017c30 <__gettzinfo+0x4>)
 8017c2e:	4770      	bx	lr
 8017c30:	20000088 	.word	0x20000088

08017c34 <gmtime_r>:
 8017c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c38:	4a4d      	ldr	r2, [pc, #308]	@ (8017d70 <gmtime_r+0x13c>)
 8017c3a:	460c      	mov	r4, r1
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8017c42:	f7e9 f809 	bl	8000c58 <__aeabi_ldivmod>
 8017c46:	2a00      	cmp	r2, #0
 8017c48:	bfbc      	itt	lt
 8017c4a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8017c4e:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8017c52:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8017c56:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8017c5a:	fbb2 f3f1 	udiv	r3, r2, r1
 8017c5e:	fb01 2213 	mls	r2, r1, r3, r2
 8017c62:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8017c66:	bfac      	ite	ge
 8017c68:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8017c6c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8017c70:	60a3      	str	r3, [r4, #8]
 8017c72:	fbb2 f3f1 	udiv	r3, r2, r1
 8017c76:	fb01 2213 	mls	r2, r1, r3, r2
 8017c7a:	6063      	str	r3, [r4, #4]
 8017c7c:	6022      	str	r2, [r4, #0]
 8017c7e:	1cc3      	adds	r3, r0, #3
 8017c80:	2207      	movs	r2, #7
 8017c82:	fb93 f2f2 	sdiv	r2, r3, r2
 8017c86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8017c8a:	1a9b      	subs	r3, r3, r2
 8017c8c:	4939      	ldr	r1, [pc, #228]	@ (8017d74 <gmtime_r+0x140>)
 8017c8e:	d555      	bpl.n	8017d3c <gmtime_r+0x108>
 8017c90:	3307      	adds	r3, #7
 8017c92:	61a3      	str	r3, [r4, #24]
 8017c94:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8017c98:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8017c9c:	fb93 f1f1 	sdiv	r1, r3, r1
 8017ca0:	4b35      	ldr	r3, [pc, #212]	@ (8017d78 <gmtime_r+0x144>)
 8017ca2:	fb03 0001 	mla	r0, r3, r1, r0
 8017ca6:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8017caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8017cae:	4403      	add	r3, r0
 8017cb0:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8017cb4:	fbb0 f2fc 	udiv	r2, r0, ip
 8017cb8:	1a9b      	subs	r3, r3, r2
 8017cba:	f240 176d 	movw	r7, #365	@ 0x16d
 8017cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8017d7c <gmtime_r+0x148>)
 8017cc0:	fbb0 f2f2 	udiv	r2, r0, r2
 8017cc4:	2664      	movs	r6, #100	@ 0x64
 8017cc6:	1a9b      	subs	r3, r3, r2
 8017cc8:	fbb3 f2f7 	udiv	r2, r3, r7
 8017ccc:	fbb3 f3fc 	udiv	r3, r3, ip
 8017cd0:	fbb2 f5f6 	udiv	r5, r2, r6
 8017cd4:	1aeb      	subs	r3, r5, r3
 8017cd6:	4403      	add	r3, r0
 8017cd8:	fb07 3312 	mls	r3, r7, r2, r3
 8017cdc:	2099      	movs	r0, #153	@ 0x99
 8017cde:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8017ce2:	3702      	adds	r7, #2
 8017ce4:	f103 0e01 	add.w	lr, r3, #1
 8017ce8:	fbb7 fcf0 	udiv	ip, r7, r0
 8017cec:	fb00 f00c 	mul.w	r0, r0, ip
 8017cf0:	3002      	adds	r0, #2
 8017cf2:	f04f 0805 	mov.w	r8, #5
 8017cf6:	fbb0 f0f8 	udiv	r0, r0, r8
 8017cfa:	ebae 0000 	sub.w	r0, lr, r0
 8017cfe:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8017d02:	4577      	cmp	r7, lr
 8017d04:	bf8c      	ite	hi
 8017d06:	f06f 0709 	mvnhi.w	r7, #9
 8017d0a:	2702      	movls	r7, #2
 8017d0c:	4467      	add	r7, ip
 8017d0e:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8017d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d16:	2f01      	cmp	r7, #1
 8017d18:	bf98      	it	ls
 8017d1a:	3101      	addls	r1, #1
 8017d1c:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8017d20:	d312      	bcc.n	8017d48 <gmtime_r+0x114>
 8017d22:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8017d26:	61e3      	str	r3, [r4, #28]
 8017d28:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	60e0      	str	r0, [r4, #12]
 8017d30:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8017d34:	6223      	str	r3, [r4, #32]
 8017d36:	4620      	mov	r0, r4
 8017d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d3c:	2800      	cmp	r0, #0
 8017d3e:	61a3      	str	r3, [r4, #24]
 8017d40:	dba8      	blt.n	8017c94 <gmtime_r+0x60>
 8017d42:	fb90 f1f1 	sdiv	r1, r0, r1
 8017d46:	e7ab      	b.n	8017ca0 <gmtime_r+0x6c>
 8017d48:	f012 0f03 	tst.w	r2, #3
 8017d4c:	d102      	bne.n	8017d54 <gmtime_r+0x120>
 8017d4e:	fb06 2515 	mls	r5, r6, r5, r2
 8017d52:	b95d      	cbnz	r5, 8017d6c <gmtime_r+0x138>
 8017d54:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8017d58:	fbb2 f6f5 	udiv	r6, r2, r5
 8017d5c:	fb05 2216 	mls	r2, r5, r6, r2
 8017d60:	fab2 f282 	clz	r2, r2
 8017d64:	0952      	lsrs	r2, r2, #5
 8017d66:	333b      	adds	r3, #59	@ 0x3b
 8017d68:	4413      	add	r3, r2
 8017d6a:	e7dc      	b.n	8017d26 <gmtime_r+0xf2>
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	e7fa      	b.n	8017d66 <gmtime_r+0x132>
 8017d70:	00015180 	.word	0x00015180
 8017d74:	00023ab1 	.word	0x00023ab1
 8017d78:	fffdc54f 	.word	0xfffdc54f
 8017d7c:	00023ab0 	.word	0x00023ab0

08017d80 <_sbrk_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	4d06      	ldr	r5, [pc, #24]	@ (8017d9c <_sbrk_r+0x1c>)
 8017d84:	2300      	movs	r3, #0
 8017d86:	4604      	mov	r4, r0
 8017d88:	4608      	mov	r0, r1
 8017d8a:	602b      	str	r3, [r5, #0]
 8017d8c:	f7f4 fbb0 	bl	800c4f0 <_sbrk>
 8017d90:	1c43      	adds	r3, r0, #1
 8017d92:	d102      	bne.n	8017d9a <_sbrk_r+0x1a>
 8017d94:	682b      	ldr	r3, [r5, #0]
 8017d96:	b103      	cbz	r3, 8017d9a <_sbrk_r+0x1a>
 8017d98:	6023      	str	r3, [r4, #0]
 8017d9a:	bd38      	pop	{r3, r4, r5, pc}
 8017d9c:	2000a974 	.word	0x2000a974

08017da0 <abort>:
 8017da0:	b508      	push	{r3, lr}
 8017da2:	2006      	movs	r0, #6
 8017da4:	f000 fe02 	bl	80189ac <raise>
 8017da8:	2001      	movs	r0, #1
 8017daa:	f7f4 fb29 	bl	800c400 <_exit>

08017dae <_calloc_r>:
 8017dae:	b570      	push	{r4, r5, r6, lr}
 8017db0:	fba1 5402 	umull	r5, r4, r1, r2
 8017db4:	b934      	cbnz	r4, 8017dc4 <_calloc_r+0x16>
 8017db6:	4629      	mov	r1, r5
 8017db8:	f7ff f84a 	bl	8016e50 <_malloc_r>
 8017dbc:	4606      	mov	r6, r0
 8017dbe:	b928      	cbnz	r0, 8017dcc <_calloc_r+0x1e>
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	bd70      	pop	{r4, r5, r6, pc}
 8017dc4:	220c      	movs	r2, #12
 8017dc6:	6002      	str	r2, [r0, #0]
 8017dc8:	2600      	movs	r6, #0
 8017dca:	e7f9      	b.n	8017dc0 <_calloc_r+0x12>
 8017dcc:	462a      	mov	r2, r5
 8017dce:	4621      	mov	r1, r4
 8017dd0:	f7fd f9e3 	bl	801519a <memset>
 8017dd4:	e7f4      	b.n	8017dc0 <_calloc_r+0x12>
	...

08017dd8 <__env_lock>:
 8017dd8:	4801      	ldr	r0, [pc, #4]	@ (8017de0 <__env_lock+0x8>)
 8017dda:	f7fe b8df 	b.w	8015f9c <__retarget_lock_acquire_recursive>
 8017dde:	bf00      	nop
 8017de0:	2000a979 	.word	0x2000a979

08017de4 <__env_unlock>:
 8017de4:	4801      	ldr	r0, [pc, #4]	@ (8017dec <__env_unlock+0x8>)
 8017de6:	f7fe b8db 	b.w	8015fa0 <__retarget_lock_release_recursive>
 8017dea:	bf00      	nop
 8017dec:	2000a979 	.word	0x2000a979

08017df0 <__ascii_mbtowc>:
 8017df0:	b082      	sub	sp, #8
 8017df2:	b901      	cbnz	r1, 8017df6 <__ascii_mbtowc+0x6>
 8017df4:	a901      	add	r1, sp, #4
 8017df6:	b142      	cbz	r2, 8017e0a <__ascii_mbtowc+0x1a>
 8017df8:	b14b      	cbz	r3, 8017e0e <__ascii_mbtowc+0x1e>
 8017dfa:	7813      	ldrb	r3, [r2, #0]
 8017dfc:	600b      	str	r3, [r1, #0]
 8017dfe:	7812      	ldrb	r2, [r2, #0]
 8017e00:	1e10      	subs	r0, r2, #0
 8017e02:	bf18      	it	ne
 8017e04:	2001      	movne	r0, #1
 8017e06:	b002      	add	sp, #8
 8017e08:	4770      	bx	lr
 8017e0a:	4610      	mov	r0, r2
 8017e0c:	e7fb      	b.n	8017e06 <__ascii_mbtowc+0x16>
 8017e0e:	f06f 0001 	mvn.w	r0, #1
 8017e12:	e7f8      	b.n	8017e06 <__ascii_mbtowc+0x16>

08017e14 <_realloc_r>:
 8017e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e18:	4607      	mov	r7, r0
 8017e1a:	4614      	mov	r4, r2
 8017e1c:	460d      	mov	r5, r1
 8017e1e:	b921      	cbnz	r1, 8017e2a <_realloc_r+0x16>
 8017e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	4611      	mov	r1, r2
 8017e26:	f7ff b813 	b.w	8016e50 <_malloc_r>
 8017e2a:	b92a      	cbnz	r2, 8017e38 <_realloc_r+0x24>
 8017e2c:	f7fe ff50 	bl	8016cd0 <_free_r>
 8017e30:	4625      	mov	r5, r4
 8017e32:	4628      	mov	r0, r5
 8017e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e38:	f000 fdd4 	bl	80189e4 <_malloc_usable_size_r>
 8017e3c:	4284      	cmp	r4, r0
 8017e3e:	4606      	mov	r6, r0
 8017e40:	d802      	bhi.n	8017e48 <_realloc_r+0x34>
 8017e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e46:	d8f4      	bhi.n	8017e32 <_realloc_r+0x1e>
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4638      	mov	r0, r7
 8017e4c:	f7ff f800 	bl	8016e50 <_malloc_r>
 8017e50:	4680      	mov	r8, r0
 8017e52:	b908      	cbnz	r0, 8017e58 <_realloc_r+0x44>
 8017e54:	4645      	mov	r5, r8
 8017e56:	e7ec      	b.n	8017e32 <_realloc_r+0x1e>
 8017e58:	42b4      	cmp	r4, r6
 8017e5a:	4622      	mov	r2, r4
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	bf28      	it	cs
 8017e60:	4632      	movcs	r2, r6
 8017e62:	f7fe f8a6 	bl	8015fb2 <memcpy>
 8017e66:	4629      	mov	r1, r5
 8017e68:	4638      	mov	r0, r7
 8017e6a:	f7fe ff31 	bl	8016cd0 <_free_r>
 8017e6e:	e7f1      	b.n	8017e54 <_realloc_r+0x40>

08017e70 <__ascii_wctomb>:
 8017e70:	4603      	mov	r3, r0
 8017e72:	4608      	mov	r0, r1
 8017e74:	b141      	cbz	r1, 8017e88 <__ascii_wctomb+0x18>
 8017e76:	2aff      	cmp	r2, #255	@ 0xff
 8017e78:	d904      	bls.n	8017e84 <__ascii_wctomb+0x14>
 8017e7a:	228a      	movs	r2, #138	@ 0x8a
 8017e7c:	601a      	str	r2, [r3, #0]
 8017e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e82:	4770      	bx	lr
 8017e84:	700a      	strb	r2, [r1, #0]
 8017e86:	2001      	movs	r0, #1
 8017e88:	4770      	bx	lr

08017e8a <_sungetc_r>:
 8017e8a:	b538      	push	{r3, r4, r5, lr}
 8017e8c:	1c4b      	adds	r3, r1, #1
 8017e8e:	4614      	mov	r4, r2
 8017e90:	d103      	bne.n	8017e9a <_sungetc_r+0x10>
 8017e92:	f04f 35ff 	mov.w	r5, #4294967295
 8017e96:	4628      	mov	r0, r5
 8017e98:	bd38      	pop	{r3, r4, r5, pc}
 8017e9a:	8993      	ldrh	r3, [r2, #12]
 8017e9c:	f023 0320 	bic.w	r3, r3, #32
 8017ea0:	8193      	strh	r3, [r2, #12]
 8017ea2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ea4:	6852      	ldr	r2, [r2, #4]
 8017ea6:	b2cd      	uxtb	r5, r1
 8017ea8:	b18b      	cbz	r3, 8017ece <_sungetc_r+0x44>
 8017eaa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017eac:	4293      	cmp	r3, r2
 8017eae:	dd08      	ble.n	8017ec2 <_sungetc_r+0x38>
 8017eb0:	6823      	ldr	r3, [r4, #0]
 8017eb2:	1e5a      	subs	r2, r3, #1
 8017eb4:	6022      	str	r2, [r4, #0]
 8017eb6:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017eba:	6863      	ldr	r3, [r4, #4]
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	6063      	str	r3, [r4, #4]
 8017ec0:	e7e9      	b.n	8017e96 <_sungetc_r+0xc>
 8017ec2:	4621      	mov	r1, r4
 8017ec4:	f000 fc7b 	bl	80187be <__submore>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d0f1      	beq.n	8017eb0 <_sungetc_r+0x26>
 8017ecc:	e7e1      	b.n	8017e92 <_sungetc_r+0x8>
 8017ece:	6921      	ldr	r1, [r4, #16]
 8017ed0:	6823      	ldr	r3, [r4, #0]
 8017ed2:	b151      	cbz	r1, 8017eea <_sungetc_r+0x60>
 8017ed4:	4299      	cmp	r1, r3
 8017ed6:	d208      	bcs.n	8017eea <_sungetc_r+0x60>
 8017ed8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017edc:	42a9      	cmp	r1, r5
 8017ede:	d104      	bne.n	8017eea <_sungetc_r+0x60>
 8017ee0:	3b01      	subs	r3, #1
 8017ee2:	3201      	adds	r2, #1
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	6062      	str	r2, [r4, #4]
 8017ee8:	e7d5      	b.n	8017e96 <_sungetc_r+0xc>
 8017eea:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8017eee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ef4:	2303      	movs	r3, #3
 8017ef6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017ef8:	4623      	mov	r3, r4
 8017efa:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017efe:	6023      	str	r3, [r4, #0]
 8017f00:	2301      	movs	r3, #1
 8017f02:	e7dc      	b.n	8017ebe <_sungetc_r+0x34>

08017f04 <__ssrefill_r>:
 8017f04:	b510      	push	{r4, lr}
 8017f06:	460c      	mov	r4, r1
 8017f08:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017f0a:	b169      	cbz	r1, 8017f28 <__ssrefill_r+0x24>
 8017f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f10:	4299      	cmp	r1, r3
 8017f12:	d001      	beq.n	8017f18 <__ssrefill_r+0x14>
 8017f14:	f7fe fedc 	bl	8016cd0 <_free_r>
 8017f18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f1a:	6063      	str	r3, [r4, #4]
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	6360      	str	r0, [r4, #52]	@ 0x34
 8017f20:	b113      	cbz	r3, 8017f28 <__ssrefill_r+0x24>
 8017f22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	bd10      	pop	{r4, pc}
 8017f28:	6923      	ldr	r3, [r4, #16]
 8017f2a:	6023      	str	r3, [r4, #0]
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	6063      	str	r3, [r4, #4]
 8017f30:	89a3      	ldrh	r3, [r4, #12]
 8017f32:	f043 0320 	orr.w	r3, r3, #32
 8017f36:	81a3      	strh	r3, [r4, #12]
 8017f38:	f04f 30ff 	mov.w	r0, #4294967295
 8017f3c:	e7f3      	b.n	8017f26 <__ssrefill_r+0x22>
	...

08017f40 <__ssvfiscanf_r>:
 8017f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f44:	460c      	mov	r4, r1
 8017f46:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017f4a:	2100      	movs	r1, #0
 8017f4c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017f50:	49a6      	ldr	r1, [pc, #664]	@ (80181ec <__ssvfiscanf_r+0x2ac>)
 8017f52:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017f54:	f10d 0804 	add.w	r8, sp, #4
 8017f58:	49a5      	ldr	r1, [pc, #660]	@ (80181f0 <__ssvfiscanf_r+0x2b0>)
 8017f5a:	4fa6      	ldr	r7, [pc, #664]	@ (80181f4 <__ssvfiscanf_r+0x2b4>)
 8017f5c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017f60:	4606      	mov	r6, r0
 8017f62:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017f64:	9300      	str	r3, [sp, #0]
 8017f66:	f892 9000 	ldrb.w	r9, [r2]
 8017f6a:	f1b9 0f00 	cmp.w	r9, #0
 8017f6e:	f000 8158 	beq.w	8018222 <__ssvfiscanf_r+0x2e2>
 8017f72:	f817 3009 	ldrb.w	r3, [r7, r9]
 8017f76:	f013 0308 	ands.w	r3, r3, #8
 8017f7a:	f102 0501 	add.w	r5, r2, #1
 8017f7e:	d019      	beq.n	8017fb4 <__ssvfiscanf_r+0x74>
 8017f80:	6863      	ldr	r3, [r4, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	dd0f      	ble.n	8017fa6 <__ssvfiscanf_r+0x66>
 8017f86:	6823      	ldr	r3, [r4, #0]
 8017f88:	781a      	ldrb	r2, [r3, #0]
 8017f8a:	5cba      	ldrb	r2, [r7, r2]
 8017f8c:	0712      	lsls	r2, r2, #28
 8017f8e:	d401      	bmi.n	8017f94 <__ssvfiscanf_r+0x54>
 8017f90:	462a      	mov	r2, r5
 8017f92:	e7e8      	b.n	8017f66 <__ssvfiscanf_r+0x26>
 8017f94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017f96:	3201      	adds	r2, #1
 8017f98:	9245      	str	r2, [sp, #276]	@ 0x114
 8017f9a:	6862      	ldr	r2, [r4, #4]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	3a01      	subs	r2, #1
 8017fa0:	6062      	str	r2, [r4, #4]
 8017fa2:	6023      	str	r3, [r4, #0]
 8017fa4:	e7ec      	b.n	8017f80 <__ssvfiscanf_r+0x40>
 8017fa6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017fa8:	4621      	mov	r1, r4
 8017faa:	4630      	mov	r0, r6
 8017fac:	4798      	blx	r3
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d0e9      	beq.n	8017f86 <__ssvfiscanf_r+0x46>
 8017fb2:	e7ed      	b.n	8017f90 <__ssvfiscanf_r+0x50>
 8017fb4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8017fb8:	f040 8085 	bne.w	80180c6 <__ssvfiscanf_r+0x186>
 8017fbc:	9341      	str	r3, [sp, #260]	@ 0x104
 8017fbe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017fc0:	7853      	ldrb	r3, [r2, #1]
 8017fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fc4:	bf02      	ittt	eq
 8017fc6:	2310      	moveq	r3, #16
 8017fc8:	1c95      	addeq	r5, r2, #2
 8017fca:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017fcc:	220a      	movs	r2, #10
 8017fce:	46aa      	mov	sl, r5
 8017fd0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017fd4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017fd8:	2b09      	cmp	r3, #9
 8017fda:	d91e      	bls.n	801801a <__ssvfiscanf_r+0xda>
 8017fdc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80181f8 <__ssvfiscanf_r+0x2b8>
 8017fe0:	2203      	movs	r2, #3
 8017fe2:	4658      	mov	r0, fp
 8017fe4:	f7e8 f8dc 	bl	80001a0 <memchr>
 8017fe8:	b138      	cbz	r0, 8017ffa <__ssvfiscanf_r+0xba>
 8017fea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017fec:	eba0 000b 	sub.w	r0, r0, fp
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	4083      	lsls	r3, r0
 8017ff4:	4313      	orrs	r3, r2
 8017ff6:	9341      	str	r3, [sp, #260]	@ 0x104
 8017ff8:	4655      	mov	r5, sl
 8017ffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ffe:	2b78      	cmp	r3, #120	@ 0x78
 8018000:	d806      	bhi.n	8018010 <__ssvfiscanf_r+0xd0>
 8018002:	2b57      	cmp	r3, #87	@ 0x57
 8018004:	d810      	bhi.n	8018028 <__ssvfiscanf_r+0xe8>
 8018006:	2b25      	cmp	r3, #37	@ 0x25
 8018008:	d05d      	beq.n	80180c6 <__ssvfiscanf_r+0x186>
 801800a:	d857      	bhi.n	80180bc <__ssvfiscanf_r+0x17c>
 801800c:	2b00      	cmp	r3, #0
 801800e:	d075      	beq.n	80180fc <__ssvfiscanf_r+0x1bc>
 8018010:	2303      	movs	r3, #3
 8018012:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018014:	230a      	movs	r3, #10
 8018016:	9342      	str	r3, [sp, #264]	@ 0x108
 8018018:	e088      	b.n	801812c <__ssvfiscanf_r+0x1ec>
 801801a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801801c:	fb02 1103 	mla	r1, r2, r3, r1
 8018020:	3930      	subs	r1, #48	@ 0x30
 8018022:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018024:	4655      	mov	r5, sl
 8018026:	e7d2      	b.n	8017fce <__ssvfiscanf_r+0x8e>
 8018028:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801802c:	2a20      	cmp	r2, #32
 801802e:	d8ef      	bhi.n	8018010 <__ssvfiscanf_r+0xd0>
 8018030:	a101      	add	r1, pc, #4	@ (adr r1, 8018038 <__ssvfiscanf_r+0xf8>)
 8018032:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018036:	bf00      	nop
 8018038:	0801810b 	.word	0x0801810b
 801803c:	08018011 	.word	0x08018011
 8018040:	08018011 	.word	0x08018011
 8018044:	08018165 	.word	0x08018165
 8018048:	08018011 	.word	0x08018011
 801804c:	08018011 	.word	0x08018011
 8018050:	08018011 	.word	0x08018011
 8018054:	08018011 	.word	0x08018011
 8018058:	08018011 	.word	0x08018011
 801805c:	08018011 	.word	0x08018011
 8018060:	08018011 	.word	0x08018011
 8018064:	0801817b 	.word	0x0801817b
 8018068:	08018161 	.word	0x08018161
 801806c:	080180c3 	.word	0x080180c3
 8018070:	080180c3 	.word	0x080180c3
 8018074:	080180c3 	.word	0x080180c3
 8018078:	08018011 	.word	0x08018011
 801807c:	0801811d 	.word	0x0801811d
 8018080:	08018011 	.word	0x08018011
 8018084:	08018011 	.word	0x08018011
 8018088:	08018011 	.word	0x08018011
 801808c:	08018011 	.word	0x08018011
 8018090:	0801818b 	.word	0x0801818b
 8018094:	08018125 	.word	0x08018125
 8018098:	08018103 	.word	0x08018103
 801809c:	08018011 	.word	0x08018011
 80180a0:	08018011 	.word	0x08018011
 80180a4:	08018187 	.word	0x08018187
 80180a8:	08018011 	.word	0x08018011
 80180ac:	08018161 	.word	0x08018161
 80180b0:	08018011 	.word	0x08018011
 80180b4:	08018011 	.word	0x08018011
 80180b8:	0801810b 	.word	0x0801810b
 80180bc:	3b45      	subs	r3, #69	@ 0x45
 80180be:	2b02      	cmp	r3, #2
 80180c0:	d8a6      	bhi.n	8018010 <__ssvfiscanf_r+0xd0>
 80180c2:	2305      	movs	r3, #5
 80180c4:	e031      	b.n	801812a <__ssvfiscanf_r+0x1ea>
 80180c6:	6863      	ldr	r3, [r4, #4]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	dd0d      	ble.n	80180e8 <__ssvfiscanf_r+0x1a8>
 80180cc:	6823      	ldr	r3, [r4, #0]
 80180ce:	781a      	ldrb	r2, [r3, #0]
 80180d0:	454a      	cmp	r2, r9
 80180d2:	f040 80a6 	bne.w	8018222 <__ssvfiscanf_r+0x2e2>
 80180d6:	3301      	adds	r3, #1
 80180d8:	6862      	ldr	r2, [r4, #4]
 80180da:	6023      	str	r3, [r4, #0]
 80180dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80180de:	3a01      	subs	r2, #1
 80180e0:	3301      	adds	r3, #1
 80180e2:	6062      	str	r2, [r4, #4]
 80180e4:	9345      	str	r3, [sp, #276]	@ 0x114
 80180e6:	e753      	b.n	8017f90 <__ssvfiscanf_r+0x50>
 80180e8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80180ea:	4621      	mov	r1, r4
 80180ec:	4630      	mov	r0, r6
 80180ee:	4798      	blx	r3
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d0eb      	beq.n	80180cc <__ssvfiscanf_r+0x18c>
 80180f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80180f6:	2800      	cmp	r0, #0
 80180f8:	f040 808b 	bne.w	8018212 <__ssvfiscanf_r+0x2d2>
 80180fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018100:	e08b      	b.n	801821a <__ssvfiscanf_r+0x2da>
 8018102:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018104:	f042 0220 	orr.w	r2, r2, #32
 8018108:	9241      	str	r2, [sp, #260]	@ 0x104
 801810a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801810c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018110:	9241      	str	r2, [sp, #260]	@ 0x104
 8018112:	2210      	movs	r2, #16
 8018114:	2b6e      	cmp	r3, #110	@ 0x6e
 8018116:	9242      	str	r2, [sp, #264]	@ 0x108
 8018118:	d902      	bls.n	8018120 <__ssvfiscanf_r+0x1e0>
 801811a:	e005      	b.n	8018128 <__ssvfiscanf_r+0x1e8>
 801811c:	2300      	movs	r3, #0
 801811e:	9342      	str	r3, [sp, #264]	@ 0x108
 8018120:	2303      	movs	r3, #3
 8018122:	e002      	b.n	801812a <__ssvfiscanf_r+0x1ea>
 8018124:	2308      	movs	r3, #8
 8018126:	9342      	str	r3, [sp, #264]	@ 0x108
 8018128:	2304      	movs	r3, #4
 801812a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801812c:	6863      	ldr	r3, [r4, #4]
 801812e:	2b00      	cmp	r3, #0
 8018130:	dd39      	ble.n	80181a6 <__ssvfiscanf_r+0x266>
 8018132:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018134:	0659      	lsls	r1, r3, #25
 8018136:	d404      	bmi.n	8018142 <__ssvfiscanf_r+0x202>
 8018138:	6823      	ldr	r3, [r4, #0]
 801813a:	781a      	ldrb	r2, [r3, #0]
 801813c:	5cba      	ldrb	r2, [r7, r2]
 801813e:	0712      	lsls	r2, r2, #28
 8018140:	d438      	bmi.n	80181b4 <__ssvfiscanf_r+0x274>
 8018142:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018144:	2b02      	cmp	r3, #2
 8018146:	dc47      	bgt.n	80181d8 <__ssvfiscanf_r+0x298>
 8018148:	466b      	mov	r3, sp
 801814a:	4622      	mov	r2, r4
 801814c:	a941      	add	r1, sp, #260	@ 0x104
 801814e:	4630      	mov	r0, r6
 8018150:	f000 f9ae 	bl	80184b0 <_scanf_chars>
 8018154:	2801      	cmp	r0, #1
 8018156:	d064      	beq.n	8018222 <__ssvfiscanf_r+0x2e2>
 8018158:	2802      	cmp	r0, #2
 801815a:	f47f af19 	bne.w	8017f90 <__ssvfiscanf_r+0x50>
 801815e:	e7c9      	b.n	80180f4 <__ssvfiscanf_r+0x1b4>
 8018160:	220a      	movs	r2, #10
 8018162:	e7d7      	b.n	8018114 <__ssvfiscanf_r+0x1d4>
 8018164:	4629      	mov	r1, r5
 8018166:	4640      	mov	r0, r8
 8018168:	f000 faf0 	bl	801874c <__sccl>
 801816c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801816e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018172:	9341      	str	r3, [sp, #260]	@ 0x104
 8018174:	4605      	mov	r5, r0
 8018176:	2301      	movs	r3, #1
 8018178:	e7d7      	b.n	801812a <__ssvfiscanf_r+0x1ea>
 801817a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801817c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018180:	9341      	str	r3, [sp, #260]	@ 0x104
 8018182:	2300      	movs	r3, #0
 8018184:	e7d1      	b.n	801812a <__ssvfiscanf_r+0x1ea>
 8018186:	2302      	movs	r3, #2
 8018188:	e7cf      	b.n	801812a <__ssvfiscanf_r+0x1ea>
 801818a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801818c:	06c3      	lsls	r3, r0, #27
 801818e:	f53f aeff 	bmi.w	8017f90 <__ssvfiscanf_r+0x50>
 8018192:	9b00      	ldr	r3, [sp, #0]
 8018194:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018196:	1d19      	adds	r1, r3, #4
 8018198:	9100      	str	r1, [sp, #0]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	07c0      	lsls	r0, r0, #31
 801819e:	bf4c      	ite	mi
 80181a0:	801a      	strhmi	r2, [r3, #0]
 80181a2:	601a      	strpl	r2, [r3, #0]
 80181a4:	e6f4      	b.n	8017f90 <__ssvfiscanf_r+0x50>
 80181a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80181a8:	4621      	mov	r1, r4
 80181aa:	4630      	mov	r0, r6
 80181ac:	4798      	blx	r3
 80181ae:	2800      	cmp	r0, #0
 80181b0:	d0bf      	beq.n	8018132 <__ssvfiscanf_r+0x1f2>
 80181b2:	e79f      	b.n	80180f4 <__ssvfiscanf_r+0x1b4>
 80181b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80181b6:	3201      	adds	r2, #1
 80181b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80181ba:	6862      	ldr	r2, [r4, #4]
 80181bc:	3a01      	subs	r2, #1
 80181be:	2a00      	cmp	r2, #0
 80181c0:	6062      	str	r2, [r4, #4]
 80181c2:	dd02      	ble.n	80181ca <__ssvfiscanf_r+0x28a>
 80181c4:	3301      	adds	r3, #1
 80181c6:	6023      	str	r3, [r4, #0]
 80181c8:	e7b6      	b.n	8018138 <__ssvfiscanf_r+0x1f8>
 80181ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80181cc:	4621      	mov	r1, r4
 80181ce:	4630      	mov	r0, r6
 80181d0:	4798      	blx	r3
 80181d2:	2800      	cmp	r0, #0
 80181d4:	d0b0      	beq.n	8018138 <__ssvfiscanf_r+0x1f8>
 80181d6:	e78d      	b.n	80180f4 <__ssvfiscanf_r+0x1b4>
 80181d8:	2b04      	cmp	r3, #4
 80181da:	dc0f      	bgt.n	80181fc <__ssvfiscanf_r+0x2bc>
 80181dc:	466b      	mov	r3, sp
 80181de:	4622      	mov	r2, r4
 80181e0:	a941      	add	r1, sp, #260	@ 0x104
 80181e2:	4630      	mov	r0, r6
 80181e4:	f000 f9be 	bl	8018564 <_scanf_i>
 80181e8:	e7b4      	b.n	8018154 <__ssvfiscanf_r+0x214>
 80181ea:	bf00      	nop
 80181ec:	08017e8b 	.word	0x08017e8b
 80181f0:	08017f05 	.word	0x08017f05
 80181f4:	0801acd1 	.word	0x0801acd1
 80181f8:	0801aadd 	.word	0x0801aadd
 80181fc:	4b0a      	ldr	r3, [pc, #40]	@ (8018228 <__ssvfiscanf_r+0x2e8>)
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f43f aec6 	beq.w	8017f90 <__ssvfiscanf_r+0x50>
 8018204:	466b      	mov	r3, sp
 8018206:	4622      	mov	r2, r4
 8018208:	a941      	add	r1, sp, #260	@ 0x104
 801820a:	4630      	mov	r0, r6
 801820c:	f3af 8000 	nop.w
 8018210:	e7a0      	b.n	8018154 <__ssvfiscanf_r+0x214>
 8018212:	89a3      	ldrh	r3, [r4, #12]
 8018214:	065b      	lsls	r3, r3, #25
 8018216:	f53f af71 	bmi.w	80180fc <__ssvfiscanf_r+0x1bc>
 801821a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018222:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018224:	e7f9      	b.n	801821a <__ssvfiscanf_r+0x2da>
 8018226:	bf00      	nop
 8018228:	00000000 	.word	0x00000000

0801822c <__sfputc_r>:
 801822c:	6893      	ldr	r3, [r2, #8]
 801822e:	3b01      	subs	r3, #1
 8018230:	2b00      	cmp	r3, #0
 8018232:	b410      	push	{r4}
 8018234:	6093      	str	r3, [r2, #8]
 8018236:	da08      	bge.n	801824a <__sfputc_r+0x1e>
 8018238:	6994      	ldr	r4, [r2, #24]
 801823a:	42a3      	cmp	r3, r4
 801823c:	db01      	blt.n	8018242 <__sfputc_r+0x16>
 801823e:	290a      	cmp	r1, #10
 8018240:	d103      	bne.n	801824a <__sfputc_r+0x1e>
 8018242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018246:	f000 baf4 	b.w	8018832 <__swbuf_r>
 801824a:	6813      	ldr	r3, [r2, #0]
 801824c:	1c58      	adds	r0, r3, #1
 801824e:	6010      	str	r0, [r2, #0]
 8018250:	7019      	strb	r1, [r3, #0]
 8018252:	4608      	mov	r0, r1
 8018254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018258:	4770      	bx	lr

0801825a <__sfputs_r>:
 801825a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801825c:	4606      	mov	r6, r0
 801825e:	460f      	mov	r7, r1
 8018260:	4614      	mov	r4, r2
 8018262:	18d5      	adds	r5, r2, r3
 8018264:	42ac      	cmp	r4, r5
 8018266:	d101      	bne.n	801826c <__sfputs_r+0x12>
 8018268:	2000      	movs	r0, #0
 801826a:	e007      	b.n	801827c <__sfputs_r+0x22>
 801826c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018270:	463a      	mov	r2, r7
 8018272:	4630      	mov	r0, r6
 8018274:	f7ff ffda 	bl	801822c <__sfputc_r>
 8018278:	1c43      	adds	r3, r0, #1
 801827a:	d1f3      	bne.n	8018264 <__sfputs_r+0xa>
 801827c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018280 <_vfiprintf_r>:
 8018280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018284:	460d      	mov	r5, r1
 8018286:	b09d      	sub	sp, #116	@ 0x74
 8018288:	4614      	mov	r4, r2
 801828a:	4698      	mov	r8, r3
 801828c:	4606      	mov	r6, r0
 801828e:	b118      	cbz	r0, 8018298 <_vfiprintf_r+0x18>
 8018290:	6a03      	ldr	r3, [r0, #32]
 8018292:	b90b      	cbnz	r3, 8018298 <_vfiprintf_r+0x18>
 8018294:	f7fc fee4 	bl	8015060 <__sinit>
 8018298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801829a:	07d9      	lsls	r1, r3, #31
 801829c:	d405      	bmi.n	80182aa <_vfiprintf_r+0x2a>
 801829e:	89ab      	ldrh	r3, [r5, #12]
 80182a0:	059a      	lsls	r2, r3, #22
 80182a2:	d402      	bmi.n	80182aa <_vfiprintf_r+0x2a>
 80182a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182a6:	f7fd fe79 	bl	8015f9c <__retarget_lock_acquire_recursive>
 80182aa:	89ab      	ldrh	r3, [r5, #12]
 80182ac:	071b      	lsls	r3, r3, #28
 80182ae:	d501      	bpl.n	80182b4 <_vfiprintf_r+0x34>
 80182b0:	692b      	ldr	r3, [r5, #16]
 80182b2:	b99b      	cbnz	r3, 80182dc <_vfiprintf_r+0x5c>
 80182b4:	4629      	mov	r1, r5
 80182b6:	4630      	mov	r0, r6
 80182b8:	f000 fafa 	bl	80188b0 <__swsetup_r>
 80182bc:	b170      	cbz	r0, 80182dc <_vfiprintf_r+0x5c>
 80182be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182c0:	07dc      	lsls	r4, r3, #31
 80182c2:	d504      	bpl.n	80182ce <_vfiprintf_r+0x4e>
 80182c4:	f04f 30ff 	mov.w	r0, #4294967295
 80182c8:	b01d      	add	sp, #116	@ 0x74
 80182ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ce:	89ab      	ldrh	r3, [r5, #12]
 80182d0:	0598      	lsls	r0, r3, #22
 80182d2:	d4f7      	bmi.n	80182c4 <_vfiprintf_r+0x44>
 80182d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182d6:	f7fd fe63 	bl	8015fa0 <__retarget_lock_release_recursive>
 80182da:	e7f3      	b.n	80182c4 <_vfiprintf_r+0x44>
 80182dc:	2300      	movs	r3, #0
 80182de:	9309      	str	r3, [sp, #36]	@ 0x24
 80182e0:	2320      	movs	r3, #32
 80182e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80182e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80182ea:	2330      	movs	r3, #48	@ 0x30
 80182ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801849c <_vfiprintf_r+0x21c>
 80182f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80182f4:	f04f 0901 	mov.w	r9, #1
 80182f8:	4623      	mov	r3, r4
 80182fa:	469a      	mov	sl, r3
 80182fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018300:	b10a      	cbz	r2, 8018306 <_vfiprintf_r+0x86>
 8018302:	2a25      	cmp	r2, #37	@ 0x25
 8018304:	d1f9      	bne.n	80182fa <_vfiprintf_r+0x7a>
 8018306:	ebba 0b04 	subs.w	fp, sl, r4
 801830a:	d00b      	beq.n	8018324 <_vfiprintf_r+0xa4>
 801830c:	465b      	mov	r3, fp
 801830e:	4622      	mov	r2, r4
 8018310:	4629      	mov	r1, r5
 8018312:	4630      	mov	r0, r6
 8018314:	f7ff ffa1 	bl	801825a <__sfputs_r>
 8018318:	3001      	adds	r0, #1
 801831a:	f000 80a7 	beq.w	801846c <_vfiprintf_r+0x1ec>
 801831e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018320:	445a      	add	r2, fp
 8018322:	9209      	str	r2, [sp, #36]	@ 0x24
 8018324:	f89a 3000 	ldrb.w	r3, [sl]
 8018328:	2b00      	cmp	r3, #0
 801832a:	f000 809f 	beq.w	801846c <_vfiprintf_r+0x1ec>
 801832e:	2300      	movs	r3, #0
 8018330:	f04f 32ff 	mov.w	r2, #4294967295
 8018334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018338:	f10a 0a01 	add.w	sl, sl, #1
 801833c:	9304      	str	r3, [sp, #16]
 801833e:	9307      	str	r3, [sp, #28]
 8018340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018344:	931a      	str	r3, [sp, #104]	@ 0x68
 8018346:	4654      	mov	r4, sl
 8018348:	2205      	movs	r2, #5
 801834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801834e:	4853      	ldr	r0, [pc, #332]	@ (801849c <_vfiprintf_r+0x21c>)
 8018350:	f7e7 ff26 	bl	80001a0 <memchr>
 8018354:	9a04      	ldr	r2, [sp, #16]
 8018356:	b9d8      	cbnz	r0, 8018390 <_vfiprintf_r+0x110>
 8018358:	06d1      	lsls	r1, r2, #27
 801835a:	bf44      	itt	mi
 801835c:	2320      	movmi	r3, #32
 801835e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018362:	0713      	lsls	r3, r2, #28
 8018364:	bf44      	itt	mi
 8018366:	232b      	movmi	r3, #43	@ 0x2b
 8018368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801836c:	f89a 3000 	ldrb.w	r3, [sl]
 8018370:	2b2a      	cmp	r3, #42	@ 0x2a
 8018372:	d015      	beq.n	80183a0 <_vfiprintf_r+0x120>
 8018374:	9a07      	ldr	r2, [sp, #28]
 8018376:	4654      	mov	r4, sl
 8018378:	2000      	movs	r0, #0
 801837a:	f04f 0c0a 	mov.w	ip, #10
 801837e:	4621      	mov	r1, r4
 8018380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018384:	3b30      	subs	r3, #48	@ 0x30
 8018386:	2b09      	cmp	r3, #9
 8018388:	d94b      	bls.n	8018422 <_vfiprintf_r+0x1a2>
 801838a:	b1b0      	cbz	r0, 80183ba <_vfiprintf_r+0x13a>
 801838c:	9207      	str	r2, [sp, #28]
 801838e:	e014      	b.n	80183ba <_vfiprintf_r+0x13a>
 8018390:	eba0 0308 	sub.w	r3, r0, r8
 8018394:	fa09 f303 	lsl.w	r3, r9, r3
 8018398:	4313      	orrs	r3, r2
 801839a:	9304      	str	r3, [sp, #16]
 801839c:	46a2      	mov	sl, r4
 801839e:	e7d2      	b.n	8018346 <_vfiprintf_r+0xc6>
 80183a0:	9b03      	ldr	r3, [sp, #12]
 80183a2:	1d19      	adds	r1, r3, #4
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	9103      	str	r1, [sp, #12]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	bfbb      	ittet	lt
 80183ac:	425b      	neglt	r3, r3
 80183ae:	f042 0202 	orrlt.w	r2, r2, #2
 80183b2:	9307      	strge	r3, [sp, #28]
 80183b4:	9307      	strlt	r3, [sp, #28]
 80183b6:	bfb8      	it	lt
 80183b8:	9204      	strlt	r2, [sp, #16]
 80183ba:	7823      	ldrb	r3, [r4, #0]
 80183bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80183be:	d10a      	bne.n	80183d6 <_vfiprintf_r+0x156>
 80183c0:	7863      	ldrb	r3, [r4, #1]
 80183c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80183c4:	d132      	bne.n	801842c <_vfiprintf_r+0x1ac>
 80183c6:	9b03      	ldr	r3, [sp, #12]
 80183c8:	1d1a      	adds	r2, r3, #4
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	9203      	str	r2, [sp, #12]
 80183ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80183d2:	3402      	adds	r4, #2
 80183d4:	9305      	str	r3, [sp, #20]
 80183d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80184ac <_vfiprintf_r+0x22c>
 80183da:	7821      	ldrb	r1, [r4, #0]
 80183dc:	2203      	movs	r2, #3
 80183de:	4650      	mov	r0, sl
 80183e0:	f7e7 fede 	bl	80001a0 <memchr>
 80183e4:	b138      	cbz	r0, 80183f6 <_vfiprintf_r+0x176>
 80183e6:	9b04      	ldr	r3, [sp, #16]
 80183e8:	eba0 000a 	sub.w	r0, r0, sl
 80183ec:	2240      	movs	r2, #64	@ 0x40
 80183ee:	4082      	lsls	r2, r0
 80183f0:	4313      	orrs	r3, r2
 80183f2:	3401      	adds	r4, #1
 80183f4:	9304      	str	r3, [sp, #16]
 80183f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183fa:	4829      	ldr	r0, [pc, #164]	@ (80184a0 <_vfiprintf_r+0x220>)
 80183fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018400:	2206      	movs	r2, #6
 8018402:	f7e7 fecd 	bl	80001a0 <memchr>
 8018406:	2800      	cmp	r0, #0
 8018408:	d03f      	beq.n	801848a <_vfiprintf_r+0x20a>
 801840a:	4b26      	ldr	r3, [pc, #152]	@ (80184a4 <_vfiprintf_r+0x224>)
 801840c:	bb1b      	cbnz	r3, 8018456 <_vfiprintf_r+0x1d6>
 801840e:	9b03      	ldr	r3, [sp, #12]
 8018410:	3307      	adds	r3, #7
 8018412:	f023 0307 	bic.w	r3, r3, #7
 8018416:	3308      	adds	r3, #8
 8018418:	9303      	str	r3, [sp, #12]
 801841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801841c:	443b      	add	r3, r7
 801841e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018420:	e76a      	b.n	80182f8 <_vfiprintf_r+0x78>
 8018422:	fb0c 3202 	mla	r2, ip, r2, r3
 8018426:	460c      	mov	r4, r1
 8018428:	2001      	movs	r0, #1
 801842a:	e7a8      	b.n	801837e <_vfiprintf_r+0xfe>
 801842c:	2300      	movs	r3, #0
 801842e:	3401      	adds	r4, #1
 8018430:	9305      	str	r3, [sp, #20]
 8018432:	4619      	mov	r1, r3
 8018434:	f04f 0c0a 	mov.w	ip, #10
 8018438:	4620      	mov	r0, r4
 801843a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801843e:	3a30      	subs	r2, #48	@ 0x30
 8018440:	2a09      	cmp	r2, #9
 8018442:	d903      	bls.n	801844c <_vfiprintf_r+0x1cc>
 8018444:	2b00      	cmp	r3, #0
 8018446:	d0c6      	beq.n	80183d6 <_vfiprintf_r+0x156>
 8018448:	9105      	str	r1, [sp, #20]
 801844a:	e7c4      	b.n	80183d6 <_vfiprintf_r+0x156>
 801844c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018450:	4604      	mov	r4, r0
 8018452:	2301      	movs	r3, #1
 8018454:	e7f0      	b.n	8018438 <_vfiprintf_r+0x1b8>
 8018456:	ab03      	add	r3, sp, #12
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	462a      	mov	r2, r5
 801845c:	4b12      	ldr	r3, [pc, #72]	@ (80184a8 <_vfiprintf_r+0x228>)
 801845e:	a904      	add	r1, sp, #16
 8018460:	4630      	mov	r0, r6
 8018462:	f7fc f9bb 	bl	80147dc <_printf_float>
 8018466:	4607      	mov	r7, r0
 8018468:	1c78      	adds	r0, r7, #1
 801846a:	d1d6      	bne.n	801841a <_vfiprintf_r+0x19a>
 801846c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801846e:	07d9      	lsls	r1, r3, #31
 8018470:	d405      	bmi.n	801847e <_vfiprintf_r+0x1fe>
 8018472:	89ab      	ldrh	r3, [r5, #12]
 8018474:	059a      	lsls	r2, r3, #22
 8018476:	d402      	bmi.n	801847e <_vfiprintf_r+0x1fe>
 8018478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801847a:	f7fd fd91 	bl	8015fa0 <__retarget_lock_release_recursive>
 801847e:	89ab      	ldrh	r3, [r5, #12]
 8018480:	065b      	lsls	r3, r3, #25
 8018482:	f53f af1f 	bmi.w	80182c4 <_vfiprintf_r+0x44>
 8018486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018488:	e71e      	b.n	80182c8 <_vfiprintf_r+0x48>
 801848a:	ab03      	add	r3, sp, #12
 801848c:	9300      	str	r3, [sp, #0]
 801848e:	462a      	mov	r2, r5
 8018490:	4b05      	ldr	r3, [pc, #20]	@ (80184a8 <_vfiprintf_r+0x228>)
 8018492:	a904      	add	r1, sp, #16
 8018494:	4630      	mov	r0, r6
 8018496:	f7fc fc39 	bl	8014d0c <_printf_i>
 801849a:	e7e4      	b.n	8018466 <_vfiprintf_r+0x1e6>
 801849c:	0801aad7 	.word	0x0801aad7
 80184a0:	0801aae1 	.word	0x0801aae1
 80184a4:	080147dd 	.word	0x080147dd
 80184a8:	0801825b 	.word	0x0801825b
 80184ac:	0801aadd 	.word	0x0801aadd

080184b0 <_scanf_chars>:
 80184b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184b4:	4615      	mov	r5, r2
 80184b6:	688a      	ldr	r2, [r1, #8]
 80184b8:	4680      	mov	r8, r0
 80184ba:	460c      	mov	r4, r1
 80184bc:	b932      	cbnz	r2, 80184cc <_scanf_chars+0x1c>
 80184be:	698a      	ldr	r2, [r1, #24]
 80184c0:	2a00      	cmp	r2, #0
 80184c2:	bf14      	ite	ne
 80184c4:	f04f 32ff 	movne.w	r2, #4294967295
 80184c8:	2201      	moveq	r2, #1
 80184ca:	608a      	str	r2, [r1, #8]
 80184cc:	6822      	ldr	r2, [r4, #0]
 80184ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8018560 <_scanf_chars+0xb0>
 80184d2:	06d1      	lsls	r1, r2, #27
 80184d4:	bf5f      	itttt	pl
 80184d6:	681a      	ldrpl	r2, [r3, #0]
 80184d8:	1d11      	addpl	r1, r2, #4
 80184da:	6019      	strpl	r1, [r3, #0]
 80184dc:	6816      	ldrpl	r6, [r2, #0]
 80184de:	2700      	movs	r7, #0
 80184e0:	69a0      	ldr	r0, [r4, #24]
 80184e2:	b188      	cbz	r0, 8018508 <_scanf_chars+0x58>
 80184e4:	2801      	cmp	r0, #1
 80184e6:	d107      	bne.n	80184f8 <_scanf_chars+0x48>
 80184e8:	682b      	ldr	r3, [r5, #0]
 80184ea:	781a      	ldrb	r2, [r3, #0]
 80184ec:	6963      	ldr	r3, [r4, #20]
 80184ee:	5c9b      	ldrb	r3, [r3, r2]
 80184f0:	b953      	cbnz	r3, 8018508 <_scanf_chars+0x58>
 80184f2:	2f00      	cmp	r7, #0
 80184f4:	d031      	beq.n	801855a <_scanf_chars+0xaa>
 80184f6:	e022      	b.n	801853e <_scanf_chars+0x8e>
 80184f8:	2802      	cmp	r0, #2
 80184fa:	d120      	bne.n	801853e <_scanf_chars+0x8e>
 80184fc:	682b      	ldr	r3, [r5, #0]
 80184fe:	781b      	ldrb	r3, [r3, #0]
 8018500:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018504:	071b      	lsls	r3, r3, #28
 8018506:	d41a      	bmi.n	801853e <_scanf_chars+0x8e>
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	06da      	lsls	r2, r3, #27
 801850c:	bf5e      	ittt	pl
 801850e:	682b      	ldrpl	r3, [r5, #0]
 8018510:	781b      	ldrbpl	r3, [r3, #0]
 8018512:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018516:	682a      	ldr	r2, [r5, #0]
 8018518:	686b      	ldr	r3, [r5, #4]
 801851a:	3201      	adds	r2, #1
 801851c:	602a      	str	r2, [r5, #0]
 801851e:	68a2      	ldr	r2, [r4, #8]
 8018520:	3b01      	subs	r3, #1
 8018522:	3a01      	subs	r2, #1
 8018524:	606b      	str	r3, [r5, #4]
 8018526:	3701      	adds	r7, #1
 8018528:	60a2      	str	r2, [r4, #8]
 801852a:	b142      	cbz	r2, 801853e <_scanf_chars+0x8e>
 801852c:	2b00      	cmp	r3, #0
 801852e:	dcd7      	bgt.n	80184e0 <_scanf_chars+0x30>
 8018530:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018534:	4629      	mov	r1, r5
 8018536:	4640      	mov	r0, r8
 8018538:	4798      	blx	r3
 801853a:	2800      	cmp	r0, #0
 801853c:	d0d0      	beq.n	80184e0 <_scanf_chars+0x30>
 801853e:	6823      	ldr	r3, [r4, #0]
 8018540:	f013 0310 	ands.w	r3, r3, #16
 8018544:	d105      	bne.n	8018552 <_scanf_chars+0xa2>
 8018546:	68e2      	ldr	r2, [r4, #12]
 8018548:	3201      	adds	r2, #1
 801854a:	60e2      	str	r2, [r4, #12]
 801854c:	69a2      	ldr	r2, [r4, #24]
 801854e:	b102      	cbz	r2, 8018552 <_scanf_chars+0xa2>
 8018550:	7033      	strb	r3, [r6, #0]
 8018552:	6923      	ldr	r3, [r4, #16]
 8018554:	443b      	add	r3, r7
 8018556:	6123      	str	r3, [r4, #16]
 8018558:	2000      	movs	r0, #0
 801855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801855e:	bf00      	nop
 8018560:	0801acd1 	.word	0x0801acd1

08018564 <_scanf_i>:
 8018564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018568:	4698      	mov	r8, r3
 801856a:	4b74      	ldr	r3, [pc, #464]	@ (801873c <_scanf_i+0x1d8>)
 801856c:	460c      	mov	r4, r1
 801856e:	4682      	mov	sl, r0
 8018570:	4616      	mov	r6, r2
 8018572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018576:	b087      	sub	sp, #28
 8018578:	ab03      	add	r3, sp, #12
 801857a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801857e:	4b70      	ldr	r3, [pc, #448]	@ (8018740 <_scanf_i+0x1dc>)
 8018580:	69a1      	ldr	r1, [r4, #24]
 8018582:	4a70      	ldr	r2, [pc, #448]	@ (8018744 <_scanf_i+0x1e0>)
 8018584:	2903      	cmp	r1, #3
 8018586:	bf08      	it	eq
 8018588:	461a      	moveq	r2, r3
 801858a:	68a3      	ldr	r3, [r4, #8]
 801858c:	9201      	str	r2, [sp, #4]
 801858e:	1e5a      	subs	r2, r3, #1
 8018590:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018594:	bf88      	it	hi
 8018596:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801859a:	4627      	mov	r7, r4
 801859c:	bf82      	ittt	hi
 801859e:	eb03 0905 	addhi.w	r9, r3, r5
 80185a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80185a6:	60a3      	strhi	r3, [r4, #8]
 80185a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80185ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80185b0:	bf98      	it	ls
 80185b2:	f04f 0900 	movls.w	r9, #0
 80185b6:	6023      	str	r3, [r4, #0]
 80185b8:	463d      	mov	r5, r7
 80185ba:	f04f 0b00 	mov.w	fp, #0
 80185be:	6831      	ldr	r1, [r6, #0]
 80185c0:	ab03      	add	r3, sp, #12
 80185c2:	7809      	ldrb	r1, [r1, #0]
 80185c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80185c8:	2202      	movs	r2, #2
 80185ca:	f7e7 fde9 	bl	80001a0 <memchr>
 80185ce:	b328      	cbz	r0, 801861c <_scanf_i+0xb8>
 80185d0:	f1bb 0f01 	cmp.w	fp, #1
 80185d4:	d159      	bne.n	801868a <_scanf_i+0x126>
 80185d6:	6862      	ldr	r2, [r4, #4]
 80185d8:	b92a      	cbnz	r2, 80185e6 <_scanf_i+0x82>
 80185da:	6822      	ldr	r2, [r4, #0]
 80185dc:	2108      	movs	r1, #8
 80185de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80185e2:	6061      	str	r1, [r4, #4]
 80185e4:	6022      	str	r2, [r4, #0]
 80185e6:	6822      	ldr	r2, [r4, #0]
 80185e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80185ec:	6022      	str	r2, [r4, #0]
 80185ee:	68a2      	ldr	r2, [r4, #8]
 80185f0:	1e51      	subs	r1, r2, #1
 80185f2:	60a1      	str	r1, [r4, #8]
 80185f4:	b192      	cbz	r2, 801861c <_scanf_i+0xb8>
 80185f6:	6832      	ldr	r2, [r6, #0]
 80185f8:	1c51      	adds	r1, r2, #1
 80185fa:	6031      	str	r1, [r6, #0]
 80185fc:	7812      	ldrb	r2, [r2, #0]
 80185fe:	f805 2b01 	strb.w	r2, [r5], #1
 8018602:	6872      	ldr	r2, [r6, #4]
 8018604:	3a01      	subs	r2, #1
 8018606:	2a00      	cmp	r2, #0
 8018608:	6072      	str	r2, [r6, #4]
 801860a:	dc07      	bgt.n	801861c <_scanf_i+0xb8>
 801860c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018610:	4631      	mov	r1, r6
 8018612:	4650      	mov	r0, sl
 8018614:	4790      	blx	r2
 8018616:	2800      	cmp	r0, #0
 8018618:	f040 8085 	bne.w	8018726 <_scanf_i+0x1c2>
 801861c:	f10b 0b01 	add.w	fp, fp, #1
 8018620:	f1bb 0f03 	cmp.w	fp, #3
 8018624:	d1cb      	bne.n	80185be <_scanf_i+0x5a>
 8018626:	6863      	ldr	r3, [r4, #4]
 8018628:	b90b      	cbnz	r3, 801862e <_scanf_i+0xca>
 801862a:	230a      	movs	r3, #10
 801862c:	6063      	str	r3, [r4, #4]
 801862e:	6863      	ldr	r3, [r4, #4]
 8018630:	4945      	ldr	r1, [pc, #276]	@ (8018748 <_scanf_i+0x1e4>)
 8018632:	6960      	ldr	r0, [r4, #20]
 8018634:	1ac9      	subs	r1, r1, r3
 8018636:	f000 f889 	bl	801874c <__sccl>
 801863a:	f04f 0b00 	mov.w	fp, #0
 801863e:	68a3      	ldr	r3, [r4, #8]
 8018640:	6822      	ldr	r2, [r4, #0]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d03d      	beq.n	80186c2 <_scanf_i+0x15e>
 8018646:	6831      	ldr	r1, [r6, #0]
 8018648:	6960      	ldr	r0, [r4, #20]
 801864a:	f891 c000 	ldrb.w	ip, [r1]
 801864e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018652:	2800      	cmp	r0, #0
 8018654:	d035      	beq.n	80186c2 <_scanf_i+0x15e>
 8018656:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801865a:	d124      	bne.n	80186a6 <_scanf_i+0x142>
 801865c:	0510      	lsls	r0, r2, #20
 801865e:	d522      	bpl.n	80186a6 <_scanf_i+0x142>
 8018660:	f10b 0b01 	add.w	fp, fp, #1
 8018664:	f1b9 0f00 	cmp.w	r9, #0
 8018668:	d003      	beq.n	8018672 <_scanf_i+0x10e>
 801866a:	3301      	adds	r3, #1
 801866c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018670:	60a3      	str	r3, [r4, #8]
 8018672:	6873      	ldr	r3, [r6, #4]
 8018674:	3b01      	subs	r3, #1
 8018676:	2b00      	cmp	r3, #0
 8018678:	6073      	str	r3, [r6, #4]
 801867a:	dd1b      	ble.n	80186b4 <_scanf_i+0x150>
 801867c:	6833      	ldr	r3, [r6, #0]
 801867e:	3301      	adds	r3, #1
 8018680:	6033      	str	r3, [r6, #0]
 8018682:	68a3      	ldr	r3, [r4, #8]
 8018684:	3b01      	subs	r3, #1
 8018686:	60a3      	str	r3, [r4, #8]
 8018688:	e7d9      	b.n	801863e <_scanf_i+0xda>
 801868a:	f1bb 0f02 	cmp.w	fp, #2
 801868e:	d1ae      	bne.n	80185ee <_scanf_i+0x8a>
 8018690:	6822      	ldr	r2, [r4, #0]
 8018692:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018696:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801869a:	d1c4      	bne.n	8018626 <_scanf_i+0xc2>
 801869c:	2110      	movs	r1, #16
 801869e:	6061      	str	r1, [r4, #4]
 80186a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80186a4:	e7a2      	b.n	80185ec <_scanf_i+0x88>
 80186a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80186aa:	6022      	str	r2, [r4, #0]
 80186ac:	780b      	ldrb	r3, [r1, #0]
 80186ae:	f805 3b01 	strb.w	r3, [r5], #1
 80186b2:	e7de      	b.n	8018672 <_scanf_i+0x10e>
 80186b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80186b8:	4631      	mov	r1, r6
 80186ba:	4650      	mov	r0, sl
 80186bc:	4798      	blx	r3
 80186be:	2800      	cmp	r0, #0
 80186c0:	d0df      	beq.n	8018682 <_scanf_i+0x11e>
 80186c2:	6823      	ldr	r3, [r4, #0]
 80186c4:	05d9      	lsls	r1, r3, #23
 80186c6:	d50d      	bpl.n	80186e4 <_scanf_i+0x180>
 80186c8:	42bd      	cmp	r5, r7
 80186ca:	d909      	bls.n	80186e0 <_scanf_i+0x17c>
 80186cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80186d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80186d4:	4632      	mov	r2, r6
 80186d6:	4650      	mov	r0, sl
 80186d8:	4798      	blx	r3
 80186da:	f105 39ff 	add.w	r9, r5, #4294967295
 80186de:	464d      	mov	r5, r9
 80186e0:	42bd      	cmp	r5, r7
 80186e2:	d028      	beq.n	8018736 <_scanf_i+0x1d2>
 80186e4:	6822      	ldr	r2, [r4, #0]
 80186e6:	f012 0210 	ands.w	r2, r2, #16
 80186ea:	d113      	bne.n	8018714 <_scanf_i+0x1b0>
 80186ec:	702a      	strb	r2, [r5, #0]
 80186ee:	6863      	ldr	r3, [r4, #4]
 80186f0:	9e01      	ldr	r6, [sp, #4]
 80186f2:	4639      	mov	r1, r7
 80186f4:	4650      	mov	r0, sl
 80186f6:	47b0      	blx	r6
 80186f8:	f8d8 3000 	ldr.w	r3, [r8]
 80186fc:	6821      	ldr	r1, [r4, #0]
 80186fe:	1d1a      	adds	r2, r3, #4
 8018700:	f8c8 2000 	str.w	r2, [r8]
 8018704:	f011 0f20 	tst.w	r1, #32
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	d00f      	beq.n	801872c <_scanf_i+0x1c8>
 801870c:	6018      	str	r0, [r3, #0]
 801870e:	68e3      	ldr	r3, [r4, #12]
 8018710:	3301      	adds	r3, #1
 8018712:	60e3      	str	r3, [r4, #12]
 8018714:	6923      	ldr	r3, [r4, #16]
 8018716:	1bed      	subs	r5, r5, r7
 8018718:	445d      	add	r5, fp
 801871a:	442b      	add	r3, r5
 801871c:	6123      	str	r3, [r4, #16]
 801871e:	2000      	movs	r0, #0
 8018720:	b007      	add	sp, #28
 8018722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018726:	f04f 0b00 	mov.w	fp, #0
 801872a:	e7ca      	b.n	80186c2 <_scanf_i+0x15e>
 801872c:	07ca      	lsls	r2, r1, #31
 801872e:	bf4c      	ite	mi
 8018730:	8018      	strhmi	r0, [r3, #0]
 8018732:	6018      	strpl	r0, [r3, #0]
 8018734:	e7eb      	b.n	801870e <_scanf_i+0x1aa>
 8018736:	2001      	movs	r0, #1
 8018738:	e7f2      	b.n	8018720 <_scanf_i+0x1bc>
 801873a:	bf00      	nop
 801873c:	0801a7b0 	.word	0x0801a7b0
 8018740:	08018ae9 	.word	0x08018ae9
 8018744:	08017739 	.word	0x08017739
 8018748:	0801ab02 	.word	0x0801ab02

0801874c <__sccl>:
 801874c:	b570      	push	{r4, r5, r6, lr}
 801874e:	780b      	ldrb	r3, [r1, #0]
 8018750:	4604      	mov	r4, r0
 8018752:	2b5e      	cmp	r3, #94	@ 0x5e
 8018754:	bf0b      	itete	eq
 8018756:	784b      	ldrbeq	r3, [r1, #1]
 8018758:	1c4a      	addne	r2, r1, #1
 801875a:	1c8a      	addeq	r2, r1, #2
 801875c:	2100      	movne	r1, #0
 801875e:	bf08      	it	eq
 8018760:	2101      	moveq	r1, #1
 8018762:	3801      	subs	r0, #1
 8018764:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018768:	f800 1f01 	strb.w	r1, [r0, #1]!
 801876c:	42a8      	cmp	r0, r5
 801876e:	d1fb      	bne.n	8018768 <__sccl+0x1c>
 8018770:	b90b      	cbnz	r3, 8018776 <__sccl+0x2a>
 8018772:	1e50      	subs	r0, r2, #1
 8018774:	bd70      	pop	{r4, r5, r6, pc}
 8018776:	f081 0101 	eor.w	r1, r1, #1
 801877a:	54e1      	strb	r1, [r4, r3]
 801877c:	4610      	mov	r0, r2
 801877e:	4602      	mov	r2, r0
 8018780:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018784:	2d2d      	cmp	r5, #45	@ 0x2d
 8018786:	d005      	beq.n	8018794 <__sccl+0x48>
 8018788:	2d5d      	cmp	r5, #93	@ 0x5d
 801878a:	d016      	beq.n	80187ba <__sccl+0x6e>
 801878c:	2d00      	cmp	r5, #0
 801878e:	d0f1      	beq.n	8018774 <__sccl+0x28>
 8018790:	462b      	mov	r3, r5
 8018792:	e7f2      	b.n	801877a <__sccl+0x2e>
 8018794:	7846      	ldrb	r6, [r0, #1]
 8018796:	2e5d      	cmp	r6, #93	@ 0x5d
 8018798:	d0fa      	beq.n	8018790 <__sccl+0x44>
 801879a:	42b3      	cmp	r3, r6
 801879c:	dcf8      	bgt.n	8018790 <__sccl+0x44>
 801879e:	3002      	adds	r0, #2
 80187a0:	461a      	mov	r2, r3
 80187a2:	3201      	adds	r2, #1
 80187a4:	4296      	cmp	r6, r2
 80187a6:	54a1      	strb	r1, [r4, r2]
 80187a8:	dcfb      	bgt.n	80187a2 <__sccl+0x56>
 80187aa:	1af2      	subs	r2, r6, r3
 80187ac:	3a01      	subs	r2, #1
 80187ae:	1c5d      	adds	r5, r3, #1
 80187b0:	42b3      	cmp	r3, r6
 80187b2:	bfa8      	it	ge
 80187b4:	2200      	movge	r2, #0
 80187b6:	18ab      	adds	r3, r5, r2
 80187b8:	e7e1      	b.n	801877e <__sccl+0x32>
 80187ba:	4610      	mov	r0, r2
 80187bc:	e7da      	b.n	8018774 <__sccl+0x28>

080187be <__submore>:
 80187be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c2:	460c      	mov	r4, r1
 80187c4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80187c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187ca:	4299      	cmp	r1, r3
 80187cc:	d11d      	bne.n	801880a <__submore+0x4c>
 80187ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80187d2:	f7fe fb3d 	bl	8016e50 <_malloc_r>
 80187d6:	b918      	cbnz	r0, 80187e0 <__submore+0x22>
 80187d8:	f04f 30ff 	mov.w	r0, #4294967295
 80187dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80187e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80187e6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80187ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80187ec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80187f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80187f4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80187f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80187fc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018800:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018804:	6020      	str	r0, [r4, #0]
 8018806:	2000      	movs	r0, #0
 8018808:	e7e8      	b.n	80187dc <__submore+0x1e>
 801880a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801880c:	0077      	lsls	r7, r6, #1
 801880e:	463a      	mov	r2, r7
 8018810:	f7ff fb00 	bl	8017e14 <_realloc_r>
 8018814:	4605      	mov	r5, r0
 8018816:	2800      	cmp	r0, #0
 8018818:	d0de      	beq.n	80187d8 <__submore+0x1a>
 801881a:	eb00 0806 	add.w	r8, r0, r6
 801881e:	4601      	mov	r1, r0
 8018820:	4632      	mov	r2, r6
 8018822:	4640      	mov	r0, r8
 8018824:	f7fd fbc5 	bl	8015fb2 <memcpy>
 8018828:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801882c:	f8c4 8000 	str.w	r8, [r4]
 8018830:	e7e9      	b.n	8018806 <__submore+0x48>

08018832 <__swbuf_r>:
 8018832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018834:	460e      	mov	r6, r1
 8018836:	4614      	mov	r4, r2
 8018838:	4605      	mov	r5, r0
 801883a:	b118      	cbz	r0, 8018844 <__swbuf_r+0x12>
 801883c:	6a03      	ldr	r3, [r0, #32]
 801883e:	b90b      	cbnz	r3, 8018844 <__swbuf_r+0x12>
 8018840:	f7fc fc0e 	bl	8015060 <__sinit>
 8018844:	69a3      	ldr	r3, [r4, #24]
 8018846:	60a3      	str	r3, [r4, #8]
 8018848:	89a3      	ldrh	r3, [r4, #12]
 801884a:	071a      	lsls	r2, r3, #28
 801884c:	d501      	bpl.n	8018852 <__swbuf_r+0x20>
 801884e:	6923      	ldr	r3, [r4, #16]
 8018850:	b943      	cbnz	r3, 8018864 <__swbuf_r+0x32>
 8018852:	4621      	mov	r1, r4
 8018854:	4628      	mov	r0, r5
 8018856:	f000 f82b 	bl	80188b0 <__swsetup_r>
 801885a:	b118      	cbz	r0, 8018864 <__swbuf_r+0x32>
 801885c:	f04f 37ff 	mov.w	r7, #4294967295
 8018860:	4638      	mov	r0, r7
 8018862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	6922      	ldr	r2, [r4, #16]
 8018868:	1a98      	subs	r0, r3, r2
 801886a:	6963      	ldr	r3, [r4, #20]
 801886c:	b2f6      	uxtb	r6, r6
 801886e:	4283      	cmp	r3, r0
 8018870:	4637      	mov	r7, r6
 8018872:	dc05      	bgt.n	8018880 <__swbuf_r+0x4e>
 8018874:	4621      	mov	r1, r4
 8018876:	4628      	mov	r0, r5
 8018878:	f7ff f946 	bl	8017b08 <_fflush_r>
 801887c:	2800      	cmp	r0, #0
 801887e:	d1ed      	bne.n	801885c <__swbuf_r+0x2a>
 8018880:	68a3      	ldr	r3, [r4, #8]
 8018882:	3b01      	subs	r3, #1
 8018884:	60a3      	str	r3, [r4, #8]
 8018886:	6823      	ldr	r3, [r4, #0]
 8018888:	1c5a      	adds	r2, r3, #1
 801888a:	6022      	str	r2, [r4, #0]
 801888c:	701e      	strb	r6, [r3, #0]
 801888e:	6962      	ldr	r2, [r4, #20]
 8018890:	1c43      	adds	r3, r0, #1
 8018892:	429a      	cmp	r2, r3
 8018894:	d004      	beq.n	80188a0 <__swbuf_r+0x6e>
 8018896:	89a3      	ldrh	r3, [r4, #12]
 8018898:	07db      	lsls	r3, r3, #31
 801889a:	d5e1      	bpl.n	8018860 <__swbuf_r+0x2e>
 801889c:	2e0a      	cmp	r6, #10
 801889e:	d1df      	bne.n	8018860 <__swbuf_r+0x2e>
 80188a0:	4621      	mov	r1, r4
 80188a2:	4628      	mov	r0, r5
 80188a4:	f7ff f930 	bl	8017b08 <_fflush_r>
 80188a8:	2800      	cmp	r0, #0
 80188aa:	d0d9      	beq.n	8018860 <__swbuf_r+0x2e>
 80188ac:	e7d6      	b.n	801885c <__swbuf_r+0x2a>
	...

080188b0 <__swsetup_r>:
 80188b0:	b538      	push	{r3, r4, r5, lr}
 80188b2:	4b29      	ldr	r3, [pc, #164]	@ (8018958 <__swsetup_r+0xa8>)
 80188b4:	4605      	mov	r5, r0
 80188b6:	6818      	ldr	r0, [r3, #0]
 80188b8:	460c      	mov	r4, r1
 80188ba:	b118      	cbz	r0, 80188c4 <__swsetup_r+0x14>
 80188bc:	6a03      	ldr	r3, [r0, #32]
 80188be:	b90b      	cbnz	r3, 80188c4 <__swsetup_r+0x14>
 80188c0:	f7fc fbce 	bl	8015060 <__sinit>
 80188c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188c8:	0719      	lsls	r1, r3, #28
 80188ca:	d422      	bmi.n	8018912 <__swsetup_r+0x62>
 80188cc:	06da      	lsls	r2, r3, #27
 80188ce:	d407      	bmi.n	80188e0 <__swsetup_r+0x30>
 80188d0:	2209      	movs	r2, #9
 80188d2:	602a      	str	r2, [r5, #0]
 80188d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188d8:	81a3      	strh	r3, [r4, #12]
 80188da:	f04f 30ff 	mov.w	r0, #4294967295
 80188de:	e033      	b.n	8018948 <__swsetup_r+0x98>
 80188e0:	0758      	lsls	r0, r3, #29
 80188e2:	d512      	bpl.n	801890a <__swsetup_r+0x5a>
 80188e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188e6:	b141      	cbz	r1, 80188fa <__swsetup_r+0x4a>
 80188e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80188ec:	4299      	cmp	r1, r3
 80188ee:	d002      	beq.n	80188f6 <__swsetup_r+0x46>
 80188f0:	4628      	mov	r0, r5
 80188f2:	f7fe f9ed 	bl	8016cd0 <_free_r>
 80188f6:	2300      	movs	r3, #0
 80188f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80188fa:	89a3      	ldrh	r3, [r4, #12]
 80188fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018900:	81a3      	strh	r3, [r4, #12]
 8018902:	2300      	movs	r3, #0
 8018904:	6063      	str	r3, [r4, #4]
 8018906:	6923      	ldr	r3, [r4, #16]
 8018908:	6023      	str	r3, [r4, #0]
 801890a:	89a3      	ldrh	r3, [r4, #12]
 801890c:	f043 0308 	orr.w	r3, r3, #8
 8018910:	81a3      	strh	r3, [r4, #12]
 8018912:	6923      	ldr	r3, [r4, #16]
 8018914:	b94b      	cbnz	r3, 801892a <__swsetup_r+0x7a>
 8018916:	89a3      	ldrh	r3, [r4, #12]
 8018918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801891c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018920:	d003      	beq.n	801892a <__swsetup_r+0x7a>
 8018922:	4621      	mov	r1, r4
 8018924:	4628      	mov	r0, r5
 8018926:	f000 f907 	bl	8018b38 <__smakebuf_r>
 801892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801892e:	f013 0201 	ands.w	r2, r3, #1
 8018932:	d00a      	beq.n	801894a <__swsetup_r+0x9a>
 8018934:	2200      	movs	r2, #0
 8018936:	60a2      	str	r2, [r4, #8]
 8018938:	6962      	ldr	r2, [r4, #20]
 801893a:	4252      	negs	r2, r2
 801893c:	61a2      	str	r2, [r4, #24]
 801893e:	6922      	ldr	r2, [r4, #16]
 8018940:	b942      	cbnz	r2, 8018954 <__swsetup_r+0xa4>
 8018942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018946:	d1c5      	bne.n	80188d4 <__swsetup_r+0x24>
 8018948:	bd38      	pop	{r3, r4, r5, pc}
 801894a:	0799      	lsls	r1, r3, #30
 801894c:	bf58      	it	pl
 801894e:	6962      	ldrpl	r2, [r4, #20]
 8018950:	60a2      	str	r2, [r4, #8]
 8018952:	e7f4      	b.n	801893e <__swsetup_r+0x8e>
 8018954:	2000      	movs	r0, #0
 8018956:	e7f7      	b.n	8018948 <__swsetup_r+0x98>
 8018958:	20000038 	.word	0x20000038

0801895c <_raise_r>:
 801895c:	291f      	cmp	r1, #31
 801895e:	b538      	push	{r3, r4, r5, lr}
 8018960:	4605      	mov	r5, r0
 8018962:	460c      	mov	r4, r1
 8018964:	d904      	bls.n	8018970 <_raise_r+0x14>
 8018966:	2316      	movs	r3, #22
 8018968:	6003      	str	r3, [r0, #0]
 801896a:	f04f 30ff 	mov.w	r0, #4294967295
 801896e:	bd38      	pop	{r3, r4, r5, pc}
 8018970:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018972:	b112      	cbz	r2, 801897a <_raise_r+0x1e>
 8018974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018978:	b94b      	cbnz	r3, 801898e <_raise_r+0x32>
 801897a:	4628      	mov	r0, r5
 801897c:	f000 f830 	bl	80189e0 <_getpid_r>
 8018980:	4622      	mov	r2, r4
 8018982:	4601      	mov	r1, r0
 8018984:	4628      	mov	r0, r5
 8018986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801898a:	f000 b817 	b.w	80189bc <_kill_r>
 801898e:	2b01      	cmp	r3, #1
 8018990:	d00a      	beq.n	80189a8 <_raise_r+0x4c>
 8018992:	1c59      	adds	r1, r3, #1
 8018994:	d103      	bne.n	801899e <_raise_r+0x42>
 8018996:	2316      	movs	r3, #22
 8018998:	6003      	str	r3, [r0, #0]
 801899a:	2001      	movs	r0, #1
 801899c:	e7e7      	b.n	801896e <_raise_r+0x12>
 801899e:	2100      	movs	r1, #0
 80189a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80189a4:	4620      	mov	r0, r4
 80189a6:	4798      	blx	r3
 80189a8:	2000      	movs	r0, #0
 80189aa:	e7e0      	b.n	801896e <_raise_r+0x12>

080189ac <raise>:
 80189ac:	4b02      	ldr	r3, [pc, #8]	@ (80189b8 <raise+0xc>)
 80189ae:	4601      	mov	r1, r0
 80189b0:	6818      	ldr	r0, [r3, #0]
 80189b2:	f7ff bfd3 	b.w	801895c <_raise_r>
 80189b6:	bf00      	nop
 80189b8:	20000038 	.word	0x20000038

080189bc <_kill_r>:
 80189bc:	b538      	push	{r3, r4, r5, lr}
 80189be:	4d07      	ldr	r5, [pc, #28]	@ (80189dc <_kill_r+0x20>)
 80189c0:	2300      	movs	r3, #0
 80189c2:	4604      	mov	r4, r0
 80189c4:	4608      	mov	r0, r1
 80189c6:	4611      	mov	r1, r2
 80189c8:	602b      	str	r3, [r5, #0]
 80189ca:	f7f3 fd09 	bl	800c3e0 <_kill>
 80189ce:	1c43      	adds	r3, r0, #1
 80189d0:	d102      	bne.n	80189d8 <_kill_r+0x1c>
 80189d2:	682b      	ldr	r3, [r5, #0]
 80189d4:	b103      	cbz	r3, 80189d8 <_kill_r+0x1c>
 80189d6:	6023      	str	r3, [r4, #0]
 80189d8:	bd38      	pop	{r3, r4, r5, pc}
 80189da:	bf00      	nop
 80189dc:	2000a974 	.word	0x2000a974

080189e0 <_getpid_r>:
 80189e0:	f7f3 bcf6 	b.w	800c3d0 <_getpid>

080189e4 <_malloc_usable_size_r>:
 80189e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189e8:	1f18      	subs	r0, r3, #4
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	bfbc      	itt	lt
 80189ee:	580b      	ldrlt	r3, [r1, r0]
 80189f0:	18c0      	addlt	r0, r0, r3
 80189f2:	4770      	bx	lr

080189f4 <_strtol_l.isra.0>:
 80189f4:	2b24      	cmp	r3, #36	@ 0x24
 80189f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189fa:	4686      	mov	lr, r0
 80189fc:	4690      	mov	r8, r2
 80189fe:	d801      	bhi.n	8018a04 <_strtol_l.isra.0+0x10>
 8018a00:	2b01      	cmp	r3, #1
 8018a02:	d106      	bne.n	8018a12 <_strtol_l.isra.0+0x1e>
 8018a04:	f7fd fa9e 	bl	8015f44 <__errno>
 8018a08:	2316      	movs	r3, #22
 8018a0a:	6003      	str	r3, [r0, #0]
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a12:	4834      	ldr	r0, [pc, #208]	@ (8018ae4 <_strtol_l.isra.0+0xf0>)
 8018a14:	460d      	mov	r5, r1
 8018a16:	462a      	mov	r2, r5
 8018a18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a1c:	5d06      	ldrb	r6, [r0, r4]
 8018a1e:	f016 0608 	ands.w	r6, r6, #8
 8018a22:	d1f8      	bne.n	8018a16 <_strtol_l.isra.0+0x22>
 8018a24:	2c2d      	cmp	r4, #45	@ 0x2d
 8018a26:	d110      	bne.n	8018a4a <_strtol_l.isra.0+0x56>
 8018a28:	782c      	ldrb	r4, [r5, #0]
 8018a2a:	2601      	movs	r6, #1
 8018a2c:	1c95      	adds	r5, r2, #2
 8018a2e:	f033 0210 	bics.w	r2, r3, #16
 8018a32:	d115      	bne.n	8018a60 <_strtol_l.isra.0+0x6c>
 8018a34:	2c30      	cmp	r4, #48	@ 0x30
 8018a36:	d10d      	bne.n	8018a54 <_strtol_l.isra.0+0x60>
 8018a38:	782a      	ldrb	r2, [r5, #0]
 8018a3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018a3e:	2a58      	cmp	r2, #88	@ 0x58
 8018a40:	d108      	bne.n	8018a54 <_strtol_l.isra.0+0x60>
 8018a42:	786c      	ldrb	r4, [r5, #1]
 8018a44:	3502      	adds	r5, #2
 8018a46:	2310      	movs	r3, #16
 8018a48:	e00a      	b.n	8018a60 <_strtol_l.isra.0+0x6c>
 8018a4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8018a4c:	bf04      	itt	eq
 8018a4e:	782c      	ldrbeq	r4, [r5, #0]
 8018a50:	1c95      	addeq	r5, r2, #2
 8018a52:	e7ec      	b.n	8018a2e <_strtol_l.isra.0+0x3a>
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d1f6      	bne.n	8018a46 <_strtol_l.isra.0+0x52>
 8018a58:	2c30      	cmp	r4, #48	@ 0x30
 8018a5a:	bf14      	ite	ne
 8018a5c:	230a      	movne	r3, #10
 8018a5e:	2308      	moveq	r3, #8
 8018a60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018a64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a68:	2200      	movs	r2, #0
 8018a6a:	fbbc f9f3 	udiv	r9, ip, r3
 8018a6e:	4610      	mov	r0, r2
 8018a70:	fb03 ca19 	mls	sl, r3, r9, ip
 8018a74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018a78:	2f09      	cmp	r7, #9
 8018a7a:	d80f      	bhi.n	8018a9c <_strtol_l.isra.0+0xa8>
 8018a7c:	463c      	mov	r4, r7
 8018a7e:	42a3      	cmp	r3, r4
 8018a80:	dd1b      	ble.n	8018aba <_strtol_l.isra.0+0xc6>
 8018a82:	1c57      	adds	r7, r2, #1
 8018a84:	d007      	beq.n	8018a96 <_strtol_l.isra.0+0xa2>
 8018a86:	4581      	cmp	r9, r0
 8018a88:	d314      	bcc.n	8018ab4 <_strtol_l.isra.0+0xc0>
 8018a8a:	d101      	bne.n	8018a90 <_strtol_l.isra.0+0x9c>
 8018a8c:	45a2      	cmp	sl, r4
 8018a8e:	db11      	blt.n	8018ab4 <_strtol_l.isra.0+0xc0>
 8018a90:	fb00 4003 	mla	r0, r0, r3, r4
 8018a94:	2201      	movs	r2, #1
 8018a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a9a:	e7eb      	b.n	8018a74 <_strtol_l.isra.0+0x80>
 8018a9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018aa0:	2f19      	cmp	r7, #25
 8018aa2:	d801      	bhi.n	8018aa8 <_strtol_l.isra.0+0xb4>
 8018aa4:	3c37      	subs	r4, #55	@ 0x37
 8018aa6:	e7ea      	b.n	8018a7e <_strtol_l.isra.0+0x8a>
 8018aa8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018aac:	2f19      	cmp	r7, #25
 8018aae:	d804      	bhi.n	8018aba <_strtol_l.isra.0+0xc6>
 8018ab0:	3c57      	subs	r4, #87	@ 0x57
 8018ab2:	e7e4      	b.n	8018a7e <_strtol_l.isra.0+0x8a>
 8018ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ab8:	e7ed      	b.n	8018a96 <_strtol_l.isra.0+0xa2>
 8018aba:	1c53      	adds	r3, r2, #1
 8018abc:	d108      	bne.n	8018ad0 <_strtol_l.isra.0+0xdc>
 8018abe:	2322      	movs	r3, #34	@ 0x22
 8018ac0:	f8ce 3000 	str.w	r3, [lr]
 8018ac4:	4660      	mov	r0, ip
 8018ac6:	f1b8 0f00 	cmp.w	r8, #0
 8018aca:	d0a0      	beq.n	8018a0e <_strtol_l.isra.0+0x1a>
 8018acc:	1e69      	subs	r1, r5, #1
 8018ace:	e006      	b.n	8018ade <_strtol_l.isra.0+0xea>
 8018ad0:	b106      	cbz	r6, 8018ad4 <_strtol_l.isra.0+0xe0>
 8018ad2:	4240      	negs	r0, r0
 8018ad4:	f1b8 0f00 	cmp.w	r8, #0
 8018ad8:	d099      	beq.n	8018a0e <_strtol_l.isra.0+0x1a>
 8018ada:	2a00      	cmp	r2, #0
 8018adc:	d1f6      	bne.n	8018acc <_strtol_l.isra.0+0xd8>
 8018ade:	f8c8 1000 	str.w	r1, [r8]
 8018ae2:	e794      	b.n	8018a0e <_strtol_l.isra.0+0x1a>
 8018ae4:	0801acd1 	.word	0x0801acd1

08018ae8 <_strtol_r>:
 8018ae8:	f7ff bf84 	b.w	80189f4 <_strtol_l.isra.0>

08018aec <__swhatbuf_r>:
 8018aec:	b570      	push	{r4, r5, r6, lr}
 8018aee:	460c      	mov	r4, r1
 8018af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018af4:	2900      	cmp	r1, #0
 8018af6:	b096      	sub	sp, #88	@ 0x58
 8018af8:	4615      	mov	r5, r2
 8018afa:	461e      	mov	r6, r3
 8018afc:	da0d      	bge.n	8018b1a <__swhatbuf_r+0x2e>
 8018afe:	89a3      	ldrh	r3, [r4, #12]
 8018b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b04:	f04f 0100 	mov.w	r1, #0
 8018b08:	bf14      	ite	ne
 8018b0a:	2340      	movne	r3, #64	@ 0x40
 8018b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b10:	2000      	movs	r0, #0
 8018b12:	6031      	str	r1, [r6, #0]
 8018b14:	602b      	str	r3, [r5, #0]
 8018b16:	b016      	add	sp, #88	@ 0x58
 8018b18:	bd70      	pop	{r4, r5, r6, pc}
 8018b1a:	466a      	mov	r2, sp
 8018b1c:	f000 f848 	bl	8018bb0 <_fstat_r>
 8018b20:	2800      	cmp	r0, #0
 8018b22:	dbec      	blt.n	8018afe <__swhatbuf_r+0x12>
 8018b24:	9901      	ldr	r1, [sp, #4]
 8018b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018b2e:	4259      	negs	r1, r3
 8018b30:	4159      	adcs	r1, r3
 8018b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018b36:	e7eb      	b.n	8018b10 <__swhatbuf_r+0x24>

08018b38 <__smakebuf_r>:
 8018b38:	898b      	ldrh	r3, [r1, #12]
 8018b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b3c:	079d      	lsls	r5, r3, #30
 8018b3e:	4606      	mov	r6, r0
 8018b40:	460c      	mov	r4, r1
 8018b42:	d507      	bpl.n	8018b54 <__smakebuf_r+0x1c>
 8018b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	6123      	str	r3, [r4, #16]
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	6163      	str	r3, [r4, #20]
 8018b50:	b003      	add	sp, #12
 8018b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b54:	ab01      	add	r3, sp, #4
 8018b56:	466a      	mov	r2, sp
 8018b58:	f7ff ffc8 	bl	8018aec <__swhatbuf_r>
 8018b5c:	9f00      	ldr	r7, [sp, #0]
 8018b5e:	4605      	mov	r5, r0
 8018b60:	4639      	mov	r1, r7
 8018b62:	4630      	mov	r0, r6
 8018b64:	f7fe f974 	bl	8016e50 <_malloc_r>
 8018b68:	b948      	cbnz	r0, 8018b7e <__smakebuf_r+0x46>
 8018b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b6e:	059a      	lsls	r2, r3, #22
 8018b70:	d4ee      	bmi.n	8018b50 <__smakebuf_r+0x18>
 8018b72:	f023 0303 	bic.w	r3, r3, #3
 8018b76:	f043 0302 	orr.w	r3, r3, #2
 8018b7a:	81a3      	strh	r3, [r4, #12]
 8018b7c:	e7e2      	b.n	8018b44 <__smakebuf_r+0xc>
 8018b7e:	89a3      	ldrh	r3, [r4, #12]
 8018b80:	6020      	str	r0, [r4, #0]
 8018b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b86:	81a3      	strh	r3, [r4, #12]
 8018b88:	9b01      	ldr	r3, [sp, #4]
 8018b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018b8e:	b15b      	cbz	r3, 8018ba8 <__smakebuf_r+0x70>
 8018b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b94:	4630      	mov	r0, r6
 8018b96:	f000 f81d 	bl	8018bd4 <_isatty_r>
 8018b9a:	b128      	cbz	r0, 8018ba8 <__smakebuf_r+0x70>
 8018b9c:	89a3      	ldrh	r3, [r4, #12]
 8018b9e:	f023 0303 	bic.w	r3, r3, #3
 8018ba2:	f043 0301 	orr.w	r3, r3, #1
 8018ba6:	81a3      	strh	r3, [r4, #12]
 8018ba8:	89a3      	ldrh	r3, [r4, #12]
 8018baa:	431d      	orrs	r5, r3
 8018bac:	81a5      	strh	r5, [r4, #12]
 8018bae:	e7cf      	b.n	8018b50 <__smakebuf_r+0x18>

08018bb0 <_fstat_r>:
 8018bb0:	b538      	push	{r3, r4, r5, lr}
 8018bb2:	4d07      	ldr	r5, [pc, #28]	@ (8018bd0 <_fstat_r+0x20>)
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	4608      	mov	r0, r1
 8018bba:	4611      	mov	r1, r2
 8018bbc:	602b      	str	r3, [r5, #0]
 8018bbe:	f7f3 fc6f 	bl	800c4a0 <_fstat>
 8018bc2:	1c43      	adds	r3, r0, #1
 8018bc4:	d102      	bne.n	8018bcc <_fstat_r+0x1c>
 8018bc6:	682b      	ldr	r3, [r5, #0]
 8018bc8:	b103      	cbz	r3, 8018bcc <_fstat_r+0x1c>
 8018bca:	6023      	str	r3, [r4, #0]
 8018bcc:	bd38      	pop	{r3, r4, r5, pc}
 8018bce:	bf00      	nop
 8018bd0:	2000a974 	.word	0x2000a974

08018bd4 <_isatty_r>:
 8018bd4:	b538      	push	{r3, r4, r5, lr}
 8018bd6:	4d06      	ldr	r5, [pc, #24]	@ (8018bf0 <_isatty_r+0x1c>)
 8018bd8:	2300      	movs	r3, #0
 8018bda:	4604      	mov	r4, r0
 8018bdc:	4608      	mov	r0, r1
 8018bde:	602b      	str	r3, [r5, #0]
 8018be0:	f7f3 fc6e 	bl	800c4c0 <_isatty>
 8018be4:	1c43      	adds	r3, r0, #1
 8018be6:	d102      	bne.n	8018bee <_isatty_r+0x1a>
 8018be8:	682b      	ldr	r3, [r5, #0]
 8018bea:	b103      	cbz	r3, 8018bee <_isatty_r+0x1a>
 8018bec:	6023      	str	r3, [r4, #0]
 8018bee:	bd38      	pop	{r3, r4, r5, pc}
 8018bf0:	2000a974 	.word	0x2000a974

08018bf4 <_init>:
 8018bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bf6:	bf00      	nop
 8018bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bfa:	bc08      	pop	{r3}
 8018bfc:	469e      	mov	lr, r3
 8018bfe:	4770      	bx	lr

08018c00 <_fini>:
 8018c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c02:	bf00      	nop
 8018c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c06:	bc08      	pop	{r3}
 8018c08:	469e      	mov	lr, r3
 8018c0a:	4770      	bx	lr
 8018c0c:	0000      	movs	r0, r0
	...

08018c10 <__FLASH_Program_Fast_veneer>:
 8018c10:	f85f f000 	ldr.w	pc, [pc]	@ 8018c14 <__FLASH_Program_Fast_veneer+0x4>
 8018c14:	2000024d 	.word	0x2000024d

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000001                                ....

20000010 <debugMessages>:
20000010:	00350017                                ..5.

20000014 <environ>:
20000014:	2000a74c                                L.. 

20000018 <SystemCoreClock>:
20000018:	003d0900                                ..=.

2000001c <uwTickPrio>:
2000001c:	00000010                                ....

20000020 <uwTickFreq>:
20000020:	00000001                                ....

20000024 <__sglue>:
20000024:	00000000 00000003 2000a814              ........... 

20000030 <_tzname>:
20000030:	0801a981 0801a981                       ........

20000038 <_impure_ptr>:
20000038:	2000003c                                <.. 

2000003c <_impure_data>:
2000003c:	00000000 2000a814 2000a87c 2000a8e4     ....... |.. ... 
	...

20000088 <tzinfo>:
20000088:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000b8:	0000004a 00000000 00000000 00000000     J...............
	...

200000e0 <__global_locale>:
200000e0:	00000043 00000000 00000000 00000000     C...............
	...
20000100:	00000043 00000000 00000000 00000000     C...............
	...
20000120:	00000043 00000000 00000000 00000000     C...............
	...
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	08017e71 08017df1 00000000 0801acd0     q~...}..........
200001d0:	0801aaf0 0801aa07 0801aa07 0801aa07     ................
200001e0:	0801aa07 0801aa07 0801aa07 0801aa07     ................
200001f0:	0801aa07 0801aa07 ffffffff ffffffff     ................
20000200:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000228:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000024c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000024c:	b480      	push	{r7}
2000024e:	b089      	sub	sp, #36	@ 0x24
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
20000254:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000256:	2380      	movs	r3, #128	@ 0x80
20000258:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000025e:	683b      	ldr	r3, [r7, #0]
20000260:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000262:	4b18      	ldr	r3, [pc, #96]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000264:	695b      	ldr	r3, [r3, #20]
20000266:	4a17      	ldr	r2, [pc, #92]	@ (200002c4 <FLASH_Program_Fast+0x78>)
20000268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2000026c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026e:	f3ef 8310 	mrs	r3, PRIMASK
20000272:	60fb      	str	r3, [r7, #12]
  return(result);
20000274:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000278:	b672      	cpsid	i
}
2000027a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	681a      	ldr	r2, [r3, #0]
20000280:	69bb      	ldr	r3, [r7, #24]
20000282:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000284:	69bb      	ldr	r3, [r7, #24]
20000286:	3304      	adds	r3, #4
20000288:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	3304      	adds	r3, #4
2000028e:	617b      	str	r3, [r7, #20]
    row_index--;
20000290:	7ffb      	ldrb	r3, [r7, #31]
20000292:	3b01      	subs	r3, #1
20000294:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000296:	7ffb      	ldrb	r3, [r7, #31]
20000298:	2b00      	cmp	r3, #0
2000029a:	d1ef      	bne.n	2000027c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
2000029c:	bf00      	nop
2000029e:	4b09      	ldr	r3, [pc, #36]	@ (200002c4 <FLASH_Program_Fast+0x78>)
200002a0:	691b      	ldr	r3, [r3, #16]
200002a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002aa:	d0f8      	beq.n	2000029e <FLASH_Program_Fast+0x52>
200002ac:	693b      	ldr	r3, [r7, #16]
200002ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b0:	68bb      	ldr	r3, [r7, #8]
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002b8:	bf00      	nop
200002ba:	3724      	adds	r7, #36	@ 0x24
200002bc:	46bd      	mov	sp, r7
200002be:	f85d 7b04 	ldr.w	r7, [sp], #4
200002c2:	4770      	bx	lr
200002c4:	58004000 	.word	0x58004000
